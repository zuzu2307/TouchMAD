
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000265bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005200  0802678c  0802678c  0003678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00005260  0802b98c  0802b98c  0003b98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000af630  08030bec  08030bec  00040bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000188  080e021c  080e021c  000f021c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080e03a4  080e03a4  001000fc  2**0
                  CONTENTS
  7 .ARM          00000008  080e03a4  080e03a4  000f03a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080e03ac  080e03ac  001000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080e03ac  080e03ac  000f03ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080e03c0  080e03c0  000f03c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080e03c8  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ba54  200000fc  080e04c4  001000fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000bb50  080e04c4  0010bb50  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  001000fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000faab9  00000000  00000000  0010012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00019525  00000000  00000000  001fabe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005890  00000000  00000000  00214110  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005158  00000000  00000000  002199a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003f7ca  00000000  00000000  0021eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0005155c  00000000  00000000  0025e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013a714  00000000  00000000  002af81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003e9f32  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00017e30  00000000  00000000  003ea02c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026774 	.word	0x08026774

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08026774 	.word	0x08026774

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00b fa72 	bl	800baa4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00b fa2d 	bl	800ba68 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00b f9f7 	bl	800ba68 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00b f944 	bl	800ba68 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00b f936 	bl	800ba68 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00b f91b 	bl	800ba68 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00b f90d 	bl	800ba68 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00b f8c0 	bl	800ba34 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00b f8ac 	bl	800ba34 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00b f871 	bl	800ba20 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PollingControlMusicInit>:
uint8_t msg;

//extern osSemaphoreId binarySemControlQHandle;

void PollingControlMusicInit()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	music_msg_q = xQueueGenericCreate(1, 1, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	2001      	movs	r0, #1
 8000972:	f008 fcae 	bl	80092d2 <xQueueGenericCreate>
 8000976:	4602      	mov	r2, r0
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <PollingControlMusicInit+0x48>)
 800097a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <PollingControlMusicInit+0x4c>)
 8000984:	f003 fc72 	bl	800426c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <PollingControlMusicInit+0x50>)
 8000990:	f003 fc6c 	bl	800426c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <PollingControlMusicInit+0x50>)
 800099c:	f003 fc66 	bl	800426c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <PollingControlMusicInit+0x54>)
 80009a6:	f003 fc61 	bl	800426c <HAL_GPIO_WritePin>

	//xSemaphoreGive(binarySemControlQHandle);
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000b62c 	.word	0x2000b62c
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40022000 	.word	0x40022000

080009c0 <signalOut>:

void signalOut(uint8_t controlSignal)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState n2_stat = RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState n1_stat = RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState n0_stat = RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	737b      	strb	r3, [r7, #13]

	switch (controlSignal)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d82f      	bhi.n	8000a3e <signalOut+0x7e>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <signalOut+0x24>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a01 	.word	0x08000a01
 80009e8:	08000a07 	.word	0x08000a07
 80009ec:	08000a0d 	.word	0x08000a0d
 80009f0:	08000a17 	.word	0x08000a17
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	08000a27 	.word	0x08000a27
 80009fc:	08000a31 	.word	0x08000a31
	{
	case 1:
		n0_stat = SET;
 8000a00:	2301      	movs	r3, #1
 8000a02:	737b      	strb	r3, [r7, #13]
		break;
 8000a04:	e01b      	b.n	8000a3e <signalOut+0x7e>
	case 2:
		n1_stat = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]
		break;
 8000a0a:	e018      	b.n	8000a3e <signalOut+0x7e>
	case 3:
		n0_stat = SET;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73bb      	strb	r3, [r7, #14]
		break;
 8000a14:	e013      	b.n	8000a3e <signalOut+0x7e>
	case 4:
		n2_stat = SET;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
		break;
 8000a1a:	e010      	b.n	8000a3e <signalOut+0x7e>
	case 5:
		n0_stat = SET;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	737b      	strb	r3, [r7, #13]
		n2_stat = SET;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
		break;
 8000a24:	e00b      	b.n	8000a3e <signalOut+0x7e>
	case 6:
		n1_stat = SET;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a2e:	e006      	b.n	8000a3e <signalOut+0x7e>
	case 7:
		n0_stat = SET;
 8000a30:	2301      	movs	r3, #1
 8000a32:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8000a3c:	bf00      	nop
	}


	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, n2_stat);
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	461a      	mov	r2, r3
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <signalOut+0xb0>)
 8000a48:	f003 fc10 	bl	800426c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, n1_stat);
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <signalOut+0xb0>)
 8000a56:	f003 fc09 	bl	800426c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, n0_stat);
 8000a5a:	7b7b      	ldrb	r3, [r7, #13]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <signalOut+0xb4>)
 8000a62:	f003 fc03 	bl	800426c <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40022000 	.word	0x40022000

08000a78 <PollingControlMusic>:

// PORT LSB->MSB I-A-A-B
void PollingControlMusic()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (xQueueReceive(music_msg_q, &msg, 0) == pdTRUE)
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <PollingControlMusic+0x4c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4911      	ldr	r1, [pc, #68]	; (8000ac8 <PollingControlMusic+0x50>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f008 fe87 	bl	8009798 <xQueueReceive>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d116      	bne.n	8000abe <PollingControlMusic+0x46>
	{
		signalOut(msg);
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <PollingControlMusic+0x50>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff93 	bl	80009c0 <signalOut>
		vTaskDelay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f009 fbbc 	bl	800a218 <vTaskDelay>

		// Pulse out
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <PollingControlMusic+0x54>)
 8000aa8:	f003 fbe0 	bl	800426c <HAL_GPIO_WritePin>
		vTaskDelay(2);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f009 fbb3 	bl	800a218 <vTaskDelay>
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <PollingControlMusic+0x54>)
 8000aba:	f003 fbd7 	bl	800426c <HAL_GPIO_WritePin>
		//xSemaphoreGive(binarySemControlQHandle);

	}
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000b62c 	.word	0x2000b62c
 8000ac8:	2000b628 	.word	0x2000b628
 8000acc:	40020400 	.word	0x40020400

08000ad0 <PollingInit>:
uint8_t uartMsgBuffer[UART_BUFF_SIZE];
uint8_t uartMsgData[2];
uint8_t msgIndex = 0;
uint8_t msgRdyFlag = 0;

void PollingInit(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4903      	ldr	r1, [pc, #12]	; (8000ae4 <PollingInit+0x14>)
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <PollingInit+0x18>)
 8000ada:	f007 f90f 	bl	8007cfc <HAL_UART_Receive_IT>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000b630 	.word	0x2000b630
 8000ae8:	2000b9c4 	.word	0x2000b9c4

08000aec <PollingRoutine>:


void PollingRoutine(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	if(msgRdyFlag){
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <PollingRoutine+0x24>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d009      	beq.n	8000b0c <PollingRoutine+0x20>
		xSemaphoreGive(binarySemMsgUartHandle);
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <PollingRoutine+0x28>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	f008 fcb5 	bl	8009470 <xQueueGenericSend>
		msgRdyFlag = 0;
 8000b06:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <PollingRoutine+0x24>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	}

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000011f 	.word	0x2000011f
 8000b14:	2000b99c 	.word	0x2000b99c

08000b18 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(msgIndex == 0){
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x1a>
		memset(&uartMsgBuffer, 0, sizeof(uartMsgBuffer));
 8000b28:	2210      	movs	r2, #16
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4816      	ldr	r0, [pc, #88]	; (8000b88 <HAL_UART_RxCpltCallback+0x70>)
 8000b2e:	f024 fe70 	bl	8025812 <memset>
	}

	if(uartMsgData[0] == 13 || msgIndex==15){
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_UART_RxCpltCallback+0x74>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b0d      	cmp	r3, #13
 8000b38:	d003      	beq.n	8000b42 <HAL_UART_RxCpltCallback+0x2a>
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d10c      	bne.n	8000b5c <HAL_UART_RxCpltCallback+0x44>
		uartMsgBuffer[msgIndex] = 0;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_UART_RxCpltCallback+0x70>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	5499      	strb	r1, [r3, r2]
		msgIndex = 0;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]

		msgRdyFlag = 1;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_UART_RxCpltCallback+0x78>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e00a      	b.n	8000b72 <HAL_UART_RxCpltCallback+0x5a>
	}else {
		uartMsgBuffer[msgIndex++] = uartMsgData[0];
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	b2d1      	uxtb	r1, r2
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_UART_RxCpltCallback+0x6c>)
 8000b66:	7011      	strb	r1, [r2, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_UART_RxCpltCallback+0x74>)
 8000b6c:	7819      	ldrb	r1, [r3, #0]
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_UART_RxCpltCallback+0x70>)
 8000b70:	5499      	strb	r1, [r3, r2]
	}

	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	4905      	ldr	r1, [pc, #20]	; (8000b8c <HAL_UART_RxCpltCallback+0x74>)
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <HAL_UART_RxCpltCallback+0x7c>)
 8000b78:	f007 f8c0 	bl	8007cfc <HAL_UART_Receive_IT>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000011e 	.word	0x2000011e
 8000b88:	2000b634 	.word	0x2000b634
 8000b8c:	2000b630 	.word	0x2000b630
 8000b90:	2000011f 	.word	0x2000011f
 8000b94:	2000b9c4 	.word	0x2000b9c4

08000b98 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <vApplicationGetIdleTaskMemory+0x30>)
 8000be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000120 	.word	0x20000120
 8000bfc:	20000178 	.word	0x20000178

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b098      	sub	sp, #96	; 0x60
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f001 ff16 	bl	8002a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f873 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 fdbf 	bl	8001790 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000c12:	f000 f927 	bl	8000e64 <MX_ADC3_Init>
  MX_CRC_Init();
 8000c16:	f000 f977 	bl	8000f08 <MX_CRC_Init>
  MX_DCMI_Init();
 8000c1a:	f000 f997 	bl	8000f4c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000c1e:	f000 f9c9 	bl	8000fb4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000c22:	f000 fd09 	bl	8001638 <MX_FMC_Init>
  MX_I2C1_Init();
 8000c26:	f000 f9f7 	bl	8001018 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c2a:	f000 fa35 	bl	8001098 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000c2e:	f000 fa73 	bl	8001118 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000c32:	f000 fb27 	bl	8001284 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000c36:	f000 fb51 	bl	80012dc <MX_RTC_Init>
  MX_SAI2_Init();
 8000c3a:	f000 fbf5 	bl	8001428 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000c3e:	f000 fc9b 	bl	8001578 <MX_SPDIFRX_Init>
  MX_USART6_UART_Init();
 8000c42:	f000 fcc9 	bl	80015d8 <MX_USART6_UART_Init>
  MX_TouchGFX_Init();
 8000c46:	f00a ff38 	bl	800baba <MX_TouchGFX_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemMsgUart */
  osSemaphoreDef(binarySemMsgUart);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c4e:	2300      	movs	r3, #0
 8000c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  binarySemMsgUartHandle = osSemaphoreCreate(osSemaphore(binarySemMsgUart), 1);
 8000c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c56:	2101      	movs	r1, #1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f008 f8da 	bl	8008e12 <osSemaphoreCreate>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <main+0xd8>)
 8000c62:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <main+0xdc>)
 8000c66:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f008 f867 	bl	8008d52 <osThreadCreate>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <main+0xe0>)
 8000c88:	601a      	str	r2, [r3, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 512);
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <main+0xe4>)
 8000c8c:	f107 0420 	add.w	r4, r7, #32
 8000c90:	461d      	mov	r5, r3
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f008 f854 	bl	8008d52 <osThreadCreate>
 8000caa:	4602      	mov	r2, r0
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <main+0xe8>)
 8000cae:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <main+0xec>)
 8000cb2:	1d3c      	adds	r4, r7, #4
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f008 f843 	bl	8008d52 <osThreadCreate>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <main+0xf0>)
 8000cd0:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cd2:	f008 f837 	bl	8008d44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <main+0xd6>
 8000cd8:	2000b99c 	.word	0x2000b99c
 8000cdc:	08026798 	.word	0x08026798
 8000ce0:	2000b6c8 	.word	0x2000b6c8
 8000ce4:	080267c0 	.word	0x080267c0
 8000ce8:	2000b900 	.word	0x2000b900
 8000cec:	080267e8 	.word	0x080267e8
 8000cf0:	2000bab8 	.word	0x2000bab8

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0b4      	sub	sp, #208	; 0xd0
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cfe:	2230      	movs	r2, #48	; 0x30
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f024 fd85 	bl	8025812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2284      	movs	r2, #132	; 0x84
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f024 fd76 	bl	8025812 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d26:	f004 fc03 	bl	8005530 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <SystemClock_Config+0x164>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <SystemClock_Config+0x164>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <SystemClock_Config+0x164>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d42:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <SystemClock_Config+0x168>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <SystemClock_Config+0x168>)
 8000d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <SystemClock_Config+0x168>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d7c:	2319      	movs	r3, #25
 8000d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d82:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d90:	2309      	movs	r3, #9
 8000d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 fcea 	bl	8005774 <HAL_RCC_OscConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000da6:	f000 ff47 	bl	8001c38 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000daa:	f004 fbd1 	bl	8005550 <HAL_PWREx_EnableOverDrive>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000db4:	f000 ff40 	bl	8001c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db8:	230f      	movs	r3, #15
 8000dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dde:	2106      	movs	r1, #6
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 ff6b 	bl	8005cbc <HAL_RCC_ClockConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000dec:	f000 ff24 	bl	8001c38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <SystemClock_Config+0x16c>)
 8000df2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e12:	2303      	movs	r3, #3
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 f940 	bl	80060c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000e4a:	f000 fef5 	bl	8001c38 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	37d0      	adds	r7, #208	; 0xd0
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000
 8000e60:	01114828 	.word	0x01114828

08000e64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <MX_ADC3_Init+0x9c>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <MX_ADC3_Init+0xa0>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ec6:	f001 fe05 	bl	8002ad4 <HAL_ADC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 feb2 	bl	8001c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ee6:	f001 fe39 	bl	8002b5c <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 fea2 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000b904 	.word	0x2000b904
 8000f00:	40012200 	.word	0x40012200
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <MX_CRC_Init+0x40>)
 8000f10:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_CRC_Init+0x3c>)
 8000f32:	f002 f969 	bl	8003208 <HAL_CRC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f3c:	f000 fe7c 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000b834 	.word	0x2000b834
 8000f48:	40023000 	.word	0x40023000

08000f4c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_DCMI_Init+0x64>)
 8000f54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_DCMI_Init+0x60>)
 8000f9a:	f002 fa1f 	bl	80033dc <HAL_DCMI_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000fa4:	f000 fe48 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000b94c 	.word	0x2000b94c
 8000fb0:	50050000 	.word	0x50050000

08000fb4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fba:	4a16      	ldr	r2, [pc, #88]	; (8001014 <MX_DMA2D_Init+0x60>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000fea:	f002 fa93 	bl	8003514 <HAL_DMA2D_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ff4:	f000 fe20 	bl	8001c38 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_DMA2D_Init+0x5c>)
 8000ffc:	f002 fd54 	bl	8003aa8 <HAL_DMA2D_ConfigLayer>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001006:	f000 fe17 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000ba44 	.word	0x2000ba44
 8001014:	4002b000 	.word	0x4002b000

08001018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_I2C1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_I2C1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_I2C1_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_I2C1_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_I2C1_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_I2C1_Init+0x74>)
 8001054:	f003 f924 	bl	80042a0 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105e:	f000 fdeb 	bl	8001c38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_I2C1_Init+0x74>)
 8001066:	f003 fe33 	bl	8004cd0 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 fde2 	bl	8001c38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_I2C1_Init+0x74>)
 8001078:	f003 fe75 	bl	8004d66 <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fdd9 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000b7e8 	.word	0x2000b7e8
 8001090:	40005400 	.word	0x40005400
 8001094:	00c0eaff 	.word	0x00c0eaff

08001098 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C3_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C3_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C3_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C3_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C3_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C3_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C3_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C3_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C3_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C3_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_I2C3_Init+0x74>)
 80010d4:	f003 f8e4 	bl	80042a0 <HAL_I2C_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010de:	f000 fdab 	bl	8001c38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <MX_I2C3_Init+0x74>)
 80010e6:	f003 fdf3 	bl	8004cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 fda2 	bl	8001c38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_I2C3_Init+0x74>)
 80010f8:	f003 fe35 	bl	8004d66 <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 fd99 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000b6cc 	.word	0x2000b6cc
 8001110:	40005c00 	.word	0x40005c00
 8001114:	00c0eaff 	.word	0x00c0eaff

08001118 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b09a      	sub	sp, #104	; 0x68
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800111e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001122:	2234      	movs	r2, #52	; 0x34
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f024 fb73 	bl	8025812 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2234      	movs	r2, #52	; 0x34
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f024 fb6d 	bl	8025812 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <MX_LTDC_Init+0x164>)
 800113a:	4a51      	ldr	r2, [pc, #324]	; (8001280 <MX_LTDC_Init+0x168>)
 800113c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MX_LTDC_Init+0x164>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <MX_LTDC_Init+0x164>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800114a:	4b4c      	ldr	r3, [pc, #304]	; (800127c <MX_LTDC_Init+0x164>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001150:	4b4a      	ldr	r3, [pc, #296]	; (800127c <MX_LTDC_Init+0x164>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <MX_LTDC_Init+0x164>)
 8001158:	2228      	movs	r2, #40	; 0x28
 800115a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <MX_LTDC_Init+0x164>)
 800115e:	2209      	movs	r2, #9
 8001160:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001162:	4b46      	ldr	r3, [pc, #280]	; (800127c <MX_LTDC_Init+0x164>)
 8001164:	2235      	movs	r2, #53	; 0x35
 8001166:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001168:	4b44      	ldr	r3, [pc, #272]	; (800127c <MX_LTDC_Init+0x164>)
 800116a:	220b      	movs	r2, #11
 800116c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <MX_LTDC_Init+0x164>)
 8001170:	f240 2215 	movw	r2, #533	; 0x215
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <MX_LTDC_Init+0x164>)
 8001178:	f240 121b 	movw	r2, #283	; 0x11b
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800117e:	4b3f      	ldr	r3, [pc, #252]	; (800127c <MX_LTDC_Init+0x164>)
 8001180:	f240 2235 	movw	r2, #565	; 0x235
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <MX_LTDC_Init+0x164>)
 8001188:	f240 121d 	movw	r2, #285	; 0x11d
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <MX_LTDC_Init+0x164>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <MX_LTDC_Init+0x164>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <MX_LTDC_Init+0x164>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011a6:	4835      	ldr	r0, [pc, #212]	; (800127c <MX_LTDC_Init+0x164>)
 80011a8:	f003 fe2a 	bl	8004e00 <HAL_LTDC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011b2:	f000 fd41 	bl	8001c38 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80011ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80011c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80011ca:	2301      	movs	r3, #1
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80011ce:	23ff      	movs	r3, #255	; 0xff
 80011d0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011dc:	2305      	movs	r3, #5
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80011e0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80011e4:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80011e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80011ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011f0:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001204:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <MX_LTDC_Init+0x164>)
 800120e:	f003 ff7f 	bl	8005110 <HAL_LTDC_ConfigLayer>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001218:	f000 fd0e 	bl	8001c38 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001238:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800123a:	2305      	movs	r3, #5
 800123c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_LTDC_Init+0x164>)
 8001264:	f003 ff54 	bl	8005110 <HAL_LTDC_ConfigLayer>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800126e:	f000 fce3 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000b858 	.word	0x2000b858
 8001280:	40016800 	.word	0x40016800

08001284 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <MX_QUADSPI_Init+0x54>)
 800128c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 8001296:	2201      	movs	r2, #1
 8001298:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_QUADSPI_Init+0x50>)
 80012c0:	f004 f996 	bl	80055f0 <HAL_QSPI_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80012ca:	f000 fcb5 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000babc 	.word	0x2000babc
 80012d8:	a0001000 	.word	0xa0001000

080012dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b092      	sub	sp, #72	; 0x48
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	222c      	movs	r2, #44	; 0x2c
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f024 fa87 	bl	8025812 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <MX_RTC_Init+0x144>)
 8001306:	4a47      	ldr	r2, [pc, #284]	; (8001424 <MX_RTC_Init+0x148>)
 8001308:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800130a:	4b45      	ldr	r3, [pc, #276]	; (8001420 <MX_RTC_Init+0x144>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <MX_RTC_Init+0x144>)
 8001312:	227f      	movs	r2, #127	; 0x7f
 8001314:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <MX_RTC_Init+0x144>)
 8001318:	22ff      	movs	r2, #255	; 0xff
 800131a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <MX_RTC_Init+0x144>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <MX_RTC_Init+0x144>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001328:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <MX_RTC_Init+0x144>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800132e:	483c      	ldr	r0, [pc, #240]	; (8001420 <MX_RTC_Init+0x144>)
 8001330:	f005 fbea 	bl	8006b08 <HAL_RTC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800133a:	f000 fc7d 	bl	8001c38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800135c:	2201      	movs	r2, #1
 800135e:	4619      	mov	r1, r3
 8001360:	482f      	ldr	r0, [pc, #188]	; (8001420 <MX_RTC_Init+0x144>)
 8001362:	f005 fc4d 	bl	8006c00 <HAL_RTC_SetTime>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800136c:	f000 fc64 	bl	8001c38 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001370:	2301      	movs	r3, #1
 8001372:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001376:	2301      	movs	r3, #1
 8001378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800137c:	2301      	movs	r3, #1
 800137e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001382:	2300      	movs	r3, #0
 8001384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	4619      	mov	r1, r3
 8001390:	4823      	ldr	r0, [pc, #140]	; (8001420 <MX_RTC_Init+0x144>)
 8001392:	f005 fcf3 	bl	8006d7c <HAL_RTC_SetDate>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800139c:	f000 fc4c 	bl	8001c38 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80013ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <MX_RTC_Init+0x144>)
 80013d8:	f005 fd78 	bl	8006ecc <HAL_RTC_SetAlarm>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80013e2:	f000 fc29 	bl	8001c38 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80013e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2201      	movs	r2, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <MX_RTC_Init+0x144>)
 80013f4:	f005 fd6a 	bl	8006ecc <HAL_RTC_SetAlarm>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80013fe:	f000 fc1b 	bl	8001c38 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001402:	2202      	movs	r2, #2
 8001404:	2100      	movs	r1, #0
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_RTC_Init+0x144>)
 8001408:	f005 feea 	bl	80071e0 <HAL_RTCEx_SetTimeStamp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001412:	f000 fc11 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3748      	adds	r7, #72	; 0x48
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000b9a0 	.word	0x2000b9a0
 8001424:	40002800 	.word	0x40002800

08001428 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <MX_SAI2_Init+0x13c>)
 800142e:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <MX_SAI2_Init+0x140>)
 8001430:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001432:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <MX_SAI2_Init+0x13c>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <MX_SAI2_Init+0x13c>)
 800144c:	2200      	movs	r2, #0
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <MX_SAI2_Init+0x13c>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001462:	4b40      	ldr	r3, [pc, #256]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <MX_SAI2_Init+0x13c>)
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <MX_SAI2_Init+0x144>)
 800146c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <MX_SAI2_Init+0x13c>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001480:	4b38      	ldr	r3, [pc, #224]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001488:	2208      	movs	r2, #8
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800148c:	4b35      	ldr	r3, [pc, #212]	; (8001564 <MX_SAI2_Init+0x13c>)
 800148e:	2201      	movs	r2, #1
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <MX_SAI2_Init+0x13c>)
 8001494:	2200      	movs	r2, #0
 8001496:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001498:	4b32      	ldr	r3, [pc, #200]	; (8001564 <MX_SAI2_Init+0x13c>)
 800149a:	2200      	movs	r2, #0
 800149c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80014bc:	4829      	ldr	r0, [pc, #164]	; (8001564 <MX_SAI2_Init+0x13c>)
 80014be:	f005 fee5 	bl	800728c <HAL_SAI_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80014c8:	f000 fbb6 	bl	8001c38 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <MX_SAI2_Init+0x148>)
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <MX_SAI2_Init+0x14c>)
 80014d0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_SAI2_Init+0x148>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <MX_SAI2_Init+0x148>)
 80014da:	2203      	movs	r2, #3
 80014dc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_SAI2_Init+0x148>)
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_SAI2_Init+0x148>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_SAI2_Init+0x148>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_SAI2_Init+0x148>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_SAI2_Init+0x148>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_SAI2_Init+0x148>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_SAI2_Init+0x148>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_SAI2_Init+0x148>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_SAI2_Init+0x148>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_SAI2_Init+0x148>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_SAI2_Init+0x148>)
 800151c:	2208      	movs	r2, #8
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_SAI2_Init+0x148>)
 8001522:	2201      	movs	r2, #1
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_SAI2_Init+0x148>)
 8001528:	2200      	movs	r2, #0
 800152a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_SAI2_Init+0x148>)
 800152e:	2200      	movs	r2, #0
 8001530:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SAI2_Init+0x148>)
 8001534:	2200      	movs	r2, #0
 8001536:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_SAI2_Init+0x148>)
 800153a:	2200      	movs	r2, #0
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SAI2_Init+0x148>)
 8001540:	2200      	movs	r2, #0
 8001542:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_SAI2_Init+0x148>)
 8001546:	2201      	movs	r2, #1
 8001548:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SAI2_Init+0x148>)
 800154c:	2200      	movs	r2, #0
 800154e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_SAI2_Init+0x148>)
 8001552:	f005 fe9b 	bl	800728c <HAL_SAI_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800155c:	f000 fb6c 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000b764 	.word	0x2000b764
 8001568:	40015c04 	.word	0x40015c04
 800156c:	0002ee00 	.word	0x0002ee00
 8001570:	2000b644 	.word	0x2000b644
 8001574:	40015c24 	.word	0x40015c24

08001578 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 800157e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001582:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_SPDIFRX_Init+0x5c>)
 80015c2:	f006 f88b 	bl	80076dc <HAL_SPDIFRX_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 fb34 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000b718 	.word	0x2000b718

080015d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <MX_USART6_UART_Init+0x5c>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART6_UART_Init+0x58>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART6_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART6_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART6_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART6_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART6_UART_Init+0x58>)
 800161c:	f006 fb20 	bl	8007c60 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001626:	f000 fb07 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000b9c4 	.word	0x2000b9c4
 8001634:	40011400 	.word	0x40011400

08001638 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <MX_FMC_Init+0x14c>)
 8001652:	4a4d      	ldr	r2, [pc, #308]	; (8001788 <MX_FMC_Init+0x150>)
 8001654:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001656:	4b4b      	ldr	r3, [pc, #300]	; (8001784 <MX_FMC_Init+0x14c>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800165c:	4b49      	ldr	r3, [pc, #292]	; (8001784 <MX_FMC_Init+0x14c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <MX_FMC_Init+0x14c>)
 8001664:	2204      	movs	r2, #4
 8001666:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <MX_FMC_Init+0x14c>)
 800166a:	2210      	movs	r2, #16
 800166c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800166e:	4b45      	ldr	r3, [pc, #276]	; (8001784 <MX_FMC_Init+0x14c>)
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <MX_FMC_Init+0x14c>)
 8001676:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800167a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800167c:	4b41      	ldr	r3, [pc, #260]	; (8001784 <MX_FMC_Init+0x14c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001682:	4b40      	ldr	r3, [pc, #256]	; (8001784 <MX_FMC_Init+0x14c>)
 8001684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001688:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <MX_FMC_Init+0x14c>)
 800168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001692:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <MX_FMC_Init+0x14c>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001698:	2302      	movs	r3, #2
 800169a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800169c:	2307      	movs	r3, #7
 800169e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016a4:	2307      	movs	r3, #7
 80016a6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016a8:	2303      	movs	r3, #3
 80016aa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4832      	ldr	r0, [pc, #200]	; (8001784 <MX_FMC_Init+0x14c>)
 80016ba:	f005 ff8f 	bl	80075dc <HAL_SDRAM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016c4:	f000 fab8 	bl	8001c38 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <MX_FMC_Init+0x154>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <MX_FMC_Init+0x154>)
 80016d4:	2210      	movs	r2, #16
 80016d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80016d8:	4b2c      	ldr	r3, [pc, #176]	; (800178c <MX_FMC_Init+0x154>)
 80016da:	2201      	movs	r2, #1
 80016dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <MX_FMC_Init+0x154>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80016e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e8:	4928      	ldr	r1, [pc, #160]	; (800178c <MX_FMC_Init+0x154>)
 80016ea:	4826      	ldr	r0, [pc, #152]	; (8001784 <MX_FMC_Init+0x14c>)
 80016ec:	f005 ffaa 	bl	8007644 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f001 f9cd 	bl	8002a90 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <MX_FMC_Init+0x154>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <MX_FMC_Init+0x154>)
 80016fe:	2210      	movs	r2, #16
 8001700:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <MX_FMC_Init+0x154>)
 8001704:	2201      	movs	r2, #1
 8001706:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <MX_FMC_Init+0x154>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800170e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001712:	491e      	ldr	r1, [pc, #120]	; (800178c <MX_FMC_Init+0x154>)
 8001714:	481b      	ldr	r0, [pc, #108]	; (8001784 <MX_FMC_Init+0x14c>)
 8001716:	f005 ff95 	bl	8007644 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_FMC_Init+0x154>)
 800171c:	2203      	movs	r2, #3
 800171e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_FMC_Init+0x154>)
 8001722:	2210      	movs	r2, #16
 8001724:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_FMC_Init+0x154>)
 8001728:	2208      	movs	r2, #8
 800172a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_FMC_Init+0x154>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	4915      	ldr	r1, [pc, #84]	; (800178c <MX_FMC_Init+0x154>)
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <MX_FMC_Init+0x14c>)
 800173a:	f005 ff83 	bl	8007644 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800173e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001742:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_FMC_Init+0x154>)
 8001746:	2204      	movs	r2, #4
 8001748:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_FMC_Init+0x154>)
 800174c:	2210      	movs	r2, #16
 800174e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_FMC_Init+0x154>)
 8001752:	2201      	movs	r2, #1
 8001754:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <MX_FMC_Init+0x154>)
 800175a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001760:	490a      	ldr	r1, [pc, #40]	; (800178c <MX_FMC_Init+0x154>)
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_FMC_Init+0x14c>)
 8001764:	f005 ff6e 	bl	8007644 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001768:	f240 712b 	movw	r1, #1835	; 0x72b
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_FMC_Init+0x14c>)
 800176e:	f005 ff94 	bl	800769a <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8001772:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001776:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800177a:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000ba84 	.word	0x2000ba84
 8001788:	a0000140 	.word	0xa0000140
 800178c:	20000378 	.word	0x20000378

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	; 0x40
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4bb0      	ldr	r3, [pc, #704]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4aaf      	ldr	r2, [pc, #700]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4bad      	ldr	r3, [pc, #692]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4baa      	ldr	r3, [pc, #680]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4aa9      	ldr	r2, [pc, #676]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4ba7      	ldr	r3, [pc, #668]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	4ba4      	ldr	r3, [pc, #656]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4aa3      	ldr	r2, [pc, #652]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4ba1      	ldr	r3, [pc, #644]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b9e      	ldr	r3, [pc, #632]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a9d      	ldr	r2, [pc, #628]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b9b      	ldr	r3, [pc, #620]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001806:	4b98      	ldr	r3, [pc, #608]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a97      	ldr	r2, [pc, #604]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b95      	ldr	r3, [pc, #596]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800181e:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a91      	ldr	r2, [pc, #580]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001824:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b8f      	ldr	r3, [pc, #572]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001836:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a8b      	ldr	r2, [pc, #556]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800184e:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a85      	ldr	r2, [pc, #532]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b80      	ldr	r3, [pc, #512]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b77      	ldr	r3, [pc, #476]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	4b74      	ldr	r3, [pc, #464]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a73      	ldr	r2, [pc, #460]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b71      	ldr	r3, [pc, #452]	; (8001a68 <MX_GPIO_Init+0x2d8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, N1_Pin|N2_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80018b4:	486d      	ldr	r0, [pc, #436]	; (8001a6c <MX_GPIO_Init+0x2dc>)
 80018b6:	f002 fcd9 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2120      	movs	r1, #32
 80018be:	486c      	ldr	r0, [pc, #432]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 80018c0:	f002 fcd4 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|N0_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	210c      	movs	r1, #12
 80018c8:	486a      	ldr	r0, [pc, #424]	; (8001a74 <MX_GPIO_Init+0x2e4>)
 80018ca:	f002 fccf 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2108      	movs	r1, #8
 80018d2:	4869      	ldr	r0, [pc, #420]	; (8001a78 <MX_GPIO_Init+0x2e8>)
 80018d4:	f002 fcca 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	4865      	ldr	r0, [pc, #404]	; (8001a74 <MX_GPIO_Init+0x2e4>)
 80018e0:	f002 fcc4 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	4864      	ldr	r0, [pc, #400]	; (8001a7c <MX_GPIO_Init+0x2ec>)
 80018ec:	f002 fcbe 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	21c8      	movs	r1, #200	; 0xc8
 80018f4:	4862      	ldr	r0, [pc, #392]	; (8001a80 <MX_GPIO_Init+0x2f0>)
 80018f6:	f002 fcb9 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001900:	4860      	ldr	r0, [pc, #384]	; (8001a84 <MX_GPIO_Init+0x2f4>)
 8001902:	f002 fcb3 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001906:	2308      	movs	r3, #8
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001916:	4619      	mov	r1, r3
 8001918:	485b      	ldr	r0, [pc, #364]	; (8001a88 <MX_GPIO_Init+0x2f8>)
 800191a:	f002 f9f3 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800191e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001930:	230a      	movs	r3, #10
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	4852      	ldr	r0, [pc, #328]	; (8001a84 <MX_GPIO_Init+0x2f4>)
 800193c:	f002 f9e2 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001940:	2310      	movs	r3, #16
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001950:	2302      	movs	r3, #2
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001958:	4619      	mov	r1, r3
 800195a:	484a      	ldr	r0, [pc, #296]	; (8001a84 <MX_GPIO_Init+0x2f4>)
 800195c:	f002 f9d2 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : N1_Pin N2_Pin */
  GPIO_InitStruct.Pin = N1_Pin|N2_Pin;
 8001960:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	483c      	ldr	r0, [pc, #240]	; (8001a6c <MX_GPIO_Init+0x2dc>)
 800197a:	f002 f9c3 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	483e      	ldr	r0, [pc, #248]	; (8001a8c <MX_GPIO_Init+0x2fc>)
 8001994:	f002 f9b6 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_GPIO_Init+0x300>)
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4831      	ldr	r0, [pc, #196]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 80019ac:	f002 f9aa 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019b0:	2320      	movs	r3, #32
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	482a      	ldr	r0, [pc, #168]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 80019c8:	f002 f99c 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin N0_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|N0_Pin|LCD_DISP_Pin;
 80019cc:	f241 030c 	movw	r3, #4108	; 0x100c
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4823      	ldr	r0, [pc, #140]	; (8001a74 <MX_GPIO_Init+0x2e4>)
 80019e6:	f002 f98d 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	4825      	ldr	r0, [pc, #148]	; (8001a94 <MX_GPIO_Init+0x304>)
 8001a00:	f002 f980 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a04:	2308      	movs	r3, #8
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4817      	ldr	r0, [pc, #92]	; (8001a78 <MX_GPIO_Init+0x2e8>)
 8001a1c:	f002 f972 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a20:	2310      	movs	r3, #16
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	480f      	ldr	r0, [pc, #60]	; (8001a70 <MX_GPIO_Init+0x2e0>)
 8001a34:	f002 f966 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a38:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <MX_GPIO_Init+0x2ec>)
 8001a4e:	f002 f959 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a64:	e018      	b.n	8001a98 <MX_GPIO_Init+0x308>
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40022800 	.word	0x40022800
 8001a7c:	40021c00 	.word	0x40021c00
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022400 	.word	0x40022400
 8001a90:	10120000 	.word	0x10120000
 8001a94:	40020800 	.word	0x40020800
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4845      	ldr	r0, [pc, #276]	; (8001bb4 <MX_GPIO_Init+0x424>)
 8001aa0:	f002 f930 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abc:	4619      	mov	r1, r3
 8001abe:	483e      	ldr	r0, [pc, #248]	; (8001bb8 <MX_GPIO_Init+0x428>)
 8001ac0:	f002 f920 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <MX_GPIO_Init+0x42c>)
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4837      	ldr	r0, [pc, #220]	; (8001bb8 <MX_GPIO_Init+0x428>)
 8001ada:	f002 f913 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001aee:	230a      	movs	r3, #10
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <MX_GPIO_Init+0x424>)
 8001afa:	f002 f903 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001afe:	23c8      	movs	r3, #200	; 0xc8
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	482a      	ldr	r0, [pc, #168]	; (8001bc0 <MX_GPIO_Init+0x430>)
 8001b16:	f002 f8f5 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b32:	4619      	mov	r1, r3
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <MX_GPIO_Init+0x434>)
 8001b36:	f002 f8e5 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481c      	ldr	r0, [pc, #112]	; (8001bc0 <MX_GPIO_Init+0x430>)
 8001b4e:	f002 f8d9 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b52:	2328      	movs	r3, #40	; 0x28
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b62:	230a      	movs	r3, #10
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4816      	ldr	r0, [pc, #88]	; (8001bc8 <MX_GPIO_Init+0x438>)
 8001b6e:	f002 f8c9 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Play_IN_Pin */
  GPIO_InitStruct.Pin = Play_IN_Pin;
 8001b72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Play_IN_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4811      	ldr	r0, [pc, #68]	; (8001bcc <MX_GPIO_Init+0x43c>)
 8001b88:	f002 f8bc 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : N3_Pin */
  GPIO_InitStruct.Pin = N3_Pin;
 8001b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(N3_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4809      	ldr	r0, [pc, #36]	; (8001bcc <MX_GPIO_Init+0x43c>)
 8001ba6:	f002 f8ad 	bl	8003d04 <HAL_GPIO_Init>

}
 8001baa:	bf00      	nop
 8001bac:	3740      	adds	r7, #64	; 0x40
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021c00 	.word	0x40021c00
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	10120000 	.word	0x10120000
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001bd8:	f009 ff75 	bl	800bac6 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f007 f904 	bl	8008dea <osDelay>
 8001be2:	e7fb      	b.n	8001bdc <StartDefaultTask+0xc>

08001be4 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
  /* Infinite loop */

	PollingInit();
 8001bec:	f7fe ff70 	bl	8000ad0 <PollingInit>
  for(;;)
  {
	PollingRoutine();
 8001bf0:	f7fe ff7c 	bl	8000aec <PollingRoutine>
    osDelay(1);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f007 f8f8 	bl	8008dea <osDelay>
	PollingRoutine();
 8001bfa:	e7f9      	b.n	8001bf0 <StartUartTask+0xc>

08001bfc <StartMusicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
  /* Infinite loop */
	PollingControlMusicInit();
 8001c04:	f7fe feb0 	bl	8000968 <PollingControlMusicInit>
  for(;;)
  {
	  PollingControlMusic();
 8001c08:	f7fe ff36 	bl	8000a78 <PollingControlMusic>
	  osDelay(1);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f007 f8ec 	bl	8008dea <osDelay>
	  PollingControlMusic();
 8001c12:	e7f9      	b.n	8001c08 <StartMusicTask+0xc>

08001c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c26:	f000 ff13 	bl	8002a50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40001000 	.word	0x40001000

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	210f      	movs	r1, #15
 8001c82:	f06f 0001 	mvn.w	r0, #1
 8001c86:	f001 fa87 	bl	8003198 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <HAL_ADC_MspInit+0xa4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d13c      	bne.n	8001d34 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_ADC_MspInit+0xa8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001d02:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d06:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <HAL_ADC_MspInit+0xac>)
 8001d18:	f001 fff4 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d20:	2303      	movs	r3, #3
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <HAL_ADC_MspInit+0xb0>)
 8001d30:	f001 ffe8 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40012200 	.word	0x40012200
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_CRC_MspInit+0x38>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10b      	bne.n	8001d76 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_CRC_MspInit+0x3c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_CRC_MspInit+0x3c>)
 8001d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_CRC_MspInit+0x3c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023000 	.word	0x40023000
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a50      	ldr	r2, [pc, #320]	; (8001eec <HAL_DCMI_MspInit+0x160>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	f040 809a 	bne.w	8001ee4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db4:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6353      	str	r3, [r2, #52]	; 0x34
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd4:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de0:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df8:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a3c      	ldr	r2, [pc, #240]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e10:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4a36      	ldr	r2, [pc, #216]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a30      	ldr	r2, [pc, #192]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_DCMI_MspInit+0x164>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001e40:	2360      	movs	r3, #96	; 0x60
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e50:	230d      	movs	r3, #13
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <HAL_DCMI_MspInit+0x168>)
 8001e5c:	f001 ff52 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001e60:	2308      	movs	r3, #8
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e70:	230d      	movs	r3, #13
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481f      	ldr	r0, [pc, #124]	; (8001ef8 <HAL_DCMI_MspInit+0x16c>)
 8001e7c:	f001 ff42 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e92:	230d      	movs	r3, #13
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4817      	ldr	r0, [pc, #92]	; (8001efc <HAL_DCMI_MspInit+0x170>)
 8001e9e:	f001 ff31 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ea2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eb4:	230d      	movs	r3, #13
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4810      	ldr	r0, [pc, #64]	; (8001f00 <HAL_DCMI_MspInit+0x174>)
 8001ec0:	f001 ff20 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ec4:	2350      	movs	r3, #80	; 0x50
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ed4:	230d      	movs	r3, #13
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	4619      	mov	r1, r3
 8001ede:	4809      	ldr	r0, [pc, #36]	; (8001f04 <HAL_DCMI_MspInit+0x178>)
 8001ee0:	f001 ff10 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	3738      	adds	r7, #56	; 0x38
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	50050000 	.word	0x50050000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40021c00 	.word	0x40021c00
 8001f04:	40020000 	.word	0x40020000

08001f08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <HAL_DMA2D_MspInit+0x44>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d113      	bne.n	8001f42 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_DMA2D_MspInit+0x48>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_DMA2D_MspInit+0x48>)
 8001f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_DMA2D_MspInit+0x48>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	205a      	movs	r0, #90	; 0x5a
 8001f38:	f001 f92e 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f3c:	205a      	movs	r0, #90	; 0x5a
 8001f3e:	f001 f947 	bl	80031d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	4002b000 	.word	0x4002b000
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_DMA2D_MspDeInit+0x2c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_DMA2D_MspDeInit+0x30>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_DMA2D_MspDeInit+0x30>)
 8001f6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001f72:	205a      	movs	r0, #90	; 0x5a
 8001f74:	f001 f93a 	bl	80031ec <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	4002b000 	.word	0x4002b000
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <HAL_I2C_MspInit+0xdc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d129      	bne.n	8001ffe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001fc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc8:	2312      	movs	r3, #18
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <HAL_I2C_MspInit+0xe4>)
 8001fe0:	f001 fe90 	bl	8003d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8001fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ffc:	e02d      	b.n	800205a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_I2C_MspInit+0xe8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d128      	bne.n	800205a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 800200e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002020:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002026:	2312      	movs	r3, #18
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002032:	2304      	movs	r3, #4
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <HAL_I2C_MspInit+0xec>)
 800203e:	f001 fe61 	bl	8003d04 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8002048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_I2C_MspInit+0xe0>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
}
 800205a:	bf00      	nop
 800205c:	3730      	adds	r7, #48	; 0x30
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40005400 	.word	0x40005400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400
 8002070:	40005c00 	.word	0x40005c00
 8002074:	40021c00 	.word	0x40021c00

08002078 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_I2C_MspDeInit+0x64>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d110      	bne.n	80020ac <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_I2C_MspDeInit+0x68>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <HAL_I2C_MspDeInit+0x68>)
 8002090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <HAL_I2C_MspDeInit+0x6c>)
 800209c:	f001 ffdc 	bl	8004058 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80020a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a4:	480f      	ldr	r0, [pc, #60]	; (80020e4 <HAL_I2C_MspDeInit+0x6c>)
 80020a6:	f001 ffd7 	bl	8004058 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80020aa:	e013      	b.n	80020d4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_I2C_MspDeInit+0x70>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10e      	bne.n	80020d4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_I2C_MspDeInit+0x68>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_I2C_MspDeInit+0x68>)
 80020bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	4809      	ldr	r0, [pc, #36]	; (80020ec <HAL_I2C_MspDeInit+0x74>)
 80020c6:	f001 ffc7 	bl	8004058 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80020ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ce:	4807      	ldr	r0, [pc, #28]	; (80020ec <HAL_I2C_MspDeInit+0x74>)
 80020d0:	f001 ffc2 	bl	8004058 <HAL_GPIO_DeInit>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40005400 	.word	0x40005400
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40005c00 	.word	0x40005c00
 80020ec:	40021c00 	.word	0x40021c00

080020f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08e      	sub	sp, #56	; 0x38
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a55      	ldr	r2, [pc, #340]	; (8002264 <HAL_LTDC_MspInit+0x174>)
 800210e:	4293      	cmp	r3, r2
 8002110:	f040 80a3 	bne.w	800225a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002114:	4b54      	ldr	r3, [pc, #336]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	4a53      	ldr	r2, [pc, #332]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800211a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800211e:	6453      	str	r3, [r2, #68]	; 0x44
 8002120:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800212c:	4b4e      	ldr	r3, [pc, #312]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6313      	str	r3, [r2, #48]	; 0x30
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002144:	4b48      	ldr	r3, [pc, #288]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a47      	ldr	r2, [pc, #284]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b45      	ldr	r3, [pc, #276]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800215c:	4b42      	ldr	r3, [pc, #264]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a41      	ldr	r2, [pc, #260]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800217a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217e:	6313      	str	r3, [r2, #48]	; 0x30
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a35      	ldr	r2, [pc, #212]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_LTDC_MspInit+0x178>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80021a4:	2310      	movs	r3, #16
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021b4:	230e      	movs	r3, #14
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	482b      	ldr	r0, [pc, #172]	; (800226c <HAL_LTDC_MspInit+0x17c>)
 80021c0:	f001 fda0 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80021c4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d6:	230e      	movs	r3, #14
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	4823      	ldr	r0, [pc, #140]	; (8002270 <HAL_LTDC_MspInit+0x180>)
 80021e2:	f001 fd8f 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80021e6:	23f7      	movs	r3, #247	; 0xf7
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f6:	230e      	movs	r3, #14
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	481c      	ldr	r0, [pc, #112]	; (8002274 <HAL_LTDC_MspInit+0x184>)
 8002202:	f001 fd7f 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002218:	2309      	movs	r3, #9
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4815      	ldr	r0, [pc, #84]	; (8002278 <HAL_LTDC_MspInit+0x188>)
 8002224:	f001 fd6e 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002228:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800223a:	230e      	movs	r3, #14
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <HAL_LTDC_MspInit+0x18c>)
 8002246:	f001 fd5d 	bl	8003d04 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2058      	movs	r0, #88	; 0x58
 8002250:	f000 ffa2 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002254:	2058      	movs	r0, #88	; 0x58
 8002256:	f000 ffbb 	bl	80031d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3738      	adds	r7, #56	; 0x38
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40016800 	.word	0x40016800
 8002268:	40023800 	.word	0x40023800
 800226c:	40021000 	.word	0x40021000
 8002270:	40022400 	.word	0x40022400
 8002274:	40022800 	.word	0x40022800
 8002278:	40021800 	.word	0x40021800
 800227c:	40022000 	.word	0x40022000

08002280 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_QSPI_MspInit+0x10c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d170      	bne.n	8002384 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022a2:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6393      	str	r3, [r2, #56]	; 0x38
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a34      	ldr	r2, [pc, #208]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a2e      	ldr	r2, [pc, #184]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a28      	ldr	r2, [pc, #160]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_QSPI_MspInit+0x110>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002302:	2304      	movs	r3, #4
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002312:	2309      	movs	r3, #9
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	4619      	mov	r1, r3
 800231c:	481d      	ldr	r0, [pc, #116]	; (8002394 <HAL_QSPI_MspInit+0x114>)
 800231e:	f001 fcf1 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002322:	2340      	movs	r3, #64	; 0x40
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002332:	230a      	movs	r3, #10
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	4816      	ldr	r0, [pc, #88]	; (8002398 <HAL_QSPI_MspInit+0x118>)
 800233e:	f001 fce1 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002342:	2304      	movs	r3, #4
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002352:	2309      	movs	r3, #9
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	480e      	ldr	r0, [pc, #56]	; (8002398 <HAL_QSPI_MspInit+0x118>)
 800235e:	f001 fcd1 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002362:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002374:	2309      	movs	r3, #9
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	4619      	mov	r1, r3
 800237e:	4807      	ldr	r0, [pc, #28]	; (800239c <HAL_QSPI_MspInit+0x11c>)
 8002380:	f001 fcc0 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3730      	adds	r7, #48	; 0x30
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	a0001000 	.word	0xa0001000
 8002390:	40023800 	.word	0x40023800
 8002394:	40021000 	.word	0x40021000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020c00 	.word	0x40020c00

080023a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_RTC_MspInit+0x2c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d105      	bne.n	80023be <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_RTC_MspInit+0x30>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <HAL_RTC_MspInit+0x30>)
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40002800 	.word	0x40002800
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80023f4:	d127      	bne.n	8002446 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_SPDIFRX_MspInit+0x7c>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a15      	ldr	r2, [pc, #84]	; (8002450 <HAL_SPDIFRX_MspInit+0x7c>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_SPDIFRX_MspInit+0x7c>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_SPDIFRX_MspInit+0x7c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <HAL_SPDIFRX_MspInit+0x7c>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_SPDIFRX_MspInit+0x7c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002436:	2308      	movs	r3, #8
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <HAL_SPDIFRX_MspInit+0x80>)
 8002442:	f001 fc5f 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40020c00 	.word	0x40020c00

08002458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_UART_MspInit+0x8c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d12f      	bne.n	80024da <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_UART_MspInit+0x90>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <HAL_UART_MspInit+0x90>)
 8002480:	f043 0320 	orr.w	r3, r3, #32
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_UART_MspInit+0x90>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_UART_MspInit+0x90>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_UART_MspInit+0x90>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_UART_MspInit+0x90>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80024aa:	23c0      	movs	r3, #192	; 0xc0
 80024ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024ba:	2308      	movs	r3, #8
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4619      	mov	r1, r3
 80024c4:	4809      	ldr	r0, [pc, #36]	; (80024ec <HAL_UART_MspInit+0x94>)
 80024c6:	f001 fc1d 	bl	8003d04 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2047      	movs	r0, #71	; 0x47
 80024d0:	f000 fe62 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024d4:	2047      	movs	r0, #71	; 0x47
 80024d6:	f000 fe7b 	bl	80031d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40011400 	.word	0x40011400
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020800 	.word	0x40020800

080024f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_FMC_MspInit+0x100>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d16d      	bne.n	80025e8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_FMC_MspInit+0x100>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_FMC_MspInit+0x104>)
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	4a37      	ldr	r2, [pc, #220]	; (80025f4 <HAL_FMC_MspInit+0x104>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6393      	str	r3, [r2, #56]	; 0x38
 800251e:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <HAL_FMC_MspInit+0x104>)
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800252a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800252e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800253c:	230c      	movs	r3, #12
 800253e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	4619      	mov	r1, r3
 8002544:	482c      	ldr	r0, [pc, #176]	; (80025f8 <HAL_FMC_MspInit+0x108>)
 8002546:	f001 fbdd 	bl	8003d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800254a:	f248 1333 	movw	r3, #33075	; 0x8133
 800254e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800255c:	230c      	movs	r3, #12
 800255e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4825      	ldr	r0, [pc, #148]	; (80025fc <HAL_FMC_MspInit+0x10c>)
 8002566:	f001 fbcd 	bl	8003d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800256a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800256e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800257c:	230c      	movs	r3, #12
 800257e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	4619      	mov	r1, r3
 8002584:	481e      	ldr	r0, [pc, #120]	; (8002600 <HAL_FMC_MspInit+0x110>)
 8002586:	f001 fbbd 	bl	8003d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800258a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800258e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800259c:	230c      	movs	r3, #12
 800259e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4817      	ldr	r0, [pc, #92]	; (8002604 <HAL_FMC_MspInit+0x114>)
 80025a6:	f001 fbad 	bl	8003d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80025aa:	2328      	movs	r3, #40	; 0x28
 80025ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025ba:	230c      	movs	r3, #12
 80025bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4811      	ldr	r0, [pc, #68]	; (8002608 <HAL_FMC_MspInit+0x118>)
 80025c4:	f001 fb9e 	bl	8003d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80025c8:	2308      	movs	r3, #8
 80025ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025d8:	230c      	movs	r3, #12
 80025da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	4619      	mov	r1, r3
 80025e0:	480a      	ldr	r0, [pc, #40]	; (800260c <HAL_FMC_MspInit+0x11c>)
 80025e2:	f001 fb8f 	bl	8003d04 <HAL_GPIO_Init>
 80025e6:	e000      	b.n	80025ea <HAL_FMC_MspInit+0xfa>
    return;
 80025e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000388 	.word	0x20000388
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021800 	.word	0x40021800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021400 	.word	0x40021400
 8002608:	40021c00 	.word	0x40021c00
 800260c:	40020800 	.word	0x40020800

08002610 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002618:	f7ff ff6a 	bl	80024f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <HAL_SAI_MspInit+0xbc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d124      	bne.n	8002680 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_SAI_MspInit+0xc0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10b      	bne.n	8002656 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_SAI_MspInit+0xc4>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a29      	ldr	r2, [pc, #164]	; (80026e8 <HAL_SAI_MspInit+0xc4>)
 8002644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_SAI_MspInit+0xc4>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002656:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_SAI_MspInit+0xc0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <HAL_SAI_MspInit+0xc0>)
 800265e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002660:	23f0      	movs	r3, #240	; 0xf0
 8002662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002670:	230a      	movs	r3, #10
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	481c      	ldr	r0, [pc, #112]	; (80026ec <HAL_SAI_MspInit+0xc8>)
 800267c:	f001 fb42 	bl	8003d04 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <HAL_SAI_MspInit+0xcc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d125      	bne.n	80026d6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_SAI_MspInit+0xc0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_SAI_MspInit+0xc4>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_SAI_MspInit+0xc4>)
 8002698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_SAI_MspInit+0xc4>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_SAI_MspInit+0xc0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <HAL_SAI_MspInit+0xc0>)
 80026b2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80026b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026c6:	230a      	movs	r3, #10
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	4808      	ldr	r0, [pc, #32]	; (80026f4 <HAL_SAI_MspInit+0xd0>)
 80026d2:	f001 fb17 	bl	8003d04 <HAL_GPIO_Init>

    }
}
 80026d6:	bf00      	nop
 80026d8:	3728      	adds	r7, #40	; 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40015c04 	.word	0x40015c04
 80026e4:	2000038c 	.word	0x2000038c
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40015c24 	.word	0x40015c24
 80026f4:	40021800 	.word	0x40021800

080026f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002708:	2200      	movs	r2, #0
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	2036      	movs	r0, #54	; 0x36
 800270e:	f000 fd43 	bl	8003198 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002712:	2036      	movs	r0, #54	; 0x36
 8002714:	f000 fd5c 	bl	80031d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_InitTick+0xa0>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_InitTick+0xa0>)
 800271e:	f043 0310 	orr.w	r3, r3, #16
 8002722:	6413      	str	r3, [r2, #64]	; 0x40
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_InitTick+0xa0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002730:	f107 0210 	add.w	r2, r7, #16
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fc90 	bl	8006060 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002740:	f003 fc66 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8002744:	4603      	mov	r3, r0
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_InitTick+0xa4>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	3b01      	subs	r3, #1
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_InitTick+0xa8>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_InitTick+0xac>)
 800275c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_InitTick+0xa8>)
 8002760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002764:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_InitTick+0xa8>)
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_InitTick+0xa8>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_InitTick+0xa8>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <HAL_InitTick+0xa8>)
 800277a:	f005 f80b 	bl	8007794 <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002784:	4806      	ldr	r0, [pc, #24]	; (80027a0 <HAL_InitTick+0xa8>)
 8002786:	f005 f83b 	bl	8007800 <HAL_TIM_Base_Start_IT>
 800278a:	4603      	mov	r3, r0
 800278c:	e000      	b.n	8002790 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3730      	adds	r7, #48	; 0x30
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	431bde83 	.word	0x431bde83
 80027a0:	2000bb08 	.word	0x2000bb08
 80027a4:	40001000 	.word	0x40001000

080027a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <HardFault_Handler+0x4>

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <UsageFault_Handler+0x4>

080027ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM6_DAC_IRQHandler+0x10>)
 80027e2:	f005 f837 	bl	8007854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000bb08 	.word	0x2000bb08

080027f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <USART6_IRQHandler+0x10>)
 80027f6:	f005 fb23 	bl	8007e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000b9c4 	.word	0x2000b9c4

08002804 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <LTDC_IRQHandler+0x10>)
 800280a:	f002 fbc9 	bl	8004fa0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000b858 	.word	0x2000b858

08002818 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <DMA2D_IRQHandler+0x10>)
 800281e:	f001 f832 	bl	8003886 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	2000ba44 	.word	0x2000ba44

0800282c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
	return 1;
 8002830:	2301      	movs	r3, #1
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_kill>:

int _kill(int pid, int sig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002846:	f022 ff8d 	bl	8025764 <__errno>
 800284a:	4602      	mov	r2, r0
 800284c:	2316      	movs	r3, #22
 800284e:	6013      	str	r3, [r2, #0]
	return -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_exit>:

void _exit (int status)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffe7 	bl	800283c <_kill>
	while (1) {}		/* Make sure we hang here */
 800286e:	e7fe      	b.n	800286e <_exit+0x12>

08002870 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e00a      	b.n	8002898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002882:	f3af 8000 	nop.w
 8002886:	4601      	mov	r1, r0
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	60ba      	str	r2, [r7, #8]
 800288e:	b2ca      	uxtb	r2, r1
 8002890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	dbf0      	blt.n	8002882 <_read+0x12>
	}

return len;
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e009      	b.n	80028d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	60ba      	str	r2, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	dbf1      	blt.n	80028bc <_write+0x12>
	}
	return len;
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_close>:

int _close(int file)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
	return -1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800290a:	605a      	str	r2, [r3, #4]
	return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_isatty>:

int _isatty(int file)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
	return 1;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
	return 0;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <_sbrk+0x5c>)
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <_sbrk+0x60>)
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <_sbrk+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <_sbrk+0x64>)
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <_sbrk+0x68>)
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d207      	bcs.n	800298c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800297c:	f022 fef2 	bl	8025764 <__errno>
 8002980:	4602      	mov	r2, r0
 8002982:	230c      	movs	r3, #12
 8002984:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e009      	b.n	80029a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <_sbrk+0x64>)
 800299c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20050000 	.word	0x20050000
 80029ac:	00000400 	.word	0x00000400
 80029b0:	20000390 	.word	0x20000390
 80029b4:	2000bb50 	.word	0x2000bb50

080029b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <SystemInit+0x28>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <SystemInit+0x28>)
 80029c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SystemInit+0x28>)
 80029ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d2:	609a      	str	r2, [r3, #8]
#endif
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ea:	e003      	b.n	80029f4 <LoopCopyDataInit>

080029ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029f2:	3104      	adds	r1, #4

080029f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029fc:	d3f6      	bcc.n	80029ec <CopyDataInit>
  ldr  r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a00:	e002      	b.n	8002a08 <LoopFillZerobss>

08002a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a04:	f842 3b04 	str.w	r3, [r2], #4

08002a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a0c:	d3f9      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a0e:	f7ff ffd3 	bl	80029b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f022 febf 	bl	8025794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fe f8f3 	bl	8000c00 <main>
  bx  lr    
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a1c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a20:	080e03c8 	.word	0x080e03c8
  ldr  r0, =_sdata
 8002a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a28:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002a2c:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002a30:	2000bb50 	.word	0x2000bb50

08002a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC_IRQHandler>

08002a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3a:	2003      	movs	r0, #3
 8002a3c:	f000 fba1 	bl	8003182 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fe59 	bl	80026f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a46:	f7ff f8ff 	bl	8001c48 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000034 	.word	0x20000034
 8002a74:	2000bb48 	.word	0x2000bb48

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2000bb48 	.word	0x2000bb48

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_Delay+0x40>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000034 	.word	0x20000034

08002ad4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e031      	b.n	8002b4e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff f8d0 	bl	8001c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_ADC_Init+0x84>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f964 	bl	8002df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3e:	e001      	b.n	8002b44 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	ffffeefd 	.word	0xffffeefd

08002b5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x1c>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e12a      	b.n	8002dce <HAL_ADC_ConfigChannel+0x272>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b09      	cmp	r3, #9
 8002b86:	d93a      	bls.n	8002bfe <HAL_ADC_ConfigChannel+0xa2>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b90:	d035      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68d9      	ldr	r1, [r3, #12]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b1e      	subs	r3, #30
 8002ba8:	2207      	movs	r2, #7
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_ADC_ConfigChannel+0x280>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68d9      	ldr	r1, [r3, #12]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	061a      	lsls	r2, r3, #24
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd6:	e035      	b.n	8002c44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68d9      	ldr	r1, [r3, #12]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4618      	mov	r0, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4403      	add	r3, r0
 8002bf0:	3b1e      	subs	r3, #30
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bfc:	e022      	b.n	8002c44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6919      	ldr	r1, [r3, #16]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	2207      	movs	r2, #7
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6919      	ldr	r1, [r3, #16]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	4603      	mov	r3, r0
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4403      	add	r3, r0
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d824      	bhi.n	8002c96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3b05      	subs	r3, #5
 8002c5e:	221f      	movs	r2, #31
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43da      	mvns	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3b05      	subs	r3, #5
 8002c88:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34
 8002c94:	e04c      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d824      	bhi.n	8002ce8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	3b23      	subs	r3, #35	; 0x23
 8002cb0:	221f      	movs	r2, #31
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b23      	subs	r3, #35	; 0x23
 8002cda:	fa00 f203 	lsl.w	r2, r0, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce6:	e023      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b41      	subs	r3, #65	; 0x41
 8002cfa:	221f      	movs	r2, #31
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43da      	mvns	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	400a      	ands	r2, r1
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	3b41      	subs	r3, #65	; 0x41
 8002d24:	fa00 f203 	lsl.w	r2, r0, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <HAL_ADC_ConfigChannel+0x284>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10a      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1f4>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_ADC_ConfigChannel+0x288>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <HAL_ADC_ConfigChannel+0x288>)
 8002d4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <HAL_ADC_ConfigChannel+0x284>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d109      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x212>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b12      	cmp	r3, #18
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_ADC_ConfigChannel+0x288>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_ADC_ConfigChannel+0x288>)
 8002d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_ADC_ConfigChannel+0x284>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d125      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x268>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_ADC_ConfigChannel+0x280>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <HAL_ADC_ConfigChannel+0x22e>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b11      	cmp	r3, #17
 8002d88:	d11c      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_ADC_ConfigChannel+0x288>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_ADC_ConfigChannel+0x288>)
 8002d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_ADC_ConfigChannel+0x280>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d111      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_ADC_ConfigChannel+0x28c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_ADC_ConfigChannel+0x290>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9a      	lsrs	r2, r3, #18
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002db6:	e002      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f9      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	10000012 	.word	0x10000012
 8002de0:	40012000 	.word	0x40012000
 8002de4:	40012300 	.word	0x40012300
 8002de8:	2000002c 	.word	0x2000002c
 8002dec:	431bde83 	.word	0x431bde83

08002df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002df8:	4b78      	ldr	r3, [pc, #480]	; (8002fdc <ADC_Init+0x1ec>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a77      	ldr	r2, [pc, #476]	; (8002fdc <ADC_Init+0x1ec>)
 8002dfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e04:	4b75      	ldr	r3, [pc, #468]	; (8002fdc <ADC_Init+0x1ec>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4973      	ldr	r1, [pc, #460]	; (8002fdc <ADC_Init+0x1ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	021a      	lsls	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <ADC_Init+0x1f0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	e00f      	b.n	8002eea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0202 	bic.w	r2, r2, #2
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	005a      	lsls	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	3b01      	subs	r3, #1
 8002f44:	035a      	lsls	r2, r3, #13
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e007      	b.n	8002f60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	051a      	lsls	r2, r3, #20
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fa2:	025a      	lsls	r2, r3, #9
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	029a      	lsls	r2, r3, #10
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012300 	.word	0x40012300
 8002fe0:	0f000001 	.word	0x0f000001

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00
 8003028:	05fa0000 	.word	0x05fa0000

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db10      	blt.n	80030b8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4909      	ldr	r1, [pc, #36]	; (80030c4 <__NVIC_DisableIRQ+0x40>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	3320      	adds	r3, #32
 80030ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	; (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	; (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ff2a 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031aa:	f7ff ff3f 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	6978      	ldr	r0, [r7, #20]
 80031b6:	f7ff ffb1 	bl	800311c <NVIC_EncodePriority>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff80 	bl	80030c8 <__NVIC_SetPriority>
}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff32 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff42 	bl	8003084 <__NVIC_DisableIRQ>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e054      	b.n	80032c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7f5b      	ldrb	r3, [r3, #29]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fd8e 	bl	8001d4c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	791b      	ldrb	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a22      	ldr	r2, [pc, #136]	; (80032cc <HAL_CRC_Init+0xc4>)
 8003244:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0218 	bic.w	r2, r2, #24
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	e00c      	b.n	8003272 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	461a      	mov	r2, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f834 	bl	80032d0 <HAL_CRCEx_Polynomial_Set>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e028      	b.n	80032c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	795b      	ldrb	r3, [r3, #5]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f04f 32ff 	mov.w	r2, #4294967295
 8003282:	611a      	str	r2, [r3, #16]
 8003284:	e004      	b.n	8003290 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6912      	ldr	r2, [r2, #16]
 800328e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	04c11db7 	.word	0x04c11db7

080032d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032e0:	231f      	movs	r3, #31
 80032e2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032e4:	bf00      	nop
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	613a      	str	r2, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_CRCEx_Polynomial_Set+0x34>
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b18      	cmp	r3, #24
 8003308:	d846      	bhi.n	8003398 <HAL_CRCEx_Polynomial_Set+0xc8>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <HAL_CRCEx_Polynomial_Set+0x40>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	0800339f 	.word	0x0800339f
 8003314:	08003399 	.word	0x08003399
 8003318:	08003399 	.word	0x08003399
 800331c:	08003399 	.word	0x08003399
 8003320:	08003399 	.word	0x08003399
 8003324:	08003399 	.word	0x08003399
 8003328:	08003399 	.word	0x08003399
 800332c:	08003399 	.word	0x08003399
 8003330:	0800338d 	.word	0x0800338d
 8003334:	08003399 	.word	0x08003399
 8003338:	08003399 	.word	0x08003399
 800333c:	08003399 	.word	0x08003399
 8003340:	08003399 	.word	0x08003399
 8003344:	08003399 	.word	0x08003399
 8003348:	08003399 	.word	0x08003399
 800334c:	08003399 	.word	0x08003399
 8003350:	08003381 	.word	0x08003381
 8003354:	08003399 	.word	0x08003399
 8003358:	08003399 	.word	0x08003399
 800335c:	08003399 	.word	0x08003399
 8003360:	08003399 	.word	0x08003399
 8003364:	08003399 	.word	0x08003399
 8003368:	08003399 	.word	0x08003399
 800336c:	08003399 	.word	0x08003399
 8003370:	08003375 	.word	0x08003375
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b06      	cmp	r3, #6
 8003378:	d913      	bls.n	80033a2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800337e:	e010      	b.n	80033a2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b07      	cmp	r3, #7
 8003384:	d90f      	bls.n	80033a6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800338a:	e00c      	b.n	80033a6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	d90b      	bls.n	80033aa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003396:	e008      	b.n	80033aa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	e006      	b.n	80033ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800339e:	bf00      	nop
 80033a0:	e004      	b.n	80033ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033aa:	bf00      	nop
  }
  if (status == HAL_OK)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 0118 	bic.w	r1, r3, #24
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e069      	b.n	80034c2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fcc6 	bl	8001d8c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_DCMI_Init+0xf0>)
 8003422:	400b      	ands	r3, r1
 8003424:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800343a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003446:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003452:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800345e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800346a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b10      	cmp	r3, #16
 800347a:	d112      	bne.n	80034a2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7f1b      	ldrb	r3, [r3, #28]
 8003480:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7f5b      	ldrb	r3, [r3, #29]
 8003486:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003488:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7f9b      	ldrb	r3, [r3, #30]
 800348e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003490:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7fdb      	ldrb	r3, [r3, #31]
 8003498:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800349e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80034a0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 021e 	orr.w	r2, r2, #30
 80034b0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	ffe0f007 	.word	0xffe0f007

080034d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00c      	b.n	8003508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2205      	movs	r2, #5
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e039      	b.n	800359a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe fce4 	bl	8001f08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	f023 0107 	bic.w	r1, r3, #7
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_DMA2D_Init+0x90>)
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68d1      	ldr	r1, [r2, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	430b      	orrs	r3, r1
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	ffffc000 	.word	0xffffc000

080035a8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e05f      	b.n	800367a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80035ba:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_DMA2D_DeInit+0xdc>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02e      	beq.n	8003624 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8c1 	bl	800375c <HAL_DMA2D_Abort>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d021      	beq.n	8003624 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e04a      	b.n	800367a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d108      	bne.n	8003604 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80035f2:	2100      	movs	r1, #0
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f8f7 	bl	80037e8 <HAL_DMA2D_CLUTLoading_Abort>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e03a      	b.n	800367a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b20      	cmp	r3, #32
 8003610:	d108      	bne.n	8003624 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003612:	2101      	movs	r1, #1
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8e7 	bl	80037e8 <HAL_DMA2D_CLUTLoading_Abort>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e02a      	b.n	800367a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	223f      	movs	r2, #63	; 0x3f
 8003632:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2200      	movs	r2, #0
 800364a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2200      	movs	r2, #0
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2200      	movs	r2, #0
 800365a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe fc79 	bl	8001f54 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_DMA2D_Start_IT+0x1c>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e020      	b.n	80036e6 <HAL_DMA2D_Start_IT+0x5e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa84 	bl	8003bcc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80036d2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af02      	add	r7, sp, #8
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003706:	2302      	movs	r3, #2
 8003708:	e024      	b.n	8003754 <HAL_DMA2D_BlendingStart_IT+0x66>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fa4d 	bl	8003bcc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003740:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0205 	bic.w	r2, r3, #5
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0204 	orr.w	r2, r2, #4
 8003776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003778:	f7ff f97e 	bl	8002a78 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800377e:	e017      	b.n	80037b0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003780:	f7ff f97a 	bl	8002a78 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800378e:	d90f      	bls.n	80037b0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e017      	b.n	80037e0 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e0      	bne.n	8003780 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80037cc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3324      	adds	r3, #36	; 0x24
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0204 	orr.w	r2, r2, #4
 8003808:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d103      	bne.n	8003818 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	331c      	adds	r3, #28
 8003816:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003818:	f7ff f92e 	bl	8002a78 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800381e:	e017      	b.n	8003850 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003820:	f7ff f92a 	bl	8002a78 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800382e:	d90f      	bls.n	8003850 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e016      	b.n	800387e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e1      	bne.n	8003820 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800386a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d026      	beq.n	80038f6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d021      	beq.n	80038f6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	f043 0201 	orr.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2204      	movs	r2, #4
 80038da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d026      	beq.n	800394e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d021      	beq.n	800394e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003918:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2220      	movs	r2, #32
 8003920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	f043 0202 	orr.w	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d026      	beq.n	80039a6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395e:	2b00      	cmp	r3, #0
 8003960:	d021      	beq.n	80039a6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003970:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2208      	movs	r2, #8
 8003978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	f043 0204 	orr.w	r2, r3, #4
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2204      	movs	r2, #4
 800398a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00e      	beq.n	80039d8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2204      	movs	r2, #4
 80039d0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f853 	bl	8003a7e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d024      	beq.n	8003a2c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01f      	beq.n	8003a2c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2202      	movs	r2, #2
 8003a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01f      	beq.n	8003a76 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01a      	beq.n	8003a76 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2210      	movs	r2, #16
 8003a56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f80e 	bl	8003a92 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA2D_ConfigLayer+0x20>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e079      	b.n	8003bbc <HAL_DMA2D_ConfigLayer+0x114>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	3318      	adds	r3, #24
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003af2:	4b35      	ldr	r3, [pc, #212]	; (8003bc8 <HAL_DMA2D_ConfigLayer+0x120>)
 8003af4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b0a      	cmp	r3, #10
 8003afc:	d003      	beq.n	8003b06 <HAL_DMA2D_ConfigLayer+0x5e>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b09      	cmp	r3, #9
 8003b04:	d107      	bne.n	8003b16 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e005      	b.n	8003b22 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d120      	bne.n	8003b6a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	ea02 0103 	and.w	r1, r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b0a      	cmp	r3, #10
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA2D_ConfigLayer+0xb2>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d127      	bne.n	8003baa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
 8003b68:	e01f      	b.n	8003baa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	ea02 0103 	and.w	r1, r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b0a      	cmp	r3, #10
 8003b92:	d003      	beq.n	8003b9c <HAL_DMA2D_ConfigLayer+0xf4>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b09      	cmp	r3, #9
 8003b9a:	d106      	bne.n	8003baa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ba8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	ff03000f 	.word	0xff03000f

08003bcc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b08b      	sub	sp, #44	; 0x2c
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	041a      	lsls	r2, r3, #16
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c04:	d174      	bne.n	8003cf0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c0c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c14:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c1c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d108      	bne.n	8003c3e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	e053      	b.n	8003ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d106      	bne.n	8003c54 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	e048      	b.n	8003ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d111      	bne.n	8003c80 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	0cdb      	lsrs	r3, r3, #19
 8003c60:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	0a9b      	lsrs	r3, r3, #10
 8003c66:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	02db      	lsls	r3, r3, #11
 8003c76:	4313      	orrs	r3, r2
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e032      	b.n	8003ce6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d117      	bne.n	8003cb8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	0fdb      	lsrs	r3, r3, #31
 8003c8c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	0cdb      	lsrs	r3, r3, #19
 8003c92:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	0adb      	lsrs	r3, r3, #11
 8003c98:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	029b      	lsls	r3, r3, #10
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	03db      	lsls	r3, r3, #15
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	e016      	b.n	8003ce6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	0f1b      	lsrs	r3, r3, #28
 8003cbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	0d1b      	lsrs	r3, r3, #20
 8003cc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	0b1b      	lsrs	r3, r3, #12
 8003cc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	031b      	lsls	r3, r3, #12
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003cee:	e003      	b.n	8003cf8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	60da      	str	r2, [r3, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	372c      	adds	r7, #44	; 0x2c
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e175      	b.n	8004010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	f040 8164 	bne.w	800400a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d00b      	beq.n	8003d62 <HAL_GPIO_Init+0x5e>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d007      	beq.n	8003d62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d56:	2b11      	cmp	r3, #17
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b12      	cmp	r3, #18
 8003d60:	d130      	bne.n	8003dc4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 0201 	and.w	r2, r3, #1
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2203      	movs	r2, #3
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x100>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b12      	cmp	r3, #18
 8003e02:	d123      	bne.n	8003e4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	08da      	lsrs	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3208      	adds	r2, #8
 8003e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	08da      	lsrs	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3208      	adds	r2, #8
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2203      	movs	r2, #3
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0203 	and.w	r2, r3, #3
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80be 	beq.w	800400a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8e:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	4a64      	ldr	r2, [pc, #400]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e98:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9a:	4b62      	ldr	r3, [pc, #392]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ea6:	4a60      	ldr	r2, [pc, #384]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	220f      	movs	r2, #15
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a57      	ldr	r2, [pc, #348]	; (800402c <HAL_GPIO_Init+0x328>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d037      	beq.n	8003f42 <HAL_GPIO_Init+0x23e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a56      	ldr	r2, [pc, #344]	; (8004030 <HAL_GPIO_Init+0x32c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d031      	beq.n	8003f3e <HAL_GPIO_Init+0x23a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a55      	ldr	r2, [pc, #340]	; (8004034 <HAL_GPIO_Init+0x330>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02b      	beq.n	8003f3a <HAL_GPIO_Init+0x236>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a54      	ldr	r2, [pc, #336]	; (8004038 <HAL_GPIO_Init+0x334>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d025      	beq.n	8003f36 <HAL_GPIO_Init+0x232>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a53      	ldr	r2, [pc, #332]	; (800403c <HAL_GPIO_Init+0x338>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01f      	beq.n	8003f32 <HAL_GPIO_Init+0x22e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_GPIO_Init+0x33c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d019      	beq.n	8003f2e <HAL_GPIO_Init+0x22a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a51      	ldr	r2, [pc, #324]	; (8004044 <HAL_GPIO_Init+0x340>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_GPIO_Init+0x226>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a50      	ldr	r2, [pc, #320]	; (8004048 <HAL_GPIO_Init+0x344>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00d      	beq.n	8003f26 <HAL_GPIO_Init+0x222>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4f      	ldr	r2, [pc, #316]	; (800404c <HAL_GPIO_Init+0x348>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <HAL_GPIO_Init+0x21e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a4e      	ldr	r2, [pc, #312]	; (8004050 <HAL_GPIO_Init+0x34c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_GPIO_Init+0x21a>
 8003f1a:	2309      	movs	r3, #9
 8003f1c:	e012      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f1e:	230a      	movs	r3, #10
 8003f20:	e010      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f22:	2308      	movs	r3, #8
 8003f24:	e00e      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f26:	2307      	movs	r3, #7
 8003f28:	e00c      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f2a:	2306      	movs	r3, #6
 8003f2c:	e00a      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f2e:	2305      	movs	r3, #5
 8003f30:	e008      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f32:	2304      	movs	r3, #4
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f36:	2303      	movs	r3, #3
 8003f38:	e004      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e002      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_GPIO_Init+0x240>
 8003f42:	2300      	movs	r3, #0
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f002 0203 	and.w	r2, r2, #3
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f54:	4934      	ldr	r1, [pc, #208]	; (8004028 <HAL_GPIO_Init+0x324>)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <HAL_GPIO_Init+0x350>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f86:	4a33      	ldr	r2, [pc, #204]	; (8004054 <HAL_GPIO_Init+0x350>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f8c:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_GPIO_Init+0x350>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fb0:	4a28      	ldr	r2, [pc, #160]	; (8004054 <HAL_GPIO_Init+0x350>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <HAL_GPIO_Init+0x350>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_GPIO_Init+0x350>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_GPIO_Init+0x350>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <HAL_GPIO_Init+0x350>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	f67f ae86 	bls.w	8003d24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004018:	bf00      	nop
 800401a:	3724      	adds	r7, #36	; 0x24
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40023800 	.word	0x40023800
 8004028:	40013800 	.word	0x40013800
 800402c:	40020000 	.word	0x40020000
 8004030:	40020400 	.word	0x40020400
 8004034:	40020800 	.word	0x40020800
 8004038:	40020c00 	.word	0x40020c00
 800403c:	40021000 	.word	0x40021000
 8004040:	40021400 	.word	0x40021400
 8004044:	40021800 	.word	0x40021800
 8004048:	40021c00 	.word	0x40021c00
 800404c:	40022000 	.word	0x40022000
 8004050:	40022400 	.word	0x40022400
 8004054:	40013c00 	.word	0x40013c00

08004058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e0d9      	b.n	8004228 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004074:	2201      	movs	r2, #1
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	f040 80c9 	bne.w	8004222 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004090:	4a6a      	ldr	r2, [pc, #424]	; (800423c <HAL_GPIO_DeInit+0x1e4>)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	3302      	adds	r3, #2
 8004098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	220f      	movs	r2, #15
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a62      	ldr	r2, [pc, #392]	; (8004240 <HAL_GPIO_DeInit+0x1e8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d037      	beq.n	800412a <HAL_GPIO_DeInit+0xd2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a61      	ldr	r2, [pc, #388]	; (8004244 <HAL_GPIO_DeInit+0x1ec>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d031      	beq.n	8004126 <HAL_GPIO_DeInit+0xce>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a60      	ldr	r2, [pc, #384]	; (8004248 <HAL_GPIO_DeInit+0x1f0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02b      	beq.n	8004122 <HAL_GPIO_DeInit+0xca>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a5f      	ldr	r2, [pc, #380]	; (800424c <HAL_GPIO_DeInit+0x1f4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d025      	beq.n	800411e <HAL_GPIO_DeInit+0xc6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a5e      	ldr	r2, [pc, #376]	; (8004250 <HAL_GPIO_DeInit+0x1f8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01f      	beq.n	800411a <HAL_GPIO_DeInit+0xc2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a5d      	ldr	r2, [pc, #372]	; (8004254 <HAL_GPIO_DeInit+0x1fc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d019      	beq.n	8004116 <HAL_GPIO_DeInit+0xbe>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_GPIO_DeInit+0x200>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_GPIO_DeInit+0xba>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a5b      	ldr	r2, [pc, #364]	; (800425c <HAL_GPIO_DeInit+0x204>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00d      	beq.n	800410e <HAL_GPIO_DeInit+0xb6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a5a      	ldr	r2, [pc, #360]	; (8004260 <HAL_GPIO_DeInit+0x208>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <HAL_GPIO_DeInit+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a59      	ldr	r2, [pc, #356]	; (8004264 <HAL_GPIO_DeInit+0x20c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_GPIO_DeInit+0xae>
 8004102:	2309      	movs	r3, #9
 8004104:	e012      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004106:	230a      	movs	r3, #10
 8004108:	e010      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800410a:	2308      	movs	r3, #8
 800410c:	e00e      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800410e:	2307      	movs	r3, #7
 8004110:	e00c      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004112:	2306      	movs	r3, #6
 8004114:	e00a      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004116:	2305      	movs	r3, #5
 8004118:	e008      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800411a:	2304      	movs	r3, #4
 800411c:	e006      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800411e:	2303      	movs	r3, #3
 8004120:	e004      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004122:	2302      	movs	r3, #2
 8004124:	e002      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800412a:	2300      	movs	r3, #0
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	f002 0203 	and.w	r2, r2, #3
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	4093      	lsls	r3, r2
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	d132      	bne.n	80041a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800413c:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	43db      	mvns	r3, r3
 8004144:	4948      	ldr	r1, [pc, #288]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 8004146:	4013      	ands	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	4945      	ldr	r1, [pc, #276]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 8004154:	4013      	ands	r3, r2
 8004156:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004158:	4b43      	ldr	r3, [pc, #268]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	4941      	ldr	r1, [pc, #260]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 8004162:	4013      	ands	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004166:	4b40      	ldr	r3, [pc, #256]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	43db      	mvns	r3, r3
 800416e:	493e      	ldr	r1, [pc, #248]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 8004170:	4013      	ands	r3, r2
 8004172:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004184:	4a2d      	ldr	r2, [pc, #180]	; (800423c <HAL_GPIO_DeInit+0x1e4>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	3302      	adds	r3, #2
 800418c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	43da      	mvns	r2, r3
 8004194:	4829      	ldr	r0, [pc, #164]	; (800423c <HAL_GPIO_DeInit+0x1e4>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	400a      	ands	r2, r1
 800419c:	3302      	adds	r3, #2
 800419e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	2103      	movs	r1, #3
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	401a      	ands	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	08da      	lsrs	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3208      	adds	r2, #8
 80041c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	220f      	movs	r2, #15
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	08d2      	lsrs	r2, r2, #3
 80041d8:	4019      	ands	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3208      	adds	r2, #8
 80041de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2103      	movs	r1, #3
 80041ec:	fa01 f303 	lsl.w	r3, r1, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	401a      	ands	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	2101      	movs	r1, #1
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	401a      	ands	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2103      	movs	r1, #3
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	f67f af22 	bls.w	8004074 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40013800 	.word	0x40013800
 8004240:	40020000 	.word	0x40020000
 8004244:	40020400 	.word	0x40020400
 8004248:	40020800 	.word	0x40020800
 800424c:	40020c00 	.word	0x40020c00
 8004250:	40021000 	.word	0x40021000
 8004254:	40021400 	.word	0x40021400
 8004258:	40021800 	.word	0x40021800
 800425c:	40021c00 	.word	0x40021c00
 8004260:	40022000 	.word	0x40022000
 8004264:	40022400 	.word	0x40022400
 8004268:	40013c00 	.word	0x40013c00

0800426c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
 8004278:	4613      	mov	r3, r2
 800427a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004288:	e003      	b.n	8004292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	041a      	lsls	r2, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e07f      	b.n	80043b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fe5e 	bl	8001f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004300:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	e006      	b.n	8004328 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004326:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d104      	bne.n	800433a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_I2C_Init+0x11c>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004358:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69d9      	ldr	r1, [r3, #28]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	02008000 	.word	0x02008000

080043c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e021      	b.n	8004416 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2224      	movs	r2, #36	; 0x24
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fe44 	bl	8002078 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b20      	cmp	r3, #32
 8004444:	f040 80f9 	bne.w	800463a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_I2C_Mem_Write+0x34>
 800444e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0ed      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_I2C_Mem_Write+0x4e>
 800446a:	2302      	movs	r3, #2
 800446c:	e0e6      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004476:	f7fe faff 	bl	8002a78 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2319      	movs	r3, #25
 8004482:	2201      	movs	r2, #1
 8004484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fad1 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0d1      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2221      	movs	r2, #33	; 0x21
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a3a      	ldr	r2, [r7, #32]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c0:	88f8      	ldrh	r0, [r7, #6]
 80044c2:	893a      	ldrh	r2, [r7, #8]
 80044c4:	8979      	ldrh	r1, [r7, #10]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	4603      	mov	r3, r0
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9e1 	bl	8004898 <I2C_RequestMemoryWrite>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0a9      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2bff      	cmp	r3, #255	; 0xff
 80044f0:	d90e      	bls.n	8004510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	8979      	ldrh	r1, [r7, #10]
 8004500:	2300      	movs	r3, #0
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fbb3 	bl	8004c74 <I2C_TransferConfig>
 800450e:	e00f      	b.n	8004530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	b2da      	uxtb	r2, r3
 8004520:	8979      	ldrh	r1, [r7, #10]
 8004522:	2300      	movs	r3, #0
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fba2 	bl	8004c74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fabb 	bl	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e07b      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d034      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x1c8>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	d130      	bne.n	80045e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	2200      	movs	r2, #0
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fa4d 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e04d      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2bff      	cmp	r3, #255	; 0xff
 80045a8:	d90e      	bls.n	80045c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	22ff      	movs	r2, #255	; 0xff
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	8979      	ldrh	r1, [r7, #10]
 80045b8:	2300      	movs	r3, #0
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fb57 	bl	8004c74 <I2C_TransferConfig>
 80045c6:	e00f      	b.n	80045e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	8979      	ldrh	r1, [r7, #10]
 80045da:	2300      	movs	r3, #0
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fb46 	bl	8004c74 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d19e      	bne.n	8004530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fa9a 	bl	8004b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e01a      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2220      	movs	r2, #32
 800460c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_I2C_Mem_Write+0x224>)
 800461a:	400b      	ands	r3, r1
 800461c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800463a:	2302      	movs	r3, #2
  }
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	fe00e800 	.word	0xfe00e800

08004648 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	4608      	mov	r0, r1
 8004652:	4611      	mov	r1, r2
 8004654:	461a      	mov	r2, r3
 8004656:	4603      	mov	r3, r0
 8004658:	817b      	strh	r3, [r7, #10]
 800465a:	460b      	mov	r3, r1
 800465c:	813b      	strh	r3, [r7, #8]
 800465e:	4613      	mov	r3, r2
 8004660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b20      	cmp	r3, #32
 800466c:	f040 80fd 	bne.w	800486a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_I2C_Mem_Read+0x34>
 8004676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0f1      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_I2C_Mem_Read+0x4e>
 8004692:	2302      	movs	r3, #2
 8004694:	e0ea      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800469e:	f7fe f9eb 	bl	8002a78 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2319      	movs	r3, #25
 80046aa:	2201      	movs	r2, #1
 80046ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f9bd 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0d5      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2222      	movs	r2, #34	; 0x22
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e8:	88f8      	ldrh	r0, [r7, #6]
 80046ea:	893a      	ldrh	r2, [r7, #8]
 80046ec:	8979      	ldrh	r1, [r7, #10]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	4603      	mov	r3, r0
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f921 	bl	8004940 <I2C_RequestMemoryRead>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0ad      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2bff      	cmp	r3, #255	; 0xff
 8004718:	d90e      	bls.n	8004738 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	22ff      	movs	r2, #255	; 0xff
 800471e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004724:	b2da      	uxtb	r2, r3
 8004726:	8979      	ldrh	r1, [r7, #10]
 8004728:	4b52      	ldr	r3, [pc, #328]	; (8004874 <HAL_I2C_Mem_Read+0x22c>)
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fa9f 	bl	8004c74 <I2C_TransferConfig>
 8004736:	e00f      	b.n	8004758 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	b2da      	uxtb	r2, r3
 8004748:	8979      	ldrh	r1, [r7, #10]
 800474a:	4b4a      	ldr	r3, [pc, #296]	; (8004874 <HAL_I2C_Mem_Read+0x22c>)
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fa8e 	bl	8004c74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2200      	movs	r2, #0
 8004760:	2104      	movs	r1, #4
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f964 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07c      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d034      	beq.n	8004818 <HAL_I2C_Mem_Read+0x1d0>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d130      	bne.n	8004818 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	2200      	movs	r2, #0
 80047be:	2180      	movs	r1, #128	; 0x80
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f935 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e04d      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2bff      	cmp	r3, #255	; 0xff
 80047d8:	d90e      	bls.n	80047f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	22ff      	movs	r2, #255	; 0xff
 80047de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	8979      	ldrh	r1, [r7, #10]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fa3f 	bl	8004c74 <I2C_TransferConfig>
 80047f6:	e00f      	b.n	8004818 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	b2da      	uxtb	r2, r3
 8004808:	8979      	ldrh	r1, [r7, #10]
 800480a:	2300      	movs	r3, #0
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fa2e 	bl	8004c74 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d19a      	bne.n	8004758 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f982 	bl	8004b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e01a      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2220      	movs	r2, #32
 800483c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_I2C_Mem_Read+0x230>)
 800484a:	400b      	ands	r3, r1
 800484c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	80002400 	.word	0x80002400
 8004878:	fe00e800 	.word	0xfe00e800

0800487c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	460b      	mov	r3, r1
 80048ac:	813b      	strh	r3, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	8979      	ldrh	r1, [r7, #10]
 80048b8:	4b20      	ldr	r3, [pc, #128]	; (800493c <I2C_RequestMemoryWrite+0xa4>)
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f9d7 	bl	8004c74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f8f0 	bl	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e02c      	b.n	8004934 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048e0:	893b      	ldrh	r3, [r7, #8]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
 80048ea:	e015      	b.n	8004918 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	69b9      	ldr	r1, [r7, #24]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f8d6 	bl	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e012      	b.n	8004934 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800490e:	893b      	ldrh	r3, [r7, #8]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f884 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	80002000 	.word	0x80002000

08004940 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	461a      	mov	r2, r3
 800494e:	4603      	mov	r3, r0
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	460b      	mov	r3, r1
 8004954:	813b      	strh	r3, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	8979      	ldrh	r1, [r7, #10]
 8004960:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <I2C_RequestMemoryRead+0xa4>)
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f984 	bl	8004c74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	69b9      	ldr	r1, [r7, #24]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f89d 	bl	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e02c      	b.n	80049da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004986:	893b      	ldrh	r3, [r7, #8]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
 8004990:	e015      	b.n	80049be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004992:	893b      	ldrh	r3, [r7, #8]
 8004994:	0a1b      	lsrs	r3, r3, #8
 8004996:	b29b      	uxth	r3, r3
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	69b9      	ldr	r1, [r7, #24]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f883 	bl	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e012      	b.n	80049da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049b4:	893b      	ldrh	r3, [r7, #8]
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2140      	movs	r1, #64	; 0x40
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f831 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	80002000 	.word	0x80002000

080049e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d103      	bne.n	8004a06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d007      	beq.n	8004a24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	619a      	str	r2, [r3, #24]
  }
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a40:	e022      	b.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d01e      	beq.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fe f815 	bl	8002a78 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e00f      	b.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d0cd      	beq.n	8004a42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004abc:	e02c      	b.n	8004b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f870 	bl	8004ba8 <I2C_IsAcknowledgeFailed>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e02a      	b.n	8004b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d01e      	beq.n	8004b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ada:	f7fd ffcd 	bl	8002a78 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d113      	bne.n	8004b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e007      	b.n	8004b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d1cb      	bne.n	8004abe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b3c:	e028      	b.n	8004b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f830 	bl	8004ba8 <I2C_IsAcknowledgeFailed>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e026      	b.n	8004ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b52:	f7fd ff91 	bl	8002a78 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d113      	bne.n	8004b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e007      	b.n	8004ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d1cf      	bne.n	8004b3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d151      	bne.n	8004c66 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bc2:	e022      	b.n	8004c0a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d01e      	beq.n	8004c0a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bcc:	f7fd ff54 	bl	8002a78 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <I2C_IsAcknowledgeFailed+0x3a>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d113      	bne.n	8004c0a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	f043 0220 	orr.w	r2, r3, #32
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e02e      	b.n	8004c68 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d1d5      	bne.n	8004bc4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2220      	movs	r2, #32
 8004c26:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fedd 	bl	80049e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f043 0204 	orr.w	r2, r3, #4
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	fe00e800 	.word	0xfe00e800

08004c74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	4613      	mov	r3, r2
 8004c84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	0d5b      	lsrs	r3, r3, #21
 8004c90:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c94:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <I2C_TransferConfig+0x58>)
 8004c96:	430b      	orrs	r3, r1
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	ea02 0103 	and.w	r1, r2, r3
 8004c9e:	897b      	ldrh	r3, [r7, #10]
 8004ca0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ca4:	7a7b      	ldrb	r3, [r7, #9]
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	03ff63ff 	.word	0x03ff63ff

08004cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d138      	bne.n	8004d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e032      	b.n	8004d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2224      	movs	r2, #36	; 0x24
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e000      	b.n	8004d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d58:	2302      	movs	r3, #2
  }
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d139      	bne.n	8004df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e033      	b.n	8004df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2224      	movs	r2, #36	; 0x24
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0201 	bic.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004db8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
  }
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0bf      	b.n	8004f92 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fd f962 	bl	80020f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e42:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e58:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6899      	ldr	r1, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b4a      	ldr	r3, [pc, #296]	; (8004f9c <HAL_LTDC_Init+0x19c>)
 8004e74:	400b      	ands	r3, r1
 8004e76:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6899      	ldr	r1, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68d9      	ldr	r1, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <HAL_LTDC_Init+0x19c>)
 8004ea2:	400b      	ands	r3, r1
 8004ea4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	041b      	lsls	r3, r3, #16
 8004eac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68d9      	ldr	r1, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6919      	ldr	r1, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b33      	ldr	r3, [pc, #204]	; (8004f9c <HAL_LTDC_Init+0x19c>)
 8004ed0:	400b      	ands	r3, r1
 8004ed2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6919      	ldr	r1, [r3, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6959      	ldr	r1, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b27      	ldr	r3, [pc, #156]	; (8004f9c <HAL_LTDC_Init+0x19c>)
 8004efe:	400b      	ands	r3, r1
 8004f00:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6959      	ldr	r1, [r3, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0206 	orr.w	r2, r2, #6
 8004f6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	f000f800 	.word	0xf000f800

08004fa0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d023      	beq.n	800500a <HAL_LTDC_IRQHandler+0x6a>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01e      	beq.n	800500a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0204 	bic.w	r2, r2, #4
 8004fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f86f 	bl	80050e8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d023      	beq.n	800505c <HAL_LTDC_IRQHandler+0xbc>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01e      	beq.n	800505c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0202 	bic.w	r2, r2, #2
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2202      	movs	r2, #2
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800503c:	f043 0202 	orr.w	r2, r3, #2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2204      	movs	r2, #4
 800504a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f846 	bl	80050e8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01b      	beq.n	800509e <HAL_LTDC_IRQHandler+0xfe>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d016      	beq.n	800509e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2201      	movs	r2, #1
 8005086:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f010 fb2d 	bl	80156f8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_LTDC_IRQHandler+0x140>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d016      	beq.n	80050e0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0208 	bic.w	r2, r2, #8
 80050c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2208      	movs	r2, #8
 80050c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f80e 	bl	80050fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005110:	b5b0      	push	{r4, r5, r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_LTDC_ConfigLayer+0x1a>
 8005126:	2302      	movs	r3, #2
 8005128:	e02c      	b.n	8005184 <HAL_LTDC_ConfigLayer+0x74>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2134      	movs	r1, #52	; 0x34
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	4413      	add	r3, r2
 8005146:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4614      	mov	r4, r2
 800514e:	461d      	mov	r5, r3
 8005150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800515a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f849 	bl	80051fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bdb0      	pop	{r4, r5, r7, pc}

0800518c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_LTDC_ProgramLineEvent+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e023      	b.n	80051ec <HAL_LTDC_ProgramLineEvent+0x60>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80051c4:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40016800 	.word	0x40016800

080051fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005218:	4413      	add	r3, r2
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	01db      	lsls	r3, r3, #7
 8005228:	4413      	add	r3, r2
 800522a:	3384      	adds	r3, #132	; 0x84
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	4611      	mov	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	01d2      	lsls	r2, r2, #7
 8005238:	440a      	add	r2, r1
 800523a:	3284      	adds	r2, #132	; 0x84
 800523c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005240:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005252:	4413      	add	r3, r2
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	01db      	lsls	r3, r3, #7
 8005260:	440b      	add	r3, r1
 8005262:	3384      	adds	r3, #132	; 0x84
 8005264:	4619      	mov	r1, r3
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800527a:	4413      	add	r3, r2
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	01db      	lsls	r3, r3, #7
 800528a:	4413      	add	r3, r2
 800528c:	3384      	adds	r3, #132	; 0x84
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	4611      	mov	r1, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	01d2      	lsls	r2, r2, #7
 800529a:	440a      	add	r2, r1
 800529c:	3284      	adds	r2, #132	; 0x84
 800529e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052b2:	4413      	add	r3, r2
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4619      	mov	r1, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	01db      	lsls	r3, r3, #7
 80052c0:	440b      	add	r3, r1
 80052c2:	3384      	adds	r3, #132	; 0x84
 80052c4:	4619      	mov	r1, r3
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	01db      	lsls	r3, r3, #7
 80052d6:	4413      	add	r3, r2
 80052d8:	3384      	adds	r3, #132	; 0x84
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	4611      	mov	r1, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	01d2      	lsls	r2, r2, #7
 80052e6:	440a      	add	r2, r1
 80052e8:	3284      	adds	r2, #132	; 0x84
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	01db      	lsls	r3, r3, #7
 80052fa:	4413      	add	r3, r2
 80052fc:	3384      	adds	r3, #132	; 0x84
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	4413      	add	r3, r2
 800532e:	3384      	adds	r3, #132	; 0x84
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	01db      	lsls	r3, r3, #7
 800533c:	4413      	add	r3, r2
 800533e:	3384      	adds	r3, #132	; 0x84
 8005340:	461a      	mov	r2, r3
 8005342:	2300      	movs	r3, #0
 8005344:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800534c:	461a      	mov	r2, r3
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	431a      	orrs	r2, r3
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	01db      	lsls	r3, r3, #7
 8005360:	440b      	add	r3, r1
 8005362:	3384      	adds	r3, #132	; 0x84
 8005364:	4619      	mov	r1, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	01db      	lsls	r3, r3, #7
 8005376:	4413      	add	r3, r2
 8005378:	3384      	adds	r3, #132	; 0x84
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4611      	mov	r1, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	01d2      	lsls	r2, r2, #7
 8005386:	440a      	add	r2, r1
 8005388:	3284      	adds	r2, #132	; 0x84
 800538a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800538e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	01db      	lsls	r3, r3, #7
 800539a:	4413      	add	r3, r2
 800539c:	3384      	adds	r3, #132	; 0x84
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	4413      	add	r3, r2
 80053b2:	3384      	adds	r3, #132	; 0x84
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	01db      	lsls	r3, r3, #7
 80053c0:	440b      	add	r3, r1
 80053c2:	3384      	adds	r3, #132	; 0x84
 80053c4:	4619      	mov	r1, r3
 80053c6:	4b58      	ldr	r3, [pc, #352]	; (8005528 <LTDC_SetConfig+0x32c>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	68f9      	ldr	r1, [r7, #12]
 80053d6:	6809      	ldr	r1, [r1, #0]
 80053d8:	4608      	mov	r0, r1
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	01c9      	lsls	r1, r1, #7
 80053de:	4401      	add	r1, r0
 80053e0:	3184      	adds	r1, #132	; 0x84
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	4413      	add	r3, r2
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	01db      	lsls	r3, r3, #7
 8005400:	4413      	add	r3, r2
 8005402:	3384      	adds	r3, #132	; 0x84
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	01db      	lsls	r3, r3, #7
 8005414:	4413      	add	r3, r2
 8005416:	3384      	adds	r3, #132	; 0x84
 8005418:	461a      	mov	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005428:	2304      	movs	r3, #4
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	e01b      	b.n	8005466 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d102      	bne.n	800543c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005436:	2303      	movs	r3, #3
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	e014      	b.n	8005466 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d00b      	beq.n	800545c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005448:	2b02      	cmp	r3, #2
 800544a:	d007      	beq.n	800545c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005450:	2b03      	cmp	r3, #3
 8005452:	d003      	beq.n	800545c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005458:	2b07      	cmp	r3, #7
 800545a:	d102      	bne.n	8005462 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800545c:	2302      	movs	r3, #2
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e001      	b.n	8005466 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005462:	2301      	movs	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	01db      	lsls	r3, r3, #7
 8005470:	4413      	add	r3, r2
 8005472:	3384      	adds	r3, #132	; 0x84
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	4611      	mov	r1, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	01d2      	lsls	r2, r2, #7
 8005480:	440a      	add	r2, r1
 8005482:	3284      	adds	r2, #132	; 0x84
 8005484:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005488:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	041a      	lsls	r2, r3, #16
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6859      	ldr	r1, [r3, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1acb      	subs	r3, r1, r3
 80054a0:	69f9      	ldr	r1, [r7, #28]
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	3303      	adds	r3, #3
 80054a8:	68f9      	ldr	r1, [r7, #12]
 80054aa:	6809      	ldr	r1, [r1, #0]
 80054ac:	4608      	mov	r0, r1
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	01c9      	lsls	r1, r1, #7
 80054b2:	4401      	add	r1, r0
 80054b4:	3184      	adds	r1, #132	; 0x84
 80054b6:	4313      	orrs	r3, r2
 80054b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	01db      	lsls	r3, r3, #7
 80054c4:	4413      	add	r3, r2
 80054c6:	3384      	adds	r3, #132	; 0x84
 80054c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4619      	mov	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	01db      	lsls	r3, r3, #7
 80054d4:	440b      	add	r3, r1
 80054d6:	3384      	adds	r3, #132	; 0x84
 80054d8:	4619      	mov	r1, r3
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <LTDC_SetConfig+0x330>)
 80054dc:	4013      	ands	r3, r2
 80054de:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	01db      	lsls	r3, r3, #7
 80054ea:	4413      	add	r3, r2
 80054ec:	3384      	adds	r3, #132	; 0x84
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4413      	add	r3, r2
 8005502:	3384      	adds	r3, #132	; 0x84
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	4611      	mov	r1, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	01d2      	lsls	r2, r2, #7
 8005510:	440a      	add	r2, r1
 8005512:	3284      	adds	r2, #132	; 0x84
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	6013      	str	r3, [r2, #0]
}
 800551a:	bf00      	nop
 800551c:	3724      	adds	r7, #36	; 0x24
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	fffff8f8 	.word	0xfffff8f8
 800552c:	fffff800 	.word	0xfffff800

08005530 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40007000 	.word	0x40007000

08005550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005572:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800557e:	f7fd fa7b 	bl	8002a78 <HAL_GetTick>
 8005582:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005584:	e009      	b.n	800559a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005586:	f7fd fa77 	bl	8002a78 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005594:	d901      	bls.n	800559a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e022      	b.n	80055e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800559a:	4b14      	ldr	r3, [pc, #80]	; (80055ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a6:	d1ee      	bne.n	8005586 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0f      	ldr	r2, [pc, #60]	; (80055ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055b4:	f7fd fa60 	bl	8002a78 <HAL_GetTick>
 80055b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055ba:	e009      	b.n	80055d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055bc:	f7fd fa5c 	bl	8002a78 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ca:	d901      	bls.n	80055d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e007      	b.n	80055e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055dc:	d1ee      	bne.n	80055bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40007000 	.word	0x40007000

080055f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80055f8:	f7fd fa3e 	bl	8002a78 <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e067      	b.n	80056d8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fc fe2f 	bl	8002280 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005622:	f241 3188 	movw	r1, #5000	; 0x1388
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f85e 	bl	80056e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	3b01      	subs	r3, #1
 800563c:	021a      	lsls	r2, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	2120      	movs	r1, #32
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f856 	bl	8005704 <QSPI_WaitFlagStateUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800565c:	7afb      	ldrb	r3, [r7, #11]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d135      	bne.n	80056ce <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <HAL_QSPI_Init+0xf0>)
 800566a:	4013      	ands	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6852      	ldr	r2, [r2, #4]
 8005670:	0611      	lsls	r1, r2, #24
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68d2      	ldr	r2, [r2, #12]
 8005676:	4311      	orrs	r1, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	69d2      	ldr	r2, [r2, #28]
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6a12      	ldr	r2, [r2, #32]
 8005682:	4311      	orrs	r1, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	430b      	orrs	r3, r1
 800568a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <HAL_QSPI_Init+0xf4>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6912      	ldr	r2, [r2, #16]
 800569a:	0411      	lsls	r1, r2, #16
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6952      	ldr	r2, [r2, #20]
 80056a0:	4311      	orrs	r1, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6992      	ldr	r2, [r2, #24]
 80056a6:	4311      	orrs	r1, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80056d6:	7afb      	ldrb	r3, [r7, #11]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	00ffff2f 	.word	0x00ffff2f
 80056e4:	ffe0f8fe 	.word	0xffe0f8fe

080056e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005714:	e01a      	b.n	800574c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d016      	beq.n	800574c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571e:	f7fd f9ab 	bl	8002a78 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	429a      	cmp	r2, r3
 800572c:	d302      	bcc.n	8005734 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2204      	movs	r2, #4
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	f043 0201 	orr.w	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e00e      	b.n	800576a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	429a      	cmp	r2, r3
 8005766:	d1d6      	bne.n	8005716 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800577c:	2300      	movs	r3, #0
 800577e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e291      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8087 	beq.w	80058a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005798:	4b96      	ldr	r3, [pc, #600]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d00c      	beq.n	80057be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a4:	4b93      	ldr	r3, [pc, #588]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d112      	bne.n	80057d6 <HAL_RCC_OscConfig+0x62>
 80057b0:	4b90      	ldr	r3, [pc, #576]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057bc:	d10b      	bne.n	80057d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057be:	4b8d      	ldr	r3, [pc, #564]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d06c      	beq.n	80058a4 <HAL_RCC_OscConfig+0x130>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d168      	bne.n	80058a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e26b      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057de:	d106      	bne.n	80057ee <HAL_RCC_OscConfig+0x7a>
 80057e0:	4b84      	ldr	r3, [pc, #528]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a83      	ldr	r2, [pc, #524]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80057e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	e02e      	b.n	800584c <HAL_RCC_OscConfig+0xd8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0x9c>
 80057f6:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a7e      	ldr	r2, [pc, #504]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80057fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b7c      	ldr	r3, [pc, #496]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a7b      	ldr	r2, [pc, #492]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e01d      	b.n	800584c <HAL_RCC_OscConfig+0xd8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005818:	d10c      	bne.n	8005834 <HAL_RCC_OscConfig+0xc0>
 800581a:	4b76      	ldr	r3, [pc, #472]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a75      	ldr	r2, [pc, #468]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b73      	ldr	r3, [pc, #460]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a72      	ldr	r2, [pc, #456]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800582c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e00b      	b.n	800584c <HAL_RCC_OscConfig+0xd8>
 8005834:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a6e      	ldr	r2, [pc, #440]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800583a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6b      	ldr	r2, [pc, #428]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800584a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d013      	beq.n	800587c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fd f910 	bl	8002a78 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800585c:	f7fd f90c 	bl	8002a78 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b64      	cmp	r3, #100	; 0x64
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e21f      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	4b61      	ldr	r3, [pc, #388]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCC_OscConfig+0xe8>
 800587a:	e014      	b.n	80058a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fd f8fc 	bl	8002a78 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005884:	f7fd f8f8 	bl	8002a78 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	; 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e20b      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005896:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x110>
 80058a2:	e000      	b.n	80058a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d069      	beq.n	8005986 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058b2:	4b50      	ldr	r3, [pc, #320]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058be:	4b4d      	ldr	r3, [pc, #308]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d11c      	bne.n	8005904 <HAL_RCC_OscConfig+0x190>
 80058ca:	4b4a      	ldr	r3, [pc, #296]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d116      	bne.n	8005904 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d6:	4b47      	ldr	r3, [pc, #284]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <HAL_RCC_OscConfig+0x17a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d001      	beq.n	80058ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e1df      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ee:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	493d      	ldr	r1, [pc, #244]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005902:	e040      	b.n	8005986 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d023      	beq.n	8005954 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800590c:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a38      	ldr	r2, [pc, #224]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fd f8ae 	bl	8002a78 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005920:	f7fd f8aa 	bl	8002a78 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e1bd      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005932:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4929      	ldr	r1, [pc, #164]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
 8005952:	e018      	b.n	8005986 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fd f88a 	bl	8002a78 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005968:	f7fd f886 	bl	8002a78 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e199      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597a:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d038      	beq.n	8005a04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d019      	beq.n	80059ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800599a:	4b16      	ldr	r3, [pc, #88]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 800599c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599e:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fd f867 	bl	8002a78 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ae:	f7fd f863 	bl	8002a78 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e176      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80059c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x23a>
 80059cc:	e01a      	b.n	8005a04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80059d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d2:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <HAL_RCC_OscConfig+0x280>)
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059da:	f7fd f84d 	bl	8002a78 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e0:	e00a      	b.n	80059f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e2:	f7fd f849 	bl	8002a78 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d903      	bls.n	80059f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e15c      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
 80059f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f8:	4b91      	ldr	r3, [pc, #580]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 80059fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1ee      	bne.n	80059e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80a4 	beq.w	8005b5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a12:	4b8b      	ldr	r3, [pc, #556]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	4b88      	ldr	r3, [pc, #544]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	4a87      	ldr	r2, [pc, #540]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
 8005a2a:	4b85      	ldr	r3, [pc, #532]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a3a:	4b82      	ldr	r3, [pc, #520]	; (8005c44 <HAL_RCC_OscConfig+0x4d0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d118      	bne.n	8005a78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a46:	4b7f      	ldr	r3, [pc, #508]	; (8005c44 <HAL_RCC_OscConfig+0x4d0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a7e      	ldr	r2, [pc, #504]	; (8005c44 <HAL_RCC_OscConfig+0x4d0>)
 8005a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a52:	f7fd f811 	bl	8002a78 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a5a:	f7fd f80d 	bl	8002a78 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b64      	cmp	r3, #100	; 0x64
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e120      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a6c:	4b75      	ldr	r3, [pc, #468]	; (8005c44 <HAL_RCC_OscConfig+0x4d0>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0f0      	beq.n	8005a5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCC_OscConfig+0x31a>
 8005a80:	4b6f      	ldr	r3, [pc, #444]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	4a6e      	ldr	r2, [pc, #440]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8c:	e02d      	b.n	8005aea <HAL_RCC_OscConfig+0x376>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x33c>
 8005a96:	4b6a      	ldr	r3, [pc, #424]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4a69      	ldr	r2, [pc, #420]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa2:	4b67      	ldr	r3, [pc, #412]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	4a66      	ldr	r2, [pc, #408]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	6713      	str	r3, [r2, #112]	; 0x70
 8005aae:	e01c      	b.n	8005aea <HAL_RCC_OscConfig+0x376>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b05      	cmp	r3, #5
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x35e>
 8005ab8:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a60      	ldr	r2, [pc, #384]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005abe:	f043 0304 	orr.w	r3, r3, #4
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac4:	4b5e      	ldr	r3, [pc, #376]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac8:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad0:	e00b      	b.n	8005aea <HAL_RCC_OscConfig+0x376>
 8005ad2:	4b5b      	ldr	r3, [pc, #364]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	4a5a      	ldr	r2, [pc, #360]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ade:	4b58      	ldr	r3, [pc, #352]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4a57      	ldr	r2, [pc, #348]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d015      	beq.n	8005b1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af2:	f7fc ffc1 	bl	8002a78 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fc ffbd 	bl	8002a78 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e0ce      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b10:	4b4b      	ldr	r3, [pc, #300]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0ee      	beq.n	8005afa <HAL_RCC_OscConfig+0x386>
 8005b1c:	e014      	b.n	8005b48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1e:	f7fc ffab 	bl	8002a78 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fc ffa7 	bl	8002a78 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0b8      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3c:	4b40      	ldr	r3, [pc, #256]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ee      	bne.n	8005b26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d105      	bne.n	8005b5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b4e:	4b3c      	ldr	r3, [pc, #240]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	4a3b      	ldr	r2, [pc, #236]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80a4 	beq.w	8005cac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b64:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 030c 	and.w	r3, r3, #12
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d06b      	beq.n	8005c48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d149      	bne.n	8005c0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b78:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a30      	ldr	r2, [pc, #192]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fc ff78 	bl	8002a78 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fc ff74 	bl	8002a78 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e087      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9e:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fc ff48 	bl	8002a78 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fc ff44 	bl	8002a78 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e057      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x478>
 8005c0a:	e04f      	b.n	8005cac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a0b      	ldr	r2, [pc, #44]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c18:	f7fc ff2e 	bl	8002a78 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c20:	f7fc ff2a 	bl	8002a78 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e03d      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c32:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <HAL_RCC_OscConfig+0x4cc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4ac>
 8005c3e:	e035      	b.n	8005cac <HAL_RCC_OscConfig+0x538>
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <HAL_RCC_OscConfig+0x544>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d028      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d121      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d11a      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d111      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	3b01      	subs	r3, #1
 8005c92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023800 	.word	0x40023800

08005cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0d0      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b6a      	ldr	r3, [pc, #424]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d910      	bls.n	8005d04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b67      	ldr	r3, [pc, #412]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 020f 	bic.w	r2, r3, #15
 8005cea:	4965      	ldr	r1, [pc, #404]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b63      	ldr	r3, [pc, #396]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0b8      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d020      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d1c:	4b59      	ldr	r3, [pc, #356]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4a58      	ldr	r2, [pc, #352]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d34:	4b53      	ldr	r3, [pc, #332]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4a52      	ldr	r2, [pc, #328]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d40:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	494d      	ldr	r1, [pc, #308]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d040      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d107      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	4b47      	ldr	r3, [pc, #284]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d115      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e07f      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7e:	4b41      	ldr	r3, [pc, #260]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e073      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e06b      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9e:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f023 0203 	bic.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4936      	ldr	r1, [pc, #216]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db0:	f7fc fe62 	bl	8002a78 <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db6:	e00a      	b.n	8005dce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db8:	f7fc fe5e 	bl	8002a78 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e053      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dce:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 020c 	and.w	r2, r3, #12
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1eb      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005de0:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d210      	bcs.n	8005e10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f023 020f 	bic.w	r2, r3, #15
 8005df6:	4922      	ldr	r1, [pc, #136]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfe:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e032      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e1c:	4b19      	ldr	r3, [pc, #100]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4916      	ldr	r1, [pc, #88]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	490e      	ldr	r1, [pc, #56]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e4e:	f000 f821 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8005e52:	4601      	mov	r1, r0
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <HAL_RCC_ClockConfig+0x1cc>)
 8005e60:	5cd3      	ldrb	r3, [r2, r3]
 8005e62:	fa21 f303 	lsr.w	r3, r1, r3
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <HAL_RCC_ClockConfig+0x1d0>)
 8005e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_RCC_ClockConfig+0x1d4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fc fc42 	bl	80026f8 <HAL_InitTick>

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40023c00 	.word	0x40023c00
 8005e84:	40023800 	.word	0x40023800
 8005e88:	0802727c 	.word	0x0802727c
 8005e8c:	2000002c 	.word	0x2000002c
 8005e90:	20000030 	.word	0x20000030

08005e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eaa:	4b50      	ldr	r3, [pc, #320]	; (8005fec <HAL_RCC_GetSysClockFreq+0x158>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d007      	beq.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x32>
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d008      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x38>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 808d 	bne.w	8005fda <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ec0:	4b4b      	ldr	r3, [pc, #300]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ec2:	60bb      	str	r3, [r7, #8]
      break;
 8005ec4:	e08c      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ec6:	4b4b      	ldr	r3, [pc, #300]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ec8:	60bb      	str	r3, [r7, #8]
      break;
 8005eca:	e089      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ecc:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCC_GetSysClockFreq+0x158>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ed6:	4b45      	ldr	r3, [pc, #276]	; (8005fec <HAL_RCC_GetSysClockFreq+0x158>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d023      	beq.n	8005f2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee2:	4b42      	ldr	r3, [pc, #264]	; (8005fec <HAL_RCC_GetSysClockFreq+0x158>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	099b      	lsrs	r3, r3, #6
 8005ee8:	f04f 0400 	mov.w	r4, #0
 8005eec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	ea03 0501 	and.w	r5, r3, r1
 8005ef8:	ea04 0602 	and.w	r6, r4, r2
 8005efc:	4a3d      	ldr	r2, [pc, #244]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005efe:	fb02 f106 	mul.w	r1, r2, r6
 8005f02:	2200      	movs	r2, #0
 8005f04:	fb02 f205 	mul.w	r2, r2, r5
 8005f08:	440a      	add	r2, r1
 8005f0a:	493a      	ldr	r1, [pc, #232]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f0c:	fba5 0101 	umull	r0, r1, r5, r1
 8005f10:	1853      	adds	r3, r2, r1
 8005f12:	4619      	mov	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f04f 0400 	mov.w	r4, #0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	f7fa f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8005f22:	4603      	mov	r3, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e049      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f2a:	4b30      	ldr	r3, [pc, #192]	; (8005fec <HAL_RCC_GetSysClockFreq+0x158>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	099b      	lsrs	r3, r3, #6
 8005f30:	f04f 0400 	mov.w	r4, #0
 8005f34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	ea03 0501 	and.w	r5, r3, r1
 8005f40:	ea04 0602 	and.w	r6, r4, r2
 8005f44:	4629      	mov	r1, r5
 8005f46:	4632      	mov	r2, r6
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	f04f 0400 	mov.w	r4, #0
 8005f50:	0154      	lsls	r4, r2, #5
 8005f52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f56:	014b      	lsls	r3, r1, #5
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	1b49      	subs	r1, r1, r5
 8005f5e:	eb62 0206 	sbc.w	r2, r2, r6
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	f04f 0400 	mov.w	r4, #0
 8005f6a:	0194      	lsls	r4, r2, #6
 8005f6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f70:	018b      	lsls	r3, r1, #6
 8005f72:	1a5b      	subs	r3, r3, r1
 8005f74:	eb64 0402 	sbc.w	r4, r4, r2
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	00e2      	lsls	r2, r4, #3
 8005f82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f86:	00d9      	lsls	r1, r3, #3
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4614      	mov	r4, r2
 8005f8c:	195b      	adds	r3, r3, r5
 8005f8e:	eb44 0406 	adc.w	r4, r4, r6
 8005f92:	f04f 0100 	mov.w	r1, #0
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	02a2      	lsls	r2, r4, #10
 8005f9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fa0:	0299      	lsls	r1, r3, #10
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	4621      	mov	r1, r4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f04f 0400 	mov.w	r4, #0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	f7fa f97c 	bl	80002b0 <__aeabi_uldivmod>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fbe:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_RCC_GetSysClockFreq+0x158>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	3301      	adds	r3, #1
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	60bb      	str	r3, [r7, #8]
      break;
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005fdc:	60bb      	str	r3, [r7, #8]
      break;
 8005fde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	00f42400 	.word	0x00f42400
 8005ff4:	017d7840 	.word	0x017d7840

08005ff8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <HAL_RCC_GetHCLKFreq+0x14>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	2000002c 	.word	0x2000002c

08006010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006014:	f7ff fff0 	bl	8005ff8 <HAL_RCC_GetHCLKFreq>
 8006018:	4601      	mov	r1, r0
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0a9b      	lsrs	r3, r3, #10
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	4a03      	ldr	r2, [pc, #12]	; (8006034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006026:	5cd3      	ldrb	r3, [r2, r3]
 8006028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40023800 	.word	0x40023800
 8006034:	0802728c 	.word	0x0802728c

08006038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800603c:	f7ff ffdc 	bl	8005ff8 <HAL_RCC_GetHCLKFreq>
 8006040:	4601      	mov	r1, r0
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0b5b      	lsrs	r3, r3, #13
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	4a03      	ldr	r2, [pc, #12]	; (800605c <HAL_RCC_GetPCLK2Freq+0x24>)
 800604e:	5cd3      	ldrb	r3, [r2, r3]
 8006050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40023800 	.word	0x40023800
 800605c:	0802728c 	.word	0x0802728c

08006060 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	220f      	movs	r2, #15
 800606e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0203 	and.w	r2, r3, #3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800607c:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	08db      	lsrs	r3, r3, #3
 800609a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <HAL_RCC_GetClockConfig+0x60>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 020f 	and.w	r2, r3, #15
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	40023c00 	.word	0x40023c00

080060c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d012      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060ec:	4b69      	ldr	r3, [pc, #420]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4a68      	ldr	r2, [pc, #416]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060f6:	6093      	str	r3, [r2, #8]
 80060f8:	4b66      	ldr	r3, [pc, #408]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	4964      	ldr	r1, [pc, #400]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006102:	4313      	orrs	r3, r2
 8006104:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800610e:	2301      	movs	r3, #1
 8006110:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800611e:	4b5d      	ldr	r3, [pc, #372]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	4959      	ldr	r1, [pc, #356]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800613c:	d101      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800614a:	2301      	movs	r3, #1
 800614c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d017      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800615a:	4b4e      	ldr	r3, [pc, #312]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	494a      	ldr	r1, [pc, #296]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006178:	d101      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006186:	2301      	movs	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 808b 	beq.w	80062be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061a8:	4b3a      	ldr	r3, [pc, #232]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	4a39      	ldr	r2, [pc, #228]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b2:	6413      	str	r3, [r2, #64]	; 0x40
 80061b4:	4b37      	ldr	r3, [pc, #220]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061c0:	4b35      	ldr	r3, [pc, #212]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a34      	ldr	r2, [pc, #208]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061cc:	f7fc fc54 	bl	8002a78 <HAL_GetTick>
 80061d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d4:	f7fc fc50 	bl	8002a78 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b64      	cmp	r3, #100	; 0x64
 80061e0:	d901      	bls.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e355      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061e6:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061f2:	4b28      	ldr	r3, [pc, #160]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d035      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	429a      	cmp	r2, r3
 800620e:	d02e      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006210:	4b20      	ldr	r3, [pc, #128]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006218:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800621a:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006226:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006232:	4a18      	ldr	r2, [pc, #96]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d114      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fc fc18 	bl	8002a78 <HAL_GetTick>
 8006248:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624a:	e00a      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800624c:	f7fc fc14 	bl	8002a78 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e317      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006262:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ee      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800627a:	d111      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006288:	4b04      	ldr	r3, [pc, #16]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800628a:	400b      	ands	r3, r1
 800628c:	4901      	ldr	r1, [pc, #4]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628e:	4313      	orrs	r3, r2
 8006290:	608b      	str	r3, [r1, #8]
 8006292:	e00b      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006294:	40023800 	.word	0x40023800
 8006298:	40007000 	.word	0x40007000
 800629c:	0ffffcff 	.word	0x0ffffcff
 80062a0:	4bb0      	ldr	r3, [pc, #704]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4aaf      	ldr	r2, [pc, #700]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062aa:	6093      	str	r3, [r2, #8]
 80062ac:	4bad      	ldr	r3, [pc, #692]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b8:	49aa      	ldr	r1, [pc, #680]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0310 	and.w	r3, r3, #16
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d010      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062ca:	4ba6      	ldr	r3, [pc, #664]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d0:	4aa4      	ldr	r2, [pc, #656]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062da:	4ba2      	ldr	r3, [pc, #648]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	499f      	ldr	r1, [pc, #636]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062f8:	4b9a      	ldr	r3, [pc, #616]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006306:	4997      	ldr	r1, [pc, #604]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800631a:	4b92      	ldr	r3, [pc, #584]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006328:	498e      	ldr	r1, [pc, #568]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800633c:	4b89      	ldr	r3, [pc, #548]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634a:	4986      	ldr	r1, [pc, #536]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800635e:	4b81      	ldr	r3, [pc, #516]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	497d      	ldr	r1, [pc, #500]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006380:	4b78      	ldr	r3, [pc, #480]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f023 0203 	bic.w	r2, r3, #3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	4975      	ldr	r1, [pc, #468]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063a2:	4b70      	ldr	r3, [pc, #448]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	f023 020c 	bic.w	r2, r3, #12
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b0:	496c      	ldr	r1, [pc, #432]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063c4:	4b67      	ldr	r3, [pc, #412]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	4964      	ldr	r1, [pc, #400]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063e6:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	495b      	ldr	r1, [pc, #364]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006408:	4b56      	ldr	r3, [pc, #344]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	4953      	ldr	r1, [pc, #332]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800642a:	4b4e      	ldr	r3, [pc, #312]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	494a      	ldr	r1, [pc, #296]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800644c:	4b45      	ldr	r3, [pc, #276]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	4942      	ldr	r1, [pc, #264]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800646e:	4b3d      	ldr	r3, [pc, #244]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006474:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647c:	4939      	ldr	r1, [pc, #228]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006490:	4b34      	ldr	r3, [pc, #208]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800649e:	4931      	ldr	r1, [pc, #196]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d011      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064b2:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c0:	4928      	ldr	r1, [pc, #160]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d0:	d101      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064d2:	2301      	movs	r3, #1
 80064d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064e2:	2301      	movs	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006500:	4918      	ldr	r1, [pc, #96]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006524:	490f      	ldr	r1, [pc, #60]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d005      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800653a:	f040 80d8 	bne.w	80066ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a08      	ldr	r2, [pc, #32]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006544:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800654a:	f7fc fa95 	bl	8002a78 <HAL_GetTick>
 800654e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006550:	e00a      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006552:	f7fc fa91 	bl	8002a78 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b64      	cmp	r3, #100	; 0x64
 800655e:	d903      	bls.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e196      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006564:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006568:	4b6c      	ldr	r3, [pc, #432]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1ee      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d021      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	d11d      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006588:	4b64      	ldr	r3, [pc, #400]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006596:	4b61      	ldr	r3, [pc, #388]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659c:	0e1b      	lsrs	r3, r3, #24
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	019a      	lsls	r2, r3, #6
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	431a      	orrs	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	061b      	lsls	r3, r3, #24
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	071b      	lsls	r3, r3, #28
 80065bc:	4957      	ldr	r1, [pc, #348]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x516>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d02e      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ee:	d129      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065f0:	4b4a      	ldr	r3, [pc, #296]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065fe:	4b47      	ldr	r3, [pc, #284]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006604:	0f1b      	lsrs	r3, r3, #28
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	019a      	lsls	r2, r3, #6
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	431a      	orrs	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	071b      	lsls	r3, r3, #28
 8006624:	493d      	ldr	r1, [pc, #244]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800662c:	4b3b      	ldr	r3, [pc, #236]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800662e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006632:	f023 021f 	bic.w	r2, r3, #31
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	3b01      	subs	r3, #1
 800663c:	4937      	ldr	r1, [pc, #220]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01d      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006650:	4b32      	ldr	r3, [pc, #200]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006656:	0e1b      	lsrs	r3, r3, #24
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006664:	0f1b      	lsrs	r3, r3, #28
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	019a      	lsls	r2, r3, #6
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	431a      	orrs	r2, r3
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	431a      	orrs	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	071b      	lsls	r3, r3, #28
 8006684:	4925      	ldr	r1, [pc, #148]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d011      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	019a      	lsls	r2, r3, #6
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	041b      	lsls	r3, r3, #16
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	071b      	lsls	r3, r3, #28
 80066b4:	4919      	ldr	r1, [pc, #100]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066bc:	4b17      	ldr	r3, [pc, #92]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a16      	ldr	r2, [pc, #88]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c8:	f7fc f9d6 	bl	8002a78 <HAL_GetTick>
 80066cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066d0:	f7fc f9d2 	bl	8002a78 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b64      	cmp	r3, #100	; 0x64
 80066dc:	d901      	bls.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e0d7      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066e2:	4b0e      	ldr	r3, [pc, #56]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	f040 80cd 	bne.w	8006890 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066f6:	4b09      	ldr	r3, [pc, #36]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006702:	f7fc f9b9 	bl	8002a78 <HAL_GetTick>
 8006706:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006708:	e00a      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800670a:	f7fc f9b5 	bl	8002a78 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b64      	cmp	r3, #100	; 0x64
 8006716:	d903      	bls.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e0ba      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800671c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006720:	4b5e      	ldr	r3, [pc, #376]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800672c:	d0ed      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800674a:	2b00      	cmp	r3, #0
 800674c:	d02e      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d12a      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006756:	4b51      	ldr	r3, [pc, #324]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006764:	4b4d      	ldr	r3, [pc, #308]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676a:	0f1b      	lsrs	r3, r3, #28
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	019a      	lsls	r2, r3, #6
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	061b      	lsls	r3, r3, #24
 8006784:	431a      	orrs	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	071b      	lsls	r3, r3, #28
 800678a:	4944      	ldr	r1, [pc, #272]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006792:	4b42      	ldr	r3, [pc, #264]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006798:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	493d      	ldr	r1, [pc, #244]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d022      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c0:	d11d      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067c2:	4b36      	ldr	r3, [pc, #216]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	0e1b      	lsrs	r3, r3, #24
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067d0:	4b32      	ldr	r3, [pc, #200]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d6:	0f1b      	lsrs	r3, r3, #28
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	019a      	lsls	r2, r3, #6
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	041b      	lsls	r3, r3, #16
 80067ea:	431a      	orrs	r2, r3
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	061b      	lsls	r3, r3, #24
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	071b      	lsls	r3, r3, #28
 80067f6:	4929      	ldr	r1, [pc, #164]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d028      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800680a:	4b24      	ldr	r3, [pc, #144]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	0e1b      	lsrs	r3, r3, #24
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006818:	4b20      	ldr	r3, [pc, #128]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681e:	0c1b      	lsrs	r3, r3, #16
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	019a      	lsls	r2, r3, #6
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	431a      	orrs	r2, r3
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	061b      	lsls	r3, r3, #24
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	071b      	lsls	r3, r3, #28
 800683e:	4917      	ldr	r1, [pc, #92]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006846:	4b15      	ldr	r3, [pc, #84]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800684c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4911      	ldr	r1, [pc, #68]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006856:	4313      	orrs	r3, r2
 8006858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0e      	ldr	r2, [pc, #56]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006868:	f7fc f906 	bl	8002a78 <HAL_GetTick>
 800686c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006870:	f7fc f902 	bl	8002a78 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b64      	cmp	r3, #100	; 0x64
 800687c:	d901      	bls.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e007      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006882:	4b06      	ldr	r3, [pc, #24]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800688a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688e:	d1ef      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40023800 	.word	0x40023800

080068a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068be:	f040 8086 	bne.w	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80068c2:	4b8d      	ldr	r3, [pc, #564]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068d0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d8:	d03e      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80068da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068de:	d073      	beq.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d000      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80068e4:	e074      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80068e6:	4b84      	ldr	r3, [pc, #528]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d108      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068f2:	4b81      	ldr	r3, [pc, #516]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fa:	4a80      	ldr	r2, [pc, #512]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	e007      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006904:	4b7c      	ldr	r3, [pc, #496]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800690c:	4a7c      	ldr	r2, [pc, #496]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006914:	4b78      	ldr	r3, [pc, #480]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691a:	0e1b      	lsrs	r3, r3, #24
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006922:	4b75      	ldr	r3, [pc, #468]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006928:	099b      	lsrs	r3, r3, #6
 800692a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	fb02 f203 	mul.w	r2, r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800693c:	4b6e      	ldr	r3, [pc, #440]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800693e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]
        break;
 8006956:	e03b      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006958:	4b67      	ldr	r3, [pc, #412]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d108      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006964:	4b64      	ldr	r3, [pc, #400]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696c:	4a63      	ldr	r2, [pc, #396]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	e007      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006976:	4b60      	ldr	r3, [pc, #384]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800697e:	4a60      	ldr	r2, [pc, #384]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006980:	fbb2 f3f3 	udiv	r3, r2, r3
 8006984:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006986:	4b5c      	ldr	r3, [pc, #368]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006994:	4b58      	ldr	r3, [pc, #352]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800699a:	099b      	lsrs	r3, r3, #6
 800699c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	fb02 f203 	mul.w	r2, r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80069ae:	4b52      	ldr	r3, [pc, #328]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	617b      	str	r3, [r7, #20]
        break;
 80069c6:	e003      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80069c8:	4b4e      	ldr	r3, [pc, #312]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80069ca:	617b      	str	r3, [r7, #20]
        break;
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80069ce:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d6:	f040 8086 	bne.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80069da:	4b47      	ldr	r3, [pc, #284]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069e8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f0:	d03e      	beq.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80069f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069f6:	d073      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d000      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80069fc:	e074      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80069fe:	4b3e      	ldr	r3, [pc, #248]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a0a:	4b3b      	ldr	r3, [pc, #236]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a12:	4a3a      	ldr	r2, [pc, #232]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	e007      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a1c:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a24:	4a36      	ldr	r2, [pc, #216]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a32:	0e1b      	lsrs	r3, r3, #24
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a40:	099b      	lsrs	r3, r3, #6
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	fb02 f203 	mul.w	r2, r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a52:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006a54:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6c:	617b      	str	r3, [r7, #20]
        break;
 8006a6e:	e03b      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a70:	4b21      	ldr	r3, [pc, #132]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d108      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a84:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	e007      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a96:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa4:	0e1b      	lsrs	r3, r3, #24
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab2:	099b      	lsrs	r3, r3, #6
 8006ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	fb02 f203 	mul.w	r2, r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	617b      	str	r3, [r7, #20]
        break;
 8006ade:	e003      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ae0:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006ae2:	617b      	str	r3, [r7, #20]
        break;
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006ae6:	bf00      	nop

  return frequency;
 8006ae8:	697b      	ldr	r3, [r7, #20]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40023800 	.word	0x40023800
 8006afc:	00f42400 	.word	0x00f42400
 8006b00:	017d7840 	.word	0x017d7840
 8006b04:	00bb8000 	.word	0x00bb8000

08006b08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e06b      	b.n	8006bf2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7f5b      	ldrb	r3, [r3, #29]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fb fc38 	bl	80023a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	22ca      	movs	r2, #202	; 0xca
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2253      	movs	r2, #83	; 0x53
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb00 	bl	800714c <RTC_EnterInitMode>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	22ff      	movs	r2, #255	; 0xff
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e046      	b.n	8006bf2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6899      	ldr	r1, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b23      	ldr	r3, [pc, #140]	; (8006bfc <HAL_RTC_Init+0xf4>)
 8006b70:	400b      	ands	r3, r1
 8006b72:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6899      	ldr	r1, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68d2      	ldr	r2, [r2, #12]
 8006b9a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6919      	ldr	r1, [r3, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	041a      	lsls	r2, r3, #16
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bbe:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0208 	bic.w	r2, r2, #8
 8006bce:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	22ff      	movs	r2, #255	; 0xff
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
  }
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	ff8fffbf 	.word	0xff8fffbf

08006c00 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c00:	b590      	push	{r4, r7, lr}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	7f1b      	ldrb	r3, [r3, #28]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_RTC_SetTime+0x1c>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e0a8      	b.n	8006d6e <HAL_RTC_SetTime+0x16e>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2202      	movs	r2, #2
 8006c26:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d126      	bne.n	8006c7c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 faac 	bl	80071a4 <RTC_ByteToBcd2>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 faa5 	bl	80071a4 <RTC_ByteToBcd2>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c5e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	789b      	ldrb	r3, [r3, #2]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fa9d 	bl	80071a4 <RTC_ByteToBcd2>
 8006c6a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c6c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	7b1b      	ldrb	r3, [r3, #12]
 8006c74:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e018      	b.n	8006cae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006c9c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006ca2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	7b1b      	ldrb	r3, [r3, #12]
 8006ca8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	22ca      	movs	r2, #202	; 0xca
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2253      	movs	r2, #83	; 0x53
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fa44 	bl	800714c <RTC_EnterInitMode>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	22ff      	movs	r2, #255	; 0xff
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e045      	b.n	8006d6e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	6979      	ldr	r1, [r7, #20]
 8006ce8:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <HAL_RTC_SetTime+0x178>)
 8006cea:	400b      	ands	r3, r1
 8006cec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cfc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6899      	ldr	r1, [r3, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d24:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d111      	bne.n	8006d58 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f9e1 	bl	80070fc <HAL_RTC_WaitForSynchro>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	22ff      	movs	r2, #255	; 0xff
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e00a      	b.n	8006d6e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	22ff      	movs	r2, #255	; 0xff
 8006d5e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd90      	pop	{r4, r7, pc}
 8006d76:	bf00      	nop
 8006d78:	007f7f7f 	.word	0x007f7f7f

08006d7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7f1b      	ldrb	r3, [r3, #28]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_RTC_SetDate+0x1c>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e092      	b.n	8006ebe <HAL_RTC_SetDate+0x142>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2202      	movs	r2, #2
 8006da2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10e      	bne.n	8006dc8 <HAL_RTC_SetDate+0x4c>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d008      	beq.n	8006dc8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	785b      	ldrb	r3, [r3, #1]
 8006dba:	f023 0310 	bic.w	r3, r3, #16
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	330a      	adds	r3, #10
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d11c      	bne.n	8006e08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	78db      	ldrb	r3, [r3, #3]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f9e6 	bl	80071a4 <RTC_ByteToBcd2>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f9df 	bl	80071a4 <RTC_ByteToBcd2>
 8006de6:	4603      	mov	r3, r0
 8006de8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006dea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	789b      	ldrb	r3, [r3, #2]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 f9d7 	bl	80071a4 <RTC_ByteToBcd2>
 8006df6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006df8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	e00e      	b.n	8006e26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	78db      	ldrb	r3, [r3, #3]
 8006e0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e14:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006e1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	22ca      	movs	r2, #202	; 0xca
 8006e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2253      	movs	r2, #83	; 0x53
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f988 	bl	800714c <RTC_EnterInitMode>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	22ff      	movs	r2, #255	; 0xff
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e031      	b.n	8006ebe <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	6979      	ldr	r1, [r7, #20]
 8006e60:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <HAL_RTC_SetDate+0x14c>)
 8006e62:	400b      	ands	r3, r1
 8006e64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e74:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d111      	bne.n	8006ea8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f939 	bl	80070fc <HAL_RTC_WaitForSynchro>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e00a      	b.n	8006ebe <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	22ff      	movs	r2, #255	; 0xff
 8006eae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
  }
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd90      	pop	{r4, r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	00ffff3f 	.word	0x00ffff3f

08006ecc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ecc:	b590      	push	{r4, r7, lr}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	7f1b      	ldrb	r3, [r3, #28]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_RTC_SetAlarm+0x24>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e101      	b.n	80070f4 <HAL_RTC_SetAlarm+0x228>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2202      	movs	r2, #2
 8006efa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d137      	bne.n	8006f72 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f942 	bl	80071a4 <RTC_ByteToBcd2>
 8006f20:	4603      	mov	r3, r0
 8006f22:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f93b 	bl	80071a4 <RTC_ByteToBcd2>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f32:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	789b      	ldrb	r3, [r3, #2]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f933 	bl	80071a4 <RTC_ByteToBcd2>
 8006f3e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f40:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	7b1b      	ldrb	r3, [r3, #12]
 8006f48:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f4a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f925 	bl	80071a4 <RTC_ByteToBcd2>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e023      	b.n	8006fba <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006f92:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f98:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	7b1b      	ldrb	r3, [r3, #12]
 8006f9e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006fa0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fa8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006faa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fb0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	22ca      	movs	r2, #202	; 0xca
 8006fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2253      	movs	r2, #83	; 0x53
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fde:	d13f      	bne.n	8007060 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ffe:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007000:	f7fb fd3a 	bl	8002a78 <HAL_GetTick>
 8007004:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007006:	e013      	b.n	8007030 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007008:	f7fb fd36 	bl	8002a78 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007016:	d90b      	bls.n	8007030 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2203      	movs	r2, #3
 8007024:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e061      	b.n	80070f4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0e4      	beq.n	8007008 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	e03e      	b.n	80070de <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800706e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800707e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007080:	f7fb fcfa 	bl	8002a78 <HAL_GetTick>
 8007084:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007086:	e013      	b.n	80070b0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007088:	f7fb fcf6 	bl	8002a78 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007096:	d90b      	bls.n	80070b0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	22ff      	movs	r2, #255	; 0xff
 800709e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2203      	movs	r2, #3
 80070a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e021      	b.n	80070f4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0e4      	beq.n	8007088 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	22ff      	movs	r2, #255	; 0xff
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3724      	adds	r7, #36	; 0x24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd90      	pop	{r4, r7, pc}

080070fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007116:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007118:	f7fb fcae 	bl	8002a78 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800711e:	e009      	b.n	8007134 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007120:	f7fb fcaa 	bl	8002a78 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712e:	d901      	bls.n	8007134 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e007      	b.n	8007144 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0ee      	beq.n	8007120 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d119      	bne.n	800719a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f04f 32ff 	mov.w	r2, #4294967295
 800716e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007170:	f7fb fc82 	bl	8002a78 <HAL_GetTick>
 8007174:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007176:	e009      	b.n	800718c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007178:	f7fb fc7e 	bl	8002a78 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007186:	d901      	bls.n	800718c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e007      	b.n	800719c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0ee      	beq.n	8007178 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80071b2:	e005      	b.n	80071c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	3b0a      	subs	r3, #10
 80071be:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	2b09      	cmp	r3, #9
 80071c4:	d8f6      	bhi.n	80071b4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	b2db      	uxtb	r3, r3
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	7f1b      	ldrb	r3, [r3, #28]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_RTCEx_SetTimeStamp+0x1c>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e03e      	b.n	800727a <HAL_RTCEx_SetTimeStamp+0x9a>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2202      	movs	r2, #2
 8007206:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007210:	4013      	ands	r3, r2
 8007212:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	22ca      	movs	r2, #202	; 0xca
 8007222:	625a      	str	r2, [r3, #36]	; 0x24
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2253      	movs	r2, #83	; 0x53
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0206 	bic.w	r2, r2, #6
 800723a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	430a      	orrs	r2, r1
 800724a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007262:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	22ff      	movs	r2, #255	; 0xff
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	fffff7f7 	.word	0xfffff7f7

0800728c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e149      	b.n	800753e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fb f9b0 	bl	8002624 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f94f 	bl	8007570 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d007      	beq.n	80072ea <HAL_SAI_Init+0x5e>
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d302      	bcc.n	80072e4 <HAL_SAI_Init+0x58>
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d006      	beq.n	80072f0 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80072e2:	e008      	b.n	80072f6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61fb      	str	r3, [r7, #28]
      break;
 80072e8:	e005      	b.n	80072f6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80072ea:	2310      	movs	r3, #16
 80072ec:	61fb      	str	r3, [r7, #28]
      break;
 80072ee:	e002      	b.n	80072f6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072f0:	2320      	movs	r3, #32
 80072f2:	61fb      	str	r3, [r7, #28]
      break;
 80072f4:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d81d      	bhi.n	800733a <HAL_SAI_Init+0xae>
 80072fe:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <HAL_SAI_Init+0x78>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007315 	.word	0x08007315
 8007308:	0800731b 	.word	0x0800731b
 800730c:	08007323 	.word	0x08007323
 8007310:	0800732b 	.word	0x0800732b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
      }
      break;
 8007318:	e010      	b.n	800733c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800731a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800731e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007320:	e00c      	b.n	800733c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007326:	617b      	str	r3, [r7, #20]
      }
      break;
 8007328:	e008      	b.n	800733c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800732a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800732e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007338:	e000      	b.n	800733c <HAL_SAI_Init+0xb0>
  default:
    break;
 800733a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a81      	ldr	r2, [pc, #516]	; (8007548 <HAL_SAI_Init+0x2bc>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_SAI_Init+0xc4>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a80      	ldr	r2, [pc, #512]	; (800754c <HAL_SAI_Init+0x2c0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d103      	bne.n	8007358 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007350:	4a7f      	ldr	r2, [pc, #508]	; (8007550 <HAL_SAI_Init+0x2c4>)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e002      	b.n	800735e <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007358:	4a7e      	ldr	r2, [pc, #504]	; (8007554 <HAL_SAI_Init+0x2c8>)
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d043      	beq.n	80073ee <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a76      	ldr	r2, [pc, #472]	; (8007548 <HAL_SAI_Init+0x2bc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_SAI_Init+0xf2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a74      	ldr	r2, [pc, #464]	; (800754c <HAL_SAI_Init+0x2c0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d104      	bne.n	8007388 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800737e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007382:	f7ff fa8d 	bl	80068a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007386:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a72      	ldr	r2, [pc, #456]	; (8007558 <HAL_SAI_Init+0x2cc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d004      	beq.n	800739c <HAL_SAI_Init+0x110>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a71      	ldr	r2, [pc, #452]	; (800755c <HAL_SAI_Init+0x2d0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d104      	bne.n	80073a6 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800739c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073a0:	f7ff fa7e 	bl	80068a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80073a4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	461a      	mov	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	025b      	lsls	r3, r3, #9
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a67      	ldr	r2, [pc, #412]	; (8007560 <HAL_SAI_Init+0x2d4>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	08da      	lsrs	r2, r3, #3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	4b64      	ldr	r3, [pc, #400]	; (8007560 <HAL_SAI_Init+0x2d4>)
 80073d0:	fba3 2301 	umull	r2, r3, r3, r1
 80073d4:	08da      	lsrs	r2, r3, #3
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	1aca      	subs	r2, r1, r3
 80073e0:	2a08      	cmp	r2, #8
 80073e2:	d904      	bls.n	80073ee <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_SAI_Init+0x172>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d109      	bne.n	8007412 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_SAI_Init+0x17e>
 8007406:	2300      	movs	r3, #0
 8007408:	e001      	b.n	800740e <HAL_SAI_Init+0x182>
 800740a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	e008      	b.n	8007424 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d102      	bne.n	8007420 <HAL_SAI_Init+0x194>
 800741a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741e:	e000      	b.n	8007422 <HAL_SAI_Init+0x196>
 8007420:	2300      	movs	r3, #0
 8007422:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6819      	ldr	r1, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4b4d      	ldr	r3, [pc, #308]	; (8007564 <HAL_SAI_Init+0x2d8>)
 8007430:	400b      	ands	r3, r1
 8007432:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6819      	ldr	r1, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007448:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	431a      	orrs	r2, r3
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800745c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007468:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	051b      	lsls	r3, r3, #20
 8007470:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6859      	ldr	r1, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4b38      	ldr	r3, [pc, #224]	; (8007568 <HAL_SAI_Init+0x2dc>)
 8007486:	400b      	ands	r3, r1
 8007488:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6859      	ldr	r1, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699a      	ldr	r2, [r3, #24]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6899      	ldr	r1, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	4b2e      	ldr	r3, [pc, #184]	; (800756c <HAL_SAI_Init+0x2e0>)
 80074b4:	400b      	ands	r3, r1
 80074b6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6899      	ldr	r1, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074c8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80074ce:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80074d4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074da:	3b01      	subs	r3, #1
 80074dc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80074de:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68d9      	ldr	r1, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	f24f 0320 	movw	r3, #61472	; 0xf020
 80074f6:	400b      	ands	r3, r1
 80074f8:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68d9      	ldr	r1, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007508:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750e:	041b      	lsls	r3, r3, #16
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007516:	3b01      	subs	r3, #1
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40015804 	.word	0x40015804
 800754c:	40015824 	.word	0x40015824
 8007550:	40015800 	.word	0x40015800
 8007554:	40015c00 	.word	0x40015c00
 8007558:	40015c04 	.word	0x40015c04
 800755c:	40015c24 	.word	0x40015c24
 8007560:	cccccccd 	.word	0xcccccccd
 8007564:	ff05c010 	.word	0xff05c010
 8007568:	ffff1ff0 	.word	0xffff1ff0
 800756c:	fff88000 	.word	0xfff88000

08007570 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007570:	b490      	push	{r4, r7}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007578:	4b16      	ldr	r3, [pc, #88]	; (80075d4 <SAI_Disable+0x64>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a16      	ldr	r2, [pc, #88]	; (80075d8 <SAI_Disable+0x68>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	0b1b      	lsrs	r3, r3, #12
 8007584:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007598:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800759a:	4623      	mov	r3, r4
 800759c:	1e5c      	subs	r4, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	73fb      	strb	r3, [r7, #15]
      break;
 80075b6:	e006      	b.n	80075c6 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e9      	bne.n	800759a <SAI_Disable+0x2a>

  return status;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc90      	pop	{r4, r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	2000002c 	.word	0x2000002c
 80075d8:	95cbec1b 	.word	0x95cbec1b

080075dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e025      	b.n	800763c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fb f803 	bl	8002610 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2202      	movs	r2, #2
 800760e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3304      	adds	r3, #4
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f001 fa41 	bl	8008aa4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	461a      	mov	r2, r3
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	f001 faab 	bl	8008b88 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d101      	bne.n	8007660 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800765c:	2302      	movs	r3, #2
 800765e:	e018      	b.n	8007692 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f001 fb09 	bl	8008c88 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d104      	bne.n	8007688 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2205      	movs	r2, #5
 8007682:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007686:	e003      	b.n	8007690 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d101      	bne.n	80076b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e00e      	b.n	80076d2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 fb01 	bl	8008cca <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e04c      	b.n	8007788 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fa fe66 	bl	80023d4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0203 	bic.w	r2, r2, #3
 800771e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4b19      	ldr	r3, [pc, #100]	; (8007790 <HAL_SPDIFRX_Init+0xb4>)
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007738:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800773e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007744:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800774a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007750:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007756:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800775c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8007762:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8007768:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	fff88407 	.word	0xfff88407

08007794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e01d      	b.n	80077e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f815 	bl	80077ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f000 f986 	bl	8007ae4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <HAL_TIM_Base_Start_IT+0x50>)
 8007820:	4013      	ands	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b06      	cmp	r3, #6
 8007828:	d00b      	beq.n	8007842 <HAL_TIM_Base_Start_IT+0x42>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007830:	d007      	beq.n	8007842 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	00010007 	.word	0x00010007

08007854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b02      	cmp	r3, #2
 8007868:	d122      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d11b      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0202 	mvn.w	r2, #2
 8007880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f905 	bl	8007aa6 <HAL_TIM_IC_CaptureCallback>
 800789c:	e005      	b.n	80078aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f8f7 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f908 	bl	8007aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d122      	bne.n	8007904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d11b      	bne.n	8007904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0204 	mvn.w	r2, #4
 80078d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8db 	bl	8007aa6 <HAL_TIM_IC_CaptureCallback>
 80078f0:	e005      	b.n	80078fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f8cd 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f8de 	bl	8007aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b08      	cmp	r3, #8
 8007910:	d122      	bne.n	8007958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d11b      	bne.n	8007958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f06f 0208 	mvn.w	r2, #8
 8007928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2204      	movs	r2, #4
 800792e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8b1 	bl	8007aa6 <HAL_TIM_IC_CaptureCallback>
 8007944:	e005      	b.n	8007952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8a3 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f8b4 	bl	8007aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0310 	and.w	r3, r3, #16
 8007962:	2b10      	cmp	r3, #16
 8007964:	d122      	bne.n	80079ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0310 	and.w	r3, r3, #16
 8007970:	2b10      	cmp	r3, #16
 8007972:	d11b      	bne.n	80079ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0210 	mvn.w	r2, #16
 800797c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2208      	movs	r2, #8
 8007982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f887 	bl	8007aa6 <HAL_TIM_IC_CaptureCallback>
 8007998:	e005      	b.n	80079a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f879 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f88a 	bl	8007aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d10e      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d107      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0201 	mvn.w	r2, #1
 80079d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fa f91e 	bl	8001c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	2b80      	cmp	r3, #128	; 0x80
 80079e4:	d10e      	bne.n	8007a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f0:	2b80      	cmp	r3, #128	; 0x80
 80079f2:	d107      	bne.n	8007a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f91a 	bl	8007c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a12:	d10e      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b80      	cmp	r3, #128	; 0x80
 8007a20:	d107      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f90d 	bl	8007c4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	d10e      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d107      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f838 	bl	8007ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d10e      	bne.n	8007a8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d107      	bne.n	8007a8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f06f 0220 	mvn.w	r2, #32
 8007a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8cd 	bl	8007c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a40      	ldr	r2, [pc, #256]	; (8007bf8 <TIM_Base_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b02:	d00f      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a3d      	ldr	r2, [pc, #244]	; (8007bfc <TIM_Base_SetConfig+0x118>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00b      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a3c      	ldr	r2, [pc, #240]	; (8007c00 <TIM_Base_SetConfig+0x11c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d007      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a3b      	ldr	r2, [pc, #236]	; (8007c04 <TIM_Base_SetConfig+0x120>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a3a      	ldr	r2, [pc, #232]	; (8007c08 <TIM_Base_SetConfig+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d108      	bne.n	8007b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2f      	ldr	r2, [pc, #188]	; (8007bf8 <TIM_Base_SetConfig+0x114>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d02b      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b44:	d027      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2c      	ldr	r2, [pc, #176]	; (8007bfc <TIM_Base_SetConfig+0x118>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d023      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <TIM_Base_SetConfig+0x11c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01f      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <TIM_Base_SetConfig+0x120>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d01b      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a29      	ldr	r2, [pc, #164]	; (8007c08 <TIM_Base_SetConfig+0x124>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d017      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a28      	ldr	r2, [pc, #160]	; (8007c0c <TIM_Base_SetConfig+0x128>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a27      	ldr	r2, [pc, #156]	; (8007c10 <TIM_Base_SetConfig+0x12c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00f      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a26      	ldr	r2, [pc, #152]	; (8007c14 <TIM_Base_SetConfig+0x130>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a25      	ldr	r2, [pc, #148]	; (8007c18 <TIM_Base_SetConfig+0x134>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d007      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <TIM_Base_SetConfig+0x138>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a23      	ldr	r2, [pc, #140]	; (8007c20 <TIM_Base_SetConfig+0x13c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <TIM_Base_SetConfig+0x114>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_Base_SetConfig+0xf8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a0c      	ldr	r2, [pc, #48]	; (8007c08 <TIM_Base_SetConfig+0x124>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d103      	bne.n	8007be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	615a      	str	r2, [r3, #20]
}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800
 8007c04:	40000c00 	.word	0x40000c00
 8007c08:	40010400 	.word	0x40010400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40014400 	.word	0x40014400
 8007c14:	40014800 	.word	0x40014800
 8007c18:	40001800 	.word	0x40001800
 8007c1c:	40001c00 	.word	0x40001c00
 8007c20:	40002000 	.word	0x40002000

08007c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e040      	b.n	8007cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d106      	bne.n	8007c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fa fbe8 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2224      	movs	r2, #36	; 0x24
 8007c8c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa14 	bl	80080cc <UART_SetConfig>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e022      	b.n	8007cf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fcb2 	bl	8008620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fd39 	bl	8008764 <UART_CheckIdleState>
 8007cf2:	4603      	mov	r3, r0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	f040 808a 	bne.w	8007e28 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <HAL_UART_Receive_IT+0x24>
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e082      	b.n	8007e2a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_UART_Receive_IT+0x36>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e07b      	b.n	8007e2a <HAL_UART_Receive_IT+0x12e>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	88fa      	ldrh	r2, [r7, #6]
 8007d4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5e:	d10e      	bne.n	8007d7e <HAL_UART_Receive_IT+0x82>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d105      	bne.n	8007d74 <HAL_UART_Receive_IT+0x78>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d72:	e02d      	b.n	8007dd0 <HAL_UART_Receive_IT+0xd4>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	22ff      	movs	r2, #255	; 0xff
 8007d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d7c:	e028      	b.n	8007dd0 <HAL_UART_Receive_IT+0xd4>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <HAL_UART_Receive_IT+0xa6>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <HAL_UART_Receive_IT+0x9c>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	22ff      	movs	r2, #255	; 0xff
 8007d92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d96:	e01b      	b.n	8007dd0 <HAL_UART_Receive_IT+0xd4>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	227f      	movs	r2, #127	; 0x7f
 8007d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007da0:	e016      	b.n	8007dd0 <HAL_UART_Receive_IT+0xd4>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007daa:	d10d      	bne.n	8007dc8 <HAL_UART_Receive_IT+0xcc>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <HAL_UART_Receive_IT+0xc2>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	227f      	movs	r2, #127	; 0x7f
 8007db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dbc:	e008      	b.n	8007dd0 <HAL_UART_Receive_IT+0xd4>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	223f      	movs	r2, #63	; 0x3f
 8007dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dc6:	e003      	b.n	8007dd0 <HAL_UART_Receive_IT+0xd4>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2222      	movs	r2, #34	; 0x22
 8007dda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df4:	d107      	bne.n	8007e06 <HAL_UART_Receive_IT+0x10a>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a0d      	ldr	r2, [pc, #52]	; (8007e38 <HAL_UART_Receive_IT+0x13c>)
 8007e02:	661a      	str	r2, [r3, #96]	; 0x60
 8007e04:	e002      	b.n	8007e0c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <HAL_UART_Receive_IT+0x140>)
 8007e0a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007e22:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e000      	b.n	8007e2a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007e28:	2302      	movs	r3, #2
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	080089fd 	.word	0x080089fd
 8007e3c:	08008957 	.word	0x08008957

08007e40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e66:	4013      	ands	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d113      	bne.n	8007e98 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00e      	beq.n	8007e98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8100 	beq.w	800808e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
      }
      return;
 8007e96:	e0fa      	b.n	800808e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 80d5 	beq.w	800804a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80ca 	beq.w	800804a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00e      	beq.n	8007ede <HAL_UART_IRQHandler+0x9e>
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed6:	f043 0201 	orr.w	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00e      	beq.n	8007f06 <HAL_UART_IRQHandler+0xc6>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007efe:	f043 0204 	orr.w	r2, r3, #4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00e      	beq.n	8007f2e <HAL_UART_IRQHandler+0xee>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f26:	f043 0202 	orr.w	r2, r3, #2
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d013      	beq.n	8007f60 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d009      	beq.n	8007f60 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2208      	movs	r2, #8
 8007f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f58:	f043 0208 	orr.w	r2, r3, #8
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00f      	beq.n	8007f8a <HAL_UART_IRQHandler+0x14a>
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f82:	f043 0220 	orr.w	r2, r3, #32
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d07f      	beq.n	8008092 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00c      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d007      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fba:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d004      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d031      	beq.n	8008038 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fc6f 	bl	80088b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b40      	cmp	r3, #64	; 0x40
 8007fe6:	d123      	bne.n	8008030 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008004:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <HAL_UART_IRQHandler+0x260>)
 8008006:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800800c:	4618      	mov	r0, r3
 800800e:	f7fb fa5f 	bl	80034d0 <HAL_DMA_Abort_IT>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d016      	beq.n	8008046 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008022:	4610      	mov	r0, r2
 8008024:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008026:	e00e      	b.n	8008046 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f845 	bl	80080b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802e:	e00a      	b.n	8008046 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f841 	bl	80080b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008036:	e006      	b.n	8008046 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f83d 	bl	80080b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008044:	e025      	b.n	8008092 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008046:	bf00      	nop
    return;
 8008048:	e023      	b.n	8008092 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00d      	beq.n	8008070 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008062:	2b00      	cmp	r3, #0
 8008064:	d017      	beq.n	8008096 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
    }
    return;
 800806e:	e012      	b.n	8008096 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00e      	beq.n	8008098 <HAL_UART_IRQHandler+0x258>
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fc4d 	bl	8008924 <UART_EndTransmit_IT>
    return;
 800808a:	bf00      	nop
 800808c:	e004      	b.n	8008098 <HAL_UART_IRQHandler+0x258>
      return;
 800808e:	bf00      	nop
 8008090:	e002      	b.n	8008098 <HAL_UART_IRQHandler+0x258>
    return;
 8008092:	bf00      	nop
 8008094:	e000      	b.n	8008098 <HAL_UART_IRQHandler+0x258>
    return;
 8008096:	bf00      	nop
  }

}
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	080088f9 	.word	0x080088f9

080080a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	431a      	orrs	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4bb1      	ldr	r3, [pc, #708]	; (80083c0 <UART_SetConfig+0x2f4>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	6939      	ldr	r1, [r7, #16]
 8008104:	430b      	orrs	r3, r1
 8008106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	430a      	orrs	r2, r1
 8008140:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a9f      	ldr	r2, [pc, #636]	; (80083c4 <UART_SetConfig+0x2f8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d121      	bne.n	8008190 <UART_SetConfig+0xc4>
 800814c:	4b9e      	ldr	r3, [pc, #632]	; (80083c8 <UART_SetConfig+0x2fc>)
 800814e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b03      	cmp	r3, #3
 8008158:	d816      	bhi.n	8008188 <UART_SetConfig+0xbc>
 800815a:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <UART_SetConfig+0x94>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	08008171 	.word	0x08008171
 8008164:	0800817d 	.word	0x0800817d
 8008168:	08008177 	.word	0x08008177
 800816c:	08008183 	.word	0x08008183
 8008170:	2301      	movs	r3, #1
 8008172:	77fb      	strb	r3, [r7, #31]
 8008174:	e151      	b.n	800841a <UART_SetConfig+0x34e>
 8008176:	2302      	movs	r3, #2
 8008178:	77fb      	strb	r3, [r7, #31]
 800817a:	e14e      	b.n	800841a <UART_SetConfig+0x34e>
 800817c:	2304      	movs	r3, #4
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	e14b      	b.n	800841a <UART_SetConfig+0x34e>
 8008182:	2308      	movs	r3, #8
 8008184:	77fb      	strb	r3, [r7, #31]
 8008186:	e148      	b.n	800841a <UART_SetConfig+0x34e>
 8008188:	2310      	movs	r3, #16
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	bf00      	nop
 800818e:	e144      	b.n	800841a <UART_SetConfig+0x34e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a8d      	ldr	r2, [pc, #564]	; (80083cc <UART_SetConfig+0x300>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d134      	bne.n	8008204 <UART_SetConfig+0x138>
 800819a:	4b8b      	ldr	r3, [pc, #556]	; (80083c8 <UART_SetConfig+0x2fc>)
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a0:	f003 030c 	and.w	r3, r3, #12
 80081a4:	2b0c      	cmp	r3, #12
 80081a6:	d829      	bhi.n	80081fc <UART_SetConfig+0x130>
 80081a8:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <UART_SetConfig+0xe4>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081e5 	.word	0x080081e5
 80081b4:	080081fd 	.word	0x080081fd
 80081b8:	080081fd 	.word	0x080081fd
 80081bc:	080081fd 	.word	0x080081fd
 80081c0:	080081f1 	.word	0x080081f1
 80081c4:	080081fd 	.word	0x080081fd
 80081c8:	080081fd 	.word	0x080081fd
 80081cc:	080081fd 	.word	0x080081fd
 80081d0:	080081eb 	.word	0x080081eb
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	080081fd 	.word	0x080081fd
 80081e0:	080081f7 	.word	0x080081f7
 80081e4:	2300      	movs	r3, #0
 80081e6:	77fb      	strb	r3, [r7, #31]
 80081e8:	e117      	b.n	800841a <UART_SetConfig+0x34e>
 80081ea:	2302      	movs	r3, #2
 80081ec:	77fb      	strb	r3, [r7, #31]
 80081ee:	e114      	b.n	800841a <UART_SetConfig+0x34e>
 80081f0:	2304      	movs	r3, #4
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e111      	b.n	800841a <UART_SetConfig+0x34e>
 80081f6:	2308      	movs	r3, #8
 80081f8:	77fb      	strb	r3, [r7, #31]
 80081fa:	e10e      	b.n	800841a <UART_SetConfig+0x34e>
 80081fc:	2310      	movs	r3, #16
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	bf00      	nop
 8008202:	e10a      	b.n	800841a <UART_SetConfig+0x34e>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a71      	ldr	r2, [pc, #452]	; (80083d0 <UART_SetConfig+0x304>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d120      	bne.n	8008250 <UART_SetConfig+0x184>
 800820e:	4b6e      	ldr	r3, [pc, #440]	; (80083c8 <UART_SetConfig+0x2fc>)
 8008210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008218:	2b10      	cmp	r3, #16
 800821a:	d00f      	beq.n	800823c <UART_SetConfig+0x170>
 800821c:	2b10      	cmp	r3, #16
 800821e:	d802      	bhi.n	8008226 <UART_SetConfig+0x15a>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <UART_SetConfig+0x164>
 8008224:	e010      	b.n	8008248 <UART_SetConfig+0x17c>
 8008226:	2b20      	cmp	r3, #32
 8008228:	d005      	beq.n	8008236 <UART_SetConfig+0x16a>
 800822a:	2b30      	cmp	r3, #48	; 0x30
 800822c:	d009      	beq.n	8008242 <UART_SetConfig+0x176>
 800822e:	e00b      	b.n	8008248 <UART_SetConfig+0x17c>
 8008230:	2300      	movs	r3, #0
 8008232:	77fb      	strb	r3, [r7, #31]
 8008234:	e0f1      	b.n	800841a <UART_SetConfig+0x34e>
 8008236:	2302      	movs	r3, #2
 8008238:	77fb      	strb	r3, [r7, #31]
 800823a:	e0ee      	b.n	800841a <UART_SetConfig+0x34e>
 800823c:	2304      	movs	r3, #4
 800823e:	77fb      	strb	r3, [r7, #31]
 8008240:	e0eb      	b.n	800841a <UART_SetConfig+0x34e>
 8008242:	2308      	movs	r3, #8
 8008244:	77fb      	strb	r3, [r7, #31]
 8008246:	e0e8      	b.n	800841a <UART_SetConfig+0x34e>
 8008248:	2310      	movs	r3, #16
 800824a:	77fb      	strb	r3, [r7, #31]
 800824c:	bf00      	nop
 800824e:	e0e4      	b.n	800841a <UART_SetConfig+0x34e>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a5f      	ldr	r2, [pc, #380]	; (80083d4 <UART_SetConfig+0x308>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d120      	bne.n	800829c <UART_SetConfig+0x1d0>
 800825a:	4b5b      	ldr	r3, [pc, #364]	; (80083c8 <UART_SetConfig+0x2fc>)
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	d00f      	beq.n	8008288 <UART_SetConfig+0x1bc>
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	d802      	bhi.n	8008272 <UART_SetConfig+0x1a6>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <UART_SetConfig+0x1b0>
 8008270:	e010      	b.n	8008294 <UART_SetConfig+0x1c8>
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d005      	beq.n	8008282 <UART_SetConfig+0x1b6>
 8008276:	2bc0      	cmp	r3, #192	; 0xc0
 8008278:	d009      	beq.n	800828e <UART_SetConfig+0x1c2>
 800827a:	e00b      	b.n	8008294 <UART_SetConfig+0x1c8>
 800827c:	2300      	movs	r3, #0
 800827e:	77fb      	strb	r3, [r7, #31]
 8008280:	e0cb      	b.n	800841a <UART_SetConfig+0x34e>
 8008282:	2302      	movs	r3, #2
 8008284:	77fb      	strb	r3, [r7, #31]
 8008286:	e0c8      	b.n	800841a <UART_SetConfig+0x34e>
 8008288:	2304      	movs	r3, #4
 800828a:	77fb      	strb	r3, [r7, #31]
 800828c:	e0c5      	b.n	800841a <UART_SetConfig+0x34e>
 800828e:	2308      	movs	r3, #8
 8008290:	77fb      	strb	r3, [r7, #31]
 8008292:	e0c2      	b.n	800841a <UART_SetConfig+0x34e>
 8008294:	2310      	movs	r3, #16
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	bf00      	nop
 800829a:	e0be      	b.n	800841a <UART_SetConfig+0x34e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a4d      	ldr	r2, [pc, #308]	; (80083d8 <UART_SetConfig+0x30c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d124      	bne.n	80082f0 <UART_SetConfig+0x224>
 80082a6:	4b48      	ldr	r3, [pc, #288]	; (80083c8 <UART_SetConfig+0x2fc>)
 80082a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b4:	d012      	beq.n	80082dc <UART_SetConfig+0x210>
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ba:	d802      	bhi.n	80082c2 <UART_SetConfig+0x1f6>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d007      	beq.n	80082d0 <UART_SetConfig+0x204>
 80082c0:	e012      	b.n	80082e8 <UART_SetConfig+0x21c>
 80082c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c6:	d006      	beq.n	80082d6 <UART_SetConfig+0x20a>
 80082c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082cc:	d009      	beq.n	80082e2 <UART_SetConfig+0x216>
 80082ce:	e00b      	b.n	80082e8 <UART_SetConfig+0x21c>
 80082d0:	2300      	movs	r3, #0
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e0a1      	b.n	800841a <UART_SetConfig+0x34e>
 80082d6:	2302      	movs	r3, #2
 80082d8:	77fb      	strb	r3, [r7, #31]
 80082da:	e09e      	b.n	800841a <UART_SetConfig+0x34e>
 80082dc:	2304      	movs	r3, #4
 80082de:	77fb      	strb	r3, [r7, #31]
 80082e0:	e09b      	b.n	800841a <UART_SetConfig+0x34e>
 80082e2:	2308      	movs	r3, #8
 80082e4:	77fb      	strb	r3, [r7, #31]
 80082e6:	e098      	b.n	800841a <UART_SetConfig+0x34e>
 80082e8:	2310      	movs	r3, #16
 80082ea:	77fb      	strb	r3, [r7, #31]
 80082ec:	bf00      	nop
 80082ee:	e094      	b.n	800841a <UART_SetConfig+0x34e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a39      	ldr	r2, [pc, #228]	; (80083dc <UART_SetConfig+0x310>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d124      	bne.n	8008344 <UART_SetConfig+0x278>
 80082fa:	4b33      	ldr	r3, [pc, #204]	; (80083c8 <UART_SetConfig+0x2fc>)
 80082fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008308:	d012      	beq.n	8008330 <UART_SetConfig+0x264>
 800830a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800830e:	d802      	bhi.n	8008316 <UART_SetConfig+0x24a>
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <UART_SetConfig+0x258>
 8008314:	e012      	b.n	800833c <UART_SetConfig+0x270>
 8008316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831a:	d006      	beq.n	800832a <UART_SetConfig+0x25e>
 800831c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008320:	d009      	beq.n	8008336 <UART_SetConfig+0x26a>
 8008322:	e00b      	b.n	800833c <UART_SetConfig+0x270>
 8008324:	2301      	movs	r3, #1
 8008326:	77fb      	strb	r3, [r7, #31]
 8008328:	e077      	b.n	800841a <UART_SetConfig+0x34e>
 800832a:	2302      	movs	r3, #2
 800832c:	77fb      	strb	r3, [r7, #31]
 800832e:	e074      	b.n	800841a <UART_SetConfig+0x34e>
 8008330:	2304      	movs	r3, #4
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	e071      	b.n	800841a <UART_SetConfig+0x34e>
 8008336:	2308      	movs	r3, #8
 8008338:	77fb      	strb	r3, [r7, #31]
 800833a:	e06e      	b.n	800841a <UART_SetConfig+0x34e>
 800833c:	2310      	movs	r3, #16
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	bf00      	nop
 8008342:	e06a      	b.n	800841a <UART_SetConfig+0x34e>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a25      	ldr	r2, [pc, #148]	; (80083e0 <UART_SetConfig+0x314>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d124      	bne.n	8008398 <UART_SetConfig+0x2cc>
 800834e:	4b1e      	ldr	r3, [pc, #120]	; (80083c8 <UART_SetConfig+0x2fc>)
 8008350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008354:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835c:	d012      	beq.n	8008384 <UART_SetConfig+0x2b8>
 800835e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008362:	d802      	bhi.n	800836a <UART_SetConfig+0x29e>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <UART_SetConfig+0x2ac>
 8008368:	e012      	b.n	8008390 <UART_SetConfig+0x2c4>
 800836a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836e:	d006      	beq.n	800837e <UART_SetConfig+0x2b2>
 8008370:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008374:	d009      	beq.n	800838a <UART_SetConfig+0x2be>
 8008376:	e00b      	b.n	8008390 <UART_SetConfig+0x2c4>
 8008378:	2300      	movs	r3, #0
 800837a:	77fb      	strb	r3, [r7, #31]
 800837c:	e04d      	b.n	800841a <UART_SetConfig+0x34e>
 800837e:	2302      	movs	r3, #2
 8008380:	77fb      	strb	r3, [r7, #31]
 8008382:	e04a      	b.n	800841a <UART_SetConfig+0x34e>
 8008384:	2304      	movs	r3, #4
 8008386:	77fb      	strb	r3, [r7, #31]
 8008388:	e047      	b.n	800841a <UART_SetConfig+0x34e>
 800838a:	2308      	movs	r3, #8
 800838c:	77fb      	strb	r3, [r7, #31]
 800838e:	e044      	b.n	800841a <UART_SetConfig+0x34e>
 8008390:	2310      	movs	r3, #16
 8008392:	77fb      	strb	r3, [r7, #31]
 8008394:	bf00      	nop
 8008396:	e040      	b.n	800841a <UART_SetConfig+0x34e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a11      	ldr	r2, [pc, #68]	; (80083e4 <UART_SetConfig+0x318>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d139      	bne.n	8008416 <UART_SetConfig+0x34a>
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <UART_SetConfig+0x2fc>)
 80083a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083b0:	d027      	beq.n	8008402 <UART_SetConfig+0x336>
 80083b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083b6:	d817      	bhi.n	80083e8 <UART_SetConfig+0x31c>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01c      	beq.n	80083f6 <UART_SetConfig+0x32a>
 80083bc:	e027      	b.n	800840e <UART_SetConfig+0x342>
 80083be:	bf00      	nop
 80083c0:	efff69f3 	.word	0xefff69f3
 80083c4:	40011000 	.word	0x40011000
 80083c8:	40023800 	.word	0x40023800
 80083cc:	40004400 	.word	0x40004400
 80083d0:	40004800 	.word	0x40004800
 80083d4:	40004c00 	.word	0x40004c00
 80083d8:	40005000 	.word	0x40005000
 80083dc:	40011400 	.word	0x40011400
 80083e0:	40007800 	.word	0x40007800
 80083e4:	40007c00 	.word	0x40007c00
 80083e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ec:	d006      	beq.n	80083fc <UART_SetConfig+0x330>
 80083ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083f2:	d009      	beq.n	8008408 <UART_SetConfig+0x33c>
 80083f4:	e00b      	b.n	800840e <UART_SetConfig+0x342>
 80083f6:	2300      	movs	r3, #0
 80083f8:	77fb      	strb	r3, [r7, #31]
 80083fa:	e00e      	b.n	800841a <UART_SetConfig+0x34e>
 80083fc:	2302      	movs	r3, #2
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e00b      	b.n	800841a <UART_SetConfig+0x34e>
 8008402:	2304      	movs	r3, #4
 8008404:	77fb      	strb	r3, [r7, #31]
 8008406:	e008      	b.n	800841a <UART_SetConfig+0x34e>
 8008408:	2308      	movs	r3, #8
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e005      	b.n	800841a <UART_SetConfig+0x34e>
 800840e:	2310      	movs	r3, #16
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	bf00      	nop
 8008414:	e001      	b.n	800841a <UART_SetConfig+0x34e>
 8008416:	2310      	movs	r3, #16
 8008418:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008422:	d17f      	bne.n	8008524 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008424:	7ffb      	ldrb	r3, [r7, #31]
 8008426:	2b08      	cmp	r3, #8
 8008428:	d85c      	bhi.n	80084e4 <UART_SetConfig+0x418>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x364>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008455 	.word	0x08008455
 8008434:	08008475 	.word	0x08008475
 8008438:	08008495 	.word	0x08008495
 800843c:	080084e5 	.word	0x080084e5
 8008440:	080084ad 	.word	0x080084ad
 8008444:	080084e5 	.word	0x080084e5
 8008448:	080084e5 	.word	0x080084e5
 800844c:	080084e5 	.word	0x080084e5
 8008450:	080084cd 	.word	0x080084cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008454:	f7fd fddc 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8008458:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	005a      	lsls	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	441a      	add	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	fbb2 f3f3 	udiv	r3, r2, r3
 800846e:	b29b      	uxth	r3, r3
 8008470:	61bb      	str	r3, [r7, #24]
        break;
 8008472:	e03a      	b.n	80084ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008474:	f7fd fde0 	bl	8006038 <HAL_RCC_GetPCLK2Freq>
 8008478:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	005a      	lsls	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	441a      	add	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	fbb2 f3f3 	udiv	r3, r2, r3
 800848e:	b29b      	uxth	r3, r3
 8008490:	61bb      	str	r3, [r7, #24]
        break;
 8008492:	e02a      	b.n	80084ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	085a      	lsrs	r2, r3, #1
 800849a:	4b5f      	ldr	r3, [pc, #380]	; (8008618 <UART_SetConfig+0x54c>)
 800849c:	4413      	add	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6852      	ldr	r2, [r2, #4]
 80084a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	61bb      	str	r3, [r7, #24]
        break;
 80084aa:	e01e      	b.n	80084ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ac:	f7fd fcf2 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 80084b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	005a      	lsls	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	441a      	add	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	61bb      	str	r3, [r7, #24]
        break;
 80084ca:	e00e      	b.n	80084ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	085b      	lsrs	r3, r3, #1
 80084d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	fbb2 f3f3 	udiv	r3, r2, r3
 80084de:	b29b      	uxth	r3, r3
 80084e0:	61bb      	str	r3, [r7, #24]
        break;
 80084e2:	e002      	b.n	80084ea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]
        break;
 80084e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2b0f      	cmp	r3, #15
 80084ee:	d916      	bls.n	800851e <UART_SetConfig+0x452>
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f6:	d212      	bcs.n	800851e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	f023 030f 	bic.w	r3, r3, #15
 8008500:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	085b      	lsrs	r3, r3, #1
 8008506:	b29b      	uxth	r3, r3
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	b29a      	uxth	r2, r3
 800850e:	897b      	ldrh	r3, [r7, #10]
 8008510:	4313      	orrs	r3, r2
 8008512:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	897a      	ldrh	r2, [r7, #10]
 800851a:	60da      	str	r2, [r3, #12]
 800851c:	e070      	b.n	8008600 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	75fb      	strb	r3, [r7, #23]
 8008522:	e06d      	b.n	8008600 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008524:	7ffb      	ldrb	r3, [r7, #31]
 8008526:	2b08      	cmp	r3, #8
 8008528:	d859      	bhi.n	80085de <UART_SetConfig+0x512>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <UART_SetConfig+0x464>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008555 	.word	0x08008555
 8008534:	08008573 	.word	0x08008573
 8008538:	08008591 	.word	0x08008591
 800853c:	080085df 	.word	0x080085df
 8008540:	080085a9 	.word	0x080085a9
 8008544:	080085df 	.word	0x080085df
 8008548:	080085df 	.word	0x080085df
 800854c:	080085df 	.word	0x080085df
 8008550:	080085c7 	.word	0x080085c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008554:	f7fd fd5c 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8008558:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	085a      	lsrs	r2, r3, #1
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	441a      	add	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	fbb2 f3f3 	udiv	r3, r2, r3
 800856c:	b29b      	uxth	r3, r3
 800856e:	61bb      	str	r3, [r7, #24]
        break;
 8008570:	e038      	b.n	80085e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008572:	f7fd fd61 	bl	8006038 <HAL_RCC_GetPCLK2Freq>
 8008576:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	085a      	lsrs	r2, r3, #1
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	441a      	add	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	fbb2 f3f3 	udiv	r3, r2, r3
 800858a:	b29b      	uxth	r3, r3
 800858c:	61bb      	str	r3, [r7, #24]
        break;
 800858e:	e029      	b.n	80085e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	085a      	lsrs	r2, r3, #1
 8008596:	4b21      	ldr	r3, [pc, #132]	; (800861c <UART_SetConfig+0x550>)
 8008598:	4413      	add	r3, r2
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6852      	ldr	r2, [r2, #4]
 800859e:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	61bb      	str	r3, [r7, #24]
        break;
 80085a6:	e01d      	b.n	80085e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a8:	f7fd fc74 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 80085ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	085a      	lsrs	r2, r3, #1
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	441a      	add	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	61bb      	str	r3, [r7, #24]
        break;
 80085c4:	e00e      	b.n	80085e4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d8:	b29b      	uxth	r3, r3
 80085da:	61bb      	str	r3, [r7, #24]
        break;
 80085dc:	e002      	b.n	80085e4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	75fb      	strb	r3, [r7, #23]
        break;
 80085e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	2b0f      	cmp	r3, #15
 80085e8:	d908      	bls.n	80085fc <UART_SetConfig+0x530>
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f0:	d204      	bcs.n	80085fc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	60da      	str	r2, [r3, #12]
 80085fa:	e001      	b.n	8008600 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3720      	adds	r7, #32
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	01e84800 	.word	0x01e84800
 800861c:	00f42400 	.word	0x00f42400

08008620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	f003 0310 	and.w	r3, r3, #16
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01a      	beq.n	8008736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800871e:	d10a      	bne.n	8008736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	605a      	str	r2, [r3, #4]
  }
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af02      	add	r7, sp, #8
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008772:	f7fa f981 	bl	8002a78 <HAL_GetTick>
 8008776:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b08      	cmp	r3, #8
 8008784:	d10e      	bne.n	80087a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008786:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f814 	bl	80087c2 <UART_WaitOnFlagUntilTimeout>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e00a      	b.n	80087ba <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d2:	e05d      	b.n	8008890 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d059      	beq.n	8008890 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087dc:	f7fa f94c 	bl	8002a78 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d302      	bcc.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d11b      	bne.n	800882a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008800:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e042      	b.n	80088b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02b      	beq.n	8008890 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008846:	d123      	bne.n	8008890 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008850:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008860:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0201 	bic.w	r2, r2, #1
 8008870:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2220      	movs	r2, #32
 8008876:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2220      	movs	r2, #32
 800887c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e00f      	b.n	80088b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69da      	ldr	r2, [r3, #28]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4013      	ands	r3, r2
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	429a      	cmp	r2, r3
 800889e:	bf0c      	ite	eq
 80088a0:	2301      	moveq	r3, #1
 80088a2:	2300      	movne	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d092      	beq.n	80087d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0201 	bic.w	r2, r2, #1
 80088de:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	661a      	str	r2, [r3, #96]	; 0x60
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f7ff fbce 	bl	80080b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800891c:	bf00      	nop
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800893a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff fbab 	bl	80080a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008964:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800896a:	2b22      	cmp	r3, #34	; 0x22
 800896c:	d13a      	bne.n	80089e4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008976:	89bb      	ldrh	r3, [r7, #12]
 8008978:	b2d9      	uxtb	r1, r3
 800897a:	89fb      	ldrh	r3, [r7, #14]
 800897c:	b2da      	uxtb	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	400a      	ands	r2, r1
 8008984:	b2d2      	uxtb	r2, r2
 8008986:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29a      	uxth	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d121      	bne.n	80089f4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7f8 f89b 	bl	8000b18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089e2:	e007      	b.n	80089f4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0208 	orr.w	r2, r2, #8
 80089f2:	619a      	str	r2, [r3, #24]
}
 80089f4:	bf00      	nop
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a0a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a10:	2b22      	cmp	r3, #34	; 0x22
 8008a12:	d13a      	bne.n	8008a8a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a20:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a22:	89ba      	ldrh	r2, [r7, #12]
 8008a24:	89fb      	ldrh	r3, [r7, #14]
 8008a26:	4013      	ands	r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a32:	1c9a      	adds	r2, r3, #2
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d121      	bne.n	8008a9a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a64:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0201 	bic.w	r2, r2, #1
 8008a74:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7f8 f848 	bl	8000b18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a88:	e007      	b.n	8008a9a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699a      	ldr	r2, [r3, #24]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0208 	orr.w	r2, r2, #8
 8008a98:	619a      	str	r2, [r3, #24]
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d027      	beq.n	8008b0e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4b2f      	ldr	r3, [pc, #188]	; (8008b84 <FMC_SDRAM_Init+0xe0>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ad4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008ada:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008ae0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008ae6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008aec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008af2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008af8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008afe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e032      	b.n	8008b74 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b1a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b24:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <FMC_SDRAM_Init+0xe0>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b48:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008b4e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008b54:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008b5a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008b60:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	ffff8000 	.word	0xffff8000

08008b88 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d02e      	beq.n	8008c00 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008bae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bbe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008bc8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bd2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bdc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008be6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	609a      	str	r2, [r3, #8]
 8008bfe:	e039      	b.n	8008c74 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	4b1e      	ldr	r3, [pc, #120]	; (8008c84 <FMC_SDRAM_Timing_Init+0xfc>)
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c32:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c42:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c4c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c56:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c60:	4313      	orrs	r3, r2
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	ff0f0fff 	.word	0xff0f0fff

08008c88 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ca0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008caa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	695a      	ldr	r2, [r3, #20]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d02:	2b84      	cmp	r3, #132	; 0x84
 8008d04:	d005      	beq.n	8008d12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	3303      	adds	r3, #3
 8008d10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d12:	68fb      	ldr	r3, [r7, #12]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d26:	f3ef 8305 	mrs	r3, IPSR
 8008d2a:	607b      	str	r3, [r7, #4]
  return(result);
 8008d2c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bf14      	ite	ne
 8008d32:	2301      	movne	r3, #1
 8008d34:	2300      	moveq	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d48:	f001 fa9c 	bl	800a284 <vTaskStartScheduler>
  
  return osOK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d54:	b089      	sub	sp, #36	; 0x24
 8008d56:	af04      	add	r7, sp, #16
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d020      	beq.n	8008da6 <osThreadCreate+0x54>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01c      	beq.n	8008da6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685c      	ldr	r4, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681d      	ldr	r5, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691e      	ldr	r6, [r3, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff ffb6 	bl	8008cf0 <makeFreeRtosPriority>
 8008d84:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d8e:	9202      	str	r2, [sp, #8]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	9100      	str	r1, [sp, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	4632      	mov	r2, r6
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f001 f899 	bl	8009ed2 <xTaskCreateStatic>
 8008da0:	4603      	mov	r3, r0
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e01c      	b.n	8008de0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685c      	ldr	r4, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008db2:	b29e      	uxth	r6, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff ff98 	bl	8008cf0 <makeFreeRtosPriority>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	f107 030c 	add.w	r3, r7, #12
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	9200      	str	r2, [sp, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	4632      	mov	r2, r6
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f001 f8de 	bl	8009f92 <xTaskCreate>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d001      	beq.n	8008de0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e000      	b.n	8008de2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008de0:	68fb      	ldr	r3, [r7, #12]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <osDelay+0x16>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	e000      	b.n	8008e02 <osDelay+0x18>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 fa08 	bl	800a218 <vTaskDelay>
  
  return osOK;
 8008e08:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af02      	add	r7, sp, #8
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d017      	beq.n	8008e54 <osSemaphoreCreate+0x42>
    if (count == 1) {
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10b      	bne.n	8008e42 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	2303      	movs	r3, #3
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4613      	mov	r3, r2
 8008e34:	2200      	movs	r2, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f000 f9cd 	bl	80091d8 <xQueueGenericCreateStatic>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	e023      	b.n	8008e8a <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8008e42:	6838      	ldr	r0, [r7, #0]
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f000 faa1 	bl	8009392 <xQueueCreateCountingSemaphoreStatic>
 8008e50:	4603      	mov	r3, r0
 8008e52:	e01a      	b.n	8008e8a <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d110      	bne.n	8008e7c <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 8008e5a:	2203      	movs	r2, #3
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	2001      	movs	r0, #1
 8008e60:	f000 fa37 	bl	80092d2 <xQueueGenericCreate>
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <osSemaphoreCreate+0x66>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2100      	movs	r1, #0
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fafc 	bl	8009470 <xQueueGenericSend>
      return sema;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	e006      	b.n	8008e8a <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fabe 	bl	8009404 <xQueueCreateCountingSemaphore>
 8008e88:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	e03a      	b.n	8008f22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d103      	bne.n	8008ec0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e009      	b.n	8008ed4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <osSemaphoreWait+0x40>
      ticks = 1;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008ed4:	f7ff ff24 	bl	8008d20 <inHandlerMode>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d017      	beq.n	8008f0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ede:	f107 0308 	add.w	r3, r7, #8
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fe48 	bl	8009b7c <xQueueReceiveFromISR>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d001      	beq.n	8008ef6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008ef2:	23ff      	movs	r3, #255	; 0xff
 8008ef4:	e015      	b.n	8008f22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d011      	beq.n	8008f20 <osSemaphoreWait+0x8c>
 8008efc:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <osSemaphoreWait+0x98>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	e008      	b.n	8008f20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fd23 	bl	800995c <xQueueSemaphoreTake>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d001      	beq.n	8008f20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f1c:	23ff      	movs	r3, #255	; 0xff
 8008f1e:	e000      	b.n	8008f22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f40:	f7ff feee 	bl	8008d20 <inHandlerMode>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d016      	beq.n	8008f78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f4a:	f107 0308 	add.w	r3, r7, #8
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fb8f 	bl	8009674 <xQueueGiveFromISR>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d001      	beq.n	8008f60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f5c:	23ff      	movs	r3, #255	; 0xff
 8008f5e:	e017      	b.n	8008f90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d013      	beq.n	8008f8e <osSemaphoreRelease+0x5e>
 8008f66:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <osSemaphoreRelease+0x68>)
 8008f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	e00a      	b.n	8008f8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008f78:	2300      	movs	r3, #0
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fa76 	bl	8009470 <xQueueGenericSend>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d001      	beq.n	8008f8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008f8a:	23ff      	movs	r3, #255	; 0xff
 8008f8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f103 0208 	add.w	r2, r3, #8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f103 0208 	add.w	r2, r3, #8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f103 0208 	add.w	r2, r3, #8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	601a      	str	r2, [r3, #0]
}
 8009032:	bf00      	nop
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d103      	bne.n	800905e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	e00c      	b.n	8009078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3308      	adds	r3, #8
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e002      	b.n	800906c <vListInsert+0x2e>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	429a      	cmp	r2, r3
 8009076:	d2f6      	bcs.n	8009066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6892      	ldr	r2, [r2, #8]
 80090c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	6852      	ldr	r2, [r2, #4]
 80090d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d103      	bne.n	80090e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	1e5a      	subs	r2, r3, #1
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10b      	bne.n	8009130 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	b672      	cpsid	i
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	b662      	cpsie	i
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	e7fe      	b.n	800912e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8009130:	f002 f81a 	bl	800b168 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913c:	68f9      	ldr	r1, [r7, #12]
 800913e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009140:	fb01 f303 	mul.w	r3, r1, r3
 8009144:	441a      	add	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009160:	3b01      	subs	r3, #1
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009166:	fb01 f303 	mul.w	r3, r1, r3
 800916a:	441a      	add	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	22ff      	movs	r2, #255	; 0xff
 8009174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	22ff      	movs	r2, #255	; 0xff
 800917c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d114      	bne.n	80091b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d01a      	beq.n	80091c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3310      	adds	r3, #16
 8009192:	4618      	mov	r0, r3
 8009194:	f001 fae6 	bl	800a764 <xTaskRemoveFromEventList>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d012      	beq.n	80091c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800919e:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <xQueueGenericReset+0xd0>)
 80091a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	e009      	b.n	80091c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3310      	adds	r3, #16
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7ff fef1 	bl	8008f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3324      	adds	r3, #36	; 0x24
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff feec 	bl	8008f9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091c4:	f002 f802 	bl	800b1cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091c8:	2301      	movs	r3, #1
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08e      	sub	sp, #56	; 0x38
 80091dc:	af02      	add	r7, sp, #8
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10b      	bne.n	8009204 <xQueueGenericCreateStatic+0x2c>
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	b672      	cpsid	i
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	b662      	cpsie	i
 8009200:	62bb      	str	r3, [r7, #40]	; 0x28
 8009202:	e7fe      	b.n	8009202 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10b      	bne.n	8009222 <xQueueGenericCreateStatic+0x4a>
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	b672      	cpsid	i
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	b662      	cpsie	i
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
 8009220:	e7fe      	b.n	8009220 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <xQueueGenericCreateStatic+0x56>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <xQueueGenericCreateStatic+0x5a>
 800922e:	2301      	movs	r3, #1
 8009230:	e000      	b.n	8009234 <xQueueGenericCreateStatic+0x5c>
 8009232:	2300      	movs	r3, #0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <xQueueGenericCreateStatic+0x78>
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	b672      	cpsid	i
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	b662      	cpsie	i
 800924c:	623b      	str	r3, [r7, #32]
 800924e:	e7fe      	b.n	800924e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d102      	bne.n	800925c <xQueueGenericCreateStatic+0x84>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <xQueueGenericCreateStatic+0x88>
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <xQueueGenericCreateStatic+0x8a>
 8009260:	2300      	movs	r3, #0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10b      	bne.n	800927e <xQueueGenericCreateStatic+0xa6>
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	b672      	cpsid	i
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	b662      	cpsie	i
 800927a:	61fb      	str	r3, [r7, #28]
 800927c:	e7fe      	b.n	800927c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800927e:	2348      	movs	r3, #72	; 0x48
 8009280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b48      	cmp	r3, #72	; 0x48
 8009286:	d00b      	beq.n	80092a0 <xQueueGenericCreateStatic+0xc8>
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	b672      	cpsid	i
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	b662      	cpsie	i
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	e7fe      	b.n	800929e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00d      	beq.n	80092c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	4613      	mov	r3, r2
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 f846 	bl	8009354 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3730      	adds	r7, #48	; 0x30
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b08a      	sub	sp, #40	; 0x28
 80092d6:	af02      	add	r7, sp, #8
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	4613      	mov	r3, r2
 80092de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10b      	bne.n	80092fe <xQueueGenericCreate+0x2c>
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	b672      	cpsid	i
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	b662      	cpsie	i
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	e7fe      	b.n	80092fc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d102      	bne.n	800930a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	e004      	b.n	8009314 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	fb02 f303 	mul.w	r3, r2, r3
 8009312:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	3348      	adds	r3, #72	; 0x48
 8009318:	4618      	mov	r0, r3
 800931a:	f002 f847 	bl	800b3ac <pvPortMalloc>
 800931e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d011      	beq.n	800934a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	3348      	adds	r3, #72	; 0x48
 800932e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009338:	79fa      	ldrb	r2, [r7, #7]
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	4613      	mov	r3, r2
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 f805 	bl	8009354 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800934a:	69bb      	ldr	r3, [r7, #24]
	}
 800934c:	4618      	mov	r0, r3
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d103      	bne.n	8009370 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e002      	b.n	8009376 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009382:	2101      	movs	r1, #1
 8009384:	69b8      	ldr	r0, [r7, #24]
 8009386:	f7ff febd 	bl	8009104 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009392:	b580      	push	{r7, lr}
 8009394:	b08a      	sub	sp, #40	; 0x28
 8009396:	af02      	add	r7, sp, #8
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10b      	bne.n	80093bc <xQueueCreateCountingSemaphoreStatic+0x2a>
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	b672      	cpsid	i
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	b662      	cpsie	i
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	e7fe      	b.n	80093ba <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d90b      	bls.n	80093dc <xQueueCreateCountingSemaphoreStatic+0x4a>
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	b672      	cpsid	i
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	b662      	cpsie	i
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	e7fe      	b.n	80093da <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093dc:	2302      	movs	r3, #2
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	2100      	movs	r1, #0
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7ff fef6 	bl	80091d8 <xQueueGenericCreateStatic>
 80093ec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093fa:	69fb      	ldr	r3, [r7, #28]
	}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3720      	adds	r7, #32
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10b      	bne.n	800942c <xQueueCreateCountingSemaphore+0x28>
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	b672      	cpsid	i
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	b662      	cpsie	i
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	e7fe      	b.n	800942a <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	429a      	cmp	r2, r3
 8009432:	d90b      	bls.n	800944c <xQueueCreateCountingSemaphore+0x48>
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	b672      	cpsid	i
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	b662      	cpsie	i
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	e7fe      	b.n	800944a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800944c:	2202      	movs	r2, #2
 800944e:	2100      	movs	r1, #0
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff ff3e 	bl	80092d2 <xQueueGenericCreate>
 8009456:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009464:	697b      	ldr	r3, [r7, #20]
	}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08e      	sub	sp, #56	; 0x38
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800947e:	2300      	movs	r3, #0
 8009480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10b      	bne.n	80094a4 <xQueueGenericSend+0x34>
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	b672      	cpsid	i
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	b662      	cpsie	i
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80094a2:	e7fe      	b.n	80094a2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <xQueueGenericSend+0x42>
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <xQueueGenericSend+0x46>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <xQueueGenericSend+0x48>
 80094b6:	2300      	movs	r3, #0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10b      	bne.n	80094d4 <xQueueGenericSend+0x64>
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	b672      	cpsid	i
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	b662      	cpsie	i
 80094d0:	627b      	str	r3, [r7, #36]	; 0x24
 80094d2:	e7fe      	b.n	80094d2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d103      	bne.n	80094e2 <xQueueGenericSend+0x72>
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <xQueueGenericSend+0x76>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <xQueueGenericSend+0x78>
 80094e6:	2300      	movs	r3, #0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10b      	bne.n	8009504 <xQueueGenericSend+0x94>
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	b672      	cpsid	i
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	b662      	cpsie	i
 8009500:	623b      	str	r3, [r7, #32]
 8009502:	e7fe      	b.n	8009502 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009504:	f001 faee 	bl	800aae4 <xTaskGetSchedulerState>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d102      	bne.n	8009514 <xQueueGenericSend+0xa4>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <xQueueGenericSend+0xa8>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <xQueueGenericSend+0xaa>
 8009518:	2300      	movs	r3, #0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10b      	bne.n	8009536 <xQueueGenericSend+0xc6>
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	b672      	cpsid	i
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	b662      	cpsie	i
 8009532:	61fb      	str	r3, [r7, #28]
 8009534:	e7fe      	b.n	8009534 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009536:	f001 fe17 	bl	800b168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009542:	429a      	cmp	r2, r3
 8009544:	d302      	bcc.n	800954c <xQueueGenericSend+0xdc>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b02      	cmp	r3, #2
 800954a:	d129      	bne.n	80095a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009552:	f000 fbae 	bl	8009cb2 <prvCopyDataToQueue>
 8009556:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	2b00      	cmp	r3, #0
 800955e:	d010      	beq.n	8009582 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	3324      	adds	r3, #36	; 0x24
 8009564:	4618      	mov	r0, r3
 8009566:	f001 f8fd 	bl	800a764 <xTaskRemoveFromEventList>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d013      	beq.n	8009598 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009570:	4b3f      	ldr	r3, [pc, #252]	; (8009670 <xQueueGenericSend+0x200>)
 8009572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	e00a      	b.n	8009598 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	2b00      	cmp	r3, #0
 8009586:	d007      	beq.n	8009598 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009588:	4b39      	ldr	r3, [pc, #228]	; (8009670 <xQueueGenericSend+0x200>)
 800958a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009598:	f001 fe18 	bl	800b1cc <vPortExitCritical>
				return pdPASS;
 800959c:	2301      	movs	r3, #1
 800959e:	e063      	b.n	8009668 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d103      	bne.n	80095ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095a6:	f001 fe11 	bl	800b1cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e05c      	b.n	8009668 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095b4:	f107 0314 	add.w	r3, r7, #20
 80095b8:	4618      	mov	r0, r3
 80095ba:	f001 f937 	bl	800a82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095be:	2301      	movs	r3, #1
 80095c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095c2:	f001 fe03 	bl	800b1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095c6:	f000 febf 	bl	800a348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ca:	f001 fdcd 	bl	800b168 <vPortEnterCritical>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095d4:	b25b      	sxtb	r3, r3
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095da:	d103      	bne.n	80095e4 <xQueueGenericSend+0x174>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ea:	b25b      	sxtb	r3, r3
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f0:	d103      	bne.n	80095fa <xQueueGenericSend+0x18a>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095fa:	f001 fde7 	bl	800b1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095fe:	1d3a      	adds	r2, r7, #4
 8009600:	f107 0314 	add.w	r3, r7, #20
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f001 f926 	bl	800a858 <xTaskCheckForTimeOut>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d124      	bne.n	800965c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009614:	f000 fc45 	bl	8009ea2 <prvIsQueueFull>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d018      	beq.n	8009650 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	3310      	adds	r3, #16
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f001 f876 	bl	800a718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800962c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800962e:	f000 fbd0 	bl	8009dd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009632:	f000 fe97 	bl	800a364 <xTaskResumeAll>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	f47f af7c 	bne.w	8009536 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <xQueueGenericSend+0x200>)
 8009640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	e772      	b.n	8009536 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009652:	f000 fbbe 	bl	8009dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009656:	f000 fe85 	bl	800a364 <xTaskResumeAll>
 800965a:	e76c      	b.n	8009536 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800965c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800965e:	f000 fbb8 	bl	8009dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009662:	f000 fe7f 	bl	800a364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009668:	4618      	mov	r0, r3
 800966a:	3738      	adds	r7, #56	; 0x38
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	e000ed04 	.word	0xe000ed04

08009674 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08e      	sub	sp, #56	; 0x38
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10b      	bne.n	80096a0 <xQueueGiveFromISR+0x2c>
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	b672      	cpsid	i
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	b662      	cpsie	i
 800969c:	623b      	str	r3, [r7, #32]
 800969e:	e7fe      	b.n	800969e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00b      	beq.n	80096c0 <xQueueGiveFromISR+0x4c>
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	b672      	cpsid	i
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	b662      	cpsie	i
 80096bc:	61fb      	str	r3, [r7, #28]
 80096be:	e7fe      	b.n	80096be <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d103      	bne.n	80096d0 <xQueueGiveFromISR+0x5c>
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <xQueueGiveFromISR+0x60>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e000      	b.n	80096d6 <xQueueGiveFromISR+0x62>
 80096d4:	2300      	movs	r3, #0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <xQueueGiveFromISR+0x7e>
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	b672      	cpsid	i
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	b662      	cpsie	i
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	e7fe      	b.n	80096f0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096f2:	f001 fe19 	bl	800b328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096f6:	f3ef 8211 	mrs	r2, BASEPRI
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	b672      	cpsid	i
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	b662      	cpsie	i
 800970e:	617a      	str	r2, [r7, #20]
 8009710:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009712:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009714:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009722:	429a      	cmp	r2, r3
 8009724:	d22b      	bcs.n	800977e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800972c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d112      	bne.n	8009768 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	d016      	beq.n	8009778 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	3324      	adds	r3, #36	; 0x24
 800974e:	4618      	mov	r0, r3
 8009750:	f001 f808 	bl	800a764 <xTaskRemoveFromEventList>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00e      	beq.n	8009778 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00b      	beq.n	8009778 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2201      	movs	r2, #1
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	e007      	b.n	8009778 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800976c:	3301      	adds	r3, #1
 800976e:	b2db      	uxtb	r3, r3
 8009770:	b25a      	sxtb	r2, r3
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009778:	2301      	movs	r3, #1
 800977a:	637b      	str	r3, [r7, #52]	; 0x34
 800977c:	e001      	b.n	8009782 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800977e:	2300      	movs	r3, #0
 8009780:	637b      	str	r3, [r7, #52]	; 0x34
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800978e:	4618      	mov	r0, r3
 8009790:	3738      	adds	r7, #56	; 0x38
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08c      	sub	sp, #48	; 0x30
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10b      	bne.n	80097ca <xQueueReceive+0x32>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	b672      	cpsid	i
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	b662      	cpsie	i
 80097c6:	623b      	str	r3, [r7, #32]
 80097c8:	e7fe      	b.n	80097c8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <xQueueReceive+0x40>
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <xQueueReceive+0x44>
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <xQueueReceive+0x46>
 80097dc:	2300      	movs	r3, #0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10b      	bne.n	80097fa <xQueueReceive+0x62>
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	b672      	cpsid	i
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	b662      	cpsie	i
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	e7fe      	b.n	80097f8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097fa:	f001 f973 	bl	800aae4 <xTaskGetSchedulerState>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <xQueueReceive+0x72>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <xQueueReceive+0x76>
 800980a:	2301      	movs	r3, #1
 800980c:	e000      	b.n	8009810 <xQueueReceive+0x78>
 800980e:	2300      	movs	r3, #0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10b      	bne.n	800982c <xQueueReceive+0x94>
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	b672      	cpsid	i
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	b662      	cpsie	i
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	e7fe      	b.n	800982a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800982c:	f001 fc9c 	bl	800b168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009834:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01f      	beq.n	800987c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009840:	f000 faa1 	bl	8009d86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	1e5a      	subs	r2, r3, #1
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00f      	beq.n	8009874 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	3310      	adds	r3, #16
 8009858:	4618      	mov	r0, r3
 800985a:	f000 ff83 	bl	800a764 <xTaskRemoveFromEventList>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009864:	4b3c      	ldr	r3, [pc, #240]	; (8009958 <xQueueReceive+0x1c0>)
 8009866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009874:	f001 fcaa 	bl	800b1cc <vPortExitCritical>
				return pdPASS;
 8009878:	2301      	movs	r3, #1
 800987a:	e069      	b.n	8009950 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d103      	bne.n	800988a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009882:	f001 fca3 	bl	800b1cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009886:	2300      	movs	r3, #0
 8009888:	e062      	b.n	8009950 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988c:	2b00      	cmp	r3, #0
 800988e:	d106      	bne.n	800989e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009890:	f107 0310 	add.w	r3, r7, #16
 8009894:	4618      	mov	r0, r3
 8009896:	f000 ffc9 	bl	800a82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800989a:	2301      	movs	r3, #1
 800989c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800989e:	f001 fc95 	bl	800b1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098a2:	f000 fd51 	bl	800a348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098a6:	f001 fc5f 	bl	800b168 <vPortEnterCritical>
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098b0:	b25b      	sxtb	r3, r3
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d103      	bne.n	80098c0 <xQueueReceive+0x128>
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098c6:	b25b      	sxtb	r3, r3
 80098c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098cc:	d103      	bne.n	80098d6 <xQueueReceive+0x13e>
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098d6:	f001 fc79 	bl	800b1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098da:	1d3a      	adds	r2, r7, #4
 80098dc:	f107 0310 	add.w	r3, r7, #16
 80098e0:	4611      	mov	r1, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 ffb8 	bl	800a858 <xTaskCheckForTimeOut>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d123      	bne.n	8009936 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f0:	f000 fac1 	bl	8009e76 <prvIsQueueEmpty>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d017      	beq.n	800992a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	3324      	adds	r3, #36	; 0x24
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f000 ff08 	bl	800a718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990a:	f000 fa62 	bl	8009dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800990e:	f000 fd29 	bl	800a364 <xTaskResumeAll>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d189      	bne.n	800982c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009918:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <xQueueReceive+0x1c0>)
 800991a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	e780      	b.n	800982c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992c:	f000 fa51 	bl	8009dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009930:	f000 fd18 	bl	800a364 <xTaskResumeAll>
 8009934:	e77a      	b.n	800982c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009938:	f000 fa4b 	bl	8009dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800993c:	f000 fd12 	bl	800a364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009942:	f000 fa98 	bl	8009e76 <prvIsQueueEmpty>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	f43f af6f 	beq.w	800982c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800994e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009950:	4618      	mov	r0, r3
 8009952:	3730      	adds	r7, #48	; 0x30
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	; 0x38
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800996e:	2300      	movs	r3, #0
 8009970:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10b      	bne.n	8009990 <xQueueSemaphoreTake+0x34>
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	b672      	cpsid	i
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	b662      	cpsie	i
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	e7fe      	b.n	800998e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <xQueueSemaphoreTake+0x54>
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	b672      	cpsid	i
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	b662      	cpsie	i
 80099ac:	61fb      	str	r3, [r7, #28]
 80099ae:	e7fe      	b.n	80099ae <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099b0:	f001 f898 	bl	800aae4 <xTaskGetSchedulerState>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <xQueueSemaphoreTake+0x64>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <xQueueSemaphoreTake+0x68>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <xQueueSemaphoreTake+0x6a>
 80099c4:	2300      	movs	r3, #0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10b      	bne.n	80099e2 <xQueueSemaphoreTake+0x86>
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	b672      	cpsid	i
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	b662      	cpsie	i
 80099de:	61bb      	str	r3, [r7, #24]
 80099e0:	e7fe      	b.n	80099e0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099e2:	f001 fbc1 	bl	800b168 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d024      	beq.n	8009a3c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	1e5a      	subs	r2, r3, #1
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a02:	f001 fa31 	bl	800ae68 <pvTaskIncrementMutexHeldCount>
 8009a06:	4602      	mov	r2, r0
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00f      	beq.n	8009a34 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	3310      	adds	r3, #16
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 fea3 	bl	800a764 <xTaskRemoveFromEventList>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a24:	4b54      	ldr	r3, [pc, #336]	; (8009b78 <xQueueSemaphoreTake+0x21c>)
 8009a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a34:	f001 fbca 	bl	800b1cc <vPortExitCritical>
				return pdPASS;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e098      	b.n	8009b6e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d112      	bne.n	8009a68 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <xQueueSemaphoreTake+0x104>
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	b672      	cpsid	i
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	b662      	cpsie	i
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	e7fe      	b.n	8009a5e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a60:	f001 fbb4 	bl	800b1cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a64:	2300      	movs	r3, #0
 8009a66:	e082      	b.n	8009b6e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d106      	bne.n	8009a7c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a6e:	f107 030c 	add.w	r3, r7, #12
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 feda 	bl	800a82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a7c:	f001 fba6 	bl	800b1cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a80:	f000 fc62 	bl	800a348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a84:	f001 fb70 	bl	800b168 <vPortEnterCritical>
 8009a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a8e:	b25b      	sxtb	r3, r3
 8009a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a94:	d103      	bne.n	8009a9e <xQueueSemaphoreTake+0x142>
 8009a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa4:	b25b      	sxtb	r3, r3
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aaa:	d103      	bne.n	8009ab4 <xQueueSemaphoreTake+0x158>
 8009aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ab4:	f001 fb8a 	bl	800b1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ab8:	463a      	mov	r2, r7
 8009aba:	f107 030c 	add.w	r3, r7, #12
 8009abe:	4611      	mov	r1, r2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fec9 	bl	800a858 <xTaskCheckForTimeOut>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d132      	bne.n	8009b32 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ace:	f000 f9d2 	bl	8009e76 <prvIsQueueEmpty>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d026      	beq.n	8009b26 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d109      	bne.n	8009af4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009ae0:	f001 fb42 	bl	800b168 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 f819 	bl	800ab20 <xTaskPriorityInherit>
 8009aee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009af0:	f001 fb6c 	bl	800b1cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	3324      	adds	r3, #36	; 0x24
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fe0b 	bl	800a718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b04:	f000 f965 	bl	8009dd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b08:	f000 fc2c 	bl	800a364 <xTaskResumeAll>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f47f af67 	bne.w	80099e2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009b14:	4b18      	ldr	r3, [pc, #96]	; (8009b78 <xQueueSemaphoreTake+0x21c>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	e75d      	b.n	80099e2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b28:	f000 f953 	bl	8009dd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b2c:	f000 fc1a 	bl	800a364 <xTaskResumeAll>
 8009b30:	e757      	b.n	80099e2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b34:	f000 f94d 	bl	8009dd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b38:	f000 fc14 	bl	800a364 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b3e:	f000 f99a 	bl	8009e76 <prvIsQueueEmpty>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f43f af4c 	beq.w	80099e2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00d      	beq.n	8009b6c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009b50:	f001 fb0a 	bl	800b168 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b56:	f000 f894 	bl	8009c82 <prvGetDisinheritPriorityAfterTimeout>
 8009b5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 f8e4 	bl	800ad30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b68:	f001 fb30 	bl	800b1cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3738      	adds	r7, #56	; 0x38
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08e      	sub	sp, #56	; 0x38
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10b      	bne.n	8009baa <xQueueReceiveFromISR+0x2e>
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	b672      	cpsid	i
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	b662      	cpsie	i
 8009ba6:	623b      	str	r3, [r7, #32]
 8009ba8:	e7fe      	b.n	8009ba8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d103      	bne.n	8009bb8 <xQueueReceiveFromISR+0x3c>
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <xQueueReceiveFromISR+0x40>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e000      	b.n	8009bbe <xQueueReceiveFromISR+0x42>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10b      	bne.n	8009bda <xQueueReceiveFromISR+0x5e>
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	61fb      	str	r3, [r7, #28]
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bda:	f001 fba5 	bl	800b328 <vPortValidateInterruptPriority>
	__asm volatile
 8009bde:	f3ef 8211 	mrs	r2, BASEPRI
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	b672      	cpsid	i
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	b662      	cpsie	i
 8009bf6:	61ba      	str	r2, [r7, #24]
 8009bf8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009bfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d02f      	beq.n	8009c6a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c18:	f000 f8b5 	bl	8009d86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	1e5a      	subs	r2, r3, #1
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2c:	d112      	bne.n	8009c54 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d016      	beq.n	8009c64 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	3310      	adds	r3, #16
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fd92 	bl	800a764 <xTaskRemoveFromEventList>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00e      	beq.n	8009c64 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00b      	beq.n	8009c64 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	e007      	b.n	8009c64 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c58:	3301      	adds	r3, #1
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	b25a      	sxtb	r2, r3
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c64:	2301      	movs	r3, #1
 8009c66:	637b      	str	r3, [r7, #52]	; 0x34
 8009c68:	e001      	b.n	8009c6e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3738      	adds	r7, #56	; 0x38
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d006      	beq.n	8009ca0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f1c3 0307 	rsb	r3, r3, #7
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e001      	b.n	8009ca4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
	}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b086      	sub	sp, #24
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	60f8      	str	r0, [r7, #12]
 8009cba:	60b9      	str	r1, [r7, #8]
 8009cbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10d      	bne.n	8009cec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d14d      	bne.n	8009d74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 ff9f 	bl	800ac20 <xTaskPriorityDisinherit>
 8009ce2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	609a      	str	r2, [r3, #8]
 8009cea:	e043      	b.n	8009d74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d119      	bne.n	8009d26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6858      	ldr	r0, [r3, #4]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	68b9      	ldr	r1, [r7, #8]
 8009cfe:	f01b fd7d 	bl	80257fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	441a      	add	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d32b      	bcc.n	8009d74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	e026      	b.n	8009d74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68d8      	ldr	r0, [r3, #12]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	f01b fd63 	bl	80257fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	425b      	negs	r3, r3
 8009d40:	441a      	add	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d207      	bcs.n	8009d62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	689a      	ldr	r2, [r3, #8]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	425b      	negs	r3, r3
 8009d5c:	441a      	add	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d105      	bne.n	8009d74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d7c:	697b      	ldr	r3, [r7, #20]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d018      	beq.n	8009dca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da0:	441a      	add	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d303      	bcc.n	8009dba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68d9      	ldr	r1, [r3, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6838      	ldr	r0, [r7, #0]
 8009dc6:	f01b fd19 	bl	80257fc <memcpy>
	}
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dda:	f001 f9c5 	bl	800b168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009de6:	e011      	b.n	8009e0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d012      	beq.n	8009e16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3324      	adds	r3, #36	; 0x24
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fcb5 	bl	800a764 <xTaskRemoveFromEventList>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e00:	f000 fd8e 	bl	800a920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dce9      	bgt.n	8009de8 <prvUnlockQueue+0x16>
 8009e14:	e000      	b.n	8009e18 <prvUnlockQueue+0x46>
					break;
 8009e16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	22ff      	movs	r2, #255	; 0xff
 8009e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e20:	f001 f9d4 	bl	800b1cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e24:	f001 f9a0 	bl	800b168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e30:	e011      	b.n	8009e56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d012      	beq.n	8009e60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3310      	adds	r3, #16
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fc90 	bl	800a764 <xTaskRemoveFromEventList>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e4a:	f000 fd69 	bl	800a920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	dce9      	bgt.n	8009e32 <prvUnlockQueue+0x60>
 8009e5e:	e000      	b.n	8009e62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	22ff      	movs	r2, #255	; 0xff
 8009e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e6a:	f001 f9af 	bl	800b1cc <vPortExitCritical>
}
 8009e6e:	bf00      	nop
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e7e:	f001 f973 	bl	800b168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	60fb      	str	r3, [r7, #12]
 8009e8e:	e001      	b.n	8009e94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e94:	f001 f99a 	bl	800b1cc <vPortExitCritical>

	return xReturn;
 8009e98:	68fb      	ldr	r3, [r7, #12]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eaa:	f001 f95d 	bl	800b168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d102      	bne.n	8009ec0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
 8009ebe:	e001      	b.n	8009ec4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ec4:	f001 f982 	bl	800b1cc <vPortExitCritical>

	return xReturn;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b08e      	sub	sp, #56	; 0x38
 8009ed6:	af04      	add	r7, sp, #16
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10b      	bne.n	8009efe <xTaskCreateStatic+0x2c>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	b672      	cpsid	i
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	b662      	cpsie	i
 8009efa:	623b      	str	r3, [r7, #32]
 8009efc:	e7fe      	b.n	8009efc <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10b      	bne.n	8009f1c <xTaskCreateStatic+0x4a>
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	b672      	cpsid	i
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	b662      	cpsie	i
 8009f18:	61fb      	str	r3, [r7, #28]
 8009f1a:	e7fe      	b.n	8009f1a <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f1c:	2358      	movs	r3, #88	; 0x58
 8009f1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b58      	cmp	r3, #88	; 0x58
 8009f24:	d00b      	beq.n	8009f3e <xTaskCreateStatic+0x6c>
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	b672      	cpsid	i
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	b662      	cpsie	i
 8009f3a:	61bb      	str	r3, [r7, #24]
 8009f3c:	e7fe      	b.n	8009f3c <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d01e      	beq.n	8009f84 <xTaskCreateStatic+0xb2>
 8009f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d01b      	beq.n	8009f84 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	2202      	movs	r2, #2
 8009f5a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9303      	str	r3, [sp, #12]
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	9302      	str	r3, [sp, #8]
 8009f66:	f107 0314 	add.w	r3, r7, #20
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	68b9      	ldr	r1, [r7, #8]
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 f850 	bl	800a01c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f7e:	f000 f8e1 	bl	800a144 <prvAddNewTaskToReadyList>
 8009f82:	e001      	b.n	8009f88 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f88:	697b      	ldr	r3, [r7, #20]
	}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3728      	adds	r7, #40	; 0x28
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b08c      	sub	sp, #48	; 0x30
 8009f96:	af04      	add	r7, sp, #16
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	603b      	str	r3, [r7, #0]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fa2:	88fb      	ldrh	r3, [r7, #6]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 fa00 	bl	800b3ac <pvPortMalloc>
 8009fac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00e      	beq.n	8009fd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fb4:	2058      	movs	r0, #88	; 0x58
 8009fb6:	f001 f9f9 	bl	800b3ac <pvPortMalloc>
 8009fba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8009fc8:	e005      	b.n	8009fd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fca:	6978      	ldr	r0, [r7, #20]
 8009fcc:	f001 faba 	bl	800b544 <vPortFree>
 8009fd0:	e001      	b.n	8009fd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d017      	beq.n	800a00c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fe4:	88fa      	ldrh	r2, [r7, #6]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9303      	str	r3, [sp, #12]
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	9302      	str	r3, [sp, #8]
 8009fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68b9      	ldr	r1, [r7, #8]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 f80e 	bl	800a01c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a000:	69f8      	ldr	r0, [r7, #28]
 800a002:	f000 f89f 	bl	800a144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a006:	2301      	movs	r3, #1
 800a008:	61bb      	str	r3, [r7, #24]
 800a00a:	e002      	b.n	800a012 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a012:	69bb      	ldr	r3, [r7, #24]
	}
 800a014:	4618      	mov	r0, r3
 800a016:	3720      	adds	r7, #32
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	461a      	mov	r2, r3
 800a034:	21a5      	movs	r1, #165	; 0xa5
 800a036:	f01b fbec 	bl	8025812 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a03e:	6879      	ldr	r1, [r7, #4]
 800a040:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a044:	440b      	add	r3, r1
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	f023 0307 	bic.w	r3, r3, #7
 800a052:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <prvInitialiseNewTask+0x5a>
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	b672      	cpsid	i
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	b662      	cpsie	i
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	e7fe      	b.n	800a074 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01f      	beq.n	800a0bc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a07c:	2300      	movs	r3, #0
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e012      	b.n	800a0a8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	4413      	add	r3, r2
 800a088:	7819      	ldrb	r1, [r3, #0]
 800a08a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	4413      	add	r3, r2
 800a090:	3334      	adds	r3, #52	; 0x34
 800a092:	460a      	mov	r2, r1
 800a094:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	4413      	add	r3, r2
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	2b0f      	cmp	r3, #15
 800a0ac:	d9e9      	bls.n	800a082 <prvInitialiseNewTask+0x66>
 800a0ae:	e000      	b.n	800a0b2 <prvInitialiseNewTask+0x96>
			{
				break;
 800a0b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0ba:	e003      	b.n	800a0c4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	2b06      	cmp	r3, #6
 800a0c8:	d901      	bls.n	800a0ce <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0ca:	2306      	movs	r3, #6
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	2200      	movs	r2, #0
 800a0de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe ff79 	bl	8008fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	3318      	adds	r3, #24
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe ff74 	bl	8008fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	f1c3 0207 	rsb	r2, r3, #7
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a108:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	2200      	movs	r2, #0
 800a10e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	2200      	movs	r2, #0
 800a114:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	68f9      	ldr	r1, [r7, #12]
 800a122:	69b8      	ldr	r0, [r7, #24]
 800a124:	f000 ff1a 	bl	800af5c <pxPortInitialiseStack>
 800a128:	4602      	mov	r2, r0
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a13a:	bf00      	nop
 800a13c:	3720      	adds	r7, #32
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a14c:	f001 f80c 	bl	800b168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a150:	4b2a      	ldr	r3, [pc, #168]	; (800a1fc <prvAddNewTaskToReadyList+0xb8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3301      	adds	r3, #1
 800a156:	4a29      	ldr	r2, [pc, #164]	; (800a1fc <prvAddNewTaskToReadyList+0xb8>)
 800a158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a15a:	4b29      	ldr	r3, [pc, #164]	; (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a162:	4a27      	ldr	r2, [pc, #156]	; (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a168:	4b24      	ldr	r3, [pc, #144]	; (800a1fc <prvAddNewTaskToReadyList+0xb8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d110      	bne.n	800a192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a170:	f000 fbfc 	bl	800a96c <prvInitialiseTaskLists>
 800a174:	e00d      	b.n	800a192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a176:	4b23      	ldr	r3, [pc, #140]	; (800a204 <prvAddNewTaskToReadyList+0xc0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a17e:	4b20      	ldr	r3, [pc, #128]	; (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d802      	bhi.n	800a192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a18c:	4a1c      	ldr	r2, [pc, #112]	; (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a192:	4b1d      	ldr	r3, [pc, #116]	; (800a208 <prvAddNewTaskToReadyList+0xc4>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3301      	adds	r3, #1
 800a198:	4a1b      	ldr	r2, [pc, #108]	; (800a208 <prvAddNewTaskToReadyList+0xc4>)
 800a19a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	409a      	lsls	r2, r3
 800a1a4:	4b19      	ldr	r3, [pc, #100]	; (800a20c <prvAddNewTaskToReadyList+0xc8>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	4a18      	ldr	r2, [pc, #96]	; (800a20c <prvAddNewTaskToReadyList+0xc8>)
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4a15      	ldr	r2, [pc, #84]	; (800a210 <prvAddNewTaskToReadyList+0xcc>)
 800a1bc:	441a      	add	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f7fe ff16 	bl	8008ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1ca:	f000 ffff 	bl	800b1cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	; (800a204 <prvAddNewTaskToReadyList+0xc0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00e      	beq.n	800a1f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1d6:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <prvAddNewTaskToReadyList+0xbc>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d207      	bcs.n	800a1f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <prvAddNewTaskToReadyList+0xd0>)
 800a1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000494 	.word	0x20000494
 800a200:	20000394 	.word	0x20000394
 800a204:	200004a0 	.word	0x200004a0
 800a208:	200004b0 	.word	0x200004b0
 800a20c:	2000049c 	.word	0x2000049c
 800a210:	20000398 	.word	0x20000398
 800a214:	e000ed04 	.word	0xe000ed04

0800a218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d018      	beq.n	800a25c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a22a:	4b14      	ldr	r3, [pc, #80]	; (800a27c <vTaskDelay+0x64>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00b      	beq.n	800a24a <vTaskDelay+0x32>
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	b672      	cpsid	i
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	b662      	cpsie	i
 800a246:	60bb      	str	r3, [r7, #8]
 800a248:	e7fe      	b.n	800a248 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a24a:	f000 f87d 	bl	800a348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a24e:	2100      	movs	r1, #0
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fe1d 	bl	800ae90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a256:	f000 f885 	bl	800a364 <xTaskResumeAll>
 800a25a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d107      	bne.n	800a272 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a262:	4b07      	ldr	r3, [pc, #28]	; (800a280 <vTaskDelay+0x68>)
 800a264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200004bc 	.word	0x200004bc
 800a280:	e000ed04 	.word	0xe000ed04

0800a284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08a      	sub	sp, #40	; 0x28
 800a288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a292:	463a      	mov	r2, r7
 800a294:	1d39      	adds	r1, r7, #4
 800a296:	f107 0308 	add.w	r3, r7, #8
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f6 fc96 	bl	8000bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	9202      	str	r2, [sp, #8]
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	460a      	mov	r2, r1
 800a2b2:	491f      	ldr	r1, [pc, #124]	; (800a330 <vTaskStartScheduler+0xac>)
 800a2b4:	481f      	ldr	r0, [pc, #124]	; (800a334 <vTaskStartScheduler+0xb0>)
 800a2b6:	f7ff fe0c 	bl	8009ed2 <xTaskCreateStatic>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	4b1e      	ldr	r3, [pc, #120]	; (800a338 <vTaskStartScheduler+0xb4>)
 800a2be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2c0:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <vTaskStartScheduler+0xb4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e001      	b.n	800a2d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d117      	bne.n	800a308 <vTaskStartScheduler+0x84>
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	b672      	cpsid	i
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	b662      	cpsie	i
 800a2ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <vTaskStartScheduler+0xb8>)
 800a2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2f6:	4b12      	ldr	r3, [pc, #72]	; (800a340 <vTaskStartScheduler+0xbc>)
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2fc:	4b11      	ldr	r3, [pc, #68]	; (800a344 <vTaskStartScheduler+0xc0>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a302:	f000 feb5 	bl	800b070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a306:	e00f      	b.n	800a328 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30e:	d10b      	bne.n	800a328 <vTaskStartScheduler+0xa4>
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	b672      	cpsid	i
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	b662      	cpsie	i
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	e7fe      	b.n	800a326 <vTaskStartScheduler+0xa2>
}
 800a328:	bf00      	nop
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	08026804 	.word	0x08026804
 800a334:	0800a939 	.word	0x0800a939
 800a338:	200004b8 	.word	0x200004b8
 800a33c:	200004b4 	.word	0x200004b4
 800a340:	200004a0 	.word	0x200004a0
 800a344:	20000498 	.word	0x20000498

0800a348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a34c:	4b04      	ldr	r3, [pc, #16]	; (800a360 <vTaskSuspendAll+0x18>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3301      	adds	r3, #1
 800a352:	4a03      	ldr	r2, [pc, #12]	; (800a360 <vTaskSuspendAll+0x18>)
 800a354:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a356:	bf00      	nop
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	200004bc 	.word	0x200004bc

0800a364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a36e:	2300      	movs	r3, #0
 800a370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a372:	4b42      	ldr	r3, [pc, #264]	; (800a47c <xTaskResumeAll+0x118>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <xTaskResumeAll+0x2e>
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	b672      	cpsid	i
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	b662      	cpsie	i
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	e7fe      	b.n	800a390 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a392:	f000 fee9 	bl	800b168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a396:	4b39      	ldr	r3, [pc, #228]	; (800a47c <xTaskResumeAll+0x118>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	4a37      	ldr	r2, [pc, #220]	; (800a47c <xTaskResumeAll+0x118>)
 800a39e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3a0:	4b36      	ldr	r3, [pc, #216]	; (800a47c <xTaskResumeAll+0x118>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d161      	bne.n	800a46c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3a8:	4b35      	ldr	r3, [pc, #212]	; (800a480 <xTaskResumeAll+0x11c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d05d      	beq.n	800a46c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3b0:	e02e      	b.n	800a410 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b2:	4b34      	ldr	r3, [pc, #208]	; (800a484 <xTaskResumeAll+0x120>)
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3318      	adds	r3, #24
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fe76 	bl	80090b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe fe71 	bl	80090b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	409a      	lsls	r2, r3
 800a3d6:	4b2c      	ldr	r3, [pc, #176]	; (800a488 <xTaskResumeAll+0x124>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	4a2a      	ldr	r2, [pc, #168]	; (800a488 <xTaskResumeAll+0x124>)
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4a27      	ldr	r2, [pc, #156]	; (800a48c <xTaskResumeAll+0x128>)
 800a3ee:	441a      	add	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	f7fe fdfd 	bl	8008ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	4b23      	ldr	r3, [pc, #140]	; (800a490 <xTaskResumeAll+0x12c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a406:	429a      	cmp	r2, r3
 800a408:	d302      	bcc.n	800a410 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a40a:	4b22      	ldr	r3, [pc, #136]	; (800a494 <xTaskResumeAll+0x130>)
 800a40c:	2201      	movs	r2, #1
 800a40e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a410:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <xTaskResumeAll+0x120>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1cc      	bne.n	800a3b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a41e:	f000 fb41 	bl	800aaa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a422:	4b1d      	ldr	r3, [pc, #116]	; (800a498 <xTaskResumeAll+0x134>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d010      	beq.n	800a450 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a42e:	f000 f837 	bl	800a4a0 <xTaskIncrementTick>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a438:	4b16      	ldr	r3, [pc, #88]	; (800a494 <xTaskResumeAll+0x130>)
 800a43a:	2201      	movs	r2, #1
 800a43c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3b01      	subs	r3, #1
 800a442:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1f1      	bne.n	800a42e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a44a:	4b13      	ldr	r3, [pc, #76]	; (800a498 <xTaskResumeAll+0x134>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a450:	4b10      	ldr	r3, [pc, #64]	; (800a494 <xTaskResumeAll+0x130>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a458:	2301      	movs	r3, #1
 800a45a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a45c:	4b0f      	ldr	r3, [pc, #60]	; (800a49c <xTaskResumeAll+0x138>)
 800a45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a46c:	f000 feae 	bl	800b1cc <vPortExitCritical>

	return xAlreadyYielded;
 800a470:	68bb      	ldr	r3, [r7, #8]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200004bc 	.word	0x200004bc
 800a480:	20000494 	.word	0x20000494
 800a484:	20000454 	.word	0x20000454
 800a488:	2000049c 	.word	0x2000049c
 800a48c:	20000398 	.word	0x20000398
 800a490:	20000394 	.word	0x20000394
 800a494:	200004a8 	.word	0x200004a8
 800a498:	200004a4 	.word	0x200004a4
 800a49c:	e000ed04 	.word	0xe000ed04

0800a4a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4aa:	4b4f      	ldr	r3, [pc, #316]	; (800a5e8 <xTaskIncrementTick+0x148>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 8089 	bne.w	800a5c6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4b4:	4b4d      	ldr	r3, [pc, #308]	; (800a5ec <xTaskIncrementTick+0x14c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4bc:	4a4b      	ldr	r2, [pc, #300]	; (800a5ec <xTaskIncrementTick+0x14c>)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d121      	bne.n	800a50c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4c8:	4b49      	ldr	r3, [pc, #292]	; (800a5f0 <xTaskIncrementTick+0x150>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <xTaskIncrementTick+0x4a>
 800a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d6:	b672      	cpsid	i
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	b662      	cpsie	i
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	e7fe      	b.n	800a4e8 <xTaskIncrementTick+0x48>
 800a4ea:	4b41      	ldr	r3, [pc, #260]	; (800a5f0 <xTaskIncrementTick+0x150>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	4b40      	ldr	r3, [pc, #256]	; (800a5f4 <xTaskIncrementTick+0x154>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a3e      	ldr	r2, [pc, #248]	; (800a5f0 <xTaskIncrementTick+0x150>)
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	4a3e      	ldr	r2, [pc, #248]	; (800a5f4 <xTaskIncrementTick+0x154>)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	4b3e      	ldr	r3, [pc, #248]	; (800a5f8 <xTaskIncrementTick+0x158>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	4a3c      	ldr	r2, [pc, #240]	; (800a5f8 <xTaskIncrementTick+0x158>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	f000 facc 	bl	800aaa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a50c:	4b3b      	ldr	r3, [pc, #236]	; (800a5fc <xTaskIncrementTick+0x15c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	429a      	cmp	r2, r3
 800a514:	d348      	bcc.n	800a5a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a516:	4b36      	ldr	r3, [pc, #216]	; (800a5f0 <xTaskIncrementTick+0x150>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d104      	bne.n	800a52a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a520:	4b36      	ldr	r3, [pc, #216]	; (800a5fc <xTaskIncrementTick+0x15c>)
 800a522:	f04f 32ff 	mov.w	r2, #4294967295
 800a526:	601a      	str	r2, [r3, #0]
					break;
 800a528:	e03e      	b.n	800a5a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52a:	4b31      	ldr	r3, [pc, #196]	; (800a5f0 <xTaskIncrementTick+0x150>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d203      	bcs.n	800a54a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a542:	4a2e      	ldr	r2, [pc, #184]	; (800a5fc <xTaskIncrementTick+0x15c>)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a548:	e02e      	b.n	800a5a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	3304      	adds	r3, #4
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fdae 	bl	80090b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	3318      	adds	r3, #24
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe fda5 	bl	80090b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56a:	2201      	movs	r2, #1
 800a56c:	409a      	lsls	r2, r3
 800a56e:	4b24      	ldr	r3, [pc, #144]	; (800a600 <xTaskIncrementTick+0x160>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4313      	orrs	r3, r2
 800a574:	4a22      	ldr	r2, [pc, #136]	; (800a600 <xTaskIncrementTick+0x160>)
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57c:	4613      	mov	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4a1f      	ldr	r2, [pc, #124]	; (800a604 <xTaskIncrementTick+0x164>)
 800a586:	441a      	add	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4619      	mov	r1, r3
 800a58e:	4610      	mov	r0, r2
 800a590:	f7fe fd31 	bl	8008ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	4b1b      	ldr	r3, [pc, #108]	; (800a608 <xTaskIncrementTick+0x168>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d3b9      	bcc.n	800a516 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5a6:	e7b6      	b.n	800a516 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5a8:	4b17      	ldr	r3, [pc, #92]	; (800a608 <xTaskIncrementTick+0x168>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ae:	4915      	ldr	r1, [pc, #84]	; (800a604 <xTaskIncrementTick+0x164>)
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	440b      	add	r3, r1
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d907      	bls.n	800a5d0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e004      	b.n	800a5d0 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5c6:	4b11      	ldr	r3, [pc, #68]	; (800a60c <xTaskIncrementTick+0x16c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	4a0f      	ldr	r2, [pc, #60]	; (800a60c <xTaskIncrementTick+0x16c>)
 800a5ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <xTaskIncrementTick+0x170>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5dc:	697b      	ldr	r3, [r7, #20]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200004bc 	.word	0x200004bc
 800a5ec:	20000498 	.word	0x20000498
 800a5f0:	2000044c 	.word	0x2000044c
 800a5f4:	20000450 	.word	0x20000450
 800a5f8:	200004ac 	.word	0x200004ac
 800a5fc:	200004b4 	.word	0x200004b4
 800a600:	2000049c 	.word	0x2000049c
 800a604:	20000398 	.word	0x20000398
 800a608:	20000394 	.word	0x20000394
 800a60c:	200004a4 	.word	0x200004a4
 800a610:	200004a8 	.word	0x200004a8

0800a614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a61a:	4b3a      	ldr	r3, [pc, #232]	; (800a704 <vTaskSwitchContext+0xf0>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a622:	4b39      	ldr	r3, [pc, #228]	; (800a708 <vTaskSwitchContext+0xf4>)
 800a624:	2201      	movs	r2, #1
 800a626:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a628:	e067      	b.n	800a6fa <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800a62a:	4b37      	ldr	r3, [pc, #220]	; (800a708 <vTaskSwitchContext+0xf4>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a630:	4b36      	ldr	r3, [pc, #216]	; (800a70c <vTaskSwitchContext+0xf8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	61fb      	str	r3, [r7, #28]
 800a638:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a63c:	61bb      	str	r3, [r7, #24]
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	429a      	cmp	r2, r3
 800a646:	d111      	bne.n	800a66c <vTaskSwitchContext+0x58>
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	3304      	adds	r3, #4
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	429a      	cmp	r2, r3
 800a652:	d10b      	bne.n	800a66c <vTaskSwitchContext+0x58>
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	3308      	adds	r3, #8
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d105      	bne.n	800a66c <vTaskSwitchContext+0x58>
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	330c      	adds	r3, #12
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d008      	beq.n	800a67e <vTaskSwitchContext+0x6a>
 800a66c:	4b27      	ldr	r3, [pc, #156]	; (800a70c <vTaskSwitchContext+0xf8>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	4b26      	ldr	r3, [pc, #152]	; (800a70c <vTaskSwitchContext+0xf8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3334      	adds	r3, #52	; 0x34
 800a676:	4619      	mov	r1, r3
 800a678:	4610      	mov	r0, r2
 800a67a:	f7f6 fa94 	bl	8000ba6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a67e:	4b24      	ldr	r3, [pc, #144]	; (800a710 <vTaskSwitchContext+0xfc>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	fab3 f383 	clz	r3, r3
 800a68a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	f1c3 031f 	rsb	r3, r3, #31
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	491f      	ldr	r1, [pc, #124]	; (800a714 <vTaskSwitchContext+0x100>)
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	4613      	mov	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10b      	bne.n	800a6c0 <vTaskSwitchContext+0xac>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	b672      	cpsid	i
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	b662      	cpsie	i
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	e7fe      	b.n	800a6be <vTaskSwitchContext+0xaa>
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4a12      	ldr	r2, [pc, #72]	; (800a714 <vTaskSwitchContext+0x100>)
 800a6cc:	4413      	add	r3, r2
 800a6ce:	613b      	str	r3, [r7, #16]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	605a      	str	r2, [r3, #4]
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d104      	bne.n	800a6f0 <vTaskSwitchContext+0xdc>
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	605a      	str	r2, [r3, #4]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	4a05      	ldr	r2, [pc, #20]	; (800a70c <vTaskSwitchContext+0xf8>)
 800a6f8:	6013      	str	r3, [r2, #0]
}
 800a6fa:	bf00      	nop
 800a6fc:	3720      	adds	r7, #32
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	200004bc 	.word	0x200004bc
 800a708:	200004a8 	.word	0x200004a8
 800a70c:	20000394 	.word	0x20000394
 800a710:	2000049c 	.word	0x2000049c
 800a714:	20000398 	.word	0x20000398

0800a718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <vTaskPlaceOnEventList+0x28>
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	b672      	cpsid	i
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	b662      	cpsie	i
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e7fe      	b.n	800a73e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <vTaskPlaceOnEventList+0x48>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3318      	adds	r3, #24
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7fe fc78 	bl	800903e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a74e:	2101      	movs	r1, #1
 800a750:	6838      	ldr	r0, [r7, #0]
 800a752:	f000 fb9d 	bl	800ae90 <prvAddCurrentTaskToDelayedList>
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20000394 	.word	0x20000394

0800a764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10b      	bne.n	800a792 <xTaskRemoveFromEventList+0x2e>
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	b672      	cpsid	i
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	b662      	cpsie	i
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	e7fe      	b.n	800a790 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	3318      	adds	r3, #24
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fc8a 	bl	80090b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a79c:	4b1d      	ldr	r3, [pc, #116]	; (800a814 <xTaskRemoveFromEventList+0xb0>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d11c      	bne.n	800a7de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe fc81 	bl	80090b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	409a      	lsls	r2, r3
 800a7b6:	4b18      	ldr	r3, [pc, #96]	; (800a818 <xTaskRemoveFromEventList+0xb4>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	4a16      	ldr	r2, [pc, #88]	; (800a818 <xTaskRemoveFromEventList+0xb4>)
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4a13      	ldr	r2, [pc, #76]	; (800a81c <xTaskRemoveFromEventList+0xb8>)
 800a7ce:	441a      	add	r2, r3
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	f7fe fc0d 	bl	8008ff6 <vListInsertEnd>
 800a7dc:	e005      	b.n	800a7ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3318      	adds	r3, #24
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	480e      	ldr	r0, [pc, #56]	; (800a820 <xTaskRemoveFromEventList+0xbc>)
 800a7e6:	f7fe fc06 	bl	8008ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ee:	4b0d      	ldr	r3, [pc, #52]	; (800a824 <xTaskRemoveFromEventList+0xc0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d905      	bls.n	800a804 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <xTaskRemoveFromEventList+0xc4>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	601a      	str	r2, [r3, #0]
 800a802:	e001      	b.n	800a808 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a804:	2300      	movs	r3, #0
 800a806:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a808:	697b      	ldr	r3, [r7, #20]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200004bc 	.word	0x200004bc
 800a818:	2000049c 	.word	0x2000049c
 800a81c:	20000398 	.word	0x20000398
 800a820:	20000454 	.word	0x20000454
 800a824:	20000394 	.word	0x20000394
 800a828:	200004a8 	.word	0x200004a8

0800a82c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a834:	4b06      	ldr	r3, [pc, #24]	; (800a850 <vTaskInternalSetTimeOutState+0x24>)
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a83c:	4b05      	ldr	r3, [pc, #20]	; (800a854 <vTaskInternalSetTimeOutState+0x28>)
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	605a      	str	r2, [r3, #4]
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	200004ac 	.word	0x200004ac
 800a854:	20000498 	.word	0x20000498

0800a858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10b      	bne.n	800a880 <xTaskCheckForTimeOut+0x28>
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	b672      	cpsid	i
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	b662      	cpsie	i
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	e7fe      	b.n	800a87e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10b      	bne.n	800a89e <xTaskCheckForTimeOut+0x46>
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	b672      	cpsid	i
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	b662      	cpsie	i
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	e7fe      	b.n	800a89c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800a89e:	f000 fc63 	bl	800b168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8a2:	4b1d      	ldr	r3, [pc, #116]	; (800a918 <xTaskCheckForTimeOut+0xc0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d102      	bne.n	800a8c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	e023      	b.n	800a90a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4b15      	ldr	r3, [pc, #84]	; (800a91c <xTaskCheckForTimeOut+0xc4>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d007      	beq.n	800a8de <xTaskCheckForTimeOut+0x86>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	69ba      	ldr	r2, [r7, #24]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d302      	bcc.n	800a8de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	61fb      	str	r3, [r7, #28]
 800a8dc:	e015      	b.n	800a90a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d20b      	bcs.n	800a900 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	1ad2      	subs	r2, r2, r3
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7ff ff99 	bl	800a82c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	61fb      	str	r3, [r7, #28]
 800a8fe:	e004      	b.n	800a90a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a906:	2301      	movs	r3, #1
 800a908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a90a:	f000 fc5f 	bl	800b1cc <vPortExitCritical>

	return xReturn;
 800a90e:	69fb      	ldr	r3, [r7, #28]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3720      	adds	r7, #32
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20000498 	.word	0x20000498
 800a91c:	200004ac 	.word	0x200004ac

0800a920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a924:	4b03      	ldr	r3, [pc, #12]	; (800a934 <vTaskMissedYield+0x14>)
 800a926:	2201      	movs	r2, #1
 800a928:	601a      	str	r2, [r3, #0]
}
 800a92a:	bf00      	nop
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	200004a8 	.word	0x200004a8

0800a938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a940:	f000 f854 	bl	800a9ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a944:	4b07      	ldr	r3, [pc, #28]	; (800a964 <prvIdleTask+0x2c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d907      	bls.n	800a95c <prvIdleTask+0x24>
			{
				taskYIELD();
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <prvIdleTask+0x30>)
 800a94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a95c:	f7f6 f91c 	bl	8000b98 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a960:	e7ee      	b.n	800a940 <prvIdleTask+0x8>
 800a962:	bf00      	nop
 800a964:	20000398 	.word	0x20000398
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a972:	2300      	movs	r3, #0
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	e00c      	b.n	800a992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4a12      	ldr	r2, [pc, #72]	; (800a9cc <prvInitialiseTaskLists+0x60>)
 800a984:	4413      	add	r3, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe fb08 	bl	8008f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3301      	adds	r3, #1
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b06      	cmp	r3, #6
 800a996:	d9ef      	bls.n	800a978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a998:	480d      	ldr	r0, [pc, #52]	; (800a9d0 <prvInitialiseTaskLists+0x64>)
 800a99a:	f7fe faff 	bl	8008f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a99e:	480d      	ldr	r0, [pc, #52]	; (800a9d4 <prvInitialiseTaskLists+0x68>)
 800a9a0:	f7fe fafc 	bl	8008f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9a4:	480c      	ldr	r0, [pc, #48]	; (800a9d8 <prvInitialiseTaskLists+0x6c>)
 800a9a6:	f7fe faf9 	bl	8008f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9aa:	480c      	ldr	r0, [pc, #48]	; (800a9dc <prvInitialiseTaskLists+0x70>)
 800a9ac:	f7fe faf6 	bl	8008f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9b0:	480b      	ldr	r0, [pc, #44]	; (800a9e0 <prvInitialiseTaskLists+0x74>)
 800a9b2:	f7fe faf3 	bl	8008f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <prvInitialiseTaskLists+0x78>)
 800a9b8:	4a05      	ldr	r2, [pc, #20]	; (800a9d0 <prvInitialiseTaskLists+0x64>)
 800a9ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <prvInitialiseTaskLists+0x7c>)
 800a9be:	4a05      	ldr	r2, [pc, #20]	; (800a9d4 <prvInitialiseTaskLists+0x68>)
 800a9c0:	601a      	str	r2, [r3, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000398 	.word	0x20000398
 800a9d0:	20000424 	.word	0x20000424
 800a9d4:	20000438 	.word	0x20000438
 800a9d8:	20000454 	.word	0x20000454
 800a9dc:	20000468 	.word	0x20000468
 800a9e0:	20000480 	.word	0x20000480
 800a9e4:	2000044c 	.word	0x2000044c
 800a9e8:	20000450 	.word	0x20000450

0800a9ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9f2:	e019      	b.n	800aa28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9f4:	f000 fbb8 	bl	800b168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <prvCheckTasksWaitingTermination+0x4c>)
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fe fb53 	bl	80090b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa0a:	4b0c      	ldr	r3, [pc, #48]	; (800aa3c <prvCheckTasksWaitingTermination+0x50>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	4a0a      	ldr	r2, [pc, #40]	; (800aa3c <prvCheckTasksWaitingTermination+0x50>)
 800aa12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa14:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <prvCheckTasksWaitingTermination+0x54>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <prvCheckTasksWaitingTermination+0x54>)
 800aa1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa1e:	f000 fbd5 	bl	800b1cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f80e 	bl	800aa44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa28:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <prvCheckTasksWaitingTermination+0x54>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e1      	bne.n	800a9f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	20000468 	.word	0x20000468
 800aa3c:	20000494 	.word	0x20000494
 800aa40:	2000047c 	.word	0x2000047c

0800aa44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d108      	bne.n	800aa68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 fd72 	bl	800b544 <vPortFree>
				vPortFree( pxTCB );
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fd6f 	bl	800b544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa66:	e019      	b.n	800aa9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d103      	bne.n	800aa7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fd66 	bl	800b544 <vPortFree>
	}
 800aa78:	e010      	b.n	800aa9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d00b      	beq.n	800aa9c <prvDeleteTCB+0x58>
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	b672      	cpsid	i
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	b662      	cpsie	i
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	e7fe      	b.n	800aa9a <prvDeleteTCB+0x56>
	}
 800aa9c:	bf00      	nop
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaaa:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <prvResetNextTaskUnblockTime+0x38>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d104      	bne.n	800aabe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aab4:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <prvResetNextTaskUnblockTime+0x3c>)
 800aab6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aabc:	e008      	b.n	800aad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aabe:	4b07      	ldr	r3, [pc, #28]	; (800aadc <prvResetNextTaskUnblockTime+0x38>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	4a04      	ldr	r2, [pc, #16]	; (800aae0 <prvResetNextTaskUnblockTime+0x3c>)
 800aace:	6013      	str	r3, [r2, #0]
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	2000044c 	.word	0x2000044c
 800aae0:	200004b4 	.word	0x200004b4

0800aae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaea:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <xTaskGetSchedulerState+0x34>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	607b      	str	r3, [r7, #4]
 800aaf6:	e008      	b.n	800ab0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaf8:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <xTaskGetSchedulerState+0x38>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d102      	bne.n	800ab06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab00:	2302      	movs	r3, #2
 800ab02:	607b      	str	r3, [r7, #4]
 800ab04:	e001      	b.n	800ab0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab06:	2300      	movs	r3, #0
 800ab08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab0a:	687b      	ldr	r3, [r7, #4]
	}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	200004a0 	.word	0x200004a0
 800ab1c:	200004bc 	.word	0x200004bc

0800ab20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d069      	beq.n	800ac0a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	4b36      	ldr	r3, [pc, #216]	; (800ac14 <xTaskPriorityInherit+0xf4>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d259      	bcs.n	800abf8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	db06      	blt.n	800ab5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab4c:	4b31      	ldr	r3, [pc, #196]	; (800ac14 <xTaskPriorityInherit+0xf4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab52:	f1c3 0207 	rsb	r2, r3, #7
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	6959      	ldr	r1, [r3, #20]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4a2b      	ldr	r2, [pc, #172]	; (800ac18 <xTaskPriorityInherit+0xf8>)
 800ab6c:	4413      	add	r3, r2
 800ab6e:	4299      	cmp	r1, r3
 800ab70:	d13a      	bne.n	800abe8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	3304      	adds	r3, #4
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe fa9a 	bl	80090b0 <uxListRemove>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d115      	bne.n	800abae <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab86:	4924      	ldr	r1, [pc, #144]	; (800ac18 <xTaskPriorityInherit+0xf8>)
 800ab88:	4613      	mov	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	440b      	add	r3, r1
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <xTaskPriorityInherit+0x8e>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aba2:	43da      	mvns	r2, r3
 800aba4:	4b1d      	ldr	r3, [pc, #116]	; (800ac1c <xTaskPriorityInherit+0xfc>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4013      	ands	r3, r2
 800abaa:	4a1c      	ldr	r2, [pc, #112]	; (800ac1c <xTaskPriorityInherit+0xfc>)
 800abac:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abae:	4b19      	ldr	r3, [pc, #100]	; (800ac14 <xTaskPriorityInherit+0xf4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	2201      	movs	r2, #1
 800abbe:	409a      	lsls	r2, r3
 800abc0:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <xTaskPriorityInherit+0xfc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	4a15      	ldr	r2, [pc, #84]	; (800ac1c <xTaskPriorityInherit+0xfc>)
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abce:	4613      	mov	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4a10      	ldr	r2, [pc, #64]	; (800ac18 <xTaskPriorityInherit+0xf8>)
 800abd8:	441a      	add	r2, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	3304      	adds	r3, #4
 800abde:	4619      	mov	r1, r3
 800abe0:	4610      	mov	r0, r2
 800abe2:	f7fe fa08 	bl	8008ff6 <vListInsertEnd>
 800abe6:	e004      	b.n	800abf2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abe8:	4b0a      	ldr	r3, [pc, #40]	; (800ac14 <xTaskPriorityInherit+0xf4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abf2:	2301      	movs	r3, #1
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	e008      	b.n	800ac0a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <xTaskPriorityInherit+0xf4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d201      	bcs.n	800ac0a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac06:	2301      	movs	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
	}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000394 	.word	0x20000394
 800ac18:	20000398 	.word	0x20000398
 800ac1c:	2000049c 	.word	0x2000049c

0800ac20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d070      	beq.n	800ad18 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac36:	4b3b      	ldr	r3, [pc, #236]	; (800ad24 <xTaskPriorityDisinherit+0x104>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d00b      	beq.n	800ac58 <xTaskPriorityDisinherit+0x38>
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	b672      	cpsid	i
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	b662      	cpsie	i
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	e7fe      	b.n	800ac56 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10b      	bne.n	800ac78 <xTaskPriorityDisinherit+0x58>
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	b672      	cpsid	i
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	b662      	cpsie	i
 800ac74:	60bb      	str	r3, [r7, #8]
 800ac76:	e7fe      	b.n	800ac76 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac7c:	1e5a      	subs	r2, r3, #1
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d044      	beq.n	800ad18 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d140      	bne.n	800ad18 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fa08 	bl	80090b0 <uxListRemove>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d115      	bne.n	800acd2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acaa:	491f      	ldr	r1, [pc, #124]	; (800ad28 <xTaskPriorityDisinherit+0x108>)
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	440b      	add	r3, r1
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <xTaskPriorityDisinherit+0xb2>
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	2201      	movs	r2, #1
 800acc2:	fa02 f303 	lsl.w	r3, r2, r3
 800acc6:	43da      	mvns	r2, r3
 800acc8:	4b18      	ldr	r3, [pc, #96]	; (800ad2c <xTaskPriorityDisinherit+0x10c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4013      	ands	r3, r2
 800acce:	4a17      	ldr	r2, [pc, #92]	; (800ad2c <xTaskPriorityDisinherit+0x10c>)
 800acd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	f1c3 0207 	rsb	r2, r3, #7
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	2201      	movs	r2, #1
 800acec:	409a      	lsls	r2, r3
 800acee:	4b0f      	ldr	r3, [pc, #60]	; (800ad2c <xTaskPriorityDisinherit+0x10c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <xTaskPriorityDisinherit+0x10c>)
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4a08      	ldr	r2, [pc, #32]	; (800ad28 <xTaskPriorityDisinherit+0x108>)
 800ad06:	441a      	add	r2, r3
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4610      	mov	r0, r2
 800ad10:	f7fe f971 	bl	8008ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad18:	697b      	ldr	r3, [r7, #20]
	}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20000394 	.word	0x20000394
 800ad28:	20000398 	.word	0x20000398
 800ad2c:	2000049c 	.word	0x2000049c

0800ad30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 8085 	beq.w	800ae54 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10b      	bne.n	800ad6a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	b672      	cpsid	i
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	b662      	cpsie	i
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	e7fe      	b.n	800ad68 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d902      	bls.n	800ad7a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	61fb      	str	r3, [r7, #28]
 800ad78:	e002      	b.n	800ad80 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d064      	beq.n	800ae54 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d15f      	bne.n	800ae54 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad94:	4b31      	ldr	r3, [pc, #196]	; (800ae5c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	69ba      	ldr	r2, [r7, #24]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d10b      	bne.n	800adb6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	b672      	cpsid	i
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	b662      	cpsie	i
 800adb2:	60bb      	str	r3, [r7, #8]
 800adb4:	e7fe      	b.n	800adb4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	69fa      	ldr	r2, [r7, #28]
 800adc0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	db04      	blt.n	800add4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	f1c3 0207 	rsb	r2, r3, #7
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	6959      	ldr	r1, [r3, #20]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4613      	mov	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4a1f      	ldr	r2, [pc, #124]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ade4:	4413      	add	r3, r2
 800ade6:	4299      	cmp	r1, r3
 800ade8:	d134      	bne.n	800ae54 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	3304      	adds	r3, #4
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe f95e 	bl	80090b0 <uxListRemove>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d115      	bne.n	800ae26 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfe:	4918      	ldr	r1, [pc, #96]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae00:	4613      	mov	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	440b      	add	r3, r1
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	2201      	movs	r2, #1
 800ae16:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1a:	43da      	mvns	r2, r3
 800ae1c:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4013      	ands	r3, r2
 800ae22:	4a10      	ldr	r2, [pc, #64]	; (800ae64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	409a      	lsls	r2, r3
 800ae2e:	4b0d      	ldr	r3, [pc, #52]	; (800ae64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	4a0b      	ldr	r2, [pc, #44]	; (800ae64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4a06      	ldr	r2, [pc, #24]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae46:	441a      	add	r2, r3
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f7fe f8d1 	bl	8008ff6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae54:	bf00      	nop
 800ae56:	3720      	adds	r7, #32
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20000394 	.word	0x20000394
 800ae60:	20000398 	.word	0x20000398
 800ae64:	2000049c 	.word	0x2000049c

0800ae68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae7a:	3201      	adds	r2, #1
 800ae7c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae80:	681b      	ldr	r3, [r3, #0]
	}
 800ae82:	4618      	mov	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	20000394 	.word	0x20000394

0800ae90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae9a:	4b29      	ldr	r3, [pc, #164]	; (800af40 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aea0:	4b28      	ldr	r3, [pc, #160]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe f902 	bl	80090b0 <uxListRemove>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10b      	bne.n	800aeca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aeb2:	4b24      	ldr	r3, [pc, #144]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb8:	2201      	movs	r2, #1
 800aeba:	fa02 f303 	lsl.w	r3, r2, r3
 800aebe:	43da      	mvns	r2, r3
 800aec0:	4b21      	ldr	r3, [pc, #132]	; (800af48 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4013      	ands	r3, r2
 800aec6:	4a20      	ldr	r2, [pc, #128]	; (800af48 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aec8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d10a      	bne.n	800aee8 <prvAddCurrentTaskToDelayedList+0x58>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d007      	beq.n	800aee8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aed8:	4b1a      	ldr	r3, [pc, #104]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3304      	adds	r3, #4
 800aede:	4619      	mov	r1, r3
 800aee0:	481a      	ldr	r0, [pc, #104]	; (800af4c <prvAddCurrentTaskToDelayedList+0xbc>)
 800aee2:	f7fe f888 	bl	8008ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aee6:	e026      	b.n	800af36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4413      	add	r3, r2
 800aeee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aef0:	4b14      	ldr	r3, [pc, #80]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d209      	bcs.n	800af14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af00:	4b13      	ldr	r3, [pc, #76]	; (800af50 <prvAddCurrentTaskToDelayedList+0xc0>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	4b0f      	ldr	r3, [pc, #60]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3304      	adds	r3, #4
 800af0a:	4619      	mov	r1, r3
 800af0c:	4610      	mov	r0, r2
 800af0e:	f7fe f896 	bl	800903e <vListInsert>
}
 800af12:	e010      	b.n	800af36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af14:	4b0f      	ldr	r3, [pc, #60]	; (800af54 <prvAddCurrentTaskToDelayedList+0xc4>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3304      	adds	r3, #4
 800af1e:	4619      	mov	r1, r3
 800af20:	4610      	mov	r0, r2
 800af22:	f7fe f88c 	bl	800903e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d202      	bcs.n	800af36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800af30:	4a09      	ldr	r2, [pc, #36]	; (800af58 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6013      	str	r3, [r2, #0]
}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20000498 	.word	0x20000498
 800af44:	20000394 	.word	0x20000394
 800af48:	2000049c 	.word	0x2000049c
 800af4c:	20000480 	.word	0x20000480
 800af50:	20000450 	.word	0x20000450
 800af54:	2000044c 	.word	0x2000044c
 800af58:	200004b4 	.word	0x200004b4

0800af5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	3b04      	subs	r3, #4
 800af6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3b04      	subs	r3, #4
 800af7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f023 0201 	bic.w	r2, r3, #1
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3b04      	subs	r3, #4
 800af8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af8c:	4a0c      	ldr	r2, [pc, #48]	; (800afc0 <pxPortInitialiseStack+0x64>)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3b14      	subs	r3, #20
 800af96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3b04      	subs	r3, #4
 800afa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f06f 0202 	mvn.w	r2, #2
 800afaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3b20      	subs	r3, #32
 800afb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afb2:	68fb      	ldr	r3, [r7, #12]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	0800afc5 	.word	0x0800afc5

0800afc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afce:	4b13      	ldr	r3, [pc, #76]	; (800b01c <prvTaskExitError+0x58>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd6:	d00b      	beq.n	800aff0 <prvTaskExitError+0x2c>
 800afd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afdc:	b672      	cpsid	i
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	b662      	cpsie	i
 800afec:	60fb      	str	r3, [r7, #12]
 800afee:	e7fe      	b.n	800afee <prvTaskExitError+0x2a>
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	b672      	cpsid	i
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	b662      	cpsie	i
 800b004:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b006:	bf00      	nop
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0fc      	beq.n	800b008 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	20000038 	.word	0x20000038

0800b020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <pxCurrentTCBConst2>)
 800b022:	6819      	ldr	r1, [r3, #0]
 800b024:	6808      	ldr	r0, [r1, #0]
 800b026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02a:	f380 8809 	msr	PSP, r0
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f04f 0000 	mov.w	r0, #0
 800b036:	f380 8811 	msr	BASEPRI, r0
 800b03a:	4770      	bx	lr
 800b03c:	f3af 8000 	nop.w

0800b040 <pxCurrentTCBConst2>:
 800b040:	20000394 	.word	0x20000394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop

0800b048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b048:	4808      	ldr	r0, [pc, #32]	; (800b06c <prvPortStartFirstTask+0x24>)
 800b04a:	6800      	ldr	r0, [r0, #0]
 800b04c:	6800      	ldr	r0, [r0, #0]
 800b04e:	f380 8808 	msr	MSP, r0
 800b052:	f04f 0000 	mov.w	r0, #0
 800b056:	f380 8814 	msr	CONTROL, r0
 800b05a:	b662      	cpsie	i
 800b05c:	b661      	cpsie	f
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	df00      	svc	0
 800b068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b06a:	bf00      	nop
 800b06c:	e000ed08 	.word	0xe000ed08

0800b070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b076:	4b36      	ldr	r3, [pc, #216]	; (800b150 <xPortStartScheduler+0xe0>)
 800b078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	22ff      	movs	r2, #255	; 0xff
 800b086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	4b2e      	ldr	r3, [pc, #184]	; (800b154 <xPortStartScheduler+0xe4>)
 800b09c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b09e:	4b2e      	ldr	r3, [pc, #184]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0a0:	2207      	movs	r2, #7
 800b0a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0a4:	e009      	b.n	800b0ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b0a6:	4b2c      	ldr	r3, [pc, #176]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	4a2a      	ldr	r2, [pc, #168]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0b0:	78fb      	ldrb	r3, [r7, #3]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0ba:	78fb      	ldrb	r3, [r7, #3]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c2:	2b80      	cmp	r3, #128	; 0x80
 800b0c4:	d0ef      	beq.n	800b0a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0c6:	4b24      	ldr	r3, [pc, #144]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f1c3 0307 	rsb	r3, r3, #7
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d00b      	beq.n	800b0ea <xPortStartScheduler+0x7a>
 800b0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d6:	b672      	cpsid	i
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	b662      	cpsie	i
 800b0e6:	60bb      	str	r3, [r7, #8]
 800b0e8:	e7fe      	b.n	800b0e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0ea:	4b1b      	ldr	r3, [pc, #108]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	021b      	lsls	r3, r3, #8
 800b0f0:	4a19      	ldr	r2, [pc, #100]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0f4:	4b18      	ldr	r3, [pc, #96]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0fc:	4a16      	ldr	r2, [pc, #88]	; (800b158 <xPortStartScheduler+0xe8>)
 800b0fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	b2da      	uxtb	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b108:	4b14      	ldr	r3, [pc, #80]	; (800b15c <xPortStartScheduler+0xec>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a13      	ldr	r2, [pc, #76]	; (800b15c <xPortStartScheduler+0xec>)
 800b10e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b112:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b114:	4b11      	ldr	r3, [pc, #68]	; (800b15c <xPortStartScheduler+0xec>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a10      	ldr	r2, [pc, #64]	; (800b15c <xPortStartScheduler+0xec>)
 800b11a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b11e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b120:	f000 f8d4 	bl	800b2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b124:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <xPortStartScheduler+0xf0>)
 800b126:	2200      	movs	r2, #0
 800b128:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b12a:	f000 f8f3 	bl	800b314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b12e:	4b0d      	ldr	r3, [pc, #52]	; (800b164 <xPortStartScheduler+0xf4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a0c      	ldr	r2, [pc, #48]	; (800b164 <xPortStartScheduler+0xf4>)
 800b134:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b138:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b13a:	f7ff ff85 	bl	800b048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b13e:	f7ff fa69 	bl	800a614 <vTaskSwitchContext>
	prvTaskExitError();
 800b142:	f7ff ff3f 	bl	800afc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	e000e400 	.word	0xe000e400
 800b154:	200004c0 	.word	0x200004c0
 800b158:	200004c4 	.word	0x200004c4
 800b15c:	e000ed20 	.word	0xe000ed20
 800b160:	20000038 	.word	0x20000038
 800b164:	e000ef34 	.word	0xe000ef34

0800b168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	b672      	cpsid	i
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	b662      	cpsie	i
 800b182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b184:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <vPortEnterCritical+0x5c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3301      	adds	r3, #1
 800b18a:	4a0e      	ldr	r2, [pc, #56]	; (800b1c4 <vPortEnterCritical+0x5c>)
 800b18c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b18e:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <vPortEnterCritical+0x5c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b01      	cmp	r3, #1
 800b194:	d110      	bne.n	800b1b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <vPortEnterCritical+0x60>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00b      	beq.n	800b1b8 <vPortEnterCritical+0x50>
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	b672      	cpsid	i
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	b662      	cpsie	i
 800b1b4:	603b      	str	r3, [r7, #0]
 800b1b6:	e7fe      	b.n	800b1b6 <vPortEnterCritical+0x4e>
	}
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	20000038 	.word	0x20000038
 800b1c8:	e000ed04 	.word	0xe000ed04

0800b1cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1d2:	4b12      	ldr	r3, [pc, #72]	; (800b21c <vPortExitCritical+0x50>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10b      	bne.n	800b1f2 <vPortExitCritical+0x26>
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	b672      	cpsid	i
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	b662      	cpsie	i
 800b1ee:	607b      	str	r3, [r7, #4]
 800b1f0:	e7fe      	b.n	800b1f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800b1f2:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <vPortExitCritical+0x50>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	4a08      	ldr	r2, [pc, #32]	; (800b21c <vPortExitCritical+0x50>)
 800b1fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1fc:	4b07      	ldr	r3, [pc, #28]	; (800b21c <vPortExitCritical+0x50>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d104      	bne.n	800b20e <vPortExitCritical+0x42>
 800b204:	2300      	movs	r3, #0
 800b206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	20000038 	.word	0x20000038

0800b220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b220:	f3ef 8009 	mrs	r0, PSP
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	4b15      	ldr	r3, [pc, #84]	; (800b280 <pxCurrentTCBConst>)
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	f01e 0f10 	tst.w	lr, #16
 800b230:	bf08      	it	eq
 800b232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23a:	6010      	str	r0, [r2, #0]
 800b23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b240:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b244:	b672      	cpsid	i
 800b246:	f380 8811 	msr	BASEPRI, r0
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	b662      	cpsie	i
 800b254:	f7ff f9de 	bl	800a614 <vTaskSwitchContext>
 800b258:	f04f 0000 	mov.w	r0, #0
 800b25c:	f380 8811 	msr	BASEPRI, r0
 800b260:	bc09      	pop	{r0, r3}
 800b262:	6819      	ldr	r1, [r3, #0]
 800b264:	6808      	ldr	r0, [r1, #0]
 800b266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26a:	f01e 0f10 	tst.w	lr, #16
 800b26e:	bf08      	it	eq
 800b270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b274:	f380 8809 	msr	PSP, r0
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop

0800b280 <pxCurrentTCBConst>:
 800b280:	20000394 	.word	0x20000394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b284:	bf00      	nop
 800b286:	bf00      	nop

0800b288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	b672      	cpsid	i
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	b662      	cpsie	i
 800b2a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2a4:	f7ff f8fc 	bl	800a4a0 <xTaskIncrementTick>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2ae:	4b06      	ldr	r3, [pc, #24]	; (800b2c8 <SysTick_Handler+0x40>)
 800b2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	e000ed04 	.word	0xe000ed04

0800b2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2d0:	4b0b      	ldr	r3, [pc, #44]	; (800b300 <vPortSetupTimerInterrupt+0x34>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	; (800b304 <vPortSetupTimerInterrupt+0x38>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2dc:	4b0a      	ldr	r3, [pc, #40]	; (800b308 <vPortSetupTimerInterrupt+0x3c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a0a      	ldr	r2, [pc, #40]	; (800b30c <vPortSetupTimerInterrupt+0x40>)
 800b2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e6:	099b      	lsrs	r3, r3, #6
 800b2e8:	4a09      	ldr	r2, [pc, #36]	; (800b310 <vPortSetupTimerInterrupt+0x44>)
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ee:	4b04      	ldr	r3, [pc, #16]	; (800b300 <vPortSetupTimerInterrupt+0x34>)
 800b2f0:	2207      	movs	r2, #7
 800b2f2:	601a      	str	r2, [r3, #0]
}
 800b2f4:	bf00      	nop
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	e000e010 	.word	0xe000e010
 800b304:	e000e018 	.word	0xe000e018
 800b308:	2000002c 	.word	0x2000002c
 800b30c:	10624dd3 	.word	0x10624dd3
 800b310:	e000e014 	.word	0xe000e014

0800b314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b324 <vPortEnableVFP+0x10>
 800b318:	6801      	ldr	r1, [r0, #0]
 800b31a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b31e:	6001      	str	r1, [r0, #0]
 800b320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b322:	bf00      	nop
 800b324:	e000ed88 	.word	0xe000ed88

0800b328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b32e:	f3ef 8305 	mrs	r3, IPSR
 800b332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b0f      	cmp	r3, #15
 800b338:	d915      	bls.n	800b366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b33a:	4a18      	ldr	r2, [pc, #96]	; (800b39c <vPortValidateInterruptPriority+0x74>)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4413      	add	r3, r2
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b344:	4b16      	ldr	r3, [pc, #88]	; (800b3a0 <vPortValidateInterruptPriority+0x78>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	7afa      	ldrb	r2, [r7, #11]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d20b      	bcs.n	800b366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	b672      	cpsid	i
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	b662      	cpsie	i
 800b362:	607b      	str	r3, [r7, #4]
 800b364:	e7fe      	b.n	800b364 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b366:	4b0f      	ldr	r3, [pc, #60]	; (800b3a4 <vPortValidateInterruptPriority+0x7c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b36e:	4b0e      	ldr	r3, [pc, #56]	; (800b3a8 <vPortValidateInterruptPriority+0x80>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d90b      	bls.n	800b38e <vPortValidateInterruptPriority+0x66>
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	b672      	cpsid	i
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	b662      	cpsie	i
 800b38a:	603b      	str	r3, [r7, #0]
 800b38c:	e7fe      	b.n	800b38c <vPortValidateInterruptPriority+0x64>
	}
 800b38e:	bf00      	nop
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	e000e3f0 	.word	0xe000e3f0
 800b3a0:	200004c0 	.word	0x200004c0
 800b3a4:	e000ed0c 	.word	0xe000ed0c
 800b3a8:	200004c4 	.word	0x200004c4

0800b3ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b08a      	sub	sp, #40	; 0x28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3b8:	f7fe ffc6 	bl	800a348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3bc:	4b5c      	ldr	r3, [pc, #368]	; (800b530 <pvPortMalloc+0x184>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3c4:	f000 f91a 	bl	800b5fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3c8:	4b5a      	ldr	r3, [pc, #360]	; (800b534 <pvPortMalloc+0x188>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f040 8090 	bne.w	800b4f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01e      	beq.n	800b41a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b3dc:	2208      	movs	r2, #8
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d015      	beq.n	800b41a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f023 0307 	bic.w	r3, r3, #7
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00b      	beq.n	800b41a <pvPortMalloc+0x6e>
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	b672      	cpsid	i
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	b662      	cpsie	i
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e7fe      	b.n	800b418 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d06a      	beq.n	800b4f6 <pvPortMalloc+0x14a>
 800b420:	4b45      	ldr	r3, [pc, #276]	; (800b538 <pvPortMalloc+0x18c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d865      	bhi.n	800b4f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b42a:	4b44      	ldr	r3, [pc, #272]	; (800b53c <pvPortMalloc+0x190>)
 800b42c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b42e:	4b43      	ldr	r3, [pc, #268]	; (800b53c <pvPortMalloc+0x190>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b434:	e004      	b.n	800b440 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d903      	bls.n	800b452 <pvPortMalloc+0xa6>
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1f1      	bne.n	800b436 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b452:	4b37      	ldr	r3, [pc, #220]	; (800b530 <pvPortMalloc+0x184>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b458:	429a      	cmp	r2, r3
 800b45a:	d04c      	beq.n	800b4f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2208      	movs	r2, #8
 800b462:	4413      	add	r3, r2
 800b464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	1ad2      	subs	r2, r2, r3
 800b476:	2308      	movs	r3, #8
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d920      	bls.n	800b4c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b47e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4413      	add	r3, r2
 800b484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	f003 0307 	and.w	r3, r3, #7
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00b      	beq.n	800b4a8 <pvPortMalloc+0xfc>
 800b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b494:	b672      	cpsid	i
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	b662      	cpsie	i
 800b4a4:	613b      	str	r3, [r7, #16]
 800b4a6:	e7fe      	b.n	800b4a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	1ad2      	subs	r2, r2, r3
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4ba:	69b8      	ldr	r0, [r7, #24]
 800b4bc:	f000 f900 	bl	800b6c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4c0:	4b1d      	ldr	r3, [pc, #116]	; (800b538 <pvPortMalloc+0x18c>)
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	4a1b      	ldr	r2, [pc, #108]	; (800b538 <pvPortMalloc+0x18c>)
 800b4cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ce:	4b1a      	ldr	r3, [pc, #104]	; (800b538 <pvPortMalloc+0x18c>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b1b      	ldr	r3, [pc, #108]	; (800b540 <pvPortMalloc+0x194>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d203      	bcs.n	800b4e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4da:	4b17      	ldr	r3, [pc, #92]	; (800b538 <pvPortMalloc+0x18c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a18      	ldr	r2, [pc, #96]	; (800b540 <pvPortMalloc+0x194>)
 800b4e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	4b13      	ldr	r3, [pc, #76]	; (800b534 <pvPortMalloc+0x188>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	431a      	orrs	r2, r3
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4f6:	f7fe ff35 	bl	800a364 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b500:	f7f5 fb5c 	bl	8000bbc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	f003 0307 	and.w	r3, r3, #7
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00b      	beq.n	800b526 <pvPortMalloc+0x17a>
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	b672      	cpsid	i
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	b662      	cpsie	i
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	e7fe      	b.n	800b524 <pvPortMalloc+0x178>
	return pvReturn;
 800b526:	69fb      	ldr	r3, [r7, #28]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3728      	adds	r7, #40	; 0x28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	200084d0 	.word	0x200084d0
 800b534:	200084dc 	.word	0x200084dc
 800b538:	200084d4 	.word	0x200084d4
 800b53c:	200084c8 	.word	0x200084c8
 800b540:	200084d8 	.word	0x200084d8

0800b544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d04a      	beq.n	800b5ec <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b556:	2308      	movs	r3, #8
 800b558:	425b      	negs	r3, r3
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	4413      	add	r3, r2
 800b55e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	4b22      	ldr	r3, [pc, #136]	; (800b5f4 <vPortFree+0xb0>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4013      	ands	r3, r2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10b      	bne.n	800b58a <vPortFree+0x46>
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	b672      	cpsid	i
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	b662      	cpsie	i
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	e7fe      	b.n	800b588 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00b      	beq.n	800b5aa <vPortFree+0x66>
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	b672      	cpsid	i
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	b662      	cpsie	i
 800b5a6:	60bb      	str	r3, [r7, #8]
 800b5a8:	e7fe      	b.n	800b5a8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	4b11      	ldr	r3, [pc, #68]	; (800b5f4 <vPortFree+0xb0>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d019      	beq.n	800b5ec <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d115      	bne.n	800b5ec <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	4b0b      	ldr	r3, [pc, #44]	; (800b5f4 <vPortFree+0xb0>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	401a      	ands	r2, r3
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5d0:	f7fe feba 	bl	800a348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <vPortFree+0xb4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4413      	add	r3, r2
 800b5de:	4a06      	ldr	r2, [pc, #24]	; (800b5f8 <vPortFree+0xb4>)
 800b5e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5e2:	6938      	ldr	r0, [r7, #16]
 800b5e4:	f000 f86c 	bl	800b6c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b5e8:	f7fe febc 	bl	800a364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5ec:	bf00      	nop
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	200084dc 	.word	0x200084dc
 800b5f8:	200084d4 	.word	0x200084d4

0800b5fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b606:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b608:	4b27      	ldr	r3, [pc, #156]	; (800b6a8 <prvHeapInit+0xac>)
 800b60a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f003 0307 	and.w	r3, r3, #7
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00c      	beq.n	800b630 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	3307      	adds	r3, #7
 800b61a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f023 0307 	bic.w	r3, r3, #7
 800b622:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	4a1f      	ldr	r2, [pc, #124]	; (800b6a8 <prvHeapInit+0xac>)
 800b62c:	4413      	add	r3, r2
 800b62e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b634:	4a1d      	ldr	r2, [pc, #116]	; (800b6ac <prvHeapInit+0xb0>)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b63a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ac <prvHeapInit+0xb0>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	4413      	add	r3, r2
 800b646:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b648:	2208      	movs	r2, #8
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	1a9b      	subs	r3, r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f023 0307 	bic.w	r3, r3, #7
 800b656:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4a15      	ldr	r2, [pc, #84]	; (800b6b0 <prvHeapInit+0xb4>)
 800b65c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b65e:	4b14      	ldr	r3, [pc, #80]	; (800b6b0 <prvHeapInit+0xb4>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b666:	4b12      	ldr	r3, [pc, #72]	; (800b6b0 <prvHeapInit+0xb4>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2200      	movs	r2, #0
 800b66c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	1ad2      	subs	r2, r2, r3
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b67c:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <prvHeapInit+0xb4>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4a0a      	ldr	r2, [pc, #40]	; (800b6b4 <prvHeapInit+0xb8>)
 800b68a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	4a09      	ldr	r2, [pc, #36]	; (800b6b8 <prvHeapInit+0xbc>)
 800b692:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b694:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <prvHeapInit+0xc0>)
 800b696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b69a:	601a      	str	r2, [r3, #0]
}
 800b69c:	bf00      	nop
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	200004c8 	.word	0x200004c8
 800b6ac:	200084c8 	.word	0x200084c8
 800b6b0:	200084d0 	.word	0x200084d0
 800b6b4:	200084d8 	.word	0x200084d8
 800b6b8:	200084d4 	.word	0x200084d4
 800b6bc:	200084dc 	.word	0x200084dc

0800b6c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6c8:	4b28      	ldr	r3, [pc, #160]	; (800b76c <prvInsertBlockIntoFreeList+0xac>)
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	e002      	b.n	800b6d4 <prvInsertBlockIntoFreeList+0x14>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d8f7      	bhi.n	800b6ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d108      	bne.n	800b702 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	441a      	add	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	441a      	add	r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	429a      	cmp	r2, r3
 800b714:	d118      	bne.n	800b748 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	4b15      	ldr	r3, [pc, #84]	; (800b770 <prvInsertBlockIntoFreeList+0xb0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d00d      	beq.n	800b73e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	441a      	add	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	e008      	b.n	800b750 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b73e:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <prvInsertBlockIntoFreeList+0xb0>)
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	e003      	b.n	800b750 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	429a      	cmp	r2, r3
 800b756:	d002      	beq.n	800b75e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b75e:	bf00      	nop
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	200084c8 	.word	0x200084c8
 800b770:	200084d0 	.word	0x200084d0

0800b774 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08c      	sub	sp, #48	; 0x30
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a51      	ldr	r2, [pc, #324]	; (800b8c4 <I2Cx_MspInit+0x150>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d14d      	bne.n	800b820 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b784:	4b50      	ldr	r3, [pc, #320]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b788:	4a4f      	ldr	r2, [pc, #316]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78e:	6313      	str	r3, [r2, #48]	; 0x30
 800b790:	4b4d      	ldr	r3, [pc, #308]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b798:	61bb      	str	r3, [r7, #24]
 800b79a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800b79c:	2380      	movs	r3, #128	; 0x80
 800b79e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b7a0:	2312      	movs	r3, #18
 800b7a2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800b7ac:	2304      	movs	r3, #4
 800b7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7b0:	f107 031c 	add.w	r3, r7, #28
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4845      	ldr	r0, [pc, #276]	; (800b8cc <I2Cx_MspInit+0x158>)
 800b7b8:	f7f8 faa4 	bl	8003d04 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800b7bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7c2:	f107 031c 	add.w	r3, r7, #28
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4840      	ldr	r0, [pc, #256]	; (800b8cc <I2Cx_MspInit+0x158>)
 800b7ca:	f7f8 fa9b 	bl	8003d04 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800b7ce:	4b3e      	ldr	r3, [pc, #248]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d2:	4a3d      	ldr	r2, [pc, #244]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b7d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b7da:	4b3b      	ldr	r3, [pc, #236]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800b7e6:	4b38      	ldr	r3, [pc, #224]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	4a37      	ldr	r2, [pc, #220]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b7ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7f0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800b7f2:	4b35      	ldr	r3, [pc, #212]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	4a34      	ldr	r2, [pc, #208]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b7f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b7fc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800b7fe:	2200      	movs	r2, #0
 800b800:	210f      	movs	r1, #15
 800b802:	2048      	movs	r0, #72	; 0x48
 800b804:	f7f7 fcc8 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800b808:	2048      	movs	r0, #72	; 0x48
 800b80a:	f7f7 fce1 	bl	80031d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800b80e:	2200      	movs	r2, #0
 800b810:	210f      	movs	r1, #15
 800b812:	2049      	movs	r0, #73	; 0x49
 800b814:	f7f7 fcc0 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800b818:	2049      	movs	r0, #73	; 0x49
 800b81a:	f7f7 fcd9 	bl	80031d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800b81e:	e04d      	b.n	800b8bc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b820:	4b29      	ldr	r3, [pc, #164]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b824:	4a28      	ldr	r2, [pc, #160]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b826:	f043 0302 	orr.w	r3, r3, #2
 800b82a:	6313      	str	r3, [r2, #48]	; 0x30
 800b82c:	4b26      	ldr	r3, [pc, #152]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800b838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b83c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b83e:	2312      	movs	r3, #18
 800b840:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b842:	2300      	movs	r3, #0
 800b844:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b846:	2302      	movs	r3, #2
 800b848:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800b84a:	2304      	movs	r3, #4
 800b84c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b84e:	f107 031c 	add.w	r3, r7, #28
 800b852:	4619      	mov	r1, r3
 800b854:	481e      	ldr	r0, [pc, #120]	; (800b8d0 <I2Cx_MspInit+0x15c>)
 800b856:	f7f8 fa55 	bl	8003d04 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800b85a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b85e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b860:	f107 031c 	add.w	r3, r7, #28
 800b864:	4619      	mov	r1, r3
 800b866:	481a      	ldr	r0, [pc, #104]	; (800b8d0 <I2Cx_MspInit+0x15c>)
 800b868:	f7f8 fa4c 	bl	8003d04 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800b86c:	4b16      	ldr	r3, [pc, #88]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b870:	4a15      	ldr	r2, [pc, #84]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b876:	6413      	str	r3, [r2, #64]	; 0x40
 800b878:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b880:	60fb      	str	r3, [r7, #12]
 800b882:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800b884:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b886:	6a1b      	ldr	r3, [r3, #32]
 800b888:	4a0f      	ldr	r2, [pc, #60]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b88a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b88e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800b890:	4b0d      	ldr	r3, [pc, #52]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b892:	6a1b      	ldr	r3, [r3, #32]
 800b894:	4a0c      	ldr	r2, [pc, #48]	; (800b8c8 <I2Cx_MspInit+0x154>)
 800b896:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b89a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800b89c:	2200      	movs	r2, #0
 800b89e:	210f      	movs	r1, #15
 800b8a0:	201f      	movs	r0, #31
 800b8a2:	f7f7 fc79 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800b8a6:	201f      	movs	r0, #31
 800b8a8:	f7f7 fc92 	bl	80031d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	210f      	movs	r1, #15
 800b8b0:	2020      	movs	r0, #32
 800b8b2:	f7f7 fc71 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800b8b6:	2020      	movs	r0, #32
 800b8b8:	f7f7 fc8a 	bl	80031d0 <HAL_NVIC_EnableIRQ>
}
 800b8bc:	bf00      	nop
 800b8be:	3730      	adds	r7, #48	; 0x30
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	200084e0 	.word	0x200084e0
 800b8c8:	40023800 	.word	0x40023800
 800b8cc:	40021c00 	.word	0x40021c00
 800b8d0:	40020400 	.word	0x40020400

0800b8d4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7f8 ffcd 	bl	800487c <HAL_I2C_GetState>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d125      	bne.n	800b934 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a14      	ldr	r2, [pc, #80]	; (800b93c <I2Cx_Init+0x68>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d103      	bne.n	800b8f8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a13      	ldr	r2, [pc, #76]	; (800b940 <I2Cx_Init+0x6c>)
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	e002      	b.n	800b8fe <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a12      	ldr	r2, [pc, #72]	; (800b944 <I2Cx_Init+0x70>)
 800b8fc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a11      	ldr	r2, [pc, #68]	; (800b948 <I2Cx_Init+0x74>)
 800b902:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff ff23 	bl	800b774 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7f8 fcb6 	bl	80042a0 <HAL_I2C_Init>
  }
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	200084e0 	.word	0x200084e0
 800b940:	40005c00 	.word	0x40005c00
 800b944:	40005400 	.word	0x40005400
 800b948:	40912732 	.word	0x40912732

0800b94c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af04      	add	r7, sp, #16
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	461a      	mov	r2, r3
 800b95a:	4603      	mov	r3, r0
 800b95c:	72fb      	strb	r3, [r7, #11]
 800b95e:	460b      	mov	r3, r1
 800b960:	813b      	strh	r3, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b96a:	7afb      	ldrb	r3, [r7, #11]
 800b96c:	b299      	uxth	r1, r3
 800b96e:	88f8      	ldrh	r0, [r7, #6]
 800b970:	893a      	ldrh	r2, [r7, #8]
 800b972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b976:	9302      	str	r3, [sp, #8]
 800b978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	4603      	mov	r3, r0
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7f8 fe60 	bl	8004648 <HAL_I2C_Mem_Read>
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d004      	beq.n	800b99c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800b992:	7afb      	ldrb	r3, [r7, #11]
 800b994:	4619      	mov	r1, r3
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f832 	bl	800ba00 <I2Cx_Error>
  }
  return status;    
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b08a      	sub	sp, #40	; 0x28
 800b9aa:	af04      	add	r7, sp, #16
 800b9ac:	60f8      	str	r0, [r7, #12]
 800b9ae:	4608      	mov	r0, r1
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	72fb      	strb	r3, [r7, #11]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	813b      	strh	r3, [r7, #8]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	b299      	uxth	r1, r3
 800b9c8:	88f8      	ldrh	r0, [r7, #6]
 800b9ca:	893a      	ldrh	r2, [r7, #8]
 800b9cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9d0:	9302      	str	r3, [sp, #8]
 800b9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	4603      	mov	r3, r0
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f7f8 fd1f 	bl	8004420 <HAL_I2C_Mem_Write>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d004      	beq.n	800b9f6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800b9ec:	7afb      	ldrb	r3, [r7, #11]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f805 	bl	800ba00 <I2Cx_Error>
  }
  return status;
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7f8 fcd7 	bl	80043c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff ff5e 	bl	800b8d4 <I2Cx_Init>
}
 800ba18:	bf00      	nop
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ba24:	4802      	ldr	r0, [pc, #8]	; (800ba30 <TS_IO_Init+0x10>)
 800ba26:	f7ff ff55 	bl	800b8d4 <I2Cx_Init>
}
 800ba2a:	bf00      	nop
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	200084e0 	.word	0x200084e0

0800ba34 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af02      	add	r7, sp, #8
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	71fb      	strb	r3, [r7, #7]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	71bb      	strb	r3, [r7, #6]
 800ba42:	4613      	mov	r3, r2
 800ba44:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800ba46:	79bb      	ldrb	r3, [r7, #6]
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	79f9      	ldrb	r1, [r7, #7]
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	9301      	str	r3, [sp, #4]
 800ba50:	1d7b      	adds	r3, r7, #5
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	2301      	movs	r3, #1
 800ba56:	4803      	ldr	r0, [pc, #12]	; (800ba64 <TS_IO_Write+0x30>)
 800ba58:	f7ff ffa5 	bl	800b9a6 <I2Cx_WriteMultiple>
}
 800ba5c:	bf00      	nop
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	200084e0 	.word	0x200084e0

0800ba68 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af02      	add	r7, sp, #8
 800ba6e:	4603      	mov	r3, r0
 800ba70:	460a      	mov	r2, r1
 800ba72:	71fb      	strb	r3, [r7, #7]
 800ba74:	4613      	mov	r3, r2
 800ba76:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ba7c:	79bb      	ldrb	r3, [r7, #6]
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	79f9      	ldrb	r1, [r7, #7]
 800ba82:	2301      	movs	r3, #1
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	f107 030f 	add.w	r3, r7, #15
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	4804      	ldr	r0, [pc, #16]	; (800baa0 <TS_IO_Read+0x38>)
 800ba90:	f7ff ff5c 	bl	800b94c <I2Cx_ReadMultiple>

  return read_value;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	200084e0 	.word	0x200084e0

0800baa4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7f6 ffef 	bl	8002a90 <HAL_Delay>
}
 800bab2:	bf00      	nop
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800babe:	f009 fa45 	bl	8014f4c <touchgfx_init>
}
 800bac2:	bf00      	nop
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800baca:	f009 fa69 	bl	8014fa0 <touchgfx_taskEntry>
}
 800bace:	bf00      	nop
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
    {
 800badc:	4a04      	ldr	r2, [pc, #16]	; (800baf0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	601a      	str	r2, [r3, #0]
    }
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	080272b0 	.word	0x080272b0

0800baf4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
    }
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff ffe9 	bl	800bad4 <_ZN8touchgfx12FontProviderD1Ev>
 800bb02:	2104      	movs	r1, #4
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f019 fdcf 	bl	80256a8 <_ZdlPvj>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800bb20:	887b      	ldrh	r3, [r7, #2]
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d825      	bhi.n	800bb72 <_ZN23ApplicationFontProvider7getFontEt+0x5e>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb41 	.word	0x0800bb41
 800bb30:	0800bb4b 	.word	0x0800bb4b
 800bb34:	0800bb55 	.word	0x0800bb55
 800bb38:	0800bb5f 	.word	0x0800bb5f
 800bb3c:	0800bb69 	.word	0x0800bb69
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800bb40:	f006 fed4 	bl	80128ec <_ZN17TypedTextDatabase8getFontsEv>
 800bb44:	4603      	mov	r3, r0
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	e014      	b.n	800bb74 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800bb4a:	f006 fecf 	bl	80128ec <_ZN17TypedTextDatabase8getFontsEv>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	e00f      	b.n	800bb74 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::SMALL:
        // verdana_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bb54:	f006 feca 	bl	80128ec <_ZN17TypedTextDatabase8getFontsEv>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	e00a      	b.n	800bb74 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_00:
        // verdana_27_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800bb5e:	f006 fec5 	bl	80128ec <_ZN17TypedTextDatabase8getFontsEv>
 800bb62:	4603      	mov	r3, r0
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	e005      	b.n	800bb74 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_01:
        // verdana_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800bb68:	f006 fec0 	bl	80128ec <_ZN17TypedTextDatabase8getFontsEv>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	e000      	b.n	800bb74 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    default:
        return 0;
 800bb72:	2300      	movs	r3, #0
    }
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_27_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdana_24_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	4a05      	ldr	r2, [pc, #20]	; (800bb9c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7ff ffa1 	bl	800bad4 <_ZN8touchgfx12FontProviderD1Ev>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4618      	mov	r0, r3
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	0802729c 	.word	0x0802729c

0800bba0 <_ZN23ApplicationFontProviderD0Ev>:
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff ffe7 	bl	800bb7c <_ZN23ApplicationFontProviderD1Ev>
 800bbae:	2104      	movs	r1, #4
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f019 fd79 	bl	80256a8 <_ZdlPvj>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
    {
 800bbc8:	4a04      	ldr	r2, [pc, #16]	; (800bbdc <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	601a      	str	r2, [r3, #0]
    }
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	08028448 	.word	0x08028448

0800bbe0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
    }
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff ffe9 	bl	800bbc0 <_ZN8touchgfx4FontD1Ev>
 800bbee:	2110      	movs	r1, #16
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f019 fd59 	bl	80256a8 <_ZdlPvj>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800bc0c:	887b      	ldrh	r3, [r7, #2]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	e010      	b.n	800bc38 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3308      	adds	r3, #8
 800bc24:	681c      	ldr	r4, [r3, #0]
 800bc26:	f107 030f 	add.w	r3, r7, #15
 800bc2a:	f107 0210 	add.w	r2, r7, #16
 800bc2e:	8879      	ldrh	r1, [r7, #2]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	47a0      	blx	r4
 800bc34:	6178      	str	r0, [r7, #20]
        return glyph;
 800bc36:	697b      	ldr	r3, [r7, #20]
    }
 800bc38:	4618      	mov	r0, r3
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd90      	pop	{r4, r7, pc}

0800bc40 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	895b      	ldrh	r3, [r3, #10]
    }
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	899b      	ldrh	r3, [r3, #12]
    }
 800bc64:	4618      	mov	r0, r3
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	889b      	ldrh	r3, [r3, #4]
    }
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	889a      	ldrh	r2, [r3, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	799b      	ldrb	r3, [r3, #6]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	4413      	add	r3, r2
 800bc9c:	b29b      	uxth	r3, r3
    }
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800bcaa:	b480      	push	{r7}
 800bcac:	b083      	sub	sp, #12
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	79db      	ldrb	r3, [r3, #7]
 800bcb6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800bcba:	b2db      	uxtb	r3, r3
    }
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	79db      	ldrb	r3, [r3, #7]
 800bcd4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bcd8:	b2db      	uxtb	r3, r3
    }
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
	...

0800bce8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	4a05      	ldr	r2, [pc, #20]	; (800bd08 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff ff61 	bl	800bbc0 <_ZN8touchgfx4FontD1Ev>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	0802a404 	.word	0x0802a404

0800bd0c <_ZN8touchgfx9ConstFontD0Ev>:
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff ffe7 	bl	800bce8 <_ZN8touchgfx9ConstFontD1Ev>
 800bd1a:	2118      	movs	r1, #24
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f019 fcc3 	bl	80256a8 <_ZdlPvj>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	4a05      	ldr	r2, [pc, #20]	; (800bd4c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff ffd3 	bl	800bce8 <_ZN8touchgfx9ConstFontD1Ev>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	080272d4 	.word	0x080272d4

0800bd50 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff ffe7 	bl	800bd2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bd5e:	2124      	movs	r1, #36	; 0x24
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f019 fca1 	bl	80256a8 <_ZdlPvj>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
    {
 800bd78:	4a04      	ldr	r2, [pc, #16]	; (800bd8c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	601a      	str	r2, [r3, #0]
    }
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4618      	mov	r0, r3
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	080272c4 	.word	0x080272c4

0800bd90 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
    }
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7ff ffe9 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
 800bd9e:	2108      	movs	r1, #8
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f019 fc81 	bl	80256a8 <_ZdlPvj>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
    }
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08c      	sub	sp, #48	; 0x30
 800bdcc:	af08      	add	r7, sp, #32
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	80fb      	strh	r3, [r7, #6]
 800bdda:	4613      	mov	r3, r2
 800bddc:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	88b9      	ldrh	r1, [r7, #4]
 800bde2:	88fa      	ldrh	r2, [r7, #6]
 800bde4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bde6:	9306      	str	r3, [sp, #24]
 800bde8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdf6:	9303      	str	r3, [sp, #12]
 800bdf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdfc:	9302      	str	r3, [sp, #8]
 800bdfe:	7f3b      	ldrb	r3, [r7, #28]
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	7e3b      	ldrb	r3, [r7, #24]
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	460b      	mov	r3, r1
 800be08:	68b9      	ldr	r1, [r7, #8]
 800be0a:	f00d ffd7 	bl	8019dbc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800be0e:	4a08      	ldr	r2, [pc, #32]	; (800be30 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	601a      	str	r2, [r3, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be18:	619a      	str	r2, [r3, #24]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be1e:	61da      	str	r2, [r3, #28]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be24:	621a      	str	r2, [r3, #32]
{
}
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	4618      	mov	r0, r3
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	080272d4 	.word	0x080272d4

0800be34 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	889b      	ldrh	r3, [r3, #4]
 800be48:	0adb      	lsrs	r3, r3, #11
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	4413      	add	r3, r2
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4413      	add	r3, r2
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800be66:	b480      	push	{r7}
 800be68:	b089      	sub	sp, #36	; 0x24
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	460b      	mov	r3, r1
 800be70:	607a      	str	r2, [r7, #4]
 800be72:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	7b1b      	ldrb	r3, [r3, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800be82:	2300      	movs	r3, #0
 800be84:	e030      	b.n	800bee8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	69da      	ldr	r2, [r3, #28]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	7b5b      	ldrb	r3, [r3, #13]
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	b21b      	sxth	r3, r3
 800be96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be9a:	b219      	sxth	r1, r3
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	7adb      	ldrb	r3, [r3, #11]
 800bea0:	b21b      	sxth	r3, r3
 800bea2:	430b      	orrs	r3, r1
 800bea4:	b21b      	sxth	r3, r3
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	7b1b      	ldrb	r3, [r3, #12]
 800beb2:	837b      	strh	r3, [r7, #26]
 800beb4:	8b7b      	ldrh	r3, [r7, #26]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d015      	beq.n	800bee6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	897a      	ldrh	r2, [r7, #10]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d103      	bne.n	800becc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800beca:	e00d      	b.n	800bee8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	897a      	ldrh	r2, [r7, #10]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d306      	bcc.n	800bee4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800bed6:	8b7b      	ldrh	r3, [r7, #26]
 800bed8:	3b01      	subs	r3, #1
 800beda:	837b      	strh	r3, [r7, #26]
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	3304      	adds	r3, #4
 800bee0:	61fb      	str	r3, [r7, #28]
 800bee2:	e7e7      	b.n	800beb4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800bee4:	bf00      	nop
        }
    }
    return 0;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3724      	adds	r7, #36	; 0x24
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_18_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800bef4:	b580      	push	{r7, lr}
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	4801      	ldr	r0, [pc, #4]	; (800bf00 <__tcf_0+0xc>)
 800befa:	f7ff ff17 	bl	800bd2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	2000852c 	.word	0x2000852c

0800bf04 <_Z23getFont_verdana_18_4bppv>:
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08a      	sub	sp, #40	; 0x28
 800bf08:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800bf0a:	4b15      	ldr	r3, [pc, #84]	; (800bf60 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d11f      	bne.n	800bf56 <_Z23getFont_verdana_18_4bppv+0x52>
 800bf16:	2300      	movs	r3, #0
 800bf18:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	9308      	str	r3, [sp, #32]
 800bf1e:	233f      	movs	r3, #63	; 0x3f
 800bf20:	9307      	str	r3, [sp, #28]
 800bf22:	4b10      	ldr	r3, [pc, #64]	; (800bf64 <_Z23getFont_verdana_18_4bppv+0x60>)
 800bf24:	9306      	str	r3, [sp, #24]
 800bf26:	4b10      	ldr	r3, [pc, #64]	; (800bf68 <_Z23getFont_verdana_18_4bppv+0x64>)
 800bf28:	9305      	str	r3, [sp, #20]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9304      	str	r3, [sp, #16]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9303      	str	r3, [sp, #12]
 800bf32:	2301      	movs	r3, #1
 800bf34:	9302      	str	r3, [sp, #8]
 800bf36:	2304      	movs	r3, #4
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	2312      	movs	r3, #18
 800bf40:	2206      	movs	r2, #6
 800bf42:	490a      	ldr	r1, [pc, #40]	; (800bf6c <_Z23getFont_verdana_18_4bppv+0x68>)
 800bf44:	480a      	ldr	r0, [pc, #40]	; (800bf70 <_Z23getFont_verdana_18_4bppv+0x6c>)
 800bf46:	f7ff ff3f 	bl	800bdc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bf4a:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	4808      	ldr	r0, [pc, #32]	; (800bf74 <_Z23getFont_verdana_18_4bppv+0x70>)
 800bf52:	f019 fbf3 	bl	802573c <atexit>
    return verdana_18_4bpp;
 800bf56:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <_Z23getFont_verdana_18_4bppv+0x6c>)
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	20008550 	.word	0x20008550
 800bf64:	0802ffe4 	.word	0x0802ffe4
 800bf68:	08027320 	.word	0x08027320
 800bf6c:	0803030c 	.word	0x0803030c
 800bf70:	2000852c 	.word	0x2000852c
 800bf74:	0800bef5 	.word	0x0800bef5

0800bf78 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 42, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	4801      	ldr	r0, [pc, #4]	; (800bf84 <__tcf_0+0xc>)
 800bf7e:	f7ff fed5 	bl	800bd2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	20008554 	.word	0x20008554

0800bf88 <_Z23getFont_verdana_20_4bppv>:
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b08a      	sub	sp, #40	; 0x28
 800bf8c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 42, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800bf8e:	4b15      	ldr	r3, [pc, #84]	; (800bfe4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d11f      	bne.n	800bfda <_Z23getFont_verdana_20_4bppv+0x52>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9308      	str	r3, [sp, #32]
 800bfa2:	233f      	movs	r3, #63	; 0x3f
 800bfa4:	9307      	str	r3, [sp, #28]
 800bfa6:	4b10      	ldr	r3, [pc, #64]	; (800bfe8 <_Z23getFont_verdana_20_4bppv+0x60>)
 800bfa8:	9306      	str	r3, [sp, #24]
 800bfaa:	4b10      	ldr	r3, [pc, #64]	; (800bfec <_Z23getFont_verdana_20_4bppv+0x64>)
 800bfac:	9305      	str	r3, [sp, #20]
 800bfae:	2301      	movs	r3, #1
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	9303      	str	r3, [sp, #12]
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	9302      	str	r3, [sp, #8]
 800bfba:	2304      	movs	r3, #4
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	2304      	movs	r3, #4
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	2314      	movs	r3, #20
 800bfc4:	222a      	movs	r2, #42	; 0x2a
 800bfc6:	490a      	ldr	r1, [pc, #40]	; (800bff0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800bfc8:	480a      	ldr	r0, [pc, #40]	; (800bff4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800bfca:	f7ff fefd 	bl	800bdc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	4808      	ldr	r0, [pc, #32]	; (800bff8 <_Z23getFont_verdana_20_4bppv+0x70>)
 800bfd6:	f019 fbb1 	bl	802573c <atexit>
    return verdana_20_4bpp;
 800bfda:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20008578 	.word	0x20008578
 800bfe8:	0802ffe8 	.word	0x0802ffe8
 800bfec:	08027324 	.word	0x08027324
 800bff0:	08030360 	.word	0x08030360
 800bff4:	20008554 	.word	0x20008554
 800bff8:	0800bf79 	.word	0x0800bf79

0800bffc <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_24_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_24_4bpp();

touchgfx::GeneratedFont& getFont_verdana_24_4bpp()
{
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
 800c000:	4801      	ldr	r0, [pc, #4]	; (800c008 <__tcf_0+0xc>)
 800c002:	f7ff fe93 	bl	800bd2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c006:	bd80      	pop	{r7, pc}
 800c008:	2000857c 	.word	0x2000857c

0800c00c <_Z23getFont_verdana_24_4bppv>:
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08a      	sub	sp, #40	; 0x28
 800c010:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800c012:	4b15      	ldr	r3, [pc, #84]	; (800c068 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d11f      	bne.n	800c05e <_Z23getFont_verdana_24_4bppv+0x52>
 800c01e:	2300      	movs	r3, #0
 800c020:	9309      	str	r3, [sp, #36]	; 0x24
 800c022:	2300      	movs	r3, #0
 800c024:	9308      	str	r3, [sp, #32]
 800c026:	233f      	movs	r3, #63	; 0x3f
 800c028:	9307      	str	r3, [sp, #28]
 800c02a:	4b10      	ldr	r3, [pc, #64]	; (800c06c <_Z23getFont_verdana_24_4bppv+0x60>)
 800c02c:	9306      	str	r3, [sp, #24]
 800c02e:	4b10      	ldr	r3, [pc, #64]	; (800c070 <_Z23getFont_verdana_24_4bppv+0x64>)
 800c030:	9305      	str	r3, [sp, #20]
 800c032:	2302      	movs	r3, #2
 800c034:	9304      	str	r3, [sp, #16]
 800c036:	2301      	movs	r3, #1
 800c038:	9303      	str	r3, [sp, #12]
 800c03a:	2301      	movs	r3, #1
 800c03c:	9302      	str	r3, [sp, #8]
 800c03e:	2304      	movs	r3, #4
 800c040:	9301      	str	r3, [sp, #4]
 800c042:	2305      	movs	r3, #5
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	2318      	movs	r3, #24
 800c048:	225f      	movs	r2, #95	; 0x5f
 800c04a:	490a      	ldr	r1, [pc, #40]	; (800c074 <_Z23getFont_verdana_24_4bppv+0x68>)
 800c04c:	480a      	ldr	r0, [pc, #40]	; (800c078 <_Z23getFont_verdana_24_4bppv+0x6c>)
 800c04e:	f7ff febb 	bl	800bdc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c052:	4b05      	ldr	r3, [pc, #20]	; (800c068 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c054:	2201      	movs	r2, #1
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	4808      	ldr	r0, [pc, #32]	; (800c07c <_Z23getFont_verdana_24_4bppv+0x70>)
 800c05a:	f019 fb6f 	bl	802573c <atexit>
    return verdana_24_4bpp;
 800c05e:	4b06      	ldr	r3, [pc, #24]	; (800c078 <_Z23getFont_verdana_24_4bppv+0x6c>)
}
 800c060:	4618      	mov	r0, r3
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	200085a0 	.word	0x200085a0
 800c06c:	08030054 	.word	0x08030054
 800c070:	08027328 	.word	0x08027328
 800c074:	080305ac 	.word	0x080305ac
 800c078:	2000857c 	.word	0x2000857c
 800c07c:	0800bffd 	.word	0x0800bffd

0800c080 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_27_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_27_4bpp();

touchgfx::GeneratedFont& getFont_verdana_27_4bpp()
{
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
 800c084:	4801      	ldr	r0, [pc, #4]	; (800c08c <__tcf_0+0xc>)
 800c086:	f7ff fe51 	bl	800bd2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	200085a4 	.word	0x200085a4

0800c090 <_Z23getFont_verdana_27_4bppv>:
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08a      	sub	sp, #40	; 0x28
 800c094:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c096:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d11f      	bne.n	800c0e2 <_Z23getFont_verdana_27_4bppv+0x52>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	9308      	str	r3, [sp, #32]
 800c0aa:	233f      	movs	r3, #63	; 0x3f
 800c0ac:	9307      	str	r3, [sp, #28]
 800c0ae:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <_Z23getFont_verdana_27_4bppv+0x60>)
 800c0b0:	9306      	str	r3, [sp, #24]
 800c0b2:	4b10      	ldr	r3, [pc, #64]	; (800c0f4 <_Z23getFont_verdana_27_4bppv+0x64>)
 800c0b4:	9305      	str	r3, [sp, #20]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9303      	str	r3, [sp, #12]
 800c0be:	2301      	movs	r3, #1
 800c0c0:	9302      	str	r3, [sp, #8]
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	231b      	movs	r3, #27
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	490a      	ldr	r1, [pc, #40]	; (800c0f8 <_Z23getFont_verdana_27_4bppv+0x68>)
 800c0d0:	480a      	ldr	r0, [pc, #40]	; (800c0fc <_Z23getFont_verdana_27_4bppv+0x6c>)
 800c0d2:	f7ff fe79 	bl	800bdc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	4808      	ldr	r0, [pc, #32]	; (800c100 <_Z23getFont_verdana_27_4bppv+0x70>)
 800c0de:	f019 fb2d 	bl	802573c <atexit>
    return verdana_27_4bpp;
 800c0e2:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <_Z23getFont_verdana_27_4bppv+0x6c>)
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200085c8 	.word	0x200085c8
 800c0f0:	080302c8 	.word	0x080302c8
 800c0f4:	0802732c 	.word	0x0802732c
 800c0f8:	08030ae0 	.word	0x08030ae0
 800c0fc:	200085a4 	.word	0x200085a4
 800c100:	0800c081 	.word	0x0800c081

0800c104 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c104:	b580      	push	{r7, lr}
 800c106:	af00      	add	r7, sp, #0
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__tcf_0+0xc>)
 800c10a:	f7ff fe0f 	bl	800bd2c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	200085cc 	.word	0x200085cc

0800c114 <_Z23getFont_verdana_40_4bppv>:
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08a      	sub	sp, #40	; 0x28
 800c118:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c11a:	4b15      	ldr	r3, [pc, #84]	; (800c170 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	2b00      	cmp	r3, #0
 800c124:	d11f      	bne.n	800c166 <_Z23getFont_verdana_40_4bppv+0x52>
 800c126:	2300      	movs	r3, #0
 800c128:	9309      	str	r3, [sp, #36]	; 0x24
 800c12a:	2300      	movs	r3, #0
 800c12c:	9308      	str	r3, [sp, #32]
 800c12e:	233f      	movs	r3, #63	; 0x3f
 800c130:	9307      	str	r3, [sp, #28]
 800c132:	4b10      	ldr	r3, [pc, #64]	; (800c174 <_Z23getFont_verdana_40_4bppv+0x60>)
 800c134:	9306      	str	r3, [sp, #24]
 800c136:	4b10      	ldr	r3, [pc, #64]	; (800c178 <_Z23getFont_verdana_40_4bppv+0x64>)
 800c138:	9305      	str	r3, [sp, #20]
 800c13a:	2301      	movs	r3, #1
 800c13c:	9304      	str	r3, [sp, #16]
 800c13e:	2300      	movs	r3, #0
 800c140:	9303      	str	r3, [sp, #12]
 800c142:	2301      	movs	r3, #1
 800c144:	9302      	str	r3, [sp, #8]
 800c146:	2304      	movs	r3, #4
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	2308      	movs	r3, #8
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	2328      	movs	r3, #40	; 0x28
 800c150:	2212      	movs	r2, #18
 800c152:	490a      	ldr	r1, [pc, #40]	; (800c17c <_Z23getFont_verdana_40_4bppv+0x68>)
 800c154:	480a      	ldr	r0, [pc, #40]	; (800c180 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800c156:	f7ff fe37 	bl	800bdc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	4808      	ldr	r0, [pc, #32]	; (800c184 <_Z23getFont_verdana_40_4bppv+0x70>)
 800c162:	f019 faeb 	bl	802573c <atexit>
    return verdana_40_4bpp;
 800c166:	4b06      	ldr	r3, [pc, #24]	; (800c180 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800c168:	4618      	mov	r0, r3
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	200085f0 	.word	0x200085f0
 800c174:	080302cc 	.word	0x080302cc
 800c178:	08027330 	.word	0x08027330
 800c17c:	08030af0 	.word	0x08030af0
 800c180:	200085cc 	.word	0x200085cc
 800c184:	0800c105 	.word	0x0800c105

0800c188 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	4618      	mov	r0, r3
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	80da      	strh	r2, [r3, #6]
    }
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4611      	mov	r1, r2
 800c1da:	461a      	mov	r2, r3
 800c1dc:	4603      	mov	r3, r0
 800c1de:	817b      	strh	r3, [r7, #10]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	813b      	strh	r3, [r7, #8]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	897a      	ldrh	r2, [r7, #10]
 800c1ec:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	893a      	ldrh	r2, [r7, #8]
 800c1f2:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	88fa      	ldrh	r2, [r7, #6]
 800c1f8:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	8b3a      	ldrh	r2, [r7, #24]
 800c1fe:	80da      	strh	r2, [r3, #6]
    }
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4618      	mov	r0, r3
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]
    {
    }
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
    {
    }
 800c22e:	bf00      	nop
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
    {
    }
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	460b      	mov	r3, r1
 800c25a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
    {
    }
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
    {
    }
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
    {
 800c298:	4a04      	ldr	r2, [pc, #16]	; (800c2ac <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	601a      	str	r2, [r3, #0]
    }
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	0802759c 	.word	0x0802759c

0800c2b0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
    }
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff ffe9 	bl	800c290 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c2be:	2104      	movs	r1, #4
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f019 f9f1 	bl	80256a8 <_ZdlPvj>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c2d8:	4a07      	ldr	r2, [pc, #28]	; (800c2f8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	605a      	str	r2, [r3, #4]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	721a      	strb	r2, [r3, #8]
    {
    }
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	0802757c 	.word	0x0802757c

0800c2fc <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    {
 800c304:	4a04      	ldr	r2, [pc, #16]	; (800c318 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	601a      	str	r2, [r3, #0]
    }
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4618      	mov	r0, r3
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	0802757c 	.word	0x0802757c

0800c31c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
    }
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7ff ffe9 	bl	800c2fc <_ZN8touchgfx10TransitionD1Ev>
 800c32a:	210c      	movs	r1, #12
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f019 f9bb 	bl	80256a8 <_ZdlPvj>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
    {
    }
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
    {
    }
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
    {
    }
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	605a      	str	r2, [r3, #4]
    }
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800c3be:	6810      	ldr	r0, [r2, #0]
 800c3c0:	6851      	ldr	r1, [r2, #4]
 800c3c2:	c303      	stmia	r3!, {r0, r1}
    };
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
    {
 800c3d8:	4a04      	ldr	r2, [pc, #16]	; (800c3ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	601a      	str	r2, [r3, #0]
    }
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	08027564 	.word	0x08027564

0800c3f0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
    }
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7ff ffe9 	bl	800c3d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c3fe:	2104      	movs	r1, #4
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f019 f951 	bl	80256a8 <_ZdlPvj>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af02      	add	r7, sp, #8
 800c416:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800c418:	4a13      	ldr	r2, [pc, #76]	; (800c468 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	1d18      	adds	r0, r3, #4
 800c422:	2300      	movs	r3, #0
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	2300      	movs	r3, #0
 800c428:	2200      	movs	r2, #0
 800c42a:	2100      	movs	r1, #0
 800c42c:	f7ff fecf 	bl	800c1ce <_ZN8touchgfx4RectC1Essss>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	330c      	adds	r3, #12
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff feb3 	bl	800c1a0 <_ZN8touchgfx4RectC1Ev>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	615a      	str	r2, [r3, #20]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	619a      	str	r2, [r3, #24]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	61da      	str	r2, [r3, #28]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	0802a39c 	.word	0x0802a39c

0800c46c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
    {
 800c474:	4a04      	ldr	r2, [pc, #16]	; (800c488 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	601a      	str	r2, [r3, #0]
    }
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	0802a39c 	.word	0x0802a39c

0800c48c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
    }
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff ffe9 	bl	800c46c <_ZN8touchgfx8DrawableD1Ev>
 800c49a:	2128      	movs	r1, #40	; 0x28
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f019 f903 	bl	80256a8 <_ZdlPvj>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	817b      	strh	r3, [r7, #10]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	813b      	strh	r3, [r7, #8]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3334      	adds	r3, #52	; 0x34
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c4d2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	4798      	blx	r3
        setWidth(width);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3338      	adds	r3, #56	; 0x38
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	4798      	blx	r3
        setHeight(height);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	333c      	adds	r3, #60	; 0x3c
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	4798      	blx	r3
    }
 800c4fe:	bf00      	nop
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c53a:	b480      	push	{r7}
 800c53c:	b083      	sub	sp, #12
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	460b      	mov	r3, r1
 800c544:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	887a      	ldrh	r2, [r7, #2]
 800c54a:	809a      	strh	r2, [r3, #4]
    }
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	460b      	mov	r3, r1
 800c562:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	887a      	ldrh	r2, [r7, #2]
 800c568:	80da      	strh	r2, [r3, #6]
    }
 800c56a:	bf00      	nop
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	460b      	mov	r3, r1
 800c580:	807b      	strh	r3, [r7, #2]
 800c582:	4613      	mov	r3, r2
 800c584:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	332c      	adds	r3, #44	; 0x2c
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c592:	4611      	mov	r1, r2
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
        setY(y);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3330      	adds	r3, #48	; 0x30
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	4798      	blx	r3
    }
 800c5aa:	bf00      	nop
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	887a      	ldrh	r2, [r7, #2]
 800c5c2:	811a      	strh	r2, [r3, #8]
    }
 800c5c4:	bf00      	nop
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	887a      	ldrh	r2, [r7, #2]
 800c5e0:	815a      	strh	r2, [r3, #10]
    }
 800c5e2:	bf00      	nop
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800c5ee:	b480      	push	{r7}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
    {
    }
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
    {
    }
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
    {
    }
 800c622:	bf00      	nop
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	6039      	str	r1, [r7, #0]
    {
    }
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
    {
    }
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800c666:	4618      	mov	r0, r3
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c672:	b480      	push	{r7}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	807b      	strh	r3, [r7, #2]
 800c698:	4613      	mov	r3, r2
 800c69a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3354      	adds	r3, #84	; 0x54
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	8879      	ldrh	r1, [r7, #2]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c6ac:	b292      	uxth	r2, r2
 800c6ae:	1a8a      	subs	r2, r1, r2
 800c6b0:	b292      	uxth	r2, r2
 800c6b2:	b210      	sxth	r0, r2
 800c6b4:	8839      	ldrh	r1, [r7, #0]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c6bc:	b292      	uxth	r2, r2
 800c6be:	1a8a      	subs	r2, r1, r2
 800c6c0:	b292      	uxth	r2, r2
 800c6c2:	b212      	sxth	r2, r2
 800c6c4:	4601      	mov	r1, r0
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	4798      	blx	r3
    }
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c6d2:	b480      	push	{r7}
 800c6d4:	b083      	sub	sp, #12
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6e0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6e8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6f0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800c6f2:	bf00      	nop
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	60f8      	str	r0, [r7, #12]
 800c706:	60b9      	str	r1, [r7, #8]
 800c708:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff ffe1 	bl	800c6d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	601a      	str	r2, [r3, #0]
    }
 800c71e:	bf00      	nop
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c728:	b480      	push	{r7}
 800c72a:	af00      	add	r7, sp, #0
    {
        return instance;
 800c72c:	4b03      	ldr	r3, [pc, #12]	; (800c73c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c72e:	681b      	ldr	r3, [r3, #0]
    }
 800c730:	4618      	mov	r0, r3
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	2000b36c 	.word	0x2000b36c

0800c740 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c740:	b480      	push	{r7}
 800c742:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c744:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d008      	beq.n	800c762 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c750:	4b08      	ldr	r3, [pc, #32]	; (800c774 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c75a:	4b06      	ldr	r3, [pc, #24]	; (800c774 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c760:	e002      	b.n	800c768 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800c762:	4b04      	ldr	r3, [pc, #16]	; (800c774 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
        }
    }
 800c768:	4618      	mov	r0, r3
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	2000b36c 	.word	0x2000b36c

0800c778 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	4a05      	ldr	r2, [pc, #20]	; (800c798 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff fd81 	bl	800c290 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	0802a2ac 	.word	0x0802a2ac

0800c79c <_ZN8touchgfx11ApplicationD0Ev>:
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff ffe7 	bl	800c778 <_ZN8touchgfx11ApplicationD1Ev>
 800c7aa:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f018 ff7a 	bl	80256a8 <_ZdlPvj>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f00c fe50 	bl	8019470 <_ZN8touchgfx11ApplicationC1Ev>
 800c7d0:	4a09      	ldr	r2, [pc, #36]	; (800c7f8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a04      	ldr	r2, [pc, #16]	; (800c7fc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c7ea:	6013      	str	r3, [r2, #0]
    }
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	08027520 	.word	0x08027520
 800c7fc:	2000b3f8 	.word	0x2000b3f8

0800c800 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f804 	bl	800c816 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c80e:	bf00      	nop
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00f      	beq.n	800c848 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	330c      	adds	r3, #12
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4610      	mov	r0, r2
 800c83c:	4798      	blx	r3
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c844:	2301      	movs	r3, #1
 800c846:	e000      	b.n	800c84a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c848:	2300      	movs	r3, #0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00e      	beq.n	800c86c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3308      	adds	r3, #8
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800c86c:	bf00      	nop
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	601a      	str	r2, [r3, #0]
    }
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	4a05      	ldr	r2, [pc, #20]	; (800c8b0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff ff69 	bl	800c778 <_ZN8touchgfx11ApplicationD1Ev>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	08027520 	.word	0x08027520

0800c8b4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff ffe7 	bl	800c890 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c8c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f018 feee 	bl	80256a8 <_ZdlPvj>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
	...

0800c8d8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	4a08      	ldr	r2, [pc, #32]	; (800c904 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f002 f921 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff ffcb 	bl	800c890 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	080274c4 	.word	0x080274c4

0800c908 <_ZN23FrontendApplicationBaseD0Ev>:
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff ffe1 	bl	800c8d8 <_ZN23FrontendApplicationBaseD1Ev>
 800c916:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f018 fec4 	bl	80256a8 <_ZdlPvj>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4618      	mov	r0, r3
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2201      	movs	r2, #1
 800c936:	721a      	strb	r2, [r3, #8]
    }
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	607b      	str	r3, [r7, #4]
 800c94e:	460b      	mov	r3, r1
 800c950:	817b      	strh	r3, [r7, #10]
 800c952:	4613      	mov	r3, r2
 800c954:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7ff fe7d 	bl	800c658 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d008      	beq.n	800c976 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff fe83 	bl	800c672 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c972:	2301      	movs	r3, #1
 800c974:	e000      	b.n	800c978 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800c976:	2300      	movs	r3, #0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	601a      	str	r2, [r3, #0]
        }
    }
 800c982:	bf00      	nop
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	605a      	str	r2, [r3, #4]
    }
 800c99a:	bf00      	nop
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff fd2c 	bl	800c410 <_ZN8touchgfx8DrawableC1Ev>
 800c9b8:	4a03      	ldr	r2, [pc, #12]	; (800c9c8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	0802743c 	.word	0x0802743c

0800c9cc <_ZN8touchgfx6WidgetD1Ev>:
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	4a05      	ldr	r2, [pc, #20]	; (800c9ec <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7ff fd45 	bl	800c46c <_ZN8touchgfx8DrawableD1Ev>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	0802743c 	.word	0x0802743c

0800c9f0 <_ZN8touchgfx6WidgetD0Ev>:
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7ff ffe7 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 800c9fe:	2128      	movs	r1, #40	; 0x28
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f018 fe51 	bl	80256a8 <_ZdlPvj>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff fece 	bl	800c7c0 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ca24:	4a13      	ldr	r2, [pc, #76]	; (800ca74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 fa89 	bl	800cf48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ca46:	f7ff fe6f 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	6813      	ldr	r3, [r2, #0]
 800ca4e:	3308      	adds	r3, #8
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2100      	movs	r1, #0
 800ca54:	4610      	mov	r0, r2
 800ca56:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f005 fecf 	bl	80127fc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ca5e:	f7ff fe6f 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4618      	mov	r0, r3
 800ca66:	f012 fb24 	bl	801f0b2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	080274c4 	.word	0x080274c4

0800ca78 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4618      	mov	r0, r3
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff ffe9 	bl	800ca78 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	605a      	str	r2, [r3, #4]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	3308      	adds	r3, #8
 800cab4:	3208      	adds	r2, #8
 800cab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caba:	e883 0003 	stmia.w	r3, {r0, r1}
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800cac8:	b590      	push	{r4, r7, lr}
 800caca:	b089      	sub	sp, #36	; 0x24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cad6:	4b10      	ldr	r3, [pc, #64]	; (800cb18 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800cad8:	61bb      	str	r3, [r7, #24]
 800cada:	2300      	movs	r3, #0
 800cadc:	61fb      	str	r3, [r7, #28]
 800cade:	f107 0008 	add.w	r0, r7, #8
 800cae2:	f107 0318 	add.w	r3, r7, #24
 800cae6:	cb0c      	ldmia	r3, {r2, r3}
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	f000 fa49 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800caee:	f107 0308 	add.w	r3, r7, #8
 800caf2:	4619      	mov	r1, r3
 800caf4:	4620      	mov	r0, r4
 800caf6:	f7ff ffcb 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cafa:	f107 0308 	add.w	r3, r7, #8
 800cafe:	4618      	mov	r0, r3
 800cb00:	f002 f818 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cb10:	bf00      	nop
 800cb12:	3724      	adds	r7, #36	; 0x24
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd90      	pop	{r4, r7, pc}
 800cb18:	0800cb1d 	.word	0x0800cb1d

0800cb1c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af02      	add	r7, sp, #8
 800cb22:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cb30:	461a      	mov	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	4b04      	ldr	r3, [pc, #16]	; (800cb4c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800cb3c:	4804      	ldr	r0, [pc, #16]	; (800cb50 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800cb3e:	f000 fa51 	bl	800cfe4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	2000b3ec 	.word	0x2000b3ec
 800cb50:	2000b3e8 	.word	0x2000b3e8

0800cb54 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEast()
{
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b089      	sub	sp, #36	; 0x24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenSlideTransitionEastImpl);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cb62:	4b10      	ldr	r3, [pc, #64]	; (800cba4 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv+0x50>)
 800cb64:	61bb      	str	r3, [r7, #24]
 800cb66:	2300      	movs	r3, #0
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	f107 0008 	add.w	r0, r7, #8
 800cb6e:	f107 0318 	add.w	r3, r7, #24
 800cb72:	cb0c      	ldmia	r3, {r2, r3}
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	f000 fa03 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cb7a:	f107 0308 	add.w	r3, r7, #8
 800cb7e:	4619      	mov	r1, r3
 800cb80:	4620      	mov	r0, r4
 800cb82:	f7ff ff85 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cb86:	f107 0308 	add.w	r3, r7, #8
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 ffd2 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cb9c:	bf00      	nop
 800cb9e:	3724      	adds	r7, #36	; 0x24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd90      	pop	{r4, r7, pc}
 800cba4:	0800cba9 	.word	0x0800cba9

0800cba8 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEastImpl()
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	4b04      	ldr	r3, [pc, #16]	; (800cbd8 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x30>)
 800cbc8:	4804      	ldr	r0, [pc, #16]	; (800cbdc <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x34>)
 800cbca:	f000 fb37 	bl	800d23c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cbce:	bf00      	nop
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	2000b3ec 	.word	0x2000b3ec
 800cbdc:	2000b3e8 	.word	0x2000b3e8

0800cbe0 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEast()
{
 800cbe0:	b590      	push	{r4, r7, lr}
 800cbe2:	b089      	sub	sp, #36	; 0x24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenCoverTransitionEastImpl);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cbee:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv+0x50>)
 800cbf0:	61bb      	str	r3, [r7, #24]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	61fb      	str	r3, [r7, #28]
 800cbf6:	f107 0008 	add.w	r0, r7, #8
 800cbfa:	f107 0318 	add.w	r3, r7, #24
 800cbfe:	cb0c      	ldmia	r3, {r2, r3}
 800cc00:	6879      	ldr	r1, [r7, #4]
 800cc02:	f000 f9bd 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cc06:	f107 0308 	add.w	r3, r7, #8
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f7ff ff3f 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc12:	f107 0308 	add.w	r3, r7, #8
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 ff8c 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cc28:	bf00      	nop
 800cc2a:	3724      	adds	r7, #36	; 0x24
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd90      	pop	{r4, r7, pc}
 800cc30:	0800cc35 	.word	0x0800cc35

0800cc34 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEastImpl()
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af02      	add	r7, sp, #8
 800cc3a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cc48:	461a      	mov	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4b04      	ldr	r3, [pc, #16]	; (800cc64 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x30>)
 800cc54:	4804      	ldr	r0, [pc, #16]	; (800cc68 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x34>)
 800cc56:	f000 fc1d 	bl	800d494 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cc5a:	bf00      	nop
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	2000b3ec 	.word	0x2000b3ec
 800cc68:	2000b3e8 	.word	0x2000b3e8

0800cc6c <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>:

// Music

void FrontendApplicationBase::gotoMusicScreenNoTransition()
{
 800cc6c:	b590      	push	{r4, r7, lr}
 800cc6e:	b089      	sub	sp, #36	; 0x24
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMusicScreenNoTransitionImpl);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cc7a:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv+0x50>)
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61fb      	str	r3, [r7, #28]
 800cc82:	f107 0008 	add.w	r0, r7, #8
 800cc86:	f107 0318 	add.w	r3, r7, #24
 800cc8a:	cb0c      	ldmia	r3, {r2, r3}
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	f000 f977 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cc92:	f107 0308 	add.w	r3, r7, #8
 800cc96:	4619      	mov	r1, r3
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f7ff fef9 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc9e:	f107 0308 	add.w	r3, r7, #8
 800cca2:	4618      	mov	r0, r3
 800cca4:	f001 ff46 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ccb4:	bf00      	nop
 800ccb6:	3724      	adds	r7, #36	; 0x24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd90      	pop	{r4, r7, pc}
 800ccbc:	0800ccc1 	.word	0x0800ccc1

0800ccc0 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMusicScreenNoTransitionImpl()
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af02      	add	r7, sp, #8
 800ccc6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MusicView, MusicPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	4b04      	ldr	r3, [pc, #16]	; (800ccf0 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x30>)
 800cce0:	4804      	ldr	r0, [pc, #16]	; (800ccf4 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x34>)
 800cce2:	f000 fd03 	bl	800d6ec <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cce6:	bf00      	nop
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	2000b3ec 	.word	0x2000b3ec
 800ccf4:	2000b3e8 	.word	0x2000b3e8

0800ccf8 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>:

// gameover

void FrontendApplicationBase::gotogameoverScreenNoTransition()
{
 800ccf8:	b590      	push	{r4, r7, lr}
 800ccfa:	b089      	sub	sp, #36	; 0x24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogameoverScreenNoTransitionImpl);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cd06:	4b10      	ldr	r3, [pc, #64]	; (800cd48 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv+0x50>)
 800cd08:	61bb      	str	r3, [r7, #24]
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	61fb      	str	r3, [r7, #28]
 800cd0e:	f107 0008 	add.w	r0, r7, #8
 800cd12:	f107 0318 	add.w	r3, r7, #24
 800cd16:	cb0c      	ldmia	r3, {r2, r3}
 800cd18:	6879      	ldr	r1, [r7, #4]
 800cd1a:	f000 f931 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cd1e:	f107 0308 	add.w	r3, r7, #8
 800cd22:	4619      	mov	r1, r3
 800cd24:	4620      	mov	r0, r4
 800cd26:	f7ff feb3 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f001 ff00 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cd40:	bf00      	nop
 800cd42:	3724      	adds	r7, #36	; 0x24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd90      	pop	{r4, r7, pc}
 800cd48:	0800cd4d 	.word	0x0800cd4d

0800cd4c <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotogameoverScreenNoTransitionImpl()
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af02      	add	r7, sp, #8
 800cd52:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<gameoverView, gameoverPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cd60:	461a      	mov	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	4b04      	ldr	r3, [pc, #16]	; (800cd7c <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x30>)
 800cd6c:	4804      	ldr	r0, [pc, #16]	; (800cd80 <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x34>)
 800cd6e:	f000 fde9 	bl	800d944 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	2000b3ec 	.word	0x2000b3ec
 800cd80:	2000b3e8 	.word	0x2000b3e8

0800cd84 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>:

// Pong

void FrontendApplicationBase::gotoPongScreenCoverTransitionEast()
{
 800cd84:	b590      	push	{r4, r7, lr}
 800cd86:	b089      	sub	sp, #36	; 0x24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenCoverTransitionEastImpl);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cd92:	4b10      	ldr	r3, [pc, #64]	; (800cdd4 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv+0x50>)
 800cd94:	61bb      	str	r3, [r7, #24]
 800cd96:	2300      	movs	r3, #0
 800cd98:	61fb      	str	r3, [r7, #28]
 800cd9a:	f107 0008 	add.w	r0, r7, #8
 800cd9e:	f107 0318 	add.w	r3, r7, #24
 800cda2:	cb0c      	ldmia	r3, {r2, r3}
 800cda4:	6879      	ldr	r1, [r7, #4]
 800cda6:	f000 f8eb 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f7ff fe6d 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cdb6:	f107 0308 	add.w	r3, r7, #8
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f001 feba 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cdcc:	bf00      	nop
 800cdce:	3724      	adds	r7, #36	; 0x24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd90      	pop	{r4, r7, pc}
 800cdd4:	0800cdd9 	.word	0x0800cdd9

0800cdd8 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoPongScreenCoverTransitionEastImpl()
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af02      	add	r7, sp, #8
 800cdde:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cdec:	461a      	mov	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	4b04      	ldr	r3, [pc, #16]	; (800ce08 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x30>)
 800cdf8:	4804      	ldr	r0, [pc, #16]	; (800ce0c <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x34>)
 800cdfa:	f000 fecf 	bl	800db9c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cdfe:	bf00      	nop
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	2000b3ec 	.word	0x2000b3ec
 800ce0c:	2000b3e8 	.word	0x2000b3e8

0800ce10 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>:

void FrontendApplicationBase::gotoPongScreenNoTransition()
{
 800ce10:	b590      	push	{r4, r7, lr}
 800ce12:	b089      	sub	sp, #36	; 0x24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenNoTransitionImpl);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce1e:	4b10      	ldr	r3, [pc, #64]	; (800ce60 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv+0x50>)
 800ce20:	61bb      	str	r3, [r7, #24]
 800ce22:	2300      	movs	r3, #0
 800ce24:	61fb      	str	r3, [r7, #28]
 800ce26:	f107 0008 	add.w	r0, r7, #8
 800ce2a:	f107 0318 	add.w	r3, r7, #24
 800ce2e:	cb0c      	ldmia	r3, {r2, r3}
 800ce30:	6879      	ldr	r1, [r7, #4]
 800ce32:	f000 f8a5 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce36:	f107 0308 	add.w	r3, r7, #8
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f7ff fe27 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce42:	f107 0308 	add.w	r3, r7, #8
 800ce46:	4618      	mov	r0, r3
 800ce48:	f001 fe74 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ce58:	bf00      	nop
 800ce5a:	3724      	adds	r7, #36	; 0x24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd90      	pop	{r4, r7, pc}
 800ce60:	0800ce65 	.word	0x0800ce65

0800ce64 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoPongScreenNoTransitionImpl()
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af02      	add	r7, sp, #8
 800ce6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ce78:	461a      	mov	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x30>)
 800ce84:	4804      	ldr	r0, [pc, #16]	; (800ce98 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x34>)
 800ce86:	f000 ffb7 	bl	800ddf8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ce8a:	bf00      	nop
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	2000b3ec 	.word	0x2000b3ec
 800ce98:	2000b3e8 	.word	0x2000b3e8

0800ce9c <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>:

// gallery

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEast()
{
 800ce9c:	b590      	push	{r4, r7, lr}
 800ce9e:	b089      	sub	sp, #36	; 0x24
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogalleryScreenCoverTransitionEastImpl);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ceaa:	4b10      	ldr	r3, [pc, #64]	; (800ceec <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv+0x50>)
 800ceac:	61bb      	str	r3, [r7, #24]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	61fb      	str	r3, [r7, #28]
 800ceb2:	f107 0008 	add.w	r0, r7, #8
 800ceb6:	f107 0318 	add.w	r3, r7, #24
 800ceba:	cb0c      	ldmia	r3, {r2, r3}
 800cebc:	6879      	ldr	r1, [r7, #4]
 800cebe:	f000 f85f 	bl	800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cec2:	f107 0308 	add.w	r3, r7, #8
 800cec6:	4619      	mov	r1, r3
 800cec8:	4620      	mov	r0, r4
 800ceca:	f7ff fde1 	bl	800ca90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	4618      	mov	r0, r3
 800ced4:	f001 fe2e 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cee4:	bf00      	nop
 800cee6:	3724      	adds	r7, #36	; 0x24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd90      	pop	{r4, r7, pc}
 800ceec:	0800cef1 	.word	0x0800cef1

0800cef0 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEastImpl()
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<galleryView, galleryPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cf04:	461a      	mov	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x30>)
 800cf10:	4804      	ldr	r0, [pc, #16]	; (800cf24 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x34>)
 800cf12:	f001 f89d 	bl	800e050 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cf16:	bf00      	nop
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	2000b3ec 	.word	0x2000b3ec
 800cf24:	2000b3e8 	.word	0x2000b3e8

0800cf28 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	4a04      	ldr	r2, [pc, #16]	; (800cf44 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	08027564 	.word	0x08027564

0800cf48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff ffe8 	bl	800cf28 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf58:	4a08      	ldr	r2, [pc, #32]	; (800cf7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	605a      	str	r2, [r3, #4]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	609a      	str	r2, [r3, #8]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	60da      	str	r2, [r3, #12]
    {
    }
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	08027508 	.word	0x08027508

0800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff ffc8 	bl	800cf28 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf98:	4a08      	ldr	r2, [pc, #32]	; (800cfbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	463a      	mov	r2, r7
 800cfaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	08027508 	.word	0x08027508

0800cfc0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff f980 	bl	800c2d0 <_ZN8touchgfx10TransitionC1Ev>
 800cfd0:	4a03      	ldr	r2, [pc, #12]	; (800cfe0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	080274a4 	.word	0x080274a4

0800cfe4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cfe4:	b590      	push	{r4, r7, lr}
 800cfe6:	b08f      	sub	sp, #60	; 0x3c
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
 800cff0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	689a      	ldr	r2, [r3, #8]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3320      	adds	r3, #32
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4610      	mov	r0, r2
 800d002:	4798      	blx	r3
 800d004:	4603      	mov	r3, r0
 800d006:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d00a:	d205      	bcs.n	800d018 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d00c:	4b86      	ldr	r3, [pc, #536]	; (800d228 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d00e:	4a87      	ldr	r2, [pc, #540]	; (800d22c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d010:	21a7      	movs	r1, #167	; 0xa7
 800d012:	4887      	ldr	r0, [pc, #540]	; (800d230 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d014:	f018 fb74 	bl	8025700 <__assert_func>
 800d018:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685a      	ldr	r2, [r3, #4]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3320      	adds	r3, #32
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4610      	mov	r0, r2
 800d02a:	4798      	blx	r3
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b0f      	cmp	r3, #15
 800d030:	d805      	bhi.n	800d03e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d032:	4b80      	ldr	r3, [pc, #512]	; (800d234 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d034:	4a7d      	ldr	r2, [pc, #500]	; (800d22c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d036:	21a8      	movs	r1, #168	; 0xa8
 800d038:	487d      	ldr	r0, [pc, #500]	; (800d230 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d03a:	f018 fb61 	bl	8025700 <__assert_func>
 800d03e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	68da      	ldr	r2, [r3, #12]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3320      	adds	r3, #32
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4610      	mov	r0, r2
 800d050:	4798      	blx	r3
 800d052:	4603      	mov	r3, r0
 800d054:	2b0b      	cmp	r3, #11
 800d056:	d805      	bhi.n	800d064 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d058:	4b77      	ldr	r3, [pc, #476]	; (800d238 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d05a:	4a74      	ldr	r2, [pc, #464]	; (800d22c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d05c:	21a9      	movs	r1, #169	; 0xa9
 800d05e:	4874      	ldr	r0, [pc, #464]	; (800d230 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d060:	f018 fb4e 	bl	8025700 <__assert_func>
 800d064:	bf00      	nop
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	62bb      	str	r3, [r7, #40]	; 0x28
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d072:	f00c f9c5 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d076:	4603      	mov	r3, r0
 800d078:	4618      	mov	r0, r3
 800d07a:	f00c f9dd 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d07e:	6a3b      	ldr	r3, [r7, #32]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d008      	beq.n	800d098 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	330c      	adds	r3, #12
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4610      	mov	r0, r2
 800d096:	4798      	blx	r3
    if (*currentTrans)
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d007      	beq.n	800d0b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
    if (*currentScreen)
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d008      	beq.n	800d0ca <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3314      	adds	r3, #20
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4610      	mov	r0, r2
 800d0c8:	4798      	blx	r3
    if (*currentPresenter)
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d008      	beq.n	800d0e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3304      	adds	r3, #4
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	4798      	blx	r3
    if (*currentScreen)
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d007      	beq.n	800d0fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	4798      	blx	r3
    if (*currentPresenter)
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d008      	beq.n	800d116 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3308      	adds	r3, #8
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4610      	mov	r0, r2
 800d114:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	2100      	movs	r1, #0
 800d11c:	4618      	mov	r0, r3
 800d11e:	f001 f8c3 	bl	800e2a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d122:	4603      	mov	r3, r0
 800d124:	4619      	mov	r1, r3
 800d126:	200c      	movs	r0, #12
 800d128:	f7ff f82e 	bl	800c188 <_ZnwjPv>
 800d12c:	4604      	mov	r4, r0
 800d12e:	2c00      	cmp	r4, #0
 800d130:	d004      	beq.n	800d13c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d132:	4620      	mov	r0, r4
 800d134:	f7ff ff44 	bl	800cfc0 <_ZN8touchgfx12NoTransitionC1Ev>
 800d138:	4623      	mov	r3, r4
 800d13a:	e000      	b.n	800d13e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d13c:	4623      	mov	r3, r4
 800d13e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	2100      	movs	r1, #0
 800d146:	4618      	mov	r0, r3
 800d148:	f001 f8c1 	bl	800e2ce <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d14c:	4603      	mov	r3, r0
 800d14e:	4619      	mov	r1, r3
 800d150:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d154:	f7ff f818 	bl	800c188 <_ZnwjPv>
 800d158:	4604      	mov	r4, r0
 800d15a:	2c00      	cmp	r4, #0
 800d15c:	d004      	beq.n	800d168 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d15e:	4620      	mov	r0, r4
 800d160:	f006 fc3e 	bl	80139e0 <_ZN10screenViewC1Ev>
 800d164:	4623      	mov	r3, r4
 800d166:	e000      	b.n	800d16a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d168:	4623      	mov	r3, r4
 800d16a:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	2100      	movs	r1, #0
 800d172:	4618      	mov	r0, r3
 800d174:	f001 f8be 	bl	800e2f4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d178:	4603      	mov	r3, r0
 800d17a:	4619      	mov	r1, r3
 800d17c:	2010      	movs	r0, #16
 800d17e:	f7ff f803 	bl	800c188 <_ZnwjPv>
 800d182:	4604      	mov	r4, r0
 800d184:	2c00      	cmp	r4, #0
 800d186:	d005      	beq.n	800d194 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d18a:	4620      	mov	r0, r4
 800d18c:	f006 fbd0 	bl	8013930 <_ZN15screenPresenterC1ER10screenView>
 800d190:	4623      	mov	r3, r4
 800d192:	e000      	b.n	800d196 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d194:	4623      	mov	r3, r4
 800d196:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d19c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1a8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	e000      	b.n	800d1b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d1bc:	f7ff fb5a 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fbdf 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f001 f8a2 	bl	800e31a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	61fb      	str	r3, [r7, #28]
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1dc:	61bb      	str	r3, [r7, #24]
 800d1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	330c      	adds	r3, #12
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	69f8      	ldr	r0, [r7, #28]
 800d1ec:	4798      	blx	r3
    newPresenter->activate();
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	69b8      	ldr	r0, [r7, #24]
 800d1f6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d1f8:	6979      	ldr	r1, [r7, #20]
 800d1fa:	69f8      	ldr	r0, [r7, #28]
 800d1fc:	f00d fa32 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3310      	adds	r3, #16
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6978      	ldr	r0, [r7, #20]
 800d20a:	4798      	blx	r3
    Application::getInstance()->draw();
 800d20c:	f00c f8f8 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d210:	4602      	mov	r2, r0
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	3330      	adds	r3, #48	; 0x30
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4610      	mov	r0, r2
 800d21a:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d21e:	4618      	mov	r0, r3
 800d220:	373c      	adds	r7, #60	; 0x3c
 800d222:	46bd      	mov	sp, r7
 800d224:	bd90      	pop	{r4, r7, pc}
 800d226:	bf00      	nop
 800d228:	0802680c 	.word	0x0802680c
 800d22c:	080275bc 	.word	0x080275bc
 800d230:	0802689c 	.word	0x0802689c
 800d234:	080268e0 	.word	0x080268e0
 800d238:	08026984 	.word	0x08026984

0800d23c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b08f      	sub	sp, #60	; 0x3c
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689a      	ldr	r2, [r3, #8]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3320      	adds	r3, #32
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4610      	mov	r0, r2
 800d25a:	4798      	blx	r3
 800d25c:	4603      	mov	r3, r0
 800d25e:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d262:	d205      	bcs.n	800d270 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d264:	4b86      	ldr	r3, [pc, #536]	; (800d480 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d266:	4a87      	ldr	r2, [pc, #540]	; (800d484 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d268:	21a7      	movs	r1, #167	; 0xa7
 800d26a:	4887      	ldr	r0, [pc, #540]	; (800d488 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d26c:	f018 fa48 	bl	8025700 <__assert_func>
 800d270:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3320      	adds	r3, #32
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4610      	mov	r0, r2
 800d282:	4798      	blx	r3
 800d284:	4603      	mov	r3, r0
 800d286:	2b0f      	cmp	r3, #15
 800d288:	d805      	bhi.n	800d296 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d28a:	4b80      	ldr	r3, [pc, #512]	; (800d48c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d28c:	4a7d      	ldr	r2, [pc, #500]	; (800d484 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d28e:	21a8      	movs	r1, #168	; 0xa8
 800d290:	487d      	ldr	r0, [pc, #500]	; (800d488 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d292:	f018 fa35 	bl	8025700 <__assert_func>
 800d296:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3320      	adds	r3, #32
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4610      	mov	r0, r2
 800d2a8:	4798      	blx	r3
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b53      	cmp	r3, #83	; 0x53
 800d2ae:	d805      	bhi.n	800d2bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d2b0:	4b77      	ldr	r3, [pc, #476]	; (800d490 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d2b2:	4a74      	ldr	r2, [pc, #464]	; (800d484 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d2b4:	21a9      	movs	r1, #169	; 0xa9
 800d2b6:	4874      	ldr	r0, [pc, #464]	; (800d488 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d2b8:	f018 fa22 	bl	8025700 <__assert_func>
 800d2bc:	bf00      	nop
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d2ca:	f00c f899 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f00c f8b1 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d008      	beq.n	800d2f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	330c      	adds	r3, #12
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	4798      	blx	r3
    if (*currentTrans)
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d007      	beq.n	800d308 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4610      	mov	r0, r2
 800d306:	4798      	blx	r3
    if (*currentScreen)
 800d308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d008      	beq.n	800d322 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3314      	adds	r3, #20
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4610      	mov	r0, r2
 800d320:	4798      	blx	r3
    if (*currentPresenter)
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d008      	beq.n	800d33c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	3304      	adds	r3, #4
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4610      	mov	r0, r2
 800d33a:	4798      	blx	r3
    if (*currentScreen)
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d007      	beq.n	800d354 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4610      	mov	r0, r2
 800d352:	4798      	blx	r3
    if (*currentPresenter)
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d008      	beq.n	800d36e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3308      	adds	r3, #8
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4610      	mov	r0, r2
 800d36c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	2100      	movs	r1, #0
 800d374:	4618      	mov	r0, r3
 800d376:	f000 ffde 	bl	800e336 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d37a:	4603      	mov	r3, r0
 800d37c:	4619      	mov	r1, r3
 800d37e:	2054      	movs	r0, #84	; 0x54
 800d380:	f7fe ff02 	bl	800c188 <_ZnwjPv>
 800d384:	4604      	mov	r4, r0
 800d386:	2c00      	cmp	r4, #0
 800d388:	d005      	beq.n	800d396 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d38a:	2114      	movs	r1, #20
 800d38c:	4620      	mov	r0, r4
 800d38e:	f001 f829 	bl	800e3e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d392:	4623      	mov	r3, r4
 800d394:	e000      	b.n	800d398 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d396:	4623      	mov	r3, r4
 800d398:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	2100      	movs	r1, #0
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 ff94 	bl	800e2ce <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d3ae:	f7fe feeb 	bl	800c188 <_ZnwjPv>
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	2c00      	cmp	r4, #0
 800d3b6:	d004      	beq.n	800d3c2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f006 fb11 	bl	80139e0 <_ZN10screenViewC1Ev>
 800d3be:	4623      	mov	r3, r4
 800d3c0:	e000      	b.n	800d3c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d3c2:	4623      	mov	r3, r4
 800d3c4:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 ff91 	bl	800e2f4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	2010      	movs	r0, #16
 800d3d8:	f7fe fed6 	bl	800c188 <_ZnwjPv>
 800d3dc:	4604      	mov	r4, r0
 800d3de:	2c00      	cmp	r4, #0
 800d3e0:	d005      	beq.n	800d3ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d3e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f006 faa3 	bl	8013930 <_ZN15screenPresenterC1ER10screenView>
 800d3ea:	4623      	mov	r3, r4
 800d3ec:	e000      	b.n	800d3f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d3ee:	4623      	mov	r3, r4
 800d3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3f6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3fc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d402:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	3304      	adds	r3, #4
 800d40e:	e000      	b.n	800d412 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d410:	2300      	movs	r3, #0
 800d412:	4619      	mov	r1, r3
 800d414:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d416:	f7ff fa2d 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	3304      	adds	r3, #4
 800d41e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fab2 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 ff75 	bl	800e31a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	61fb      	str	r3, [r7, #28]
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	61bb      	str	r3, [r7, #24]
 800d438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	330c      	adds	r3, #12
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	69f8      	ldr	r0, [r7, #28]
 800d446:	4798      	blx	r3
    newPresenter->activate();
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	69b8      	ldr	r0, [r7, #24]
 800d450:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d452:	6979      	ldr	r1, [r7, #20]
 800d454:	69f8      	ldr	r0, [r7, #28]
 800d456:	f00d f905 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3310      	adds	r3, #16
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6978      	ldr	r0, [r7, #20]
 800d464:	4798      	blx	r3
    Application::getInstance()->draw();
 800d466:	f00b ffcb 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d46a:	4602      	mov	r2, r0
 800d46c:	6813      	ldr	r3, [r2, #0]
 800d46e:	3330      	adds	r3, #48	; 0x30
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4610      	mov	r0, r2
 800d474:	4798      	blx	r3
    return newPresenter;
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d478:	4618      	mov	r0, r3
 800d47a:	373c      	adds	r7, #60	; 0x3c
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd90      	pop	{r4, r7, pc}
 800d480:	0802680c 	.word	0x0802680c
 800d484:	080276c0 	.word	0x080276c0
 800d488:	0802689c 	.word	0x0802689c
 800d48c:	080268e0 	.word	0x080268e0
 800d490:	08026984 	.word	0x08026984

0800d494 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d494:	b590      	push	{r4, r7, lr}
 800d496:	b08f      	sub	sp, #60	; 0x3c
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	689a      	ldr	r2, [r3, #8]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3320      	adds	r3, #32
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4798      	blx	r3
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d4ba:	d205      	bcs.n	800d4c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d4bc:	4b86      	ldr	r3, [pc, #536]	; (800d6d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d4be:	4a87      	ldr	r2, [pc, #540]	; (800d6dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d4c0:	21a7      	movs	r1, #167	; 0xa7
 800d4c2:	4887      	ldr	r0, [pc, #540]	; (800d6e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d4c4:	f018 f91c 	bl	8025700 <__assert_func>
 800d4c8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	3320      	adds	r3, #32
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4798      	blx	r3
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b0f      	cmp	r3, #15
 800d4e0:	d805      	bhi.n	800d4ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d4e2:	4b80      	ldr	r3, [pc, #512]	; (800d6e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d4e4:	4a7d      	ldr	r2, [pc, #500]	; (800d6dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d4e6:	21a8      	movs	r1, #168	; 0xa8
 800d4e8:	487d      	ldr	r0, [pc, #500]	; (800d6e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d4ea:	f018 f909 	bl	8025700 <__assert_func>
 800d4ee:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	68da      	ldr	r2, [r3, #12]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3320      	adds	r3, #32
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4610      	mov	r0, r2
 800d500:	4798      	blx	r3
 800d502:	4603      	mov	r3, r0
 800d504:	2b4f      	cmp	r3, #79	; 0x4f
 800d506:	d805      	bhi.n	800d514 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d508:	4b77      	ldr	r3, [pc, #476]	; (800d6e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d50a:	4a74      	ldr	r2, [pc, #464]	; (800d6dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d50c:	21a9      	movs	r1, #169	; 0xa9
 800d50e:	4874      	ldr	r0, [pc, #464]	; (800d6e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d510:	f018 f8f6 	bl	8025700 <__assert_func>
 800d514:	bf00      	nop
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d522:	f00b ff6d 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d526:	4603      	mov	r3, r0
 800d528:	4618      	mov	r0, r3
 800d52a:	f00b ff85 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d008      	beq.n	800d548 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d536:	6a3b      	ldr	r3, [r7, #32]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	6a3b      	ldr	r3, [r7, #32]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	330c      	adds	r3, #12
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
    if (*currentTrans)
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d007      	beq.n	800d560 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d550:	6a3b      	ldr	r3, [r7, #32]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4610      	mov	r0, r2
 800d55e:	4798      	blx	r3
    if (*currentScreen)
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d008      	beq.n	800d57a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3314      	adds	r3, #20
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4610      	mov	r0, r2
 800d578:	4798      	blx	r3
    if (*currentPresenter)
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d008      	beq.n	800d594 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3304      	adds	r3, #4
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4610      	mov	r0, r2
 800d592:	4798      	blx	r3
    if (*currentScreen)
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d007      	beq.n	800d5ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	4798      	blx	r3
    if (*currentPresenter)
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d008      	beq.n	800d5c6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3308      	adds	r3, #8
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f000 ff9d 	bl	800e50c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	2050      	movs	r0, #80	; 0x50
 800d5d8:	f7fe fdd6 	bl	800c188 <_ZnwjPv>
 800d5dc:	4604      	mov	r4, r0
 800d5de:	2c00      	cmp	r4, #0
 800d5e0:	d005      	beq.n	800d5ee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d5e2:	2114      	movs	r1, #20
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 fffb 	bl	800e5e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800d5ea:	4623      	mov	r3, r4
 800d5ec:	e000      	b.n	800d5f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 fe68 	bl	800e2ce <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d5fe:	4603      	mov	r3, r0
 800d600:	4619      	mov	r1, r3
 800d602:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d606:	f7fe fdbf 	bl	800c188 <_ZnwjPv>
 800d60a:	4604      	mov	r4, r0
 800d60c:	2c00      	cmp	r4, #0
 800d60e:	d004      	beq.n	800d61a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d610:	4620      	mov	r0, r4
 800d612:	f006 f9e5 	bl	80139e0 <_ZN10screenViewC1Ev>
 800d616:	4623      	mov	r3, r4
 800d618:	e000      	b.n	800d61c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d61a:	4623      	mov	r3, r4
 800d61c:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	2100      	movs	r1, #0
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fe65 	bl	800e2f4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d62a:	4603      	mov	r3, r0
 800d62c:	4619      	mov	r1, r3
 800d62e:	2010      	movs	r0, #16
 800d630:	f7fe fdaa 	bl	800c188 <_ZnwjPv>
 800d634:	4604      	mov	r4, r0
 800d636:	2c00      	cmp	r4, #0
 800d638:	d005      	beq.n	800d646 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d63a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d63c:	4620      	mov	r0, r4
 800d63e:	f006 f977 	bl	8013930 <_ZN15screenPresenterC1ER10screenView>
 800d642:	4623      	mov	r3, r4
 800d644:	e000      	b.n	800d648 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d646:	4623      	mov	r3, r4
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d64e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d654:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d65a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d002      	beq.n	800d668 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	3304      	adds	r3, #4
 800d666:	e000      	b.n	800d66a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d668:	2300      	movs	r3, #0
 800d66a:	4619      	mov	r1, r3
 800d66c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d66e:	f7ff f901 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	3304      	adds	r3, #4
 800d676:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff f986 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d682:	4618      	mov	r0, r3
 800d684:	f000 fe49 	bl	800e31a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	61fb      	str	r3, [r7, #28]
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	61bb      	str	r3, [r7, #24]
 800d690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d692:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	330c      	adds	r3, #12
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	69f8      	ldr	r0, [r7, #28]
 800d69e:	4798      	blx	r3
    newPresenter->activate();
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	69b8      	ldr	r0, [r7, #24]
 800d6a8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d6aa:	6979      	ldr	r1, [r7, #20]
 800d6ac:	69f8      	ldr	r0, [r7, #28]
 800d6ae:	f00c ffd9 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3310      	adds	r3, #16
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6978      	ldr	r0, [r7, #20]
 800d6bc:	4798      	blx	r3
    Application::getInstance()->draw();
 800d6be:	f00b fe9f 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	6813      	ldr	r3, [r2, #0]
 800d6c6:	3330      	adds	r3, #48	; 0x30
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	4798      	blx	r3
    return newPresenter;
 800d6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	373c      	adds	r7, #60	; 0x3c
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd90      	pop	{r4, r7, pc}
 800d6d8:	0802680c 	.word	0x0802680c
 800d6dc:	080277e0 	.word	0x080277e0
 800d6e0:	0802689c 	.word	0x0802689c
 800d6e4:	080268e0 	.word	0x080268e0
 800d6e8:	08026984 	.word	0x08026984

0800d6ec <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b08f      	sub	sp, #60	; 0x3c
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689a      	ldr	r2, [r3, #8]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3320      	adds	r3, #32
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4610      	mov	r0, r2
 800d70a:	4798      	blx	r3
 800d70c:	4603      	mov	r3, r0
 800d70e:	f5b3 7f46 	cmp.w	r3, #792	; 0x318
 800d712:	d205      	bcs.n	800d720 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d714:	4b86      	ldr	r3, [pc, #536]	; (800d930 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d716:	4a87      	ldr	r2, [pc, #540]	; (800d934 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d718:	21a7      	movs	r1, #167	; 0xa7
 800d71a:	4887      	ldr	r0, [pc, #540]	; (800d938 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d71c:	f017 fff0 	bl	8025700 <__assert_func>
 800d720:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	685a      	ldr	r2, [r3, #4]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3320      	adds	r3, #32
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	4603      	mov	r3, r0
 800d736:	2b0f      	cmp	r3, #15
 800d738:	d805      	bhi.n	800d746 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d73a:	4b80      	ldr	r3, [pc, #512]	; (800d93c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d73c:	4a7d      	ldr	r2, [pc, #500]	; (800d934 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d73e:	21a8      	movs	r1, #168	; 0xa8
 800d740:	487d      	ldr	r0, [pc, #500]	; (800d938 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d742:	f017 ffdd 	bl	8025700 <__assert_func>
 800d746:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68da      	ldr	r2, [r3, #12]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3320      	adds	r3, #32
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4610      	mov	r0, r2
 800d758:	4798      	blx	r3
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b0b      	cmp	r3, #11
 800d75e:	d805      	bhi.n	800d76c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d760:	4b77      	ldr	r3, [pc, #476]	; (800d940 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d762:	4a74      	ldr	r2, [pc, #464]	; (800d934 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d764:	21a9      	movs	r1, #169	; 0xa9
 800d766:	4874      	ldr	r0, [pc, #464]	; (800d938 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d768:	f017 ffca 	bl	8025700 <__assert_func>
 800d76c:	bf00      	nop
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	62bb      	str	r3, [r7, #40]	; 0x28
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	627b      	str	r3, [r7, #36]	; 0x24
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d77a:	f00b fe41 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d77e:	4603      	mov	r3, r0
 800d780:	4618      	mov	r0, r3
 800d782:	f00b fe59 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d008      	beq.n	800d7a0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d78e:	6a3b      	ldr	r3, [r7, #32]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	330c      	adds	r3, #12
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4610      	mov	r0, r2
 800d79e:	4798      	blx	r3
    if (*currentTrans)
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d007      	beq.n	800d7b8 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	6a3b      	ldr	r3, [r7, #32]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4798      	blx	r3
    if (*currentScreen)
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d008      	beq.n	800d7d2 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3314      	adds	r3, #20
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	4798      	blx	r3
    if (*currentPresenter)
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d008      	beq.n	800d7ec <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	4798      	blx	r3
    if (*currentScreen)
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d007      	beq.n	800d804 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4610      	mov	r0, r2
 800d802:	4798      	blx	r3
    if (*currentPresenter)
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d008      	beq.n	800d81e <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3308      	adds	r3, #8
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4610      	mov	r0, r2
 800d81c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	2100      	movs	r1, #0
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fd3f 	bl	800e2a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d82a:	4603      	mov	r3, r0
 800d82c:	4619      	mov	r1, r3
 800d82e:	200c      	movs	r0, #12
 800d830:	f7fe fcaa 	bl	800c188 <_ZnwjPv>
 800d834:	4604      	mov	r4, r0
 800d836:	2c00      	cmp	r4, #0
 800d838:	d004      	beq.n	800d844 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d83a:	4620      	mov	r0, r4
 800d83c:	f7ff fbc0 	bl	800cfc0 <_ZN8touchgfx12NoTransitionC1Ev>
 800d840:	4623      	mov	r3, r4
 800d842:	e000      	b.n	800d846 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d844:	4623      	mov	r3, r4
 800d846:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	2100      	movs	r1, #0
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 ff4a 	bl	800e6e8 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>
 800d854:	4603      	mov	r3, r0
 800d856:	4619      	mov	r1, r3
 800d858:	f44f 7046 	mov.w	r0, #792	; 0x318
 800d85c:	f7fe fc94 	bl	800c188 <_ZnwjPv>
 800d860:	4604      	mov	r4, r0
 800d862:	2c00      	cmp	r4, #0
 800d864:	d004      	beq.n	800d870 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d866:	4620      	mov	r0, r4
 800d868:	f005 fb6c 	bl	8012f44 <_ZN9MusicViewC1Ev>
 800d86c:	4623      	mov	r3, r4
 800d86e:	e000      	b.n	800d872 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d870:	4623      	mov	r3, r4
 800d872:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	2100      	movs	r1, #0
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 ff47 	bl	800e70e <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>
 800d880:	4603      	mov	r3, r0
 800d882:	4619      	mov	r1, r3
 800d884:	2010      	movs	r0, #16
 800d886:	f7fe fc7f 	bl	800c188 <_ZnwjPv>
 800d88a:	4604      	mov	r4, r0
 800d88c:	2c00      	cmp	r4, #0
 800d88e:	d005      	beq.n	800d89c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d892:	4620      	mov	r0, r4
 800d894:	f005 faf6 	bl	8012e84 <_ZN14MusicPresenterC1ER9MusicView>
 800d898:	4623      	mov	r3, r4
 800d89a:	e000      	b.n	800d89e <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d89c:	4623      	mov	r3, r4
 800d89e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8a4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8aa:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8b0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	e000      	b.n	800d8c0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d8c4:	f7fe ffd6 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7ff f85b 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 ff2b 	bl	800e734 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>
 800d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e0:	61fb      	str	r3, [r7, #28]
 800d8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e4:	61bb      	str	r3, [r7, #24]
 800d8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	330c      	adds	r3, #12
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	69f8      	ldr	r0, [r7, #28]
 800d8f4:	4798      	blx	r3
    newPresenter->activate();
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	69b8      	ldr	r0, [r7, #24]
 800d8fe:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d900:	6979      	ldr	r1, [r7, #20]
 800d902:	69f8      	ldr	r0, [r7, #28]
 800d904:	f00c feae 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3310      	adds	r3, #16
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6978      	ldr	r0, [r7, #20]
 800d912:	4798      	blx	r3
    Application::getInstance()->draw();
 800d914:	f00b fd74 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d918:	4602      	mov	r2, r0
 800d91a:	6813      	ldr	r3, [r2, #0]
 800d91c:	3330      	adds	r3, #48	; 0x30
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4610      	mov	r0, r2
 800d922:	4798      	blx	r3
    return newPresenter;
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d926:	4618      	mov	r0, r3
 800d928:	373c      	adds	r7, #60	; 0x3c
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd90      	pop	{r4, r7, pc}
 800d92e:	bf00      	nop
 800d930:	0802680c 	.word	0x0802680c
 800d934:	08027900 	.word	0x08027900
 800d938:	0802689c 	.word	0x0802689c
 800d93c:	080268e0 	.word	0x080268e0
 800d940:	08026984 	.word	0x08026984

0800d944 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b08f      	sub	sp, #60	; 0x3c
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	689a      	ldr	r2, [r3, #8]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3320      	adds	r3, #32
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4610      	mov	r0, r2
 800d962:	4798      	blx	r3
 800d964:	4603      	mov	r3, r0
 800d966:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800d96a:	d205      	bcs.n	800d978 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d96c:	4b86      	ldr	r3, [pc, #536]	; (800db88 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d96e:	4a87      	ldr	r2, [pc, #540]	; (800db8c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d970:	21a7      	movs	r1, #167	; 0xa7
 800d972:	4887      	ldr	r0, [pc, #540]	; (800db90 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d974:	f017 fec4 	bl	8025700 <__assert_func>
 800d978:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	3320      	adds	r3, #32
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b0f      	cmp	r3, #15
 800d990:	d805      	bhi.n	800d99e <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d992:	4b80      	ldr	r3, [pc, #512]	; (800db94 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d994:	4a7d      	ldr	r2, [pc, #500]	; (800db8c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d996:	21a8      	movs	r1, #168	; 0xa8
 800d998:	487d      	ldr	r0, [pc, #500]	; (800db90 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d99a:	f017 feb1 	bl	8025700 <__assert_func>
 800d99e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	68da      	ldr	r2, [r3, #12]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	3320      	adds	r3, #32
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4610      	mov	r0, r2
 800d9b0:	4798      	blx	r3
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b0b      	cmp	r3, #11
 800d9b6:	d805      	bhi.n	800d9c4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d9b8:	4b77      	ldr	r3, [pc, #476]	; (800db98 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d9ba:	4a74      	ldr	r2, [pc, #464]	; (800db8c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d9bc:	21a9      	movs	r1, #169	; 0xa9
 800d9be:	4874      	ldr	r0, [pc, #464]	; (800db90 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d9c0:	f017 fe9e 	bl	8025700 <__assert_func>
 800d9c4:	bf00      	nop
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d9d2:	f00b fd15 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f00b fd2d 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d008      	beq.n	800d9f8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	330c      	adds	r3, #12
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	4798      	blx	r3
    if (*currentTrans)
 800d9f8:	6a3b      	ldr	r3, [r7, #32]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d007      	beq.n	800da10 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800da00:	6a3b      	ldr	r3, [r7, #32]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4610      	mov	r0, r2
 800da0e:	4798      	blx	r3
    if (*currentScreen)
 800da10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d008      	beq.n	800da2a <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3314      	adds	r3, #20
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4610      	mov	r0, r2
 800da28:	4798      	blx	r3
    if (*currentPresenter)
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d008      	beq.n	800da44 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3304      	adds	r3, #4
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4610      	mov	r0, r2
 800da42:	4798      	blx	r3
    if (*currentScreen)
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d007      	beq.n	800da5c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800da4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4610      	mov	r0, r2
 800da5a:	4798      	blx	r3
    if (*currentPresenter)
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d008      	beq.n	800da76 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3308      	adds	r3, #8
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4610      	mov	r0, r2
 800da74:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	2100      	movs	r1, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f000 fc13 	bl	800e2a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800da82:	4603      	mov	r3, r0
 800da84:	4619      	mov	r1, r3
 800da86:	200c      	movs	r0, #12
 800da88:	f7fe fb7e 	bl	800c188 <_ZnwjPv>
 800da8c:	4604      	mov	r4, r0
 800da8e:	2c00      	cmp	r4, #0
 800da90:	d004      	beq.n	800da9c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800da92:	4620      	mov	r0, r4
 800da94:	f7ff fa94 	bl	800cfc0 <_ZN8touchgfx12NoTransitionC1Ev>
 800da98:	4623      	mov	r3, r4
 800da9a:	e000      	b.n	800da9e <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800da9c:	4623      	mov	r3, r4
 800da9e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	2100      	movs	r1, #0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 fe52 	bl	800e750 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>
 800daac:	4603      	mov	r3, r0
 800daae:	4619      	mov	r1, r3
 800dab0:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800dab4:	f7fe fb68 	bl	800c188 <_ZnwjPv>
 800dab8:	4604      	mov	r4, r0
 800daba:	2c00      	cmp	r4, #0
 800dabc:	d004      	beq.n	800dac8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800dabe:	4620      	mov	r0, r4
 800dac0:	f005 f958 	bl	8012d74 <_ZN12gameoverViewC1Ev>
 800dac4:	4623      	mov	r3, r4
 800dac6:	e000      	b.n	800daca <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800dac8:	4623      	mov	r3, r4
 800daca:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	2100      	movs	r1, #0
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 fe4f 	bl	800e776 <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>
 800dad8:	4603      	mov	r3, r0
 800dada:	4619      	mov	r1, r3
 800dadc:	2010      	movs	r0, #16
 800dade:	f7fe fb53 	bl	800c188 <_ZnwjPv>
 800dae2:	4604      	mov	r4, r0
 800dae4:	2c00      	cmp	r4, #0
 800dae6:	d005      	beq.n	800daf4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800dae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800daea:	4620      	mov	r0, r4
 800daec:	f005 f8ea 	bl	8012cc4 <_ZN17gameoverPresenterC1ER12gameoverView>
 800daf0:	4623      	mov	r3, r4
 800daf2:	e000      	b.n	800daf6 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800daf4:	4623      	mov	r3, r4
 800daf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dafc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db02:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db08:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800db0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	3304      	adds	r3, #4
 800db14:	e000      	b.n	800db18 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800db16:	2300      	movs	r3, #0
 800db18:	4619      	mov	r1, r3
 800db1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800db1c:	f7fe feaa 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	3304      	adds	r3, #4
 800db24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe ff2f 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db30:	4618      	mov	r0, r3
 800db32:	f000 fe33 	bl	800e79c <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	61fb      	str	r3, [r7, #28]
 800db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3c:	61bb      	str	r3, [r7, #24]
 800db3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db40:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	330c      	adds	r3, #12
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	69f8      	ldr	r0, [r7, #28]
 800db4c:	4798      	blx	r3
    newPresenter->activate();
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	69b8      	ldr	r0, [r7, #24]
 800db56:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800db58:	6979      	ldr	r1, [r7, #20]
 800db5a:	69f8      	ldr	r0, [r7, #28]
 800db5c:	f00c fd82 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3310      	adds	r3, #16
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6978      	ldr	r0, [r7, #20]
 800db6a:	4798      	blx	r3
    Application::getInstance()->draw();
 800db6c:	f00b fc48 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800db70:	4602      	mov	r2, r0
 800db72:	6813      	ldr	r3, [r2, #0]
 800db74:	3330      	adds	r3, #48	; 0x30
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4610      	mov	r0, r2
 800db7a:	4798      	blx	r3
    return newPresenter;
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800db7e:	4618      	mov	r0, r3
 800db80:	373c      	adds	r7, #60	; 0x3c
 800db82:	46bd      	mov	sp, r7
 800db84:	bd90      	pop	{r4, r7, pc}
 800db86:	bf00      	nop
 800db88:	0802680c 	.word	0x0802680c
 800db8c:	08027a00 	.word	0x08027a00
 800db90:	0802689c 	.word	0x0802689c
 800db94:	080268e0 	.word	0x080268e0
 800db98:	08026984 	.word	0x08026984

0800db9c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800db9c:	b590      	push	{r4, r7, lr}
 800db9e:	b08f      	sub	sp, #60	; 0x3c
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
 800dba8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	689a      	ldr	r2, [r3, #8]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3320      	adds	r3, #32
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4798      	blx	r3
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d805      	bhi.n	800dbd2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800dbc6:	4b87      	ldr	r3, [pc, #540]	; (800dde4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800dbc8:	4a87      	ldr	r2, [pc, #540]	; (800dde8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dbca:	21a7      	movs	r1, #167	; 0xa7
 800dbcc:	4887      	ldr	r0, [pc, #540]	; (800ddec <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dbce:	f017 fd97 	bl	8025700 <__assert_func>
 800dbd2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3320      	adds	r3, #32
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	4798      	blx	r3
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b0f      	cmp	r3, #15
 800dbea:	d805      	bhi.n	800dbf8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800dbec:	4b80      	ldr	r3, [pc, #512]	; (800ddf0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800dbee:	4a7e      	ldr	r2, [pc, #504]	; (800dde8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dbf0:	21a8      	movs	r1, #168	; 0xa8
 800dbf2:	487e      	ldr	r0, [pc, #504]	; (800ddec <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dbf4:	f017 fd84 	bl	8025700 <__assert_func>
 800dbf8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	68da      	ldr	r2, [r3, #12]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3320      	adds	r3, #32
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4610      	mov	r0, r2
 800dc0a:	4798      	blx	r3
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b4f      	cmp	r3, #79	; 0x4f
 800dc10:	d805      	bhi.n	800dc1e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800dc12:	4b78      	ldr	r3, [pc, #480]	; (800ddf4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 800dc14:	4a74      	ldr	r2, [pc, #464]	; (800dde8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dc16:	21a9      	movs	r1, #169	; 0xa9
 800dc18:	4874      	ldr	r0, [pc, #464]	; (800ddec <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dc1a:	f017 fd71 	bl	8025700 <__assert_func>
 800dc1e:	bf00      	nop
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	627b      	str	r3, [r7, #36]	; 0x24
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dc2c:	f00b fbe8 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800dc30:	4603      	mov	r3, r0
 800dc32:	4618      	mov	r0, r3
 800dc34:	f00b fc00 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dc38:	6a3b      	ldr	r3, [r7, #32]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d008      	beq.n	800dc52 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	330c      	adds	r3, #12
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4610      	mov	r0, r2
 800dc50:	4798      	blx	r3
    if (*currentTrans)
 800dc52:	6a3b      	ldr	r3, [r7, #32]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d007      	beq.n	800dc6a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4610      	mov	r0, r2
 800dc68:	4798      	blx	r3
    if (*currentScreen)
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d008      	beq.n	800dc84 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	3314      	adds	r3, #20
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4610      	mov	r0, r2
 800dc82:	4798      	blx	r3
    if (*currentPresenter)
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d008      	beq.n	800dc9e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3304      	adds	r3, #4
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	4798      	blx	r3
    if (*currentScreen)
 800dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d007      	beq.n	800dcb6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	4798      	blx	r3
    if (*currentPresenter)
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d008      	beq.n	800dcd0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3308      	adds	r3, #8
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4610      	mov	r0, r2
 800dcce:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fc18 	bl	800e50c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	4619      	mov	r1, r3
 800dce0:	2050      	movs	r0, #80	; 0x50
 800dce2:	f7fe fa51 	bl	800c188 <_ZnwjPv>
 800dce6:	4604      	mov	r4, r0
 800dce8:	2c00      	cmp	r4, #0
 800dcea:	d005      	beq.n	800dcf8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800dcec:	2114      	movs	r1, #20
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f000 fc76 	bl	800e5e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	e000      	b.n	800dcfa <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 800dcf8:	4623      	mov	r3, r4
 800dcfa:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fd58 	bl	800e7b8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	f641 6050 	movw	r0, #7760	; 0x1e50
 800dd10:	f7fe fa3a 	bl	800c188 <_ZnwjPv>
 800dd14:	4604      	mov	r4, r0
 800dd16:	2c00      	cmp	r4, #0
 800dd18:	d004      	beq.n	800dd24 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f005 fa9a 	bl	8013254 <_ZN8PongViewC1Ev>
 800dd20:	4623      	mov	r3, r4
 800dd22:	e000      	b.n	800dd26 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 800dd24:	4623      	mov	r3, r4
 800dd26:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 fd55 	bl	800e7de <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800dd34:	4603      	mov	r3, r0
 800dd36:	4619      	mov	r1, r3
 800dd38:	2010      	movs	r0, #16
 800dd3a:	f7fe fa25 	bl	800c188 <_ZnwjPv>
 800dd3e:	4604      	mov	r4, r0
 800dd40:	2c00      	cmp	r4, #0
 800dd42:	d005      	beq.n	800dd50 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800dd44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd46:	4620      	mov	r0, r4
 800dd48:	f005 fa12 	bl	8013170 <_ZN13PongPresenterC1ER8PongView>
 800dd4c:	4623      	mov	r3, r4
 800dd4e:	e000      	b.n	800dd52 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800dd50:	4623      	mov	r3, r4
 800dd52:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd58:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd5e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd64:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	3304      	adds	r3, #4
 800dd70:	e000      	b.n	800dd74 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 800dd72:	2300      	movs	r3, #0
 800dd74:	4619      	mov	r1, r3
 800dd76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dd78:	f7fe fd7c 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7e:	3304      	adds	r3, #4
 800dd80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe fe01 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f000 fd39 	bl	800e804 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800dd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd94:	61fb      	str	r3, [r7, #28]
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	61bb      	str	r3, [r7, #24]
 800dd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd9c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	330c      	adds	r3, #12
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	69f8      	ldr	r0, [r7, #28]
 800dda8:	4798      	blx	r3
    newPresenter->activate();
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	69b8      	ldr	r0, [r7, #24]
 800ddb2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ddb4:	6979      	ldr	r1, [r7, #20]
 800ddb6:	69f8      	ldr	r0, [r7, #28]
 800ddb8:	f00c fc54 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	3310      	adds	r3, #16
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	6978      	ldr	r0, [r7, #20]
 800ddc6:	4798      	blx	r3
    Application::getInstance()->draw();
 800ddc8:	f00b fb1a 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	6813      	ldr	r3, [r2, #0]
 800ddd0:	3330      	adds	r3, #48	; 0x30
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4610      	mov	r0, r2
 800ddd6:	4798      	blx	r3
    return newPresenter;
 800ddd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	373c      	adds	r7, #60	; 0x3c
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd90      	pop	{r4, r7, pc}
 800dde2:	bf00      	nop
 800dde4:	0802680c 	.word	0x0802680c
 800dde8:	08027b08 	.word	0x08027b08
 800ddec:	0802689c 	.word	0x0802689c
 800ddf0:	080268e0 	.word	0x080268e0
 800ddf4:	08026984 	.word	0x08026984

0800ddf8 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ddf8:	b590      	push	{r4, r7, lr}
 800ddfa:	b08f      	sub	sp, #60	; 0x3c
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
 800de04:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	689a      	ldr	r2, [r3, #8]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3320      	adds	r3, #32
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4610      	mov	r0, r2
 800de16:	4798      	blx	r3
 800de18:	4602      	mov	r2, r0
 800de1a:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800de1e:	429a      	cmp	r2, r3
 800de20:	d805      	bhi.n	800de2e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800de22:	4b86      	ldr	r3, [pc, #536]	; (800e03c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800de24:	4a86      	ldr	r2, [pc, #536]	; (800e040 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de26:	21a7      	movs	r1, #167	; 0xa7
 800de28:	4886      	ldr	r0, [pc, #536]	; (800e044 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de2a:	f017 fc69 	bl	8025700 <__assert_func>
 800de2e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	685a      	ldr	r2, [r3, #4]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	3320      	adds	r3, #32
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4610      	mov	r0, r2
 800de40:	4798      	blx	r3
 800de42:	4603      	mov	r3, r0
 800de44:	2b0f      	cmp	r3, #15
 800de46:	d805      	bhi.n	800de54 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800de48:	4b7f      	ldr	r3, [pc, #508]	; (800e048 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800de4a:	4a7d      	ldr	r2, [pc, #500]	; (800e040 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de4c:	21a8      	movs	r1, #168	; 0xa8
 800de4e:	487d      	ldr	r0, [pc, #500]	; (800e044 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de50:	f017 fc56 	bl	8025700 <__assert_func>
 800de54:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	68da      	ldr	r2, [r3, #12]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3320      	adds	r3, #32
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4610      	mov	r0, r2
 800de66:	4798      	blx	r3
 800de68:	4603      	mov	r3, r0
 800de6a:	2b0b      	cmp	r3, #11
 800de6c:	d805      	bhi.n	800de7a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800de6e:	4b77      	ldr	r3, [pc, #476]	; (800e04c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800de70:	4a73      	ldr	r2, [pc, #460]	; (800e040 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de72:	21a9      	movs	r1, #169	; 0xa9
 800de74:	4873      	ldr	r0, [pc, #460]	; (800e044 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de76:	f017 fc43 	bl	8025700 <__assert_func>
 800de7a:	bf00      	nop
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	627b      	str	r3, [r7, #36]	; 0x24
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800de88:	f00b faba 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800de8c:	4603      	mov	r3, r0
 800de8e:	4618      	mov	r0, r3
 800de90:	f00b fad2 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d008      	beq.n	800deae <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800de9c:	6a3b      	ldr	r3, [r7, #32]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	6a3b      	ldr	r3, [r7, #32]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	330c      	adds	r3, #12
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4610      	mov	r0, r2
 800deac:	4798      	blx	r3
    if (*currentTrans)
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d007      	beq.n	800dec6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	6a3b      	ldr	r3, [r7, #32]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4610      	mov	r0, r2
 800dec4:	4798      	blx	r3
    if (*currentScreen)
 800dec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d008      	beq.n	800dee0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3314      	adds	r3, #20
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4610      	mov	r0, r2
 800dede:	4798      	blx	r3
    if (*currentPresenter)
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d008      	beq.n	800defa <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3304      	adds	r3, #4
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4610      	mov	r0, r2
 800def8:	4798      	blx	r3
    if (*currentScreen)
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d007      	beq.n	800df12 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800df02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4610      	mov	r0, r2
 800df10:	4798      	blx	r3
    if (*currentPresenter)
 800df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d008      	beq.n	800df2c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	3308      	adds	r3, #8
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4610      	mov	r0, r2
 800df2a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	2100      	movs	r1, #0
 800df32:	4618      	mov	r0, r3
 800df34:	f000 f9b8 	bl	800e2a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800df38:	4603      	mov	r3, r0
 800df3a:	4619      	mov	r1, r3
 800df3c:	200c      	movs	r0, #12
 800df3e:	f7fe f923 	bl	800c188 <_ZnwjPv>
 800df42:	4604      	mov	r4, r0
 800df44:	2c00      	cmp	r4, #0
 800df46:	d004      	beq.n	800df52 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800df48:	4620      	mov	r0, r4
 800df4a:	f7ff f839 	bl	800cfc0 <_ZN8touchgfx12NoTransitionC1Ev>
 800df4e:	4623      	mov	r3, r4
 800df50:	e000      	b.n	800df54 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800df52:	4623      	mov	r3, r4
 800df54:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	2100      	movs	r1, #0
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 fc2b 	bl	800e7b8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800df62:	4603      	mov	r3, r0
 800df64:	4619      	mov	r1, r3
 800df66:	f641 6050 	movw	r0, #7760	; 0x1e50
 800df6a:	f7fe f90d 	bl	800c188 <_ZnwjPv>
 800df6e:	4604      	mov	r4, r0
 800df70:	2c00      	cmp	r4, #0
 800df72:	d004      	beq.n	800df7e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800df74:	4620      	mov	r0, r4
 800df76:	f005 f96d 	bl	8013254 <_ZN8PongViewC1Ev>
 800df7a:	4623      	mov	r3, r4
 800df7c:	e000      	b.n	800df80 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800df7e:	4623      	mov	r3, r4
 800df80:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	2100      	movs	r1, #0
 800df88:	4618      	mov	r0, r3
 800df8a:	f000 fc28 	bl	800e7de <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800df8e:	4603      	mov	r3, r0
 800df90:	4619      	mov	r1, r3
 800df92:	2010      	movs	r0, #16
 800df94:	f7fe f8f8 	bl	800c188 <_ZnwjPv>
 800df98:	4604      	mov	r4, r0
 800df9a:	2c00      	cmp	r4, #0
 800df9c:	d005      	beq.n	800dfaa <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800df9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f005 f8e5 	bl	8013170 <_ZN13PongPresenterC1ER8PongView>
 800dfa6:	4623      	mov	r3, r4
 800dfa8:	e000      	b.n	800dfac <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800dfaa:	4623      	mov	r3, r4
 800dfac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfb2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfb8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfbe:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	3304      	adds	r3, #4
 800dfca:	e000      	b.n	800dfce <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dfd2:	f7fe fc4f 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd8:	3304      	adds	r3, #4
 800dfda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fe fcd4 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f000 fc0c 	bl	800e804 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800dfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfee:	61fb      	str	r3, [r7, #28]
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	61bb      	str	r3, [r7, #24]
 800dff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	330c      	adds	r3, #12
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	69f8      	ldr	r0, [r7, #28]
 800e002:	4798      	blx	r3
    newPresenter->activate();
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	69b8      	ldr	r0, [r7, #24]
 800e00c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e00e:	6979      	ldr	r1, [r7, #20]
 800e010:	69f8      	ldr	r0, [r7, #28]
 800e012:	f00c fb27 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3310      	adds	r3, #16
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	4798      	blx	r3
    Application::getInstance()->draw();
 800e022:	f00b f9ed 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800e026:	4602      	mov	r2, r0
 800e028:	6813      	ldr	r3, [r2, #0]
 800e02a:	3330      	adds	r3, #48	; 0x30
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4610      	mov	r0, r2
 800e030:	4798      	blx	r3
    return newPresenter;
 800e032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e034:	4618      	mov	r0, r3
 800e036:	373c      	adds	r7, #60	; 0x3c
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd90      	pop	{r4, r7, pc}
 800e03c:	0802680c 	.word	0x0802680c
 800e040:	08027c24 	.word	0x08027c24
 800e044:	0802689c 	.word	0x0802689c
 800e048:	080268e0 	.word	0x080268e0
 800e04c:	08026984 	.word	0x08026984

0800e050 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e050:	b590      	push	{r4, r7, lr}
 800e052:	b08f      	sub	sp, #60	; 0x3c
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	689a      	ldr	r2, [r3, #8]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3320      	adds	r3, #32
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4610      	mov	r0, r2
 800e06e:	4798      	blx	r3
 800e070:	4603      	mov	r3, r0
 800e072:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 800e076:	d205      	bcs.n	800e084 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800e078:	4b86      	ldr	r3, [pc, #536]	; (800e294 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800e07a:	4a87      	ldr	r2, [pc, #540]	; (800e298 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e07c:	21a7      	movs	r1, #167	; 0xa7
 800e07e:	4887      	ldr	r0, [pc, #540]	; (800e29c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e080:	f017 fb3e 	bl	8025700 <__assert_func>
 800e084:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685a      	ldr	r2, [r3, #4]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3320      	adds	r3, #32
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
 800e098:	4603      	mov	r3, r0
 800e09a:	2b0f      	cmp	r3, #15
 800e09c:	d805      	bhi.n	800e0aa <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800e09e:	4b80      	ldr	r3, [pc, #512]	; (800e2a0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800e0a0:	4a7d      	ldr	r2, [pc, #500]	; (800e298 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e0a2:	21a8      	movs	r1, #168	; 0xa8
 800e0a4:	487d      	ldr	r0, [pc, #500]	; (800e29c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e0a6:	f017 fb2b 	bl	8025700 <__assert_func>
 800e0aa:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	68da      	ldr	r2, [r3, #12]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	3320      	adds	r3, #32
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	4798      	blx	r3
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b4f      	cmp	r3, #79	; 0x4f
 800e0c2:	d805      	bhi.n	800e0d0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800e0c4:	4b77      	ldr	r3, [pc, #476]	; (800e2a4 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800e0c6:	4a74      	ldr	r2, [pc, #464]	; (800e298 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e0c8:	21a9      	movs	r1, #169	; 0xa9
 800e0ca:	4874      	ldr	r0, [pc, #464]	; (800e29c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e0cc:	f017 fb18 	bl	8025700 <__assert_func>
 800e0d0:	bf00      	nop
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e0de:	f00b f98f 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f00b f9a7 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d008      	beq.n	800e104 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800e0f2:	6a3b      	ldr	r3, [r7, #32]
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	6a3b      	ldr	r3, [r7, #32]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	330c      	adds	r3, #12
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4610      	mov	r0, r2
 800e102:	4798      	blx	r3
    if (*currentTrans)
 800e104:	6a3b      	ldr	r3, [r7, #32]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d007      	beq.n	800e11c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	6a3b      	ldr	r3, [r7, #32]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4610      	mov	r0, r2
 800e11a:	4798      	blx	r3
    if (*currentScreen)
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d008      	beq.n	800e136 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800e124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	3314      	adds	r3, #20
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4610      	mov	r0, r2
 800e134:	4798      	blx	r3
    if (*currentPresenter)
 800e136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d008      	beq.n	800e150 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3304      	adds	r3, #4
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4610      	mov	r0, r2
 800e14e:	4798      	blx	r3
    if (*currentScreen)
 800e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d007      	beq.n	800e168 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4610      	mov	r0, r2
 800e166:	4798      	blx	r3
    if (*currentPresenter)
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d008      	beq.n	800e182 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3308      	adds	r3, #8
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4610      	mov	r0, r2
 800e180:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	2100      	movs	r1, #0
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 f9bf 	bl	800e50c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800e18e:	4603      	mov	r3, r0
 800e190:	4619      	mov	r1, r3
 800e192:	2050      	movs	r0, #80	; 0x50
 800e194:	f7fd fff8 	bl	800c188 <_ZnwjPv>
 800e198:	4604      	mov	r4, r0
 800e19a:	2c00      	cmp	r4, #0
 800e19c:	d005      	beq.n	800e1aa <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800e19e:	2114      	movs	r1, #20
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f000 fa1d 	bl	800e5e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800e1a6:	4623      	mov	r3, r4
 800e1a8:	e000      	b.n	800e1ac <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800e1aa:	4623      	mov	r3, r4
 800e1ac:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 fb33 	bl	800e820 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	4619      	mov	r1, r3
 800e1be:	f44f 7092 	mov.w	r0, #292	; 0x124
 800e1c2:	f7fd ffe1 	bl	800c188 <_ZnwjPv>
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	2c00      	cmp	r4, #0
 800e1ca:	d004      	beq.n	800e1d6 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f004 fd1b 	bl	8012c08 <_ZN11galleryViewC1Ev>
 800e1d2:	4623      	mov	r3, r4
 800e1d4:	e000      	b.n	800e1d8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800e1d6:	4623      	mov	r3, r4
 800e1d8:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	2100      	movs	r1, #0
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 fb30 	bl	800e846 <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	2010      	movs	r0, #16
 800e1ec:	f7fd ffcc 	bl	800c188 <_ZnwjPv>
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	2c00      	cmp	r4, #0
 800e1f4:	d005      	beq.n	800e202 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e1f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f004 fcad 	bl	8012b58 <_ZN16galleryPresenterC1ER11galleryView>
 800e1fe:	4623      	mov	r3, r4
 800e200:	e000      	b.n	800e204 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e202:	4623      	mov	r3, r4
 800e204:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e20a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e210:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e216:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e220:	3304      	adds	r3, #4
 800e222:	e000      	b.n	800e226 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800e224:	2300      	movs	r3, #0
 800e226:	4619      	mov	r1, r3
 800e228:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e22a:	f7fe fb23 	bl	800c874 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	3304      	adds	r3, #4
 800e232:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e234:	4618      	mov	r0, r3
 800e236:	f7fe fba8 	bl	800c98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e23e:	4618      	mov	r0, r3
 800e240:	f000 fb14 	bl	800e86c <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	61fb      	str	r3, [r7, #28]
 800e248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24a:	61bb      	str	r3, [r7, #24]
 800e24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	330c      	adds	r3, #12
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	69f8      	ldr	r0, [r7, #28]
 800e25a:	4798      	blx	r3
    newPresenter->activate();
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	69b8      	ldr	r0, [r7, #24]
 800e264:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e266:	6979      	ldr	r1, [r7, #20]
 800e268:	69f8      	ldr	r0, [r7, #28]
 800e26a:	f00c f9fb 	bl	801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3310      	adds	r3, #16
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	6978      	ldr	r0, [r7, #20]
 800e278:	4798      	blx	r3
    Application::getInstance()->draw();
 800e27a:	f00b f8c1 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800e27e:	4602      	mov	r2, r0
 800e280:	6813      	ldr	r3, [r2, #0]
 800e282:	3330      	adds	r3, #48	; 0x30
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4610      	mov	r0, r2
 800e288:	4798      	blx	r3
    return newPresenter;
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	373c      	adds	r7, #60	; 0x3c
 800e290:	46bd      	mov	sp, r7
 800e292:	bd90      	pop	{r4, r7, pc}
 800e294:	0802680c 	.word	0x0802680c
 800e298:	08027d24 	.word	0x08027d24
 800e29c:	0802689c 	.word	0x0802689c
 800e2a0:	080268e0 	.word	0x080268e0
 800e2a4:	08026984 	.word	0x08026984

0800e2a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	3324      	adds	r3, #36	; 0x24
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	887a      	ldrh	r2, [r7, #2]
 800e2be:	4611      	mov	r1, r2
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	4798      	blx	r3
 800e2c4:	4603      	mov	r3, r0
    }
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b082      	sub	sp, #8
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	3324      	adds	r3, #36	; 0x24
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	887a      	ldrh	r2, [r7, #2]
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	4798      	blx	r3
 800e2ea:	4603      	mov	r3, r0
    }
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3324      	adds	r3, #36	; 0x24
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	887a      	ldrh	r2, [r7, #2]
 800e30a:	4611      	mov	r1, r2
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	4798      	blx	r3
 800e310:	4603      	mov	r3, r0
    }
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800e31a:	b480      	push	{r7}
 800e31c:	b083      	sub	sp, #12
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
 800e322:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	683a      	ldr	r2, [r7, #0]
 800e328:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e32a:	bf00      	nop
 800e32c:	370c      	adds	r7, #12
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr

0800e336 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e336:	b580      	push	{r7, lr}
 800e338:	b082      	sub	sp, #8
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	460b      	mov	r3, r1
 800e340:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3324      	adds	r3, #36	; 0x24
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	887a      	ldrh	r2, [r7, #2]
 800e34c:	4611      	mov	r1, r2
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	4798      	blx	r3
 800e352:	4603      	mov	r3, r0
    }
 800e354:	4618      	mov	r0, r3
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	4a05      	ldr	r2, [pc, #20]	; (800e37c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	601a      	str	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe fb2d 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4618      	mov	r0, r3
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	08029b14 	.word	0x08029b14

0800e380 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff ffe7 	bl	800e35c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800e38e:	212c      	movs	r1, #44	; 0x2c
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f017 f989 	bl	80256a8 <_ZdlPvj>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4618      	mov	r0, r3
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	4a05      	ldr	r2, [pc, #20]	; (800e3c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f000 fad3 	bl	800e95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	08027364 	.word	0x08027364

0800e3c4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff ffe7 	bl	800e3a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e3d2:	2110      	movs	r1, #16
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f017 f967 	bl	80256a8 <_ZdlPvj>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b087      	sub	sp, #28
 800e3e8:	af02      	add	r7, sp, #8
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fd ff6c 	bl	800c2d0 <_ZN8touchgfx10TransitionC1Ev>
 800e3f8:	4a3f      	ldr	r2, [pc, #252]	; (800e4f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	601a      	str	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	330c      	adds	r3, #12
 800e402:	4618      	mov	r0, r3
 800e404:	f009 f95a 	bl	80176bc <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f103 020c 	add.w	r2, r3, #12
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	639a      	str	r2, [r3, #56]	; 0x38
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800e418:	4a38      	ldr	r2, [pc, #224]	; (800e4fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800e41a:	f107 0308 	add.w	r3, r7, #8
 800e41e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e422:	e883 0003 	stmia.w	r3, {r0, r1}
 800e426:	f107 0308 	add.w	r3, r7, #8
 800e42a:	cb0c      	ldmia	r3, {r2, r3}
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	4620      	mov	r0, r4
 800e430:	f000 fa74 	bl	800e91c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2202      	movs	r2, #2
 800e438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	78fa      	ldrb	r2, [r7, #3]
 800e440:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800e454:	4b2a      	ldr	r3, [pc, #168]	; (800e500 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d047      	beq.n	800e4ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f103 000c 	add.w	r0, r3, #12
 800e462:	4b28      	ldr	r3, [pc, #160]	; (800e504 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e464:	881b      	ldrh	r3, [r3, #0]
 800e466:	b21a      	sxth	r2, r3
 800e468:	4b27      	ldr	r3, [pc, #156]	; (800e508 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e46a:	881b      	ldrh	r3, [r3, #0]
 800e46c:	b21b      	sxth	r3, r3
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	4613      	mov	r3, r2
 800e472:	2200      	movs	r2, #0
 800e474:	2100      	movs	r1, #0
 800e476:	f7fe f819 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	330c      	adds	r3, #12
 800e47e:	4618      	mov	r0, r3
 800e480:	f009 f89f 	bl	80175c2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d82a      	bhi.n	800e4e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800e48e:	a201      	add	r2, pc, #4	; (adr r2, 800e494 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800e490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e494:	0800e4c5 	.word	0x0800e4c5
 800e498:	0800e4d3 	.word	0x0800e4d3
 800e49c:	0800e4a5 	.word	0x0800e4a5
 800e4a0:	0800e4b7 	.word	0x0800e4b7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800e4a4:	4b17      	ldr	r3, [pc, #92]	; (800e504 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e4a6:	881b      	ldrh	r3, [r3, #0]
 800e4a8:	425b      	negs	r3, r3
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	b21a      	sxth	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4b4:	e01a      	b.n	800e4ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800e4b6:	4b13      	ldr	r3, [pc, #76]	; (800e504 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	b21a      	sxth	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4c2:	e013      	b.n	800e4ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800e4c4:	4b10      	ldr	r3, [pc, #64]	; (800e508 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	b21a      	sxth	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4d0:	e00c      	b.n	800e4ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	; (800e508 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	425b      	negs	r3, r3
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	b21a      	sxth	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4e2:	e003      	b.n	800e4ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800e4ea:	bf00      	nop
            }
        }
    }
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3714      	adds	r7, #20
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd90      	pop	{r4, r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	0802733c 	.word	0x0802733c
 800e4fc:	08026a28 	.word	0x08026a28
 800e500:	2000b36b 	.word	0x2000b36b
 800e504:	2000b360 	.word	0x2000b360
 800e508:	2000b362 	.word	0x2000b362

0800e50c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	460b      	mov	r3, r1
 800e516:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3324      	adds	r3, #36	; 0x24
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	887a      	ldrh	r2, [r7, #2]
 800e522:	4611      	mov	r1, r2
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	4798      	blx	r3
 800e528:	4603      	mov	r3, r0
    }
 800e52a:	4618      	mov	r0, r3
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
	...

0800e534 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	4a05      	ldr	r2, [pc, #20]	; (800e554 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	601a      	str	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4618      	mov	r0, r3
 800e546:	f000 fa09 	bl	800e95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	0802740c 	.word	0x0802740c

0800e558 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7ff ffe7 	bl	800e534 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e566:	2110      	movs	r1, #16
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f017 f89d 	bl	80256a8 <_ZdlPvj>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4618      	mov	r0, r3
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe fa10 	bl	800c9a8 <_ZN8touchgfx6WidgetC1Ev>
 800e588:	4a03      	ldr	r2, [pc, #12]	; (800e598 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	080273a4 	.word	0x080273a4

0800e59c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	4a05      	ldr	r2, [pc, #20]	; (800e5bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	601a      	str	r2, [r3, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fa0d 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	080273a4 	.word	0x080273a4

0800e5c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7ff ffe7 	bl	800e59c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800e5ce:	2128      	movs	r1, #40	; 0x28
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f017 f869 	bl	80256a8 <_ZdlPvj>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800e5e0:	b590      	push	{r4, r7, lr}
 800e5e2:	b087      	sub	sp, #28
 800e5e4:	af02      	add	r7, sp, #8
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fd fe6e 	bl	800c2d0 <_ZN8touchgfx10TransitionC1Ev>
 800e5f4:	4a38      	ldr	r2, [pc, #224]	; (800e6d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	601a      	str	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f103 040c 	add.w	r4, r3, #12
 800e600:	4a36      	ldr	r2, [pc, #216]	; (800e6dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 800e602:	f107 0308 	add.w	r3, r7, #8
 800e606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e60a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e60e:	f107 0308 	add.w	r3, r7, #8
 800e612:	cb0c      	ldmia	r3, {r2, r3}
 800e614:	6879      	ldr	r1, [r7, #4]
 800e616:	4620      	mov	r0, r4
 800e618:	f000 f9f2 	bl	800ea00 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2202      	movs	r2, #2
 800e620:	771a      	strb	r2, [r3, #28]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	78fa      	ldrb	r2, [r7, #3]
 800e626:	775a      	strb	r2, [r3, #29]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	779a      	strb	r2, [r3, #30]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	845a      	strh	r2, [r3, #34]	; 0x22
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	849a      	strh	r2, [r3, #36]	; 0x24
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	3328      	adds	r3, #40	; 0x28
 800e63e:	2228      	movs	r2, #40	; 0x28
 800e640:	2100      	movs	r1, #0
 800e642:	4618      	mov	r0, r3
 800e644:	f017 f8e5 	bl	8025812 <memset>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	3328      	adds	r3, #40	; 0x28
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff ff93 	bl	800e578 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	7f1b      	ldrb	r3, [r3, #28]
 800e656:	2b03      	cmp	r3, #3
 800e658:	d826      	bhi.n	800e6a8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 800e65a:	a201      	add	r2, pc, #4	; (adr r2, 800e660 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800e65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e660:	0800e68d 	.word	0x0800e68d
 800e664:	0800e699 	.word	0x0800e699
 800e668:	0800e671 	.word	0x0800e671
 800e66c:	0800e681 	.word	0x0800e681
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800e670:	4b1b      	ldr	r3, [pc, #108]	; (800e6e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e672:	881b      	ldrh	r3, [r3, #0]
 800e674:	425b      	negs	r3, r3
 800e676:	b29b      	uxth	r3, r3
 800e678:	b21a      	sxth	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	841a      	strh	r2, [r3, #32]
            break;
 800e67e:	e017      	b.n	800e6b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800e680:	4b17      	ldr	r3, [pc, #92]	; (800e6e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	b21a      	sxth	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	841a      	strh	r2, [r3, #32]
            break;
 800e68a:	e011      	b.n	800e6b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800e68c:	4b15      	ldr	r3, [pc, #84]	; (800e6e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	b21a      	sxth	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	841a      	strh	r2, [r3, #32]
            break;
 800e696:	e00b      	b.n	800e6b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 800e698:	4b12      	ldr	r3, [pc, #72]	; (800e6e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	425b      	negs	r3, r3
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	b21a      	sxth	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	841a      	strh	r2, [r3, #32]
            break;
 800e6a6:	e003      	b.n	800e6b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 800e6ae:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e6b6:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b21a      	sxth	r2, r3
 800e6bc:	4b09      	ldr	r3, [pc, #36]	; (800e6e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	b21b      	sxth	r3, r3
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	f7fd feef 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd90      	pop	{r4, r7, pc}
 800e6d8:	0802737c 	.word	0x0802737c
 800e6dc:	08026a30 	.word	0x08026a30
 800e6e0:	2000b360 	.word	0x2000b360
 800e6e4:	2000b362 	.word	0x2000b362

0800e6e8 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>:
    T& at(const uint16_t index)
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3324      	adds	r3, #36	; 0x24
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	887a      	ldrh	r2, [r7, #2]
 800e6fe:	4611      	mov	r1, r2
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	4798      	blx	r3
 800e704:	4603      	mov	r3, r0
    }
 800e706:	4618      	mov	r0, r3
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>:
    T& at(const uint16_t index)
 800e70e:	b580      	push	{r7, lr}
 800e710:	b082      	sub	sp, #8
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	460b      	mov	r3, r1
 800e718:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3324      	adds	r3, #36	; 0x24
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	887a      	ldrh	r2, [r7, #2]
 800e724:	4611      	mov	r1, r2
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	4798      	blx	r3
 800e72a:	4603      	mov	r3, r0
    }
 800e72c:	4618      	mov	r0, r3
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>:
    T& at(const uint16_t index)
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3324      	adds	r3, #36	; 0x24
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	887a      	ldrh	r2, [r7, #2]
 800e766:	4611      	mov	r1, r2
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	4798      	blx	r3
 800e76c:	4603      	mov	r3, r0
    }
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>:
    T& at(const uint16_t index)
 800e776:	b580      	push	{r7, lr}
 800e778:	b082      	sub	sp, #8
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	460b      	mov	r3, r1
 800e780:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3324      	adds	r3, #36	; 0x24
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	887a      	ldrh	r2, [r7, #2]
 800e78c:	4611      	mov	r1, r2
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	4798      	blx	r3
 800e792:	4603      	mov	r3, r0
    }
 800e794:	4618      	mov	r0, r3
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e7ac:	bf00      	nop
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>:
    T& at(const uint16_t index)
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	3324      	adds	r3, #36	; 0x24
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	887a      	ldrh	r2, [r7, #2]
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	4798      	blx	r3
 800e7d4:	4603      	mov	r3, r0
    }
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>:
    T& at(const uint16_t index)
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b082      	sub	sp, #8
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	3324      	adds	r3, #36	; 0x24
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	887a      	ldrh	r2, [r7, #2]
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	4798      	blx	r3
 800e7fa:	4603      	mov	r3, r0
    }
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	683a      	ldr	r2, [r7, #0]
 800e812:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>:
    T& at(const uint16_t index)
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	3324      	adds	r3, #36	; 0x24
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	887a      	ldrh	r2, [r7, #2]
 800e836:	4611      	mov	r1, r2
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	4798      	blx	r3
 800e83c:	4603      	mov	r3, r0
    }
 800e83e:	4618      	mov	r0, r3
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>:
    T& at(const uint16_t index)
 800e846:	b580      	push	{r7, lr}
 800e848:	b082      	sub	sp, #8
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	460b      	mov	r3, r1
 800e850:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3324      	adds	r3, #36	; 0x24
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	887a      	ldrh	r2, [r7, #2]
 800e85c:	4611      	mov	r1, r2
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	4798      	blx	r3
 800e862:	4603      	mov	r3, r0
    }
 800e864:	4618      	mov	r0, r3
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	683a      	ldr	r2, [r7, #0]
 800e87a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d02a      	beq.n	800e8f2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e8a2:	2b03      	cmp	r3, #3
 800e8a4:	d820      	bhi.n	800e8e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800e8a6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800e8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ac:	0800e8d3 	.word	0x0800e8d3
 800e8b0:	0800e8d3 	.word	0x0800e8d3
 800e8b4:	0800e8bd 	.word	0x0800e8bd
 800e8b8:	0800e8bd 	.word	0x0800e8bd
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3354      	adds	r3, #84	; 0x54
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	6838      	ldr	r0, [r7, #0]
 800e8ce:	4798      	blx	r3
            break;
 800e8d0:	e010      	b.n	800e8f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3354      	adds	r3, #84	; 0x54
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	6838      	ldr	r0, [r7, #0]
 800e8e4:	4798      	blx	r3
            break;
 800e8e6:	e005      	b.n	800e8f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	721a      	strb	r2, [r3, #8]
            break;
 800e8ee:	bf00      	nop
 800e8f0:	e000      	b.n	800e8f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800e8f2:	bf00      	nop
        }
    }
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop

0800e8fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	4a04      	ldr	r2, [pc, #16]	; (800e918 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	601a      	str	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4618      	mov	r0, r3
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	08027424 	.word	0x08027424

0800e91c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	4639      	mov	r1, r7
 800e928:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7ff ffe4 	bl	800e8fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800e934:	4a08      	ldr	r2, [pc, #32]	; (800e958 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	3308      	adds	r3, #8
 800e944:	463a      	mov	r2, r7
 800e946:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e94a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	4618      	mov	r0, r3
 800e952:	3710      	adds	r7, #16
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	08027364 	.word	0x08027364

0800e95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
    }
 800e964:	4a04      	ldr	r2, [pc, #16]	; (800e978 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr
 800e978:	08027424 	.word	0x08027424

0800e97c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
    }
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff ffe9 	bl	800e95c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e98a:	2104      	movs	r1, #4
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f016 fe8b 	bl	80256a8 <_ZdlPvj>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	7f1b      	ldrb	r3, [r3, #28]
 800e9aa:	2b03      	cmp	r3, #3
 800e9ac:	d820      	bhi.n	800e9f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9db 	.word	0x0800e9db
 800e9b8:	0800e9db 	.word	0x0800e9db
 800e9bc:	0800e9c5 	.word	0x0800e9c5
 800e9c0:	0800e9c5 	.word	0x0800e9c5
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3354      	adds	r3, #84	; 0x54
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	6838      	ldr	r0, [r7, #0]
 800e9d6:	4798      	blx	r3
            break;
 800e9d8:	e00e      	b.n	800e9f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	3354      	adds	r3, #84	; 0x54
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	6838      	ldr	r0, [r7, #0]
 800e9ec:	4798      	blx	r3
            break;
 800e9ee:	e003      	b.n	800e9f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	721a      	strb	r2, [r3, #8]
            break;
 800e9f6:	bf00      	nop
        }
    }
 800e9f8:	bf00      	nop
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff ff72 	bl	800e8fc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800ea18:	4a08      	ldr	r2, [pc, #32]	; (800ea3c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	68ba      	ldr	r2, [r7, #8]
 800ea22:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	3308      	adds	r3, #8
 800ea28:	463a      	mov	r2, r7
 800ea2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea2e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0802740c 	.word	0x0802740c

0800ea40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	4a0a      	ldr	r2, [pc, #40]	; (800ea74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	333c      	adds	r3, #60	; 0x3c
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff fca4 	bl	800e3a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	330c      	adds	r3, #12
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7ff fc7d 	bl	800e35c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fd fc49 	bl	800c2fc <_ZN8touchgfx10TransitionD1Ev>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	0802733c 	.word	0x0802733c

0800ea78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7ff ffdd 	bl	800ea40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800ea86:	2154      	movs	r1, #84	; 0x54
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f016 fe0d 	bl	80256a8 <_ZdlPvj>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	4a0a      	ldr	r2, [pc, #40]	; (800eacc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	601a      	str	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	3328      	adds	r3, #40	; 0x28
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff fd76 	bl	800e59c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	330c      	adds	r3, #12
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7ff fd3d 	bl	800e534 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fd fc1d 	bl	800c2fc <_ZN8touchgfx10TransitionD1Ev>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4618      	mov	r0, r3
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	0802737c 	.word	0x0802737c

0800ead0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7ff ffdd 	bl	800ea98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800eade:	2150      	movs	r1, #80	; 0x50
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f016 fde1 	bl	80256a8 <_ZdlPvj>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4618      	mov	r0, r3
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <_ZN8touchgfx12NoTransitionD1Ev>:
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	4a05      	ldr	r2, [pc, #20]	; (800eb10 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	601a      	str	r2, [r3, #0]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fd fbfb 	bl	800c2fc <_ZN8touchgfx10TransitionD1Ev>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	080274a4 	.word	0x080274a4

0800eb14 <_ZN8touchgfx12NoTransitionD0Ev>:
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff ffe7 	bl	800eaf0 <_ZN8touchgfx12NoTransitionD1Ev>
 800eb22:	210c      	movs	r1, #12
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f016 fdbf 	bl	80256a8 <_ZdlPvj>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	4a05      	ldr	r2, [pc, #20]	; (800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	601a      	str	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fd fc43 	bl	800c3d0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	08027508 	.word	0x08027508

0800eb58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7ff ffe7 	bl	800eb34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800eb66:	2110      	movs	r1, #16
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f016 fd9d 	bl	80256a8 <_ZdlPvj>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4618      	mov	r0, r3
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800eb80:	4b59      	ldr	r3, [pc, #356]	; (800ece8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f083 0301 	eor.w	r3, r3, #1
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d003      	beq.n	800eb96 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2201      	movs	r2, #1
 800eb92:	721a      	strb	r2, [r3, #8]
            return;
 800eb94:	e0a5      	b.n	800ece2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fd fbcf 	bl	800c33c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800eba4:	3301      	adds	r3, #1
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d82f      	bhi.n	800ec1e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ebc4:	b298      	uxth	r0, r3
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	f00b fd4b 	bl	801a670 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	461a      	mov	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	f003 0301 	and.w	r3, r3, #1
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d01b      	beq.n	800ec2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800ec04:	2a00      	cmp	r2, #0
 800ec06:	dd01      	ble.n	800ec0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800ec08:	2201      	movs	r2, #1
 800ec0a:	e001      	b.n	800ec10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800ec0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec10:	4413      	add	r3, r2
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	b21a      	sxth	r2, r3
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ec1c:	e007      	b.n	800ec2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2201      	movs	r2, #1
 800ec22:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800ec2c:	e059      	b.n	800ece2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ec34:	2b03      	cmp	r3, #3
 800ec36:	d845      	bhi.n	800ecc4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800ec38:	a201      	add	r2, pc, #4	; (adr r2, 800ec40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800ec3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3e:	bf00      	nop
 800ec40:	0800ec8b 	.word	0x0800ec8b
 800ec44:	0800ec8b 	.word	0x0800ec8b
 800ec48:	0800ec51 	.word	0x0800ec51
 800ec4c:	0800ec51 	.word	0x0800ec51
            calculatedValue -= snapshot.getX();
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	330c      	adds	r3, #12
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fd fc56 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	b28b      	uxth	r3, r1
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	b21a      	sxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f103 000c 	add.w	r0, r3, #12
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec80:	2200      	movs	r2, #0
 800ec82:	4619      	mov	r1, r3
 800ec84:	f00b f80e 	bl	8019ca4 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ec88:	e020      	b.n	800eccc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	330c      	adds	r3, #12
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fd fc46 	bl	800c520 <_ZNK8touchgfx8Drawable4getYEv>
 800ec94:	4603      	mov	r3, r0
 800ec96:	4619      	mov	r1, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	b28b      	uxth	r3, r1
 800eca2:	1ad3      	subs	r3, r2, r3
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	b21a      	sxth	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f103 000c 	add.w	r0, r3, #12
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ecba:	461a      	mov	r2, r3
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	f00a fff1 	bl	8019ca4 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ecc2:	e003      	b.n	800eccc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	721a      	strb	r2, [r3, #8]
            break;
 800ecca:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6858      	ldr	r0, [r3, #4]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	3378      	adds	r3, #120	; 0x78
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	323c      	adds	r2, #60	; 0x3c
 800ecde:	4611      	mov	r1, r2
 800ece0:	4798      	blx	r3
    }
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	2000b36b 	.word	0x2000b36b

0800ecec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	; (800ed24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00e      	beq.n	800ed1a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00a      	beq.n	800ed1a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6858      	ldr	r0, [r3, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3364      	adds	r3, #100	; 0x64
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	320c      	adds	r2, #12
 800ed16:	4611      	mov	r1, r2
 800ed18:	4798      	blx	r3
    }
 800ed1a:	bf00      	nop
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	2000b36b 	.word	0x2000b36b

0800ed28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b088      	sub	sp, #32
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800ed30:	4b1a      	ldr	r3, [pc, #104]	; (800ed9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d02d      	beq.n	800ed94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fd fb12 	bl	800c364 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ed40:	4a17      	ldr	r2, [pc, #92]	; (800eda0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800ed42:	f107 0318 	add.w	r3, r7, #24
 800ed46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed4a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed4e:	f107 0008 	add.w	r0, r7, #8
 800ed52:	f107 0318 	add.w	r3, r7, #24
 800ed56:	cb0c      	ldmia	r3, {r2, r3}
 800ed58:	6879      	ldr	r1, [r7, #4]
 800ed5a:	f7ff fddf 	bl	800e91c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3378      	adds	r3, #120	; 0x78
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f107 0108 	add.w	r1, r7, #8
 800ed70:	4610      	mov	r0, r2
 800ed72:	4798      	blx	r3
            screenContainer->add(snapshot);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6858      	ldr	r0, [r3, #4]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	3360      	adds	r3, #96	; 0x60
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	320c      	adds	r2, #12
 800ed86:	4611      	mov	r1, r2
 800ed88:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ed8a:	f107 0308 	add.w	r3, r7, #8
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff fb06 	bl	800e3a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800ed94:	bf00      	nop
 800ed96:	3720      	adds	r7, #32
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	2000b36b 	.word	0x2000b36b
 800eda0:	08026a38 	.word	0x08026a38

0800eda4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
        switch (direction)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800edb4:	2b03      	cmp	r3, #3
 800edb6:	d83b      	bhi.n	800ee30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800edb8:	a201      	add	r2, pc, #4	; (adr r2, 800edc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800edba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edbe:	bf00      	nop
 800edc0:	0800ee01 	.word	0x0800ee01
 800edc4:	0800ee1b 	.word	0x0800ee1b
 800edc8:	0800edd1 	.word	0x0800edd1
 800edcc:	0800ede7 	.word	0x0800ede7
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	3354      	adds	r3, #84	; 0x54
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a18      	ldr	r2, [pc, #96]	; (800ee3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800edda:	8812      	ldrh	r2, [r2, #0]
 800eddc:	b211      	sxth	r1, r2
 800edde:	2200      	movs	r2, #0
 800ede0:	6838      	ldr	r0, [r7, #0]
 800ede2:	4798      	blx	r3
            break;
 800ede4:	e025      	b.n	800ee32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	3354      	adds	r3, #84	; 0x54
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a13      	ldr	r2, [pc, #76]	; (800ee3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800edf0:	8812      	ldrh	r2, [r2, #0]
 800edf2:	4252      	negs	r2, r2
 800edf4:	b292      	uxth	r2, r2
 800edf6:	b211      	sxth	r1, r2
 800edf8:	2200      	movs	r2, #0
 800edfa:	6838      	ldr	r0, [r7, #0]
 800edfc:	4798      	blx	r3
            break;
 800edfe:	e018      	b.n	800ee32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	3354      	adds	r3, #84	; 0x54
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a0d      	ldr	r2, [pc, #52]	; (800ee40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800ee0a:	8812      	ldrh	r2, [r2, #0]
 800ee0c:	4252      	negs	r2, r2
 800ee0e:	b292      	uxth	r2, r2
 800ee10:	b212      	sxth	r2, r2
 800ee12:	2100      	movs	r1, #0
 800ee14:	6838      	ldr	r0, [r7, #0]
 800ee16:	4798      	blx	r3
            break;
 800ee18:	e00b      	b.n	800ee32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	3354      	adds	r3, #84	; 0x54
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a07      	ldr	r2, [pc, #28]	; (800ee40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800ee24:	8812      	ldrh	r2, [r2, #0]
 800ee26:	b212      	sxth	r2, r2
 800ee28:	2100      	movs	r1, #0
 800ee2a:	6838      	ldr	r0, [r7, #0]
 800ee2c:	4798      	blx	r3
            break;
 800ee2e:	e000      	b.n	800ee32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800ee30:	bf00      	nop
    }
 800ee32:	bf00      	nop
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	2000b360 	.word	0x2000b360
 800ee40:	2000b362 	.word	0x2000b362

0800ee44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	68d2      	ldr	r2, [r2, #12]
 800ee56:	1052      	asrs	r2, r2, #1
 800ee58:	1898      	adds	r0, r3, r2
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d102      	bne.n	800ee6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	e00a      	b.n	800ee82 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	68d2      	ldr	r2, [r2, #12]
 800ee74:	1052      	asrs	r2, r2, #1
 800ee76:	4413      	add	r3, r2
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	6892      	ldr	r2, [r2, #8]
 800ee7e:	4413      	add	r3, r2
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	6839      	ldr	r1, [r7, #0]
 800ee84:	4798      	blx	r3
    }
 800ee86:	bf00      	nop
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800ee8e:	b480      	push	{r7}
 800ee90:	b083      	sub	sp, #12
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d010      	beq.n	800eec0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d107      	bne.n	800eeb6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	f003 0301 	and.w	r3, r3, #1
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d101      	bne.n	800eeb6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e000      	b.n	800eeb8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d001      	beq.n	800eec0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800eebc:	2301      	movs	r3, #1
 800eebe:	e000      	b.n	800eec2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800eec0:	2300      	movs	r3, #0
    }
 800eec2:	4618      	mov	r0, r3
 800eec4:	370c      	adds	r7, #12
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
	...

0800eed0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800eed0:	b590      	push	{r4, r7, lr}
 800eed2:	b08b      	sub	sp, #44	; 0x2c
 800eed4:	af02      	add	r7, sp, #8
 800eed6:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fd fa2e 	bl	800c33c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	7f9b      	ldrb	r3, [r3, #30]
 800eee4:	3301      	adds	r3, #1
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	7f9a      	ldrb	r2, [r3, #30]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	7f5b      	ldrb	r3, [r3, #29]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d82b      	bhi.n	800ef50 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	7f9b      	ldrb	r3, [r3, #30]
 800eefc:	b298      	uxth	r0, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	7f5b      	ldrb	r3, [r3, #29]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	f00b fbb0 	bl	801a670 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ef10:	4603      	mov	r3, r0
 800ef12:	461a      	mov	r2, r3
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d019      	beq.n	800ef5e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800ef38:	2a00      	cmp	r2, #0
 800ef3a:	dd01      	ble.n	800ef40 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	e001      	b.n	800ef44 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800ef40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef44:	4413      	add	r3, r2
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	b21a      	sxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	845a      	strh	r2, [r3, #34]	; 0x22
 800ef4e:	e006      	b.n	800ef5e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2201      	movs	r2, #1
 800ef54:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	779a      	strb	r2, [r3, #30]
            return;
 800ef5c:	e0c0      	b.n	800f0e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	b21a      	sxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4413      	add	r3, r2
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	b21a      	sxth	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	7f9b      	ldrb	r3, [r3, #30]
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	f040 8097 	bne.w	800f0ca <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 800ef9c:	4b52      	ldr	r3, [pc, #328]	; (800f0e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f000 8092 	beq.w	800f0ca <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 800efa6:	f107 0314 	add.w	r3, r7, #20
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fd f8f8 	bl	800c1a0 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	7f1b      	ldrb	r3, [r3, #28]
 800efb4:	2b03      	cmp	r3, #3
 800efb6:	d85b      	bhi.n	800f070 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 800efb8:	a201      	add	r2, pc, #4	; (adr r2, 800efc0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 800efba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbe:	bf00      	nop
 800efc0:	0800f021 	.word	0x0800f021
 800efc4:	0800f04b 	.word	0x0800f04b
 800efc8:	0800efd1 	.word	0x0800efd1
 800efcc:	0800eff7 	.word	0x0800eff7
                rect.x = 0;
 800efd0:	2300      	movs	r3, #0
 800efd2:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800efd4:	2300      	movs	r3, #0
 800efd6:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800efde:	b29a      	uxth	r2, r3
 800efe0:	4b42      	ldr	r3, [pc, #264]	; (800f0ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800efe2:	881b      	ldrh	r3, [r3, #0]
 800efe4:	4413      	add	r3, r2
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	b21b      	sxth	r3, r3
 800efea:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800efec:	4b40      	ldr	r3, [pc, #256]	; (800f0f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800efee:	881b      	ldrh	r3, [r3, #0]
 800eff0:	b21b      	sxth	r3, r3
 800eff2:	837b      	strh	r3, [r7, #26]
                break;
 800eff4:	e03d      	b.n	800f072 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800effc:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 800f002:	4b3a      	ldr	r3, [pc, #232]	; (800f0ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f004:	881a      	ldrh	r2, [r3, #0]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	b29b      	uxth	r3, r3
 800f012:	b21b      	sxth	r3, r3
 800f014:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800f016:	4b36      	ldr	r3, [pc, #216]	; (800f0f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f018:	881b      	ldrh	r3, [r3, #0]
 800f01a:	b21b      	sxth	r3, r3
 800f01c:	837b      	strh	r3, [r7, #26]
                break;
 800f01e:	e028      	b.n	800f072 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f020:	2300      	movs	r3, #0
 800f022:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f02a:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f02c:	4b2f      	ldr	r3, [pc, #188]	; (800f0ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f02e:	881b      	ldrh	r3, [r3, #0]
 800f030:	b21b      	sxth	r3, r3
 800f032:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 800f034:	4b2e      	ldr	r3, [pc, #184]	; (800f0f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f036:	881a      	ldrh	r2, [r3, #0]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f03e:	b29b      	uxth	r3, r3
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	b29b      	uxth	r3, r3
 800f044:	b21b      	sxth	r3, r3
 800f046:	837b      	strh	r3, [r7, #26]
                break;
 800f048:	e013      	b.n	800f072 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f052:	4b26      	ldr	r3, [pc, #152]	; (800f0ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f054:	881b      	ldrh	r3, [r3, #0]
 800f056:	b21b      	sxth	r3, r3
 800f058:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f060:	b29a      	uxth	r2, r3
 800f062:	4b23      	ldr	r3, [pc, #140]	; (800f0f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f064:	881b      	ldrh	r3, [r3, #0]
 800f066:	4413      	add	r3, r2
 800f068:	b29b      	uxth	r3, r3
 800f06a:	b21b      	sxth	r3, r3
 800f06c:	837b      	strh	r3, [r7, #26]
                break;
 800f06e:	e000      	b.n	800f072 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 800f070:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800f072:	f7fd fb59 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 800f076:	4602      	mov	r2, r0
 800f078:	6813      	ldr	r3, [r2, #0]
 800f07a:	3328      	adds	r3, #40	; 0x28
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4610      	mov	r0, r2
 800f080:	4798      	blx	r3
 800f082:	61f8      	str	r0, [r7, #28]
            Rect source;
 800f084:	f107 030c 	add.w	r3, r7, #12
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fd f889 	bl	800c1a0 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 800f092:	2300      	movs	r3, #0
 800f094:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 800f096:	4b15      	ldr	r3, [pc, #84]	; (800f0ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	b21b      	sxth	r3, r3
 800f09c:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 800f09e:	4b14      	ldr	r3, [pc, #80]	; (800f0f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	b21b      	sxth	r3, r3
 800f0a4:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800f0a6:	f7fd fb3f 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 800f0aa:	f7fd fb49 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 800f0ae:	6803      	ldr	r3, [r0, #0]
 800f0b0:	330c      	adds	r3, #12
 800f0b2:	681c      	ldr	r4, [r3, #0]
 800f0b4:	f107 0114 	add.w	r1, r7, #20
 800f0b8:	f107 020c 	add.w	r2, r7, #12
 800f0bc:	2300      	movs	r3, #0
 800f0be:	9301      	str	r3, [sp, #4]
 800f0c0:	23ff      	movs	r3, #255	; 0xff
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	69f9      	ldr	r1, [r7, #28]
 800f0c8:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6858      	ldr	r0, [r3, #4]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3378      	adds	r3, #120	; 0x78
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	320c      	adds	r2, #12
 800f0dc:	4611      	mov	r1, r2
 800f0de:	4798      	blx	r3
    }
 800f0e0:	3724      	adds	r7, #36	; 0x24
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd90      	pop	{r4, r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	2000b36a 	.word	0x2000b36a
 800f0ec:	2000b360 	.word	0x2000b360
 800f0f0:	2000b362 	.word	0x2000b362

0800f0f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6858      	ldr	r0, [r3, #4]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	3364      	adds	r3, #100	; 0x64
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	3228      	adds	r2, #40	; 0x28
 800f10e:	4611      	mov	r1, r2
 800f110:	4798      	blx	r3
    }
 800f112:	bf00      	nop
 800f114:	3708      	adds	r7, #8
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b088      	sub	sp, #32
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
        Transition::init();
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4618      	mov	r0, r3
 800f128:	f7fd f91c 	bl	800c364 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f12c:	4a16      	ldr	r2, [pc, #88]	; (800f188 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 800f12e:	f107 0318 	add.w	r3, r7, #24
 800f132:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f136:	e883 0003 	stmia.w	r3, {r0, r1}
 800f13a:	f107 0008 	add.w	r0, r7, #8
 800f13e:	f107 0318 	add.w	r3, r7, #24
 800f142:	cb0c      	ldmia	r3, {r2, r3}
 800f144:	6879      	ldr	r1, [r7, #4]
 800f146:	f7ff fc5b 	bl	800ea00 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	685a      	ldr	r2, [r3, #4]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3378      	adds	r3, #120	; 0x78
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f107 0108 	add.w	r1, r7, #8
 800f15c:	4610      	mov	r0, r2
 800f15e:	4798      	blx	r3
        screenContainer->add(solid);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6858      	ldr	r0, [r3, #4]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3360      	adds	r3, #96	; 0x60
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	3228      	adds	r2, #40	; 0x28
 800f172:	4611      	mov	r1, r2
 800f174:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f176:	f107 0308 	add.w	r3, r7, #8
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff f9da 	bl	800e534 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800f180:	bf00      	nop
 800f182:	3720      	adds	r7, #32
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	08026a40 	.word	0x08026a40

0800f18c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
        switch (direction)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	7f1b      	ldrb	r3, [r3, #28]
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	d83a      	bhi.n	800f214 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 800f19e:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 800f1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a4:	0800f1e5 	.word	0x0800f1e5
 800f1a8:	0800f1ff 	.word	0x0800f1ff
 800f1ac:	0800f1b5 	.word	0x0800f1b5
 800f1b0:	0800f1cb 	.word	0x0800f1cb
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3354      	adds	r3, #84	; 0x54
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a18      	ldr	r2, [pc, #96]	; (800f220 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f1be:	8812      	ldrh	r2, [r2, #0]
 800f1c0:	b211      	sxth	r1, r2
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	6838      	ldr	r0, [r7, #0]
 800f1c6:	4798      	blx	r3
            break;
 800f1c8:	e025      	b.n	800f216 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	3354      	adds	r3, #84	; 0x54
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4a13      	ldr	r2, [pc, #76]	; (800f220 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f1d4:	8812      	ldrh	r2, [r2, #0]
 800f1d6:	4252      	negs	r2, r2
 800f1d8:	b292      	uxth	r2, r2
 800f1da:	b211      	sxth	r1, r2
 800f1dc:	2200      	movs	r2, #0
 800f1de:	6838      	ldr	r0, [r7, #0]
 800f1e0:	4798      	blx	r3
            break;
 800f1e2:	e018      	b.n	800f216 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	3354      	adds	r3, #84	; 0x54
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a0d      	ldr	r2, [pc, #52]	; (800f224 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f1ee:	8812      	ldrh	r2, [r2, #0]
 800f1f0:	4252      	negs	r2, r2
 800f1f2:	b292      	uxth	r2, r2
 800f1f4:	b212      	sxth	r2, r2
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	6838      	ldr	r0, [r7, #0]
 800f1fa:	4798      	blx	r3
            break;
 800f1fc:	e00b      	b.n	800f216 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3354      	adds	r3, #84	; 0x54
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a07      	ldr	r2, [pc, #28]	; (800f224 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f208:	8812      	ldrh	r2, [r2, #0]
 800f20a:	b212      	sxth	r2, r2
 800f20c:	2100      	movs	r1, #0
 800f20e:	6838      	ldr	r0, [r7, #0]
 800f210:	4798      	blx	r3
            break;
 800f212:	e000      	b.n	800f216 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 800f214:	bf00      	nop
    }
 800f216:	bf00      	nop
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	2000b360 	.word	0x2000b360
 800f224:	2000b362 	.word	0x2000b362

0800f228 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800f228:	b480      	push	{r7}
 800f22a:	b083      	sub	sp, #12
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
        }
 800f232:	bf00      	nop
 800f234:	370c      	adds	r7, #12
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
	...

0800f240 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af02      	add	r7, sp, #8
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f24a:	4b08      	ldr	r3, [pc, #32]	; (800f26c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 800f24c:	881b      	ldrh	r3, [r3, #0]
 800f24e:	b21a      	sxth	r2, r3
 800f250:	4b07      	ldr	r3, [pc, #28]	; (800f270 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	b21b      	sxth	r3, r3
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	4613      	mov	r3, r2
 800f25a:	2200      	movs	r2, #0
 800f25c:	2100      	movs	r1, #0
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7fc ffb5 	bl	800c1ce <_ZN8touchgfx4RectC1Essss>
        }
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	2000b360 	.word	0x2000b360
 800f270:	2000b362 	.word	0x2000b362

0800f274 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	68d2      	ldr	r2, [r2, #12]
 800f286:	1052      	asrs	r2, r2, #1
 800f288:	1898      	adds	r0, r3, r2
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	f003 0301 	and.w	r3, r3, #1
 800f292:	2b00      	cmp	r3, #0
 800f294:	d102      	bne.n	800f29c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	689b      	ldr	r3, [r3, #8]
 800f29a:	e00a      	b.n	800f2b2 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	68d2      	ldr	r2, [r2, #12]
 800f2a4:	1052      	asrs	r2, r2, #1
 800f2a6:	4413      	add	r3, r2
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	6892      	ldr	r2, [r2, #8]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	4798      	blx	r3
    }
 800f2b6:	bf00      	nop
 800f2b8:	3708      	adds	r7, #8
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800f2be:	b480      	push	{r7}
 800f2c0:	b083      	sub	sp, #12
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d010      	beq.n	800f2f0 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d107      	bne.n	800f2e6 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	f003 0301 	and.w	r3, r3, #1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d101      	bne.n	800f2e6 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e000      	b.n	800f2e8 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d001      	beq.n	800f2f0 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e000      	b.n	800f2f2 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800f2f0:	2300      	movs	r3, #0
    }
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b082      	sub	sp, #8
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	68d2      	ldr	r2, [r2, #12]
 800f30e:	1052      	asrs	r2, r2, #1
 800f310:	1899      	adds	r1, r3, r2
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d102      	bne.n	800f324 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	e00a      	b.n	800f33a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	68d2      	ldr	r2, [r2, #12]
 800f32c:	1052      	asrs	r2, r2, #1
 800f32e:	4413      	add	r3, r2
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	6892      	ldr	r2, [r2, #8]
 800f336:	4413      	add	r3, r2
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4608      	mov	r0, r1
 800f33c:	4798      	blx	r3
    }
 800f33e:	bf00      	nop
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f346:	b480      	push	{r7}
 800f348:	b083      	sub	sp, #12
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d010      	beq.n	800f378 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d107      	bne.n	800f36e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	f003 0301 	and.w	r3, r3, #1
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f36e:	2300      	movs	r3, #0
 800f370:	2b01      	cmp	r3, #1
 800f372:	d001      	beq.n	800f378 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f374:	2301      	movs	r3, #1
 800f376:	e000      	b.n	800f37a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f378:	2300      	movs	r3, #0
    }
 800f37a:	4618      	mov	r0, r3
 800f37c:	370c      	adds	r7, #12
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr

0800f386 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f386:	b480      	push	{r7}
 800f388:	b083      	sub	sp, #12
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	6039      	str	r1, [r7, #0]
        color = col;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	601a      	str	r2, [r3, #0]
    }
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4618      	mov	r0, r3
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	887a      	ldrh	r2, [r7, #2]
 800f3b4:	801a      	strh	r2, [r3, #0]
    {
    }
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
    {
 800f3cc:	4a06      	ldr	r2, [pc, #24]	; (800f3e8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	601a      	str	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fbaa 	bl	800fb30 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	0802a494 	.word	0x0802a494

0800f3ec <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
    }
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7ff ffe5 	bl	800f3c4 <_ZN8touchgfx6ScreenD1Ev>
 800f3fa:	213c      	movs	r1, #60	; 0x3c
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f016 f953 	bl	80256a8 <_ZdlPvj>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    {
    }
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
    {
    }
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    {
    }
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
    {
    }
 800f450:	bf00      	nop
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3304      	adds	r3, #4
 800f482:	6839      	ldr	r1, [r7, #0]
 800f484:	4618      	mov	r0, r3
 800f486:	f006 fa9d 	bl	80159c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800f492:	b480      	push	{r7}
 800f494:	b083      	sub	sp, #12
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
 800f49a:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	683a      	ldr	r2, [r7, #0]
 800f4a0:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f4a2:	bf00      	nop
 800f4a4:	370c      	adds	r7, #12
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
	...

0800f4b0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	4a05      	ldr	r2, [pc, #20]	; (800f4d0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7fd fa83 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	08029aa8 	.word	0x08029aa8

0800f4d4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ffe7 	bl	800f4b0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f4e2:	2130      	movs	r1, #48	; 0x30
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f016 f8df 	bl	80256a8 <_ZdlPvj>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	2326      	movs	r3, #38	; 0x26
 800f502:	461a      	mov	r2, r3
 800f504:	2100      	movs	r1, #0
 800f506:	f016 f984 	bl	8025812 <memset>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fd fa4b 	bl	800c9a8 <_ZN8touchgfx6WidgetC1Ev>
 800f512:	4a0b      	ldr	r2, [pc, #44]	; (800f540 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	22ff      	movs	r2, #255	; 0xff
 800f51c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3328      	adds	r3, #40	; 0x28
 800f524:	2100      	movs	r1, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f7ff ff2d 	bl	800f386 <_ZN8touchgfx9colortypeC1Em>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4618      	mov	r0, r3
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	08029cf0 	.word	0x08029cf0

0800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	683a      	ldr	r2, [r7, #0]
 800f552:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 800f560:	b480      	push	{r7}
 800f562:	b083      	sub	sp, #12
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	460b      	mov	r3, r1
 800f56a:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	887a      	ldrh	r2, [r7, #2]
 800f570:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	460b      	mov	r3, r1
 800f588:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	887a      	ldrh	r2, [r7, #2]
 800f58e:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800f590:	bf00      	nop
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr

0800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	807b      	strh	r3, [r7, #2]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800f5ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f7ff ffd4 	bl	800f560 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800f5b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7ff ffdd 	bl	800f57e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800f5c4:	bf00      	nop
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	2326      	movs	r3, #38	; 0x26
 800f5dc:	461a      	mov	r2, r3
 800f5de:	2100      	movs	r1, #0
 800f5e0:	f016 f917 	bl	8025812 <memset>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fd f9de 	bl	800c9a8 <_ZN8touchgfx6WidgetC1Ev>
 800f5ec:	4a0b      	ldr	r2, [pc, #44]	; (800f61c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	601a      	str	r2, [r3, #0]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	3326      	adds	r3, #38	; 0x26
 800f5f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7ff fed2 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	22ff      	movs	r2, #255	; 0xff
 800f604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f008 fd08 	bl	8018020 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	08029fb4 	.word	0x08029fb4

0800f620 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	460b      	mov	r3, r1
 800f62a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f62c:	4a06      	ldr	r2, [pc, #24]	; (800f648 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	601a      	str	r2, [r3, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	887a      	ldrh	r2, [r7, #2]
 800f636:	809a      	strh	r2, [r3, #4]
    }
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4618      	mov	r0, r3
 800f63c:	370c      	adds	r7, #12
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	080272c4 	.word	0x080272c4

0800f64c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4618      	mov	r0, r3
 800f658:	2326      	movs	r3, #38	; 0x26
 800f65a:	461a      	mov	r2, r3
 800f65c:	2100      	movs	r1, #0
 800f65e:	f016 f8d8 	bl	8025812 <memset>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4618      	mov	r0, r3
 800f666:	f7fd f99f 	bl	800c9a8 <_ZN8touchgfx6WidgetC1Ev>
 800f66a:	4a14      	ldr	r2, [pc, #80]	; (800f6bc <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	601a      	str	r2, [r3, #0]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	3328      	adds	r3, #40	; 0x28
 800f674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff ffd1 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	3330      	adds	r3, #48	; 0x30
 800f682:	2100      	movs	r1, #0
 800f684:	4618      	mov	r0, r3
 800f686:	f7ff fe7e 	bl	800f386 <_ZN8touchgfx9colortypeC1Em>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	869a      	strh	r2, [r3, #52]	; 0x34
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	22ff      	movs	r2, #255	; 0xff
 800f694:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	08029c44 	.word	0x08029c44

0800f6c0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>:
class View : public Screen
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	4a05      	ldr	r2, [pc, #20]	; (800f6e0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev+0x20>)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7ff fe77 	bl	800f3c4 <_ZN8touchgfx6ScreenD1Ev>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	08027e98 	.word	0x08027e98

0800f6e4 <_ZN8touchgfx4ViewI16galleryPresenterED0Ev>:
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7ff ffe7 	bl	800f6c0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f6f2:	2140      	movs	r1, #64	; 0x40
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f015 ffd7 	bl	80256a8 <_ZdlPvj>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <_ZN15galleryViewBaseD1Ev>:

class galleryViewBase : public touchgfx::View<galleryPresenter>
{
public:
    galleryViewBase();
    virtual ~galleryViewBase() {}
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	4a12      	ldr	r2, [pc, #72]	; (800f758 <_ZN15galleryViewBaseD1Ev+0x54>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f718:	4618      	mov	r0, r3
 800f71a:	f000 f9e7 	bl	800faec <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	33d8      	adds	r3, #216	; 0xd8
 800f722:	4618      	mov	r0, r3
 800f724:	f000 faae 	bl	800fc84 <_ZN8touchgfx8TextAreaD1Ev>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	33ac      	adds	r3, #172	; 0xac
 800f72c:	4618      	mov	r0, r3
 800f72e:	f000 fa87 	bl	800fc40 <_ZN8touchgfx5ImageD1Ev>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	3370      	adds	r3, #112	; 0x70
 800f736:	4618      	mov	r0, r3
 800f738:	f000 fa60 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3340      	adds	r3, #64	; 0x40
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fa17 	bl	800fb74 <_ZN8touchgfx3BoxD1Ev>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4618      	mov	r0, r3
 800f74a:	f7ff ffb9 	bl	800f6c0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	08027e4c 	.word	0x08027e4c

0800f75c <_ZN15galleryViewBaseD0Ev>:
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7ff ffcd 	bl	800f704 <_ZN15galleryViewBaseD1Ev>
 800f76a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f015 ff9a 	bl	80256a8 <_ZdlPvj>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	4618      	mov	r0, r3
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <_ZN15galleryViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800f77e:	b580      	push	{r7, lr}
 800f780:	b082      	sub	sp, #8
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f786:	f009 fe3b 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 800f78a:	4603      	mov	r3, r0
    }
 800f78c:	4618      	mov	r0, r3
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	71fb      	strb	r3, [r7, #7]
 800f79e:	460b      	mov	r3, r1
 800f7a0:	71bb      	strb	r3, [r7, #6]
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800f7a6:	f7fc ffbf 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d105      	bne.n	800f7bc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800f7b0:	4b0a      	ldr	r3, [pc, #40]	; (800f7dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800f7b2:	4a0b      	ldr	r2, [pc, #44]	; (800f7e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800f7b4:	2135      	movs	r1, #53	; 0x35
 800f7b6:	480b      	ldr	r0, [pc, #44]	; (800f7e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800f7b8:	f015 ffa2 	bl	8025700 <__assert_func>
 800f7bc:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800f7be:	f7fc ffbf 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 800f7c2:	6803      	ldr	r3, [r0, #0]
 800f7c4:	3328      	adds	r3, #40	; 0x28
 800f7c6:	681c      	ldr	r4, [r3, #0]
 800f7c8:	797b      	ldrb	r3, [r7, #5]
 800f7ca:	79ba      	ldrb	r2, [r7, #6]
 800f7cc:	79f9      	ldrb	r1, [r7, #7]
 800f7ce:	47a0      	blx	r4
 800f7d0:	4603      	mov	r3, r0
    }
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	370c      	adds	r7, #12
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd90      	pop	{r4, r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	08026a48 	.word	0x08026a48
 800f7e0:	08027edc 	.word	0x08027edc
 800f7e4:	08026a8c 	.word	0x08026a8c

0800f7e8 <_ZN15galleryViewBaseC1Ev>:
#include <gui_generated/gallery_screen/galleryViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

galleryViewBase::galleryViewBase() :
 800f7e8:	b590      	push	{r4, r7, lr}
 800f7ea:	b093      	sub	sp, #76	; 0x4c
 800f7ec:	af02      	add	r7, sp, #8
 800f7ee:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &galleryViewBase::buttonCallbackHandler)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f000 f914 	bl	800fa20 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>
 800f7f8:	4a77      	ldr	r2, [pc, #476]	; (800f9d8 <_ZN15galleryViewBaseC1Ev+0x1f0>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	3340      	adds	r3, #64	; 0x40
 800f802:	4618      	mov	r0, r3
 800f804:	f7ff fe76 	bl	800f4f4 <_ZN8touchgfx3BoxC1Ev>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	3370      	adds	r3, #112	; 0x70
 800f80c:	4618      	mov	r0, r3
 800f80e:	f008 fbe3 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800f818:	f107 030c 	add.w	r3, r7, #12
 800f81c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f820:	4618      	mov	r0, r3
 800f822:	f7ff fdbf 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800f826:	f107 030c 	add.w	r3, r7, #12
 800f82a:	4619      	mov	r1, r3
 800f82c:	4620      	mov	r0, r4
 800f82e:	f7ff fecd 	bl	800f5cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	33d8      	adds	r3, #216	; 0xd8
 800f836:	4618      	mov	r0, r3
 800f838:	f7ff ff08 	bl	800f64c <_ZN8touchgfx8TextAreaC1Ev>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f503 708a 	add.w	r0, r3, #276	; 0x114
 800f842:	4b66      	ldr	r3, [pc, #408]	; (800f9dc <_ZN15galleryViewBaseC1Ev+0x1f4>)
 800f844:	613b      	str	r3, [r7, #16]
 800f846:	2300      	movs	r3, #0
 800f848:	617b      	str	r3, [r7, #20]
 800f84a:	f107 0310 	add.w	r3, r7, #16
 800f84e:	cb0c      	ldmia	r3, {r2, r3}
 800f850:	6879      	ldr	r1, [r7, #4]
 800f852:	f000 f90b 	bl	800fa6c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f85c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f866:	2200      	movs	r2, #0
 800f868:	2100      	movs	r1, #0
 800f86a:	f7fc fe1f 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(74, 94, 92));
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f874:	225c      	movs	r2, #92	; 0x5c
 800f876:	215e      	movs	r1, #94	; 0x5e
 800f878:	204a      	movs	r0, #74	; 0x4a
 800f87a:	f7ff ff8b 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f87e:	4603      	mov	r3, r0
 800f880:	4619      	mov	r1, r3
 800f882:	4620      	mov	r0, r4
 800f884:	f7ff fe5e 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Back_Button.setXY(0, 0);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	3370      	adds	r3, #112	; 0x70
 800f88c:	2200      	movs	r2, #0
 800f88e:	2100      	movs	r1, #0
 800f890:	4618      	mov	r0, r3
 800f892:	f7fc fe70 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f89c:	f107 0318 	add.w	r3, r7, #24
 800f8a0:	2102      	movs	r1, #2
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff fd7e 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800f8a8:	f107 031c 	add.w	r3, r7, #28
 800f8ac:	2103      	movs	r1, #3
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7ff fd78 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800f8b4:	f107 0320 	add.w	r3, r7, #32
 800f8b8:	2108      	movs	r1, #8
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff fd72 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800f8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8c4:	2108      	movs	r1, #8
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7ff fd6c 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800f8cc:	f107 0020 	add.w	r0, r7, #32
 800f8d0:	f107 021c 	add.w	r2, r7, #28
 800f8d4:	f107 0118 	add.w	r1, r7, #24
 800f8d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	4603      	mov	r3, r0
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f008 fad5 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3370      	adds	r3, #112	; 0x70
 800f8ea:	220f      	movs	r2, #15
 800f8ec:	2113      	movs	r1, #19
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7ff fe54 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7ff fdc5 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image1.setXY(90, 52);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	33ac      	adds	r3, #172	; 0xac
 800f90c:	2234      	movs	r2, #52	; 0x34
 800f90e:	215a      	movs	r1, #90	; 0x5a
 800f910:	4618      	mov	r0, r3
 800f912:	f7fc fe30 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_COOLTEAM_ID));
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800f91c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f920:	2107      	movs	r1, #7
 800f922:	4618      	mov	r0, r3
 800f924:	f7ff fd3e 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800f928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f92c:	4619      	mov	r1, r3
 800f92e:	4620      	mov	r0, r4
 800f930:	f008 fb76 	bl	8018020 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(188, 18);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	33d8      	adds	r3, #216	; 0xd8
 800f938:	2212      	movs	r2, #18
 800f93a:	21bc      	movs	r1, #188	; 0xbc
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fc fe1a 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(14, 255, 120));
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800f948:	2278      	movs	r2, #120	; 0x78
 800f94a:	21ff      	movs	r1, #255	; 0xff
 800f94c:	200e      	movs	r0, #14
 800f94e:	f7ff ff21 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f952:	4603      	mov	r3, r0
 800f954:	637c      	str	r4, [r7, #52]	; 0x34
 800f956:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800f958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f95a:	68ba      	ldr	r2, [r7, #8]
 800f95c:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	33d8      	adds	r3, #216	; 0xd8
 800f962:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f964:	2300      	movs	r3, #0
 800f966:	877b      	strh	r3, [r7, #58]	; 0x3a
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800f968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f96a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f96c:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800f974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f978:	2115      	movs	r1, #21
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff fe50 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 800f980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f984:	4619      	mov	r1, r3
 800f986:	4620      	mov	r0, r4
 800f988:	f008 f89c 	bl	8017ac4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f98c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f990:	4618      	mov	r0, r3
 800f992:	f7fc f9ed 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>

    add(bg);
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	3340      	adds	r3, #64	; 0x40
 800f99c:	4619      	mov	r1, r3
 800f99e:	4610      	mov	r0, r2
 800f9a0:	f7ff fd68 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	3370      	adds	r3, #112	; 0x70
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	f7ff fd61 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	33ac      	adds	r3, #172	; 0xac
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	f7ff fd5a 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	33d8      	adds	r3, #216	; 0xd8
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	f7ff fd53 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3744      	adds	r7, #68	; 0x44
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd90      	pop	{r4, r7, pc}
 800f9d8:	08027e4c 	.word	0x08027e4c
 800f9dc:	0800f9f5 	.word	0x0800f9f5

0800f9e0 <_ZN15galleryViewBase11setupScreenEv>:

void galleryViewBase::setupScreen()
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]

}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void galleryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3370      	adds	r3, #112	; 0x70
 800fa02:	683a      	ldr	r2, [r7, #0]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d106      	bne.n	800fa16 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //back
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenCoverTransitionEast();
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff feb8 	bl	800f77e <_ZN15galleryViewBase11applicationEv>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fd f8e5 	bl	800cbe0 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>
    }
}
 800fa16:	bf00      	nop
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
	...

0800fa20 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>:
    View()
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f00a fc9e 	bl	801a36c <_ZN8touchgfx6ScreenC1Ev>
 800fa30:	4a05      	ldr	r2, [pc, #20]	; (800fa48 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev+0x28>)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	601a      	str	r2, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	08027e98 	.word	0x08027e98

0800fa4c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	4a04      	ldr	r2, [pc, #16]	; (800fa68 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	601a      	str	r2, [r3, #0]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	08027ecc 	.word	0x08027ecc

0800fa6c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	4639      	mov	r1, r7
 800fa78:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7ff ffe4 	bl	800fa4c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800fa84:	4a08      	ldr	r2, [pc, #32]	; (800faa8 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	68ba      	ldr	r2, [r7, #8]
 800fa8e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	3308      	adds	r3, #8
 800fa94:	463a      	mov	r2, r7
 800fa96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	4618      	mov	r0, r3
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	08027e80 	.word	0x08027e80

0800faac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
    }
 800fab4:	4a04      	ldr	r2, [pc, #16]	; (800fac8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	08027ecc 	.word	0x08027ecc

0800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    }
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ffe9 	bl	800faac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fada:	2104      	movs	r1, #4
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f015 fde3 	bl	80256a8 <_ZdlPvj>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	4a05      	ldr	r2, [pc, #20]	; (800fb0c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	601a      	str	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff ffd5 	bl	800faac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	08027e80 	.word	0x08027e80

0800fb10 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ffe7 	bl	800faec <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fb1e:	2110      	movs	r1, #16
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f015 fdc1 	bl	80256a8 <_ZdlPvj>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	4a05      	ldr	r2, [pc, #20]	; (800fb50 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	601a      	str	r2, [r3, #0]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fc fc93 	bl	800c46c <_ZN8touchgfx8DrawableD1Ev>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	08028fdc 	.word	0x08028fdc

0800fb54 <_ZN8touchgfx9ContainerD0Ev>:
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7ff ffe7 	bl	800fb30 <_ZN8touchgfx9ContainerD1Ev>
 800fb62:	212c      	movs	r1, #44	; 0x2c
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f015 fd9f 	bl	80256a8 <_ZdlPvj>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	4a05      	ldr	r2, [pc, #20]	; (800fb94 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	601a      	str	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fc ff21 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	08029cf0 	.word	0x08029cf0

0800fb98 <_ZN8touchgfx3BoxD0Ev>:
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7ff ffe7 	bl	800fb74 <_ZN8touchgfx3BoxD1Ev>
 800fba6:	2130      	movs	r1, #48	; 0x30
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f015 fd7d 	bl	80256a8 <_ZdlPvj>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	4a05      	ldr	r2, [pc, #20]	; (800fbd8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff fc71 	bl	800f4b0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	08029dbc 	.word	0x08029dbc

0800fbdc <_ZN8touchgfx6ButtonD0Ev>:
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f7ff ffe7 	bl	800fbb8 <_ZN8touchgfx6ButtonD1Ev>
 800fbea:	2134      	movs	r1, #52	; 0x34
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f015 fd5b 	bl	80256a8 <_ZdlPvj>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b082      	sub	sp, #8
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	4a05      	ldr	r2, [pc, #20]	; (800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7ff ffd3 	bl	800fbb8 <_ZN8touchgfx6ButtonD1Ev>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	08029f0c 	.word	0x08029f0c

0800fc20 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7ff ffe7 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 800fc2e:	213c      	movs	r1, #60	; 0x3c
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f015 fd39 	bl	80256a8 <_ZdlPvj>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	4a05      	ldr	r2, [pc, #20]	; (800fc60 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	601a      	str	r2, [r3, #0]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7fc febb 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	08029fb4 	.word	0x08029fb4

0800fc64 <_ZN8touchgfx5ImageD0Ev>:
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7ff ffe7 	bl	800fc40 <_ZN8touchgfx5ImageD1Ev>
 800fc72:	212c      	movs	r1, #44	; 0x2c
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f015 fd17 	bl	80256a8 <_ZdlPvj>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	4a08      	ldr	r2, [pc, #32]	; (800fcb0 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	601a      	str	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	3328      	adds	r3, #40	; 0x28
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fc f86a 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fc fe94 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	4618      	mov	r0, r3
 800fca8:	3708      	adds	r7, #8
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	08029c44 	.word	0x08029c44

0800fcb4 <_ZN8touchgfx8TextAreaD0Ev>:
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff ffe1 	bl	800fc84 <_ZN8touchgfx8TextAreaD1Ev>
 800fcc2:	213c      	movs	r1, #60	; 0x3c
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f015 fcef 	bl	80256a8 <_ZdlPvj>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4618      	mov	r0, r3
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	68d2      	ldr	r2, [r2, #12]
 800fce6:	1052      	asrs	r2, r2, #1
 800fce8:	1898      	adds	r0, r3, r2
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d102      	bne.n	800fcfc <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	e00a      	b.n	800fd12 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	68d2      	ldr	r2, [r2, #12]
 800fd04:	1052      	asrs	r2, r2, #1
 800fd06:	4413      	add	r3, r2
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	6892      	ldr	r2, [r2, #8]
 800fd0e:	4413      	add	r3, r2
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	6839      	ldr	r1, [r7, #0]
 800fd14:	4798      	blx	r3
    }
 800fd16:	bf00      	nop
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800fd1e:	b480      	push	{r7}
 800fd20:	b083      	sub	sp, #12
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d010      	beq.n	800fd50 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d107      	bne.n	800fd46 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d101      	bne.n	800fd46 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800fd46:	2300      	movs	r3, #0
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d001      	beq.n	800fd50 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e000      	b.n	800fd52 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800fd50:	2300      	movs	r3, #0
    }
 800fd52:	4618      	mov	r0, r3
 800fd54:	370c      	adds	r7, #12
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr

0800fd5e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800fd5e:	b480      	push	{r7}
 800fd60:	b083      	sub	sp, #12
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
 800fd66:	460b      	mov	r3, r1
 800fd68:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	78fa      	ldrb	r2, [r7, #3]
 800fd6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800fd72:	bf00      	nop
 800fd74:	370c      	adds	r7, #12
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
	...

0800fd80 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	2326      	movs	r3, #38	; 0x26
 800fd8e:	461a      	mov	r2, r3
 800fd90:	2100      	movs	r1, #0
 800fd92:	f015 fd3e 	bl	8025812 <memset>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fc fe05 	bl	800c9a8 <_ZN8touchgfx6WidgetC1Ev>
 800fd9e:	4a0a      	ldr	r2, [pc, #40]	; (800fdc8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	601a      	str	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	629a      	str	r2, [r3, #40]	; 0x28
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2101      	movs	r1, #1
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff ffd1 	bl	800fd5e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	08029aa8 	.word	0x08029aa8

0800fdcc <_ZN8touchgfx6ButtonC1Ev>:
{
public:
    Button()
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7ff ffd2 	bl	800fd80 <_ZN8touchgfx14AbstractButtonC1Ev>
 800fddc:	4a0c      	ldr	r2, [pc, #48]	; (800fe10 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	332e      	adds	r3, #46	; 0x2e
 800fde6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7ff fada 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	3330      	adds	r3, #48	; 0x30
 800fdf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff fad3 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	22ff      	movs	r2, #255	; 0xff
 800fe02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	08029dbc 	.word	0x08029dbc

0800fe14 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
 800fe1c:	6039      	str	r1, [r7, #0]
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	889a      	ldrh	r2, [r3, #4]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	809a      	strh	r2, [r3, #4]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	3334      	adds	r3, #52	; 0x34
 800fe42:	6839      	ldr	r1, [r7, #0]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7ff ffe5 	bl	800fe14 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 f820 	bl	800fe90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800fe50:	bf00      	nop
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	683a      	ldr	r2, [r7, #0]
 800fe66:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fe68:	bf00      	nop
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	683a      	ldr	r2, [r7, #0]
 800fe82:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800fe84:	bf00      	nop
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800fe90:	b590      	push	{r4, r7, lr}
 800fe92:	b08b      	sub	sp, #44	; 0x2c
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	3334      	adds	r3, #52	; 0x34
 800fe9c:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	889b      	ldrh	r3, [r3, #4]
 800fea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fea6:	4293      	cmp	r3, r2
 800fea8:	bf14      	ite	ne
 800feaa:	2301      	movne	r3, #1
 800feac:	2300      	moveq	r3, #0
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d06f      	beq.n	800ff94 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	3334      	adds	r3, #52	; 0x34
 800feb8:	613b      	str	r3, [r7, #16]
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800febe:	4b39      	ldr	r3, [pc, #228]	; (800ffa4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d105      	bne.n	800fed2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 800fec6:	4b38      	ldr	r3, [pc, #224]	; (800ffa8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800fec8:	4a38      	ldr	r2, [pc, #224]	; (800ffac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800feca:	21b1      	movs	r1, #177	; 0xb1
 800fecc:	4838      	ldr	r0, [pc, #224]	; (800ffb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800fece:	f015 fc17 	bl	8025700 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	889a      	ldrh	r2, [r3, #4]
 800fed6:	4b37      	ldr	r3, [pc, #220]	; (800ffb4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800fed8:	881b      	ldrh	r3, [r3, #0]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d305      	bcc.n	800feea <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 800fede:	4b36      	ldr	r3, [pc, #216]	; (800ffb8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800fee0:	4a32      	ldr	r2, [pc, #200]	; (800ffac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800fee2:	21b2      	movs	r1, #178	; 0xb2
 800fee4:	4832      	ldr	r0, [pc, #200]	; (800ffb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800fee6:	f015 fc0b 	bl	8025700 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800feea:	4b34      	ldr	r3, [pc, #208]	; (800ffbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	4b2d      	ldr	r3, [pc, #180]	; (800ffa4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800fef0:	6819      	ldr	r1, [r3, #0]
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	889b      	ldrh	r3, [r3, #4]
 800fef6:	005b      	lsls	r3, r3, #1
 800fef8:	440b      	add	r3, r1
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	4413      	add	r3, r2
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	3334      	adds	r3, #52	; 0x34
 800ff08:	61bb      	str	r3, [r7, #24]
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ff0e:	4b25      	ldr	r3, [pc, #148]	; (800ffa4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d105      	bne.n	800ff22 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 800ff16:	4b24      	ldr	r3, [pc, #144]	; (800ffa8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800ff18:	4a24      	ldr	r2, [pc, #144]	; (800ffac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800ff1a:	21b1      	movs	r1, #177	; 0xb1
 800ff1c:	4824      	ldr	r0, [pc, #144]	; (800ffb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800ff1e:	f015 fbef 	bl	8025700 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	889a      	ldrh	r2, [r3, #4]
 800ff26:	4b23      	ldr	r3, [pc, #140]	; (800ffb4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d305      	bcc.n	800ff3a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 800ff2e:	4b22      	ldr	r3, [pc, #136]	; (800ffb8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800ff30:	4a1e      	ldr	r2, [pc, #120]	; (800ffac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800ff32:	21b2      	movs	r1, #178	; 0xb2
 800ff34:	481e      	ldr	r0, [pc, #120]	; (800ffb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800ff36:	f015 fbe3 	bl	8025700 <__assert_func>
        return texts->getText(typedTextId);
 800ff3a:	4b21      	ldr	r3, [pc, #132]	; (800ffc0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	889b      	ldrh	r3, [r3, #4]
 800ff42:	4619      	mov	r1, r3
 800ff44:	4610      	mov	r0, r2
 800ff46:	f002 fcaf 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	3328      	adds	r3, #40	; 0x28
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	6a39      	ldr	r1, [r7, #32]
 800ff58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff5a:	4798      	blx	r3
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	b2dc      	uxtb	r4, r3
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3340      	adds	r3, #64	; 0x40
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	6a39      	ldr	r1, [r7, #32]
 800ff6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff6c:	4798      	blx	r3
 800ff6e:	4603      	mov	r3, r0
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	fb14 f303 	smulbb	r3, r4, r3
 800ff76:	b2dc      	uxtb	r4, r3
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3324      	adds	r3, #36	; 0x24
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	6a39      	ldr	r1, [r7, #32]
 800ff82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff84:	4798      	blx	r3
 800ff86:	4603      	mov	r3, r0
 800ff88:	4423      	add	r3, r4
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800ff92:	e003      	b.n	800ff9c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2200      	movs	r2, #0
 800ff98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 800ff9c:	bf00      	nop
 800ff9e:	372c      	adds	r7, #44	; 0x2c
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd90      	pop	{r4, r7, pc}
 800ffa4:	2000b3fc 	.word	0x2000b3fc
 800ffa8:	08026acc 	.word	0x08026acc
 800ffac:	08027fb8 	.word	0x08027fb8
 800ffb0:	08026b10 	.word	0x08026b10
 800ffb4:	2000b400 	.word	0x2000b400
 800ffb8:	08026b54 	.word	0x08026b54
 800ffbc:	2000b404 	.word	0x2000b404
 800ffc0:	2000b408 	.word	0x2000b408

0800ffc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff fb3c 	bl	800f64c <_ZN8touchgfx8TextAreaC1Ev>
 800ffd4:	4a05      	ldr	r2, [pc, #20]	; (800ffec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3708      	adds	r7, #8
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	08029e60 	.word	0x08029e60

0800fff0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>:
class View : public Screen
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	4a05      	ldr	r2, [pc, #20]	; (801002c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev+0x20>)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	601a      	str	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4618      	mov	r0, r3
 801001e:	f7ff f9d1 	bl	800f3c4 <_ZN8touchgfx6ScreenD1Ev>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	08027f8c 	.word	0x08027f8c

08010030 <_ZN8touchgfx4ViewI17gameoverPresenterED0Ev>:
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7ff ffe7 	bl	801000c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 801003e:	2140      	movs	r1, #64	; 0x40
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f015 fb31 	bl	80256a8 <_ZdlPvj>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <_ZN16gameoverViewBaseD1Ev>:

class gameoverViewBase : public touchgfx::View<gameoverPresenter>
{
public:
    gameoverViewBase();
    virtual ~gameoverViewBase() {}
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	4a15      	ldr	r2, [pc, #84]	; (80100b0 <_ZN16gameoverViewBaseD1Ev+0x60>)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010064:	4618      	mov	r0, r3
 8010066:	f000 fa3f 	bl	80104e8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff fda1 	bl	800fbb8 <_ZN8touchgfx6ButtonD1Ev>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	33f4      	adds	r3, #244	; 0xf4
 801007a:	4618      	mov	r0, r3
 801007c:	f000 fa7e 	bl	801057c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	33b8      	adds	r3, #184	; 0xb8
 8010084:	4618      	mov	r0, r3
 8010086:	f7ff fdfd 	bl	800fc84 <_ZN8touchgfx8TextAreaD1Ev>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	3370      	adds	r3, #112	; 0x70
 801008e:	4618      	mov	r0, r3
 8010090:	f000 fa4c 	bl	801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	3340      	adds	r3, #64	; 0x40
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff fd6b 	bl	800fb74 <_ZN8touchgfx3BoxD1Ev>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff ffb3 	bl	801000c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	08027f40 	.word	0x08027f40

080100b4 <_ZN16gameoverViewBaseD0Ev>:
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f7ff ffc7 	bl	8010050 <_ZN16gameoverViewBaseD1Ev>
 80100c2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f015 faee 	bl	80256a8 <_ZdlPvj>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4618      	mov	r0, r3
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <_ZN16gameoverViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b082      	sub	sp, #8
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80100de:	f009 f98f 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 80100e2:	4603      	mov	r3, r0
    }
 80100e4:	4618      	mov	r0, r3
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <_ZN16gameoverViewBaseC1Ev>:
#include <gui_generated/gameover_screen/gameoverViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

gameoverViewBase::gameoverViewBase() :
 80100ec:	b590      	push	{r4, r7, lr}
 80100ee:	b09d      	sub	sp, #116	; 0x74
 80100f0:	af02      	add	r7, sp, #8
 80100f2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &gameoverViewBase::buttonCallbackHandler)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4618      	mov	r0, r3
 80100f8:	f000 f9c0 	bl	801047c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>
 80100fc:	4ac5      	ldr	r2, [pc, #788]	; (8010414 <_ZN16gameoverViewBaseC1Ev+0x328>)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	601a      	str	r2, [r3, #0]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	3340      	adds	r3, #64	; 0x40
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff f9f4 	bl	800f4f4 <_ZN8touchgfx3BoxC1Ev>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	3370      	adds	r3, #112	; 0x70
 8010110:	4618      	mov	r0, r3
 8010112:	f008 f8c1 	bl	8018298 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	33b8      	adds	r3, #184	; 0xb8
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff fa96 	bl	800f64c <_ZN8touchgfx8TextAreaC1Ev>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	33f4      	adds	r3, #244	; 0xf4
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff ff4d 	bl	800ffc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff fe4b 	bl	800fdcc <_ZN8touchgfx6ButtonC1Ev>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 801013c:	4bb6      	ldr	r3, [pc, #728]	; (8010418 <_ZN16gameoverViewBaseC1Ev+0x32c>)
 801013e:	617b      	str	r3, [r7, #20]
 8010140:	2300      	movs	r3, #0
 8010142:	61bb      	str	r3, [r7, #24]
 8010144:	f107 0314 	add.w	r3, r7, #20
 8010148:	cb0c      	ldmia	r3, {r2, r3}
 801014a:	6879      	ldr	r1, [r7, #4]
 801014c:	f000 f9ac 	bl	80104a8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010156:	f44f 7388 	mov.w	r3, #272	; 0x110
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010160:	2200      	movs	r2, #0
 8010162:	2100      	movs	r1, #0
 8010164:	f7fc f9a2 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801016e:	22ff      	movs	r2, #255	; 0xff
 8010170:	21ff      	movs	r1, #255	; 0xff
 8010172:	20ff      	movs	r0, #255	; 0xff
 8010174:	f7ff fb0e 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010178:	4603      	mov	r3, r0
 801017a:	4619      	mov	r1, r3
 801017c:	4620      	mov	r0, r4
 801017e:	f7ff f9e1 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	3370      	adds	r3, #112	; 0x70
 8010186:	2200      	movs	r2, #0
 8010188:	2100      	movs	r1, #0
 801018a:	4618      	mov	r0, r3
 801018c:	f7fc f9f3 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010196:	f107 031c 	add.w	r3, r7, #28
 801019a:	2102      	movs	r1, #2
 801019c:	4618      	mov	r0, r3
 801019e:	f7ff f901 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80101a2:	f107 0320 	add.w	r3, r7, #32
 80101a6:	2103      	movs	r1, #3
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7ff f8fb 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80101ae:	f107 0220 	add.w	r2, r7, #32
 80101b2:	f107 031c 	add.w	r3, r7, #28
 80101b6:	4619      	mov	r1, r3
 80101b8:	4620      	mov	r0, r4
 80101ba:	f007 fcbd 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80101c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101c8:	210b      	movs	r1, #11
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7ff fa28 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 80101d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101d4:	4619      	mov	r1, r3
 80101d6:	4620      	mov	r0, r4
 80101d8:	f7ff fe2c 	bl	800fe34 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80101dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fb fdc5 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80101ec:	22ff      	movs	r2, #255	; 0xff
 80101ee:	21ff      	movs	r1, #255	; 0xff
 80101f0:	20ff      	movs	r0, #255	; 0xff
 80101f2:	f7ff facf 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80101f6:	4603      	mov	r3, r0
 80101f8:	4619      	mov	r1, r3
 80101fa:	4620      	mov	r0, r4
 80101fc:	f7ff fe2c 	bl	800fe58 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010206:	22ff      	movs	r2, #255	; 0xff
 8010208:	21ff      	movs	r1, #255	; 0xff
 801020a:	20ff      	movs	r0, #255	; 0xff
 801020c:	f7ff fac2 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010210:	4603      	mov	r3, r0
 8010212:	4619      	mov	r1, r3
 8010214:	4620      	mov	r0, r4
 8010216:	f7ff fe2d 	bl	800fe74 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010226:	4619      	mov	r1, r3
 8010228:	4610      	mov	r0, r2
 801022a:	f7ff f932 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    gameover_text.setXY(179, 124);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	33b8      	adds	r3, #184	; 0xb8
 8010232:	227c      	movs	r2, #124	; 0x7c
 8010234:	21b3      	movs	r1, #179	; 0xb3
 8010236:	4618      	mov	r0, r3
 8010238:	f7fc f99d 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    gameover_text.setColor(touchgfx::Color::getColorFrom24BitRGB(235, 0, 0));
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010242:	2200      	movs	r2, #0
 8010244:	2100      	movs	r1, #0
 8010246:	20eb      	movs	r0, #235	; 0xeb
 8010248:	f7ff faa4 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801024c:	4603      	mov	r3, r0
 801024e:	64fc      	str	r4, [r7, #76]	; 0x4c
 8010250:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010254:	693a      	ldr	r2, [r7, #16]
 8010256:	631a      	str	r2, [r3, #48]	; 0x30
    gameover_text.setLinespacing(0);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	33b8      	adds	r3, #184	; 0xb8
 801025c:	657b      	str	r3, [r7, #84]	; 0x54
 801025e:	2300      	movs	r3, #0
 8010260:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 8010264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010266:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801026a:	869a      	strh	r2, [r3, #52]	; 0x34
    gameover_text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010276:	2112      	movs	r1, #18
 8010278:	4618      	mov	r0, r3
 801027a:	f7ff f9d1 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 801027e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010282:	4619      	mov	r1, r3
 8010284:	4620      	mov	r0, r4
 8010286:	f007 fc1d 	bl	8017ac4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 801028a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801028e:	4618      	mov	r0, r3
 8010290:	f7fb fd6e 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>

    score.setXY(166, 149);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	33f4      	adds	r3, #244	; 0xf4
 8010298:	2295      	movs	r2, #149	; 0x95
 801029a:	21a6      	movs	r1, #166	; 0xa6
 801029c:	4618      	mov	r0, r3
 801029e:	f7fc f96a 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 173, 173));
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 80102a8:	22ad      	movs	r2, #173	; 0xad
 80102aa:	21ad      	movs	r1, #173	; 0xad
 80102ac:	2000      	movs	r0, #0
 80102ae:	f7ff fa71 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80102b2:	4603      	mov	r3, r0
 80102b4:	65bc      	str	r4, [r7, #88]	; 0x58
 80102b6:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80102b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	33f4      	adds	r3, #244	; 0xf4
 80102c2:	663b      	str	r3, [r7, #96]	; 0x60
 80102c4:	2300      	movs	r3, #0
 80102c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        linespace = space;
 80102ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102cc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80102d0:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID35).getText());
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80102d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80102dc:	2114      	movs	r1, #20
 80102de:	4618      	mov	r0, r3
 80102e0:	f7ff f99e 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 80102e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80102e8:	667b      	str	r3, [r7, #100]	; 0x64
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80102ea:	4b4c      	ldr	r3, [pc, #304]	; (801041c <_ZN16gameoverViewBaseC1Ev+0x330>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d105      	bne.n	80102fe <_ZN16gameoverViewBaseC1Ev+0x212>
 80102f2:	4b4b      	ldr	r3, [pc, #300]	; (8010420 <_ZN16gameoverViewBaseC1Ev+0x334>)
 80102f4:	4a4b      	ldr	r2, [pc, #300]	; (8010424 <_ZN16gameoverViewBaseC1Ev+0x338>)
 80102f6:	21b1      	movs	r1, #177	; 0xb1
 80102f8:	484b      	ldr	r0, [pc, #300]	; (8010428 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 80102fa:	f015 fa01 	bl	8025700 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80102fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010300:	889a      	ldrh	r2, [r3, #4]
 8010302:	4b4a      	ldr	r3, [pc, #296]	; (801042c <_ZN16gameoverViewBaseC1Ev+0x340>)
 8010304:	881b      	ldrh	r3, [r3, #0]
 8010306:	429a      	cmp	r2, r3
 8010308:	d305      	bcc.n	8010316 <_ZN16gameoverViewBaseC1Ev+0x22a>
 801030a:	4b49      	ldr	r3, [pc, #292]	; (8010430 <_ZN16gameoverViewBaseC1Ev+0x344>)
 801030c:	4a45      	ldr	r2, [pc, #276]	; (8010424 <_ZN16gameoverViewBaseC1Ev+0x338>)
 801030e:	21b2      	movs	r1, #178	; 0xb2
 8010310:	4845      	ldr	r0, [pc, #276]	; (8010428 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 8010312:	f015 f9f5 	bl	8025700 <__assert_func>
        return texts->getText(typedTextId);
 8010316:	4b47      	ldr	r3, [pc, #284]	; (8010434 <_ZN16gameoverViewBaseC1Ev+0x348>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801031c:	4611      	mov	r1, r2
 801031e:	4618      	mov	r0, r3
 8010320:	f002 fac2 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 8010324:	4603      	mov	r3, r0
 8010326:	4a44      	ldr	r2, [pc, #272]	; (8010438 <_ZN16gameoverViewBaseC1Ev+0x34c>)
 8010328:	2114      	movs	r1, #20
 801032a:	4620      	mov	r0, r4
 801032c:	f00b fac2 	bl	801b8b4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010334:	4618      	mov	r0, r3
 8010336:	f7fb fd1b 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010346:	4619      	mov	r1, r3
 8010348:	4610      	mov	r0, r2
 801034a:	f7ff fe51 	bl	800fff0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	33f4      	adds	r3, #244	; 0xf4
 8010352:	4618      	mov	r0, r3
 8010354:	f007 fb8c 	bl	8017a70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 801035e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010362:	2113      	movs	r1, #19
 8010364:	4618      	mov	r0, r3
 8010366:	f7ff f95b 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 801036a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801036e:	4619      	mov	r1, r3
 8010370:	4620      	mov	r0, r4
 8010372:	f007 fba7 	bl	8017ac4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010376:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801037a:	4618      	mov	r0, r3
 801037c:	f7fb fcf8 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>

    button1.setXY(569, -60);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010386:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 801038a:	f240 2139 	movw	r1, #569	; 0x239
 801038e:	4618      	mov	r0, r3
 8010390:	f7fc f8f1 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f503 749a 	add.w	r4, r3, #308	; 0x134
 801039a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801039e:	2100      	movs	r1, #0
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fe ffff 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80103a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80103aa:	2101      	movs	r1, #1
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7fe fff9 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80103b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80103b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80103ba:	4619      	mov	r1, r3
 80103bc:	4620      	mov	r0, r4
 80103be:	f007 fbbb 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    add(bg);
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	3340      	adds	r3, #64	; 0x40
 80103c8:	4619      	mov	r1, r3
 80103ca:	4610      	mov	r0, r2
 80103cc:	f7ff f852 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	3370      	adds	r3, #112	; 0x70
 80103d6:	4619      	mov	r1, r3
 80103d8:	4610      	mov	r0, r2
 80103da:	f7ff f84b 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gameover_text);
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	33b8      	adds	r3, #184	; 0xb8
 80103e4:	4619      	mov	r1, r3
 80103e6:	4610      	mov	r0, r2
 80103e8:	f7ff f844 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	33f4      	adds	r3, #244	; 0xf4
 80103f2:	4619      	mov	r1, r3
 80103f4:	4610      	mov	r0, r2
 80103f6:	f7ff f83d 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010402:	4619      	mov	r1, r3
 8010404:	4610      	mov	r0, r2
 8010406:	f7ff f835 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4618      	mov	r0, r3
 801040e:	376c      	adds	r7, #108	; 0x6c
 8010410:	46bd      	mov	sp, r7
 8010412:	bd90      	pop	{r4, r7, pc}
 8010414:	08027f40 	.word	0x08027f40
 8010418:	08010451 	.word	0x08010451
 801041c:	2000b3fc 	.word	0x2000b3fc
 8010420:	08026acc 	.word	0x08026acc
 8010424:	08027fb8 	.word	0x08027fb8
 8010428:	08026b10 	.word	0x08026b10
 801042c:	2000b400 	.word	0x2000b400
 8010430:	08026b54 	.word	0x08026b54
 8010434:	2000b408 	.word	0x2000b408
 8010438:	08026c2c 	.word	0x08026c2c

0801043c <_ZN16gameoverViewBase11setupScreenEv>:

void gameoverViewBase::setupScreen()
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]

}
 8010444:	bf00      	nop
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void gameoverViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	3370      	adds	r3, #112	; 0x70
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	429a      	cmp	r2, r3
 8010462:	d106      	bne.n	8010472 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with no screen transition
        application().gotoPongScreenNoTransition();
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7ff fe36 	bl	80100d6 <_ZN16gameoverViewBase11applicationEv>
 801046a:	4603      	mov	r3, r0
 801046c:	4618      	mov	r0, r3
 801046e:	f7fc fccf 	bl	800ce10 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>
    }
}
 8010472:	bf00      	nop
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
	...

0801047c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>:
    View()
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4618      	mov	r0, r3
 8010488:	f009 ff70 	bl	801a36c <_ZN8touchgfx6ScreenC1Ev>
 801048c:	4a05      	ldr	r2, [pc, #20]	; (80104a4 <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev+0x28>)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4618      	mov	r0, r3
 801049c:	3708      	adds	r7, #8
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	08027f8c 	.word	0x08027f8c

080104a8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	4639      	mov	r1, r7
 80104b4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff fac6 	bl	800fa4c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80104c0:	4a08      	ldr	r2, [pc, #32]	; (80104e4 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	3308      	adds	r3, #8
 80104d0:	463a      	mov	r2, r7
 80104d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	4618      	mov	r0, r3
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	08027f74 	.word	0x08027f74

080104e8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	4a05      	ldr	r2, [pc, #20]	; (8010508 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	601a      	str	r2, [r3, #0]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff fad7 	bl	800faac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4618      	mov	r0, r3
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	08027f74 	.word	0x08027f74

0801050c <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f7ff ffe7 	bl	80104e8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801051a:	2110      	movs	r1, #16
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f015 f8c3 	bl	80256a8 <_ZdlPvj>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4618      	mov	r0, r3
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	4a08      	ldr	r2, [pc, #32]	; (8010558 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	3334      	adds	r3, #52	; 0x34
 801053e:	4618      	mov	r0, r3
 8010540:	f7fb fc16 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4618      	mov	r0, r3
 8010548:	f7ff fb36 	bl	800fbb8 <_ZN8touchgfx6ButtonD1Ev>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4618      	mov	r0, r3
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	0802a020 	.word	0x0802a020

0801055c <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7ff ffe1 	bl	801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801056a:	2148      	movs	r1, #72	; 0x48
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f015 f89b 	bl	80256a8 <_ZdlPvj>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4618      	mov	r0, r3
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	4a05      	ldr	r2, [pc, #20]	; (801059c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	601a      	str	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff fb79 	bl	800fc84 <_ZN8touchgfx8TextAreaD1Ev>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	08029e60 	.word	0x08029e60

080105a0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff ffe7 	bl	801057c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80105ae:	2140      	movs	r1, #64	; 0x40
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f015 f879 	bl	80256a8 <_ZdlPvj>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4618      	mov	r0, r3
 80105ba:	3708      	adds	r7, #8
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	68d2      	ldr	r2, [r2, #12]
 80105d2:	1052      	asrs	r2, r2, #1
 80105d4:	1898      	adds	r0, r3, r2
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	f003 0301 	and.w	r3, r3, #1
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d102      	bne.n	80105e8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	689b      	ldr	r3, [r3, #8]
 80105e6:	e00a      	b.n	80105fe <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	68d2      	ldr	r2, [r2, #12]
 80105f0:	1052      	asrs	r2, r2, #1
 80105f2:	4413      	add	r3, r2
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6892      	ldr	r2, [r2, #8]
 80105fa:	4413      	add	r3, r2
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	4798      	blx	r3
    }
 8010602:	bf00      	nop
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801060a:	b480      	push	{r7}
 801060c:	b083      	sub	sp, #12
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d010      	beq.n	801063c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d107      	bne.n	8010632 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	f003 0301 	and.w	r3, r3, #1
 801062a:	2b00      	cmp	r3, #0
 801062c:	d101      	bne.n	8010632 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801062e:	2301      	movs	r3, #1
 8010630:	e000      	b.n	8010634 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010632:	2300      	movs	r3, #0
 8010634:	2b01      	cmp	r3, #1
 8010636:	d001      	beq.n	801063c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010638:	2301      	movs	r3, #1
 801063a:	e000      	b.n	801063e <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801063c:	2300      	movs	r3, #0
    }
 801063e:	4618      	mov	r0, r3
 8010640:	370c      	adds	r7, #12
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr

0801064a <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 801064a:	b480      	push	{r7}
 801064c:	b083      	sub	sp, #12
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
 8010652:	460b      	mov	r3, r1
 8010654:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	78fa      	ldrb	r2, [r7, #3]
 801065a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801065e:	bf00      	nop
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr
	...

0801066c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>:
class View : public Screen
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	4a05      	ldr	r2, [pc, #20]	; (801068c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev+0x20>)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	601a      	str	r2, [r3, #0]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4618      	mov	r0, r3
 801067e:	f7fe fea1 	bl	800f3c4 <_ZN8touchgfx6ScreenD1Ev>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4618      	mov	r0, r3
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	08028054 	.word	0x08028054

08010690 <_ZN8touchgfx4ViewI14MusicPresenterED0Ev>:
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7ff ffe7 	bl	801066c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 801069e:	2140      	movs	r1, #64	; 0x40
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f015 f801 	bl	80256a8 <_ZdlPvj>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4618      	mov	r0, r3
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <_ZN13MusicViewBaseD1Ev>:

class MusicViewBase : public touchgfx::View<MusicPresenter>
{
public:
    MusicViewBase();
    virtual ~MusicViewBase() {}
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	4a27      	ldr	r2, [pc, #156]	; (8010758 <_ZN13MusicViewBaseD1Ev+0xa8>)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 fd0f 	bl	80110e8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7ff fa93 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff ff25 	bl	801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ff ff1f 	bl	801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7ff fa81 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010700:	4618      	mov	r0, r3
 8010702:	f7ff fa7b 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801070c:	4618      	mov	r0, r3
 801070e:	f7ff fa75 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff fa6f 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	33e8      	adds	r3, #232	; 0xe8
 8010722:	4618      	mov	r0, r3
 8010724:	f7ff ff2a 	bl	801057c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	33ac      	adds	r3, #172	; 0xac
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff fa65 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	3370      	adds	r3, #112	; 0x70
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff faa4 	bl	800fc84 <_ZN8touchgfx8TextAreaD1Ev>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3340      	adds	r3, #64	; 0x40
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff fa17 	bl	800fb74 <_ZN8touchgfx3BoxD1Ev>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	4618      	mov	r0, r3
 801074a:	f7ff ff8f 	bl	801066c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	08027ff0 	.word	0x08027ff0

0801075c <_ZN13MusicViewBaseD0Ev>:
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7ff ffa3 	bl	80106b0 <_ZN13MusicViewBaseD1Ev>
 801076a:	f44f 7146 	mov.w	r1, #792	; 0x318
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f014 ff9a 	bl	80256a8 <_ZdlPvj>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <_ZN13MusicViewBase11controlPlayEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void controlPlay()
 801077e:	b480      	push	{r7}
 8010780:	b083      	sub	sp, #12
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 8010786:	bf00      	nop
 8010788:	370c      	adds	r7, #12
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr

08010792 <_ZN13MusicViewBase11controlStopEv>:

    virtual void controlStop()
 8010792:	b480      	push	{r7}
 8010794:	b083      	sub	sp, #12
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 801079a:	bf00      	nop
 801079c:	370c      	adds	r7, #12
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr

080107a6 <_ZN13MusicViewBase11controlPrevEv>:

    virtual void controlPrev()
 80107a6:	b480      	push	{r7}
 80107a8:	b083      	sub	sp, #12
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107ae:	bf00      	nop
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr

080107ba <_ZN13MusicViewBase11controlNextEv>:

    virtual void controlNext()
 80107ba:	b480      	push	{r7}
 80107bc:	b083      	sub	sp, #12
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107c2:	bf00      	nop
 80107c4:	370c      	adds	r7, #12
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr

080107ce <_ZN13MusicViewBase17controlVolumeDownEv>:

    virtual void controlVolumeDown()
 80107ce:	b480      	push	{r7}
 80107d0:	b083      	sub	sp, #12
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107d6:	bf00      	nop
 80107d8:	370c      	adds	r7, #12
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr

080107e2 <_ZN13MusicViewBase15controlVolumeUpEv>:

    virtual void controlVolumeUp()
 80107e2:	b480      	push	{r7}
 80107e4:	b083      	sub	sp, #12
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107ea:	bf00      	nop
 80107ec:	370c      	adds	r7, #12
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr

080107f6 <_ZN13MusicViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b082      	sub	sp, #8
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80107fe:	f008 fdff 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8010802:	4603      	mov	r3, r0
    }
 8010804:	4618      	mov	r0, r3
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <_ZN13MusicViewBaseC1Ev>:
#include <gui_generated/music_screen/MusicViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MusicViewBase::MusicViewBase() :
 801080c:	b590      	push	{r4, r7, lr}
 801080e:	b0b7      	sub	sp, #220	; 0xdc
 8010810:	af02      	add	r7, sp, #8
 8010812:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MusicViewBase::buttonCallbackHandler)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4618      	mov	r0, r3
 8010818:	f000 fc30 	bl	801107c <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>
 801081c:	4a94      	ldr	r2, [pc, #592]	; (8010a70 <_ZN13MusicViewBaseC1Ev+0x264>)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	601a      	str	r2, [r3, #0]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	3340      	adds	r3, #64	; 0x40
 8010826:	4618      	mov	r0, r3
 8010828:	f7fe fe64 	bl	800f4f4 <_ZN8touchgfx3BoxC1Ev>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	3370      	adds	r3, #112	; 0x70
 8010830:	4618      	mov	r0, r3
 8010832:	f7fe ff0b 	bl	800f64c <_ZN8touchgfx8TextAreaC1Ev>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	33ac      	adds	r3, #172	; 0xac
 801083a:	4618      	mov	r0, r3
 801083c:	f007 fbcc 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	33e8      	adds	r3, #232	; 0xe8
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff fbbd 	bl	800ffc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010850:	4618      	mov	r0, r3
 8010852:	f007 fbc1 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801085c:	4618      	mov	r0, r3
 801085e:	f007 fbbb 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010868:	4618      	mov	r0, r3
 801086a:	f007 fbb5 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010874:	4618      	mov	r0, r3
 8010876:	f007 fbaf 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010880:	4618      	mov	r0, r3
 8010882:	f007 fd09 	bl	8018298 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801088c:	4618      	mov	r0, r3
 801088e:	f007 fd03 	bl	8018298 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010898:	4618      	mov	r0, r3
 801089a:	f007 fb9d 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80108a4:	4b73      	ldr	r3, [pc, #460]	; (8010a74 <_ZN13MusicViewBaseC1Ev+0x268>)
 80108a6:	617b      	str	r3, [r7, #20]
 80108a8:	2300      	movs	r3, #0
 80108aa:	61bb      	str	r3, [r7, #24]
 80108ac:	f107 0314 	add.w	r3, r7, #20
 80108b0:	cb0c      	ldmia	r3, {r2, r3}
 80108b2:	6879      	ldr	r1, [r7, #4]
 80108b4:	f000 fbf8 	bl	80110a8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80108be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80108c8:	2200      	movs	r2, #0
 80108ca:	2100      	movs	r1, #0
 80108cc:	f7fb fdee 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80108d6:	22ff      	movs	r2, #255	; 0xff
 80108d8:	21ff      	movs	r1, #255	; 0xff
 80108da:	20ff      	movs	r0, #255	; 0xff
 80108dc:	f7fe ff5a 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108e0:	4603      	mov	r3, r0
 80108e2:	4619      	mov	r1, r3
 80108e4:	4620      	mov	r0, r4
 80108e6:	f7fe fe2d 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(116, 0);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	3370      	adds	r3, #112	; 0x70
 80108ee:	2200      	movs	r2, #0
 80108f0:	2174      	movs	r1, #116	; 0x74
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fb fe3f 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80108fe:	2200      	movs	r2, #0
 8010900:	2100      	movs	r1, #0
 8010902:	2000      	movs	r0, #0
 8010904:	f7fe ff46 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010908:	4603      	mov	r3, r0
 801090a:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 801090e:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010914:	693a      	ldr	r2, [r7, #16]
 8010916:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3370      	adds	r3, #112	; 0x70
 801091c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010920:	2300      	movs	r3, #0
 8010922:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8010926:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801092a:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 801092e:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010936:	f107 031c 	add.w	r3, r7, #28
 801093a:	2108      	movs	r1, #8
 801093c:	4618      	mov	r0, r3
 801093e:	f7fe fe6f 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 8010942:	f107 031c 	add.w	r3, r7, #28
 8010946:	4619      	mov	r1, r3
 8010948:	4620      	mov	r0, r4
 801094a:	f007 f8bb 	bl	8017ac4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 801094e:	f107 031c 	add.w	r3, r7, #28
 8010952:	4618      	mov	r0, r3
 8010954:	f7fb fa0c 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>

    Play_Button.setXY(48, 212);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	33ac      	adds	r3, #172	; 0xac
 801095c:	22d4      	movs	r2, #212	; 0xd4
 801095e:	2130      	movs	r1, #48	; 0x30
 8010960:	4618      	mov	r0, r3
 8010962:	f7fb fe08 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Play_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 801096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010970:	2104      	movs	r1, #4
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fd16 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801097c:	2105      	movs	r1, #5
 801097e:	4618      	mov	r0, r3
 8010980:	f7fe fd10 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010988:	210c      	movs	r1, #12
 801098a:	4618      	mov	r0, r3
 801098c:	f7fe fd0a 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010994:	210c      	movs	r1, #12
 8010996:	4618      	mov	r0, r3
 8010998:	f7fe fd04 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 801099c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80109a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80109a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	4603      	mov	r3, r0
 80109b0:	4620      	mov	r0, r4
 80109b2:	f007 fa6d 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Play_Button.setIconXY(19, 14);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	33ac      	adds	r3, #172	; 0xac
 80109ba:	220e      	movs	r2, #14
 80109bc:	2113      	movs	r1, #19
 80109be:	4618      	mov	r0, r3
 80109c0:	f7fe fdec 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Play_Button.setAction(buttonCallback);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80109d0:	4619      	mov	r1, r3
 80109d2:	4610      	mov	r0, r2
 80109d4:	f7fe fd5d 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    MusicTextArea.setPosition(60, 109, 379, 54);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80109de:	2336      	movs	r3, #54	; 0x36
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	f240 137b 	movw	r3, #379	; 0x17b
 80109e6:	226d      	movs	r2, #109	; 0x6d
 80109e8:	213c      	movs	r1, #60	; 0x3c
 80109ea:	f7fb fd5f 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    MusicTextArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80109f4:	2200      	movs	r2, #0
 80109f6:	2100      	movs	r1, #0
 80109f8:	2000      	movs	r0, #0
 80109fa:	f7fe fecb 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109fe:	4603      	mov	r3, r0
 8010a00:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8010a04:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8010a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010a0a:	68fa      	ldr	r2, [r7, #12]
 8010a0c:	631a      	str	r2, [r3, #48]	; 0x30
    MusicTextArea.setLinespacing(0);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	33e8      	adds	r3, #232	; 0xe8
 8010a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a16:	2300      	movs	r3, #0
 8010a18:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 8010a1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a20:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8010a24:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(MusicTextAreaBuffer, MUSICTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 8010a2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a30:	2116      	movs	r1, #22
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fe fdf4 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 8010a38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010a40:	4b0d      	ldr	r3, [pc, #52]	; (8010a78 <_ZN13MusicViewBaseC1Ev+0x26c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d105      	bne.n	8010a54 <_ZN13MusicViewBaseC1Ev+0x248>
 8010a48:	4b0c      	ldr	r3, [pc, #48]	; (8010a7c <_ZN13MusicViewBaseC1Ev+0x270>)
 8010a4a:	4a0d      	ldr	r2, [pc, #52]	; (8010a80 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010a4c:	21b1      	movs	r1, #177	; 0xb1
 8010a4e:	480d      	ldr	r0, [pc, #52]	; (8010a84 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010a50:	f014 fe56 	bl	8025700 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a58:	889a      	ldrh	r2, [r3, #4]
 8010a5a:	4b0b      	ldr	r3, [pc, #44]	; (8010a88 <_ZN13MusicViewBaseC1Ev+0x27c>)
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d316      	bcc.n	8010a90 <_ZN13MusicViewBaseC1Ev+0x284>
 8010a62:	4b0a      	ldr	r3, [pc, #40]	; (8010a8c <_ZN13MusicViewBaseC1Ev+0x280>)
 8010a64:	4a06      	ldr	r2, [pc, #24]	; (8010a80 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010a66:	21b2      	movs	r1, #178	; 0xb2
 8010a68:	4806      	ldr	r0, [pc, #24]	; (8010a84 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010a6a:	f014 fe49 	bl	8025700 <__assert_func>
 8010a6e:	bf00      	nop
 8010a70:	08027ff0 	.word	0x08027ff0
 8010a74:	08010fb5 	.word	0x08010fb5
 8010a78:	2000b3fc 	.word	0x2000b3fc
 8010a7c:	08026c30 	.word	0x08026c30
 8010a80:	08028080 	.word	0x08028080
 8010a84:	08026c74 	.word	0x08026c74
 8010a88:	2000b400 	.word	0x2000b400
 8010a8c:	08026cb8 	.word	0x08026cb8
        return texts->getText(typedTextId);
 8010a90:	4be9      	ldr	r3, [pc, #932]	; (8010e38 <_ZN13MusicViewBaseC1Ev+0x62c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f001 ff05 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	4ae6      	ldr	r2, [pc, #920]	; (8010e3c <_ZN13MusicViewBaseC1Ev+0x630>)
 8010aa2:	2111      	movs	r1, #17
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	f00a ff05 	bl	801b8b4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010aaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fb f95e 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    MusicTextArea.setWildcard(MusicTextAreaBuffer);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	f7ff fa94 	bl	800fff0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MusicTextArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8010ace:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ad2:	210f      	movs	r1, #15
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fe fda3 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 8010ada:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ade:	4619      	mov	r1, r3
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f006 ffef 	bl	8017ac4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010ae6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fb f940 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>

    Pause_Button.setXY(116, 212);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010af6:	22d4      	movs	r2, #212	; 0xd4
 8010af8:	2174      	movs	r1, #116	; 0x74
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fb fd3b 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Pause_Button.setVisible(false);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010b06:	2100      	movs	r1, #0
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7ff fd9e 	bl	801064a <_ZN8touchgfx8Drawable10setVisibleEb>
    Pause_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID));
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8010b14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b18:	2104      	movs	r1, #4
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fe fc42 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010b20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b24:	2105      	movs	r1, #5
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fe fc3c 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010b2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010b30:	210b      	movs	r1, #11
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fe fc36 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010b38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b3c:	210b      	movs	r1, #11
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fe fc30 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010b44:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010b48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010b4c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8010b50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b54:	9300      	str	r3, [sp, #0]
 8010b56:	4603      	mov	r3, r0
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f007 f999 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Pause_Button.setIconXY(17, 14);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010b64:	220e      	movs	r2, #14
 8010b66:	2111      	movs	r1, #17
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fe fd17 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>

    Stop_Button.setXY(116, 212);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010b74:	22d4      	movs	r2, #212	; 0xd4
 8010b76:	2174      	movs	r1, #116	; 0x74
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fb fcfc 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Stop_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID));
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8010b84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010b88:	2104      	movs	r1, #4
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fe fc0a 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010b90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010b94:	2105      	movs	r1, #5
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe fc04 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010b9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010ba0:	2106      	movs	r1, #6
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7fe fbfe 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010ba8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010bac:	2106      	movs	r1, #6
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fe fbf8 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010bb4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8010bb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010bbc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010bc0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f007 f961 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Stop_Button.setIconXY(15, 15);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010bd4:	220f      	movs	r2, #15
 8010bd6:	210f      	movs	r1, #15
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fe fcdf 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Stop_Button.setAction(buttonCallback);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010bea:	4619      	mov	r1, r3
 8010bec:	4610      	mov	r0, r2
 8010bee:	f7fe fc50 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Prev_Button.setXY(188, 212);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010bf8:	22d4      	movs	r2, #212	; 0xd4
 8010bfa:	21bc      	movs	r1, #188	; 0xbc
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fb fcba 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Prev_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID));
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8010c08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010c0c:	2104      	movs	r1, #4
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fe fbc8 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010c14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c18:	2105      	movs	r1, #5
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fe fbc2 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010c20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c24:	2109      	movs	r1, #9
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fe fbbc 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010c2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010c30:	2109      	movs	r1, #9
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7fe fbb6 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010c38:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010c3c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010c40:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010c44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f007 f91f 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Prev_Button.setIconXY(14, 15);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010c58:	220f      	movs	r2, #15
 8010c5a:	210e      	movs	r1, #14
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7fe fc9d 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Prev_Button.setAction(buttonCallback);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010c6e:	4619      	mov	r1, r3
 8010c70:	4610      	mov	r0, r2
 8010c72:	f7fe fc0e 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Next_Button.setXY(256, 212);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010c7c:	22d4      	movs	r2, #212	; 0xd4
 8010c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fb fc77 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Next_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID));
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8010c8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010c92:	2104      	movs	r1, #4
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fe fb85 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010c9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010c9e:	2105      	movs	r1, #5
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fe fb7f 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010ca6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010caa:	210a      	movs	r1, #10
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fe fb79 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010cb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010cb6:	210a      	movs	r1, #10
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7fe fb73 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010cbe:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8010cc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010cc6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8010cca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f007 f8dc 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Next_Button.setIconXY(14, 15);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010cde:	220f      	movs	r2, #15
 8010ce0:	210e      	movs	r1, #14
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fe fc5a 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Next_Button.setAction(buttonCallback);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	4610      	mov	r0, r2
 8010cf8:	f7fe fbcb 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolUp_Button.setXY(390, 212);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010d02:	22d4      	movs	r2, #212	; 0xd4
 8010d04:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fb fc34 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    VolUp_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d14:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010d18:	2104      	movs	r1, #4
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe fb42 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010d20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010d24:	2105      	movs	r1, #5
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe fb3c 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010d2c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8010d30:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010d34:	4619      	mov	r1, r3
 8010d36:	4620      	mov	r0, r4
 8010d38:	f006 fefe 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolUp_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID31));
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d46:	2110      	movs	r1, #16
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7fe fc69 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 8010d4e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d52:	4619      	mov	r1, r3
 8010d54:	4620      	mov	r0, r4
 8010d56:	f7ff f86d 	bl	800fe34 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010d5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fb f806 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    VolUp_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d6a:	22ff      	movs	r2, #255	; 0xff
 8010d6c:	21ff      	movs	r1, #255	; 0xff
 8010d6e:	20ff      	movs	r0, #255	; 0xff
 8010d70:	f7fe fd10 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d74:	4603      	mov	r3, r0
 8010d76:	4619      	mov	r1, r3
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f7ff f86d 	bl	800fe58 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolUp_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d84:	22ff      	movs	r2, #255	; 0xff
 8010d86:	21ff      	movs	r1, #255	; 0xff
 8010d88:	20ff      	movs	r0, #255	; 0xff
 8010d8a:	f7fe fd03 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	4619      	mov	r1, r3
 8010d92:	4620      	mov	r0, r4
 8010d94:	f7ff f86e 	bl	800fe74 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolUp_Button.setAction(buttonCallback);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010da4:	4619      	mov	r1, r3
 8010da6:	4610      	mov	r0, r2
 8010da8:	f7fe fb73 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolDown_Button.setXY(323, 212);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010db2:	22d4      	movs	r2, #212	; 0xd4
 8010db4:	f240 1143 	movw	r1, #323	; 0x143
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fb fbdc 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    VolDown_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010dc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010dc8:	2104      	movs	r1, #4
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fe faea 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010dd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010dd4:	2105      	movs	r1, #5
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fe fae4 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010ddc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8010de0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010de4:	4619      	mov	r1, r3
 8010de6:	4620      	mov	r0, r4
 8010de8:	f006 fea6 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolDown_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID32));
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010df6:	2111      	movs	r1, #17
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7fe fc11 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 8010dfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010e02:	4619      	mov	r1, r3
 8010e04:	4620      	mov	r0, r4
 8010e06:	f7ff f815 	bl	800fe34 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010e0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fa ffae 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    VolDown_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010e1a:	22ff      	movs	r2, #255	; 0xff
 8010e1c:	21ff      	movs	r1, #255	; 0xff
 8010e1e:	20ff      	movs	r0, #255	; 0xff
 8010e20:	f7fe fcb8 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e24:	4603      	mov	r3, r0
 8010e26:	4619      	mov	r1, r3
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f7ff f815 	bl	800fe58 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolDown_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010e34:	e004      	b.n	8010e40 <_ZN13MusicViewBaseC1Ev+0x634>
 8010e36:	bf00      	nop
 8010e38:	2000b408 	.word	0x2000b408
 8010e3c:	08026d90 	.word	0x08026d90
 8010e40:	22ff      	movs	r2, #255	; 0xff
 8010e42:	21ff      	movs	r1, #255	; 0xff
 8010e44:	20ff      	movs	r0, #255	; 0xff
 8010e46:	f7fe fca5 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f7ff f810 	bl	800fe74 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolDown_Button.setAction(buttonCallback);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010e60:	4619      	mov	r1, r3
 8010e62:	4610      	mov	r0, r2
 8010e64:	f7fe fb15 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Back_Button.setXY(0, 0);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010e6e:	2200      	movs	r2, #0
 8010e70:	2100      	movs	r1, #0
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fb fb7f 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
 8010e7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010e82:	2102      	movs	r1, #2
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fe fa8d 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010e8a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010e8e:	2103      	movs	r1, #3
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fe fa87 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010e96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010e9a:	2108      	movs	r1, #8
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7fe fa81 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010ea2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010ea6:	2108      	movs	r1, #8
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe fa7b 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8010eae:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8010eb2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8010eb6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8010eba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f006 ffe4 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010ece:	220f      	movs	r2, #15
 8010ed0:	2113      	movs	r1, #19
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fe fb62 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	4610      	mov	r0, r2
 8010ee8:	f7fe fad3 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	3340      	adds	r3, #64	; 0x40
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	f7fe fabd 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	3370      	adds	r3, #112	; 0x70
 8010f00:	4619      	mov	r1, r3
 8010f02:	4610      	mov	r0, r2
 8010f04:	f7fe fab6 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Play_Button);
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	33ac      	adds	r3, #172	; 0xac
 8010f0e:	4619      	mov	r1, r3
 8010f10:	4610      	mov	r0, r2
 8010f12:	f7fe faaf 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MusicTextArea);
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	33e8      	adds	r3, #232	; 0xe8
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f7fe faa8 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pause_Button);
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4610      	mov	r0, r2
 8010f30:	f7fe faa0 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Stop_Button);
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	4610      	mov	r0, r2
 8010f40:	f7fe fa98 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Prev_Button);
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4610      	mov	r0, r2
 8010f50:	f7fe fa90 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Next_Button);
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4610      	mov	r0, r2
 8010f60:	f7fe fa88 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolUp_Button);
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	4610      	mov	r0, r2
 8010f70:	f7fe fa80 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolDown_Button);
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	4610      	mov	r0, r2
 8010f80:	f7fe fa78 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8010f84:	687a      	ldr	r2, [r7, #4]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	4610      	mov	r0, r2
 8010f90:	f7fe fa70 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	4618      	mov	r0, r3
 8010f98:	37d4      	adds	r7, #212	; 0xd4
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd90      	pop	{r4, r7, pc}
 8010f9e:	bf00      	nop

08010fa0 <_ZN13MusicViewBase11setupScreenEv>:

void MusicViewBase::setupScreen()
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]

}
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MusicViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
    if (&src == &Play_Button)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	33ac      	adds	r3, #172	; 0xac
 8010fc2:	683a      	ldr	r2, [r7, #0]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d106      	bne.n	8010fd6 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //control_play
        //When Play_Button clicked call virtual function
        //Call controlPlay
        controlPlay();
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	332c      	adds	r3, #44	; 0x2c
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	4798      	blx	r3
        //back_to_menu
        //When Back_Button clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
    }
}
 8010fd4:	e04d      	b.n	8011072 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Stop_Button)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010fdc:	683a      	ldr	r2, [r7, #0]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d106      	bne.n	8010ff0 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        controlStop();
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	3330      	adds	r3, #48	; 0x30
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	4798      	blx	r3
}
 8010fee:	e040      	b.n	8011072 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Prev_Button)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010ff6:	683a      	ldr	r2, [r7, #0]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d106      	bne.n	801100a <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
        controlPrev();
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	3334      	adds	r3, #52	; 0x34
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	4798      	blx	r3
}
 8011008:	e033      	b.n	8011072 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Next_Button)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8011010:	683a      	ldr	r2, [r7, #0]
 8011012:	429a      	cmp	r2, r3
 8011014:	d106      	bne.n	8011024 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        controlNext();
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	3338      	adds	r3, #56	; 0x38
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	4798      	blx	r3
}
 8011022:	e026      	b.n	8011072 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &VolUp_Button)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801102a:	683a      	ldr	r2, [r7, #0]
 801102c:	429a      	cmp	r2, r3
 801102e:	d106      	bne.n	801103e <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
        controlVolumeUp();
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	3340      	adds	r3, #64	; 0x40
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	4798      	blx	r3
}
 801103c:	e019      	b.n	8011072 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &VolDown_Button)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	429a      	cmp	r2, r3
 8011048:	d106      	bne.n	8011058 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa4>
        controlVolumeDown();
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	333c      	adds	r3, #60	; 0x3c
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	4798      	blx	r3
}
 8011056:	e00c      	b.n	8011072 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
    else if (&src == &Back_Button)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801105e:	683a      	ldr	r2, [r7, #0]
 8011060:	429a      	cmp	r2, r3
 8011062:	d106      	bne.n	8011072 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
        application().gotoscreenScreenNoTransition();
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7ff fbc6 	bl	80107f6 <_ZN13MusicViewBase11applicationEv>
 801106a:	4603      	mov	r3, r0
 801106c:	4618      	mov	r0, r3
 801106e:	f7fb fd2b 	bl	800cac8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
}
 8011072:	bf00      	nop
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
	...

0801107c <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>:
    View()
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	4618      	mov	r0, r3
 8011088:	f009 f970 	bl	801a36c <_ZN8touchgfx6ScreenC1Ev>
 801108c:	4a05      	ldr	r2, [pc, #20]	; (80110a4 <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev+0x28>)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	601a      	str	r2, [r3, #0]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2200      	movs	r2, #0
 8011096:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	4618      	mov	r0, r3
 801109c:	3708      	adds	r7, #8
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	08028054 	.word	0x08028054

080110a8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	4639      	mov	r1, r7
 80110b4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fe fcc6 	bl	800fa4c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80110c0:	4a08      	ldr	r2, [pc, #32]	; (80110e4 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	3308      	adds	r3, #8
 80110d0:	463a      	mov	r2, r7
 80110d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	0802803c 	.word	0x0802803c

080110e8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	4a05      	ldr	r2, [pc, #20]	; (8011108 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	601a      	str	r2, [r3, #0]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fe fcd7 	bl	800faac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	4618      	mov	r0, r3
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	0802803c 	.word	0x0802803c

0801110c <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f7ff ffe7 	bl	80110e8 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801111a:	2110      	movs	r1, #16
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f014 fac3 	bl	80256a8 <_ZdlPvj>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4618      	mov	r0, r3
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	68d2      	ldr	r2, [r2, #12]
 801113e:	1052      	asrs	r2, r2, #1
 8011140:	1898      	adds	r0, r3, r2
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	f003 0301 	and.w	r3, r3, #1
 801114a:	2b00      	cmp	r3, #0
 801114c:	d102      	bne.n	8011154 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	e00a      	b.n	801116a <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	68d2      	ldr	r2, [r2, #12]
 801115c:	1052      	asrs	r2, r2, #1
 801115e:	4413      	add	r3, r2
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	6892      	ldr	r2, [r2, #8]
 8011166:	4413      	add	r3, r2
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6839      	ldr	r1, [r7, #0]
 801116c:	4798      	blx	r3
    }
 801116e:	bf00      	nop
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}

08011176 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011176:	b480      	push	{r7}
 8011178:	b083      	sub	sp, #12
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d010      	beq.n	80111a8 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	689b      	ldr	r3, [r3, #8]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d107      	bne.n	801119e <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	f003 0301 	and.w	r3, r3, #1
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801119a:	2301      	movs	r3, #1
 801119c:	e000      	b.n	80111a0 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801119e:	2300      	movs	r3, #0
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d001      	beq.n	80111a8 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80111a4:	2301      	movs	r3, #1
 80111a6:	e000      	b.n	80111aa <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80111a8:	2300      	movs	r3, #0
    }
 80111aa:	4618      	mov	r0, r3
 80111ac:	370c      	adds	r7, #12
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr

080111b6 <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 80111b6:	b480      	push	{r7}
 80111b8:	b083      	sub	sp, #12
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	b21b      	sxth	r3, r3
    }
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	b21b      	sxth	r3, r3
    }
 80111fe:	4618      	mov	r0, r3
 8011200:	370c      	adds	r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr

0801120a <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 801120a:	b480      	push	{r7}
 801120c:	b083      	sub	sp, #12
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8011216:	4618      	mov	r0, r3
 8011218:	370c      	adds	r7, #12
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr
	...

08011224 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 801122c:	4a0a      	ldr	r2, [pc, #40]	; (8011258 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	601a      	str	r2, [r3, #0]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2200      	movs	r2, #0
 8011236:	809a      	strh	r2, [r3, #4]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2200      	movs	r2, #0
 801123c:	80da      	strh	r2, [r3, #6]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	22ff      	movs	r2, #255	; 0xff
 8011242:	721a      	strb	r2, [r3, #8]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	22ff      	movs	r2, #255	; 0xff
 8011248:	725a      	strb	r2, [r3, #9]
    {
    }
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4618      	mov	r0, r3
 801124e:	370c      	adds	r7, #12
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	08028228 	.word	0x08028228

0801125c <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
    {
 8011264:	4a04      	ldr	r2, [pc, #16]	; (8011278 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	601a      	str	r2, [r3, #0]
    }
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4618      	mov	r0, r3
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	08028228 	.word	0x08028228

0801127c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
    }
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff ffe9 	bl	801125c <_ZN8touchgfx15AbstractPainterD1Ev>
 801128a:	210c      	movs	r1, #12
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f014 fa0b 	bl	80256a8 <_ZdlPvj>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	4618      	mov	r0, r3
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	460b      	mov	r3, r1
 80112a6:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	78fa      	ldrb	r2, [r7, #3]
 80112ac:	725a      	strb	r2, [r3, #9]
    }
 80112ae:	bf00      	nop
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 80112ba:	b480      	push	{r7}
 80112bc:	b083      	sub	sp, #12
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	7a5b      	ldrb	r3, [r3, #9]
    }
 80112c6:	4618      	mov	r0, r3
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80112d2:	b480      	push	{r7}
 80112d4:	b083      	sub	sp, #12
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	6039      	str	r1, [r7, #0]
            : v(i)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	683a      	ldr	r2, [r7, #0]
 80112e0:	601a      	str	r2, [r3, #0]
        {
        }
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4618      	mov	r0, r3
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	460b      	mov	r3, r1
 80112fa:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	78fa      	ldrb	r2, [r7, #3]
 8011300:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 8011304:	bf00      	nop
 8011306:	370c      	adds	r7, #12
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr

08011310 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 801131e:	4618      	mov	r0, r3
 8011320:	370c      	adds	r7, #12
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
	...

0801132c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff ff74 	bl	8011224 <_ZN8touchgfx15AbstractPainterC1Ev>
 801133c:	4a27      	ldr	r2, [pc, #156]	; (80113dc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	601a      	str	r2, [r3, #0]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	60da      	str	r2, [r3, #12]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2200      	movs	r2, #0
 801134c:	611a      	str	r2, [r3, #16]
 801134e:	2301      	movs	r3, #1
 8011350:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8011352:	f7fb f9f5 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8011356:	4602      	mov	r2, r0
 8011358:	6813      	ldr	r3, [r2, #0]
 801135a:	3320      	adds	r3, #32
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	4610      	mov	r0, r2
 8011360:	4798      	blx	r3
 8011362:	4603      	mov	r3, r0
 8011364:	461a      	mov	r2, r3
 8011366:	7bfb      	ldrb	r3, [r7, #15]
 8011368:	4293      	cmp	r3, r2
 801136a:	bf0c      	ite	eq
 801136c:	2301      	moveq	r3, #1
 801136e:	2300      	movne	r3, #0
 8011370:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 8011372:	f7fb f9d9 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 8011376:	4603      	mov	r3, r0
 8011378:	4618      	mov	r0, r3
 801137a:	f7ff ff46 	bl	801120a <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	bf14      	ite	ne
 8011384:	2301      	movne	r3, #1
 8011386:	2300      	moveq	r3, #0
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d016      	beq.n	80113bc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 801138e:	f7fb f9cb 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 8011392:	4603      	mov	r3, r0
 8011394:	4618      	mov	r0, r3
 8011396:	f7ff ff38 	bl	801120a <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801139a:	4602      	mov	r2, r0
 801139c:	6813      	ldr	r3, [r2, #0]
 801139e:	3320      	adds	r3, #32
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	4610      	mov	r0, r2
 80113a4:	4798      	blx	r3
 80113a6:	4603      	mov	r3, r0
 80113a8:	461a      	mov	r2, r3
 80113aa:	7bfb      	ldrb	r3, [r7, #15]
 80113ac:	4293      	cmp	r3, r2
 80113ae:	bf0c      	ite	eq
 80113b0:	2301      	moveq	r3, #1
 80113b2:	2300      	movne	r3, #0
 80113b4:	b2da      	uxtb	r2, r3
 80113b6:	7bbb      	ldrb	r3, [r7, #14]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80113bc:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d105      	bne.n	80113ce <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 80113c2:	4b07      	ldr	r3, [pc, #28]	; (80113e0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 80113c4:	4a07      	ldr	r2, [pc, #28]	; (80113e4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 80113c6:	212b      	movs	r1, #43	; 0x2b
 80113c8:	4807      	ldr	r0, [pc, #28]	; (80113e8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 80113ca:	f014 f999 	bl	8025700 <__assert_func>
 80113ce:	bf00      	nop
    }
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4618      	mov	r0, r3
 80113d4:	3710      	adds	r7, #16
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	080297ec 	.word	0x080297ec
 80113e0:	08026e18 	.word	0x08026e18
 80113e4:	0802823c 	.word	0x0802823c
 80113e8:	08026e78 	.word	0x08026e78

080113ec <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	4a05      	ldr	r2, [pc, #20]	; (801140c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	601a      	str	r2, [r3, #0]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff ff2d 	bl	801125c <_ZN8touchgfx15AbstractPainterD1Ev>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	080297ec 	.word	0x080297ec

08011410 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff ffe7 	bl	80113ec <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801141e:	2114      	movs	r1, #20
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f014 f941 	bl	80256a8 <_ZdlPvj>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4618      	mov	r0, r3
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	4613      	mov	r3, r2
 801143c:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	4618      	mov	r0, r3
 8011442:	f7ff ff73 	bl	801132c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8011446:	4a09      	ldr	r2, [pc, #36]	; (801146c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 801144c:	68b9      	ldr	r1, [r7, #8]
 801144e:	68f8      	ldr	r0, [r7, #12]
 8011450:	f000 f80e 	bl	8011470 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	79fa      	ldrb	r2, [r7, #7]
 8011458:	4611      	mov	r1, r2
 801145a:	4618      	mov	r0, r3
 801145c:	f7ff ff1e 	bl	801129c <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	0802994c 	.word	0x0802994c

08011470 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8011470:	b580      	push	{r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 801147e:	f7fb f95f 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8011482:	4602      	mov	r2, r0
 8011484:	6813      	ldr	r3, [r2, #0]
 8011486:	332c      	adds	r3, #44	; 0x2c
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	6979      	ldr	r1, [r7, #20]
 801148c:	4610      	mov	r0, r2
 801148e:	4798      	blx	r3
 8011490:	4603      	mov	r3, r0
 8011492:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	751a      	strb	r2, [r3, #20]
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 801149c:	f7fb f950 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 80114a0:	4602      	mov	r2, r0
 80114a2:	6813      	ldr	r3, [r2, #0]
 80114a4:	3330      	adds	r3, #48	; 0x30
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	6939      	ldr	r1, [r7, #16]
 80114aa:	4610      	mov	r0, r2
 80114ac:	4798      	blx	r3
 80114ae:	4603      	mov	r3, r0
 80114b0:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	755a      	strb	r2, [r3, #21]
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 80114ba:	f7fb f941 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 80114be:	4602      	mov	r2, r0
 80114c0:	6813      	ldr	r3, [r2, #0]
 80114c2:	3334      	adds	r3, #52	; 0x34
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	68f9      	ldr	r1, [r7, #12]
 80114c8:	4610      	mov	r0, r2
 80114ca:	4798      	blx	r3
 80114cc:	4603      	mov	r3, r0
 80114ce:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	759a      	strb	r2, [r3, #22]
    }
 80114d4:	bf00      	nop
 80114d6:	3718      	adds	r7, #24
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <_ZN8touchgfx4ViewI13PongPresenterED1Ev>:
class View : public Screen
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	4a05      	ldr	r2, [pc, #20]	; (80114fc <_ZN8touchgfx4ViewI13PongPresenterED1Ev+0x20>)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	601a      	str	r2, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7fd ff69 	bl	800f3c4 <_ZN8touchgfx6ScreenD1Ev>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	4618      	mov	r0, r3
 80114f6:	3708      	adds	r7, #8
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	080281f4 	.word	0x080281f4

08011500 <_ZN8touchgfx4ViewI13PongPresenterED0Ev>:
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f7ff ffe7 	bl	80114dc <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 801150e:	2140      	movs	r1, #64	; 0x40
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f014 f8c9 	bl	80256a8 <_ZdlPvj>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <_ZN12PongViewBaseD1Ev>:

class PongViewBase : public touchgfx::View<PongPresenter>
{
public:
    PongViewBase();
    virtual ~PongViewBase() {}
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	4a1b      	ldr	r2, [pc, #108]	; (8011598 <_ZN12PongViewBaseD1Ev+0x78>)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011534:	4618      	mov	r0, r3
 8011536:	f000 fb99 	bl	8011c6c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011540:	4618      	mov	r0, r3
 8011542:	f7fe fb39 	bl	800fbb8 <_ZN8touchgfx6ButtonD1Ev>
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801154c:	4618      	mov	r0, r3
 801154e:	f7fe fb55 	bl	800fbfc <_ZN8touchgfx14ButtonWithIconD1Ev>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011558:	4618      	mov	r0, r3
 801155a:	f7ff f80f 	bl	801057c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	33ec      	adds	r3, #236	; 0xec
 8011562:	4618      	mov	r0, r3
 8011564:	f000 fba4 	bl	8011cb0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	33d4      	adds	r3, #212	; 0xd4
 801156c:	4618      	mov	r0, r3
 801156e:	f000 fbe3 	bl	8011d38 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	336c      	adds	r3, #108	; 0x6c
 8011576:	4618      	mov	r0, r3
 8011578:	f000 fbbc 	bl	8011cf4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	3340      	adds	r3, #64	; 0x40
 8011580:	4618      	mov	r0, r3
 8011582:	f7fe fb5d 	bl	800fc40 <_ZN8touchgfx5ImageD1Ev>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff ffa7 	bl	80114dc <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4618      	mov	r0, r3
 8011592:	3708      	adds	r7, #8
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	080280b8 	.word	0x080280b8

0801159c <_ZN12PongViewBaseD0Ev>:
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7ff ffbb 	bl	8011520 <_ZN12PongViewBaseD1Ev>
 80115aa:	f641 6124 	movw	r1, #7716	; 0x1e24
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f014 f87a 	bl	80256a8 <_ZdlPvj>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4618      	mov	r0, r3
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <_ZN12PongViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80115c6:	f007 ff1b 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 80115ca:	4603      	mov	r3, r0
    }
 80115cc:	4618      	mov	r0, r3
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <_ZN12PongViewBaseC1Ev>:
#include <gui_generated/pong_screen/PongViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

PongViewBase::PongViewBase() :
 80115d4:	b590      	push	{r4, r7, lr}
 80115d6:	b099      	sub	sp, #100	; 0x64
 80115d8:	af02      	add	r7, sp, #8
 80115da:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &PongViewBase::buttonCallbackHandler)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	4618      	mov	r0, r3
 80115e0:	f000 fa62 	bl	8011aa8 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>
 80115e4:	4a7e      	ldr	r2, [pc, #504]	; (80117e0 <_ZN12PongViewBaseC1Ev+0x20c>)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80115f0:	f107 030c 	add.w	r3, r7, #12
 80115f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fd fed3 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80115fe:	f107 030c 	add.w	r3, r7, #12
 8011602:	4619      	mov	r1, r3
 8011604:	4620      	mov	r0, r4
 8011606:	f7fd ffe1 	bl	800f5cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	336c      	adds	r3, #108	; 0x6c
 801160e:	4618      	mov	r0, r3
 8011610:	f000 faa4 	bl	8011b5c <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801161a:	f107 0310 	add.w	r3, r7, #16
 801161e:	2100      	movs	r1, #0
 8011620:	4618      	mov	r0, r3
 8011622:	f7fd feb0 	bl	800f386 <_ZN8touchgfx9colortypeC1Em>
 8011626:	22ff      	movs	r2, #255	; 0xff
 8011628:	6939      	ldr	r1, [r7, #16]
 801162a:	4620      	mov	r0, r4
 801162c:	f7ff ff00 	bl	8011430 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	33ec      	adds	r3, #236	; 0xec
 8011634:	4618      	mov	r0, r3
 8011636:	f000 fab3 	bl	8011ba0 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011640:	4618      	mov	r0, r3
 8011642:	f7fe fcbf 	bl	800ffc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801164c:	4618      	mov	r0, r3
 801164e:	f006 fcc3 	bl	8017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011658:	4618      	mov	r0, r3
 801165a:	f7fe fbb7 	bl	800fdcc <_ZN8touchgfx6ButtonC1Ev>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 8011664:	4b5f      	ldr	r3, [pc, #380]	; (80117e4 <_ZN12PongViewBaseC1Ev+0x210>)
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	2300      	movs	r3, #0
 801166a:	61bb      	str	r3, [r7, #24]
 801166c:	f107 0314 	add.w	r3, r7, #20
 8011670:	cb0c      	ldmia	r3, {r2, r3}
 8011672:	6879      	ldr	r1, [r7, #4]
 8011674:	f000 faac 	bl	8011bd0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801167e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011682:	4618      	mov	r0, r3
 8011684:	f006 fe34 	bl	80182f0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    image1.setXY(0, 0);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	3340      	adds	r3, #64	; 0x40
 801168c:	2200      	movs	r2, #0
 801168e:	2100      	movs	r1, #0
 8011690:	4618      	mov	r0, r3
 8011692:	f7fa ff70 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_S_ID));
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801169c:	f107 031c 	add.w	r3, r7, #28
 80116a0:	210d      	movs	r1, #13
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fd fe7e 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80116a8:	f107 031c 	add.w	r3, r7, #28
 80116ac:	4619      	mov	r1, r3
 80116ae:	4620      	mov	r0, r4
 80116b0:	f006 fcb6 	bl	8018020 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    ball.setPosition(200, 85, 80, 80);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80116ba:	2350      	movs	r3, #80	; 0x50
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	2350      	movs	r3, #80	; 0x50
 80116c0:	2255      	movs	r2, #85	; 0x55
 80116c2:	21c8      	movs	r1, #200	; 0xc8
 80116c4:	f7fa fef2 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    ball.setCenter(40, 40);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	336c      	adds	r3, #108	; 0x6c
 80116cc:	2228      	movs	r2, #40	; 0x28
 80116ce:	2128      	movs	r1, #40	; 0x28
 80116d0:	4618      	mov	r0, r3
 80116d2:	f000 f99d 	bl	8011a10 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    ball.setRadius(20);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	336c      	adds	r3, #108	; 0x6c
 80116da:	2114      	movs	r1, #20
 80116dc:	4618      	mov	r0, r3
 80116de:	f000 fa97 	bl	8011c10 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    ball.setLineWidth(0);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	336c      	adds	r3, #108	; 0x6c
 80116e6:	2100      	movs	r1, #0
 80116e8:	4618      	mov	r0, r3
 80116ea:	f000 faa8 	bl	8011c3e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    ball.setArc(0, 360);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	336c      	adds	r3, #108	; 0x6c
 80116f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80116f6:	2100      	movs	r1, #0
 80116f8:	4618      	mov	r0, r3
 80116fa:	f000 f9af 	bl	8011a5c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    ballPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 255, 141));
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8011704:	228d      	movs	r2, #141	; 0x8d
 8011706:	21ff      	movs	r1, #255	; 0xff
 8011708:	2006      	movs	r0, #6
 801170a:	f7fe f843 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801170e:	4603      	mov	r3, r0
 8011710:	4619      	mov	r1, r3
 8011712:	4620      	mov	r0, r4
 8011714:	f7ff feac 	bl	8011470 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    ball.setPainter(ballPainter);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	33d4      	adds	r3, #212	; 0xd4
 8011722:	4619      	mov	r1, r3
 8011724:	4610      	mov	r0, r2
 8011726:	f005 fe45 	bl	80173b4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    paddle1.setPosition(66, 212, 134, 29);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8011730:	231d      	movs	r3, #29
 8011732:	9300      	str	r3, [sp, #0]
 8011734:	2386      	movs	r3, #134	; 0x86
 8011736:	22d4      	movs	r2, #212	; 0xd4
 8011738:	2142      	movs	r1, #66	; 0x42
 801173a:	f7fa feb7 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    paddle1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 171, 6));
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8011744:	2206      	movs	r2, #6
 8011746:	21ab      	movs	r1, #171	; 0xab
 8011748:	20ff      	movs	r0, #255	; 0xff
 801174a:	f7fe f823 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801174e:	4603      	mov	r3, r0
 8011750:	4619      	mov	r1, r3
 8011752:	4620      	mov	r0, r4
 8011754:	f7fd fef6 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    score.setXY(363, 0);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801175e:	2200      	movs	r2, #0
 8011760:	f240 116b 	movw	r1, #363	; 0x16b
 8011764:	4618      	mov	r0, r3
 8011766:	f7fa ff06 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(18, 252, 62));
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8011770:	223e      	movs	r2, #62	; 0x3e
 8011772:	21fc      	movs	r1, #252	; 0xfc
 8011774:	2012      	movs	r0, #18
 8011776:	f7fe f80d 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801177a:	4603      	mov	r3, r0
 801177c:	64bc      	str	r4, [r7, #72]	; 0x48
 801177e:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8011780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011782:	68ba      	ldr	r2, [r7, #8]
 8011784:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801178c:	653b      	str	r3, [r7, #80]	; 0x50
 801178e:	2300      	movs	r3, #0
 8011790:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        linespace = space;
 8011794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011796:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801179a:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80117a2:	f107 0320 	add.w	r3, r7, #32
 80117a6:	210e      	movs	r1, #14
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7fd ff39 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 80117ae:	f107 0320 	add.w	r3, r7, #32
 80117b2:	657b      	str	r3, [r7, #84]	; 0x54
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80117b4:	4b0c      	ldr	r3, [pc, #48]	; (80117e8 <_ZN12PongViewBaseC1Ev+0x214>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d105      	bne.n	80117c8 <_ZN12PongViewBaseC1Ev+0x1f4>
 80117bc:	4b0b      	ldr	r3, [pc, #44]	; (80117ec <_ZN12PongViewBaseC1Ev+0x218>)
 80117be:	4a0c      	ldr	r2, [pc, #48]	; (80117f0 <_ZN12PongViewBaseC1Ev+0x21c>)
 80117c0:	21b1      	movs	r1, #177	; 0xb1
 80117c2:	480c      	ldr	r0, [pc, #48]	; (80117f4 <_ZN12PongViewBaseC1Ev+0x220>)
 80117c4:	f013 ff9c 	bl	8025700 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80117c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ca:	889a      	ldrh	r2, [r3, #4]
 80117cc:	4b0a      	ldr	r3, [pc, #40]	; (80117f8 <_ZN12PongViewBaseC1Ev+0x224>)
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d315      	bcc.n	8011800 <_ZN12PongViewBaseC1Ev+0x22c>
 80117d4:	4b09      	ldr	r3, [pc, #36]	; (80117fc <_ZN12PongViewBaseC1Ev+0x228>)
 80117d6:	4a06      	ldr	r2, [pc, #24]	; (80117f0 <_ZN12PongViewBaseC1Ev+0x21c>)
 80117d8:	21b2      	movs	r1, #178	; 0xb2
 80117da:	4806      	ldr	r0, [pc, #24]	; (80117f4 <_ZN12PongViewBaseC1Ev+0x220>)
 80117dc:	f013 ff90 	bl	8025700 <__assert_func>
 80117e0:	080280b8 	.word	0x080280b8
 80117e4:	080119c9 	.word	0x080119c9
 80117e8:	2000b3fc 	.word	0x2000b3fc
 80117ec:	08026ed8 	.word	0x08026ed8
 80117f0:	08028278 	.word	0x08028278
 80117f4:	08026f1c 	.word	0x08026f1c
 80117f8:	2000b400 	.word	0x2000b400
 80117fc:	08026f60 	.word	0x08026f60
        return texts->getText(typedTextId);
 8011800:	4b6a      	ldr	r3, [pc, #424]	; (80119ac <_ZN12PongViewBaseC1Ev+0x3d8>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011806:	4611      	mov	r1, r2
 8011808:	4618      	mov	r0, r3
 801180a:	f001 f84d 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 801180e:	4603      	mov	r3, r0
 8011810:	4a67      	ldr	r2, [pc, #412]	; (80119b0 <_ZN12PongViewBaseC1Ev+0x3dc>)
 8011812:	2114      	movs	r1, #20
 8011814:	4620      	mov	r0, r4
 8011816:	f00a f84d 	bl	801b8b4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801181a:	f107 0320 	add.w	r3, r7, #32
 801181e:	4618      	mov	r0, r3
 8011820:	f7fa faa6 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011830:	4619      	mov	r1, r3
 8011832:	4610      	mov	r0, r2
 8011834:	f7fe fbdc 	bl	800fff0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801183e:	4618      	mov	r0, r3
 8011840:	f006 f916 	bl	8017a70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 801184a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801184e:	210d      	movs	r1, #13
 8011850:	4618      	mov	r0, r3
 8011852:	f7fd fee5 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 8011856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801185a:	4619      	mov	r1, r3
 801185c:	4620      	mov	r0, r4
 801185e:	f006 f931 	bl	8017ac4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011866:	4618      	mov	r0, r3
 8011868:	f7fa fa82 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>

    Back_Button.setXY(0, 0);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011872:	2200      	movs	r2, #0
 8011874:	2100      	movs	r1, #0
 8011876:	4618      	mov	r0, r3
 8011878:	f7fa fe7d 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8011882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011886:	2102      	movs	r1, #2
 8011888:	4618      	mov	r0, r3
 801188a:	f7fd fd8b 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 801188e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011892:	2103      	movs	r1, #3
 8011894:	4618      	mov	r0, r3
 8011896:	f7fd fd85 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 801189a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801189e:	2108      	movs	r1, #8
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fd fd7f 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80118a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118aa:	2108      	movs	r1, #8
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fd fd79 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80118b2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80118b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80118ba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80118be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	4603      	mov	r3, r0
 80118c6:	4620      	mov	r0, r4
 80118c8:	f006 fae2 	bl	8017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80118d2:	220f      	movs	r2, #15
 80118d4:	2113      	movs	r1, #19
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fd fe60 	bl	800f59c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80118e8:	4619      	mov	r1, r3
 80118ea:	4610      	mov	r0, r2
 80118ec:	f7fd fdd1 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    button1.setXY(636, -35);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80118f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80118fa:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fa fe39 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 801190a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801190e:	2100      	movs	r1, #0
 8011910:	4618      	mov	r0, r3
 8011912:	f7fd fd47 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8011916:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801191a:	2101      	movs	r1, #1
 801191c:	4618      	mov	r0, r3
 801191e:	f7fd fd41 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8011922:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801192a:	4619      	mov	r1, r3
 801192c:	4620      	mov	r0, r4
 801192e:	f006 f903 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801193e:	4619      	mov	r1, r3
 8011940:	4610      	mov	r0, r2
 8011942:	f7fd fda6 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(image1);
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3340      	adds	r3, #64	; 0x40
 801194c:	4619      	mov	r1, r3
 801194e:	4610      	mov	r0, r2
 8011950:	f7fd fd90 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ball);
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	336c      	adds	r3, #108	; 0x6c
 801195a:	4619      	mov	r1, r3
 801195c:	4610      	mov	r0, r2
 801195e:	f7fd fd89 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(paddle1);
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	33ec      	adds	r3, #236	; 0xec
 8011968:	4619      	mov	r1, r3
 801196a:	4610      	mov	r0, r2
 801196c:	f7fd fd82 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011978:	4619      	mov	r1, r3
 801197a:	4610      	mov	r0, r2
 801197c:	f7fd fd7a 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011988:	4619      	mov	r1, r3
 801198a:	4610      	mov	r0, r2
 801198c:	f7fd fd72 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011998:	4619      	mov	r1, r3
 801199a:	4610      	mov	r0, r2
 801199c:	f7fd fd6a 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	4618      	mov	r0, r3
 80119a4:	375c      	adds	r7, #92	; 0x5c
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd90      	pop	{r4, r7, pc}
 80119aa:	bf00      	nop
 80119ac:	2000b408 	.word	0x2000b408
 80119b0:	08026fb4 	.word	0x08026fb4

080119b4 <_ZN12PongViewBase11setupScreenEv>:

void PongViewBase::setupScreen()
{
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]

}
 80119bc:	bf00      	nop
 80119be:	370c      	adds	r7, #12
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void PongViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80119d8:	683a      	ldr	r2, [r7, #0]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d107      	bne.n	80119ee <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //back_to_main_screen
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenSlideTransitionEast();
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f7ff fded 	bl	80115be <_ZN12PongViewBase11applicationEv>
 80119e4:	4603      	mov	r3, r0
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fb f8b4 	bl	800cb54 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>
        //over
        //When button1 clicked change screen to gameover
        //Go to gameover with no screen transition
        application().gotogameoverScreenNoTransition();
    }
}
 80119ec:	e00c      	b.n	8011a08 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
    else if (&src == &button1)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d106      	bne.n	8011a08 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
        application().gotogameoverScreenNoTransition();
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7ff fddf 	bl	80115be <_ZN12PongViewBase11applicationEv>
 8011a00:	4603      	mov	r3, r0
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7fb f978 	bl	800ccf8 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 8011a08:	bf00      	nop
 8011a0a:	3708      	adds	r7, #8
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b088      	sub	sp, #32
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	60f8      	str	r0, [r7, #12]
 8011a18:	60b9      	str	r1, [r7, #8]
 8011a1a:	607a      	str	r2, [r7, #4]
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8011a20:	69bb      	ldr	r3, [r7, #24]
 8011a22:	015a      	lsls	r2, r3, #5
 8011a24:	f107 0314 	add.w	r3, r7, #20
 8011a28:	4611      	mov	r1, r2
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7ff fc51 	bl	80112d2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	631a      	str	r2, [r3, #48]	; 0x30
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	61fb      	str	r3, [r7, #28]
 8011a3c:	69fb      	ldr	r3, [r7, #28]
 8011a3e:	015a      	lsls	r2, r3, #5
 8011a40:	f107 0310 	add.w	r3, r7, #16
 8011a44:	4611      	mov	r1, r2
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7ff fc43 	bl	80112d2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8011a54:	bf00      	nop
 8011a56:	3720      	adds	r7, #32
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b088      	sub	sp, #32
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	607a      	str	r2, [r7, #4]
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	61bb      	str	r3, [r7, #24]
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	015a      	lsls	r2, r3, #5
 8011a70:	f107 0314 	add.w	r3, r7, #20
 8011a74:	4611      	mov	r1, r2
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7ff fc2b 	bl	80112d2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	61fb      	str	r3, [r7, #28]
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	015a      	lsls	r2, r3, #5
 8011a8c:	f107 0310 	add.w	r3, r7, #16
 8011a90:	4611      	mov	r1, r2
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7ff fc1d 	bl	80112d2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8011aa0:	bf00      	nop
 8011aa2:	3720      	adds	r7, #32
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>:
    View()
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f008 fc5a 	bl	801a36c <_ZN8touchgfx6ScreenC1Ev>
 8011ab8:	4a05      	ldr	r2, [pc, #20]	; (8011ad0 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev+0x28>)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	601a      	str	r2, [r3, #0]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	080281f4 	.word	0x080281f4

08011ad4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	4a05      	ldr	r2, [pc, #20]	; (8011af4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	601a      	str	r2, [r3, #0]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7fa ff71 	bl	800c9cc <_ZN8touchgfx6WidgetD1Ev>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	4618      	mov	r0, r3
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	080299d8 	.word	0x080299d8

08011af8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff ffe7 	bl	8011ad4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011b06:	2130      	movs	r1, #48	; 0x30
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f013 fdcd 	bl	80256a8 <_ZdlPvj>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	4a05      	ldr	r2, [pc, #20]	; (8011b38 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	601a      	str	r2, [r3, #0]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7ff ffd3 	bl	8011ad4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4618      	mov	r0, r3
 8011b32:	3708      	adds	r7, #8
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	080298cc 	.word	0x080298cc

08011b3c <_ZN8touchgfx6CircleD0Ev>:
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff ffe7 	bl	8011b18 <_ZN8touchgfx6CircleD1Ev>
 8011b4a:	214c      	movs	r1, #76	; 0x4c
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f013 fdab 	bl	80256a8 <_ZdlPvj>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	3708      	adds	r7, #8
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	4618      	mov	r0, r3
 8011b68:	f004 fffe 	bl	8016b68 <_ZN8touchgfx6CircleC1Ev>
 8011b6c:	4a0b      	ldr	r2, [pc, #44]	; (8011b9c <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	601a      	str	r2, [r3, #0]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	4618      	mov	r0, r3
 8011b94:	3708      	adds	r7, #8
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	0802816c 	.word	0x0802816c

08011ba0 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
        : T()
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fd fca2 	bl	800f4f4 <_ZN8touchgfx3BoxC1Ev>
 8011bb0:	4a06      	ldr	r2, [pc, #24]	; (8011bcc <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev+0x2c>)
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2101      	movs	r1, #1
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fe f8cf 	bl	800fd5e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	08028104 	.word	0x08028104

08011bd0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	4639      	mov	r1, r7
 8011bdc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7fd ff32 	bl	800fa4c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011be8:	4a08      	ldr	r2, [pc, #32]	; (8011c0c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	68ba      	ldr	r2, [r7, #8]
 8011bf2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	3308      	adds	r3, #8
 8011bf8:	463a      	mov	r2, r7
 8011bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bfe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	4618      	mov	r0, r3
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	080280ec 	.word	0x080280ec

08011c10 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	60fb      	str	r3, [r7, #12]
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	015a      	lsls	r2, r3, #5
 8011c22:	f107 0308 	add.w	r3, r7, #8
 8011c26:	4611      	mov	r1, r2
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7ff fb52 	bl	80112d2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8011c36:	bf00      	nop
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	6039      	str	r1, [r7, #0]
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	015a      	lsls	r2, r3, #5
 8011c50:	f107 0308 	add.w	r3, r7, #8
 8011c54:	4611      	mov	r1, r2
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ff fb3b 	bl	80112d2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8011c64:	bf00      	nop
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	4a05      	ldr	r2, [pc, #20]	; (8011c8c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	601a      	str	r2, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fd ff15 	bl	800faac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	4618      	mov	r0, r3
 8011c86:	3708      	adds	r7, #8
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	080280ec 	.word	0x080280ec

08011c90 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f7ff ffe7 	bl	8011c6c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011c9e:	2110      	movs	r1, #16
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f013 fd01 	bl	80256a8 <_ZdlPvj>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>:
class Draggable : public T
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	4a05      	ldr	r2, [pc, #20]	; (8011cd0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev+0x20>)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fd ff57 	bl	800fb74 <_ZN8touchgfx3BoxD1Ev>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	08028104 	.word	0x08028104

08011cd4 <_ZN8touchgfx9DraggableINS_3BoxEED0Ev>:
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7ff ffe7 	bl	8011cb0 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8011ce2:	2130      	movs	r1, #48	; 0x30
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f013 fcdf 	bl	80256a8 <_ZdlPvj>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4618      	mov	r0, r3
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
class MoveAnimator : public T
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	4a05      	ldr	r2, [pc, #20]	; (8011d14 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	601a      	str	r2, [r3, #0]
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff ff07 	bl	8011b18 <_ZN8touchgfx6CircleD1Ev>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3708      	adds	r7, #8
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	0802816c 	.word	0x0802816c

08011d18 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7ff ffe7 	bl	8011cf4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8011d26:	2168      	movs	r1, #104	; 0x68
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f013 fcbd 	bl	80256a8 <_ZdlPvj>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	4618      	mov	r0, r3
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	4a05      	ldr	r2, [pc, #20]	; (8011d58 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	601a      	str	r2, [r3, #0]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7ff fb4f 	bl	80113ec <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4618      	mov	r0, r3
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	0802994c 	.word	0x0802994c

08011d5c <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f7ff ffe7 	bl	8011d38 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011d6a:	2118      	movs	r1, #24
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f013 fc9b 	bl	80256a8 <_ZdlPvj>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	4618      	mov	r0, r3
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	68d2      	ldr	r2, [r2, #12]
 8011d8e:	1052      	asrs	r2, r2, #1
 8011d90:	1898      	adds	r0, r3, r2
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	f003 0301 	and.w	r3, r3, #1
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d102      	bne.n	8011da4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	689b      	ldr	r3, [r3, #8]
 8011da2:	e00a      	b.n	8011dba <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	68d2      	ldr	r2, [r2, #12]
 8011dac:	1052      	asrs	r2, r2, #1
 8011dae:	4413      	add	r3, r2
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	6892      	ldr	r2, [r2, #8]
 8011db6:	4413      	add	r3, r2
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	6839      	ldr	r1, [r7, #0]
 8011dbc:	4798      	blx	r3
    }
 8011dbe:	bf00      	nop
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011dc6:	b480      	push	{r7}
 8011dc8:	b083      	sub	sp, #12
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d010      	beq.n	8011df8 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d107      	bne.n	8011dee <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	f003 0301 	and.w	r3, r3, #1
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d101      	bne.n	8011dee <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011dea:	2301      	movs	r3, #1
 8011dec:	e000      	b.n	8011df0 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011dee:	2300      	movs	r3, #0
 8011df0:	2b01      	cmp	r3, #1
 8011df2:	d001      	beq.n	8011df8 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011df4:	2301      	movs	r3, #1
 8011df6:	e000      	b.n	8011dfa <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011df8:	2300      	movs	r3, #0
    }
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	370c      	adds	r7, #12
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr

08011e06 <_ZN8touchgfx9DraggableINS_3BoxEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  evt The drag event.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8011e06:	b5b0      	push	{r4, r5, r7, lr}
 8011e08:	b082      	sub	sp, #8
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(evt);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fa fc0a 	bl	800c62e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(evt.getDeltaX(), evt.getDeltaY());
 8011e1a:	687c      	ldr	r4, [r7, #4]
 8011e1c:	6838      	ldr	r0, [r7, #0]
 8011e1e:	f7ff f9ca 	bl	80111b6 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 8011e22:	4603      	mov	r3, r0
 8011e24:	461d      	mov	r5, r3
 8011e26:	6838      	ldr	r0, [r7, #0]
 8011e28:	f7ff f9da 	bl	80111e0 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	461a      	mov	r2, r3
 8011e30:	4629      	mov	r1, r5
 8011e32:	4620      	mov	r0, r4
 8011e34:	f007 ff36 	bl	8019ca4 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 8011e38:	bf00      	nop
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bdb0      	pop	{r4, r5, r7, pc}

08011e40 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
        }
    }

protected:
    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fa fbfa 	bl	800c644 <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f000 f821 	bl	8011e98 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 8011e56:	bf00      	nop
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	460b      	mov	r3, r1
 8011e68:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	887a      	ldrh	r2, [r7, #2]
 8011e6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 8011e72:	bf00      	nop
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 8011e7e:	b480      	push	{r7}
 8011e80:	b083      	sub	sp, #12
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:

    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 8011e98:	b590      	push	{r4, r7, lr}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f000 80ad 	beq.w	8012006 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d208      	bcs.n	8011ece <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 8011ecc:	e09b      	b.n	8012006 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011edc:	4619      	mov	r1, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ee4:	440b      	add	r3, r1
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d850      	bhi.n	8011f8c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011ef8:	1ad3      	subs	r3, r2, r3
 8011efa:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	b298      	uxth	r0, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8011f0a:	b29a      	uxth	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	1ad3      	subs	r3, r2, r3
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	b21a      	sxth	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f20:	2100      	movs	r1, #0
 8011f22:	47a0      	blx	r4
 8011f24:	4603      	mov	r3, r0
 8011f26:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	b298      	uxth	r0, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	1ad3      	subs	r3, r2, r3
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	b21a      	sxth	r2, r3
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	47a0      	blx	r4
 8011f50:	4603      	mov	r3, r0
 8011f52:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	897b      	ldrh	r3, [r7, #10]
 8011f60:	4413      	add	r3, r2
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	b219      	sxth	r1, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	893b      	ldrh	r3, [r7, #8]
 8011f70:	4413      	add	r3, r2
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	b21b      	sxth	r3, r3
 8011f76:	461a      	mov	r2, r3
 8011f78:	f7fa fb88 	bl	800c68c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011f82:	3301      	adds	r3, #1
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011f92:	461a      	mov	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011fa2:	440b      	add	r3, r1
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d92e      	bls.n	8012006 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 8011fb8:	f007 fa22 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	4610      	mov	r0, r2
 8011fc4:	f007 fa22 	bl	801940c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d00d      	beq.n	8011fec <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	330c      	adds	r3, #12
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4610      	mov	r0, r2
 8011fe0:	4798      	blx	r3
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d001      	beq.n	8011fec <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e000      	b.n	8011fee <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 8011fec:	2300      	movs	r3, #0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d009      	beq.n	8012006 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	3308      	adds	r3, #8
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	6879      	ldr	r1, [r7, #4]
 8012002:	4610      	mov	r0, r2
 8012004:	4798      	blx	r3
    }
 8012006:	bf00      	nop
 8012008:	3714      	adds	r7, #20
 801200a:	46bd      	mov	sp, r7
 801200c:	bd90      	pop	{r4, r7, pc}
	...

08012010 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	4a05      	ldr	r2, [pc, #20]	; (8012030 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4618      	mov	r0, r3
 8012022:	f7fd f9cf 	bl	800f3c4 <_ZN8touchgfx6ScreenD1Ev>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}
 8012030:	080282fc 	.word	0x080282fc

08012034 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7ff ffe7 	bl	8012010 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8012042:	2140      	movs	r1, #64	; 0x40
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f013 fb2f 	bl	80256a8 <_ZdlPvj>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	4618      	mov	r0, r3
 801204e:	3708      	adds	r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8012054:	b580      	push	{r7, lr}
 8012056:	b082      	sub	sp, #8
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	4a13      	ldr	r2, [pc, #76]	; (80120ac <_ZN14screenViewBaseD1Ev+0x58>)
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012068:	4618      	mov	r0, r3
 801206a:	f000 fa1d 	bl	80124a8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012074:	4618      	mov	r0, r3
 8012076:	f7fe fa59 	bl	801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	33b8      	adds	r3, #184	; 0xb8
 801207e:	4618      	mov	r0, r3
 8012080:	f7fe fa54 	bl	801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	3370      	adds	r3, #112	; 0x70
 8012088:	4618      	mov	r0, r3
 801208a:	f7fe fa4f 	bl	801052c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	3340      	adds	r3, #64	; 0x40
 8012092:	4618      	mov	r0, r3
 8012094:	f7fd fd6e 	bl	800fb74 <_ZN8touchgfx3BoxD1Ev>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	4618      	mov	r0, r3
 801209c:	f7ff ffb8 	bl	8012010 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4618      	mov	r0, r3
 80120a4:	3708      	adds	r7, #8
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	080282b0 	.word	0x080282b0

080120b0 <_ZN14screenViewBaseD0Ev>:
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7ff ffcb 	bl	8012054 <_ZN14screenViewBaseD1Ev>
 80120be:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f013 faf0 	bl	80256a8 <_ZdlPvj>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	4618      	mov	r0, r3
 80120cc:	3708      	adds	r7, #8
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b082      	sub	sp, #8
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80120da:	f007 f991 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 80120de:	4603      	mov	r3, r0
    }
 80120e0:	4618      	mov	r0, r3
 80120e2:	3708      	adds	r7, #8
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 80120e8:	b590      	push	{r4, r7, lr}
 80120ea:	b093      	sub	sp, #76	; 0x4c
 80120ec:	af02      	add	r7, sp, #8
 80120ee:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 f9a2 	bl	801243c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 80120f8:	4ab1      	ldr	r2, [pc, #708]	; (80123c0 <_ZN14screenViewBaseC1Ev+0x2d8>)
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	601a      	str	r2, [r3, #0]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	3340      	adds	r3, #64	; 0x40
 8012102:	4618      	mov	r0, r3
 8012104:	f7fd f9f6 	bl	800f4f4 <_ZN8touchgfx3BoxC1Ev>
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	3370      	adds	r3, #112	; 0x70
 801210c:	4618      	mov	r0, r3
 801210e:	f006 f8c3 	bl	8018298 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	33b8      	adds	r3, #184	; 0xb8
 8012116:	4618      	mov	r0, r3
 8012118:	f006 f8be 	bl	8018298 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012122:	4618      	mov	r0, r3
 8012124:	f006 f8b8 	bl	8018298 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 801212e:	4ba5      	ldr	r3, [pc, #660]	; (80123c4 <_ZN14screenViewBaseC1Ev+0x2dc>)
 8012130:	60bb      	str	r3, [r7, #8]
 8012132:	2300      	movs	r3, #0
 8012134:	60fb      	str	r3, [r7, #12]
 8012136:	f107 0308 	add.w	r3, r7, #8
 801213a:	cb0c      	ldmia	r3, {r2, r3}
 801213c:	6879      	ldr	r1, [r7, #4]
 801213e:	f000 f993 	bl	8012468 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012148:	f44f 7388 	mov.w	r3, #272	; 0x110
 801214c:	9300      	str	r3, [sp, #0]
 801214e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012152:	2200      	movs	r2, #0
 8012154:	2100      	movs	r1, #0
 8012156:	f7fa f9a9 	bl	800c4ac <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012160:	22ff      	movs	r2, #255	; 0xff
 8012162:	21ff      	movs	r1, #255	; 0xff
 8012164:	20ff      	movs	r0, #255	; 0xff
 8012166:	f7fd fb15 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801216a:	4603      	mov	r3, r0
 801216c:	4619      	mov	r1, r3
 801216e:	4620      	mov	r0, r4
 8012170:	f7fd f9e8 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 18);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	3370      	adds	r3, #112	; 0x70
 8012178:	2212      	movs	r2, #18
 801217a:	219b      	movs	r1, #155	; 0x9b
 801217c:	4618      	mov	r0, r3
 801217e:	f7fa f9fa 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012188:	f107 0310 	add.w	r3, r7, #16
 801218c:	2100      	movs	r1, #0
 801218e:	4618      	mov	r0, r3
 8012190:	f7fd f908 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8012194:	f107 0314 	add.w	r3, r7, #20
 8012198:	2101      	movs	r1, #1
 801219a:	4618      	mov	r0, r3
 801219c:	f7fd f902 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80121a0:	f107 0214 	add.w	r2, r7, #20
 80121a4:	f107 0310 	add.w	r3, r7, #16
 80121a8:	4619      	mov	r1, r3
 80121aa:	4620      	mov	r0, r4
 80121ac:	f005 fcc4 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121b6:	f107 0318 	add.w	r3, r7, #24
 80121ba:	2100      	movs	r1, #0
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fd fa2f 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 80121c2:	f107 0318 	add.w	r3, r7, #24
 80121c6:	4619      	mov	r1, r3
 80121c8:	4620      	mov	r0, r4
 80121ca:	f7fd fe33 	bl	800fe34 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80121ce:	f107 0318 	add.w	r3, r7, #24
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7f9 fdcc 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121de:	22ff      	movs	r2, #255	; 0xff
 80121e0:	21ff      	movs	r1, #255	; 0xff
 80121e2:	20ff      	movs	r0, #255	; 0xff
 80121e4:	f7fd fad6 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121e8:	4603      	mov	r3, r0
 80121ea:	4619      	mov	r1, r3
 80121ec:	4620      	mov	r0, r4
 80121ee:	f7fd fe33 	bl	800fe58 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121f8:	22ff      	movs	r2, #255	; 0xff
 80121fa:	21ff      	movs	r1, #255	; 0xff
 80121fc:	20ff      	movs	r0, #255	; 0xff
 80121fe:	f7fd fac9 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012202:	4603      	mov	r3, r0
 8012204:	4619      	mov	r1, r3
 8012206:	4620      	mov	r0, r4
 8012208:	f7fd fe34 	bl	800fe74 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012218:	4619      	mov	r1, r3
 801221a:	4610      	mov	r0, r2
 801221c:	f7fd f939 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 106);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	33b8      	adds	r3, #184	; 0xb8
 8012224:	226a      	movs	r2, #106	; 0x6a
 8012226:	219b      	movs	r1, #155	; 0x9b
 8012228:	4618      	mov	r0, r3
 801222a:	f7fa f9a4 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8012234:	f107 0320 	add.w	r3, r7, #32
 8012238:	2100      	movs	r1, #0
 801223a:	4618      	mov	r0, r3
 801223c:	f7fd f8b2 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 8012240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012244:	2101      	movs	r1, #1
 8012246:	4618      	mov	r0, r3
 8012248:	f7fd f8ac 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 801224c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012250:	f107 0320 	add.w	r3, r7, #32
 8012254:	4619      	mov	r1, r3
 8012256:	4620      	mov	r0, r4
 8012258:	f005 fc6e 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8012262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012266:	2101      	movs	r1, #1
 8012268:	4618      	mov	r0, r3
 801226a:	f7fd f9d9 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 801226e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012272:	4619      	mov	r1, r3
 8012274:	4620      	mov	r0, r4
 8012276:	f7fd fddd 	bl	800fe34 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801227a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801227e:	4618      	mov	r0, r3
 8012280:	f7f9 fd76 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801228a:	22ff      	movs	r2, #255	; 0xff
 801228c:	21ff      	movs	r1, #255	; 0xff
 801228e:	20ff      	movs	r0, #255	; 0xff
 8012290:	f7fd fa80 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012294:	4603      	mov	r3, r0
 8012296:	4619      	mov	r1, r3
 8012298:	4620      	mov	r0, r4
 801229a:	f7fd fddd 	bl	800fe58 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80122a4:	22ff      	movs	r2, #255	; 0xff
 80122a6:	21ff      	movs	r1, #255	; 0xff
 80122a8:	20ff      	movs	r0, #255	; 0xff
 80122aa:	f7fd fa73 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122ae:	4603      	mov	r3, r0
 80122b0:	4619      	mov	r1, r3
 80122b2:	4620      	mov	r0, r4
 80122b4:	f7fd fdde 	bl	800fe74 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80122c4:	4619      	mov	r1, r3
 80122c6:	4610      	mov	r0, r2
 80122c8:	f7fd f8e3 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 197);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122d2:	22c5      	movs	r2, #197	; 0xc5
 80122d4:	219b      	movs	r1, #155	; 0x9b
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fa f94d 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80122e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122e6:	2100      	movs	r1, #0
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7fd f85b 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80122ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80122f2:	2101      	movs	r1, #1
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fd f855 	bl	800f3a4 <_ZN8touchgfx6BitmapC1Et>
 80122fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80122fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012302:	4619      	mov	r1, r3
 8012304:	4620      	mov	r0, r4
 8012306:	f005 fc17 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012310:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012314:	2102      	movs	r1, #2
 8012316:	4618      	mov	r0, r3
 8012318:	f7fd f982 	bl	800f620 <_ZN8touchgfx9TypedTextC1Et>
 801231c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012320:	4619      	mov	r1, r3
 8012322:	4620      	mov	r0, r4
 8012324:	f7fd fd86 	bl	800fe34 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8012328:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801232c:	4618      	mov	r0, r3
 801232e:	f7f9 fd1f 	bl	800bd70 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012338:	22ff      	movs	r2, #255	; 0xff
 801233a:	21ff      	movs	r1, #255	; 0xff
 801233c:	20ff      	movs	r0, #255	; 0xff
 801233e:	f7fd fa29 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012342:	4603      	mov	r3, r0
 8012344:	4619      	mov	r1, r3
 8012346:	4620      	mov	r0, r4
 8012348:	f7fd fd86 	bl	800fe58 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012352:	22ff      	movs	r2, #255	; 0xff
 8012354:	21ff      	movs	r1, #255	; 0xff
 8012356:	20ff      	movs	r0, #255	; 0xff
 8012358:	f7fd fa1c 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801235c:	4603      	mov	r3, r0
 801235e:	4619      	mov	r1, r3
 8012360:	4620      	mov	r0, r4
 8012362:	f7fd fd87 	bl	800fe74 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f503 7280 	add.w	r2, r3, #256	; 0x100
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012372:	4619      	mov	r1, r3
 8012374:	4610      	mov	r0, r2
 8012376:	f7fd f88c 	bl	800f492 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	3340      	adds	r3, #64	; 0x40
 8012380:	4619      	mov	r1, r3
 8012382:	4610      	mov	r0, r2
 8012384:	f7fd f876 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	3370      	adds	r3, #112	; 0x70
 801238e:	4619      	mov	r1, r3
 8012390:	4610      	mov	r0, r2
 8012392:	f7fd f86f 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	33b8      	adds	r3, #184	; 0xb8
 801239c:	4619      	mov	r1, r3
 801239e:	4610      	mov	r0, r2
 80123a0:	f7fd f868 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80123ac:	4619      	mov	r1, r3
 80123ae:	4610      	mov	r0, r2
 80123b0:	f7fd f860 	bl	800f474 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4618      	mov	r0, r3
 80123b8:	3744      	adds	r7, #68	; 0x44
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd90      	pop	{r4, r7, pc}
 80123be:	bf00      	nop
 80123c0:	080282b0 	.word	0x080282b0
 80123c4:	080123dd 	.word	0x080123dd

080123c8 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]

}
 80123d0:	bf00      	nop
 80123d2:	370c      	adds	r7, #12
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr

080123dc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	3370      	adds	r3, #112	; 0x70
 80123ea:	683a      	ldr	r2, [r7, #0]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d107      	bne.n	8012400 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with screen transition towards East
        application().gotoPongScreenCoverTransitionEast();
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7ff fe6e 	bl	80120d2 <_ZN14screenViewBase11applicationEv>
 80123f6:	4603      	mov	r3, r0
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fa fcc3 	bl	800cd84 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to gallery
        //Go to gallery with screen transition towards East
        application().gotogalleryScreenCoverTransitionEast();
    }
}
 80123fe:	e019      	b.n	8012434 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	33b8      	adds	r3, #184	; 0xb8
 8012404:	683a      	ldr	r2, [r7, #0]
 8012406:	429a      	cmp	r2, r3
 8012408:	d107      	bne.n	801241a <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoMusicScreenNoTransition();
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f7ff fe61 	bl	80120d2 <_ZN14screenViewBase11applicationEv>
 8012410:	4603      	mov	r3, r0
 8012412:	4618      	mov	r0, r3
 8012414:	f7fa fc2a 	bl	800cc6c <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>
}
 8012418:	e00c      	b.n	8012434 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012420:	683a      	ldr	r2, [r7, #0]
 8012422:	429a      	cmp	r2, r3
 8012424:	d106      	bne.n	8012434 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotogalleryScreenCoverTransitionEast();
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f7ff fe53 	bl	80120d2 <_ZN14screenViewBase11applicationEv>
 801242c:	4603      	mov	r3, r0
 801242e:	4618      	mov	r0, r3
 8012430:	f7fa fd34 	bl	800ce9c <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>
}
 8012434:	bf00      	nop
 8012436:	3708      	adds	r7, #8
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	4618      	mov	r0, r3
 8012448:	f007 ff90 	bl	801a36c <_ZN8touchgfx6ScreenC1Ev>
 801244c:	4a05      	ldr	r2, [pc, #20]	; (8012464 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	601a      	str	r2, [r3, #0]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2200      	movs	r2, #0
 8012456:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4618      	mov	r0, r3
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	080282fc 	.word	0x080282fc

08012468 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	4639      	mov	r1, r7
 8012474:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	4618      	mov	r0, r3
 801247c:	f7fd fae6 	bl	800fa4c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012480:	4a08      	ldr	r2, [pc, #32]	; (80124a4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	68ba      	ldr	r2, [r7, #8]
 801248a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	3308      	adds	r3, #8
 8012490:	463a      	mov	r2, r7
 8012492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012496:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	4618      	mov	r0, r3
 801249e:	3710      	adds	r7, #16
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	080282e4 	.word	0x080282e4

080124a8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	4a05      	ldr	r2, [pc, #20]	; (80124c8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fd faf7 	bl	800faac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	080282e4 	.word	0x080282e4

080124cc <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f7ff ffe7 	bl	80124a8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80124da:	2110      	movs	r1, #16
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f013 f8e3 	bl	80256a8 <_ZdlPvj>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4618      	mov	r0, r3
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	68d2      	ldr	r2, [r2, #12]
 80124fe:	1052      	asrs	r2, r2, #1
 8012500:	1898      	adds	r0, r3, r2
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	f003 0301 	and.w	r3, r3, #1
 801250a:	2b00      	cmp	r3, #0
 801250c:	d102      	bne.n	8012514 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	689b      	ldr	r3, [r3, #8]
 8012512:	e00a      	b.n	801252a <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	68d2      	ldr	r2, [r2, #12]
 801251c:	1052      	asrs	r2, r2, #1
 801251e:	4413      	add	r3, r2
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	6892      	ldr	r2, [r2, #8]
 8012526:	4413      	add	r3, r2
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	6839      	ldr	r1, [r7, #0]
 801252c:	4798      	blx	r3
    }
 801252e:	bf00      	nop
 8012530:	3708      	adds	r7, #8
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}

08012536 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8012536:	b480      	push	{r7}
 8012538:	b083      	sub	sp, #12
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d010      	beq.n	8012568 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d107      	bne.n	801255e <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	68db      	ldr	r3, [r3, #12]
 8012552:	f003 0301 	and.w	r3, r3, #1
 8012556:	2b00      	cmp	r3, #0
 8012558:	d101      	bne.n	801255e <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801255a:	2301      	movs	r3, #1
 801255c:	e000      	b.n	8012560 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801255e:	2300      	movs	r3, #0
 8012560:	2b01      	cmp	r3, #1
 8012562:	d001      	beq.n	8012568 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012564:	2301      	movs	r3, #1
 8012566:	e000      	b.n	801256a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012568:	2300      	movs	r3, #0
    }
 801256a:	4618      	mov	r0, r3
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr
	...

08012578 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012578:	b480      	push	{r7}
 801257a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801257c:	4b02      	ldr	r3, [pc, #8]	; (8012588 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801257e:	4618      	mov	r0, r3
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr
 8012588:	08028328 	.word	0x08028328

0801258c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801258c:	b480      	push	{r7}
 801258e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012590:	230e      	movs	r3, #14
}
 8012592:	4618      	mov	r0, r3
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	460b      	mov	r3, r1
 80125a6:	607a      	str	r2, [r7, #4]
 80125a8:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80125aa:	2300      	movs	r3, #0
    }
 80125ac:	4618      	mov	r0, r3
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80125b8:	b480      	push	{r7}
 80125ba:	b083      	sub	sp, #12
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80125c0:	2300      	movs	r3, #0
    }
 80125c2:	4618      	mov	r0, r3
 80125c4:	370c      	adds	r7, #12
 80125c6:	46bd      	mov	sp, r7
 80125c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125cc:	4770      	bx	lr
	...

080125d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80125d0:	b480      	push	{r7}
 80125d2:	b085      	sub	sp, #20
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60f8      	str	r0, [r7, #12]
 80125d8:	60b9      	str	r1, [r7, #8]
 80125da:	4613      	mov	r3, r2
 80125dc:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80125de:	4a07      	ldr	r2, [pc, #28]	; (80125fc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80125e4:	4a06      	ldr	r2, [pc, #24]	; (8012600 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80125ea:	4a06      	ldr	r2, [pc, #24]	; (8012604 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80125ec:	88fb      	ldrh	r3, [r7, #6]
 80125ee:	8013      	strh	r3, [r2, #0]
    }
 80125f0:	bf00      	nop
 80125f2:	3714      	adds	r7, #20
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr
 80125fc:	2000b3fc 	.word	0x2000b3fc
 8012600:	2000b404 	.word	0x2000b404
 8012604:	2000b400 	.word	0x2000b400

08012608 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012608:	b40e      	push	{r1, r2, r3}
 801260a:	b580      	push	{r7, lr}
 801260c:	b085      	sub	sp, #20
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8012612:	f107 0320 	add.w	r3, r7, #32
 8012616:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	69fa      	ldr	r2, [r7, #28]
 801261c:	2100      	movs	r1, #0
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f007 fa06 	bl	8019a30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012624:	4603      	mov	r3, r0
 8012626:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012628:	89fb      	ldrh	r3, [r7, #14]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012634:	b003      	add	sp, #12
 8012636:	4770      	bx	lr

08012638 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012638:	b40c      	push	{r2, r3}
 801263a:	b580      	push	{r7, lr}
 801263c:	b084      	sub	sp, #16
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
 8012642:	460b      	mov	r3, r1
 8012644:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8012646:	f107 031c 	add.w	r3, r7, #28
 801264a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 801264c:	78f9      	ldrb	r1, [r7, #3]
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	69ba      	ldr	r2, [r7, #24]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f007 f9ec 	bl	8019a30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012658:	4603      	mov	r3, r0
 801265a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801265c:	89fb      	ldrh	r3, [r7, #14]
}
 801265e:	4618      	mov	r0, r3
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012668:	b002      	add	sp, #8
 801266a:	4770      	bx	lr

0801266c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b08a      	sub	sp, #40	; 0x28
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	460b      	mov	r3, r1
 8012676:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801267c:	2b00      	cmp	r3, #0
 801267e:	d016      	beq.n	80126ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	331a      	adds	r3, #26
 8012684:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8012686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012688:	8adb      	ldrh	r3, [r3, #22]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d105      	bne.n	801269a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801268e:	4b42      	ldr	r3, [pc, #264]	; (8012798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8012690:	4a42      	ldr	r2, [pc, #264]	; (801279c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012692:	21c0      	movs	r1, #192	; 0xc0
 8012694:	4842      	ldr	r0, [pc, #264]	; (80127a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012696:	f013 f833 	bl	8025700 <__assert_func>
            return buffer[pos];
 801269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269c:	8a9b      	ldrh	r3, [r3, #20]
 801269e:	461a      	mov	r2, r3
 80126a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e000      	b.n	80126b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80126ae:	2300      	movs	r3, #0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d068      	beq.n	8012786 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f008 fd5d 	bl	801b174 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	331a      	adds	r3, #26
 80126be:	623b      	str	r3, [r7, #32]
 80126c0:	2301      	movs	r3, #1
 80126c2:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80126c4:	6a3b      	ldr	r3, [r7, #32]
 80126c6:	8adb      	ldrh	r3, [r3, #22]
 80126c8:	8bfa      	ldrh	r2, [r7, #30]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d305      	bcc.n	80126da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80126ce:	4b35      	ldr	r3, [pc, #212]	; (80127a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80126d0:	4a35      	ldr	r2, [pc, #212]	; (80127a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80126d2:	21c5      	movs	r1, #197	; 0xc5
 80126d4:	4832      	ldr	r0, [pc, #200]	; (80127a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80126d6:	f013 f813 	bl	8025700 <__assert_func>
            const uint16_t index = pos + offset;
 80126da:	6a3b      	ldr	r3, [r7, #32]
 80126dc:	8a9a      	ldrh	r2, [r3, #20]
 80126de:	8bfb      	ldrh	r3, [r7, #30]
 80126e0:	4413      	add	r3, r2
 80126e2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80126e4:	8bbb      	ldrh	r3, [r7, #28]
 80126e6:	2b09      	cmp	r3, #9
 80126e8:	d801      	bhi.n	80126ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80126ea:	8bbb      	ldrh	r3, [r7, #28]
 80126ec:	e001      	b.n	80126f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80126ee:	8bbb      	ldrh	r3, [r7, #28]
 80126f0:	3b0a      	subs	r3, #10
 80126f2:	6a3a      	ldr	r2, [r7, #32]
 80126f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126f8:	f640 123f 	movw	r2, #2367	; 0x93f
 80126fc:	4293      	cmp	r3, r2
 80126fe:	bf0c      	ite	eq
 8012700:	2301      	moveq	r3, #1
 8012702:	2300      	movne	r3, #0
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2b00      	cmp	r3, #0
 8012708:	d03d      	beq.n	8012786 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	331a      	adds	r3, #26
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	321a      	adds	r2, #26
 8012712:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8012714:	68ba      	ldr	r2, [r7, #8]
 8012716:	8ad2      	ldrh	r2, [r2, #22]
 8012718:	2a00      	cmp	r2, #0
 801271a:	d105      	bne.n	8012728 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 801271c:	4b1e      	ldr	r3, [pc, #120]	; (8012798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 801271e:	4a1f      	ldr	r2, [pc, #124]	; (801279c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012720:	21c0      	movs	r1, #192	; 0xc0
 8012722:	481f      	ldr	r0, [pc, #124]	; (80127a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012724:	f012 ffec 	bl	8025700 <__assert_func>
            return buffer[pos];
 8012728:	68ba      	ldr	r2, [r7, #8]
 801272a:	8a92      	ldrh	r2, [r2, #20]
 801272c:	4611      	mov	r1, r2
 801272e:	68ba      	ldr	r2, [r7, #8]
 8012730:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012734:	613b      	str	r3, [r7, #16]
 8012736:	4613      	mov	r3, r2
 8012738:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	8adb      	ldrh	r3, [r3, #22]
 801273e:	2b01      	cmp	r3, #1
 8012740:	d806      	bhi.n	8012750 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8012742:	4b1a      	ldr	r3, [pc, #104]	; (80127ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8012744:	4a1a      	ldr	r2, [pc, #104]	; (80127b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8012746:	f240 110d 	movw	r1, #269	; 0x10d
 801274a:	4815      	ldr	r0, [pc, #84]	; (80127a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801274c:	f012 ffd8 	bl	8025700 <__assert_func>
            const uint16_t index = pos + 1;
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	8a9b      	ldrh	r3, [r3, #20]
 8012754:	3301      	adds	r3, #1
 8012756:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8012758:	89bb      	ldrh	r3, [r7, #12]
 801275a:	2b09      	cmp	r3, #9
 801275c:	d801      	bhi.n	8012762 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801275e:	89bb      	ldrh	r3, [r7, #12]
 8012760:	e000      	b.n	8012764 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8012762:	2300      	movs	r3, #0
 8012764:	693a      	ldr	r2, [r7, #16]
 8012766:	89f9      	ldrh	r1, [r7, #14]
 8012768:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	331a      	adds	r3, #26
 8012770:	61bb      	str	r3, [r7, #24]
 8012772:	f640 133f 	movw	r3, #2367	; 0x93f
 8012776:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8012778:	69bb      	ldr	r3, [r7, #24]
 801277a:	8a9b      	ldrh	r3, [r3, #20]
 801277c:	4619      	mov	r1, r3
 801277e:	69bb      	ldr	r3, [r7, #24]
 8012780:	8afa      	ldrh	r2, [r7, #22]
 8012782:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f008 fbd8 	bl	801af3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801278c:	4603      	mov	r3, r0
}
 801278e:	4618      	mov	r0, r3
 8012790:	3728      	adds	r7, #40	; 0x28
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	08026fb8 	.word	0x08026fb8
 801279c:	08028564 	.word	0x08028564
 80127a0:	08026fc4 	.word	0x08026fc4
 80127a4:	0802700c 	.word	0x0802700c
 80127a8:	08028490 	.word	0x08028490
 80127ac:	0802701c 	.word	0x0802701c
 80127b0:	08028610 	.word	0x08028610

080127b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f008 fb77 	bl	801aeb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80127c2:	bf00      	nop
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}

080127ca <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80127ca:	b580      	push	{r7, lr}
 80127cc:	b088      	sub	sp, #32
 80127ce:	af02      	add	r7, sp, #8
 80127d0:	60f8      	str	r0, [r7, #12]
 80127d2:	1d38      	adds	r0, r7, #4
 80127d4:	e880 0006 	stmia.w	r0, {r1, r2}
 80127d8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80127da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80127de:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80127e0:	1d39      	adds	r1, r7, #4
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	9301      	str	r3, [sp, #4]
 80127e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	6a3b      	ldr	r3, [r7, #32]
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	68f8      	ldr	r0, [r7, #12]
 80127f0:	f006 fa21 	bl	8018c36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80127f4:	bf00      	nop
 80127f6:	3718      	adds	r7, #24
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80127fc:	b590      	push	{r4, r7, lr}
 80127fe:	b085      	sub	sp, #20
 8012800:	af00      	add	r7, sp, #0
 8012802:	4603      	mov	r3, r0
 8012804:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012806:	2300      	movs	r3, #0
 8012808:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801280a:	88fb      	ldrh	r3, [r7, #6]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d127      	bne.n	8012860 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012810:	88fb      	ldrh	r3, [r7, #6]
 8012812:	4a1e      	ldr	r2, [pc, #120]	; (801288c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d016      	beq.n	801284a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801281c:	88fb      	ldrh	r3, [r7, #6]
 801281e:	4a1b      	ldr	r2, [pc, #108]	; (801288c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012824:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	4413      	add	r3, r2
 801282e:	4a18      	ldr	r2, [pc, #96]	; (8012890 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012830:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	68ba      	ldr	r2, [r7, #8]
 8012838:	4413      	add	r3, r2
 801283a:	4a16      	ldr	r2, [pc, #88]	; (8012894 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801283c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	689b      	ldr	r3, [r3, #8]
 8012842:	68ba      	ldr	r2, [r7, #8]
 8012844:	4413      	add	r3, r2
 8012846:	60fb      	str	r3, [r7, #12]
 8012848:	e00a      	b.n	8012860 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801284a:	4b11      	ldr	r3, [pc, #68]	; (8012890 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801284c:	4a12      	ldr	r2, [pc, #72]	; (8012898 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801284e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012850:	4a12      	ldr	r2, [pc, #72]	; (801289c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012852:	4b10      	ldr	r3, [pc, #64]	; (8012894 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012854:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012856:	88fb      	ldrh	r3, [r7, #6]
 8012858:	4a11      	ldr	r2, [pc, #68]	; (80128a0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801285e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00d      	beq.n	8012882 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012866:	4a0f      	ldr	r2, [pc, #60]	; (80128a4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012868:	88fb      	ldrh	r3, [r7, #6]
 801286a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801286c:	f000 f83e 	bl	80128ec <_ZN17TypedTextDatabase8getFontsEv>
 8012870:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012872:	f000 f833 	bl	80128dc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012876:	4603      	mov	r3, r0
 8012878:	461a      	mov	r2, r3
 801287a:	4621      	mov	r1, r4
 801287c:	68f8      	ldr	r0, [r7, #12]
 801287e:	f7ff fea7 	bl	80125d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012882:	bf00      	nop
 8012884:	3714      	adds	r7, #20
 8012886:	46bd      	mov	sp, r7
 8012888:	bd90      	pop	{r4, r7, pc}
 801288a:	bf00      	nop
 801288c:	200085f4 	.word	0x200085f4
 8012890:	200085fc 	.word	0x200085fc
 8012894:	20008600 	.word	0x20008600
 8012898:	080e0278 	.word	0x080e0278
 801289c:	080e021c 	.word	0x080e021c
 80128a0:	080e03a0 	.word	0x080e03a0
 80128a4:	200085f8 	.word	0x200085f8

080128a8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	460b      	mov	r3, r1
 80128b2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80128b4:	4b07      	ldr	r3, [pc, #28]	; (80128d4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	4b07      	ldr	r3, [pc, #28]	; (80128d8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80128ba:	6819      	ldr	r1, [r3, #0]
 80128bc:	887b      	ldrh	r3, [r7, #2]
 80128be:	009b      	lsls	r3, r3, #2
 80128c0:	440b      	add	r3, r1
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	4413      	add	r3, r2
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	370c      	adds	r7, #12
 80128cc:	46bd      	mov	sp, r7
 80128ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d2:	4770      	bx	lr
 80128d4:	200085fc 	.word	0x200085fc
 80128d8:	20008600 	.word	0x20008600

080128dc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80128e0:	2317      	movs	r3, #23
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr

080128ec <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80128ec:	b480      	push	{r7}
 80128ee:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80128f0:	4b02      	ldr	r3, [pc, #8]	; (80128fc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	20008604 	.word	0x20008604

08012900 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_24_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2b01      	cmp	r3, #1
 801290e:	d11d      	bne.n	801294c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012916:	4293      	cmp	r3, r2
 8012918:	d118      	bne.n	801294c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 801291a:	f7f9 fb35 	bl	800bf88 <_Z23getFont_verdana_20_4bppv>
 801291e:	4602      	mov	r2, r0
};
 8012920:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012922:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8012924:	f7f9 fbf6 	bl	800c114 <_Z23getFont_verdana_40_4bppv>
 8012928:	4602      	mov	r2, r0
};
 801292a:	4b0a      	ldr	r3, [pc, #40]	; (8012954 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801292c:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_18_4bpp()),
 801292e:	f7f9 fae9 	bl	800bf04 <_Z23getFont_verdana_18_4bppv>
 8012932:	4602      	mov	r2, r0
};
 8012934:	4b07      	ldr	r3, [pc, #28]	; (8012954 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012936:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_27_4bpp()),
 8012938:	f7f9 fbaa 	bl	800c090 <_Z23getFont_verdana_27_4bppv>
 801293c:	4602      	mov	r2, r0
};
 801293e:	4b05      	ldr	r3, [pc, #20]	; (8012954 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012940:	60da      	str	r2, [r3, #12]
    &(getFont_verdana_24_4bpp())
 8012942:	f7f9 fb63 	bl	800c00c <_Z23getFont_verdana_24_4bppv>
 8012946:	4602      	mov	r2, r0
};
 8012948:	4b02      	ldr	r3, [pc, #8]	; (8012954 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801294a:	611a      	str	r2, [r3, #16]
}  // namespace TypedTextDatabase
 801294c:	bf00      	nop
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	20008604 	.word	0x20008604

08012958 <_GLOBAL__sub_I_touchgfx_fonts>:
 8012958:	b580      	push	{r7, lr}
 801295a:	af00      	add	r7, sp, #0
 801295c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012960:	2001      	movs	r0, #1
 8012962:	f7ff ffcd 	bl	8012900 <_Z41__static_initialization_and_destruction_0ii>
 8012966:	bd80      	pop	{r7, pc}

08012968 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	4a05      	ldr	r2, [pc, #20]	; (8012988 <_ZN19FrontendApplicationD1Ev+0x20>)
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	601a      	str	r2, [r3, #0]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4618      	mov	r0, r3
 801297a:	f7f9 ffad 	bl	800c8d8 <_ZN23FrontendApplicationBaseD1Ev>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4618      	mov	r0, r3
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	080286cc 	.word	0x080286cc

0801298c <_ZN19FrontendApplicationD0Ev>:
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f7ff ffe7 	bl	8012968 <_ZN19FrontendApplicationD1Ev>
 801299a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f012 fe82 	bl	80256a8 <_ZdlPvj>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	4618      	mov	r0, r3
 80129a8:	3708      	adds	r7, #8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}

080129ae <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80129ae:	b580      	push	{r7, lr}
 80129b0:	b082      	sub	sp, #8
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80129bc:	4618      	mov	r0, r3
 80129be:	f000 fa23 	bl	8012e08 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f006 fbfd 	bl	80191c4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80129ca:	bf00      	nop
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
	...

080129d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	68b9      	ldr	r1, [r7, #8]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fa f812 	bl	800ca10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80129ec:	4a03      	ldr	r2, [pc, #12]	; (80129fc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	601a      	str	r2, [r3, #0]
{

}
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	4618      	mov	r0, r3
 80129f6:	3710      	adds	r7, #16
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	080286cc 	.word	0x080286cc

08012a00 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
    {
    }
 8012a08:	bf00      	nop
 8012a0a:	370c      	adds	r7, #12
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
    {
    }
 8012a1c:	bf00      	nop
 8012a1e:	370c      	adds	r7, #12
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr

08012a28 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
    {
 8012a30:	4a04      	ldr	r2, [pc, #16]	; (8012a44 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	601a      	str	r2, [r3, #0]
    }
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr
 8012a44:	08028748 	.word	0x08028748

08012a48 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
    }
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f7ff ffe9 	bl	8012a28 <_ZN8touchgfx9PresenterD1Ev>
 8012a56:	2104      	movs	r1, #4
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f012 fe25 	bl	80256a8 <_ZdlPvj>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4618      	mov	r0, r3
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012a68:	b480      	push	{r7}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
    {
 8012a70:	4a04      	ldr	r2, [pc, #16]	; (8012a84 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	601a      	str	r2, [r3, #0]
    }
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	370c      	adds	r7, #12
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr
 8012a84:	08028748 	.word	0x08028748

08012a88 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012a88:	b480      	push	{r7}
 8012a8a:	b083      	sub	sp, #12
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	4a06      	ldr	r2, [pc, #24]	; (8012aac <_ZN13ModelListenerC1Ev+0x24>)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	605a      	str	r2, [r3, #4]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	370c      	adds	r7, #12
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	08028738 	.word	0x08028738

08012ab0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	4a04      	ldr	r2, [pc, #16]	; (8012acc <_ZN13ModelListenerD1Ev+0x1c>)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	601a      	str	r2, [r3, #0]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	08028738 	.word	0x08028738

08012ad0 <_ZN13ModelListenerD0Ev>:
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7ff ffe9 	bl	8012ab0 <_ZN13ModelListenerD1Ev>
 8012ade:	2108      	movs	r1, #8
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f012 fde1 	bl	80256a8 <_ZdlPvj>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3708      	adds	r7, #8
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <_ZN16galleryPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~galleryPresenter() {};
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	4a09      	ldr	r2, [pc, #36]	; (8012b20 <_ZN16galleryPresenterD1Ev+0x30>)
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	601a      	str	r2, [r3, #0]
 8012afe:	4a09      	ldr	r2, [pc, #36]	; (8012b24 <_ZN16galleryPresenterD1Ev+0x34>)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	605a      	str	r2, [r3, #4]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	3304      	adds	r3, #4
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7ff ffd1 	bl	8012ab0 <_ZN13ModelListenerD1Ev>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7ff ff89 	bl	8012a28 <_ZN8touchgfx9PresenterD1Ev>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3708      	adds	r7, #8
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	08028710 	.word	0x08028710
 8012b24:	08028728 	.word	0x08028728

08012b28 <_ZThn4_N16galleryPresenterD1Ev>:
 8012b28:	f1a0 0004 	sub.w	r0, r0, #4
 8012b2c:	e7e0      	b.n	8012af0 <_ZN16galleryPresenterD1Ev>
 8012b2e:	bf00      	nop

08012b30 <_ZN16galleryPresenterD0Ev>:
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7ff ffd9 	bl	8012af0 <_ZN16galleryPresenterD1Ev>
 8012b3e:	2110      	movs	r1, #16
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f012 fdb1 	bl	80256a8 <_ZdlPvj>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <_ZThn4_N16galleryPresenterD0Ev>:
 8012b50:	f1a0 0004 	sub.w	r0, r0, #4
 8012b54:	e7ec      	b.n	8012b30 <_ZN16galleryPresenterD0Ev>
	...

08012b58 <_ZN16galleryPresenterC1ER11galleryView>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

galleryPresenter::galleryPresenter(galleryView& v)
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
    : view(v)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7ff ff7f 	bl	8012a68 <_ZN8touchgfx9PresenterC1Ev>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	3304      	adds	r3, #4
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ff ff8a 	bl	8012a88 <_ZN13ModelListenerC1Ev>
 8012b74:	4a06      	ldr	r2, [pc, #24]	; (8012b90 <_ZN16galleryPresenterC1ER11galleryView+0x38>)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	4a06      	ldr	r2, [pc, #24]	; (8012b94 <_ZN16galleryPresenterC1ER11galleryView+0x3c>)
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	605a      	str	r2, [r3, #4]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	683a      	ldr	r2, [r7, #0]
 8012b84:	60da      	str	r2, [r3, #12]
{

}
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3708      	adds	r7, #8
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	08028710 	.word	0x08028710
 8012b94:	08028728 	.word	0x08028728

08012b98 <_ZN16galleryPresenter8activateEv>:

void galleryPresenter::activate()
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]

}
 8012ba0:	bf00      	nop
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <_ZN16galleryPresenter10deactivateEv>:

void galleryPresenter::deactivate()
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]

}
 8012bb4:	bf00      	nop
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <_ZN11galleryViewD1Ev>:

class galleryView : public galleryViewBase
{
public:
    galleryView();
    virtual ~galleryView() {}
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	4a05      	ldr	r2, [pc, #20]	; (8012be0 <_ZN11galleryViewD1Ev+0x20>)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7fc fd97 	bl	800f704 <_ZN15galleryViewBaseD1Ev>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	08028760 	.word	0x08028760

08012be4 <_ZN11galleryViewD0Ev>:
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f7ff ffe7 	bl	8012bc0 <_ZN11galleryViewD1Ev>
 8012bf2:	f44f 7192 	mov.w	r1, #292	; 0x124
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f012 fd56 	bl	80256a8 <_ZdlPvj>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
	...

08012c08 <_ZN11galleryViewC1Ev>:
#include <gui/gallery_screen/galleryView.hpp>

galleryView::galleryView()
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7fc fde8 	bl	800f7e8 <_ZN15galleryViewBaseC1Ev>
 8012c18:	4a03      	ldr	r2, [pc, #12]	; (8012c28 <_ZN11galleryViewC1Ev+0x20>)
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	601a      	str	r2, [r3, #0]
{

}
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	4618      	mov	r0, r3
 8012c22:	3708      	adds	r7, #8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	08028760 	.word	0x08028760

08012c2c <_ZN11galleryView11setupScreenEv>:

void galleryView::setupScreen()
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
    galleryViewBase::setupScreen();
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fc fed2 	bl	800f9e0 <_ZN15galleryViewBase11setupScreenEv>
}
 8012c3c:	bf00      	nop
 8012c3e:	3708      	adds	r7, #8
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <_ZN11galleryView14tearDownScreenEv>:

void galleryView::tearDownScreen()
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
    galleryViewBase::tearDownScreen();
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7fc fbf0 	bl	800f434 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012c54:	bf00      	nop
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <_ZN17gameoverPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~gameoverPresenter() {};
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	4a09      	ldr	r2, [pc, #36]	; (8012c8c <_ZN17gameoverPresenterD1Ev+0x30>)
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	601a      	str	r2, [r3, #0]
 8012c6a:	4a09      	ldr	r2, [pc, #36]	; (8012c90 <_ZN17gameoverPresenterD1Ev+0x34>)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	605a      	str	r2, [r3, #4]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	3304      	adds	r3, #4
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7ff ff1b 	bl	8012ab0 <_ZN13ModelListenerD1Ev>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff fed3 	bl	8012a28 <_ZN8touchgfx9PresenterD1Ev>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	4618      	mov	r0, r3
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	08028794 	.word	0x08028794
 8012c90:	080287ac 	.word	0x080287ac

08012c94 <_ZThn4_N17gameoverPresenterD1Ev>:
 8012c94:	f1a0 0004 	sub.w	r0, r0, #4
 8012c98:	e7e0      	b.n	8012c5c <_ZN17gameoverPresenterD1Ev>
 8012c9a:	bf00      	nop

08012c9c <_ZN17gameoverPresenterD0Ev>:
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7ff ffd9 	bl	8012c5c <_ZN17gameoverPresenterD1Ev>
 8012caa:	2110      	movs	r1, #16
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f012 fcfb 	bl	80256a8 <_ZdlPvj>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3708      	adds	r7, #8
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <_ZThn4_N17gameoverPresenterD0Ev>:
 8012cbc:	f1a0 0004 	sub.w	r0, r0, #4
 8012cc0:	e7ec      	b.n	8012c9c <_ZN17gameoverPresenterD0Ev>
	...

08012cc4 <_ZN17gameoverPresenterC1ER12gameoverView>:
#include <gui/gameover_screen/gameoverView.hpp>
#include <gui/gameover_screen/gameoverPresenter.hpp>

gameoverPresenter::gameoverPresenter(gameoverView& v)
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]
    : view(v)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7ff fec9 	bl	8012a68 <_ZN8touchgfx9PresenterC1Ev>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	3304      	adds	r3, #4
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7ff fed4 	bl	8012a88 <_ZN13ModelListenerC1Ev>
 8012ce0:	4a06      	ldr	r2, [pc, #24]	; (8012cfc <_ZN17gameoverPresenterC1ER12gameoverView+0x38>)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	601a      	str	r2, [r3, #0]
 8012ce6:	4a06      	ldr	r2, [pc, #24]	; (8012d00 <_ZN17gameoverPresenterC1ER12gameoverView+0x3c>)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	605a      	str	r2, [r3, #4]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	683a      	ldr	r2, [r7, #0]
 8012cf0:	60da      	str	r2, [r3, #12]
{

}
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	08028794 	.word	0x08028794
 8012d00:	080287ac 	.word	0x080287ac

08012d04 <_ZN17gameoverPresenter8activateEv>:

void gameoverPresenter::activate()
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]

}
 8012d0c:	bf00      	nop
 8012d0e:	370c      	adds	r7, #12
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <_ZN17gameoverPresenter10deactivateEv>:

void gameoverPresenter::deactivate()
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b083      	sub	sp, #12
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]

}
 8012d20:	bf00      	nop
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <_ZN12gameoverViewD1Ev>:

class gameoverView : public gameoverViewBase
{
public:
    gameoverView();
    virtual ~gameoverView() {}
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	4a05      	ldr	r2, [pc, #20]	; (8012d4c <_ZN12gameoverViewD1Ev+0x20>)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	601a      	str	r2, [r3, #0]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fd f987 	bl	8010050 <_ZN16gameoverViewBaseD1Ev>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4618      	mov	r0, r3
 8012d46:	3708      	adds	r7, #8
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	080287bc 	.word	0x080287bc

08012d50 <_ZN12gameoverViewD0Ev>:
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff ffe7 	bl	8012d2c <_ZN12gameoverViewD1Ev>
 8012d5e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f012 fca0 	bl	80256a8 <_ZdlPvj>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
	...

08012d74 <_ZN12gameoverViewC1Ev>:
#include <gui/gameover_screen/gameoverView.hpp>

gameoverView::gameoverView()
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fd f9b4 	bl	80100ec <_ZN16gameoverViewBaseC1Ev>
 8012d84:	4a03      	ldr	r2, [pc, #12]	; (8012d94 <_ZN12gameoverViewC1Ev+0x20>)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	601a      	str	r2, [r3, #0]
{

}
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	080287bc 	.word	0x080287bc

08012d98 <_ZN12gameoverView11setupScreenEv>:

void gameoverView::setupScreen()
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
    gameoverViewBase::setupScreen();
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7fd fb4a 	bl	801043c <_ZN16gameoverViewBase11setupScreenEv>
	Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", pong_score);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8012dae:	4b07      	ldr	r3, [pc, #28]	; (8012dcc <_ZN12gameoverView11setupScreenEv+0x34>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	4a07      	ldr	r2, [pc, #28]	; (8012dd0 <_ZN12gameoverView11setupScreenEv+0x38>)
 8012db4:	2114      	movs	r1, #20
 8012db6:	f008 fd7d 	bl	801b8b4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	score.invalidate();
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	33f4      	adds	r3, #244	; 0xf4
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f006 ff40 	bl	8019c44 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012dc4:	bf00      	nop
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	2000b9c0 	.word	0x2000b9c0
 8012dd0:	08027028 	.word	0x08027028

08012dd4 <_ZN12gameoverView14tearDownScreenEv>:

void gameoverView::tearDownScreen()
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b082      	sub	sp, #8
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
    gameoverViewBase::tearDownScreen();
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fc fb28 	bl	800f434 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012de4:	bf00      	nop
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	601a      	str	r2, [r3, #0]
{

}
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	370c      	adds	r7, #12
 8012e00:	46bd      	mov	sp, r7
 8012e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e06:	4770      	bx	lr

08012e08 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]

}
 8012e10:	bf00      	nop
 8012e12:	370c      	adds	r7, #12
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr

08012e1c <_ZN14MusicPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MusicPresenter() {};
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	4a09      	ldr	r2, [pc, #36]	; (8012e4c <_ZN14MusicPresenterD1Ev+0x30>)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	601a      	str	r2, [r3, #0]
 8012e2a:	4a09      	ldr	r2, [pc, #36]	; (8012e50 <_ZN14MusicPresenterD1Ev+0x34>)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	605a      	str	r2, [r3, #4]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	3304      	adds	r3, #4
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7ff fe3b 	bl	8012ab0 <_ZN13ModelListenerD1Ev>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7ff fdf3 	bl	8012a28 <_ZN8touchgfx9PresenterD1Ev>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	080287f0 	.word	0x080287f0
 8012e50:	08028808 	.word	0x08028808

08012e54 <_ZThn4_N14MusicPresenterD1Ev>:
 8012e54:	f1a0 0004 	sub.w	r0, r0, #4
 8012e58:	e7e0      	b.n	8012e1c <_ZN14MusicPresenterD1Ev>
 8012e5a:	bf00      	nop

08012e5c <_ZN14MusicPresenterD0Ev>:
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b082      	sub	sp, #8
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7ff ffd9 	bl	8012e1c <_ZN14MusicPresenterD1Ev>
 8012e6a:	2110      	movs	r1, #16
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f012 fc1b 	bl	80256a8 <_ZdlPvj>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <_ZThn4_N14MusicPresenterD0Ev>:
 8012e7c:	f1a0 0004 	sub.w	r0, r0, #4
 8012e80:	e7ec      	b.n	8012e5c <_ZN14MusicPresenterD0Ev>
	...

08012e84 <_ZN14MusicPresenterC1ER9MusicView>:
#include <gui/music_screen/MusicView.hpp>
#include <gui/music_screen/MusicPresenter.hpp>

MusicPresenter::MusicPresenter(MusicView& v)
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
    : view(v)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7ff fde9 	bl	8012a68 <_ZN8touchgfx9PresenterC1Ev>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	3304      	adds	r3, #4
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7ff fdf4 	bl	8012a88 <_ZN13ModelListenerC1Ev>
 8012ea0:	4a06      	ldr	r2, [pc, #24]	; (8012ebc <_ZN14MusicPresenterC1ER9MusicView+0x38>)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	4a06      	ldr	r2, [pc, #24]	; (8012ec0 <_ZN14MusicPresenterC1ER9MusicView+0x3c>)
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	605a      	str	r2, [r3, #4]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	683a      	ldr	r2, [r7, #0]
 8012eb0:	60da      	str	r2, [r3, #12]
{

}
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3708      	adds	r7, #8
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	080287f0 	.word	0x080287f0
 8012ec0:	08028808 	.word	0x08028808

08012ec4 <_ZN14MusicPresenter8activateEv>:

void MusicPresenter::activate()
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b082      	sub	sp, #8
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
	view.updateFileName();
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	68da      	ldr	r2, [r3, #12]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	68db      	ldr	r3, [r3, #12]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	3344      	adds	r3, #68	; 0x44
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4610      	mov	r0, r2
 8012edc:	4798      	blx	r3
}
 8012ede:	bf00      	nop
 8012ee0:	3708      	adds	r7, #8
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <_ZN14MusicPresenter10deactivateEv>:

void MusicPresenter::deactivate()
{
 8012ee6:	b480      	push	{r7}
 8012ee8:	b083      	sub	sp, #12
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]

}
 8012eee:	bf00      	nop
 8012ef0:	370c      	adds	r7, #12
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef8:	4770      	bx	lr
	...

08012efc <_ZN9MusicViewD1Ev>:

class MusicView : public MusicViewBase
{
public:
    MusicView();
    virtual ~MusicView() {}
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	4a05      	ldr	r2, [pc, #20]	; (8012f1c <_ZN9MusicViewD1Ev+0x20>)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	601a      	str	r2, [r3, #0]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7fd fbcf 	bl	80106b0 <_ZN13MusicViewBaseD1Ev>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	4618      	mov	r0, r3
 8012f16:	3708      	adds	r7, #8
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	08028818 	.word	0x08028818

08012f20 <_ZN9MusicViewD0Ev>:
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7ff ffe7 	bl	8012efc <_ZN9MusicViewD1Ev>
 8012f2e:	f44f 7146 	mov.w	r1, #792	; 0x318
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f012 fbb8 	bl	80256a8 <_ZdlPvj>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
	...

08012f44 <_ZN9MusicViewC1Ev>:
extern xQueueHandle music_msg_q;

//----------------------------------------------


MusicView::MusicView()
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fd fc5c 	bl	801080c <_ZN13MusicViewBaseC1Ev>
 8012f54:	4a03      	ldr	r2, [pc, #12]	; (8012f64 <_ZN9MusicViewC1Ev+0x20>)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	601a      	str	r2, [r3, #0]
{

}
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	08028818 	.word	0x08028818

08012f68 <_ZN9MusicView11setupScreenEv>:

void MusicView::setupScreen()
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
    MusicViewBase::setupScreen();
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fe f814 	bl	8010fa0 <_ZN13MusicViewBase11setupScreenEv>
}
 8012f78:	bf00      	nop
 8012f7a:	3708      	adds	r7, #8
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}

08012f80 <_ZN9MusicView14tearDownScreenEv>:

void MusicView::tearDownScreen()
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
    MusicViewBase::tearDownScreen();
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7fc fa52 	bl	800f434 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012f90:	bf00      	nop
 8012f92:	3708      	adds	r7, #8
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}

08012f98 <_ZN9MusicView11controlPlayEv>:


//------------- Custom function ------------
void MusicView::controlPlay()
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
	sendControlQ(2);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	3348      	adds	r3, #72	; 0x48
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2102      	movs	r1, #2
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	4798      	blx	r3
}
 8012fae:	bf00      	nop
 8012fb0:	3708      	adds	r7, #8
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <_ZN9MusicView11controlStopEv>:

void MusicView::controlStop()
{
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b082      	sub	sp, #8
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
	sendControlQ(3);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	3348      	adds	r3, #72	; 0x48
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2103      	movs	r1, #3
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	4798      	blx	r3
}
 8012fcc:	bf00      	nop
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <_ZN9MusicView11controlPrevEv>:
void MusicView::controlPrev()
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
	sendControlQ(4);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	3348      	adds	r3, #72	; 0x48
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	2104      	movs	r1, #4
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	4798      	blx	r3
}
 8012fea:	bf00      	nop
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}

08012ff2 <_ZN9MusicView11controlNextEv>:
void MusicView::controlNext()
{
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b082      	sub	sp, #8
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
	sendControlQ(5);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	3348      	adds	r3, #72	; 0x48
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2105      	movs	r1, #5
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	4798      	blx	r3
}
 8013008:	bf00      	nop
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <_ZN9MusicView17controlVolumeDownEv>:
void MusicView::controlVolumeDown()
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
	sendControlQ(6);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	3348      	adds	r3, #72	; 0x48
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2106      	movs	r1, #6
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	4798      	blx	r3
}
 8013026:	bf00      	nop
 8013028:	3708      	adds	r7, #8
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <_ZN9MusicView15controlVolumeUpEv>:
void MusicView::controlVolumeUp()
{
 801302e:	b580      	push	{r7, lr}
 8013030:	b082      	sub	sp, #8
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
	sendControlQ(7);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	3348      	adds	r3, #72	; 0x48
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2107      	movs	r1, #7
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	4798      	blx	r3
}
 8013044:	bf00      	nop
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <_ZN9MusicView12sendControlQEh>:

void MusicView::sendControlQ(uint8_t signal){
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	460b      	mov	r3, r1
 8013056:	70fb      	strb	r3, [r7, #3]
	xQueueSend(music_msg_q, &signal, 0);
 8013058:	4b05      	ldr	r3, [pc, #20]	; (8013070 <_ZN9MusicView12sendControlQEh+0x24>)
 801305a:	6818      	ldr	r0, [r3, #0]
 801305c:	1cf9      	adds	r1, r7, #3
 801305e:	2300      	movs	r3, #0
 8013060:	2200      	movs	r2, #0
 8013062:	f7f6 fa05 	bl	8009470 <xQueueGenericSend>
}
 8013066:	bf00      	nop
 8013068:	3708      	adds	r7, #8
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	2000b62c 	.word	0x2000b62c

08013074 <_ZN9MusicView14updateFileNameEv>:

void MusicView::updateFileName(){
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
	if (uartMsgBuffer[0] == 0)
 801307c:	4b10      	ldr	r3, [pc, #64]	; (80130c0 <_ZN9MusicView14updateFileNameEv+0x4c>)
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d019      	beq.n	80130b8 <_ZN9MusicView14updateFileNameEv+0x44>
		return; // array empty so return

	memset(&MusicTextAreaBuffer, 0, MUSICTEXTAREA_SIZE);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 801308a:	2211      	movs	r2, #17
 801308c:	2100      	movs	r1, #0
 801308e:	4618      	mov	r0, r3
 8013090:	f012 fbbf 	bl	8025812 <memset>

	Unicode::strncpy(MusicTextAreaBuffer, (char *)uartMsgBuffer, MUSICTEXTAREA_SIZE - 1);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 801309a:	2210      	movs	r2, #16
 801309c:	4908      	ldr	r1, [pc, #32]	; (80130c0 <_ZN9MusicView14updateFileNameEv+0x4c>)
 801309e:	4618      	mov	r0, r3
 80130a0:	f008 f8a3 	bl	801b1ea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	MusicTextAreaBuffer[16] = '\0'; // last index must be NULL
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2200      	movs	r2, #0
 80130a8:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	MusicTextArea.invalidate();
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	33e8      	adds	r3, #232	; 0xe8
 80130b0:	4618      	mov	r0, r3
 80130b2:	f006 fdc7 	bl	8019c44 <_ZNK8touchgfx8Drawable10invalidateEv>
 80130b6:	e000      	b.n	80130ba <_ZN9MusicView14updateFileNameEv+0x46>
		return; // array empty so return
 80130b8:	bf00      	nop
}
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	2000b634 	.word	0x2000b634

080130c4 <_ZN9MusicView15handleTickEventEv>:

// ------------ Tick ---------------
void MusicView::handleTickEvent(){
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
	if (binarySemMsgUartHandle != NULL)
 80130cc:	4b0d      	ldr	r3, [pc, #52]	; (8013104 <_ZN9MusicView15handleTickEventEv+0x40>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d013      	beq.n	80130fc <_ZN9MusicView15handleTickEventEv+0x38>
		{
			if (xSemaphoreTake(binarySemMsgUartHandle, (TickType_t)10) == pdTRUE)
 80130d4:	4b0b      	ldr	r3, [pc, #44]	; (8013104 <_ZN9MusicView15handleTickEventEv+0x40>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	210a      	movs	r1, #10
 80130da:	4618      	mov	r0, r3
 80130dc:	f7f6 fc3e 	bl	800995c <xQueueSemaphoreTake>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	bf0c      	ite	eq
 80130e6:	2301      	moveq	r3, #1
 80130e8:	2300      	movne	r3, #0
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d005      	beq.n	80130fc <_ZN9MusicView15handleTickEventEv+0x38>
			{
				updateFileName();
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	3344      	adds	r3, #68	; 0x44
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	4798      	blx	r3
			}
		}
}
 80130fc:	bf00      	nop
 80130fe:	3708      	adds	r7, #8
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	2000b99c 	.word	0x2000b99c

08013108 <_ZN13PongPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~PongPresenter() {};
 8013108:	b580      	push	{r7, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	4a09      	ldr	r2, [pc, #36]	; (8013138 <_ZN13PongPresenterD1Ev+0x30>)
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	601a      	str	r2, [r3, #0]
 8013116:	4a09      	ldr	r2, [pc, #36]	; (801313c <_ZN13PongPresenterD1Ev+0x34>)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	605a      	str	r2, [r3, #4]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	3304      	adds	r3, #4
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff fcc5 	bl	8012ab0 <_ZN13ModelListenerD1Ev>
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4618      	mov	r0, r3
 801312a:	f7ff fc7d 	bl	8012a28 <_ZN8touchgfx9PresenterD1Ev>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	4618      	mov	r0, r3
 8013132:	3708      	adds	r7, #8
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}
 8013138:	0802886c 	.word	0x0802886c
 801313c:	08028884 	.word	0x08028884

08013140 <_ZThn4_N13PongPresenterD1Ev>:
 8013140:	f1a0 0004 	sub.w	r0, r0, #4
 8013144:	e7e0      	b.n	8013108 <_ZN13PongPresenterD1Ev>
 8013146:	bf00      	nop

08013148 <_ZN13PongPresenterD0Ev>:
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f7ff ffd9 	bl	8013108 <_ZN13PongPresenterD1Ev>
 8013156:	2110      	movs	r1, #16
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f012 faa5 	bl	80256a8 <_ZdlPvj>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <_ZThn4_N13PongPresenterD0Ev>:
 8013168:	f1a0 0004 	sub.w	r0, r0, #4
 801316c:	e7ec      	b.n	8013148 <_ZN13PongPresenterD0Ev>
	...

08013170 <_ZN13PongPresenterC1ER8PongView>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

PongPresenter::PongPresenter(PongView& v)
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
    : view(v)
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4618      	mov	r0, r3
 801317e:	f7ff fc73 	bl	8012a68 <_ZN8touchgfx9PresenterC1Ev>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	3304      	adds	r3, #4
 8013186:	4618      	mov	r0, r3
 8013188:	f7ff fc7e 	bl	8012a88 <_ZN13ModelListenerC1Ev>
 801318c:	4a06      	ldr	r2, [pc, #24]	; (80131a8 <_ZN13PongPresenterC1ER8PongView+0x38>)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	601a      	str	r2, [r3, #0]
 8013192:	4a06      	ldr	r2, [pc, #24]	; (80131ac <_ZN13PongPresenterC1ER8PongView+0x3c>)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	605a      	str	r2, [r3, #4]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	683a      	ldr	r2, [r7, #0]
 801319c:	60da      	str	r2, [r3, #12]
{

}
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	4618      	mov	r0, r3
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	0802886c 	.word	0x0802886c
 80131ac:	08028884 	.word	0x08028884

080131b0 <_ZN13PongPresenter8activateEv>:

void PongPresenter::activate()
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]

}
 80131b8:	bf00      	nop
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <_ZN13PongPresenter10deactivateEv>:

void PongPresenter::deactivate()
{
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]

}
 80131cc:	bf00      	nop
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
        return rect.width;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80131e6:	4618      	mov	r0, r3
 80131e8:	370c      	adds	r7, #12
 80131ea:	46bd      	mov	sp, r7
 80131ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f0:	4770      	bx	lr

080131f2 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80131f2:	b480      	push	{r7}
 80131f4:	b083      	sub	sp, #12
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
        return rect.height;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8013200:	4618      	mov	r0, r3
 8013202:	370c      	adds	r7, #12
 8013204:	46bd      	mov	sp, r7
 8013206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320a:	4770      	bx	lr

0801320c <_ZN8PongViewD1Ev>:

class PongView : public PongViewBase
{
public:
    PongView();
    virtual ~PongView() {}
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	4a05      	ldr	r2, [pc, #20]	; (801322c <_ZN8PongViewD1Ev+0x20>)
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	601a      	str	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4618      	mov	r0, r3
 801321e:	f7fe f97f 	bl	8011520 <_ZN12PongViewBaseD1Ev>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4618      	mov	r0, r3
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	08028894 	.word	0x08028894

08013230 <_ZN8PongViewD0Ev>:
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f7ff ffe7 	bl	801320c <_ZN8PongViewD1Ev>
 801323e:	f641 6150 	movw	r1, #7760	; 0x1e50
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f012 fa30 	bl	80256a8 <_ZdlPvj>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	4618      	mov	r0, r3
 801324c:	3708      	adds	r7, #8
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
	...

08013254 <_ZN8PongViewC1Ev>:
#include <gui/pong_screen/PongView.hpp>

#include <touchgfx/lcd/LCD.hpp>

PongView::PongView()
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	4618      	mov	r0, r3
 8013260:	f7fe f9b8 	bl	80115d4 <_ZN12PongViewBaseC1Ev>
 8013264:	4a18      	ldr	r2, [pc, #96]	; (80132c8 <_ZN8PongViewC1Ev+0x74>)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	601a      	str	r2, [r3, #0]
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013270:	4413      	add	r3, r2
 8013272:	2201      	movs	r2, #1
 8013274:	601a      	str	r2, [r3, #0]
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	f641 6328 	movw	r3, #7720	; 0x1e28
 801327c:	4413      	add	r3, r2
 801327e:	2201      	movs	r2, #1
 8013280:	601a      	str	r2, [r3, #0]
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8013288:	4413      	add	r3, r2
 801328a:	2204      	movs	r2, #4
 801328c:	601a      	str	r2, [r3, #0]
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013294:	4413      	add	r3, r2
 8013296:	2228      	movs	r2, #40	; 0x28
 8013298:	601a      	str	r2, [r3, #0]
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	f641 6334 	movw	r3, #7732	; 0x1e34
 80132a0:	4413      	add	r3, r2
 80132a2:	2200      	movs	r2, #0
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80132ac:	4413      	add	r3, r2
 80132ae:	2200      	movs	r2, #0
 80132b0:	601a      	str	r2, [r3, #0]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 80132b8:	2200      	movs	r2, #0
 80132ba:	601a      	str	r2, [r3, #0]
{

}
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4618      	mov	r0, r3
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	08028894 	.word	0x08028894

080132cc <_ZN8PongView11setupScreenEv>:

void PongView::setupScreen()
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
    PongViewBase::setupScreen();
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7fe fb6c 	bl	80119b4 <_ZN12PongViewBase11setupScreenEv>
    color[0] = 6;
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	f641 6344 	movw	r3, #7748	; 0x1e44
 80132e2:	4413      	add	r3, r2
 80132e4:	2206      	movs	r2, #6
 80132e6:	601a      	str	r2, [r3, #0]
    color[1] = 255;
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	f641 6348 	movw	r3, #7752	; 0x1e48
 80132ee:	4413      	add	r3, r2
 80132f0:	22ff      	movs	r2, #255	; 0xff
 80132f2:	601a      	str	r2, [r3, #0]
    color[2] = 141;
 80132f4:	687a      	ldr	r2, [r7, #4]
 80132f6:	f641 634c 	movw	r3, #7756	; 0x1e4c
 80132fa:	4413      	add	r3, r2
 80132fc:	228d      	movs	r2, #141	; 0x8d
 80132fe:	601a      	str	r2, [r3, #0]
}
 8013300:	bf00      	nop
 8013302:	3708      	adds	r7, #8
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <_ZN8PongView14tearDownScreenEv>:

void PongView::tearDownScreen()
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
    PongViewBase::tearDownScreen();
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	4618      	mov	r0, r3
 8013314:	f7fc f88e 	bl	800f434 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013318:	bf00      	nop
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <_ZN8PongView9move_leftEv>:

void PongView::move_left(){
 8013320:	b590      	push	{r4, r7, lr}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801332e:	22ff      	movs	r2, #255	; 0xff
 8013330:	21ff      	movs	r1, #255	; 0xff
 8013332:	20ff      	movs	r0, #255	; 0xff
 8013334:	f7fc fa2e 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013338:	4603      	mov	r3, r0
 801333a:	4619      	mov	r1, r3
 801333c:	4620      	mov	r0, r4
 801333e:	f7fc f901 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	33ec      	adds	r3, #236	; 0xec
 8013346:	4618      	mov	r0, r3
 8013348:	f006 fc7c 	bl	8019c44 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()-20);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	33ec      	adds	r3, #236	; 0xec
 8013356:	4618      	mov	r0, r3
 8013358:	f7f9 f8d5 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 801335c:	4603      	mov	r3, r0
 801335e:	b29b      	uxth	r3, r3
 8013360:	3b14      	subs	r3, #20
 8013362:	b29b      	uxth	r3, r3
 8013364:	b21b      	sxth	r3, r3
 8013366:	4619      	mov	r1, r3
 8013368:	4620      	mov	r0, r4
 801336a:	f7f9 f8e6 	bl	800c53a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013374:	22ff      	movs	r2, #255	; 0xff
 8013376:	2180      	movs	r1, #128	; 0x80
 8013378:	2006      	movs	r0, #6
 801337a:	f7fc fa0b 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801337e:	4603      	mov	r3, r0
 8013380:	4619      	mov	r1, r3
 8013382:	4620      	mov	r0, r4
 8013384:	f7fc f8de 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	33ec      	adds	r3, #236	; 0xec
 801338c:	4618      	mov	r0, r3
 801338e:	f006 fc59 	bl	8019c44 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8013392:	bf00      	nop
 8013394:	370c      	adds	r7, #12
 8013396:	46bd      	mov	sp, r7
 8013398:	bd90      	pop	{r4, r7, pc}

0801339a <_ZN8PongView10move_rightEv>:

void PongView::move_right(){
 801339a:	b590      	push	{r4, r7, lr}
 801339c:	b083      	sub	sp, #12
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80133a8:	22ff      	movs	r2, #255	; 0xff
 80133aa:	21ff      	movs	r1, #255	; 0xff
 80133ac:	20ff      	movs	r0, #255	; 0xff
 80133ae:	f7fc f9f1 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133b2:	4603      	mov	r3, r0
 80133b4:	4619      	mov	r1, r3
 80133b6:	4620      	mov	r0, r4
 80133b8:	f7fc f8c4 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	33ec      	adds	r3, #236	; 0xec
 80133c0:	4618      	mov	r0, r3
 80133c2:	f006 fc3f 	bl	8019c44 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()+20);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	33ec      	adds	r3, #236	; 0xec
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7f9 f898 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 80133d6:	4603      	mov	r3, r0
 80133d8:	b29b      	uxth	r3, r3
 80133da:	3314      	adds	r3, #20
 80133dc:	b29b      	uxth	r3, r3
 80133de:	b21b      	sxth	r3, r3
 80133e0:	4619      	mov	r1, r3
 80133e2:	4620      	mov	r0, r4
 80133e4:	f7f9 f8a9 	bl	800c53a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80133ee:	22ff      	movs	r2, #255	; 0xff
 80133f0:	2180      	movs	r1, #128	; 0x80
 80133f2:	2006      	movs	r0, #6
 80133f4:	f7fc f9ce 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133f8:	4603      	mov	r3, r0
 80133fa:	4619      	mov	r1, r3
 80133fc:	4620      	mov	r0, r4
 80133fe:	f7fc f8a1 	bl	800f544 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	33ec      	adds	r3, #236	; 0xec
 8013406:	4618      	mov	r0, r3
 8013408:	f006 fc1c 	bl	8019c44 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801340c:	bf00      	nop
 801340e:	370c      	adds	r7, #12
 8013410:	46bd      	mov	sp, r7
 8013412:	bd90      	pop	{r4, r7, pc}

08013414 <_ZN8PongView15handleTickEventEv>:

void PongView::handleTickEvent(){
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
	tick ++;
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	f641 6334 	movw	r3, #7732	; 0x1e34
 8013422:	4413      	add	r3, r2
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	1c5a      	adds	r2, r3, #1
 8013428:	6879      	ldr	r1, [r7, #4]
 801342a:	f641 6334 	movw	r3, #7732	; 0x1e34
 801342e:	440b      	add	r3, r1
 8013430:	601a      	str	r2, [r3, #0]
	move_ball();
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f000 f804 	bl	8013440 <_ZN8PongView9move_ballEv>

}
 8013438:	bf00      	nop
 801343a:	3708      	adds	r7, #8
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <_ZN8PongView9move_ballEv>:

void PongView::move_ball(){\
 8013440:	b590      	push	{r4, r7, lr}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]

	// move ball
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801344e:	22ff      	movs	r2, #255	; 0xff
 8013450:	21ff      	movs	r1, #255	; 0xff
 8013452:	20ff      	movs	r0, #255	; 0xff
 8013454:	f7fc f99e 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013458:	4603      	mov	r3, r0
 801345a:	4619      	mov	r1, r3
 801345c:	4620      	mov	r0, r4
 801345e:	f7fe f807 	bl	8011470 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	336c      	adds	r3, #108	; 0x6c
 8013466:	4618      	mov	r0, r3
 8013468:	f003 ffa6 	bl	80173b8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	ball.setY(ball.getY() +  ball_vertical_direction*ball_speed);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	336c      	adds	r3, #108	; 0x6c
 8013476:	4618      	mov	r0, r3
 8013478:	f7f9 f852 	bl	800c520 <_ZNK8touchgfx8Drawable4getYEv>
 801347c:	4603      	mov	r3, r0
 801347e:	b29a      	uxth	r2, r3
 8013480:	6879      	ldr	r1, [r7, #4]
 8013482:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013486:	440b      	add	r3, r1
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	b299      	uxth	r1, r3
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8013492:	4403      	add	r3, r0
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	b29b      	uxth	r3, r3
 8013498:	fb11 f303 	smulbb	r3, r1, r3
 801349c:	b29b      	uxth	r3, r3
 801349e:	4413      	add	r3, r2
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	b21b      	sxth	r3, r3
 80134a4:	4619      	mov	r1, r3
 80134a6:	4620      	mov	r0, r4
 80134a8:	f7f9 f856 	bl	800c558 <_ZN8touchgfx8Drawable4setYEs>
	ball.setX(ball.getX() +  ball_horizontal_direction*ball_speed);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	336c      	adds	r3, #108	; 0x6c
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7f9 f825 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 80134bc:	4603      	mov	r3, r0
 80134be:	b29a      	uxth	r2, r3
 80134c0:	6879      	ldr	r1, [r7, #4]
 80134c2:	f641 6328 	movw	r3, #7720	; 0x1e28
 80134c6:	440b      	add	r3, r1
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	b299      	uxth	r1, r3
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80134d2:	4403      	add	r3, r0
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	b29b      	uxth	r3, r3
 80134d8:	fb11 f303 	smulbb	r3, r1, r3
 80134dc:	b29b      	uxth	r3, r3
 80134de:	4413      	add	r3, r2
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	b21b      	sxth	r3, r3
 80134e4:	4619      	mov	r1, r3
 80134e6:	4620      	mov	r0, r4
 80134e8:	f7f9 f827 	bl	800c53a <_ZN8touchgfx8Drawable4setXEs>
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(color[0], color[1], color[2]));
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	f641 6344 	movw	r3, #7748	; 0x1e44
 80134f8:	4413      	add	r3, r2
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	b2d8      	uxtb	r0, r3
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	f641 6348 	movw	r3, #7752	; 0x1e48
 8013504:	4413      	add	r3, r2
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	b2d9      	uxtb	r1, r3
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	f641 634c 	movw	r3, #7756	; 0x1e4c
 8013510:	4413      	add	r3, r2
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	b2db      	uxtb	r3, r3
 8013516:	461a      	mov	r2, r3
 8013518:	f7fc f93c 	bl	800f794 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801351c:	4603      	mov	r3, r0
 801351e:	4619      	mov	r1, r3
 8013520:	4620      	mov	r0, r4
 8013522:	f7fd ffa5 	bl	8011470 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	336c      	adds	r3, #108	; 0x6c
 801352a:	4618      	mov	r0, r3
 801352c:	f003 ff44 	bl	80173b8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>


	if(check_collision()==1){
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f000 f8f1 	bl	8013718 <_ZN8PongView15check_collisionEv>
 8013536:	4603      	mov	r3, r0
 8013538:	2b01      	cmp	r3, #1
 801353a:	bf0c      	ite	eq
 801353c:	2301      	moveq	r3, #1
 801353e:	2300      	movne	r3, #0
 8013540:	b2db      	uxtb	r3, r3
 8013542:	2b00      	cmp	r3, #0
 8013544:	f000 808c 	beq.w	8013660 <_ZN8PongView9move_ballEv+0x220>
		ball_vertical_direction = -1;
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	f641 6324 	movw	r3, #7716	; 0x1e24
 801354e:	4413      	add	r3, r2
 8013550:	f04f 32ff 	mov.w	r2, #4294967295
 8013554:	601a      	str	r2, [r3, #0]

		if(collide_count % 20 == 0){
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 801355c:	6819      	ldr	r1, [r3, #0]
 801355e:	4b6b      	ldr	r3, [pc, #428]	; (801370c <_ZN8PongView9move_ballEv+0x2cc>)
 8013560:	fb83 2301 	smull	r2, r3, r3, r1
 8013564:	10da      	asrs	r2, r3, #3
 8013566:	17cb      	asrs	r3, r1, #31
 8013568:	1ad2      	subs	r2, r2, r3
 801356a:	4613      	mov	r3, r2
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	4413      	add	r3, r2
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	1aca      	subs	r2, r1, r3
 8013574:	2a00      	cmp	r2, #0
 8013576:	d14e      	bne.n	8013616 <_ZN8PongView9move_ballEv+0x1d6>
			ball_speed = ball_speed  + 1;
 8013578:	687a      	ldr	r2, [r7, #4]
 801357a:	f641 632c 	movw	r3, #7724	; 0x1e2c
 801357e:	4413      	add	r3, r2
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	1c5a      	adds	r2, r3, #1
 8013584:	6879      	ldr	r1, [r7, #4]
 8013586:	f641 632c 	movw	r3, #7724	; 0x1e2c
 801358a:	440b      	add	r3, r1
 801358c:	601a      	str	r2, [r3, #0]
			sc = sc+1;
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8013594:	4413      	add	r3, r2
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	1c5a      	adds	r2, r3, #1
 801359a:	6879      	ldr	r1, [r7, #4]
 801359c:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80135a0:	440b      	add	r3, r1
 80135a2:	601a      	str	r2, [r3, #0]
			Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", sc);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f503 70e6 	add.w	r0, r3, #460	; 0x1cc
 80135aa:	687a      	ldr	r2, [r7, #4]
 80135ac:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80135b0:	4413      	add	r3, r2
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	4a56      	ldr	r2, [pc, #344]	; (8013710 <_ZN8PongView9move_ballEv+0x2d0>)
 80135b6:	2114      	movs	r1, #20
 80135b8:	f008 f97c 	bl	801b8b4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			score.invalidate();
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80135c2:	4618      	mov	r0, r3
 80135c4:	f006 fb3e 	bl	8019c44 <_ZNK8touchgfx8Drawable10invalidateEv>

		    color[0] =  ( std::rand() % ( 255 + 1 ) );
 80135c8:	f012 fc9c 	bl	8025f04 <rand>
 80135cc:	4603      	mov	r3, r0
 80135ce:	425a      	negs	r2, r3
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	b2d2      	uxtb	r2, r2
 80135d4:	bf58      	it	pl
 80135d6:	4253      	negpl	r3, r2
 80135d8:	6879      	ldr	r1, [r7, #4]
 80135da:	f641 6244 	movw	r2, #7748	; 0x1e44
 80135de:	440a      	add	r2, r1
 80135e0:	6013      	str	r3, [r2, #0]
		    color[1] =  ( std::rand() % ( 255 + 1 ) );
 80135e2:	f012 fc8f 	bl	8025f04 <rand>
 80135e6:	4603      	mov	r3, r0
 80135e8:	425a      	negs	r2, r3
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	b2d2      	uxtb	r2, r2
 80135ee:	bf58      	it	pl
 80135f0:	4253      	negpl	r3, r2
 80135f2:	6879      	ldr	r1, [r7, #4]
 80135f4:	f641 6248 	movw	r2, #7752	; 0x1e48
 80135f8:	440a      	add	r2, r1
 80135fa:	6013      	str	r3, [r2, #0]
		    color[2] =  ( std::rand() % ( 255 + 1 ) );
 80135fc:	f012 fc82 	bl	8025f04 <rand>
 8013600:	4603      	mov	r3, r0
 8013602:	425a      	negs	r2, r3
 8013604:	b2db      	uxtb	r3, r3
 8013606:	b2d2      	uxtb	r2, r2
 8013608:	bf58      	it	pl
 801360a:	4253      	negpl	r3, r2
 801360c:	6879      	ldr	r1, [r7, #4]
 801360e:	f641 624c 	movw	r2, #7756	; 0x1e4c
 8013612:	440a      	add	r2, r1
 8013614:	6013      	str	r3, [r2, #0]
		}
		collide_count ++;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	1c5a      	adds	r2, r3, #1
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8013626:	601a      	str	r2, [r3, #0]

		if(ball_horizontal_direction==1){
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	f641 6328 	movw	r3, #7720	; 0x1e28
 801362e:	4413      	add	r3, r2
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	2b01      	cmp	r3, #1
 8013634:	d106      	bne.n	8013644 <_ZN8PongView9move_ballEv+0x204>
			ball_horizontal_direction = 2;
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	f641 6328 	movw	r3, #7720	; 0x1e28
 801363c:	4413      	add	r3, r2
 801363e:	2202      	movs	r2, #2
 8013640:	601a      	str	r2, [r3, #0]
	else if(check_collision()==5){
		pong_score = sc;
		application().gotogameoverScreenNoTransition();
	}

}
 8013642:	e05e      	b.n	8013702 <_ZN8PongView9move_ballEv+0x2c2>
		else if (ball_horizontal_direction==2){
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	f641 6328 	movw	r3, #7720	; 0x1e28
 801364a:	4413      	add	r3, r2
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2b02      	cmp	r3, #2
 8013650:	d157      	bne.n	8013702 <_ZN8PongView9move_ballEv+0x2c2>
			ball_horizontal_direction = 1;
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013658:	4413      	add	r3, r2
 801365a:	2201      	movs	r2, #1
 801365c:	601a      	str	r2, [r3, #0]
}
 801365e:	e050      	b.n	8013702 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==2){
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 f859 	bl	8013718 <_ZN8PongView15check_collisionEv>
 8013666:	4603      	mov	r3, r0
 8013668:	2b02      	cmp	r3, #2
 801366a:	bf0c      	ite	eq
 801366c:	2301      	moveq	r3, #1
 801366e:	2300      	movne	r3, #0
 8013670:	b2db      	uxtb	r3, r3
 8013672:	2b00      	cmp	r3, #0
 8013674:	d006      	beq.n	8013684 <_ZN8PongView9move_ballEv+0x244>
		ball_vertical_direction = 1;
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	f641 6324 	movw	r3, #7716	; 0x1e24
 801367c:	4413      	add	r3, r2
 801367e:	2201      	movs	r2, #1
 8013680:	601a      	str	r2, [r3, #0]
}
 8013682:	e03e      	b.n	8013702 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==3){
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 f847 	bl	8013718 <_ZN8PongView15check_collisionEv>
 801368a:	4603      	mov	r3, r0
 801368c:	2b03      	cmp	r3, #3
 801368e:	bf0c      	ite	eq
 8013690:	2301      	moveq	r3, #1
 8013692:	2300      	movne	r3, #0
 8013694:	b2db      	uxtb	r3, r3
 8013696:	2b00      	cmp	r3, #0
 8013698:	d006      	beq.n	80136a8 <_ZN8PongView9move_ballEv+0x268>
		ball_horizontal_direction = 1;
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	f641 6328 	movw	r3, #7720	; 0x1e28
 80136a0:	4413      	add	r3, r2
 80136a2:	2201      	movs	r2, #1
 80136a4:	601a      	str	r2, [r3, #0]
}
 80136a6:	e02c      	b.n	8013702 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==4){
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f000 f835 	bl	8013718 <_ZN8PongView15check_collisionEv>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b04      	cmp	r3, #4
 80136b2:	bf0c      	ite	eq
 80136b4:	2301      	moveq	r3, #1
 80136b6:	2300      	movne	r3, #0
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d007      	beq.n	80136ce <_ZN8PongView9move_ballEv+0x28e>
		ball_horizontal_direction = -1;
 80136be:	687a      	ldr	r2, [r7, #4]
 80136c0:	f641 6328 	movw	r3, #7720	; 0x1e28
 80136c4:	4413      	add	r3, r2
 80136c6:	f04f 32ff 	mov.w	r2, #4294967295
 80136ca:	601a      	str	r2, [r3, #0]
}
 80136cc:	e019      	b.n	8013702 <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==5){
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f000 f822 	bl	8013718 <_ZN8PongView15check_collisionEv>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b05      	cmp	r3, #5
 80136d8:	bf0c      	ite	eq
 80136da:	2301      	moveq	r3, #1
 80136dc:	2300      	movne	r3, #0
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d00e      	beq.n	8013702 <_ZN8PongView9move_ballEv+0x2c2>
		pong_score = sc;
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80136ea:	4413      	add	r3, r2
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	4a09      	ldr	r2, [pc, #36]	; (8013714 <_ZN8PongView9move_ballEv+0x2d4>)
 80136f0:	6013      	str	r3, [r2, #0]
		application().gotogameoverScreenNoTransition();
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7fd ff62 	bl	80115be <_ZN12PongViewBase11applicationEv>
 80136fa:	4603      	mov	r3, r0
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7f9 fafb 	bl	800ccf8 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 8013702:	bf00      	nop
 8013704:	370c      	adds	r7, #12
 8013706:	46bd      	mov	sp, r7
 8013708:	bd90      	pop	{r4, r7, pc}
 801370a:	bf00      	nop
 801370c:	66666667 	.word	0x66666667
 8013710:	080270b0 	.word	0x080270b0
 8013714:	2000b9c0 	.word	0x2000b9c0

08013718 <_ZN8PongView15check_collisionEv>:

int PongView::check_collision(){
 8013718:	b5b0      	push	{r4, r5, r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
	// collide with paddle
	if(ball.getY()+ball.getHeight()-margin>=paddle1.getY()-paddle1.getHeight() && ball.getX() + margin - 110 >= paddle1.getX() - paddle1.getWidth() && ball.getX() + margin <= paddle1.getX() + paddle1.getWidth()){
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	336c      	adds	r3, #108	; 0x6c
 8013724:	4618      	mov	r0, r3
 8013726:	f7f8 fefb 	bl	800c520 <_ZNK8touchgfx8Drawable4getYEv>
 801372a:	4603      	mov	r3, r0
 801372c:	461c      	mov	r4, r3
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	336c      	adds	r3, #108	; 0x6c
 8013732:	4618      	mov	r0, r3
 8013734:	f7ff fd5d 	bl	80131f2 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013738:	4603      	mov	r3, r0
 801373a:	18e2      	adds	r2, r4, r3
 801373c:	6879      	ldr	r1, [r7, #4]
 801373e:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013742:	440b      	add	r3, r1
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	1ad4      	subs	r4, r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	33ec      	adds	r3, #236	; 0xec
 801374c:	4618      	mov	r0, r3
 801374e:	f7f8 fee7 	bl	800c520 <_ZNK8touchgfx8Drawable4getYEv>
 8013752:	4603      	mov	r3, r0
 8013754:	461d      	mov	r5, r3
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	33ec      	adds	r3, #236	; 0xec
 801375a:	4618      	mov	r0, r3
 801375c:	f7ff fd49 	bl	80131f2 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013760:	4603      	mov	r3, r0
 8013762:	1aeb      	subs	r3, r5, r3
 8013764:	429c      	cmp	r4, r3
 8013766:	db3d      	blt.n	80137e4 <_ZN8PongView15check_collisionEv+0xcc>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	336c      	adds	r3, #108	; 0x6c
 801376c:	4618      	mov	r0, r3
 801376e:	f7f8 feca 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 8013772:	4603      	mov	r3, r0
 8013774:	4619      	mov	r1, r3
 8013776:	687a      	ldr	r2, [r7, #4]
 8013778:	f641 6330 	movw	r3, #7728	; 0x1e30
 801377c:	4413      	add	r3, r2
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	440b      	add	r3, r1
 8013782:	f1a3 046e 	sub.w	r4, r3, #110	; 0x6e
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	33ec      	adds	r3, #236	; 0xec
 801378a:	4618      	mov	r0, r3
 801378c:	f7f8 febb 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 8013790:	4603      	mov	r3, r0
 8013792:	461d      	mov	r5, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	33ec      	adds	r3, #236	; 0xec
 8013798:	4618      	mov	r0, r3
 801379a:	f7ff fd1d 	bl	80131d8 <_ZNK8touchgfx8Drawable8getWidthEv>
 801379e:	4603      	mov	r3, r0
 80137a0:	1aeb      	subs	r3, r5, r3
 80137a2:	429c      	cmp	r4, r3
 80137a4:	db1e      	blt.n	80137e4 <_ZN8PongView15check_collisionEv+0xcc>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	336c      	adds	r3, #108	; 0x6c
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7f8 feab 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 80137b0:	4603      	mov	r3, r0
 80137b2:	4619      	mov	r1, r3
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	f641 6330 	movw	r3, #7728	; 0x1e30
 80137ba:	4413      	add	r3, r2
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	18cc      	adds	r4, r1, r3
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	33ec      	adds	r3, #236	; 0xec
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f8 fe9e 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 80137ca:	4603      	mov	r3, r0
 80137cc:	461d      	mov	r5, r3
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	33ec      	adds	r3, #236	; 0xec
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7ff fd00 	bl	80131d8 <_ZNK8touchgfx8Drawable8getWidthEv>
 80137d8:	4603      	mov	r3, r0
 80137da:	442b      	add	r3, r5
 80137dc:	429c      	cmp	r4, r3
 80137de:	dc01      	bgt.n	80137e4 <_ZN8PongView15check_collisionEv+0xcc>
 80137e0:	2301      	movs	r3, #1
 80137e2:	e000      	b.n	80137e6 <_ZN8PongView15check_collisionEv+0xce>
 80137e4:	2300      	movs	r3, #0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d001      	beq.n	80137ee <_ZN8PongView15check_collisionEv+0xd6>
		return 1;
 80137ea:	2301      	movs	r3, #1
 80137ec:	e067      	b.n	80138be <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with wall
	if(ball.getY()+ball.getHeight()-margin-20<=0){
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	336c      	adds	r3, #108	; 0x6c
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7f8 fe94 	bl	800c520 <_ZNK8touchgfx8Drawable4getYEv>
 80137f8:	4603      	mov	r3, r0
 80137fa:	461c      	mov	r4, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	336c      	adds	r3, #108	; 0x6c
 8013800:	4618      	mov	r0, r3
 8013802:	f7ff fcf6 	bl	80131f2 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013806:	4603      	mov	r3, r0
 8013808:	18e2      	adds	r2, r4, r3
 801380a:	6879      	ldr	r1, [r7, #4]
 801380c:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013810:	440b      	add	r3, r1
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	1ad3      	subs	r3, r2, r3
 8013816:	3b14      	subs	r3, #20
 8013818:	2b00      	cmp	r3, #0
 801381a:	bfd4      	ite	le
 801381c:	2301      	movle	r3, #1
 801381e:	2300      	movgt	r3, #0
 8013820:	b2db      	uxtb	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <_ZN8PongView15check_collisionEv+0x112>
		return 2;
 8013826:	2302      	movs	r3, #2
 8013828:	e049      	b.n	80138be <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with left wall
	if(ball.getX()+ball.getWidth()-margin-20<=0){
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	336c      	adds	r3, #108	; 0x6c
 801382e:	4618      	mov	r0, r3
 8013830:	f7f8 fe69 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 8013834:	4603      	mov	r3, r0
 8013836:	461c      	mov	r4, r3
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	336c      	adds	r3, #108	; 0x6c
 801383c:	4618      	mov	r0, r3
 801383e:	f7ff fccb 	bl	80131d8 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013842:	4603      	mov	r3, r0
 8013844:	18e2      	adds	r2, r4, r3
 8013846:	6879      	ldr	r1, [r7, #4]
 8013848:	f641 6330 	movw	r3, #7728	; 0x1e30
 801384c:	440b      	add	r3, r1
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	1ad3      	subs	r3, r2, r3
 8013852:	3b14      	subs	r3, #20
 8013854:	2b00      	cmp	r3, #0
 8013856:	bfd4      	ite	le
 8013858:	2301      	movle	r3, #1
 801385a:	2300      	movgt	r3, #0
 801385c:	b2db      	uxtb	r3, r3
 801385e:	2b00      	cmp	r3, #0
 8013860:	d001      	beq.n	8013866 <_ZN8PongView15check_collisionEv+0x14e>
		return 3;
 8013862:	2303      	movs	r3, #3
 8013864:	e02b      	b.n	80138be <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with right wall
	if(ball.getX()+ball.getWidth() >= 480){
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	336c      	adds	r3, #108	; 0x6c
 801386a:	4618      	mov	r0, r3
 801386c:	f7f8 fe4b 	bl	800c506 <_ZNK8touchgfx8Drawable4getXEv>
 8013870:	4603      	mov	r3, r0
 8013872:	461c      	mov	r4, r3
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	336c      	adds	r3, #108	; 0x6c
 8013878:	4618      	mov	r0, r3
 801387a:	f7ff fcad 	bl	80131d8 <_ZNK8touchgfx8Drawable8getWidthEv>
 801387e:	4603      	mov	r3, r0
 8013880:	4423      	add	r3, r4
 8013882:	f240 12df 	movw	r2, #479	; 0x1df
 8013886:	4293      	cmp	r3, r2
 8013888:	bfcc      	ite	gt
 801388a:	2301      	movgt	r3, #1
 801388c:	2300      	movle	r3, #0
 801388e:	b2db      	uxtb	r3, r3
 8013890:	2b00      	cmp	r3, #0
 8013892:	d001      	beq.n	8013898 <_ZN8PongView15check_collisionEv+0x180>
		return 4;
 8013894:	2304      	movs	r3, #4
 8013896:	e012      	b.n	80138be <_ZN8PongView15check_collisionEv+0x1a6>
	}

	// collide with bottom
	if(ball.getY() >= 270){
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	336c      	adds	r3, #108	; 0x6c
 801389c:	4618      	mov	r0, r3
 801389e:	f7f8 fe3f 	bl	800c520 <_ZNK8touchgfx8Drawable4getYEv>
 80138a2:	4603      	mov	r3, r0
 80138a4:	461a      	mov	r2, r3
 80138a6:	f240 130d 	movw	r3, #269	; 0x10d
 80138aa:	429a      	cmp	r2, r3
 80138ac:	bfcc      	ite	gt
 80138ae:	2301      	movgt	r3, #1
 80138b0:	2300      	movle	r3, #0
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d001      	beq.n	80138bc <_ZN8PongView15check_collisionEv+0x1a4>
		return 5;
 80138b8:	2305      	movs	r3, #5
 80138ba:	e000      	b.n	80138be <_ZN8PongView15check_collisionEv+0x1a6>
	}

	return 0;
 80138bc:	2300      	movs	r3, #0
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3708      	adds	r7, #8
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080138c8 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b082      	sub	sp, #8
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	4a09      	ldr	r2, [pc, #36]	; (80138f8 <_ZN15screenPresenterD1Ev+0x30>)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	4a09      	ldr	r2, [pc, #36]	; (80138fc <_ZN15screenPresenterD1Ev+0x34>)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	605a      	str	r2, [r3, #4]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	3304      	adds	r3, #4
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7ff f8e5 	bl	8012ab0 <_ZN13ModelListenerD1Ev>
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7ff f89d 	bl	8012a28 <_ZN8touchgfx9PresenterD1Ev>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	4618      	mov	r0, r3
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	080288d0 	.word	0x080288d0
 80138fc:	080288e8 	.word	0x080288e8

08013900 <_ZThn4_N15screenPresenterD1Ev>:
 8013900:	f1a0 0004 	sub.w	r0, r0, #4
 8013904:	e7e0      	b.n	80138c8 <_ZN15screenPresenterD1Ev>
 8013906:	bf00      	nop

08013908 <_ZN15screenPresenterD0Ev>:
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7ff ffd9 	bl	80138c8 <_ZN15screenPresenterD1Ev>
 8013916:	2110      	movs	r1, #16
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f011 fec5 	bl	80256a8 <_ZdlPvj>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <_ZThn4_N15screenPresenterD0Ev>:
 8013928:	f1a0 0004 	sub.w	r0, r0, #4
 801392c:	e7ec      	b.n	8013908 <_ZN15screenPresenterD0Ev>
	...

08013930 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6039      	str	r1, [r7, #0]
    : view(v)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	4618      	mov	r0, r3
 801393e:	f7ff f893 	bl	8012a68 <_ZN8touchgfx9PresenterC1Ev>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	3304      	adds	r3, #4
 8013946:	4618      	mov	r0, r3
 8013948:	f7ff f89e 	bl	8012a88 <_ZN13ModelListenerC1Ev>
 801394c:	4a06      	ldr	r2, [pc, #24]	; (8013968 <_ZN15screenPresenterC1ER10screenView+0x38>)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	601a      	str	r2, [r3, #0]
 8013952:	4a06      	ldr	r2, [pc, #24]	; (801396c <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	605a      	str	r2, [r3, #4]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	683a      	ldr	r2, [r7, #0]
 801395c:	60da      	str	r2, [r3, #12]
{

}
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4618      	mov	r0, r3
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	080288d0 	.word	0x080288d0
 801396c:	080288e8 	.word	0x080288e8

08013970 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8013970:	b480      	push	{r7}
 8013972:	b083      	sub	sp, #12
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]

}
 8013978:	bf00      	nop
 801397a:	370c      	adds	r7, #12
 801397c:	46bd      	mov	sp, r7
 801397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013982:	4770      	bx	lr

08013984 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]

}
 801398c:	bf00      	nop
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr

08013998 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	4a05      	ldr	r2, [pc, #20]	; (80139b8 <_ZN10screenViewD1Ev+0x20>)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	601a      	str	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fe fb53 	bl	8012054 <_ZN14screenViewBaseD1Ev>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	080288f8 	.word	0x080288f8

080139bc <_ZN10screenViewD0Ev>:
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7ff ffe7 	bl	8013998 <_ZN10screenViewD1Ev>
 80139ca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f011 fe6a 	bl	80256a8 <_ZdlPvj>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	4618      	mov	r0, r3
 80139d8:	3708      	adds	r7, #8
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
	...

080139e0 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fe fb7c 	bl	80120e8 <_ZN14screenViewBaseC1Ev>
 80139f0:	4a03      	ldr	r2, [pc, #12]	; (8013a00 <_ZN10screenViewC1Ev+0x20>)
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	601a      	str	r2, [r3, #0]
{

}
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	4618      	mov	r0, r3
 80139fa:	3708      	adds	r7, #8
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	080288f8 	.word	0x080288f8

08013a04 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fe fcda 	bl	80123c8 <_ZN14screenViewBase11setupScreenEv>

}
 8013a14:	bf00      	nop
 8013a16:	3708      	adds	r7, #8
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fb fd04 	bl	800f434 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013a2c:	bf00      	nop
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013a34:	b480      	push	{r7}
 8013a36:	b083      	sub	sp, #12
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
    {
 8013a3c:	4a04      	ldr	r2, [pc, #16]	; (8013a50 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	601a      	str	r2, [r3, #0]
    }
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	4618      	mov	r0, r3
 8013a46:	370c      	adds	r7, #12
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr
 8013a50:	08028944 	.word	0x08028944

08013a54 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b082      	sub	sp, #8
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
    }
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7ff ffe9 	bl	8013a34 <_ZN8touchgfx15TouchControllerD1Ev>
 8013a62:	2104      	movs	r1, #4
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f011 fe1f 	bl	80256a8 <_ZdlPvj>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 8013a7c:	4b05      	ldr	r3, [pc, #20]	; (8013a94 <_ZN20STM32TouchController4initEv+0x20>)
 8013a7e:	4a06      	ldr	r2, [pc, #24]	; (8013a98 <_ZN20STM32TouchController4initEv+0x24>)
 8013a80:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 8013a82:	4b04      	ldr	r3, [pc, #16]	; (8013a94 <_ZN20STM32TouchController4initEv+0x20>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	68db      	ldr	r3, [r3, #12]
 8013a88:	2070      	movs	r0, #112	; 0x70
 8013a8a:	4798      	blx	r3

}
 8013a8c:	bf00      	nop
 8013a8e:	3708      	adds	r7, #8
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	20008618 	.word	0x20008618
 8013a98:	20000004 	.word	0x20000004

08013a9c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 8013aa8:	4b0f      	ldr	r3, [pc, #60]	; (8013ae8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d015      	beq.n	8013adc <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8013ab0:	4b0d      	ldr	r3, [pc, #52]	; (8013ae8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	691b      	ldr	r3, [r3, #16]
 8013ab6:	2070      	movs	r0, #112	; 0x70
 8013ab8:	4798      	blx	r3
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	bf14      	ite	ne
 8013ac0:	2301      	movne	r3, #1
 8013ac2:	2300      	moveq	r3, #0
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d008      	beq.n	8013adc <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8013aca:	4b07      	ldr	r3, [pc, #28]	; (8013ae8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	695b      	ldr	r3, [r3, #20]
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	6879      	ldr	r1, [r7, #4]
 8013ad4:	2070      	movs	r0, #112	; 0x70
 8013ad6:	4798      	blx	r3
	            return true;
 8013ad8:	2301      	movs	r3, #1
 8013ada:	e000      	b.n	8013ade <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 8013adc:	2300      	movs	r3, #0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3710      	adds	r7, #16
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	20008618 	.word	0x20008618

08013aec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	4a05      	ldr	r2, [pc, #20]	; (8013b0c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	601a      	str	r2, [r3, #0]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7ff ff99 	bl	8013a34 <_ZN8touchgfx15TouchControllerD1Ev>
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	4618      	mov	r0, r3
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	0802892c 	.word	0x0802892c

08013b10 <_ZN20STM32TouchControllerD0Ev>:
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f7ff ffe7 	bl	8013aec <_ZN20STM32TouchControllerD1Ev>
 8013b1e:	2104      	movs	r1, #4
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f011 fdc1 	bl	80256a8 <_ZdlPvj>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3708      	adds	r7, #8
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	4603      	mov	r3, r0
 8013b38:	71fb      	strb	r3, [r7, #7]

}
 8013b3a:	bf00      	nop
 8013b3c:	370c      	adds	r7, #12
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr

08013b46 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013b46:	b480      	push	{r7}
 8013b48:	b083      	sub	sp, #12
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	71fb      	strb	r3, [r7, #7]

}
 8013b50:	bf00      	nop
 8013b52:	370c      	adds	r7, #12
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr

08013b5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b083      	sub	sp, #12
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	4603      	mov	r3, r0
 8013b64:	71fb      	strb	r3, [r7, #7]

}
 8013b66:	bf00      	nop
 8013b68:	370c      	adds	r7, #12
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b70:	4770      	bx	lr
	...

08013b74 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013b74:	b480      	push	{r7}
 8013b76:	b083      	sub	sp, #12
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
    {
 8013b7c:	4a04      	ldr	r2, [pc, #16]	; (8013b90 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	601a      	str	r2, [r3, #0]
    }
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	4618      	mov	r0, r3
 8013b86:	370c      	adds	r7, #12
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8e:	4770      	bx	lr
 8013b90:	08029284 	.word	0x08029284

08013b94 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
    }
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f7ff ffe9 	bl	8013b74 <_ZN8touchgfx3HALD1Ev>
 8013ba2:	2178      	movs	r1, #120	; 0x78
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f011 fd7f 	bl	80256a8 <_ZdlPvj>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	4618      	mov	r0, r3
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013bb4:	b480      	push	{r7}
 8013bb6:	b083      	sub	sp, #12
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	460b      	mov	r3, r1
 8013bbe:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	78fa      	ldrb	r2, [r7, #3]
 8013bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2201      	movs	r2, #1
 8013bcc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	685a      	ldr	r2, [r3, #4]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4610      	mov	r0, r2
 8013bf2:	4798      	blx	r3
 8013bf4:	4603      	mov	r3, r0
    }
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3708      	adds	r7, #8
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}

08013bfe <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8013bfe:	b580      	push	{r7, lr}
 8013c00:	b082      	sub	sp, #8
 8013c02:	af00      	add	r7, sp, #0
 8013c04:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f002 fd9c 	bl	8016744 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	3390      	adds	r3, #144	; 0x90
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	4798      	blx	r3
    }
 8013c18:	bf00      	nop
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]
        return false;
 8013c2a:	2300      	movs	r3, #0
    }
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	370c      	adds	r7, #12
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr

08013c38 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8013c38:	b590      	push	{r4, r7, lr}
 8013c3a:	b08b      	sub	sp, #44	; 0x2c
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	4611      	mov	r1, r2
 8013c44:	461a      	mov	r2, r3
 8013c46:	460b      	mov	r3, r1
 8013c48:	80fb      	strh	r3, [r7, #6]
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8013c4e:	f7f8 fd77 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8013c52:	4602      	mov	r2, r0
 8013c54:	6813      	ldr	r3, [r2, #0]
 8013c56:	3324      	adds	r3, #36	; 0x24
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4610      	mov	r0, r2
 8013c5c:	4798      	blx	r3
 8013c5e:	4603      	mov	r3, r0
 8013c60:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8013c62:	8b7b      	ldrh	r3, [r7, #26]
 8013c64:	4a3d      	ldr	r2, [pc, #244]	; (8013d5c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8013c66:	8812      	ldrh	r2, [r2, #0]
 8013c68:	fb02 f303 	mul.w	r3, r2, r3
 8013c6c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8013c72:	2300      	movs	r3, #0
 8013c74:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8013c76:	2300      	movs	r3, #0
 8013c78:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013c7a:	797b      	ldrb	r3, [r7, #5]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d005      	beq.n	8013c8c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8013c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	4413      	add	r3, r2
 8013c86:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8013c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8a:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8013c8c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d005      	beq.n	8013ca0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8013c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	4413      	add	r3, r2
 8013c9a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9e:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8013ca0:	88fb      	ldrh	r3, [r7, #6]
 8013ca2:	3b01      	subs	r3, #1
 8013ca4:	2b1f      	cmp	r3, #31
 8013ca6:	d84d      	bhi.n	8013d44 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8013ca8:	a201      	add	r2, pc, #4	; (adr r2, 8013cb0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8013caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cae:	bf00      	nop
 8013cb0:	08013d31 	.word	0x08013d31
 8013cb4:	08013d31 	.word	0x08013d31
 8013cb8:	08013d45 	.word	0x08013d45
 8013cbc:	08013d31 	.word	0x08013d31
 8013cc0:	08013d45 	.word	0x08013d45
 8013cc4:	08013d45 	.word	0x08013d45
 8013cc8:	08013d45 	.word	0x08013d45
 8013ccc:	08013d31 	.word	0x08013d31
 8013cd0:	08013d45 	.word	0x08013d45
 8013cd4:	08013d45 	.word	0x08013d45
 8013cd8:	08013d45 	.word	0x08013d45
 8013cdc:	08013d45 	.word	0x08013d45
 8013ce0:	08013d45 	.word	0x08013d45
 8013ce4:	08013d45 	.word	0x08013d45
 8013ce8:	08013d45 	.word	0x08013d45
 8013cec:	08013d31 	.word	0x08013d31
 8013cf0:	08013d45 	.word	0x08013d45
 8013cf4:	08013d45 	.word	0x08013d45
 8013cf8:	08013d45 	.word	0x08013d45
 8013cfc:	08013d45 	.word	0x08013d45
 8013d00:	08013d45 	.word	0x08013d45
 8013d04:	08013d45 	.word	0x08013d45
 8013d08:	08013d45 	.word	0x08013d45
 8013d0c:	08013d31 	.word	0x08013d31
 8013d10:	08013d45 	.word	0x08013d45
 8013d14:	08013d45 	.word	0x08013d45
 8013d18:	08013d45 	.word	0x08013d45
 8013d1c:	08013d45 	.word	0x08013d45
 8013d20:	08013d45 	.word	0x08013d45
 8013d24:	08013d45 	.word	0x08013d45
 8013d28:	08013d45 	.word	0x08013d45
 8013d2c:	08013d31 	.word	0x08013d31
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	3374      	adds	r3, #116	; 0x74
 8013d36:	681c      	ldr	r4, [r3, #0]
 8013d38:	69fb      	ldr	r3, [r7, #28]
 8013d3a:	6a3a      	ldr	r2, [r7, #32]
 8013d3c:	68b9      	ldr	r1, [r7, #8]
 8013d3e:	68f8      	ldr	r0, [r7, #12]
 8013d40:	47a0      	blx	r4
            break;
 8013d42:	e006      	b.n	8013d52 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8013d44:	4b06      	ldr	r3, [pc, #24]	; (8013d60 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8013d46:	4a07      	ldr	r2, [pc, #28]	; (8013d64 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8013d48:	f240 216f 	movw	r1, #623	; 0x26f
 8013d4c:	4806      	ldr	r0, [pc, #24]	; (8013d68 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8013d4e:	f011 fcd7 	bl	8025700 <__assert_func>
    }
 8013d52:	bf00      	nop
 8013d54:	372c      	adds	r7, #44	; 0x2c
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd90      	pop	{r4, r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	2000b368 	.word	0x2000b368
 8013d60:	080270b4 	.word	0x080270b4
 8013d64:	08028a58 	.word	0x08028a58
 8013d68:	080270d4 	.word	0x080270d4

08013d6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
 8013d78:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d106      	bne.n	8013d8e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013d80:	4b11      	ldr	r3, [pc, #68]	; (8013dc8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013d82:	4a12      	ldr	r2, [pc, #72]	; (8013dcc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013d84:	f240 2182 	movw	r1, #642	; 0x282
 8013d88:	4811      	ldr	r0, [pc, #68]	; (8013dd0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013d8a:	f011 fcb9 	bl	8025700 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	683a      	ldr	r2, [r7, #0]
 8013d9e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	bf14      	ite	ne
 8013da6:	2301      	movne	r3, #1
 8013da8:	2300      	moveq	r3, #0
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	4b09      	ldr	r3, [pc, #36]	; (8013dd4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013dae:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	bf14      	ite	ne
 8013db6:	2301      	movne	r3, #1
 8013db8:	2300      	moveq	r3, #0
 8013dba:	b2da      	uxtb	r2, r3
 8013dbc:	4b06      	ldr	r3, [pc, #24]	; (8013dd8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013dbe:	701a      	strb	r2, [r3, #0]
    }
 8013dc0:	bf00      	nop
 8013dc2:	3710      	adds	r7, #16
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	08027118 	.word	0x08027118
 8013dcc:	08028a08 	.word	0x08028a08
 8013dd0:	080270d4 	.word	0x080270d4
 8013dd4:	2000b36a 	.word	0x2000b36a
 8013dd8:	2000b36b 	.word	0x2000b36b

08013ddc <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	460b      	mov	r3, r1
 8013de6:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d004      	beq.n	8013dfa <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013df4:	887a      	ldrh	r2, [r7, #2]
 8013df6:	4610      	mov	r0, r2
 8013df8:	4798      	blx	r3
    }
 8013dfa:	bf00      	nop
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}

08013e02 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8013e02:	b580      	push	{r7, lr}
 8013e04:	b082      	sub	sp, #8
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	685a      	ldr	r2, [r3, #4]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	3318      	adds	r3, #24
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	4610      	mov	r0, r2
 8013e1a:	4798      	blx	r3
 8013e1c:	4603      	mov	r3, r0
    }
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3708      	adds	r7, #8
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
	...

08013e28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d017      	beq.n	8013e70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013e40:	4b1a      	ldr	r3, [pc, #104]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d12a      	bne.n	8013e9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013e48:	4b19      	ldr	r3, [pc, #100]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e4a:	881a      	ldrh	r2, [r3, #0]
 8013e4c:	4b19      	ldr	r3, [pc, #100]	; (8013eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e4e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013e50:	4b19      	ldr	r3, [pc, #100]	; (8013eb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e52:	881a      	ldrh	r2, [r3, #0]
 8013e54:	4b19      	ldr	r3, [pc, #100]	; (8013ebc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e56:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013e58:	4b16      	ldr	r3, [pc, #88]	; (8013eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e5a:	881a      	ldrh	r2, [r3, #0]
 8013e5c:	4b16      	ldr	r3, [pc, #88]	; (8013eb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e5e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013e60:	4b16      	ldr	r3, [pc, #88]	; (8013ebc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e62:	881a      	ldrh	r2, [r3, #0]
 8013e64:	4b12      	ldr	r3, [pc, #72]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e66:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013e68:	4b10      	ldr	r3, [pc, #64]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013e6e:	e016      	b.n	8013e9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013e70:	4b0e      	ldr	r3, [pc, #56]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d012      	beq.n	8013e9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013e78:	4b0f      	ldr	r3, [pc, #60]	; (8013eb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e7a:	881a      	ldrh	r2, [r3, #0]
 8013e7c:	4b0d      	ldr	r3, [pc, #52]	; (8013eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e7e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013e80:	4b0b      	ldr	r3, [pc, #44]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e82:	881a      	ldrh	r2, [r3, #0]
 8013e84:	4b0d      	ldr	r3, [pc, #52]	; (8013ebc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e86:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013e88:	4b0c      	ldr	r3, [pc, #48]	; (8013ebc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e8a:	881a      	ldrh	r2, [r3, #0]
 8013e8c:	4b0a      	ldr	r3, [pc, #40]	; (8013eb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e8e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013e90:	4b08      	ldr	r3, [pc, #32]	; (8013eb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e92:	881a      	ldrh	r2, [r3, #0]
 8013e94:	4b06      	ldr	r3, [pc, #24]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e96:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013e98:	4b04      	ldr	r3, [pc, #16]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	701a      	strb	r2, [r3, #0]
    }
 8013e9e:	bf00      	nop
 8013ea0:	370c      	adds	r7, #12
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	2000b364 	.word	0x2000b364
 8013eb0:	2000b360 	.word	0x2000b360
 8013eb4:	2000b366 	.word	0x2000b366
 8013eb8:	2000b362 	.word	0x2000b362
 8013ebc:	2000b368 	.word	0x2000b368

08013ec0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f001 febd 	bl	8015c4a <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8013ed0:	bf00      	nop
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	4a05      	ldr	r2, [pc, #20]	; (8013ef8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7ff fe43 	bl	8013b74 <_ZN8touchgfx3HALD1Ev>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	08028c70 	.word	0x08028c70

08013efc <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f7ff ffe7 	bl	8013ed8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013f0a:	2178      	movs	r1, #120	; 0x78
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f011 fbcb 	bl	80256a8 <_ZdlPvj>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	4618      	mov	r0, r3
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7ff ffca 	bl	8013ec0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013f2c:	bf00      	nop
 8013f2e:	3708      	adds	r7, #8
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f001 fafa 	bl	8015538 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013f44:	bf00      	nop
 8013f46:	3708      	adds	r7, #8
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	4618      	mov	r0, r3
 8013f58:	f001 fb7a 	bl	8015650 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013f5c:	4603      	mov	r3, r0
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3708      	adds	r7, #8
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}

08013f66 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013f66:	b580      	push	{r7, lr}
 8013f68:	b082      	sub	sp, #8
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	6078      	str	r0, [r7, #4]
 8013f6e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6839      	ldr	r1, [r7, #0]
 8013f74:	4618      	mov	r0, r3
 8013f76:	f001 fb79 	bl	801566c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013f7a:	bf00      	nop
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013f82:	b580      	push	{r7, lr}
 8013f84:	b082      	sub	sp, #8
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
 8013f8a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6839      	ldr	r1, [r7, #0]
 8013f90:	4618      	mov	r0, r3
 8013f92:	f001 fb81 	bl	8015698 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8013f96:	bf00      	nop
 8013f98:	3708      	adds	r7, #8
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}

08013f9e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013f9e:	b580      	push	{r7, lr}
 8013fa0:	b084      	sub	sp, #16
 8013fa2:	af00      	add	r7, sp, #0
 8013fa4:	60f8      	str	r0, [r7, #12]
 8013fa6:	60b9      	str	r1, [r7, #8]
 8013fa8:	607a      	str	r2, [r7, #4]
 8013faa:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8013fac:	68f8      	ldr	r0, [r7, #12]
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	68b9      	ldr	r1, [r7, #8]
 8013fb4:	f001 ff83 	bl	8015ebe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013fb8:	4603      	mov	r3, r0
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	3710      	adds	r7, #16
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}

08013fc2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8013fc2:	b580      	push	{r7, lr}
 8013fc4:	b082      	sub	sp, #8
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f001 fae5 	bl	801559c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8013fd2:	bf00      	nop
 8013fd4:	3708      	adds	r7, #8
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b082      	sub	sp, #8
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f001 fae9 	bl	80155bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013fea:	bf00      	nop
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}

08013ff2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013ff2:	b580      	push	{r7, lr}
 8013ff4:	b082      	sub	sp, #8
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f001 faeb 	bl	80155d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014002:	bf00      	nop
 8014004:	3708      	adds	r7, #8
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801400a:	b580      	push	{r7, lr}
 801400c:	b082      	sub	sp, #8
 801400e:	af00      	add	r7, sp, #0
 8014010:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	4618      	mov	r0, r3
 8014016:	f001 faed 	bl	80155f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801401a:	bf00      	nop
 801401c:	3708      	adds	r7, #8
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
	...

08014024 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	4a05      	ldr	r2, [pc, #20]	; (8014044 <_ZN11TouchGFXHALD1Ev+0x20>)
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	601a      	str	r2, [r3, #0]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	4618      	mov	r0, r3
 8014036:	f7ff ff4f 	bl	8013ed8 <_ZN20TouchGFXGeneratedHALD1Ev>
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	4618      	mov	r0, r3
 801403e:	3708      	adds	r7, #8
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}
 8014044:	0802895c 	.word	0x0802895c

08014048 <_ZN11TouchGFXHALD0Ev>:
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f7ff ffe7 	bl	8014024 <_ZN11TouchGFXHALD1Ev>
 8014056:	2178      	movs	r1, #120	; 0x78
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f011 fb25 	bl	80256a8 <_ZdlPvj>
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	4618      	mov	r0, r3
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014068:	b580      	push	{r7, lr}
 801406a:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 801406c:	2101      	movs	r1, #1
 801406e:	4811      	ldr	r0, [pc, #68]	; (80140b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8014070:	f7f4 fecf 	bl	8008e12 <osSemaphoreCreate>
 8014074:	4602      	mov	r2, r0
 8014076:	4b10      	ldr	r3, [pc, #64]	; (80140b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014078:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 801407a:	4b0f      	ldr	r3, [pc, #60]	; (80140b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d105      	bne.n	801408e <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8014082:	4b0e      	ldr	r3, [pc, #56]	; (80140bc <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014084:	4a0e      	ldr	r2, [pc, #56]	; (80140c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014086:	2125      	movs	r1, #37	; 0x25
 8014088:	480e      	ldr	r0, [pc, #56]	; (80140c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801408a:	f011 fb39 	bl	8025700 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 801408e:	2101      	movs	r1, #1
 8014090:	480d      	ldr	r0, [pc, #52]	; (80140c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014092:	f7f4 febe 	bl	8008e12 <osSemaphoreCreate>
 8014096:	4602      	mov	r2, r0
 8014098:	4b0c      	ldr	r3, [pc, #48]	; (80140cc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801409a:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 801409c:	4b0b      	ldr	r3, [pc, #44]	; (80140cc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d105      	bne.n	80140b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 80140a4:	4b0a      	ldr	r3, [pc, #40]	; (80140d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 80140a6:	4a06      	ldr	r2, [pc, #24]	; (80140c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80140a8:	2128      	movs	r1, #40	; 0x28
 80140aa:	4806      	ldr	r0, [pc, #24]	; (80140c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80140ac:	f011 fb28 	bl	8025700 <__assert_func>
}
 80140b0:	bf00      	nop
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	08028aac 	.word	0x08028aac
 80140b8:	2000861c 	.word	0x2000861c
 80140bc:	08027150 	.word	0x08027150
 80140c0:	08028abc 	.word	0x08028abc
 80140c4:	0802719c 	.word	0x0802719c
 80140c8:	08028ab4 	.word	0x08028ab4
 80140cc:	20008620 	.word	0x20008620
 80140d0:	080271c8 	.word	0x080271c8

080140d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 80140d8:	4b04      	ldr	r3, [pc, #16]	; (80140ec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f04f 31ff 	mov.w	r1, #4294967295
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7f4 fed7 	bl	8008e94 <osSemaphoreWait>
}
 80140e6:	bf00      	nop
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	2000861c 	.word	0x2000861c

080140f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80140f4:	4b03      	ldr	r3, [pc, #12]	; (8014104 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7f4 ff19 	bl	8008f30 <osSemaphoreRelease>
}
 80140fe:	bf00      	nop
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	2000861c 	.word	0x2000861c

08014108 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014108:	b580      	push	{r7, lr}
 801410a:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 801410c:	4b03      	ldr	r3, [pc, #12]	; (801411c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2100      	movs	r1, #0
 8014112:	4618      	mov	r0, r3
 8014114:	f7f4 febe 	bl	8008e94 <osSemaphoreWait>
}
 8014118:	bf00      	nop
 801411a:	bd80      	pop	{r7, pc}
 801411c:	2000861c 	.word	0x2000861c

08014120 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014120:	b580      	push	{r7, lr}
 8014122:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8014124:	4b03      	ldr	r3, [pc, #12]	; (8014134 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	4618      	mov	r0, r3
 801412a:	f7f4 ff01 	bl	8008f30 <osSemaphoreRelease>
}
 801412e:	bf00      	nop
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	2000861c 	.word	0x2000861c

08014138 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014138:	b580      	push	{r7, lr}
 801413a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 801413c:	4b03      	ldr	r3, [pc, #12]	; (801414c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4618      	mov	r0, r3
 8014142:	f7f4 fef5 	bl	8008f30 <osSemaphoreRelease>
}
 8014146:	bf00      	nop
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	20008620 	.word	0x20008620

08014150 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8014150:	b580      	push	{r7, lr}
 8014152:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8014154:	4b07      	ldr	r3, [pc, #28]	; (8014174 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	2100      	movs	r1, #0
 801415a:	4618      	mov	r0, r3
 801415c:	f7f4 fe9a 	bl	8008e94 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8014160:	4b04      	ldr	r3, [pc, #16]	; (8014174 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	f04f 31ff 	mov.w	r1, #4294967295
 8014168:	4618      	mov	r0, r3
 801416a:	f7f4 fe93 	bl	8008e94 <osSemaphoreWait>
}
 801416e:	bf00      	nop
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	20008620 	.word	0x20008620

08014178 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	4603      	mov	r3, r0
 8014180:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8014182:	88fb      	ldrh	r3, [r7, #6]
 8014184:	4618      	mov	r0, r3
 8014186:	f7f4 fe30 	bl	8008dea <osDelay>
}
 801418a:	bf00      	nop
 801418c:	3708      	adds	r7, #8
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
	...

08014194 <__NVIC_EnableIRQ>:
{
 8014194:	b480      	push	{r7}
 8014196:	b083      	sub	sp, #12
 8014198:	af00      	add	r7, sp, #0
 801419a:	4603      	mov	r3, r0
 801419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	db0d      	blt.n	80141c2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	f003 021f 	and.w	r2, r3, #31
 80141b0:	4907      	ldr	r1, [pc, #28]	; (80141d0 <__NVIC_EnableIRQ+0x3c>)
 80141b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141b6:	095b      	lsrs	r3, r3, #5
 80141b8:	2001      	movs	r0, #1
 80141ba:	fa00 f202 	lsl.w	r2, r0, r2
 80141be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80141c2:	bf00      	nop
 80141c4:	370c      	adds	r7, #12
 80141c6:	46bd      	mov	sp, r7
 80141c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141cc:	4770      	bx	lr
 80141ce:	bf00      	nop
 80141d0:	e000e100 	.word	0xe000e100

080141d4 <__NVIC_DisableIRQ>:
{
 80141d4:	b480      	push	{r7}
 80141d6:	b083      	sub	sp, #12
 80141d8:	af00      	add	r7, sp, #0
 80141da:	4603      	mov	r3, r0
 80141dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80141de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	db12      	blt.n	801420c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141ea:	b2db      	uxtb	r3, r3
 80141ec:	f003 021f 	and.w	r2, r3, #31
 80141f0:	4909      	ldr	r1, [pc, #36]	; (8014218 <__NVIC_DisableIRQ+0x44>)
 80141f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141f6:	095b      	lsrs	r3, r3, #5
 80141f8:	2001      	movs	r0, #1
 80141fa:	fa00 f202 	lsl.w	r2, r0, r2
 80141fe:	3320      	adds	r3, #32
 8014200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014208:	f3bf 8f6f 	isb	sy
}
 801420c:	bf00      	nop
 801420e:	370c      	adds	r7, #12
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr
 8014218:	e000e100 	.word	0xe000e100

0801421c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
        : color(0)
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2200      	movs	r2, #0
 8014228:	601a      	str	r2, [r3, #0]
    }
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	4618      	mov	r0, r3
 801422e:	370c      	adds	r7, #12
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr

08014238 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
        return color;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
    }
 8014244:	4618      	mov	r0, r3
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8014250:	b480      	push	{r7}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
    {
 8014258:	4a04      	ldr	r2, [pc, #16]	; (801426c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	601a      	str	r2, [r3, #0]
    }
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4618      	mov	r0, r3
 8014262:	370c      	adds	r7, #12
 8014264:	46bd      	mov	sp, r7
 8014266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426a:	4770      	bx	lr
 801426c:	08028b44 	.word	0x08028b44

08014270 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
    }
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f7ff ffe9 	bl	8014250 <_ZN8touchgfx9DMA_QueueD1Ev>
 801427e:	2104      	movs	r1, #4
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f011 fa11 	bl	80256a8 <_ZdlPvj>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	4618      	mov	r0, r3
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	3344      	adds	r3, #68	; 0x44
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	4798      	blx	r3
    }
 80142a4:	bf00      	nop
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80142ac:	b480      	push	{r7}
 80142ae:	b083      	sub	sp, #12
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80142b4:	2300      	movs	r3, #0
    }
 80142b6:	4618      	mov	r0, r3
 80142b8:	370c      	adds	r7, #12
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr
	...

080142c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80142c4:	b480      	push	{r7}
 80142c6:	b083      	sub	sp, #12
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
    {
 80142cc:	4a04      	ldr	r2, [pc, #16]	; (80142e0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	601a      	str	r2, [r3, #0]
    }
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr
 80142e0:	080296c8 	.word	0x080296c8

080142e4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
    }
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7ff ffe9 	bl	80142c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80142f2:	210c      	movs	r1, #12
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f011 f9d7 	bl	80256a8 <_ZdlPvj>
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	4618      	mov	r0, r3
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801430e:	4a09      	ldr	r2, [pc, #36]	; (8014334 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	601a      	str	r2, [r3, #0]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	683a      	ldr	r2, [r7, #0]
 8014318:	605a      	str	r2, [r3, #4]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2200      	movs	r2, #0
 801431e:	721a      	strb	r2, [r3, #8]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2200      	movs	r2, #0
 8014324:	725a      	strb	r2, [r3, #9]
    {
    }
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	4618      	mov	r0, r3
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr
 8014334:	080296c8 	.word	0x080296c8

08014338 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	685a      	ldr	r2, [r3, #4]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	3314      	adds	r3, #20
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	4610      	mov	r0, r2
 8014350:	4798      	blx	r3
    }
 8014352:	bf00      	nop
 8014354:	3708      	adds	r7, #8
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801435a:	b580      	push	{r7, lr}
 801435c:	b082      	sub	sp, #8
 801435e:	af00      	add	r7, sp, #0
 8014360:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	3328      	adds	r3, #40	; 0x28
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4610      	mov	r0, r2
 801436e:	4798      	blx	r3
    }
 8014370:	bf00      	nop
 8014372:	3708      	adds	r7, #8
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8014378:	b480      	push	{r7}
 801437a:	b085      	sub	sp, #20
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	607a      	str	r2, [r7, #4]
 8014384:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8014390:	68ba      	ldr	r2, [r7, #8]
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	430a      	orrs	r2, r1
 8014398:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143a0:	f023 0107 	bic.w	r1, r3, #7
 80143a4:	687a      	ldr	r2, [r7, #4]
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	430a      	orrs	r2, r1
 80143ac:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80143b4:	4b06      	ldr	r3, [pc, #24]	; (80143d0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80143b6:	4013      	ands	r3, r2
 80143b8:	6839      	ldr	r1, [r7, #0]
 80143ba:	68fa      	ldr	r2, [r7, #12]
 80143bc:	6812      	ldr	r2, [r2, #0]
 80143be:	430b      	orrs	r3, r1
 80143c0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80143c2:	2300      	movs	r3, #0
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	3714      	adds	r7, #20
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr
 80143d0:	ffffc000 	.word	0xffffc000

080143d4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80143dc:	f7f8 f9a4 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 80143e0:	4603      	mov	r3, r0
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7ff ffa8 	bl	8014338 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80143e8:	bf00      	nop
 80143ea:	3708      	adds	r7, #8
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
    assert(0);
 80143f8:	4b02      	ldr	r3, [pc, #8]	; (8014404 <DMA2D_XferErrorCallback+0x14>)
 80143fa:	4a03      	ldr	r2, [pc, #12]	; (8014408 <DMA2D_XferErrorCallback+0x18>)
 80143fc:	213e      	movs	r1, #62	; 0x3e
 80143fe:	4803      	ldr	r0, [pc, #12]	; (801440c <DMA2D_XferErrorCallback+0x1c>)
 8014400:	f011 f97e 	bl	8025700 <__assert_func>
 8014404:	08027204 	.word	0x08027204
 8014408:	08028b60 	.word	0x08028b60
 801440c:	08027208 	.word	0x08027208

08014410 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	3318      	adds	r3, #24
 801441c:	4618      	mov	r0, r3
 801441e:	f7ff fefd 	bl	801421c <_ZN8touchgfx9colortypeC1Ev>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	4618      	mov	r0, r3
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 801442c:	b5b0      	push	{r4, r5, r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014434:	687a      	ldr	r2, [r7, #4]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	330c      	adds	r3, #12
 801443a:	4619      	mov	r1, r3
 801443c:	4610      	mov	r0, r2
 801443e:	f7ff ff61 	bl	8014304 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8014442:	4a0e      	ldr	r2, [pc, #56]	; (801447c <_ZN10STM32F7DMAC1Ev+0x50>)
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	601a      	str	r2, [r3, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f103 000c 	add.w	r0, r3, #12
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	3320      	adds	r3, #32
 8014452:	2260      	movs	r2, #96	; 0x60
 8014454:	4619      	mov	r1, r3
 8014456:	f002 fa9b 	bl	8016990 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	3320      	adds	r3, #32
 801445e:	245f      	movs	r4, #95	; 0x5f
 8014460:	461d      	mov	r5, r3
 8014462:	2c00      	cmp	r4, #0
 8014464:	db05      	blt.n	8014472 <_ZN10STM32F7DMAC1Ev+0x46>
 8014466:	4628      	mov	r0, r5
 8014468:	f7ff ffd2 	bl	8014410 <_ZN8touchgfx6BlitOpC1Ev>
 801446c:	3520      	adds	r5, #32
 801446e:	3c01      	subs	r4, #1
 8014470:	e7f7      	b.n	8014462 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	4618      	mov	r0, r3
 8014476:	3708      	adds	r7, #8
 8014478:	46bd      	mov	sp, r7
 801447a:	bdb0      	pop	{r4, r5, r7, pc}
 801447c:	08028af4 	.word	0x08028af4

08014480 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
 8014488:	4a0b      	ldr	r2, [pc, #44]	; (80144b8 <_ZN10STM32F7DMAD1Ev+0x38>)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801448e:	480b      	ldr	r0, [pc, #44]	; (80144bc <_ZN10STM32F7DMAD1Ev+0x3c>)
 8014490:	f7ef f88a 	bl	80035a8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014494:	205a      	movs	r0, #90	; 0x5a
 8014496:	f7ff fe9d 	bl	80141d4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	330c      	adds	r3, #12
 801449e:	4618      	mov	r0, r3
 80144a0:	f000 faa4 	bl	80149ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7ff ff0c 	bl	80142c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	4618      	mov	r0, r3
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	08028af4 	.word	0x08028af4
 80144bc:	2000ba44 	.word	0x2000ba44

080144c0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
}
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f7ff ffd9 	bl	8014480 <_ZN10STM32F7DMAD1Ev>
 80144ce:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f011 f8e8 	bl	80256a8 <_ZdlPvj>
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	3708      	adds	r7, #8
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
	...

080144e4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80144ec:	4b09      	ldr	r3, [pc, #36]	; (8014514 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144ee:	4a0a      	ldr	r2, [pc, #40]	; (8014518 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80144f0:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80144f2:	4808      	ldr	r0, [pc, #32]	; (8014514 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144f4:	f7ef f80e 	bl	8003514 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80144f8:	4b06      	ldr	r3, [pc, #24]	; (8014514 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144fa:	4a08      	ldr	r2, [pc, #32]	; (801451c <_ZN10STM32F7DMA10initializeEv+0x38>)
 80144fc:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80144fe:	4b05      	ldr	r3, [pc, #20]	; (8014514 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014500:	4a07      	ldr	r2, [pc, #28]	; (8014520 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8014502:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8014504:	205a      	movs	r0, #90	; 0x5a
 8014506:	f7ff fe45 	bl	8014194 <__NVIC_EnableIRQ>
}
 801450a:	bf00      	nop
 801450c:	3708      	adds	r7, #8
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	2000ba44 	.word	0x2000ba44
 8014518:	4002b000 	.word	0x4002b000
 801451c:	080143d5 	.word	0x080143d5
 8014520:	080143f1 	.word	0x080143f1

08014524 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 801452c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8014530:	4618      	mov	r0, r3
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453a:	4770      	bx	lr

0801453c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801453c:	b590      	push	{r4, r7, lr}
 801453e:	b08d      	sub	sp, #52	; 0x34
 8014540:	af02      	add	r7, sp, #8
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8014546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801454a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801454c:	2300      	movs	r3, #0
 801454e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014554:	2b20      	cmp	r3, #32
 8014556:	d007      	beq.n	8014568 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	2b40      	cmp	r3, #64	; 0x40
 801455e:	d003      	beq.n	8014568 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b04      	cmp	r3, #4
 8014566:	d101      	bne.n	801456c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8014568:	2301      	movs	r3, #1
 801456a:	e000      	b.n	801456e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801456c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801456e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014574:	2b80      	cmp	r3, #128	; 0x80
 8014576:	d004      	beq.n	8014582 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014580:	d101      	bne.n	8014586 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8014582:	2301      	movs	r3, #1
 8014584:	e000      	b.n	8014588 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8014586:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014588:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801458a:	f7f8 f8d9 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 801458e:	4602      	mov	r2, r0
 8014590:	6813      	ldr	r3, [r2, #0]
 8014592:	331c      	adds	r3, #28
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	4610      	mov	r0, r2
 8014598:	4798      	blx	r3
 801459a:	4603      	mov	r3, r0
 801459c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b40      	cmp	r3, #64	; 0x40
 80145a4:	d01d      	beq.n	80145e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80145a6:	2b40      	cmp	r3, #64	; 0x40
 80145a8:	d804      	bhi.n	80145b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80145aa:	2b04      	cmp	r3, #4
 80145ac:	d00e      	beq.n	80145cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80145ae:	2b20      	cmp	r3, #32
 80145b0:	d017      	beq.n	80145e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80145b2:	e019      	b.n	80145e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80145b4:	2b80      	cmp	r3, #128	; 0x80
 80145b6:	d003      	beq.n	80145c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80145b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145bc:	d003      	beq.n	80145c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80145be:	e013      	b.n	80145e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80145c0:	230a      	movs	r3, #10
 80145c2:	623b      	str	r3, [r7, #32]
        break;
 80145c4:	e01a      	b.n	80145fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80145c6:	2309      	movs	r3, #9
 80145c8:	623b      	str	r3, [r7, #32]
        break;
 80145ca:	e017      	b.n	80145fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80145cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80145d0:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80145d2:	7f7b      	ldrb	r3, [r7, #29]
 80145d4:	2b10      	cmp	r3, #16
 80145d6:	d101      	bne.n	80145dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80145d8:	2302      	movs	r3, #2
 80145da:	e000      	b.n	80145de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80145dc:	2301      	movs	r3, #1
 80145de:	623b      	str	r3, [r7, #32]
        break;
 80145e0:	e00c      	b.n	80145fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80145e2:	2300      	movs	r3, #0
 80145e4:	623b      	str	r3, [r7, #32]
        break;
 80145e6:	e009      	b.n	80145fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80145e8:	2300      	movs	r3, #0
 80145ea:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80145ec:	7f7b      	ldrb	r3, [r7, #29]
 80145ee:	2b10      	cmp	r3, #16
 80145f0:	d101      	bne.n	80145f6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80145f2:	2302      	movs	r3, #2
 80145f4:	e000      	b.n	80145f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80145f6:	2301      	movs	r3, #1
 80145f8:	623b      	str	r3, [r7, #32]
        break;
 80145fa:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80145fc:	4a75      	ldr	r2, [pc, #468]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80145fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014600:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014602:	7f7b      	ldrb	r3, [r7, #29]
 8014604:	2b10      	cmp	r3, #16
 8014606:	d101      	bne.n	801460c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8014608:	2302      	movs	r3, #2
 801460a:	e000      	b.n	801460e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801460c:	2301      	movs	r3, #1
 801460e:	4a71      	ldr	r2, [pc, #452]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014610:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	8adb      	ldrh	r3, [r3, #22]
 8014616:	461a      	mov	r2, r3
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	8a1b      	ldrh	r3, [r3, #16]
 801461c:	1ad3      	subs	r3, r2, r3
 801461e:	461a      	mov	r2, r3
 8014620:	4b6c      	ldr	r3, [pc, #432]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014622:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014624:	7f7b      	ldrb	r3, [r7, #29]
 8014626:	2b10      	cmp	r3, #16
 8014628:	d101      	bne.n	801462e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801462a:	2202      	movs	r2, #2
 801462c:	e000      	b.n	8014630 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801462e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	8adb      	ldrh	r3, [r3, #22]
 8014634:	4619      	mov	r1, r3
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	8a1b      	ldrh	r3, [r3, #16]
 801463a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801463c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801463e:	4865      	ldr	r0, [pc, #404]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014640:	f7ff fe9a 	bl	8014378 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014644:	4a63      	ldr	r2, [pc, #396]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014646:	6a3b      	ldr	r3, [r7, #32]
 8014648:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	8a9b      	ldrh	r3, [r3, #20]
 801464e:	461a      	mov	r2, r3
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	8a1b      	ldrh	r3, [r3, #16]
 8014654:	1ad3      	subs	r3, r2, r3
 8014656:	461a      	mov	r2, r3
 8014658:	4b5e      	ldr	r3, [pc, #376]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801465a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 801465c:	7ffb      	ldrb	r3, [r7, #31]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d103      	bne.n	801466a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8014662:	7fbb      	ldrb	r3, [r7, #30]
 8014664:	2b00      	cmp	r3, #0
 8014666:	f000 8081 	beq.w	801476c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	7f1b      	ldrb	r3, [r3, #28]
 801466e:	2bff      	cmp	r3, #255	; 0xff
 8014670:	d008      	beq.n	8014684 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8014672:	4b58      	ldr	r3, [pc, #352]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014674:	2202      	movs	r2, #2
 8014676:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	7f1b      	ldrb	r3, [r3, #28]
 801467c:	461a      	mov	r2, r3
 801467e:	4b55      	ldr	r3, [pc, #340]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014680:	635a      	str	r2, [r3, #52]	; 0x34
 8014682:	e002      	b.n	801468a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8014684:	4b53      	ldr	r3, [pc, #332]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014686:	2200      	movs	r2, #0
 8014688:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801468a:	7fbb      	ldrb	r3, [r7, #30]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d058      	beq.n	8014742 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8014690:	7f7b      	ldrb	r3, [r7, #29]
 8014692:	2b10      	cmp	r3, #16
 8014694:	d14a      	bne.n	801472c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	3318      	adds	r3, #24
 801469a:	4618      	mov	r0, r3
 801469c:	f7ff fdcc 	bl	8014238 <_ZNK8touchgfx9colortypecvmEv>
 80146a0:	4603      	mov	r3, r0
 80146a2:	0adb      	lsrs	r3, r3, #11
 80146a4:	f003 021f 	and.w	r2, r3, #31
 80146a8:	4613      	mov	r3, r2
 80146aa:	021b      	lsls	r3, r3, #8
 80146ac:	1a9a      	subs	r2, r3, r2
 80146ae:	4b4a      	ldr	r3, [pc, #296]	; (80147d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80146b0:	fba3 1302 	umull	r1, r3, r3, r2
 80146b4:	1ad2      	subs	r2, r2, r3
 80146b6:	0852      	lsrs	r2, r2, #1
 80146b8:	4413      	add	r3, r2
 80146ba:	091b      	lsrs	r3, r3, #4
 80146bc:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	3318      	adds	r3, #24
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7ff fdb8 	bl	8014238 <_ZNK8touchgfx9colortypecvmEv>
 80146c8:	4603      	mov	r3, r0
 80146ca:	095b      	lsrs	r3, r3, #5
 80146cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80146d0:	4613      	mov	r3, r2
 80146d2:	021b      	lsls	r3, r3, #8
 80146d4:	1a9a      	subs	r2, r3, r2
 80146d6:	4b41      	ldr	r3, [pc, #260]	; (80147dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80146d8:	fba3 1302 	umull	r1, r3, r3, r2
 80146dc:	1ad2      	subs	r2, r2, r3
 80146de:	0852      	lsrs	r2, r2, #1
 80146e0:	4413      	add	r3, r2
 80146e2:	095b      	lsrs	r3, r3, #5
 80146e4:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	3318      	adds	r3, #24
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7ff fda4 	bl	8014238 <_ZNK8touchgfx9colortypecvmEv>
 80146f0:	4603      	mov	r3, r0
 80146f2:	f003 021f 	and.w	r2, r3, #31
 80146f6:	4613      	mov	r3, r2
 80146f8:	021b      	lsls	r3, r3, #8
 80146fa:	1a9a      	subs	r2, r3, r2
 80146fc:	4b36      	ldr	r3, [pc, #216]	; (80147d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80146fe:	fba3 1302 	umull	r1, r3, r3, r2
 8014702:	1ad2      	subs	r2, r2, r3
 8014704:	0852      	lsrs	r2, r2, #1
 8014706:	4413      	add	r3, r2
 8014708:	091b      	lsrs	r3, r3, #4
 801470a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	7f1b      	ldrb	r3, [r3, #28]
 8014710:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	061a      	lsls	r2, r3, #24
 8014716:	69bb      	ldr	r3, [r7, #24]
 8014718:	041b      	lsls	r3, r3, #16
 801471a:	431a      	orrs	r2, r3
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	021b      	lsls	r3, r3, #8
 8014720:	431a      	orrs	r2, r3
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	4313      	orrs	r3, r2
 8014726:	4a2b      	ldr	r2, [pc, #172]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014728:	6353      	str	r3, [r2, #52]	; 0x34
 801472a:	e00a      	b.n	8014742 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	3318      	adds	r3, #24
 8014730:	60bb      	str	r3, [r7, #8]
        return color;
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	683a      	ldr	r2, [r7, #0]
 8014738:	7f12      	ldrb	r2, [r2, #28]
 801473a:	0612      	lsls	r2, r2, #24
 801473c:	4313      	orrs	r3, r2
 801473e:	4a25      	ldr	r2, [pc, #148]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014740:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	8adb      	ldrh	r3, [r3, #22]
 8014746:	461a      	mov	r2, r3
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	8a1b      	ldrh	r3, [r3, #16]
 801474c:	1ad3      	subs	r3, r2, r3
 801474e:	461a      	mov	r2, r3
 8014750:	4b20      	ldr	r3, [pc, #128]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014752:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014754:	7f7b      	ldrb	r3, [r7, #29]
 8014756:	2b10      	cmp	r3, #16
 8014758:	d101      	bne.n	801475e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 801475a:	2302      	movs	r3, #2
 801475c:	e000      	b.n	8014760 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801475e:	2301      	movs	r3, #1
 8014760:	4a1c      	ldr	r2, [pc, #112]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014762:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014764:	2100      	movs	r1, #0
 8014766:	481b      	ldr	r0, [pc, #108]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014768:	f7ef f99e 	bl	8003aa8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801476c:	2101      	movs	r1, #1
 801476e:	4819      	ldr	r0, [pc, #100]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014770:	f7ef f99a 	bl	8003aa8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8014774:	7ffb      	ldrb	r3, [r7, #31]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d102      	bne.n	8014780 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801477a:	7fbb      	ldrb	r3, [r7, #30]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d015      	beq.n	80147ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014784:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801478a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014790:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014796:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801479c:	9301      	str	r3, [sp, #4]
 801479e:	9200      	str	r2, [sp, #0]
 80147a0:	4623      	mov	r3, r4
 80147a2:	4602      	mov	r2, r0
 80147a4:	480b      	ldr	r0, [pc, #44]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80147a6:	f7ee ffa2 	bl	80036ee <HAL_DMA2D_BlendingStart_IT>
 80147aa:	e00f      	b.n	80147cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147b0:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147b6:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147bc:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	4603      	mov	r3, r0
 80147c6:	4803      	ldr	r0, [pc, #12]	; (80147d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80147c8:	f7ee ff5e 	bl	8003688 <HAL_DMA2D_Start_IT>
    }
}
 80147cc:	bf00      	nop
 80147ce:	372c      	adds	r7, #44	; 0x2c
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd90      	pop	{r4, r7, pc}
 80147d4:	2000ba44 	.word	0x2000ba44
 80147d8:	08421085 	.word	0x08421085
 80147dc:	04104105 	.word	0x04104105

080147e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80147e0:	b590      	push	{r4, r7, lr}
 80147e2:	b08f      	sub	sp, #60	; 0x3c
 80147e4:	af02      	add	r7, sp, #8
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80147ea:	f7f7 ffa9 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 80147ee:	4602      	mov	r2, r0
 80147f0:	6813      	ldr	r3, [r2, #0]
 80147f2:	331c      	adds	r3, #28
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4610      	mov	r0, r2
 80147f8:	4798      	blx	r3
 80147fa:	4603      	mov	r3, r0
 80147fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014804:	2b10      	cmp	r3, #16
 8014806:	d101      	bne.n	801480c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8014808:	2302      	movs	r3, #2
 801480a:	e000      	b.n	801480e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 801480c:	2301      	movs	r3, #1
 801480e:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8014810:	2300      	movs	r3, #0
 8014812:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8014814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014818:	2b10      	cmp	r3, #16
 801481a:	d149      	bne.n	80148b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	3318      	adds	r3, #24
 8014820:	4618      	mov	r0, r3
 8014822:	f7ff fd09 	bl	8014238 <_ZNK8touchgfx9colortypecvmEv>
 8014826:	4603      	mov	r3, r0
 8014828:	0adb      	lsrs	r3, r3, #11
 801482a:	f003 021f 	and.w	r2, r3, #31
 801482e:	4613      	mov	r3, r2
 8014830:	021b      	lsls	r3, r3, #8
 8014832:	1a9a      	subs	r2, r3, r2
 8014834:	4b6a      	ldr	r3, [pc, #424]	; (80149e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014836:	fba3 1302 	umull	r1, r3, r3, r2
 801483a:	1ad2      	subs	r2, r2, r3
 801483c:	0852      	lsrs	r2, r2, #1
 801483e:	4413      	add	r3, r2
 8014840:	091b      	lsrs	r3, r3, #4
 8014842:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	3318      	adds	r3, #24
 8014848:	4618      	mov	r0, r3
 801484a:	f7ff fcf5 	bl	8014238 <_ZNK8touchgfx9colortypecvmEv>
 801484e:	4603      	mov	r3, r0
 8014850:	095b      	lsrs	r3, r3, #5
 8014852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014856:	4613      	mov	r3, r2
 8014858:	021b      	lsls	r3, r3, #8
 801485a:	1a9a      	subs	r2, r3, r2
 801485c:	4b61      	ldr	r3, [pc, #388]	; (80149e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 801485e:	fba3 1302 	umull	r1, r3, r3, r2
 8014862:	1ad2      	subs	r2, r2, r3
 8014864:	0852      	lsrs	r2, r2, #1
 8014866:	4413      	add	r3, r2
 8014868:	095b      	lsrs	r3, r3, #5
 801486a:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	3318      	adds	r3, #24
 8014870:	4618      	mov	r0, r3
 8014872:	f7ff fce1 	bl	8014238 <_ZNK8touchgfx9colortypecvmEv>
 8014876:	4603      	mov	r3, r0
 8014878:	f003 021f 	and.w	r2, r3, #31
 801487c:	4613      	mov	r3, r2
 801487e:	021b      	lsls	r3, r3, #8
 8014880:	1a9a      	subs	r2, r3, r2
 8014882:	4b57      	ldr	r3, [pc, #348]	; (80149e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014884:	fba3 1302 	umull	r1, r3, r3, r2
 8014888:	1ad2      	subs	r2, r2, r3
 801488a:	0852      	lsrs	r2, r2, #1
 801488c:	4413      	add	r3, r2
 801488e:	091b      	lsrs	r3, r3, #4
 8014890:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	7f1b      	ldrb	r3, [r3, #28]
 8014896:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	061a      	lsls	r2, r3, #24
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	041b      	lsls	r3, r3, #16
 80148a0:	431a      	orrs	r2, r3
 80148a2:	69bb      	ldr	r3, [r7, #24]
 80148a4:	021b      	lsls	r3, r3, #8
 80148a6:	4313      	orrs	r3, r2
 80148a8:	697a      	ldr	r2, [r7, #20]
 80148aa:	4313      	orrs	r3, r2
 80148ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80148ae:	e00a      	b.n	80148c6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	7f1b      	ldrb	r3, [r3, #28]
 80148b4:	061b      	lsls	r3, r3, #24
 80148b6:	461a      	mov	r2, r3
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	3318      	adds	r3, #24
 80148bc:	60fb      	str	r3, [r7, #12]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	4313      	orrs	r3, r2
 80148c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	2b08      	cmp	r3, #8
 80148cc:	d103      	bne.n	80148d6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80148ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80148d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80148d4:	e003      	b.n	80148de <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80148d6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80148da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80148dc:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80148de:	4a42      	ldr	r2, [pc, #264]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80148e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e2:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80148e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148e8:	2b10      	cmp	r3, #16
 80148ea:	d101      	bne.n	80148f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 80148ec:	2302      	movs	r3, #2
 80148ee:	e000      	b.n	80148f2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 80148f0:	2301      	movs	r3, #1
 80148f2:	4a3d      	ldr	r2, [pc, #244]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80148f4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	8adb      	ldrh	r3, [r3, #22]
 80148fa:	461a      	mov	r2, r3
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	8a1b      	ldrh	r3, [r3, #16]
 8014900:	1ad3      	subs	r3, r2, r3
 8014902:	461a      	mov	r2, r3
 8014904:	4b38      	ldr	r3, [pc, #224]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014906:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801490c:	2b10      	cmp	r3, #16
 801490e:	d101      	bne.n	8014914 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8014910:	2202      	movs	r2, #2
 8014912:	e000      	b.n	8014916 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8014914:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	8adb      	ldrh	r3, [r3, #22]
 801491a:	4619      	mov	r1, r3
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	8a1b      	ldrh	r3, [r3, #16]
 8014920:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014924:	4830      	ldr	r0, [pc, #192]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014926:	f7ff fd27 	bl	8014378 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014930:	d11f      	bne.n	8014972 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014932:	4b2d      	ldr	r3, [pc, #180]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014934:	2201      	movs	r2, #1
 8014936:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014938:	4a2b      	ldr	r2, [pc, #172]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801493e:	4b2a      	ldr	r3, [pc, #168]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014940:	2209      	movs	r2, #9
 8014942:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	8adb      	ldrh	r3, [r3, #22]
 8014948:	461a      	mov	r2, r3
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	8a1b      	ldrh	r3, [r3, #16]
 801494e:	1ad3      	subs	r3, r2, r3
 8014950:	461a      	mov	r2, r3
 8014952:	4b25      	ldr	r3, [pc, #148]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014954:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801495a:	2b10      	cmp	r3, #16
 801495c:	d101      	bne.n	8014962 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 801495e:	2302      	movs	r3, #2
 8014960:	e000      	b.n	8014964 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8014962:	2301      	movs	r3, #1
 8014964:	4a20      	ldr	r2, [pc, #128]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014966:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014968:	2100      	movs	r1, #0
 801496a:	481f      	ldr	r0, [pc, #124]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801496c:	f7ef f89c 	bl	8003aa8 <HAL_DMA2D_ConfigLayer>
 8014970:	e005      	b.n	801497e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014972:	4a1d      	ldr	r2, [pc, #116]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014974:	6a3b      	ldr	r3, [r7, #32]
 8014976:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014978:	4b1b      	ldr	r3, [pc, #108]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 801497a:	2200      	movs	r2, #0
 801497c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801497e:	2101      	movs	r1, #1
 8014980:	4819      	ldr	r0, [pc, #100]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014982:	f7ef f891 	bl	8003aa8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801498c:	d115      	bne.n	80149ba <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014992:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014998:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801499e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80149a4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80149aa:	9301      	str	r3, [sp, #4]
 80149ac:	9200      	str	r2, [sp, #0]
 80149ae:	4623      	mov	r3, r4
 80149b0:	4602      	mov	r2, r0
 80149b2:	480d      	ldr	r0, [pc, #52]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80149b4:	f7ee fe9b 	bl	80036ee <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80149b8:	e00d      	b.n	80149d6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149c4:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	460b      	mov	r3, r1
 80149ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80149d0:	4805      	ldr	r0, [pc, #20]	; (80149e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80149d2:	f7ee fe59 	bl	8003688 <HAL_DMA2D_Start_IT>
}
 80149d6:	bf00      	nop
 80149d8:	3734      	adds	r7, #52	; 0x34
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd90      	pop	{r4, r7, pc}
 80149de:	bf00      	nop
 80149e0:	08421085 	.word	0x08421085
 80149e4:	04104105 	.word	0x04104105
 80149e8:	2000ba44 	.word	0x2000ba44

080149ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	4a05      	ldr	r2, [pc, #20]	; (8014a0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	601a      	str	r2, [r3, #0]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff fc27 	bl	8014250 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	4618      	mov	r0, r3
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	08029718 	.word	0x08029718

08014a10 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7ff ffe7 	bl	80149ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014a1e:	2114      	movs	r1, #20
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f010 fe41 	bl	80256a8 <_ZdlPvj>
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3708      	adds	r7, #8
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}

08014a30 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014a30:	b480      	push	{r7}
 8014a32:	b083      	sub	sp, #12
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
        texts = t;
 8014a38:	4a04      	ldr	r2, [pc, #16]	; (8014a4c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6013      	str	r3, [r2, #0]
    }
 8014a3e:	bf00      	nop
 8014a40:	370c      	adds	r7, #12
 8014a42:	46bd      	mov	sp, r7
 8014a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop
 8014a4c:	2000b408 	.word	0x2000b408

08014a50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014a50:	b480      	push	{r7}
 8014a52:	b085      	sub	sp, #20
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	60f8      	str	r0, [r7, #12]
 8014a58:	60b9      	str	r1, [r7, #8]
 8014a5a:	607a      	str	r2, [r7, #4]
 8014a5c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014a5e:	4a0b      	ldr	r2, [pc, #44]	; (8014a8c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	601a      	str	r2, [r3, #0]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	68ba      	ldr	r2, [r7, #8]
 8014a68:	605a      	str	r2, [r3, #4]
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	687a      	ldr	r2, [r7, #4]
 8014a6e:	609a      	str	r2, [r3, #8]
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	683a      	ldr	r2, [r7, #0]
 8014a74:	60da      	str	r2, [r3, #12]
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	69ba      	ldr	r2, [r7, #24]
 8014a7a:	611a      	str	r2, [r3, #16]
    {
    }
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3714      	adds	r7, #20
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop
 8014a8c:	08028c60 	.word	0x08028c60

08014a90 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014a90:	b480      	push	{r7}
 8014a92:	b083      	sub	sp, #12
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
    {
 8014a98:	4a04      	ldr	r2, [pc, #16]	; (8014aac <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	601a      	str	r2, [r3, #0]
    }
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	370c      	adds	r7, #12
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aaa:	4770      	bx	lr
 8014aac:	08028c60 	.word	0x08028c60

08014ab0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
    }
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f7ff ffe9 	bl	8014a90 <_ZN8touchgfx7MVPHeapD1Ev>
 8014abe:	2114      	movs	r1, #20
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f010 fdf1 	bl	80256a8 <_ZdlPvj>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3708      	adds	r7, #8
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014ad0:	b480      	push	{r7}
 8014ad2:	b083      	sub	sp, #12
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
    {
 8014ad8:	4a04      	ldr	r2, [pc, #16]	; (8014aec <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	601a      	str	r2, [r3, #0]
    }
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr
 8014aec:	0802a1d4 	.word	0x0802a1d4

08014af0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
    }
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f7ff ffe9 	bl	8014ad0 <_ZN8touchgfx3LCDD1Ev>
 8014afe:	2108      	movs	r1, #8
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f010 fdd1 	bl	80256a8 <_ZdlPvj>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	801a      	strh	r2, [r3, #0]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2200      	movs	r2, #0
 8014b22:	805a      	strh	r2, [r3, #2]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2200      	movs	r2, #0
 8014b28:	809a      	strh	r2, [r3, #4]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	80da      	strh	r2, [r3, #6]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	811a      	strh	r2, [r3, #8]
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	815a      	strh	r2, [r3, #10]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	819a      	strh	r2, [r3, #12]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2200      	movs	r2, #0
 8014b46:	739a      	strb	r2, [r3, #14]
        {
        }
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr

08014b56 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014b56:	b580      	push	{r7, lr}
 8014b58:	b082      	sub	sp, #8
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7ff ffd5 	bl	8014b10 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	611a      	str	r2, [r3, #16]
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	829a      	strh	r2, [r3, #20]
    {
    }
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	4618      	mov	r0, r3
 8014b76:	3708      	adds	r7, #8
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}

08014b7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b084      	sub	sp, #16
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	60f8      	str	r0, [r7, #12]
 8014b84:	60b9      	str	r1, [r7, #8]
 8014b86:	607a      	str	r2, [r7, #4]
 8014b88:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 8014b8a:	4a44      	ldr	r2, [pc, #272]	; (8014c9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	601a      	str	r2, [r3, #0]
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	68ba      	ldr	r2, [r7, #8]
 8014b94:	605a      	str	r2, [r3, #4]
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	609a      	str	r2, [r3, #8]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	683a      	ldr	r2, [r7, #0]
 8014ba0:	60da      	str	r2, [r3, #12]
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	611a      	str	r2, [r3, #16]
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	2200      	movs	r2, #0
 8014bac:	615a      	str	r2, [r3, #20]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	619a      	str	r2, [r3, #24]
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	331c      	adds	r3, #28
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff ffcc 	bl	8014b56 <_ZN8touchgfx8GesturesC1Ev>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	641a      	str	r2, [r3, #64]	; 0x40
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2201      	movs	r2, #1
 8014be2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2200      	movs	r2, #0
 8014bea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	64da      	str	r2, [r3, #76]	; 0x4c
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	3350      	adds	r3, #80	; 0x50
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7f7 fad1 	bl	800c1a0 <_ZN8touchgfx4RectC1Ev>
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2201      	movs	r2, #1
 8014c02:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	2200      	movs	r2, #0
 8014c12:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2201      	movs	r2, #1
 8014c1a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2200      	movs	r2, #0
 8014c32:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2200      	movs	r2, #0
 8014c42:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	671a      	str	r2, [r3, #112]	; 0x70
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014c54:	4a12      	ldr	r2, [pc, #72]	; (8014ca0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014c5a:	4a12      	ldr	r2, [pc, #72]	; (8014ca4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014c5c:	8b3b      	ldrh	r3, [r7, #24]
 8014c5e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014c60:	4a11      	ldr	r2, [pc, #68]	; (8014ca8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014c62:	8bbb      	ldrh	r3, [r7, #28]
 8014c64:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014c66:	4b11      	ldr	r3, [pc, #68]	; (8014cac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8014c68:	2200      	movs	r2, #0
 8014c6a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014c6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ca4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014c6e:	881a      	ldrh	r2, [r3, #0]
 8014c70:	4b0f      	ldr	r3, [pc, #60]	; (8014cb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014c72:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014c74:	4b0c      	ldr	r3, [pc, #48]	; (8014ca8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014c76:	881a      	ldrh	r2, [r3, #0]
 8014c78:	4b0e      	ldr	r3, [pc, #56]	; (8014cb4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8014c7a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014c7c:	8b3a      	ldrh	r2, [r7, #24]
 8014c7e:	8bbb      	ldrh	r3, [r7, #28]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d301      	bcc.n	8014c88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8014c84:	2200      	movs	r2, #0
 8014c86:	e000      	b.n	8014c8a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8014c88:	2201      	movs	r2, #1
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	4618      	mov	r0, r3
 8014c94:	3710      	adds	r7, #16
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}
 8014c9a:	bf00      	nop
 8014c9c:	08029284 	.word	0x08029284
 8014ca0:	2000b36c 	.word	0x2000b36c
 8014ca4:	2000b360 	.word	0x2000b360
 8014ca8:	2000b362 	.word	0x2000b362
 8014cac:	2000b364 	.word	0x2000b364
 8014cb0:	2000b366 	.word	0x2000b366
 8014cb4:	2000b368 	.word	0x2000b368

08014cb8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7f7 feff 	bl	800cac8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8014cca:	bf00      	nop
 8014ccc:	3708      	adds	r7, #8
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
	...

08014cd4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b086      	sub	sp, #24
 8014cd8:	af02      	add	r7, sp, #8
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	607a      	str	r2, [r7, #4]
 8014ce0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	69bb      	ldr	r3, [r7, #24]
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	687a      	ldr	r2, [r7, #4]
 8014cec:	68b9      	ldr	r1, [r7, #8]
 8014cee:	f7ff feaf 	bl	8014a50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014cf2:	4a04      	ldr	r2, [pc, #16]	; (8014d04 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	601a      	str	r2, [r3, #0]
    {

    }
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3710      	adds	r7, #16
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
 8014d02:	bf00      	nop
 8014d04:	08028c4c 	.word	0x08028c4c

08014d08 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	4801      	ldr	r0, [pc, #4]	; (8014d14 <__tcf_0+0xc>)
 8014d0e:	f000 f951 	bl	8014fb4 <_ZN12FrontendHeapD1Ev>
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	20008624 	.word	0x20008624

08014d18 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014d1c:	4b08      	ldr	r3, [pc, #32]	; (8014d40 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	f003 0301 	and.w	r3, r3, #1
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d108      	bne.n	8014d3a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8014d28:	4806      	ldr	r0, [pc, #24]	; (8014d44 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8014d2a:	f000 f867 	bl	8014dfc <_ZN12FrontendHeapC1Ev>
 8014d2e:	4b04      	ldr	r3, [pc, #16]	; (8014d40 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014d30:	2201      	movs	r2, #1
 8014d32:	601a      	str	r2, [r3, #0]
 8014d34:	4804      	ldr	r0, [pc, #16]	; (8014d48 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8014d36:	f010 fd01 	bl	802573c <atexit>
        return instance;
 8014d3a:	4b02      	ldr	r3, [pc, #8]	; (8014d44 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	bd80      	pop	{r7, pc}
 8014d40:	2000a660 	.word	0x2000a660
 8014d44:	20008624 	.word	0x20008624
 8014d48:	08014d09 	.word	0x08014d09

08014d4c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b082      	sub	sp, #8
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	4a05      	ldr	r2, [pc, #20]	; (8014d6c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	601a      	str	r2, [r3, #0]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7ff fe97 	bl	8014a90 <_ZN8touchgfx7MVPHeapD1Ev>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	4618      	mov	r0, r3
 8014d66:	3708      	adds	r7, #8
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	08028c4c 	.word	0x08028c4c

08014d70 <_ZN16FrontendHeapBaseD0Ev>:
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f7ff ffe7 	bl	8014d4c <_ZN16FrontendHeapBaseD1Ev>
 8014d7e:	2114      	movs	r1, #20
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f010 fc91 	bl	80256a8 <_ZdlPvj>
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f000 fd72 	bl	8015884 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014da0:	4a03      	ldr	r2, [pc, #12]	; (8014db0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	601a      	str	r2, [r3, #0]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	4618      	mov	r0, r3
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	08028c18 	.word	0x08028c18

08014db4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b082      	sub	sp, #8
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f000 fd60 	bl	8015884 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014dc4:	4a03      	ldr	r2, [pc, #12]	; (8014dd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	601a      	str	r2, [r3, #0]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	08028be4 	.word	0x08028be4

08014dd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	4618      	mov	r0, r3
 8014de4:	f000 fd4e 	bl	8015884 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014de8:	4a03      	ldr	r2, [pc, #12]	; (8014df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	601a      	str	r2, [r3, #0]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	4618      	mov	r0, r3
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	08028bb0 	.word	0x08028bb0

08014dfc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014dfc:	b5b0      	push	{r4, r5, r7, lr}
 8014dfe:	b084      	sub	sp, #16
 8014e00:	af02      	add	r7, sp, #8
 8014e02:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f103 0414 	add.w	r4, r3, #20
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	f641 6284 	movw	r2, #7812	; 0x1e84
 8014e18:	441a      	add	r2, r3
 8014e1a:	6879      	ldr	r1, [r7, #4]
 8014e1c:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014e20:	440b      	add	r3, r1
 8014e22:	9300      	str	r3, [sp, #0]
 8014e24:	4613      	mov	r3, r2
 8014e26:	462a      	mov	r2, r5
 8014e28:	4621      	mov	r1, r4
 8014e2a:	f7ff ff53 	bl	8014cd4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014e2e:	4a19      	ldr	r2, [pc, #100]	; (8014e94 <_ZN12FrontendHeapC1Ev+0x98>)
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	601a      	str	r2, [r3, #0]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	3314      	adds	r3, #20
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7ff ffa9 	bl	8014d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	332c      	adds	r3, #44	; 0x2c
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7ff ffb6 	bl	8014db4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	f641 6384 	movw	r3, #7812	; 0x1e84
 8014e4e:	4413      	add	r3, r2
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ff ffc1 	bl	8014dd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7fd ffc5 	bl	8012dec <_ZN5ModelC1Ev>
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014e68:	4413      	add	r3, r2
 8014e6a:	687a      	ldr	r2, [r7, #4]
 8014e6c:	f502 51f7 	add.w	r1, r2, #7904	; 0x1ee0
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	4618      	mov	r0, r3
 8014e74:	f7fd fdae 	bl	80129d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014e80:	4413      	add	r3, r2
 8014e82:	4619      	mov	r1, r3
 8014e84:	f7ff ff18 	bl	8014cb8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bdb0      	pop	{r4, r5, r7, pc}
 8014e92:	bf00      	nop
 8014e94:	08028b9c 	.word	0x08028b9c

08014e98 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b086      	sub	sp, #24
 8014e9c:	af02      	add	r7, sp, #8
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	60b9      	str	r1, [r7, #8]
 8014ea2:	607a      	str	r2, [r7, #4]
 8014ea4:	603b      	str	r3, [r7, #0]
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	8bbb      	ldrh	r3, [r7, #28]
 8014eaa:	9301      	str	r3, [sp, #4]
 8014eac:	8b3b      	ldrh	r3, [r7, #24]
 8014eae:	9300      	str	r3, [sp, #0]
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	68b9      	ldr	r1, [r7, #8]
 8014eb6:	f7ff fe61 	bl	8014b7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014eba:	4a04      	ldr	r2, [pc, #16]	; (8014ecc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	601a      	str	r2, [r3, #0]
    }
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3710      	adds	r7, #16
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	08028c70 	.word	0x08028c70

08014ed0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b086      	sub	sp, #24
 8014ed4:	af02      	add	r7, sp, #8
 8014ed6:	60f8      	str	r0, [r7, #12]
 8014ed8:	60b9      	str	r1, [r7, #8]
 8014eda:	607a      	str	r2, [r7, #4]
 8014edc:	603b      	str	r3, [r7, #0]
 8014ede:	68f8      	ldr	r0, [r7, #12]
 8014ee0:	8bbb      	ldrh	r3, [r7, #28]
 8014ee2:	9301      	str	r3, [sp, #4]
 8014ee4:	8b3b      	ldrh	r3, [r7, #24]
 8014ee6:	9300      	str	r3, [sp, #0]
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	68b9      	ldr	r1, [r7, #8]
 8014eee:	f7ff ffd3 	bl	8014e98 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014ef2:	4a04      	ldr	r2, [pc, #16]	; (8014f04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	601a      	str	r2, [r3, #0]
    }
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	4618      	mov	r0, r3
 8014efc:	3710      	adds	r7, #16
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	0802895c 	.word	0x0802895c

08014f08 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014f08:	b480      	push	{r7}
 8014f0a:	b083      	sub	sp, #12
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	4a04      	ldr	r2, [pc, #16]	; (8014f24 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	601a      	str	r2, [r3, #0]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	370c      	adds	r7, #12
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f22:	4770      	bx	lr
 8014f24:	08028944 	.word	0x08028944

08014f28 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7ff ffe8 	bl	8014f08 <_ZN8touchgfx15TouchControllerC1Ev>
 8014f38:	4a03      	ldr	r2, [pc, #12]	; (8014f48 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	601a      	str	r2, [r3, #0]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	4618      	mov	r0, r3
 8014f42:	3708      	adds	r7, #8
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	0802892c 	.word	0x0802892c

08014f4c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8014f4c:	b590      	push	{r4, r7, lr}
 8014f4e:	b085      	sub	sp, #20
 8014f50:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014f52:	f7fd fb11 	bl	8012578 <_ZN14BitmapDatabase11getInstanceEv>
 8014f56:	4604      	mov	r4, r0
 8014f58:	f7fd fb18 	bl	801258c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	4619      	mov	r1, r3
 8014f60:	2300      	movs	r3, #0
 8014f62:	9300      	str	r3, [sp, #0]
 8014f64:	2300      	movs	r3, #0
 8014f66:	2200      	movs	r2, #0
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f006 fd67 	bl	801ba3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8014f6e:	4809      	ldr	r0, [pc, #36]	; (8014f94 <touchgfx_init+0x48>)
 8014f70:	f7ff fd5e 	bl	8014a30 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014f74:	2000      	movs	r0, #0
 8014f76:	f7fd fc41 	bl	80127fc <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014f7a:	4807      	ldr	r0, [pc, #28]	; (8014f98 <touchgfx_init+0x4c>)
 8014f7c:	f006 fca8 	bl	801b8d0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014f80:	f7ff feca 	bl	8014d18 <_ZN12FrontendHeap11getInstanceEv>
 8014f84:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014f86:	4805      	ldr	r0, [pc, #20]	; (8014f9c <touchgfx_init+0x50>)
 8014f88:	f7fe ffd4 	bl	8013f34 <_ZN11TouchGFXHAL10initializeEv>
}
 8014f8c:	bf00      	nop
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd90      	pop	{r4, r7, pc}
 8014f94:	2000b2e0 	.word	0x2000b2e0
 8014f98:	2000003c 	.word	0x2000003c
 8014f9c:	2000b2e4 	.word	0x2000b2e4

08014fa0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014fa4:	4802      	ldr	r0, [pc, #8]	; (8014fb0 <touchgfx_taskEntry+0x10>)
 8014fa6:	f000 fe80 	bl	8015caa <_ZN8touchgfx3HAL9taskEntryEv>
}
 8014faa:	bf00      	nop
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	2000b2e4 	.word	0x2000b2e4

08014fb4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	4a11      	ldr	r2, [pc, #68]	; (8015004 <_ZN12FrontendHeapD1Ev+0x50>)
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	601a      	str	r2, [r3, #0]
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014fc8:	4413      	add	r3, r2
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7fd fccc 	bl	8012968 <_ZN19FrontendApplicationD1Ev>
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	f641 6384 	movw	r3, #7812	; 0x1e84
 8014fd6:	4413      	add	r3, r2
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f000 f827 	bl	801502c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	332c      	adds	r3, #44	; 0x2c
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f000 f844 	bl	8015070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	3314      	adds	r3, #20
 8014fec:	4618      	mov	r0, r3
 8014fee:	f000 f863 	bl	80150b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7ff fea9 	bl	8014d4c <_ZN16FrontendHeapBaseD1Ev>
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3708      	adds	r7, #8
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	08028b9c 	.word	0x08028b9c

08015008 <_ZN12FrontendHeapD0Ev>:
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7ff ffcf 	bl	8014fb4 <_ZN12FrontendHeapD1Ev>
 8015016:	f242 013c 	movw	r1, #8252	; 0x203c
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f010 fb44 	bl	80256a8 <_ZdlPvj>
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	4618      	mov	r0, r3
 8015024:	3708      	adds	r7, #8
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
	...

0801502c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	4a05      	ldr	r2, [pc, #20]	; (801504c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	601a      	str	r2, [r3, #0]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	4618      	mov	r0, r3
 801503e:	f000 fc1f 	bl	8015880 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	08028bb0 	.word	0x08028bb0

08015050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7ff ffe7 	bl	801502c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801505e:	215c      	movs	r1, #92	; 0x5c
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f010 fb21 	bl	80256a8 <_ZdlPvj>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	4a05      	ldr	r2, [pc, #20]	; (8015090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	601a      	str	r2, [r3, #0]
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	4618      	mov	r0, r3
 8015082:	f000 fbfd 	bl	8015880 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4618      	mov	r0, r3
 801508a:	3708      	adds	r7, #8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	08028be4 	.word	0x08028be4

08015094 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f7ff ffe7 	bl	8015070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80150a2:	f641 6158 	movw	r1, #7768	; 0x1e58
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f010 fafe 	bl	80256a8 <_ZdlPvj>
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	4618      	mov	r0, r3
 80150b0:	3708      	adds	r7, #8
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
	...

080150b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	4a05      	ldr	r2, [pc, #20]	; (80150d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	601a      	str	r2, [r3, #0]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	4618      	mov	r0, r3
 80150ca:	f000 fbd9 	bl	8015880 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	4618      	mov	r0, r3
 80150d2:	3708      	adds	r7, #8
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	08028c18 	.word	0x08028c18

080150dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f7ff ffe7 	bl	80150b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80150ea:	2118      	movs	r1, #24
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f010 fadb 	bl	80256a8 <_ZdlPvj>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4618      	mov	r0, r3
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	4a05      	ldr	r2, [pc, #20]	; (801511c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	601a      	str	r2, [r3, #0]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	4618      	mov	r0, r3
 801510e:	f7ff fcdf 	bl	8014ad0 <_ZN8touchgfx3LCDD1Ev>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	4618      	mov	r0, r3
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	0802b2a8 	.word	0x0802b2a8

08015120 <_ZN8touchgfx8LCD24bppD0Ev>:
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7ff ffe7 	bl	80150fc <_ZN8touchgfx8LCD24bppD1Ev>
 801512e:	2158      	movs	r1, #88	; 0x58
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f010 fab9 	bl	80256a8 <_ZdlPvj>
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	4618      	mov	r0, r3
 801513a:	3708      	adds	r7, #8
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <_Z41__static_initialization_and_destruction_0ii>:
 8015140:	b580      	push	{r7, lr}
 8015142:	b084      	sub	sp, #16
 8015144:	af02      	add	r7, sp, #8
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	6039      	str	r1, [r7, #0]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2b01      	cmp	r3, #1
 801514e:	d119      	bne.n	8015184 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015156:	4293      	cmp	r3, r2
 8015158:	d114      	bne.n	8015184 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801515a:	4818      	ldr	r0, [pc, #96]	; (80151bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801515c:	f7ff fee4 	bl	8014f28 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8015160:	4817      	ldr	r0, [pc, #92]	; (80151c0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015162:	f7ff f963 	bl	801442c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8015166:	4817      	ldr	r0, [pc, #92]	; (80151c4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015168:	f008 fe56 	bl	801de18 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801516c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015170:	9301      	str	r3, [sp, #4]
 8015172:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015176:	9300      	str	r3, [sp, #0]
 8015178:	4b10      	ldr	r3, [pc, #64]	; (80151bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801517a:	4a12      	ldr	r2, [pc, #72]	; (80151c4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801517c:	4910      	ldr	r1, [pc, #64]	; (80151c0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801517e:	4812      	ldr	r0, [pc, #72]	; (80151c8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015180:	f7ff fea6 	bl	8014ed0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d113      	bne.n	80151b2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015190:	4293      	cmp	r3, r2
 8015192:	d10e      	bne.n	80151b2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015194:	480c      	ldr	r0, [pc, #48]	; (80151c8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015196:	f7fe ff45 	bl	8014024 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801519a:	480c      	ldr	r0, [pc, #48]	; (80151cc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801519c:	f7f6 fcee 	bl	800bb7c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80151a0:	4808      	ldr	r0, [pc, #32]	; (80151c4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80151a2:	f7ff ffab 	bl	80150fc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80151a6:	4806      	ldr	r0, [pc, #24]	; (80151c0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80151a8:	f7ff f96a 	bl	8014480 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80151ac:	4803      	ldr	r0, [pc, #12]	; (80151bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80151ae:	f7fe fc9d 	bl	8013aec <_ZN20STM32TouchControllerD1Ev>
}
 80151b2:	bf00      	nop
 80151b4:	3708      	adds	r7, #8
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	2000a664 	.word	0x2000a664
 80151c0:	2000a668 	.word	0x2000a668
 80151c4:	2000b288 	.word	0x2000b288
 80151c8:	2000b2e4 	.word	0x2000b2e4
 80151cc:	2000003c 	.word	0x2000003c

080151d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80151d8:	2301      	movs	r3, #1
    }
 80151da:	4618      	mov	r0, r3
 80151dc:	370c      	adds	r7, #12
 80151de:	46bd      	mov	sp, r7
 80151e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e4:	4770      	bx	lr

080151e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 80151e6:	b480      	push	{r7}
 80151e8:	b083      	sub	sp, #12
 80151ea:	af00      	add	r7, sp, #0
 80151ec:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80151ee:	2354      	movs	r3, #84	; 0x54
    }
 80151f0:	4618      	mov	r0, r3
 80151f2:	370c      	adds	r7, #12
 80151f4:	46bd      	mov	sp, r7
 80151f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fa:	4770      	bx	lr

080151fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 80151fc:	b480      	push	{r7}
 80151fe:	b083      	sub	sp, #12
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	460b      	mov	r3, r1
 8015206:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015208:	887b      	ldrh	r3, [r7, #2]
 801520a:	2254      	movs	r2, #84	; 0x54
 801520c:	fb02 f303 	mul.w	r3, r2, r3
 8015210:	3308      	adds	r3, #8
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	4413      	add	r3, r2
    }
 8015216:	4618      	mov	r0, r3
 8015218:	370c      	adds	r7, #12
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr

08015222 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 8015222:	b480      	push	{r7}
 8015224:	b083      	sub	sp, #12
 8015226:	af00      	add	r7, sp, #0
 8015228:	6078      	str	r0, [r7, #4]
 801522a:	460b      	mov	r3, r1
 801522c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801522e:	887b      	ldrh	r3, [r7, #2]
 8015230:	2254      	movs	r2, #84	; 0x54
 8015232:	fb02 f303 	mul.w	r3, r2, r3
 8015236:	3308      	adds	r3, #8
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	4413      	add	r3, r2
    }
 801523c:	4618      	mov	r0, r3
 801523e:	370c      	adds	r7, #12
 8015240:	46bd      	mov	sp, r7
 8015242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015246:	4770      	bx	lr

08015248 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015248:	b480      	push	{r7}
 801524a:	b083      	sub	sp, #12
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015250:	2301      	movs	r3, #1
    }
 8015252:	4618      	mov	r0, r3
 8015254:	370c      	adds	r7, #12
 8015256:	46bd      	mov	sp, r7
 8015258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525c:	4770      	bx	lr

0801525e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801525e:	b480      	push	{r7}
 8015260:	b083      	sub	sp, #12
 8015262:	af00      	add	r7, sp, #0
 8015264:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015266:	f641 6350 	movw	r3, #7760	; 0x1e50
    }
 801526a:	4618      	mov	r0, r3
 801526c:	370c      	adds	r7, #12
 801526e:	46bd      	mov	sp, r7
 8015270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015274:	4770      	bx	lr

08015276 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015276:	b480      	push	{r7}
 8015278:	b083      	sub	sp, #12
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
 801527e:	460b      	mov	r3, r1
 8015280:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015282:	887b      	ldrh	r3, [r7, #2]
 8015284:	f641 6250 	movw	r2, #7760	; 0x1e50
 8015288:	fb02 f303 	mul.w	r3, r2, r3
 801528c:	3308      	adds	r3, #8
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	4413      	add	r3, r2
    }
 8015292:	4618      	mov	r0, r3
 8015294:	370c      	adds	r7, #12
 8015296:	46bd      	mov	sp, r7
 8015298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529c:	4770      	bx	lr

0801529e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801529e:	b480      	push	{r7}
 80152a0:	b083      	sub	sp, #12
 80152a2:	af00      	add	r7, sp, #0
 80152a4:	6078      	str	r0, [r7, #4]
 80152a6:	460b      	mov	r3, r1
 80152a8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80152aa:	887b      	ldrh	r3, [r7, #2]
 80152ac:	f641 6250 	movw	r2, #7760	; 0x1e50
 80152b0:	fb02 f303 	mul.w	r3, r2, r3
 80152b4:	3308      	adds	r3, #8
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	4413      	add	r3, r2
    }
 80152ba:	4618      	mov	r0, r3
 80152bc:	370c      	adds	r7, #12
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr

080152c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80152c6:	b480      	push	{r7}
 80152c8:	b083      	sub	sp, #12
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80152ce:	2301      	movs	r3, #1
    }
 80152d0:	4618      	mov	r0, r3
 80152d2:	370c      	adds	r7, #12
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr

080152dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80152dc:	b480      	push	{r7}
 80152de:	b083      	sub	sp, #12
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80152e4:	2310      	movs	r3, #16
    }
 80152e6:	4618      	mov	r0, r3
 80152e8:	370c      	adds	r7, #12
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80152f2:	b480      	push	{r7}
 80152f4:	b083      	sub	sp, #12
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	460b      	mov	r3, r1
 80152fc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80152fe:	887b      	ldrh	r3, [r7, #2]
 8015300:	011b      	lsls	r3, r3, #4
 8015302:	3308      	adds	r3, #8
 8015304:	687a      	ldr	r2, [r7, #4]
 8015306:	4413      	add	r3, r2
    }
 8015308:	4618      	mov	r0, r3
 801530a:	370c      	adds	r7, #12
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015314:	b480      	push	{r7}
 8015316:	b083      	sub	sp, #12
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	460b      	mov	r3, r1
 801531e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015320:	887b      	ldrh	r3, [r7, #2]
 8015322:	011b      	lsls	r3, r3, #4
 8015324:	3308      	adds	r3, #8
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	4413      	add	r3, r2
    }
 801532a:	4618      	mov	r0, r3
 801532c:	370c      	adds	r7, #12
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <_GLOBAL__sub_I_touchgfx_init>:
 8015336:	b580      	push	{r7, lr}
 8015338:	af00      	add	r7, sp, #0
 801533a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801533e:	2001      	movs	r0, #1
 8015340:	f7ff fefe 	bl	8015140 <_Z41__static_initialization_and_destruction_0ii>
 8015344:	bd80      	pop	{r7, pc}

08015346 <_GLOBAL__sub_D_touchgfx_init>:
 8015346:	b580      	push	{r7, lr}
 8015348:	af00      	add	r7, sp, #0
 801534a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801534e:	2000      	movs	r0, #0
 8015350:	f7ff fef6 	bl	8015140 <_Z41__static_initialization_and_destruction_0ii>
 8015354:	bd80      	pop	{r7, pc}

08015356 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8015356:	b580      	push	{r7, lr}
 8015358:	b082      	sub	sp, #8
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	3318      	adds	r3, #24
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	4798      	blx	r3
    }
 801536a:	bf00      	nop
 801536c:	3708      	adds	r7, #8
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8015372:	b480      	push	{r7}
 8015374:	b083      	sub	sp, #12
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
 801537a:	460b      	mov	r3, r1
 801537c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	78fa      	ldrb	r2, [r7, #3]
 8015382:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8015386:	bf00      	nop
 8015388:	370c      	adds	r7, #12
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr

08015392 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015392:	b480      	push	{r7}
 8015394:	b083      	sub	sp, #12
 8015396:	af00      	add	r7, sp, #0
 8015398:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80153a0:	3301      	adds	r3, #1
 80153a2:	b2da      	uxtb	r2, r3
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80153aa:	bf00      	nop
 80153ac:	370c      	adds	r7, #12
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
	...

080153b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	460b      	mov	r3, r1
 80153c2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80153c4:	78fb      	ldrb	r3, [r7, #3]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d002      	beq.n	80153d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80153ca:	78fb      	ldrb	r3, [r7, #3]
 80153cc:	2b02      	cmp	r3, #2
 80153ce:	d105      	bne.n	80153dc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	78fa      	ldrb	r2, [r7, #3]
 80153d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80153d8:	2301      	movs	r3, #1
 80153da:	e027      	b.n	801542c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80153dc:	78fb      	ldrb	r3, [r7, #3]
 80153de:	2b01      	cmp	r3, #1
 80153e0:	d123      	bne.n	801542a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d014      	beq.n	8015414 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	3380      	adds	r3, #128	; 0x80
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	4798      	blx	r3
 80153f6:	4603      	mov	r3, r0
 80153f8:	461a      	mov	r2, r3
 80153fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153fe:	429a      	cmp	r2, r3
 8015400:	d008      	beq.n	8015414 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015402:	4b0c      	ldr	r3, [pc, #48]	; (8015434 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8015404:	781b      	ldrb	r3, [r3, #0]
 8015406:	f083 0301 	eor.w	r3, r3, #1
 801540a:	b2db      	uxtb	r3, r3
 801540c:	2b00      	cmp	r3, #0
 801540e:	d001      	beq.n	8015414 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015410:	2301      	movs	r3, #1
 8015412:	e000      	b.n	8015416 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8015414:	2300      	movs	r3, #0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d005      	beq.n	8015426 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	78fa      	ldrb	r2, [r7, #3]
 801541e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8015422:	2301      	movs	r3, #1
 8015424:	e002      	b.n	801542c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8015426:	2300      	movs	r3, #0
 8015428:	e000      	b.n	801542c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801542a:	2300      	movs	r3, #0
    }
 801542c:	4618      	mov	r0, r3
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	2000b36a 	.word	0x2000b36a

08015438 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8015438:	b480      	push	{r7}
 801543a:	b083      	sub	sp, #12
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	683a      	ldr	r2, [r7, #0]
 8015446:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015448:	bf00      	nop
 801544a:	370c      	adds	r7, #12
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr

08015454 <__NVIC_EnableIRQ>:
{
 8015454:	b480      	push	{r7}
 8015456:	b083      	sub	sp, #12
 8015458:	af00      	add	r7, sp, #0
 801545a:	4603      	mov	r3, r0
 801545c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015462:	2b00      	cmp	r3, #0
 8015464:	db0d      	blt.n	8015482 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801546a:	b2db      	uxtb	r3, r3
 801546c:	f003 021f 	and.w	r2, r3, #31
 8015470:	4907      	ldr	r1, [pc, #28]	; (8015490 <__NVIC_EnableIRQ+0x3c>)
 8015472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015476:	095b      	lsrs	r3, r3, #5
 8015478:	2001      	movs	r0, #1
 801547a:	fa00 f202 	lsl.w	r2, r0, r2
 801547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015482:	bf00      	nop
 8015484:	370c      	adds	r7, #12
 8015486:	46bd      	mov	sp, r7
 8015488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548c:	4770      	bx	lr
 801548e:	bf00      	nop
 8015490:	e000e100 	.word	0xe000e100

08015494 <__NVIC_DisableIRQ>:
{
 8015494:	b480      	push	{r7}
 8015496:	b083      	sub	sp, #12
 8015498:	af00      	add	r7, sp, #0
 801549a:	4603      	mov	r3, r0
 801549c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	db12      	blt.n	80154cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80154a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154aa:	b2db      	uxtb	r3, r3
 80154ac:	f003 021f 	and.w	r2, r3, #31
 80154b0:	4909      	ldr	r1, [pc, #36]	; (80154d8 <__NVIC_DisableIRQ+0x44>)
 80154b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154b6:	095b      	lsrs	r3, r3, #5
 80154b8:	2001      	movs	r0, #1
 80154ba:	fa00 f202 	lsl.w	r2, r0, r2
 80154be:	3320      	adds	r3, #32
 80154c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80154c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80154c8:	f3bf 8f6f 	isb	sy
}
 80154cc:	bf00      	nop
 80154ce:	370c      	adds	r7, #12
 80154d0:	46bd      	mov	sp, r7
 80154d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d6:	4770      	bx	lr
 80154d8:	e000e100 	.word	0xe000e100

080154dc <__NVIC_SetPriority>:
{
 80154dc:	b480      	push	{r7}
 80154de:	b083      	sub	sp, #12
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	4603      	mov	r3, r0
 80154e4:	6039      	str	r1, [r7, #0]
 80154e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80154e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	db0c      	blt.n	801550a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	b2db      	uxtb	r3, r3
 80154f4:	4a0e      	ldr	r2, [pc, #56]	; (8015530 <__NVIC_SetPriority+0x54>)
 80154f6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80154fa:	4608      	mov	r0, r1
 80154fc:	011b      	lsls	r3, r3, #4
 80154fe:	b2d9      	uxtb	r1, r3
 8015500:	1813      	adds	r3, r2, r0
 8015502:	460a      	mov	r2, r1
 8015504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015508:	e00c      	b.n	8015524 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	b2da      	uxtb	r2, r3
 801550e:	4909      	ldr	r1, [pc, #36]	; (8015534 <__NVIC_SetPriority+0x58>)
 8015510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015514:	b2db      	uxtb	r3, r3
 8015516:	f003 030f 	and.w	r3, r3, #15
 801551a:	3b04      	subs	r3, #4
 801551c:	0112      	lsls	r2, r2, #4
 801551e:	b2d2      	uxtb	r2, r2
 8015520:	440b      	add	r3, r1
 8015522:	761a      	strb	r2, [r3, #24]
}
 8015524:	bf00      	nop
 8015526:	370c      	adds	r7, #12
 8015528:	46bd      	mov	sp, r7
 801552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552e:	4770      	bx	lr
 8015530:	e000e100 	.word	0xe000e100
 8015534:	e000ed00 	.word	0xe000ed00

08015538 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015538:	b5b0      	push	{r4, r5, r7, lr}
 801553a:	b082      	sub	sp, #8
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	4618      	mov	r0, r3
 8015544:	f000 fe76 	bl	8016234 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8015548:	687d      	ldr	r5, [r7, #4]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	334c      	adds	r3, #76	; 0x4c
 8015550:	681c      	ldr	r4, [r3, #0]
 8015552:	f003 ff55 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8015556:	4603      	mov	r3, r0
 8015558:	4619      	mov	r1, r3
 801555a:	4628      	mov	r0, r5
 801555c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	490d      	ldr	r1, [pc, #52]	; (8015598 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8015562:	4618      	mov	r0, r3
 8015564:	f7ff ff68 	bl	8015438 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2101      	movs	r1, #1
 801556c:	4618      	mov	r0, r3
 801556e:	f7ff ff23 	bl	80153b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	3374      	adds	r3, #116	; 0x74
 801557a:	681c      	ldr	r4, [r3, #0]
 801557c:	2300      	movs	r3, #0
 801557e:	2200      	movs	r2, #0
 8015580:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8015584:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2101      	movs	r1, #1
 801558a:	4618      	mov	r0, r3
 801558c:	f7ff fef1 	bl	8015372 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8015590:	bf00      	nop
 8015592:	3708      	adds	r7, #8
 8015594:	46bd      	mov	sp, r7
 8015596:	bdb0      	pop	{r4, r5, r7, pc}
 8015598:	08014179 	.word	0x08014179

0801559c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80155a4:	2109      	movs	r1, #9
 80155a6:	205a      	movs	r0, #90	; 0x5a
 80155a8:	f7ff ff98 	bl	80154dc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80155ac:	2109      	movs	r1, #9
 80155ae:	2058      	movs	r0, #88	; 0x58
 80155b0:	f7ff ff94 	bl	80154dc <__NVIC_SetPriority>
}
 80155b4:	bf00      	nop
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80155c4:	205a      	movs	r0, #90	; 0x5a
 80155c6:	f7ff ff45 	bl	8015454 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80155ca:	2058      	movs	r0, #88	; 0x58
 80155cc:	f7ff ff42 	bl	8015454 <__NVIC_EnableIRQ>
}
 80155d0:	bf00      	nop
 80155d2:	3708      	adds	r7, #8
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80155e0:	205a      	movs	r0, #90	; 0x5a
 80155e2:	f7ff ff57 	bl	8015494 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80155e6:	2058      	movs	r0, #88	; 0x58
 80155e8:	f7ff ff54 	bl	8015494 <__NVIC_DisableIRQ>
}
 80155ec:	bf00      	nop
 80155ee:	3708      	adds	r7, #8
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80155f4:	b480      	push	{r7}
 80155f6:	b083      	sub	sp, #12
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80155fc:	4b11      	ldr	r3, [pc, #68]	; (8015644 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	b29b      	uxth	r3, r3
 8015602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015606:	b29b      	uxth	r3, r3
 8015608:	3b01      	subs	r3, #1
 801560a:	b29a      	uxth	r2, r3
 801560c:	4b0e      	ldr	r3, [pc, #56]	; (8015648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801560e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015610:	4b0c      	ldr	r3, [pc, #48]	; (8015644 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015612:	691b      	ldr	r3, [r3, #16]
 8015614:	b29b      	uxth	r3, r3
 8015616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801561a:	b29b      	uxth	r3, r3
 801561c:	3b01      	subs	r3, #1
 801561e:	b29a      	uxth	r2, r3
 8015620:	4b0a      	ldr	r3, [pc, #40]	; (801564c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8015622:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015624:	4b08      	ldr	r3, [pc, #32]	; (8015648 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015626:	881a      	ldrh	r2, [r3, #0]
 8015628:	4b06      	ldr	r3, [pc, #24]	; (8015644 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801562a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801562c:	4b05      	ldr	r3, [pc, #20]	; (8015644 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015630:	4a04      	ldr	r2, [pc, #16]	; (8015644 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015632:	f043 0301 	orr.w	r3, r3, #1
 8015636:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015638:	bf00      	nop
 801563a:	370c      	adds	r7, #12
 801563c:	46bd      	mov	sp, r7
 801563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015642:	4770      	bx	lr
 8015644:	40016800 	.word	0x40016800
 8015648:	2000b35c 	.word	0x2000b35c
 801564c:	2000b35e 	.word	0x2000b35e

08015650 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015650:	b480      	push	{r7}
 8015652:	b083      	sub	sp, #12
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015658:	4b03      	ldr	r3, [pc, #12]	; (8015668 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801565c:	4618      	mov	r0, r3
 801565e:	370c      	adds	r7, #12
 8015660:	46bd      	mov	sp, r7
 8015662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015666:	4770      	bx	lr
 8015668:	40016884 	.word	0x40016884

0801566c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801566c:	b480      	push	{r7}
 801566e:	b083      	sub	sp, #12
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015676:	4a06      	ldr	r2, [pc, #24]	; (8015690 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801567c:	4b05      	ldr	r3, [pc, #20]	; (8015694 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801567e:	2201      	movs	r2, #1
 8015680:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015682:	bf00      	nop
 8015684:	370c      	adds	r7, #12
 8015686:	46bd      	mov	sp, r7
 8015688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568c:	4770      	bx	lr
 801568e:	bf00      	nop
 8015690:	40016884 	.word	0x40016884
 8015694:	40016800 	.word	0x40016800

08015698 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6839      	ldr	r1, [r7, #0]
 80156a6:	4618      	mov	r0, r3
 80156a8:	f000 fad5 	bl	8015c56 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80156ac:	bf00      	nop
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80156b4:	b480      	push	{r7}
 80156b6:	b085      	sub	sp, #20
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80156bc:	4b0d      	ldr	r3, [pc, #52]	; (80156f4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80156be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156c0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80156c2:	4b0c      	ldr	r3, [pc, #48]	; (80156f4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80156c4:	68db      	ldr	r3, [r3, #12]
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	3301      	adds	r3, #1
 80156d0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80156d2:	89fa      	ldrh	r2, [r7, #14]
 80156d4:	89bb      	ldrh	r3, [r7, #12]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d201      	bcs.n	80156de <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80156da:	2300      	movs	r3, #0
 80156dc:	e003      	b.n	80156e6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80156de:	89fa      	ldrh	r2, [r7, #14]
 80156e0:	89bb      	ldrh	r3, [r7, #12]
 80156e2:	1ad3      	subs	r3, r2, r3
 80156e4:	b29b      	uxth	r3, r3
    }
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3714      	adds	r7, #20
 80156ea:	46bd      	mov	sp, r7
 80156ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	40016800 	.word	0x40016800

080156f8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015700:	4b1a      	ldr	r3, [pc, #104]	; (801576c <HAL_LTDC_LineEventCallback+0x74>)
 8015702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015704:	4a1a      	ldr	r2, [pc, #104]	; (8015770 <HAL_LTDC_LineEventCallback+0x78>)
 8015706:	8812      	ldrh	r2, [r2, #0]
 8015708:	4293      	cmp	r3, r2
 801570a:	bf0c      	ite	eq
 801570c:	2301      	moveq	r3, #1
 801570e:	2300      	movne	r3, #0
 8015710:	b2db      	uxtb	r3, r3
 8015712:	2b00      	cmp	r3, #0
 8015714:	d017      	beq.n	8015746 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015716:	4b17      	ldr	r3, [pc, #92]	; (8015774 <HAL_LTDC_LineEventCallback+0x7c>)
 8015718:	881b      	ldrh	r3, [r3, #0]
 801571a:	4619      	mov	r1, r3
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7ef fd35 	bl	800518c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015722:	f7f7 f801 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 8015726:	4603      	mov	r3, r0
 8015728:	4618      	mov	r0, r3
 801572a:	f7ff fe32 	bl	8015392 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801572e:	f7fe fd03 	bl	8014138 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015732:	f7f6 fff9 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 8015736:	4603      	mov	r3, r0
 8015738:	4618      	mov	r0, r3
 801573a:	f001 f803 	bl	8016744 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801573e:	2000      	movs	r0, #0
 8015740:	f7fe f9f6 	bl	8013b30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015744:	e00e      	b.n	8015764 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015746:	4b0a      	ldr	r3, [pc, #40]	; (8015770 <HAL_LTDC_LineEventCallback+0x78>)
 8015748:	881b      	ldrh	r3, [r3, #0]
 801574a:	4619      	mov	r1, r3
 801574c:	6878      	ldr	r0, [r7, #4]
 801574e:	f7ef fd1d 	bl	800518c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015752:	2000      	movs	r0, #0
 8015754:	f7fe f9f7 	bl	8013b46 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015758:	f7f6 ffe6 	bl	800c728 <_ZN8touchgfx3HAL11getInstanceEv>
 801575c:	4603      	mov	r3, r0
 801575e:	4618      	mov	r0, r3
 8015760:	f7ff fdf9 	bl	8015356 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015764:	bf00      	nop
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	40016800 	.word	0x40016800
 8015770:	2000b35c 	.word	0x2000b35c
 8015774:	2000b35e 	.word	0x2000b35e

08015778 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015778:	8880      	ldrh	r0, [r0, #4]
 801577a:	4770      	bx	lr

0801577c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801577c:	2300      	movs	r3, #0
 801577e:	8083      	strh	r3, [r0, #4]
 8015780:	4770      	bx	lr
	...

08015784 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015786:	6803      	ldr	r3, [r0, #0]
 8015788:	460e      	mov	r6, r1
 801578a:	2100      	movs	r1, #0
 801578c:	4605      	mov	r5, r0
 801578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015790:	4798      	blx	r3
 8015792:	4604      	mov	r4, r0
 8015794:	682b      	ldr	r3, [r5, #0]
 8015796:	4628      	mov	r0, r5
 8015798:	1b34      	subs	r4, r6, r4
 801579a:	6a1b      	ldr	r3, [r3, #32]
 801579c:	b2a4      	uxth	r4, r4
 801579e:	4798      	blx	r3
 80157a0:	88ab      	ldrh	r3, [r5, #4]
 80157a2:	fbb4 f4f0 	udiv	r4, r4, r0
 80157a6:	42a3      	cmp	r3, r4
 80157a8:	d805      	bhi.n	80157b6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80157aa:	4b0e      	ldr	r3, [pc, #56]	; (80157e4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80157ac:	2120      	movs	r1, #32
 80157ae:	4a0e      	ldr	r2, [pc, #56]	; (80157e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80157b0:	480e      	ldr	r0, [pc, #56]	; (80157ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80157b2:	f00f ffa5 	bl	8025700 <__assert_func>
 80157b6:	682b      	ldr	r3, [r5, #0]
 80157b8:	2100      	movs	r1, #0
 80157ba:	4628      	mov	r0, r5
 80157bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157be:	4798      	blx	r3
 80157c0:	682b      	ldr	r3, [r5, #0]
 80157c2:	4607      	mov	r7, r0
 80157c4:	4628      	mov	r0, r5
 80157c6:	6a1b      	ldr	r3, [r3, #32]
 80157c8:	4798      	blx	r3
 80157ca:	1bf3      	subs	r3, r6, r7
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	fbb3 f2f0 	udiv	r2, r3, r0
 80157d2:	fb02 3010 	mls	r0, r2, r0, r3
 80157d6:	b118      	cbz	r0, 80157e0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80157d8:	4b05      	ldr	r3, [pc, #20]	; (80157f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80157da:	2121      	movs	r1, #33	; 0x21
 80157dc:	4a02      	ldr	r2, [pc, #8]	; (80157e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80157de:	e7e7      	b.n	80157b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80157e0:	4620      	mov	r0, r4
 80157e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157e4:	08028d1c 	.word	0x08028d1c
 80157e8:	08028e8a 	.word	0x08028e8a
 80157ec:	08028d31 	.word	0x08028d31
 80157f0:	08028d5f 	.word	0x08028d5f

080157f4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80157f4:	b538      	push	{r3, r4, r5, lr}
 80157f6:	6803      	ldr	r3, [r0, #0]
 80157f8:	460d      	mov	r5, r1
 80157fa:	4604      	mov	r4, r0
 80157fc:	6a1b      	ldr	r3, [r3, #32]
 80157fe:	4798      	blx	r3
 8015800:	4285      	cmp	r5, r0
 8015802:	d905      	bls.n	8015810 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015804:	4b0c      	ldr	r3, [pc, #48]	; (8015838 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015806:	2132      	movs	r1, #50	; 0x32
 8015808:	4a0c      	ldr	r2, [pc, #48]	; (801583c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801580a:	480d      	ldr	r0, [pc, #52]	; (8015840 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801580c:	f00f ff78 	bl	8025700 <__assert_func>
 8015810:	6823      	ldr	r3, [r4, #0]
 8015812:	4620      	mov	r0, r4
 8015814:	88a5      	ldrh	r5, [r4, #4]
 8015816:	69db      	ldr	r3, [r3, #28]
 8015818:	4798      	blx	r3
 801581a:	4285      	cmp	r5, r0
 801581c:	d303      	bcc.n	8015826 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801581e:	4b09      	ldr	r3, [pc, #36]	; (8015844 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015820:	2133      	movs	r1, #51	; 0x33
 8015822:	4a06      	ldr	r2, [pc, #24]	; (801583c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015824:	e7f1      	b.n	801580a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015826:	6823      	ldr	r3, [r4, #0]
 8015828:	4620      	mov	r0, r4
 801582a:	88a1      	ldrh	r1, [r4, #4]
 801582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801582e:	4798      	blx	r3
 8015830:	88a3      	ldrh	r3, [r4, #4]
 8015832:	3301      	adds	r3, #1
 8015834:	80a3      	strh	r3, [r4, #4]
 8015836:	bd38      	pop	{r3, r4, r5, pc}
 8015838:	08028dd9 	.word	0x08028dd9
 801583c:	08028ecd 	.word	0x08028ecd
 8015840:	08028d31 	.word	0x08028d31
 8015844:	08028df0 	.word	0x08028df0

08015848 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015848:	b570      	push	{r4, r5, r6, lr}
 801584a:	6803      	ldr	r3, [r0, #0]
 801584c:	4616      	mov	r6, r2
 801584e:	4604      	mov	r4, r0
 8015850:	460d      	mov	r5, r1
 8015852:	6a1b      	ldr	r3, [r3, #32]
 8015854:	4798      	blx	r3
 8015856:	4286      	cmp	r6, r0
 8015858:	d905      	bls.n	8015866 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801585a:	4b06      	ldr	r3, [pc, #24]	; (8015874 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801585c:	213c      	movs	r1, #60	; 0x3c
 801585e:	4a06      	ldr	r2, [pc, #24]	; (8015878 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015860:	4806      	ldr	r0, [pc, #24]	; (801587c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8015862:	f00f ff4d 	bl	8025700 <__assert_func>
 8015866:	6823      	ldr	r3, [r4, #0]
 8015868:	4629      	mov	r1, r5
 801586a:	4620      	mov	r0, r4
 801586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015872:	4718      	bx	r3
 8015874:	08028dd9 	.word	0x08028dd9
 8015878:	08028e40 	.word	0x08028e40
 801587c:	08028d31 	.word	0x08028d31

08015880 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015880:	4770      	bx	lr
	...

08015884 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015884:	4a02      	ldr	r2, [pc, #8]	; (8015890 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015886:	6002      	str	r2, [r0, #0]
 8015888:	2200      	movs	r2, #0
 801588a:	8082      	strh	r2, [r0, #4]
 801588c:	4770      	bx	lr
 801588e:	bf00      	nop
 8015890:	08028e14 	.word	0x08028e14

08015894 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015894:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015896:	2000      	movs	r0, #0
 8015898:	b12b      	cbz	r3, 80158a6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801589a:	b920      	cbnz	r0, 80158a6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801589c:	1a5a      	subs	r2, r3, r1
 801589e:	699b      	ldr	r3, [r3, #24]
 80158a0:	4250      	negs	r0, r2
 80158a2:	4150      	adcs	r0, r2
 80158a4:	e7f8      	b.n	8015898 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80158a6:	4770      	bx	lr

080158a8 <_ZN8touchgfx9Container9removeAllEv>:
 80158a8:	2200      	movs	r2, #0
 80158aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80158ac:	b123      	cbz	r3, 80158b8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80158ae:	6999      	ldr	r1, [r3, #24]
 80158b0:	6281      	str	r1, [r0, #40]	; 0x28
 80158b2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80158b6:	e7f8      	b.n	80158aa <_ZN8touchgfx9Container9removeAllEv+0x2>
 80158b8:	4770      	bx	lr

080158ba <_ZN8touchgfx9Container6unlinkEv>:
 80158ba:	2300      	movs	r3, #0
 80158bc:	6283      	str	r3, [r0, #40]	; 0x28
 80158be:	4770      	bx	lr

080158c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80158c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c4:	461f      	mov	r7, r3
 80158c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80158ca:	460d      	mov	r5, r1
 80158cc:	4616      	mov	r6, r2
 80158ce:	b103      	cbz	r3, 80158d2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80158d0:	6038      	str	r0, [r7, #0]
 80158d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80158d4:	b314      	cbz	r4, 801591c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80158d6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80158da:	b1eb      	cbz	r3, 8015918 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80158e0:	428d      	cmp	r5, r1
 80158e2:	db19      	blt.n	8015918 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158e4:	b289      	uxth	r1, r1
 80158e6:	8923      	ldrh	r3, [r4, #8]
 80158e8:	440b      	add	r3, r1
 80158ea:	b21b      	sxth	r3, r3
 80158ec:	429d      	cmp	r5, r3
 80158ee:	da13      	bge.n	8015918 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80158f4:	4296      	cmp	r6, r2
 80158f6:	db0f      	blt.n	8015918 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80158f8:	b292      	uxth	r2, r2
 80158fa:	8963      	ldrh	r3, [r4, #10]
 80158fc:	4413      	add	r3, r2
 80158fe:	b21b      	sxth	r3, r3
 8015900:	429e      	cmp	r6, r3
 8015902:	da09      	bge.n	8015918 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015904:	6823      	ldr	r3, [r4, #0]
 8015906:	1ab2      	subs	r2, r6, r2
 8015908:	1a69      	subs	r1, r5, r1
 801590a:	4620      	mov	r0, r4
 801590c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8015910:	b212      	sxth	r2, r2
 8015912:	463b      	mov	r3, r7
 8015914:	b209      	sxth	r1, r1
 8015916:	47c0      	blx	r8
 8015918:	69a4      	ldr	r4, [r4, #24]
 801591a:	e7db      	b.n	80158d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015920 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015920:	2200      	movs	r2, #0
 8015922:	8002      	strh	r2, [r0, #0]
 8015924:	8042      	strh	r2, [r0, #2]
 8015926:	8082      	strh	r2, [r0, #4]
 8015928:	80c2      	strh	r2, [r0, #6]
 801592a:	4770      	bx	lr

0801592c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801592c:	b570      	push	{r4, r5, r6, lr}
 801592e:	460d      	mov	r5, r1
 8015930:	4616      	mov	r6, r2
 8015932:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015934:	b13c      	cbz	r4, 8015946 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015936:	6823      	ldr	r3, [r4, #0]
 8015938:	4620      	mov	r0, r4
 801593a:	4632      	mov	r2, r6
 801593c:	4629      	mov	r1, r5
 801593e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015940:	4798      	blx	r3
 8015942:	69a4      	ldr	r4, [r4, #24]
 8015944:	e7f6      	b.n	8015934 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015946:	bd70      	pop	{r4, r5, r6, pc}

08015948 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015948:	b538      	push	{r3, r4, r5, lr}
 801594a:	460d      	mov	r5, r1
 801594c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801594e:	b134      	cbz	r4, 801595e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015950:	682b      	ldr	r3, [r5, #0]
 8015952:	4621      	mov	r1, r4
 8015954:	4628      	mov	r0, r5
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	4798      	blx	r3
 801595a:	69a4      	ldr	r4, [r4, #24]
 801595c:	e7f7      	b.n	801594e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801595e:	bd38      	pop	{r3, r4, r5, pc}

08015960 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015960:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015962:	b19b      	cbz	r3, 801598c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015964:	428b      	cmp	r3, r1
 8015966:	d109      	bne.n	801597c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015968:	699a      	ldr	r2, [r3, #24]
 801596a:	2100      	movs	r1, #0
 801596c:	6159      	str	r1, [r3, #20]
 801596e:	6282      	str	r2, [r0, #40]	; 0x28
 8015970:	b902      	cbnz	r2, 8015974 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015972:	4770      	bx	lr
 8015974:	6199      	str	r1, [r3, #24]
 8015976:	4770      	bx	lr
 8015978:	4613      	mov	r3, r2
 801597a:	b13a      	cbz	r2, 801598c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801597c:	699a      	ldr	r2, [r3, #24]
 801597e:	428a      	cmp	r2, r1
 8015980:	d1fa      	bne.n	8015978 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015982:	698a      	ldr	r2, [r1, #24]
 8015984:	619a      	str	r2, [r3, #24]
 8015986:	2300      	movs	r3, #0
 8015988:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801598c:	4770      	bx	lr

0801598e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801598e:	b410      	push	{r4}
 8015990:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015992:	4604      	mov	r4, r0
 8015994:	b92b      	cbnz	r3, 80159a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015996:	6803      	ldr	r3, [r0, #0]
 8015998:	4611      	mov	r1, r2
 801599a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801599e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159a0:	4718      	bx	r3
 80159a2:	b941      	cbnz	r1, 80159b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80159a4:	6193      	str	r3, [r2, #24]
 80159a6:	6282      	str	r2, [r0, #40]	; 0x28
 80159a8:	6154      	str	r4, [r2, #20]
 80159aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159ae:	4770      	bx	lr
 80159b0:	4603      	mov	r3, r0
 80159b2:	2800      	cmp	r0, #0
 80159b4:	d0f9      	beq.n	80159aa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80159b6:	4299      	cmp	r1, r3
 80159b8:	6998      	ldr	r0, [r3, #24]
 80159ba:	d1f9      	bne.n	80159b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80159bc:	6190      	str	r0, [r2, #24]
 80159be:	618a      	str	r2, [r1, #24]
 80159c0:	e7f2      	b.n	80159a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080159c4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80159c4:	4288      	cmp	r0, r1
 80159c6:	b508      	push	{r3, lr}
 80159c8:	d105      	bne.n	80159d6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80159ca:	4b11      	ldr	r3, [pc, #68]	; (8015a10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80159cc:	2123      	movs	r1, #35	; 0x23
 80159ce:	4a11      	ldr	r2, [pc, #68]	; (8015a14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159d0:	4811      	ldr	r0, [pc, #68]	; (8015a18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80159d2:	f00f fe95 	bl	8025700 <__assert_func>
 80159d6:	694b      	ldr	r3, [r1, #20]
 80159d8:	b11b      	cbz	r3, 80159e2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80159da:	4b10      	ldr	r3, [pc, #64]	; (8015a1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80159dc:	2124      	movs	r1, #36	; 0x24
 80159de:	4a0d      	ldr	r2, [pc, #52]	; (8015a14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159e0:	e7f6      	b.n	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80159e2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80159e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159e8:	b913      	cbnz	r3, 80159f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80159ea:	6281      	str	r1, [r0, #40]	; 0x28
 80159ec:	bd08      	pop	{r3, pc}
 80159ee:	4613      	mov	r3, r2
 80159f0:	699a      	ldr	r2, [r3, #24]
 80159f2:	b12a      	cbz	r2, 8015a00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80159f4:	428b      	cmp	r3, r1
 80159f6:	d1fa      	bne.n	80159ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80159f8:	4b09      	ldr	r3, [pc, #36]	; (8015a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80159fa:	2135      	movs	r1, #53	; 0x35
 80159fc:	4a05      	ldr	r2, [pc, #20]	; (8015a14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80159fe:	e7e7      	b.n	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015a00:	428b      	cmp	r3, r1
 8015a02:	d103      	bne.n	8015a0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015a04:	4b06      	ldr	r3, [pc, #24]	; (8015a20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015a06:	2138      	movs	r1, #56	; 0x38
 8015a08:	4a02      	ldr	r2, [pc, #8]	; (8015a14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015a0a:	e7e1      	b.n	80159d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015a0c:	6199      	str	r1, [r3, #24]
 8015a0e:	e7ed      	b.n	80159ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015a10:	08028f0b 	.word	0x08028f0b
 8015a14:	08029060 	.word	0x08029060
 8015a18:	08028f37 	.word	0x08028f37
 8015a1c:	08028f6a 	.word	0x08028f6a
 8015a20:	08028fa0 	.word	0x08028fa0

08015a24 <_ZN8touchgfx4RectaNERKS0_>:
 8015a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a28:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015a2c:	888c      	ldrh	r4, [r1, #4]
 8015a2e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015a32:	443c      	add	r4, r7
 8015a34:	b2a4      	uxth	r4, r4
 8015a36:	fa0f f884 	sxth.w	r8, r4
 8015a3a:	45c1      	cmp	r9, r8
 8015a3c:	da2f      	bge.n	8015a9e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a3e:	8882      	ldrh	r2, [r0, #4]
 8015a40:	444a      	add	r2, r9
 8015a42:	b292      	uxth	r2, r2
 8015a44:	fa0f fe82 	sxth.w	lr, r2
 8015a48:	4577      	cmp	r7, lr
 8015a4a:	da28      	bge.n	8015a9e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a4c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015a50:	88cb      	ldrh	r3, [r1, #6]
 8015a52:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015a56:	442b      	add	r3, r5
 8015a58:	b21b      	sxth	r3, r3
 8015a5a:	429e      	cmp	r6, r3
 8015a5c:	da1f      	bge.n	8015a9e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a5e:	88c3      	ldrh	r3, [r0, #6]
 8015a60:	4433      	add	r3, r6
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	fa0f fc83 	sxth.w	ip, r3
 8015a68:	4565      	cmp	r5, ip
 8015a6a:	da18      	bge.n	8015a9e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015a6c:	454f      	cmp	r7, r9
 8015a6e:	bfb8      	it	lt
 8015a70:	464f      	movlt	r7, r9
 8015a72:	42b5      	cmp	r5, r6
 8015a74:	bfb8      	it	lt
 8015a76:	4635      	movlt	r5, r6
 8015a78:	45f0      	cmp	r8, lr
 8015a7a:	bfd8      	it	le
 8015a7c:	4622      	movle	r2, r4
 8015a7e:	1bd2      	subs	r2, r2, r7
 8015a80:	8082      	strh	r2, [r0, #4]
 8015a82:	884a      	ldrh	r2, [r1, #2]
 8015a84:	88c9      	ldrh	r1, [r1, #6]
 8015a86:	8007      	strh	r7, [r0, #0]
 8015a88:	440a      	add	r2, r1
 8015a8a:	8045      	strh	r5, [r0, #2]
 8015a8c:	b292      	uxth	r2, r2
 8015a8e:	b211      	sxth	r1, r2
 8015a90:	458c      	cmp	ip, r1
 8015a92:	bfa8      	it	ge
 8015a94:	4613      	movge	r3, r2
 8015a96:	1b5b      	subs	r3, r3, r5
 8015a98:	80c3      	strh	r3, [r0, #6]
 8015a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	8003      	strh	r3, [r0, #0]
 8015aa2:	8043      	strh	r3, [r0, #2]
 8015aa4:	8083      	strh	r3, [r0, #4]
 8015aa6:	80c3      	strh	r3, [r0, #6]
 8015aa8:	e7f7      	b.n	8015a9a <_ZN8touchgfx4RectaNERKS0_+0x76>

08015aaa <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015aaa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	dd06      	ble.n	8015ac0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015ab2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	bfcc      	ite	gt
 8015aba:	2000      	movgt	r0, #0
 8015abc:	2001      	movle	r0, #1
 8015abe:	4770      	bx	lr
 8015ac0:	2001      	movs	r0, #1
 8015ac2:	4770      	bx	lr

08015ac4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac8:	2300      	movs	r3, #0
 8015aca:	4604      	mov	r4, r0
 8015acc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015ace:	8003      	strh	r3, [r0, #0]
 8015ad0:	8043      	strh	r3, [r0, #2]
 8015ad2:	8083      	strh	r3, [r0, #4]
 8015ad4:	80c3      	strh	r3, [r0, #6]
 8015ad6:	2d00      	cmp	r5, #0
 8015ad8:	d040      	beq.n	8015b5c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015ada:	1d28      	adds	r0, r5, #4
 8015adc:	f7ff ffe5 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ae0:	b988      	cbnz	r0, 8015b06 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	f7ff ffe1 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ae8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015aec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015af0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015af4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015af8:	b138      	cbz	r0, 8015b0a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015afa:	8022      	strh	r2, [r4, #0]
 8015afc:	8063      	strh	r3, [r4, #2]
 8015afe:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015b02:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015b06:	69ad      	ldr	r5, [r5, #24]
 8015b08:	e7e5      	b.n	8015ad6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015b0a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015b0e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015b12:	4290      	cmp	r0, r2
 8015b14:	4607      	mov	r7, r0
 8015b16:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015b1a:	460e      	mov	r6, r1
 8015b1c:	bfa8      	it	ge
 8015b1e:	4617      	movge	r7, r2
 8015b20:	4299      	cmp	r1, r3
 8015b22:	4472      	add	r2, lr
 8015b24:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015b28:	bfa8      	it	ge
 8015b2a:	461e      	movge	r6, r3
 8015b2c:	4440      	add	r0, r8
 8015b2e:	4471      	add	r1, lr
 8015b30:	4463      	add	r3, ip
 8015b32:	b200      	sxth	r0, r0
 8015b34:	8027      	strh	r7, [r4, #0]
 8015b36:	b212      	sxth	r2, r2
 8015b38:	8066      	strh	r6, [r4, #2]
 8015b3a:	b209      	sxth	r1, r1
 8015b3c:	b21b      	sxth	r3, r3
 8015b3e:	4290      	cmp	r0, r2
 8015b40:	bfac      	ite	ge
 8015b42:	ebc7 0200 	rsbge	r2, r7, r0
 8015b46:	ebc7 0202 	rsblt	r2, r7, r2
 8015b4a:	4299      	cmp	r1, r3
 8015b4c:	bfac      	ite	ge
 8015b4e:	ebc6 0301 	rsbge	r3, r6, r1
 8015b52:	ebc6 0303 	rsblt	r3, r6, r3
 8015b56:	80a2      	strh	r2, [r4, #4]
 8015b58:	80e3      	strh	r3, [r4, #6]
 8015b5a:	e7d4      	b.n	8015b06 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b62 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015b62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015b66:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015b6a:	b383      	cbz	r3, 8015bce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015b6c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015b6e:	b374      	cbz	r4, 8015bce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015b70:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015b74:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015b78:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015b7c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015b80:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015b84:	b303      	cbz	r3, 8015bc8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015b86:	4668      	mov	r0, sp
 8015b88:	1d21      	adds	r1, r4, #4
 8015b8a:	f8ad 5000 	strh.w	r5, [sp]
 8015b8e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015b92:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015b96:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015b9a:	f7ff ff43 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 8015b9e:	4668      	mov	r0, sp
 8015ba0:	f7ff ff83 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ba4:	b980      	cbnz	r0, 8015bc8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015ba6:	f8bd 3000 	ldrh.w	r3, [sp]
 8015baa:	4669      	mov	r1, sp
 8015bac:	88a2      	ldrh	r2, [r4, #4]
 8015bae:	4620      	mov	r0, r4
 8015bb0:	1a9b      	subs	r3, r3, r2
 8015bb2:	88e2      	ldrh	r2, [r4, #6]
 8015bb4:	f8ad 3000 	strh.w	r3, [sp]
 8015bb8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015bbc:	1a9b      	subs	r3, r3, r2
 8015bbe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015bc2:	6823      	ldr	r3, [r4, #0]
 8015bc4:	689b      	ldr	r3, [r3, #8]
 8015bc6:	4798      	blx	r3
 8015bc8:	69a4      	ldr	r4, [r4, #24]
 8015bca:	2c00      	cmp	r4, #0
 8015bcc:	d1d8      	bne.n	8015b80 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015bce:	b002      	add	sp, #8
 8015bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bd4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015bd6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015bda:	460d      	mov	r5, r1
 8015bdc:	4616      	mov	r6, r2
 8015bde:	b323      	cbz	r3, 8015c2a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015be0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015be2:	b314      	cbz	r4, 8015c2a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015be4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015be8:	b1eb      	cbz	r3, 8015c26 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015bea:	6828      	ldr	r0, [r5, #0]
 8015bec:	466b      	mov	r3, sp
 8015bee:	6869      	ldr	r1, [r5, #4]
 8015bf0:	c303      	stmia	r3!, {r0, r1}
 8015bf2:	4668      	mov	r0, sp
 8015bf4:	1d21      	adds	r1, r4, #4
 8015bf6:	f7ff ff15 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 8015bfa:	4668      	mov	r0, sp
 8015bfc:	f7ff ff55 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c00:	b988      	cbnz	r0, 8015c26 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015c02:	f8bd 3000 	ldrh.w	r3, [sp]
 8015c06:	4669      	mov	r1, sp
 8015c08:	88a2      	ldrh	r2, [r4, #4]
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	1a9b      	subs	r3, r3, r2
 8015c0e:	88e2      	ldrh	r2, [r4, #6]
 8015c10:	f8ad 3000 	strh.w	r3, [sp]
 8015c14:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015c18:	1a9b      	subs	r3, r3, r2
 8015c1a:	4632      	mov	r2, r6
 8015c1c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015c20:	6823      	ldr	r3, [r4, #0]
 8015c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c24:	4798      	blx	r3
 8015c26:	69a4      	ldr	r4, [r4, #24]
 8015c28:	e7db      	b.n	8015be2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015c2a:	b002      	add	sp, #8
 8015c2c:	bd70      	pop	{r4, r5, r6, pc}

08015c2e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015c2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015c32:	4770      	bx	lr

08015c34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015c34:	6803      	ldr	r3, [r0, #0]
 8015c36:	b513      	push	{r0, r1, r4, lr}
 8015c38:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	e9cd 3300 	strd	r3, r3, [sp]
 8015c42:	466b      	mov	r3, sp
 8015c44:	47a0      	blx	r4
 8015c46:	b002      	add	sp, #8
 8015c48:	bd10      	pop	{r4, pc}

08015c4a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015c50:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015c54:	4770      	bx	lr

08015c56 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015c56:	2301      	movs	r3, #1
 8015c58:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015c5c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015c60:	4770      	bx	lr

08015c62 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015c62:	6843      	ldr	r3, [r0, #4]
 8015c64:	2201      	movs	r2, #1
 8015c66:	725a      	strb	r2, [r3, #9]
 8015c68:	6840      	ldr	r0, [r0, #4]
 8015c6a:	6803      	ldr	r3, [r0, #0]
 8015c6c:	691b      	ldr	r3, [r3, #16]
 8015c6e:	4718      	bx	r3

08015c70 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015c70:	6840      	ldr	r0, [r0, #4]
 8015c72:	6803      	ldr	r3, [r0, #0]
 8015c74:	689b      	ldr	r3, [r3, #8]
 8015c76:	4718      	bx	r3

08015c78 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015c78:	4b04      	ldr	r3, [pc, #16]	; (8015c8c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	b123      	cbz	r3, 8015c88 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015c7e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015c82:	f080 0001 	eor.w	r0, r0, #1
 8015c86:	4770      	bx	lr
 8015c88:	2001      	movs	r0, #1
 8015c8a:	4770      	bx	lr
 8015c8c:	2000b36a 	.word	0x2000b36a

08015c90 <_ZN8touchgfx3HAL8endFrameEv>:
 8015c90:	b510      	push	{r4, lr}
 8015c92:	4604      	mov	r4, r0
 8015c94:	6840      	ldr	r0, [r0, #4]
 8015c96:	6803      	ldr	r3, [r0, #0]
 8015c98:	689b      	ldr	r3, [r3, #8]
 8015c9a:	4798      	blx	r3
 8015c9c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015ca0:	b113      	cbz	r3, 8015ca8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015ca8:	bd10      	pop	{r4, pc}

08015caa <_ZN8touchgfx3HAL9taskEntryEv>:
 8015caa:	b508      	push	{r3, lr}
 8015cac:	6803      	ldr	r3, [r0, #0]
 8015cae:	4604      	mov	r4, r0
 8015cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015cb2:	4798      	blx	r3
 8015cb4:	6823      	ldr	r3, [r4, #0]
 8015cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cb8:	4620      	mov	r0, r4
 8015cba:	4798      	blx	r3
 8015cbc:	f7fe fa48 	bl	8014150 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015cc0:	6823      	ldr	r3, [r4, #0]
 8015cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015cc4:	e7f8      	b.n	8015cb8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015cc8 <_ZN8touchgfx3HAL4tickEv>:
 8015cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015cca:	6803      	ldr	r3, [r0, #0]
 8015ccc:	4604      	mov	r4, r0
 8015cce:	4d5c      	ldr	r5, [pc, #368]	; (8015e40 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015cd4:	4798      	blx	r3
 8015cd6:	2800      	cmp	r0, #0
 8015cd8:	f000 8097 	beq.w	8015e0a <_ZN8touchgfx3HAL4tickEv+0x142>
 8015cdc:	2001      	movs	r0, #1
 8015cde:	2600      	movs	r6, #0
 8015ce0:	f7fd ff26 	bl	8013b30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015ce4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015ce8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015cec:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015cf0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015cf4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015cf8:	b133      	cbz	r3, 8015d08 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015cfa:	6823      	ldr	r3, [r4, #0]
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015d02:	4798      	blx	r3
 8015d04:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015d08:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015d0c:	2601      	movs	r6, #1
 8015d0e:	6862      	ldr	r2, [r4, #4]
 8015d10:	f083 0301 	eor.w	r3, r3, #1
 8015d14:	702e      	strb	r6, [r5, #0]
 8015d16:	7253      	strb	r3, [r2, #9]
 8015d18:	f003 fb72 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8015d1c:	6803      	ldr	r3, [r0, #0]
 8015d1e:	4631      	mov	r1, r6
 8015d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d22:	4798      	blx	r3
 8015d24:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d28:	b90b      	cbnz	r3, 8015d2e <_ZN8touchgfx3HAL4tickEv+0x66>
 8015d2a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015d2e:	f003 fb67 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8015d32:	6803      	ldr	r3, [r0, #0]
 8015d34:	695b      	ldr	r3, [r3, #20]
 8015d36:	4798      	blx	r3
 8015d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d3a:	6803      	ldr	r3, [r0, #0]
 8015d3c:	691b      	ldr	r3, [r3, #16]
 8015d3e:	4798      	blx	r3
 8015d40:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015d44:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015d48:	3b01      	subs	r3, #1
 8015d4a:	b2db      	uxtb	r3, r3
 8015d4c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015d50:	b10a      	cbz	r2, 8015d56 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d1eb      	bne.n	8015d2e <_ZN8touchgfx3HAL4tickEv+0x66>
 8015d56:	4a3b      	ldr	r2, [pc, #236]	; (8015e44 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015d58:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015d5c:	7813      	ldrb	r3, [r2, #0]
 8015d5e:	3301      	adds	r3, #1
 8015d60:	b25b      	sxtb	r3, r3
 8015d62:	4299      	cmp	r1, r3
 8015d64:	7013      	strb	r3, [r2, #0]
 8015d66:	dc10      	bgt.n	8015d8a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015d68:	2300      	movs	r3, #0
 8015d6a:	68e0      	ldr	r0, [r4, #12]
 8015d6c:	a902      	add	r1, sp, #8
 8015d6e:	7013      	strb	r3, [r2, #0]
 8015d70:	aa03      	add	r2, sp, #12
 8015d72:	6803      	ldr	r3, [r0, #0]
 8015d74:	68db      	ldr	r3, [r3, #12]
 8015d76:	4798      	blx	r3
 8015d78:	6823      	ldr	r3, [r4, #0]
 8015d7a:	2800      	cmp	r0, #0
 8015d7c:	d051      	beq.n	8015e22 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015d82:	4620      	mov	r0, r4
 8015d84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015d88:	4798      	blx	r3
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	6960      	ldr	r0, [r4, #20]
 8015d8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8015d92:	b158      	cbz	r0, 8015dac <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015d94:	6803      	ldr	r3, [r0, #0]
 8015d96:	f10d 0107 	add.w	r1, sp, #7
 8015d9a:	68db      	ldr	r3, [r3, #12]
 8015d9c:	4798      	blx	r3
 8015d9e:	b128      	cbz	r0, 8015dac <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015da2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015da6:	6803      	ldr	r3, [r0, #0]
 8015da8:	68db      	ldr	r3, [r3, #12]
 8015daa:	4798      	blx	r3
 8015dac:	f104 001c 	add.w	r0, r4, #28
 8015db0:	f00d ffd0 	bl	8023d54 <_ZN8touchgfx8Gestures4tickEv>
 8015db4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015db8:	b30b      	cbz	r3, 8015dfe <_ZN8touchgfx3HAL4tickEv+0x136>
 8015dba:	6920      	ldr	r0, [r4, #16]
 8015dbc:	6803      	ldr	r3, [r0, #0]
 8015dbe:	691b      	ldr	r3, [r3, #16]
 8015dc0:	4798      	blx	r3
 8015dc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dc4:	4606      	mov	r6, r0
 8015dc6:	b903      	cbnz	r3, 8015dca <_ZN8touchgfx3HAL4tickEv+0x102>
 8015dc8:	6720      	str	r0, [r4, #112]	; 0x70
 8015dca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dcc:	4a1e      	ldr	r2, [pc, #120]	; (8015e48 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015dce:	1af3      	subs	r3, r6, r3
 8015dd0:	4293      	cmp	r3, r2
 8015dd2:	d914      	bls.n	8015dfe <_ZN8touchgfx3HAL4tickEv+0x136>
 8015dd4:	6920      	ldr	r0, [r4, #16]
 8015dd6:	6803      	ldr	r3, [r0, #0]
 8015dd8:	699b      	ldr	r3, [r3, #24]
 8015dda:	4798      	blx	r3
 8015ddc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dde:	2264      	movs	r2, #100	; 0x64
 8015de0:	1af3      	subs	r3, r6, r3
 8015de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8015de6:	fbb0 f0f3 	udiv	r0, r0, r3
 8015dea:	2800      	cmp	r0, #0
 8015dec:	dc1e      	bgt.n	8015e2c <_ZN8touchgfx3HAL4tickEv+0x164>
 8015dee:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015df2:	6920      	ldr	r0, [r4, #16]
 8015df4:	2100      	movs	r1, #0
 8015df6:	6803      	ldr	r3, [r0, #0]
 8015df8:	69db      	ldr	r3, [r3, #28]
 8015dfa:	4798      	blx	r3
 8015dfc:	6726      	str	r6, [r4, #112]	; 0x70
 8015dfe:	f003 faff 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8015e02:	6803      	ldr	r3, [r0, #0]
 8015e04:	2100      	movs	r1, #0
 8015e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e08:	4798      	blx	r3
 8015e0a:	6823      	ldr	r3, [r4, #0]
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015e12:	4798      	blx	r3
 8015e14:	2001      	movs	r0, #1
 8015e16:	f7fd fe96 	bl	8013b46 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	702b      	strb	r3, [r5, #0]
 8015e1e:	b004      	add	sp, #16
 8015e20:	bd70      	pop	{r4, r5, r6, pc}
 8015e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e26:	4620      	mov	r0, r4
 8015e28:	4798      	blx	r3
 8015e2a:	e7ae      	b.n	8015d8a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015e2c:	2863      	cmp	r0, #99	; 0x63
 8015e2e:	bfcb      	itete	gt
 8015e30:	2300      	movgt	r3, #0
 8015e32:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015e36:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015e3a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015e3e:	e7d8      	b.n	8015df2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015e40:	2000b370 	.word	0x2000b370
 8015e44:	2000b371 	.word	0x2000b371
 8015e48:	05f5e100 	.word	0x05f5e100

08015e4c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015e4c:	f7fe b950 	b.w	80140f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015e50 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015e50:	6581      	str	r1, [r0, #88]	; 0x58
 8015e52:	301c      	adds	r0, #28
 8015e54:	f00d bf7c 	b.w	8023d50 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015e58 <_ZN8touchgfx3HAL5touchEll>:
 8015e58:	b530      	push	{r4, r5, lr}
 8015e5a:	b087      	sub	sp, #28
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	a804      	add	r0, sp, #16
 8015e60:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015e64:	f003 f886 	bl	8018f74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015e68:	9b04      	ldr	r3, [sp, #16]
 8015e6a:	a906      	add	r1, sp, #24
 8015e6c:	a803      	add	r0, sp, #12
 8015e6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015e72:	9b05      	ldr	r3, [sp, #20]
 8015e74:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015e78:	f003 f8ca 	bl	8019010 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015e7c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015e80:	f104 001c 	add.w	r0, r4, #28
 8015e84:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015e88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015e8c:	b189      	cbz	r1, 8015eb2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015e8e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	4613      	mov	r3, r2
 8015e96:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015e9a:	462a      	mov	r2, r5
 8015e9c:	f00d ff68 	bl	8023d70 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015ea0:	b128      	cbz	r0, 8015eae <_ZN8touchgfx3HAL5touchEll+0x56>
 8015ea2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015ea6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015ea8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015eac:	6623      	str	r3, [r4, #96]	; 0x60
 8015eae:	b007      	add	sp, #28
 8015eb0:	bd30      	pop	{r4, r5, pc}
 8015eb2:	f00d ffa1 	bl	8023df8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015ebc:	e7f1      	b.n	8015ea2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015ebe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015ebe:	b570      	push	{r4, r5, r6, lr}
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d050      	beq.n	8015f66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015ec4:	ea81 0002 	eor.w	r0, r1, r2
 8015ec8:	07c6      	lsls	r6, r0, #31
 8015eca:	d508      	bpl.n	8015ede <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015ecc:	3a01      	subs	r2, #1
 8015ece:	18cc      	adds	r4, r1, r3
 8015ed0:	42a1      	cmp	r1, r4
 8015ed2:	d048      	beq.n	8015f66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015ed4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015ed8:	f801 0b01 	strb.w	r0, [r1], #1
 8015edc:	e7f8      	b.n	8015ed0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015ede:	07d5      	lsls	r5, r2, #31
 8015ee0:	bf42      	ittt	mi
 8015ee2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015ee6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015eea:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015eee:	2b01      	cmp	r3, #1
 8015ef0:	d915      	bls.n	8015f1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015ef2:	ea82 0001 	eor.w	r0, r2, r1
 8015ef6:	0784      	lsls	r4, r0, #30
 8015ef8:	d02d      	beq.n	8015f56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015efa:	1e94      	subs	r4, r2, #2
 8015efc:	4608      	mov	r0, r1
 8015efe:	18ce      	adds	r6, r1, r3
 8015f00:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015f04:	f820 5b02 	strh.w	r5, [r0], #2
 8015f08:	1a35      	subs	r5, r6, r0
 8015f0a:	2d01      	cmp	r5, #1
 8015f0c:	d8f8      	bhi.n	8015f00 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015f0e:	1e98      	subs	r0, r3, #2
 8015f10:	f003 0301 	and.w	r3, r3, #1
 8015f14:	f020 0001 	bic.w	r0, r0, #1
 8015f18:	3002      	adds	r0, #2
 8015f1a:	4401      	add	r1, r0
 8015f1c:	4402      	add	r2, r0
 8015f1e:	1f14      	subs	r4, r2, #4
 8015f20:	4608      	mov	r0, r1
 8015f22:	18ce      	adds	r6, r1, r3
 8015f24:	1a35      	subs	r5, r6, r0
 8015f26:	2d03      	cmp	r5, #3
 8015f28:	d810      	bhi.n	8015f4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015f2a:	089c      	lsrs	r4, r3, #2
 8015f2c:	00a0      	lsls	r0, r4, #2
 8015f2e:	4401      	add	r1, r0
 8015f30:	3801      	subs	r0, #1
 8015f32:	4402      	add	r2, r0
 8015f34:	f06f 0003 	mvn.w	r0, #3
 8015f38:	fb00 3404 	mla	r4, r0, r4, r3
 8015f3c:	440c      	add	r4, r1
 8015f3e:	42a1      	cmp	r1, r4
 8015f40:	d011      	beq.n	8015f66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015f42:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015f46:	f801 3b01 	strb.w	r3, [r1], #1
 8015f4a:	e7f8      	b.n	8015f3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015f4c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015f50:	f840 5b04 	str.w	r5, [r0], #4
 8015f54:	e7e6      	b.n	8015f24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015f56:	0790      	lsls	r0, r2, #30
 8015f58:	d0e1      	beq.n	8015f1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015f5a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015f5e:	3b02      	subs	r3, #2
 8015f60:	f821 0b02 	strh.w	r0, [r1], #2
 8015f64:	e7db      	b.n	8015f1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015f66:	2001      	movs	r0, #1
 8015f68:	bd70      	pop	{r4, r5, r6, pc}

08015f6a <_ZN8touchgfx3HAL7noTouchEv>:
 8015f6a:	b510      	push	{r4, lr}
 8015f6c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015f70:	4604      	mov	r4, r0
 8015f72:	b153      	cbz	r3, 8015f8a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015f74:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015f78:	2101      	movs	r1, #1
 8015f7a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015f7e:	301c      	adds	r0, #28
 8015f80:	f00d ff3a 	bl	8023df8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015f84:	2300      	movs	r3, #0
 8015f86:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015f8a:	bd10      	pop	{r4, pc}

08015f8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f90:	4605      	mov	r5, r0
 8015f92:	6980      	ldr	r0, [r0, #24]
 8015f94:	b085      	sub	sp, #20
 8015f96:	460f      	mov	r7, r1
 8015f98:	4690      	mov	r8, r2
 8015f9a:	4699      	mov	r9, r3
 8015f9c:	b930      	cbnz	r0, 8015fac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015f9e:	4b1f      	ldr	r3, [pc, #124]	; (801601c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015fa0:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015fa4:	4a1e      	ldr	r2, [pc, #120]	; (8016020 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015fa6:	481f      	ldr	r0, [pc, #124]	; (8016024 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8015fa8:	f00f fbaa 	bl	8025700 <__assert_func>
 8015fac:	ac04      	add	r4, sp, #16
 8015fae:	2600      	movs	r6, #0
 8015fb0:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015fb4:	6806      	ldr	r6, [r0, #0]
 8015fb6:	9401      	str	r4, [sp, #4]
 8015fb8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015fbc:	9400      	str	r4, [sp, #0]
 8015fbe:	6834      	ldr	r4, [r6, #0]
 8015fc0:	47a0      	blx	r4
 8015fc2:	4c19      	ldr	r4, [pc, #100]	; (8016028 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015fc4:	4606      	mov	r6, r0
 8015fc6:	f8a4 9000 	strh.w	r9, [r4]
 8015fca:	f7f6 fbb9 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8015fce:	6803      	ldr	r3, [r0, #0]
 8015fd0:	6a1b      	ldr	r3, [r3, #32]
 8015fd2:	4798      	blx	r3
 8015fd4:	280c      	cmp	r0, #12
 8015fd6:	d80f      	bhi.n	8015ff8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015fd8:	e8df f000 	tbb	[pc, r0]
 8015fdc:	1b1b1207 	.word	0x1b1b1207
 8015fe0:	1b1b1b1b 	.word	0x1b1b1b1b
 8015fe4:	1b1b1b1b 	.word	0x1b1b1b1b
 8015fe8:	1b          	.byte	0x1b
 8015fe9:	00          	.byte	0x00
 8015fea:	8823      	ldrh	r3, [r4, #0]
 8015fec:	fb08 7203 	mla	r2, r8, r3, r7
 8015ff0:	9b03      	ldr	r3, [sp, #12]
 8015ff2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015ff6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	b005      	add	sp, #20
 8015ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016000:	8822      	ldrh	r2, [r4, #0]
 8016002:	9b03      	ldr	r3, [sp, #12]
 8016004:	fb08 7202 	mla	r2, r8, r2, r7
 8016008:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801600c:	1a9a      	subs	r2, r3, r2
 801600e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8016010:	e7f2      	b.n	8015ff8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8016012:	4b06      	ldr	r3, [pc, #24]	; (801602c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8016014:	f240 114d 	movw	r1, #333	; 0x14d
 8016018:	4a01      	ldr	r2, [pc, #4]	; (8016020 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801601a:	e7c4      	b.n	8015fa6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801601c:	08029109 	.word	0x08029109
 8016020:	0802941a 	.word	0x0802941a
 8016024:	0802914e 	.word	0x0802914e
 8016028:	2000b366 	.word	0x2000b366
 801602c:	08029174 	.word	0x08029174

08016030 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016034:	4698      	mov	r8, r3
 8016036:	6803      	ldr	r3, [r0, #0]
 8016038:	b087      	sub	sp, #28
 801603a:	460e      	mov	r6, r1
 801603c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801603e:	4617      	mov	r7, r2
 8016040:	4b0d      	ldr	r3, [pc, #52]	; (8016078 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8016042:	4604      	mov	r4, r0
 8016044:	f8b3 9000 	ldrh.w	r9, [r3]
 8016048:	f7f6 fb7a 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 801604c:	6803      	ldr	r3, [r0, #0]
 801604e:	6a1b      	ldr	r3, [r3, #32]
 8016050:	4798      	blx	r3
 8016052:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016056:	463a      	mov	r2, r7
 8016058:	4631      	mov	r1, r6
 801605a:	9302      	str	r3, [sp, #8]
 801605c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016060:	9301      	str	r3, [sp, #4]
 8016062:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016066:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	4620      	mov	r0, r4
 801606e:	4643      	mov	r3, r8
 8016070:	47a8      	blx	r5
 8016072:	b007      	add	sp, #28
 8016074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016078:	2000b366 	.word	0x2000b366

0801607c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016080:	4606      	mov	r6, r0
 8016082:	b089      	sub	sp, #36	; 0x24
 8016084:	4610      	mov	r0, r2
 8016086:	460c      	mov	r4, r1
 8016088:	4691      	mov	r9, r2
 801608a:	4698      	mov	r8, r3
 801608c:	f005 fc26 	bl	801b8dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016090:	2800      	cmp	r0, #0
 8016092:	f000 8093 	beq.w	80161bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 8016096:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80161d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801609a:	ad08      	add	r5, sp, #32
 801609c:	f8df b138 	ldr.w	fp, [pc, #312]	; 80161d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80160a0:	f8da 0000 	ldr.w	r0, [sl]
 80160a4:	4f4a      	ldr	r7, [pc, #296]	; (80161d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80160a6:	6802      	ldr	r2, [r0, #0]
 80160a8:	6a12      	ldr	r2, [r2, #32]
 80160aa:	4790      	blx	r2
 80160ac:	f8da 0000 	ldr.w	r0, [sl]
 80160b0:	6802      	ldr	r2, [r0, #0]
 80160b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80160b4:	4790      	blx	r2
 80160b6:	f8bb 3000 	ldrh.w	r3, [fp]
 80160ba:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80160be:	4628      	mov	r0, r5
 80160c0:	9300      	str	r3, [sp, #0]
 80160c2:	883b      	ldrh	r3, [r7, #0]
 80160c4:	9301      	str	r3, [sp, #4]
 80160c6:	f005 fccd 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160ca:	f8ab 0000 	strh.w	r0, [fp]
 80160ce:	4628      	mov	r0, r5
 80160d0:	f005 fd02 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160d4:	f8da b000 	ldr.w	fp, [sl]
 80160d8:	8038      	strh	r0, [r7, #0]
 80160da:	4648      	mov	r0, r9
 80160dc:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80160e0:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80160e4:	9302      	str	r3, [sp, #8]
 80160e6:	f005 fbf9 	bl	801b8dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80160ea:	f8da 2000 	ldr.w	r2, [sl]
 80160ee:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80160f2:	63d0      	str	r0, [r2, #60]	; 0x3c
 80160f4:	4620      	mov	r0, r4
 80160f6:	6822      	ldr	r2, [r4, #0]
 80160f8:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80160fc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80160fe:	2200      	movs	r2, #0
 8016100:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8016104:	4611      	mov	r1, r2
 8016106:	4798      	blx	r3
 8016108:	2201      	movs	r2, #1
 801610a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801610e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8016112:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016116:	2a00      	cmp	r2, #0
 8016118:	f104 0204 	add.w	r2, r4, #4
 801611c:	dd51      	ble.n	80161c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801611e:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8016122:	2900      	cmp	r1, #0
 8016124:	dd4d      	ble.n	80161c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8016126:	6810      	ldr	r0, [r2, #0]
 8016128:	f10d 0c18 	add.w	ip, sp, #24
 801612c:	6851      	ldr	r1, [r2, #4]
 801612e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016132:	4641      	mov	r1, r8
 8016134:	a806      	add	r0, sp, #24
 8016136:	f7ff fc75 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 801613a:	4628      	mov	r0, r5
 801613c:	f005 fde4 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016140:	4680      	mov	r8, r0
 8016142:	f7f6 fafd 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8016146:	6802      	ldr	r2, [r0, #0]
 8016148:	6a12      	ldr	r2, [r2, #32]
 801614a:	4790      	blx	r2
 801614c:	4580      	cmp	r8, r0
 801614e:	d03d      	beq.n	80161cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 8016150:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016152:	b150      	cbz	r0, 801616a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8016154:	4628      	mov	r0, r5
 8016156:	f005 fdd7 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801615a:	4605      	mov	r5, r0
 801615c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801615e:	6803      	ldr	r3, [r0, #0]
 8016160:	6a1b      	ldr	r3, [r3, #32]
 8016162:	4798      	blx	r3
 8016164:	1a2b      	subs	r3, r5, r0
 8016166:	4258      	negs	r0, r3
 8016168:	4158      	adcs	r0, r3
 801616a:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801616e:	2500      	movs	r5, #0
 8016170:	6963      	ldr	r3, [r4, #20]
 8016172:	4620      	mov	r0, r4
 8016174:	6822      	ldr	r2, [r4, #0]
 8016176:	a906      	add	r1, sp, #24
 8016178:	6165      	str	r5, [r4, #20]
 801617a:	9303      	str	r3, [sp, #12]
 801617c:	6892      	ldr	r2, [r2, #8]
 801617e:	4790      	blx	r2
 8016180:	9b03      	ldr	r3, [sp, #12]
 8016182:	4620      	mov	r0, r4
 8016184:	4652      	mov	r2, sl
 8016186:	6163      	str	r3, [r4, #20]
 8016188:	4649      	mov	r1, r9
 801618a:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8016194:	4c0f      	ldr	r4, [pc, #60]	; (80161d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8016196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016198:	4798      	blx	r3
 801619a:	6820      	ldr	r0, [r4, #0]
 801619c:	9b02      	ldr	r3, [sp, #8]
 801619e:	9a00      	ldr	r2, [sp, #0]
 80161a0:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80161a4:	4b0c      	ldr	r3, [pc, #48]	; (80161d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80161a6:	801a      	strh	r2, [r3, #0]
 80161a8:	4b09      	ldr	r3, [pc, #36]	; (80161d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80161aa:	9a01      	ldr	r2, [sp, #4]
 80161ac:	801a      	strh	r2, [r3, #0]
 80161ae:	6803      	ldr	r3, [r0, #0]
 80161b0:	6a1b      	ldr	r3, [r3, #32]
 80161b2:	4798      	blx	r3
 80161b4:	6820      	ldr	r0, [r4, #0]
 80161b6:	6803      	ldr	r3, [r0, #0]
 80161b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ba:	4798      	blx	r3
 80161bc:	b009      	add	sp, #36	; 0x24
 80161be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c2:	ab06      	add	r3, sp, #24
 80161c4:	6810      	ldr	r0, [r2, #0]
 80161c6:	6851      	ldr	r1, [r2, #4]
 80161c8:	c303      	stmia	r3!, {r0, r1}
 80161ca:	e7b6      	b.n	801613a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 80161cc:	2000      	movs	r0, #0
 80161ce:	e7cc      	b.n	801616a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80161d0:	2000b368 	.word	0x2000b368
 80161d4:	2000b36c 	.word	0x2000b36c
 80161d8:	2000b366 	.word	0x2000b366

080161dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80161dc:	4b07      	ldr	r3, [pc, #28]	; (80161fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80161de:	b510      	push	{r4, lr}
 80161e0:	781b      	ldrb	r3, [r3, #0]
 80161e2:	4604      	mov	r4, r0
 80161e4:	b13b      	cbz	r3, 80161f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80161e6:	6803      	ldr	r3, [r0, #0]
 80161e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161ea:	4798      	blx	r3
 80161ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80161ee:	4283      	cmp	r3, r0
 80161f0:	d101      	bne.n	80161f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80161f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80161f4:	bd10      	pop	{r4, pc}
 80161f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80161f8:	e7fc      	b.n	80161f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80161fa:	bf00      	nop
 80161fc:	2000b36a 	.word	0x2000b36a

08016200 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016200:	4b0b      	ldr	r3, [pc, #44]	; (8016230 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8016202:	b510      	push	{r4, lr}
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	4604      	mov	r4, r0
 8016208:	b95b      	cbnz	r3, 8016222 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801620a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801620e:	2b02      	cmp	r3, #2
 8016210:	d007      	beq.n	8016222 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016212:	6840      	ldr	r0, [r0, #4]
 8016214:	f000 fbc8 	bl	80169a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016218:	b118      	cbz	r0, 8016222 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801621a:	6862      	ldr	r2, [r4, #4]
 801621c:	7a53      	ldrb	r3, [r2, #9]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d0fc      	beq.n	801621c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016222:	f7fd ff57 	bl	80140d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016226:	4620      	mov	r0, r4
 8016228:	f7ff ffd8 	bl	80161dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801622c:	bd10      	pop	{r4, pc}
 801622e:	bf00      	nop
 8016230:	2000b36a 	.word	0x2000b36a

08016234 <_ZN8touchgfx3HAL10initializeEv>:
 8016234:	b510      	push	{r4, lr}
 8016236:	4604      	mov	r4, r0
 8016238:	f7fd ff16 	bl	8014068 <_ZN8touchgfx10OSWrappers10initializeEv>
 801623c:	6860      	ldr	r0, [r4, #4]
 801623e:	6803      	ldr	r3, [r0, #0]
 8016240:	68db      	ldr	r3, [r3, #12]
 8016242:	4798      	blx	r3
 8016244:	68e0      	ldr	r0, [r4, #12]
 8016246:	6803      	ldr	r3, [r0, #0]
 8016248:	689b      	ldr	r3, [r3, #8]
 801624a:	4798      	blx	r3
 801624c:	6823      	ldr	r3, [r4, #0]
 801624e:	4620      	mov	r0, r4
 8016250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016256:	4718      	bx	r3

08016258 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016258:	b508      	push	{r3, lr}
 801625a:	290c      	cmp	r1, #12
 801625c:	d817      	bhi.n	801628e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801625e:	e8df f001 	tbb	[pc, r1]
 8016262:	090b      	.short	0x090b
 8016264:	0d0d0d07 	.word	0x0d0d0d07
 8016268:	1414140d 	.word	0x1414140d
 801626c:	1414      	.short	0x1414
 801626e:	0d          	.byte	0x0d
 801626f:	00          	.byte	0x00
 8016270:	2020      	movs	r0, #32
 8016272:	bd08      	pop	{r3, pc}
 8016274:	2018      	movs	r0, #24
 8016276:	e7fc      	b.n	8016272 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016278:	2010      	movs	r0, #16
 801627a:	e7fa      	b.n	8016272 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801627c:	4b05      	ldr	r3, [pc, #20]	; (8016294 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801627e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8016282:	4a05      	ldr	r2, [pc, #20]	; (8016298 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016284:	4805      	ldr	r0, [pc, #20]	; (801629c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016286:	f00f fa3b 	bl	8025700 <__assert_func>
 801628a:	2008      	movs	r0, #8
 801628c:	e7f1      	b.n	8016272 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801628e:	2000      	movs	r0, #0
 8016290:	e7ef      	b.n	8016272 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016292:	bf00      	nop
 8016294:	08029247 	.word	0x08029247
 8016298:	080295dc 	.word	0x080295dc
 801629c:	0802914e 	.word	0x0802914e

080162a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80162a0:	b570      	push	{r4, r5, r6, lr}
 80162a2:	460d      	mov	r5, r1
 80162a4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80162a8:	4616      	mov	r6, r2
 80162aa:	461c      	mov	r4, r3
 80162ac:	f7ff ffd4 	bl	8016258 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80162b0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80162b4:	10c0      	asrs	r0, r0, #3
 80162b6:	fb06 5101 	mla	r1, r6, r1, r5
 80162ba:	fb00 4001 	mla	r0, r0, r1, r4
 80162be:	bd70      	pop	{r4, r5, r6, pc}

080162c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80162c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162c4:	b08a      	sub	sp, #40	; 0x28
 80162c6:	f04f 0c00 	mov.w	ip, #0
 80162ca:	4604      	mov	r4, r0
 80162cc:	469a      	mov	sl, r3
 80162ce:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80162d2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80162d6:	f1b8 0f02 	cmp.w	r8, #2
 80162da:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80162de:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80162e2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80162e6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80162ea:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80162ee:	f8cd c020 	str.w	ip, [sp, #32]
 80162f2:	d030      	beq.n	8016356 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80162f4:	2bff      	cmp	r3, #255	; 0xff
 80162f6:	d12c      	bne.n	8016352 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80162f8:	4560      	cmp	r0, ip
 80162fa:	bf14      	ite	ne
 80162fc:	2004      	movne	r0, #4
 80162fe:	2001      	moveq	r0, #1
 8016300:	9204      	str	r2, [sp, #16]
 8016302:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016306:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801630a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801630e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016312:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801631a:	4620      	mov	r0, r4
 801631c:	f7ff ff5e 	bl	80161dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016320:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016324:	4603      	mov	r3, r0
 8016326:	4651      	mov	r1, sl
 8016328:	4620      	mov	r0, r4
 801632a:	e9cd 9700 	strd	r9, r7, [sp]
 801632e:	f7ff ffb7 	bl	80162a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016332:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016336:	9005      	str	r0, [sp, #20]
 8016338:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801633c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016340:	b106      	cbz	r6, 8016344 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8016342:	b98d      	cbnz	r5, 8016368 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016344:	4b12      	ldr	r3, [pc, #72]	; (8016390 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8016346:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801634a:	4a12      	ldr	r2, [pc, #72]	; (8016394 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801634c:	4812      	ldr	r0, [pc, #72]	; (8016398 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801634e:	f00f f9d7 	bl	8025700 <__assert_func>
 8016352:	2004      	movs	r0, #4
 8016354:	e7d4      	b.n	8016300 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016356:	2bff      	cmp	r3, #255	; 0xff
 8016358:	d104      	bne.n	8016364 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801635a:	2800      	cmp	r0, #0
 801635c:	bf14      	ite	ne
 801635e:	2040      	movne	r0, #64	; 0x40
 8016360:	2020      	moveq	r0, #32
 8016362:	e7cd      	b.n	8016300 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016364:	2040      	movs	r0, #64	; 0x40
 8016366:	e7cb      	b.n	8016300 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	4620      	mov	r0, r4
 801636c:	9d02      	ldr	r5, [sp, #8]
 801636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016370:	4798      	blx	r3
 8016372:	4228      	tst	r0, r5
 8016374:	d104      	bne.n	8016380 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016376:	4b09      	ldr	r3, [pc, #36]	; (801639c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016378:	f240 11b1 	movw	r1, #433	; 0x1b1
 801637c:	4a05      	ldr	r2, [pc, #20]	; (8016394 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801637e:	e7e5      	b.n	801634c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016380:	6860      	ldr	r0, [r4, #4]
 8016382:	a902      	add	r1, sp, #8
 8016384:	6803      	ldr	r3, [r0, #0]
 8016386:	685b      	ldr	r3, [r3, #4]
 8016388:	4798      	blx	r3
 801638a:	b00a      	add	sp, #40	; 0x28
 801638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016390:	080291ca 	.word	0x080291ca
 8016394:	0802947e 	.word	0x0802947e
 8016398:	0802914e 	.word	0x0802914e
 801639c:	08029202 	.word	0x08029202

080163a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80163a0:	b510      	push	{r4, lr}
 80163a2:	b08a      	sub	sp, #40	; 0x28
 80163a4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80163a8:	9408      	str	r4, [sp, #32]
 80163aa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80163ae:	9407      	str	r4, [sp, #28]
 80163b0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80163b4:	9406      	str	r4, [sp, #24]
 80163b6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80163ba:	9405      	str	r4, [sp, #20]
 80163bc:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80163c0:	9404      	str	r4, [sp, #16]
 80163c2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80163c6:	9403      	str	r4, [sp, #12]
 80163c8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80163cc:	9402      	str	r4, [sp, #8]
 80163ce:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80163d2:	e9cd 3400 	strd	r3, r4, [sp]
 80163d6:	4613      	mov	r3, r2
 80163d8:	2200      	movs	r2, #0
 80163da:	f7ff ff71 	bl	80162c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80163de:	b00a      	add	sp, #40	; 0x28
 80163e0:	bd10      	pop	{r4, pc}
	...

080163e4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80163e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163e6:	b08b      	sub	sp, #44	; 0x2c
 80163e8:	4616      	mov	r6, r2
 80163ea:	460d      	mov	r5, r1
 80163ec:	461f      	mov	r7, r3
 80163ee:	4604      	mov	r4, r0
 80163f0:	f7f6 f9a6 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 80163f4:	6803      	ldr	r3, [r0, #0]
 80163f6:	6a1b      	ldr	r3, [r3, #32]
 80163f8:	4798      	blx	r3
 80163fa:	4b0e      	ldr	r3, [pc, #56]	; (8016434 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80163fc:	2200      	movs	r2, #0
 80163fe:	4629      	mov	r1, r5
 8016400:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016404:	881b      	ldrh	r3, [r3, #0]
 8016406:	4620      	mov	r0, r4
 8016408:	9306      	str	r3, [sp, #24]
 801640a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801640e:	9305      	str	r3, [sp, #20]
 8016410:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016414:	9304      	str	r3, [sp, #16]
 8016416:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801641a:	9303      	str	r3, [sp, #12]
 801641c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016420:	9302      	str	r3, [sp, #8]
 8016422:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016426:	e9cd 7300 	strd	r7, r3, [sp]
 801642a:	4633      	mov	r3, r6
 801642c:	f7ff ff48 	bl	80162c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016430:	b00b      	add	sp, #44	; 0x2c
 8016432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016434:	2000b366 	.word	0x2000b366

08016438 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801643c:	461f      	mov	r7, r3
 801643e:	4b14      	ldr	r3, [pc, #80]	; (8016490 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016440:	b08a      	sub	sp, #40	; 0x28
 8016442:	4616      	mov	r6, r2
 8016444:	f8b3 8000 	ldrh.w	r8, [r3]
 8016448:	460d      	mov	r5, r1
 801644a:	4604      	mov	r4, r0
 801644c:	f7f6 f978 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8016450:	6803      	ldr	r3, [r0, #0]
 8016452:	6a1b      	ldr	r3, [r3, #32]
 8016454:	4798      	blx	r3
 8016456:	2302      	movs	r3, #2
 8016458:	9008      	str	r0, [sp, #32]
 801645a:	2200      	movs	r2, #0
 801645c:	4629      	mov	r1, r5
 801645e:	4620      	mov	r0, r4
 8016460:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016464:	2301      	movs	r3, #1
 8016466:	9305      	str	r3, [sp, #20]
 8016468:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801646c:	9304      	str	r3, [sp, #16]
 801646e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016472:	9303      	str	r3, [sp, #12]
 8016474:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016478:	9302      	str	r3, [sp, #8]
 801647a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801647e:	e9cd 7300 	strd	r7, r3, [sp]
 8016482:	4633      	mov	r3, r6
 8016484:	f7ff ff1c 	bl	80162c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016488:	b00a      	add	sp, #40	; 0x28
 801648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801648e:	bf00      	nop
 8016490:	2000b366 	.word	0x2000b366

08016494 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016498:	b08b      	sub	sp, #44	; 0x2c
 801649a:	469b      	mov	fp, r3
 801649c:	4604      	mov	r4, r0
 801649e:	4692      	mov	sl, r2
 80164a0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80164a4:	2600      	movs	r6, #0
 80164a6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80164aa:	4689      	mov	r9, r1
 80164ac:	2fff      	cmp	r7, #255	; 0xff
 80164ae:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80164b2:	9608      	str	r6, [sp, #32]
 80164b4:	bf14      	ite	ne
 80164b6:	2308      	movne	r3, #8
 80164b8:	2302      	moveq	r3, #2
 80164ba:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80164be:	f7ff fe8d 	bl	80161dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80164c2:	465a      	mov	r2, fp
 80164c4:	4603      	mov	r3, r0
 80164c6:	4651      	mov	r1, sl
 80164c8:	4620      	mov	r0, r4
 80164ca:	e9cd 8500 	strd	r8, r5, [sp]
 80164ce:	f7ff fee7 	bl	80162a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80164d2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80164d6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80164da:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164de:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80164e2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80164e6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80164ea:	6823      	ldr	r3, [r4, #0]
 80164ec:	9d02      	ldr	r5, [sp, #8]
 80164ee:	9005      	str	r0, [sp, #20]
 80164f0:	4620      	mov	r0, r4
 80164f2:	f8ad 601c 	strh.w	r6, [sp, #28]
 80164f6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80164fa:	f8cd 9020 	str.w	r9, [sp, #32]
 80164fe:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016504:	4798      	blx	r3
 8016506:	4228      	tst	r0, r5
 8016508:	d106      	bne.n	8016518 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801650a:	4b07      	ldr	r3, [pc, #28]	; (8016528 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801650c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8016510:	4a06      	ldr	r2, [pc, #24]	; (801652c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016512:	4807      	ldr	r0, [pc, #28]	; (8016530 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016514:	f00f f8f4 	bl	8025700 <__assert_func>
 8016518:	6860      	ldr	r0, [r4, #4]
 801651a:	a902      	add	r1, sp, #8
 801651c:	6803      	ldr	r3, [r0, #0]
 801651e:	685b      	ldr	r3, [r3, #4]
 8016520:	4798      	blx	r3
 8016522:	b00b      	add	sp, #44	; 0x2c
 8016524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016528:	08029202 	.word	0x08029202
 801652c:	08029547 	.word	0x08029547
 8016530:	0802914e 	.word	0x0802914e

08016534 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016538:	461f      	mov	r7, r3
 801653a:	4b0b      	ldr	r3, [pc, #44]	; (8016568 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801653c:	460d      	mov	r5, r1
 801653e:	4616      	mov	r6, r2
 8016540:	f8b3 8000 	ldrh.w	r8, [r3]
 8016544:	4604      	mov	r4, r0
 8016546:	f7f6 f8fb 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 801654a:	6803      	ldr	r3, [r0, #0]
 801654c:	6a1b      	ldr	r3, [r3, #32]
 801654e:	4798      	blx	r3
 8016550:	463b      	mov	r3, r7
 8016552:	4632      	mov	r2, r6
 8016554:	4629      	mov	r1, r5
 8016556:	e9cd 8000 	strd	r8, r0, [sp]
 801655a:	4620      	mov	r0, r4
 801655c:	f7ff fea0 	bl	80162a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016560:	b002      	add	sp, #8
 8016562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016566:	bf00      	nop
 8016568:	2000b366 	.word	0x2000b366

0801656c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016570:	4698      	mov	r8, r3
 8016572:	b088      	sub	sp, #32
 8016574:	2300      	movs	r3, #0
 8016576:	4617      	mov	r7, r2
 8016578:	4604      	mov	r4, r0
 801657a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801657e:	9306      	str	r3, [sp, #24]
 8016580:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016584:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016588:	f8ad 6010 	strh.w	r6, [sp, #16]
 801658c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8016590:	e9cd 3100 	strd	r3, r1, [sp]
 8016594:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016598:	f8ad 3014 	strh.w	r3, [sp, #20]
 801659c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80165a0:	f88d 301c 	strb.w	r3, [sp, #28]
 80165a4:	f7ff fe1a 	bl	80161dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80165a8:	4642      	mov	r2, r8
 80165aa:	4603      	mov	r3, r0
 80165ac:	4639      	mov	r1, r7
 80165ae:	4620      	mov	r0, r4
 80165b0:	f7ff ffc0 	bl	8016534 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80165b4:	4b16      	ldr	r3, [pc, #88]	; (8016610 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80165b6:	9003      	str	r0, [sp, #12]
 80165b8:	881b      	ldrh	r3, [r3, #0]
 80165ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165be:	f7f6 f8bf 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 80165c2:	6803      	ldr	r3, [r0, #0]
 80165c4:	6a1b      	ldr	r3, [r3, #32]
 80165c6:	4798      	blx	r3
 80165c8:	f88d 001e 	strb.w	r0, [sp, #30]
 80165cc:	f88d 001d 	strb.w	r0, [sp, #29]
 80165d0:	b106      	cbz	r6, 80165d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80165d2:	b935      	cbnz	r5, 80165e2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80165d4:	4b0f      	ldr	r3, [pc, #60]	; (8016614 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80165d6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80165da:	4a0f      	ldr	r2, [pc, #60]	; (8016618 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80165dc:	480f      	ldr	r0, [pc, #60]	; (801661c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80165de:	f00f f88f 	bl	8025700 <__assert_func>
 80165e2:	6823      	ldr	r3, [r4, #0]
 80165e4:	4620      	mov	r0, r4
 80165e6:	9d00      	ldr	r5, [sp, #0]
 80165e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ea:	4798      	blx	r3
 80165ec:	4228      	tst	r0, r5
 80165ee:	d104      	bne.n	80165fa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80165f0:	4b0b      	ldr	r3, [pc, #44]	; (8016620 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80165f2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80165f6:	4a08      	ldr	r2, [pc, #32]	; (8016618 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80165f8:	e7f0      	b.n	80165dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80165fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165fc:	4669      	mov	r1, sp
 80165fe:	6860      	ldr	r0, [r4, #4]
 8016600:	9306      	str	r3, [sp, #24]
 8016602:	6803      	ldr	r3, [r0, #0]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	4798      	blx	r3
 8016608:	b008      	add	sp, #32
 801660a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801660e:	bf00      	nop
 8016610:	2000b366 	.word	0x2000b366
 8016614:	080291ca 	.word	0x080291ca
 8016618:	08029330 	.word	0x08029330
 801661c:	0802914e 	.word	0x0802914e
 8016620:	08029202 	.word	0x08029202

08016624 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016624:	b570      	push	{r4, r5, r6, lr}
 8016626:	b08a      	sub	sp, #40	; 0x28
 8016628:	4604      	mov	r4, r0
 801662a:	466b      	mov	r3, sp
 801662c:	e883 0006 	stmia.w	r3, {r1, r2}
 8016630:	4b1f      	ldr	r3, [pc, #124]	; (80166b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	b933      	cbnz	r3, 8016644 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016636:	4b1f      	ldr	r3, [pc, #124]	; (80166b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016638:	f240 11f9 	movw	r1, #505	; 0x1f9
 801663c:	4a1e      	ldr	r2, [pc, #120]	; (80166b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801663e:	481f      	ldr	r0, [pc, #124]	; (80166bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016640:	f00f f85e 	bl	8025700 <__assert_func>
 8016644:	2300      	movs	r3, #0
 8016646:	f8bd 5000 	ldrh.w	r5, [sp]
 801664a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801664e:	9308      	str	r3, [sp, #32]
 8016650:	2301      	movs	r3, #1
 8016652:	9302      	str	r3, [sp, #8]
 8016654:	6803      	ldr	r3, [r0, #0]
 8016656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016658:	4798      	blx	r3
 801665a:	4632      	mov	r2, r6
 801665c:	4629      	mov	r1, r5
 801665e:	4603      	mov	r3, r0
 8016660:	4620      	mov	r0, r4
 8016662:	f7ff ff67 	bl	8016534 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016666:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016668:	9003      	str	r0, [sp, #12]
 801666a:	9305      	str	r3, [sp, #20]
 801666c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016670:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016674:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016678:	f8ad 301a 	strh.w	r3, [sp, #26]
 801667c:	4b10      	ldr	r3, [pc, #64]	; (80166c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801667e:	881b      	ldrh	r3, [r3, #0]
 8016680:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016684:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016688:	f7f6 f85a 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 801668c:	6803      	ldr	r3, [r0, #0]
 801668e:	6a1b      	ldr	r3, [r3, #32]
 8016690:	4798      	blx	r3
 8016692:	23ff      	movs	r3, #255	; 0xff
 8016694:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016698:	a902      	add	r1, sp, #8
 801669a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801669e:	6860      	ldr	r0, [r4, #4]
 80166a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80166a4:	6803      	ldr	r3, [r0, #0]
 80166a6:	685b      	ldr	r3, [r3, #4]
 80166a8:	4798      	blx	r3
 80166aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80166ac:	b00a      	add	sp, #40	; 0x28
 80166ae:	bd70      	pop	{r4, r5, r6, pc}
 80166b0:	2000b36b 	.word	0x2000b36b
 80166b4:	0802909b 	.word	0x0802909b
 80166b8:	080293d4 	.word	0x080293d4
 80166bc:	0802914e 	.word	0x0802914e
 80166c0:	2000b366 	.word	0x2000b366

080166c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80166c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166c6:	b08b      	sub	sp, #44	; 0x2c
 80166c8:	4604      	mov	r4, r0
 80166ca:	466d      	mov	r5, sp
 80166cc:	e885 0006 	stmia.w	r5, {r1, r2}
 80166d0:	461d      	mov	r5, r3
 80166d2:	2300      	movs	r3, #0
 80166d4:	f8bd 6000 	ldrh.w	r6, [sp]
 80166d8:	9308      	str	r3, [sp, #32]
 80166da:	2301      	movs	r3, #1
 80166dc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80166e0:	9302      	str	r3, [sp, #8]
 80166e2:	6803      	ldr	r3, [r0, #0]
 80166e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166e6:	4798      	blx	r3
 80166e8:	463a      	mov	r2, r7
 80166ea:	4631      	mov	r1, r6
 80166ec:	4603      	mov	r3, r0
 80166ee:	4620      	mov	r0, r4
 80166f0:	f7ff ff20 	bl	8016534 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80166f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80166f8:	9003      	str	r0, [sp, #12]
 80166fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80166fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016702:	9505      	str	r5, [sp, #20]
 8016704:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016708:	4b0d      	ldr	r3, [pc, #52]	; (8016740 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801670a:	881b      	ldrh	r3, [r3, #0]
 801670c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016710:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016712:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016716:	f7f6 f813 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 801671a:	6803      	ldr	r3, [r0, #0]
 801671c:	6a1b      	ldr	r3, [r3, #32]
 801671e:	4798      	blx	r3
 8016720:	23ff      	movs	r3, #255	; 0xff
 8016722:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016726:	a902      	add	r1, sp, #8
 8016728:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801672c:	6860      	ldr	r0, [r4, #4]
 801672e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016732:	6803      	ldr	r3, [r0, #0]
 8016734:	685b      	ldr	r3, [r3, #4]
 8016736:	4798      	blx	r3
 8016738:	4628      	mov	r0, r5
 801673a:	b00b      	add	sp, #44	; 0x2c
 801673c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801673e:	bf00      	nop
 8016740:	2000b366 	.word	0x2000b366

08016744 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016744:	b570      	push	{r4, r5, r6, lr}
 8016746:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801674a:	4604      	mov	r4, r0
 801674c:	b19b      	cbz	r3, 8016776 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801674e:	2002      	movs	r0, #2
 8016750:	f7fd fa04 	bl	8013b5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016754:	2300      	movs	r3, #0
 8016756:	4620      	mov	r0, r4
 8016758:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801675c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016760:	6823      	ldr	r3, [r4, #0]
 8016762:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016766:	f7ff fd39 	bl	80161dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801676a:	4601      	mov	r1, r0
 801676c:	4620      	mov	r0, r4
 801676e:	462b      	mov	r3, r5
 8016770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016774:	4718      	bx	r3
 8016776:	bd70      	pop	{r4, r5, r6, pc}

08016778 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016778:	4770      	bx	lr

0801677a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801677a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801677e:	1a13      	subs	r3, r2, r0
 8016780:	4258      	negs	r0, r3
 8016782:	4158      	adcs	r0, r3
 8016784:	4770      	bx	lr

08016786 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016786:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801678a:	1a9b      	subs	r3, r3, r2
 801678c:	2b00      	cmp	r3, #0
 801678e:	bfdc      	itt	le
 8016790:	6882      	ldrle	r2, [r0, #8]
 8016792:	189b      	addle	r3, r3, r2
 8016794:	2b01      	cmp	r3, #1
 8016796:	bfcc      	ite	gt
 8016798:	2000      	movgt	r0, #0
 801679a:	2001      	movle	r0, #1
 801679c:	4770      	bx	lr

0801679e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801679e:	6902      	ldr	r2, [r0, #16]
 80167a0:	6840      	ldr	r0, [r0, #4]
 80167a2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80167a6:	4770      	bx	lr

080167a8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80167a8:	6803      	ldr	r3, [r0, #0]
 80167aa:	691b      	ldr	r3, [r3, #16]
 80167ac:	4718      	bx	r3

080167ae <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80167ae:	4770      	bx	lr

080167b0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80167b0:	4770      	bx	lr
	...

080167b4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80167b4:	2301      	movs	r3, #1
 80167b6:	b570      	push	{r4, r5, r6, lr}
 80167b8:	7203      	strb	r3, [r0, #8]
 80167ba:	4604      	mov	r4, r0
 80167bc:	6840      	ldr	r0, [r0, #4]
 80167be:	6803      	ldr	r3, [r0, #0]
 80167c0:	699b      	ldr	r3, [r3, #24]
 80167c2:	4798      	blx	r3
 80167c4:	6803      	ldr	r3, [r0, #0]
 80167c6:	4605      	mov	r5, r0
 80167c8:	2b08      	cmp	r3, #8
 80167ca:	d01e      	beq.n	801680a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80167cc:	d80b      	bhi.n	80167e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167ce:	2b02      	cmp	r3, #2
 80167d0:	d027      	beq.n	8016822 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80167d2:	2b04      	cmp	r3, #4
 80167d4:	d011      	beq.n	80167fa <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80167d6:	2b01      	cmp	r3, #1
 80167d8:	d028      	beq.n	801682c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167da:	4b17      	ldr	r3, [pc, #92]	; (8016838 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80167dc:	218b      	movs	r1, #139	; 0x8b
 80167de:	4a17      	ldr	r2, [pc, #92]	; (801683c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80167e0:	4817      	ldr	r0, [pc, #92]	; (8016840 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80167e2:	f00e ff8d 	bl	8025700 <__assert_func>
 80167e6:	2b40      	cmp	r3, #64	; 0x40
 80167e8:	d020      	beq.n	801682c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167ea:	d801      	bhi.n	80167f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80167ec:	2b20      	cmp	r3, #32
 80167ee:	e7f3      	b.n	80167d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80167f0:	2b80      	cmp	r3, #128	; 0x80
 80167f2:	d01b      	beq.n	801682c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167f8:	e7ee      	b.n	80167d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	7f01      	ldrb	r1, [r0, #28]
 80167fe:	4620      	mov	r0, r4
 8016800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016802:	4798      	blx	r3
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016808:	e006      	b.n	8016818 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801680a:	6823      	ldr	r3, [r4, #0]
 801680c:	7f01      	ldrb	r1, [r0, #28]
 801680e:	4620      	mov	r0, r4
 8016810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016812:	4798      	blx	r3
 8016814:	6823      	ldr	r3, [r4, #0]
 8016816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016818:	4629      	mov	r1, r5
 801681a:	4620      	mov	r0, r4
 801681c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016820:	4718      	bx	r3
 8016822:	6823      	ldr	r3, [r4, #0]
 8016824:	4620      	mov	r0, r4
 8016826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016828:	4798      	blx	r3
 801682a:	e7f3      	b.n	8016814 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	4620      	mov	r0, r4
 8016830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016832:	4798      	blx	r3
 8016834:	e7e6      	b.n	8016804 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016836:	bf00      	nop
 8016838:	08029625 	.word	0x08029625
 801683c:	08029734 	.word	0x08029734
 8016840:	0802964a 	.word	0x0802964a

08016844 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016844:	b570      	push	{r4, r5, r6, lr}
 8016846:	4604      	mov	r4, r0
 8016848:	460e      	mov	r6, r1
 801684a:	6860      	ldr	r0, [r4, #4]
 801684c:	6803      	ldr	r3, [r0, #0]
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	4798      	blx	r3
 8016852:	2800      	cmp	r0, #0
 8016854:	d1f9      	bne.n	801684a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016856:	4d0b      	ldr	r5, [pc, #44]	; (8016884 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016858:	6828      	ldr	r0, [r5, #0]
 801685a:	6803      	ldr	r3, [r0, #0]
 801685c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801685e:	4798      	blx	r3
 8016860:	f7fd fc52 	bl	8014108 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016864:	6860      	ldr	r0, [r4, #4]
 8016866:	4631      	mov	r1, r6
 8016868:	6803      	ldr	r3, [r0, #0]
 801686a:	689b      	ldr	r3, [r3, #8]
 801686c:	4798      	blx	r3
 801686e:	6823      	ldr	r3, [r4, #0]
 8016870:	4620      	mov	r0, r4
 8016872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016874:	4798      	blx	r3
 8016876:	6828      	ldr	r0, [r5, #0]
 8016878:	6803      	ldr	r3, [r0, #0]
 801687a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801687e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016880:	4718      	bx	r3
 8016882:	bf00      	nop
 8016884:	2000b36c 	.word	0x2000b36c

08016888 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016888:	b508      	push	{r3, lr}
 801688a:	f7fd fc23 	bl	80140d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801688e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016892:	f7fd bc2d 	b.w	80140f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016896 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016896:	b510      	push	{r4, lr}
 8016898:	4604      	mov	r4, r0
 801689a:	6840      	ldr	r0, [r0, #4]
 801689c:	6803      	ldr	r3, [r0, #0]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	4798      	blx	r3
 80168a2:	b948      	cbnz	r0, 80168b8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168a4:	7a63      	ldrb	r3, [r4, #9]
 80168a6:	b13b      	cbz	r3, 80168b8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168a8:	7a23      	ldrb	r3, [r4, #8]
 80168aa:	b92b      	cbnz	r3, 80168b8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168ac:	6823      	ldr	r3, [r4, #0]
 80168ae:	4620      	mov	r0, r4
 80168b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168b6:	4718      	bx	r3
 80168b8:	bd10      	pop	{r4, pc}
	...

080168bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80168bc:	b510      	push	{r4, lr}
 80168be:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80168c2:	1b12      	subs	r2, r2, r4
 80168c4:	2a00      	cmp	r2, #0
 80168c6:	bfdc      	itt	le
 80168c8:	6883      	ldrle	r3, [r0, #8]
 80168ca:	18d2      	addle	r2, r2, r3
 80168cc:	2a01      	cmp	r2, #1
 80168ce:	dd18      	ble.n	8016902 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80168d0:	6843      	ldr	r3, [r0, #4]
 80168d2:	f101 021c 	add.w	r2, r1, #28
 80168d6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80168da:	f851 4b04 	ldr.w	r4, [r1], #4
 80168de:	4291      	cmp	r1, r2
 80168e0:	f843 4b04 	str.w	r4, [r3], #4
 80168e4:	d1f9      	bne.n	80168da <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80168e6:	880a      	ldrh	r2, [r1, #0]
 80168e8:	801a      	strh	r2, [r3, #0]
 80168ea:	788a      	ldrb	r2, [r1, #2]
 80168ec:	709a      	strb	r2, [r3, #2]
 80168ee:	68c3      	ldr	r3, [r0, #12]
 80168f0:	6882      	ldr	r2, [r0, #8]
 80168f2:	f3bf 8f5b 	dmb	ish
 80168f6:	3301      	adds	r3, #1
 80168f8:	429a      	cmp	r2, r3
 80168fa:	bfd8      	it	le
 80168fc:	1a9b      	suble	r3, r3, r2
 80168fe:	60c3      	str	r3, [r0, #12]
 8016900:	bd10      	pop	{r4, pc}
 8016902:	4b03      	ldr	r3, [pc, #12]	; (8016910 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016904:	2139      	movs	r1, #57	; 0x39
 8016906:	4a03      	ldr	r2, [pc, #12]	; (8016914 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016908:	4803      	ldr	r0, [pc, #12]	; (8016918 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801690a:	f00e fef9 	bl	8025700 <__assert_func>
 801690e:	bf00      	nop
 8016910:	08029670 	.word	0x08029670
 8016914:	08029764 	.word	0x08029764
 8016918:	0802964a 	.word	0x0802964a

0801691c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801691c:	b510      	push	{r4, lr}
 801691e:	6803      	ldr	r3, [r0, #0]
 8016920:	4604      	mov	r4, r0
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	4798      	blx	r3
 8016926:	b128      	cbz	r0, 8016934 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016928:	4b07      	ldr	r3, [pc, #28]	; (8016948 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801692a:	213f      	movs	r1, #63	; 0x3f
 801692c:	4a07      	ldr	r2, [pc, #28]	; (801694c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801692e:	4808      	ldr	r0, [pc, #32]	; (8016950 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016930:	f00e fee6 	bl	8025700 <__assert_func>
 8016934:	6923      	ldr	r3, [r4, #16]
 8016936:	68a2      	ldr	r2, [r4, #8]
 8016938:	f3bf 8f5b 	dmb	ish
 801693c:	3301      	adds	r3, #1
 801693e:	429a      	cmp	r2, r3
 8016940:	bfd8      	it	le
 8016942:	1a9b      	suble	r3, r3, r2
 8016944:	6123      	str	r3, [r4, #16]
 8016946:	bd10      	pop	{r4, pc}
 8016948:	08029693 	.word	0x08029693
 801694c:	080297b2 	.word	0x080297b2
 8016950:	0802964a 	.word	0x0802964a

08016954 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016954:	b570      	push	{r4, r5, r6, lr}
 8016956:	4604      	mov	r4, r0
 8016958:	6840      	ldr	r0, [r0, #4]
 801695a:	6803      	ldr	r3, [r0, #0]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	4798      	blx	r3
 8016960:	4605      	mov	r5, r0
 8016962:	b930      	cbnz	r0, 8016972 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016964:	7a23      	ldrb	r3, [r4, #8]
 8016966:	b123      	cbz	r3, 8016972 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016968:	6860      	ldr	r0, [r4, #4]
 801696a:	6803      	ldr	r3, [r0, #0]
 801696c:	695b      	ldr	r3, [r3, #20]
 801696e:	4798      	blx	r3
 8016970:	7225      	strb	r5, [r4, #8]
 8016972:	6860      	ldr	r0, [r4, #4]
 8016974:	6803      	ldr	r3, [r0, #0]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4798      	blx	r3
 801697a:	b928      	cbnz	r0, 8016988 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801697c:	6823      	ldr	r3, [r4, #0]
 801697e:	4620      	mov	r0, r4
 8016980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016986:	4718      	bx	r3
 8016988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801698c:	f7fd bbc8 	b.w	8014120 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016990 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016990:	b510      	push	{r4, lr}
 8016992:	6082      	str	r2, [r0, #8]
 8016994:	2200      	movs	r2, #0
 8016996:	4c03      	ldr	r4, [pc, #12]	; (80169a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016998:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801699c:	e9c0 4100 	strd	r4, r1, [r0]
 80169a0:	bd10      	pop	{r4, pc}
 80169a2:	bf00      	nop
 80169a4:	08029718 	.word	0x08029718

080169a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80169a8:	6840      	ldr	r0, [r0, #4]
 80169aa:	6803      	ldr	r3, [r0, #0]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	4718      	bx	r3

080169b0 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80169b0:	2001      	movs	r0, #1
 80169b2:	4770      	bx	lr

080169b4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80169b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169b8:	460d      	mov	r5, r1
 80169ba:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80169be:	b085      	sub	sp, #20
 80169c0:	4690      	mov	r8, r2
 80169c2:	4411      	add	r1, r2
 80169c4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80169c8:	4699      	mov	r9, r3
 80169ca:	6803      	ldr	r3, [r0, #0]
 80169cc:	60c1      	str	r1, [r0, #12]
 80169ce:	4604      	mov	r4, r0
 80169d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80169d2:	440a      	add	r2, r1
 80169d4:	6102      	str	r2, [r0, #16]
 80169d6:	695b      	ldr	r3, [r3, #20]
 80169d8:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80169dc:	4798      	blx	r3
 80169de:	2800      	cmp	r0, #0
 80169e0:	d039      	beq.n	8016a56 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80169e2:	44c8      	add	r8, r9
 80169e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80169e8:	4445      	add	r5, r8
 80169ea:	6823      	ldr	r3, [r4, #0]
 80169ec:	f10d 020f 	add.w	r2, sp, #15
 80169f0:	a903      	add	r1, sp, #12
 80169f2:	4620      	mov	r0, r4
 80169f4:	9200      	str	r2, [sp, #0]
 80169f6:	f10d 020d 	add.w	r2, sp, #13
 80169fa:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80169fe:	f10d 030e 	add.w	r3, sp, #14
 8016a02:	47c0      	blx	r8
 8016a04:	b1f8      	cbz	r0, 8016a46 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016a06:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016a0a:	7a20      	ldrb	r0, [r4, #8]
 8016a0c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016a10:	4358      	muls	r0, r3
 8016a12:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016a16:	1c43      	adds	r3, r0, #1
 8016a18:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016a1c:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016a20:	121b      	asrs	r3, r3, #8
 8016a22:	fb10 f003 	smulbb	r0, r0, r3
 8016a26:	b283      	uxth	r3, r0
 8016a28:	1c58      	adds	r0, r3, #1
 8016a2a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016a2e:	6823      	ldr	r3, [r4, #0]
 8016a30:	1200      	asrs	r0, r0, #8
 8016a32:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016a36:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016a3a:	28ff      	cmp	r0, #255	; 0xff
 8016a3c:	d10e      	bne.n	8016a5c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016a3e:	9100      	str	r1, [sp, #0]
 8016a40:	4629      	mov	r1, r5
 8016a42:	4620      	mov	r0, r4
 8016a44:	47c0      	blx	r8
 8016a46:	68e3      	ldr	r3, [r4, #12]
 8016a48:	3e01      	subs	r6, #1
 8016a4a:	f105 0503 	add.w	r5, r5, #3
 8016a4e:	f103 0301 	add.w	r3, r3, #1
 8016a52:	60e3      	str	r3, [r4, #12]
 8016a54:	d1c9      	bne.n	80169ea <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016a56:	b005      	add	sp, #20
 8016a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a5c:	fa1f fc80 	uxth.w	ip, r0
 8016a60:	43c0      	mvns	r0, r0
 8016a62:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016a66:	fb12 f20c 	smulbb	r2, r2, ip
 8016a6a:	b2c0      	uxtb	r0, r0
 8016a6c:	fb13 f30c 	smulbb	r3, r3, ip
 8016a70:	fb0e 2200 	mla	r2, lr, r0, r2
 8016a74:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016a78:	fb11 f10c 	smulbb	r1, r1, ip
 8016a7c:	fb0e 3300 	mla	r3, lr, r0, r3
 8016a80:	f895 e000 	ldrb.w	lr, [r5]
 8016a84:	b292      	uxth	r2, r2
 8016a86:	b29b      	uxth	r3, r3
 8016a88:	fb0e 1000 	mla	r0, lr, r0, r1
 8016a8c:	1c59      	adds	r1, r3, #1
 8016a8e:	b280      	uxth	r0, r0
 8016a90:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016a94:	1c51      	adds	r1, r2, #1
 8016a96:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016a9a:	1c41      	adds	r1, r0, #1
 8016a9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016aa0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016aa4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016aa8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016aac:	9000      	str	r0, [sp, #0]
 8016aae:	e7c7      	b.n	8016a40 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016ab0 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016ab0:	f89d 0000 	ldrb.w	r0, [sp]
 8016ab4:	704b      	strb	r3, [r1, #1]
 8016ab6:	7008      	strb	r0, [r1, #0]
 8016ab8:	708a      	strb	r2, [r1, #2]
 8016aba:	4770      	bx	lr

08016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016abc:	b507      	push	{r0, r1, r2, lr}
 8016abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016ac2:	ab01      	add	r3, sp, #4
 8016ac4:	6809      	ldr	r1, [r1, #0]
 8016ac6:	6800      	ldr	r0, [r0, #0]
 8016ac8:	f003 fa2a 	bl	8019f20 <_ZN8touchgfx6muldivElllRl>
 8016acc:	b003      	add	sp, #12
 8016ace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016ad4 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016ad4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016ad8:	fb90 f3f2 	sdiv	r3, r0, r2
 8016adc:	fb03 0312 	mls	r3, r3, r2, r0
 8016ae0:	4413      	add	r3, r2
 8016ae2:	fb93 f0f2 	sdiv	r0, r3, r2
 8016ae6:	fb02 3010 	mls	r0, r2, r0, r3
 8016aea:	4b0a      	ldr	r3, [pc, #40]	; (8016b14 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016aec:	285a      	cmp	r0, #90	; 0x5a
 8016aee:	dc02      	bgt.n	8016af6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016af0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016af4:	4770      	bx	lr
 8016af6:	28b4      	cmp	r0, #180	; 0xb4
 8016af8:	dc02      	bgt.n	8016b00 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016afa:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016afe:	e7f7      	b.n	8016af0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016b00:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016b04:	bfd4      	ite	le
 8016b06:	38b4      	suble	r0, #180	; 0xb4
 8016b08:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016b0c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016b10:	4240      	negs	r0, r0
 8016b12:	4770      	bx	lr
 8016b14:	0802980c 	.word	0x0802980c

08016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8016b18:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016b1c:	fb90 f3f2 	sdiv	r3, r0, r2
 8016b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b22:	fb03 0012 	mls	r0, r3, r2, r0
 8016b26:	4410      	add	r0, r2
 8016b28:	fb90 f4f2 	sdiv	r4, r0, r2
 8016b2c:	fb02 0414 	mls	r4, r2, r4, r0
 8016b30:	f004 061f 	and.w	r6, r4, #31
 8016b34:	1164      	asrs	r4, r4, #5
 8016b36:	4620      	mov	r0, r4
 8016b38:	f7ff ffcc 	bl	8016ad4 <_ZN8touchgfx7CWRUtil4sineEi>
 8016b3c:	4605      	mov	r5, r0
 8016b3e:	b90e      	cbnz	r6, 8016b44 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8016b40:	b002      	add	sp, #8
 8016b42:	bd70      	pop	{r4, r5, r6, pc}
 8016b44:	1c60      	adds	r0, r4, #1
 8016b46:	f7ff ffc5 	bl	8016ad4 <_ZN8touchgfx7CWRUtil4sineEi>
 8016b4a:	ab01      	add	r3, sp, #4
 8016b4c:	2220      	movs	r2, #32
 8016b4e:	4631      	mov	r1, r6
 8016b50:	1b40      	subs	r0, r0, r5
 8016b52:	f003 f9e5 	bl	8019f20 <_ZN8touchgfx6muldivElllRl>
 8016b56:	4428      	add	r0, r5
 8016b58:	e7f2      	b.n	8016b40 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8016b5a:	b508      	push	{r3, lr}
 8016b5c:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8016b60:	f7ff ffda 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016b64:	bd08      	pop	{r3, pc}
	...

08016b68 <_ZN8touchgfx6CircleC1Ev>:
 8016b68:	b510      	push	{r4, lr}
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	f000 fce2 	bl	8017534 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016b70:	4b08      	ldr	r3, [pc, #32]	; (8016b94 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8016b72:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016b76:	4620      	mov	r0, r4
 8016b78:	6023      	str	r3, [r4, #0]
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8016b80:	f24b 4205 	movw	r2, #46085	; 0xb405
 8016b84:	60a3      	str	r3, [r4, #8]
 8016b86:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016b8a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016b8e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8016b92:	bd10      	pop	{r4, pc}
 8016b94:	080298cc 	.word	0x080298cc

08016b98 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016b98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b9c:	4606      	mov	r6, r0
 8016b9e:	6810      	ldr	r0, [r2, #0]
 8016ba0:	4698      	mov	r8, r3
 8016ba2:	4691      	mov	r9, r2
 8016ba4:	460f      	mov	r7, r1
 8016ba6:	f7ff ffb7 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016baa:	a902      	add	r1, sp, #8
 8016bac:	2402      	movs	r4, #2
 8016bae:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016bb2:	4640      	mov	r0, r8
 8016bb4:	f7ff ff82 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016bb8:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8016bba:	fb90 f0f4 	sdiv	r0, r0, r4
 8016bbe:	4405      	add	r5, r0
 8016bc0:	f8d9 0000 	ldr.w	r0, [r9]
 8016bc4:	f7ff ffc9 	bl	8016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016bc8:	a902      	add	r1, sp, #8
 8016bca:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016bce:	4640      	mov	r0, r8
 8016bd0:	f7ff ff74 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016bd4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	fb90 f0f4 	sdiv	r0, r0, r4
 8016bdc:	1a12      	subs	r2, r2, r0
 8016bde:	4638      	mov	r0, r7
 8016be0:	f00d fb81 	bl	80242e6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016be4:	b003      	add	sp, #12
 8016be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016bea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8016bea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016bee:	9e08      	ldr	r6, [sp, #32]
 8016bf0:	4698      	mov	r8, r3
 8016bf2:	4615      	mov	r5, r2
 8016bf4:	460f      	mov	r7, r1
 8016bf6:	6830      	ldr	r0, [r6, #0]
 8016bf8:	2402      	movs	r4, #2
 8016bfa:	f7ff ff8d 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016bfe:	a902      	add	r1, sp, #8
 8016c00:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c06:	f7ff ff59 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c0a:	682d      	ldr	r5, [r5, #0]
 8016c0c:	fb90 f0f4 	sdiv	r0, r0, r4
 8016c10:	4405      	add	r5, r0
 8016c12:	6830      	ldr	r0, [r6, #0]
 8016c14:	f7ff ffa1 	bl	8016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016c18:	a902      	add	r1, sp, #8
 8016c1a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c20:	f7ff ff4c 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016c24:	f8d8 2000 	ldr.w	r2, [r8]
 8016c28:	4629      	mov	r1, r5
 8016c2a:	fb90 f0f4 	sdiv	r0, r0, r4
 8016c2e:	1a12      	subs	r2, r2, r0
 8016c30:	4638      	mov	r0, r7
 8016c32:	f00d fae7 	bl	8024204 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016c36:	b002      	add	sp, #8
 8016c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c3c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016c3c:	b513      	push	{r0, r1, r4, lr}
 8016c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8016c42:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8016c46:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8016c4a:	f7ff ffce 	bl	8016bea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016c4e:	b002      	add	sp, #8
 8016c50:	bd10      	pop	{r4, pc}

08016c52 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016c52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c54:	680e      	ldr	r6, [r1, #0]
 8016c56:	681f      	ldr	r7, [r3, #0]
 8016c58:	9807      	ldr	r0, [sp, #28]
 8016c5a:	42be      	cmp	r6, r7
 8016c5c:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8016c60:	bfb8      	it	lt
 8016c62:	601e      	strlt	r6, [r3, #0]
 8016c64:	680b      	ldr	r3, [r1, #0]
 8016c66:	6829      	ldr	r1, [r5, #0]
 8016c68:	428b      	cmp	r3, r1
 8016c6a:	bfc8      	it	gt
 8016c6c:	602b      	strgt	r3, [r5, #0]
 8016c6e:	6813      	ldr	r3, [r2, #0]
 8016c70:	6821      	ldr	r1, [r4, #0]
 8016c72:	428b      	cmp	r3, r1
 8016c74:	bfb8      	it	lt
 8016c76:	6023      	strlt	r3, [r4, #0]
 8016c78:	6813      	ldr	r3, [r2, #0]
 8016c7a:	6802      	ldr	r2, [r0, #0]
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	bfc8      	it	gt
 8016c80:	6003      	strgt	r3, [r0, #0]
 8016c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c84 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c88:	b089      	sub	sp, #36	; 0x24
 8016c8a:	4690      	mov	r8, r2
 8016c8c:	4606      	mov	r6, r0
 8016c8e:	2402      	movs	r4, #2
 8016c90:	ad08      	add	r5, sp, #32
 8016c92:	6808      	ldr	r0, [r1, #0]
 8016c94:	461f      	mov	r7, r3
 8016c96:	4689      	mov	r9, r1
 8016c98:	f7ff ff3e 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016c9c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016ca0:	4640      	mov	r0, r8
 8016ca2:	4629      	mov	r1, r5
 8016ca4:	f7ff ff0a 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ca8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8016caa:	fb90 f0f4 	sdiv	r0, r0, r4
 8016cae:	4418      	add	r0, r3
 8016cb0:	9005      	str	r0, [sp, #20]
 8016cb2:	f8d9 0000 	ldr.w	r0, [r9]
 8016cb6:	f7ff ff50 	bl	8016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016cba:	4629      	mov	r1, r5
 8016cbc:	9007      	str	r0, [sp, #28]
 8016cbe:	4640      	mov	r0, r8
 8016cc0:	f7ff fefc 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016cc6:	aa08      	add	r2, sp, #32
 8016cc8:	a905      	add	r1, sp, #20
 8016cca:	fb90 f0f4 	sdiv	r0, r0, r4
 8016cce:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8016cd0:	1a24      	subs	r4, r4, r0
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	f842 4d08 	str.w	r4, [r2, #-8]!
 8016cd8:	9302      	str	r3, [sp, #8]
 8016cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cdc:	9301      	str	r3, [sp, #4]
 8016cde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ce0:	9300      	str	r3, [sp, #0]
 8016ce2:	463b      	mov	r3, r7
 8016ce4:	f7ff ffb5 	bl	8016c52 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ce8:	b009      	add	sp, #36	; 0x24
 8016cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016cee <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8016cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cf2:	4291      	cmp	r1, r2
 8016cf4:	b08d      	sub	sp, #52	; 0x34
 8016cf6:	461e      	mov	r6, r3
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8016cfe:	ad0c      	add	r5, sp, #48	; 0x30
 8016d00:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8016d04:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8016d08:	bfc8      	it	gt
 8016d0a:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8016d0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016d12:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8016d16:	1a9b      	subs	r3, r3, r2
 8016d18:	a907      	add	r1, sp, #28
 8016d1a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016d1e:	bfa2      	ittt	ge
 8016d20:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8016d24:	2200      	movge	r2, #0
 8016d26:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8016d2a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8016d2c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016d2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016d32:	f845 3d04 	str.w	r3, [r5, #-4]!
 8016d36:	4633      	mov	r3, r6
 8016d38:	462a      	mov	r2, r5
 8016d3a:	9700      	str	r7, [sp, #0]
 8016d3c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016d40:	f7ff ffa0 	bl	8016c84 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016d44:	9b07      	ldr	r3, [sp, #28]
 8016d46:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8016d4a:	f103 0120 	add.w	r1, r3, #32
 8016d4e:	fb91 f3f0 	sdiv	r3, r1, r0
 8016d52:	fb00 1313 	mls	r3, r0, r3, r1
 8016d56:	1ac3      	subs	r3, r0, r3
 8016d58:	fb93 f2f0 	sdiv	r2, r3, r0
 8016d5c:	fb00 3312 	mls	r3, r0, r2, r3
 8016d60:	440b      	add	r3, r1
 8016d62:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8016d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d68:	9906      	ldr	r1, [sp, #24]
 8016d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016d6c:	4291      	cmp	r1, r2
 8016d6e:	db11      	blt.n	8016d94 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8016d70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016d72:	4651      	mov	r1, sl
 8016d74:	9700      	str	r7, [sp, #0]
 8016d76:	4620      	mov	r0, r4
 8016d78:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016d7c:	462a      	mov	r2, r5
 8016d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d80:	4633      	mov	r3, r6
 8016d82:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016d86:	f7ff ff7d 	bl	8016c84 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d8c:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8016d90:	9309      	str	r3, [sp, #36]	; 0x24
 8016d92:	e7e8      	b.n	8016d66 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8016d94:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8016d98:	4291      	cmp	r1, r2
 8016d9a:	dd0c      	ble.n	8016db6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8016d9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016d9e:	a906      	add	r1, sp, #24
 8016da0:	9700      	str	r7, [sp, #0]
 8016da2:	4620      	mov	r0, r4
 8016da4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016da8:	462a      	mov	r2, r5
 8016daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8016dac:	4633      	mov	r3, r6
 8016dae:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016db2:	f7ff ff67 	bl	8016c84 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	f040 8097 	bne.w	8016eec <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8016dbe:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8016dc2:	1a52      	subs	r2, r2, r1
 8016dc4:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8016dc8:	da0a      	bge.n	8016de0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8016dca:	462a      	mov	r2, r5
 8016dcc:	a90a      	add	r1, sp, #40	; 0x28
 8016dce:	9700      	str	r7, [sp, #0]
 8016dd0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8016dd4:	4633      	mov	r3, r6
 8016dd6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016dda:	4620      	mov	r0, r4
 8016ddc:	f7ff ff52 	bl	8016c84 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016de0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8016de4:	2bb3      	cmp	r3, #179	; 0xb3
 8016de6:	d87e      	bhi.n	8016ee6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8016de8:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8016dec:	1a1b      	subs	r3, r3, r0
 8016dee:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016df2:	da78      	bge.n	8016ee6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8016df4:	ad0c      	add	r5, sp, #48	; 0x30
 8016df6:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8016dfa:	f7ff fe8d 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016dfe:	f04f 0a02 	mov.w	sl, #2
 8016e02:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016e06:	4658      	mov	r0, fp
 8016e08:	4629      	mov	r1, r5
 8016e0a:	f7ff fe57 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016e10:	18c3      	adds	r3, r0, r3
 8016e12:	9807      	ldr	r0, [sp, #28]
 8016e14:	9305      	str	r3, [sp, #20]
 8016e16:	f7ff fea0 	bl	8016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016e1a:	4629      	mov	r1, r5
 8016e1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e1e:	4658      	mov	r0, fp
 8016e20:	f7ff fe4c 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e26:	9a05      	ldr	r2, [sp, #20]
 8016e28:	a90a      	add	r1, sp, #40	; 0x28
 8016e2a:	1a1b      	subs	r3, r3, r0
 8016e2c:	9700      	str	r7, [sp, #0]
 8016e2e:	4620      	mov	r0, r4
 8016e30:	9304      	str	r3, [sp, #16]
 8016e32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016e34:	fb93 f3fa 	sdiv	r3, r3, sl
 8016e38:	1ad2      	subs	r2, r2, r3
 8016e3a:	920a      	str	r2, [sp, #40]	; 0x28
 8016e3c:	9a04      	ldr	r2, [sp, #16]
 8016e3e:	1ad3      	subs	r3, r2, r3
 8016e40:	462a      	mov	r2, r5
 8016e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e44:	4633      	mov	r3, r6
 8016e46:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016e4a:	f7ff ff02 	bl	8016c52 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016e4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016e50:	9a05      	ldr	r2, [sp, #20]
 8016e52:	a90a      	add	r1, sp, #40	; 0x28
 8016e54:	4620      	mov	r0, r4
 8016e56:	9700      	str	r7, [sp, #0]
 8016e58:	fb93 f3fa 	sdiv	r3, r3, sl
 8016e5c:	189a      	adds	r2, r3, r2
 8016e5e:	920a      	str	r2, [sp, #40]	; 0x28
 8016e60:	9a04      	ldr	r2, [sp, #16]
 8016e62:	4413      	add	r3, r2
 8016e64:	462a      	mov	r2, r5
 8016e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e68:	4633      	mov	r3, r6
 8016e6a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016e6e:	f7ff fef0 	bl	8016c52 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016e72:	9806      	ldr	r0, [sp, #24]
 8016e74:	f7ff fe50 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016e78:	4629      	mov	r1, r5
 8016e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e7c:	4658      	mov	r0, fp
 8016e7e:	f7ff fe1d 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016e84:	18c3      	adds	r3, r0, r3
 8016e86:	9806      	ldr	r0, [sp, #24]
 8016e88:	9304      	str	r3, [sp, #16]
 8016e8a:	f7ff fe66 	bl	8016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016e8e:	4629      	mov	r1, r5
 8016e90:	900b      	str	r0, [sp, #44]	; 0x2c
 8016e92:	4658      	mov	r0, fp
 8016e94:	f7ff fe12 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e9a:	9a04      	ldr	r2, [sp, #16]
 8016e9c:	a90a      	add	r1, sp, #40	; 0x28
 8016e9e:	eba3 0b00 	sub.w	fp, r3, r0
 8016ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	9700      	str	r7, [sp, #0]
 8016ea8:	fb93 f3fa 	sdiv	r3, r3, sl
 8016eac:	1ad2      	subs	r2, r2, r3
 8016eae:	ebab 0303 	sub.w	r3, fp, r3
 8016eb2:	920a      	str	r2, [sp, #40]	; 0x28
 8016eb4:	462a      	mov	r2, r5
 8016eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016eb8:	4633      	mov	r3, r6
 8016eba:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ebe:	f7ff fec8 	bl	8016c52 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ec2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016ec4:	9700      	str	r7, [sp, #0]
 8016ec6:	462a      	mov	r2, r5
 8016ec8:	a90a      	add	r1, sp, #40	; 0x28
 8016eca:	4620      	mov	r0, r4
 8016ecc:	fb93 fafa 	sdiv	sl, r3, sl
 8016ed0:	9b04      	ldr	r3, [sp, #16]
 8016ed2:	4453      	add	r3, sl
 8016ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8016ed6:	eb0a 030b 	add.w	r3, sl, fp
 8016eda:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ee0:	4633      	mov	r3, r6
 8016ee2:	f7ff feb6 	bl	8016c52 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ee6:	b00d      	add	sp, #52	; 0x34
 8016ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016eee:	a907      	add	r1, sp, #28
 8016ef0:	9700      	str	r7, [sp, #0]
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016ef8:	462a      	mov	r2, r5
 8016efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8016efc:	4633      	mov	r3, r6
 8016efe:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016f02:	f7ff febf 	bl	8016c84 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016f06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016f0a:	a906      	add	r1, sp, #24
 8016f0c:	9700      	str	r7, [sp, #0]
 8016f0e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016f12:	462a      	mov	r2, r5
 8016f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f16:	4633      	mov	r3, r6
 8016f18:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016f1c:	e75d      	b.n	8016dda <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08016f1e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8016f1e:	b530      	push	{r4, r5, lr}
 8016f20:	4604      	mov	r4, r0
 8016f22:	4608      	mov	r0, r1
 8016f24:	4611      	mov	r1, r2
 8016f26:	461a      	mov	r2, r3
 8016f28:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016f2c:	b089      	sub	sp, #36	; 0x24
 8016f2e:	2500      	movs	r5, #0
 8016f30:	015b      	lsls	r3, r3, #5
 8016f32:	9505      	str	r5, [sp, #20]
 8016f34:	9304      	str	r3, [sp, #16]
 8016f36:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016f3a:	015b      	lsls	r3, r3, #5
 8016f3c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8016f40:	ab07      	add	r3, sp, #28
 8016f42:	2520      	movs	r5, #32
 8016f44:	9302      	str	r3, [sp, #8]
 8016f46:	ab06      	add	r3, sp, #24
 8016f48:	9301      	str	r3, [sp, #4]
 8016f4a:	ab05      	add	r3, sp, #20
 8016f4c:	9300      	str	r3, [sp, #0]
 8016f4e:	ab04      	add	r3, sp, #16
 8016f50:	f7ff fecd 	bl	8016cee <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8016f54:	9a04      	ldr	r2, [sp, #16]
 8016f56:	9805      	ldr	r0, [sp, #20]
 8016f58:	9b06      	ldr	r3, [sp, #24]
 8016f5a:	9907      	ldr	r1, [sp, #28]
 8016f5c:	fb92 f2f5 	sdiv	r2, r2, r5
 8016f60:	fb90 f0f5 	sdiv	r0, r0, r5
 8016f64:	fb93 f3f5 	sdiv	r3, r3, r5
 8016f68:	fb91 f1f5 	sdiv	r1, r1, r5
 8016f6c:	b292      	uxth	r2, r2
 8016f6e:	3002      	adds	r0, #2
 8016f70:	b29b      	uxth	r3, r3
 8016f72:	3102      	adds	r1, #2
 8016f74:	1a80      	subs	r0, r0, r2
 8016f76:	3a01      	subs	r2, #1
 8016f78:	1ac9      	subs	r1, r1, r3
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	80a0      	strh	r0, [r4, #4]
 8016f7e:	4620      	mov	r0, r4
 8016f80:	8022      	strh	r2, [r4, #0]
 8016f82:	8063      	strh	r3, [r4, #2]
 8016f84:	80e1      	strh	r1, [r4, #6]
 8016f86:	b009      	add	sp, #36	; 0x24
 8016f88:	bd30      	pop	{r4, r5, pc}

08016f8a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8016f8a:	b510      	push	{r4, lr}
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8016f92:	f7ff ffc4 	bl	8016f1e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8016f96:	4620      	mov	r0, r4
 8016f98:	bd10      	pop	{r4, pc}

08016f9a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8016f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f9e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016fa0:	b0ba      	sub	sp, #232	; 0xe8
 8016fa2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8016fa4:	4604      	mov	r4, r0
 8016fa6:	9303      	str	r3, [sp, #12]
 8016fa8:	460f      	mov	r7, r1
 8016faa:	429a      	cmp	r2, r3
 8016fac:	9204      	str	r2, [sp, #16]
 8016fae:	ae0a      	add	r6, sp, #40	; 0x28
 8016fb0:	bfb8      	it	lt
 8016fb2:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8016fb6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8016fba:	1a9b      	subs	r3, r3, r2
 8016fbc:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016fc0:	bfa2      	ittt	ge
 8016fc2:	2200      	movge	r2, #0
 8016fc4:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8016fc8:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8016fcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016fce:	2a00      	cmp	r2, #0
 8016fd0:	d131      	bne.n	8017036 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8016fd2:	463a      	mov	r2, r7
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	a80b      	add	r0, sp, #44	; 0x2c
 8016fd8:	f00c ffbc 	bl	8023f54 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016fdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016fde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016fe0:	9205      	str	r2, [sp, #20]
 8016fe2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8016fe6:	9306      	str	r3, [sp, #24]
 8016fe8:	dc6f      	bgt.n	80170ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8016fea:	9b03      	ldr	r3, [sp, #12]
 8016fec:	a90b      	add	r1, sp, #44	; 0x2c
 8016fee:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	9307      	str	r3, [sp, #28]
 8016ff6:	016d      	lsls	r5, r5, #5
 8016ff8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8016ffc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017000:	aa07      	add	r2, sp, #28
 8017002:	930a      	str	r3, [sp, #40]	; 0x28
 8017004:	4633      	mov	r3, r6
 8017006:	f7ff fdc7 	bl	8016b98 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801700a:	9f07      	ldr	r7, [sp, #28]
 801700c:	2d00      	cmp	r5, #0
 801700e:	d165      	bne.n	80170dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8017010:	3720      	adds	r7, #32
 8017012:	4639      	mov	r1, r7
 8017014:	9a04      	ldr	r2, [sp, #16]
 8017016:	9b06      	ldr	r3, [sp, #24]
 8017018:	442f      	add	r7, r5
 801701a:	4291      	cmp	r1, r2
 801701c:	dc6b      	bgt.n	80170f6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 801701e:	9a05      	ldr	r2, [sp, #20]
 8017020:	4620      	mov	r0, r4
 8017022:	9107      	str	r1, [sp, #28]
 8017024:	a90b      	add	r1, sp, #44	; 0x2c
 8017026:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801702a:	aa07      	add	r2, sp, #28
 801702c:	930a      	str	r3, [sp, #40]	; 0x28
 801702e:	4633      	mov	r3, r6
 8017030:	f7ff fe04 	bl	8016c3c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017034:	e7ed      	b.n	8017012 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8017036:	f9b1 c000 	ldrsh.w	ip, [r1]
 801703a:	88bd      	ldrh	r5, [r7, #4]
 801703c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8017040:	4465      	add	r5, ip
 8017042:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8017046:	b22d      	sxth	r5, r5
 8017048:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 801704c:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8017050:	2d00      	cmp	r5, #0
 8017052:	bfb8      	it	lt
 8017054:	426d      	neglt	r5, r5
 8017056:	2b00      	cmp	r3, #0
 8017058:	bfb8      	it	lt
 801705a:	425b      	neglt	r3, r3
 801705c:	429d      	cmp	r5, r3
 801705e:	bfb8      	it	lt
 8017060:	461d      	movlt	r5, r3
 8017062:	88fb      	ldrh	r3, [r7, #6]
 8017064:	4403      	add	r3, r0
 8017066:	116d      	asrs	r5, r5, #5
 8017068:	b21b      	sxth	r3, r3
 801706a:	3501      	adds	r5, #1
 801706c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8017070:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8017074:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017078:	2b00      	cmp	r3, #0
 801707a:	f100 0001 	add.w	r0, r0, #1
 801707e:	bfb8      	it	lt
 8017080:	425b      	neglt	r3, r3
 8017082:	2900      	cmp	r1, #0
 8017084:	ea4f 0060 	mov.w	r0, r0, asr #1
 8017088:	bfb8      	it	lt
 801708a:	4249      	neglt	r1, r1
 801708c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017090:	428b      	cmp	r3, r1
 8017092:	bfb8      	it	lt
 8017094:	460b      	movlt	r3, r1
 8017096:	115b      	asrs	r3, r3, #5
 8017098:	3301      	adds	r3, #1
 801709a:	435b      	muls	r3, r3
 801709c:	fb05 3505 	mla	r5, r5, r5, r3
 80170a0:	2302      	movs	r3, #2
 80170a2:	fb92 f2f3 	sdiv	r2, r2, r3
 80170a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170a8:	1a9a      	subs	r2, r3, r2
 80170aa:	920a      	str	r2, [sp, #40]	; 0x28
 80170ac:	f7ff fd12 	bl	8016ad4 <_ZN8touchgfx7CWRUtil4sineEi>
 80170b0:	a90b      	add	r1, sp, #44	; 0x2c
 80170b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80170b4:	4630      	mov	r0, r6
 80170b6:	f7ff fd01 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80170ba:	2320      	movs	r3, #32
 80170bc:	fb90 f0f3 	sdiv	r0, r0, r3
 80170c0:	4340      	muls	r0, r0
 80170c2:	42a8      	cmp	r0, r5
 80170c4:	dd85      	ble.n	8016fd2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80170c6:	2401      	movs	r4, #1
 80170c8:	e036      	b.n	8017138 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 80170ca:	2102      	movs	r1, #2
 80170cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80170d0:	4413      	add	r3, r2
 80170d2:	9306      	str	r3, [sp, #24]
 80170d4:	fb93 f3f1 	sdiv	r3, r3, r1
 80170d8:	9305      	str	r3, [sp, #20]
 80170da:	e786      	b.n	8016fea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80170dc:	f107 0320 	add.w	r3, r7, #32
 80170e0:	fb93 f7f5 	sdiv	r7, r3, r5
 80170e4:	fb05 3717 	mls	r7, r5, r7, r3
 80170e8:	1bea      	subs	r2, r5, r7
 80170ea:	fb92 f7f5 	sdiv	r7, r2, r5
 80170ee:	fb05 2717 	mls	r7, r5, r7, r2
 80170f2:	441f      	add	r7, r3
 80170f4:	e78d      	b.n	8017012 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80170f6:	9907      	ldr	r1, [sp, #28]
 80170f8:	428a      	cmp	r2, r1
 80170fa:	dd09      	ble.n	8017110 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80170fc:	9a05      	ldr	r2, [sp, #20]
 80170fe:	a90b      	add	r1, sp, #44	; 0x2c
 8017100:	4620      	mov	r0, r4
 8017102:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017106:	aa04      	add	r2, sp, #16
 8017108:	930a      	str	r3, [sp, #40]	; 0x28
 801710a:	4633      	mov	r3, r6
 801710c:	f7ff fd96 	bl	8016c3c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017110:	9a06      	ldr	r2, [sp, #24]
 8017112:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8017116:	1ac3      	subs	r3, r0, r3
 8017118:	b992      	cbnz	r2, 8017140 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 801711a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801711e:	da04      	bge.n	801712a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017120:	a80b      	add	r0, sp, #44	; 0x2c
 8017122:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8017126:	f00d f86d 	bl	8024204 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801712a:	a80b      	add	r0, sp, #44	; 0x2c
 801712c:	f00d f9df 	bl	80244ee <_ZN8touchgfx6Canvas6renderEv>
 8017130:	4604      	mov	r4, r0
 8017132:	a80b      	add	r0, sp, #44	; 0x2c
 8017134:	f00d fa18 	bl	8024568 <_ZN8touchgfx6CanvasD1Ev>
 8017138:	4620      	mov	r0, r4
 801713a:	b03a      	add	sp, #232	; 0xe8
 801713c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017140:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8017144:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017148:	ea4f 1747 	mov.w	r7, r7, lsl #5
 801714c:	da2b      	bge.n	80171a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 801714e:	f7ff fce3 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017152:	4631      	mov	r1, r6
 8017154:	900a      	str	r0, [sp, #40]	; 0x28
 8017156:	a805      	add	r0, sp, #20
 8017158:	f7ff fcb0 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801715c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801715e:	f10d 0818 	add.w	r8, sp, #24
 8017162:	4418      	add	r0, r3
 8017164:	9008      	str	r0, [sp, #32]
 8017166:	9804      	ldr	r0, [sp, #16]
 8017168:	f7ff fcf7 	bl	8016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801716c:	4631      	mov	r1, r6
 801716e:	900a      	str	r0, [sp, #40]	; 0x28
 8017170:	a805      	add	r0, sp, #20
 8017172:	f7ff fca3 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017178:	1a18      	subs	r0, r3, r0
 801717a:	9b04      	ldr	r3, [sp, #16]
 801717c:	443b      	add	r3, r7
 801717e:	9009      	str	r0, [sp, #36]	; 0x24
 8017180:	930a      	str	r3, [sp, #40]	; 0x28
 8017182:	9b04      	ldr	r3, [sp, #16]
 8017184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017186:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 801718a:	4293      	cmp	r3, r2
 801718c:	dd0b      	ble.n	80171a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 801718e:	ab09      	add	r3, sp, #36	; 0x24
 8017190:	aa08      	add	r2, sp, #32
 8017192:	a90b      	add	r1, sp, #44	; 0x2c
 8017194:	4620      	mov	r0, r4
 8017196:	e9cd 6800 	strd	r6, r8, [sp]
 801719a:	f7ff fd26 	bl	8016bea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171a0:	443b      	add	r3, r7
 80171a2:	930a      	str	r3, [sp, #40]	; 0x28
 80171a4:	e7ed      	b.n	8017182 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 80171a6:	9a04      	ldr	r2, [sp, #16]
 80171a8:	9b07      	ldr	r3, [sp, #28]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	dd0a      	ble.n	80171c4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 80171ae:	a90b      	add	r1, sp, #44	; 0x2c
 80171b0:	4620      	mov	r0, r4
 80171b2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80171b6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80171ba:	aa04      	add	r2, sp, #16
 80171bc:	930a      	str	r3, [sp, #40]	; 0x28
 80171be:	4633      	mov	r3, r6
 80171c0:	f7ff fd3c 	bl	8016c3c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80171c4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80171c8:	4642      	mov	r2, r8
 80171ca:	9b03      	ldr	r3, [sp, #12]
 80171cc:	eba8 0805 	sub.w	r8, r8, r5
 80171d0:	429a      	cmp	r2, r3
 80171d2:	db0c      	blt.n	80171ee <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 80171d4:	9207      	str	r2, [sp, #28]
 80171d6:	a90b      	add	r1, sp, #44	; 0x2c
 80171d8:	4620      	mov	r0, r4
 80171da:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80171de:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80171e2:	aa07      	add	r2, sp, #28
 80171e4:	930a      	str	r3, [sp, #40]	; 0x28
 80171e6:	4633      	mov	r3, r6
 80171e8:	f7ff fd28 	bl	8016c3c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80171ec:	e7ec      	b.n	80171c8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 80171ee:	9a07      	ldr	r2, [sp, #28]
 80171f0:	4293      	cmp	r3, r2
 80171f2:	da0a      	bge.n	801720a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 80171f4:	a90b      	add	r1, sp, #44	; 0x2c
 80171f6:	4620      	mov	r0, r4
 80171f8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80171fc:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017200:	aa03      	add	r2, sp, #12
 8017202:	930a      	str	r3, [sp, #40]	; 0x28
 8017204:	4633      	mov	r3, r6
 8017206:	f7ff fd19 	bl	8016c3c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801720a:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 801720e:	1a1b      	subs	r3, r3, r0
 8017210:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017214:	da89      	bge.n	801712a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017216:	f7ff fc7f 	bl	8016b18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801721a:	4631      	mov	r1, r6
 801721c:	900a      	str	r0, [sp, #40]	; 0x28
 801721e:	a805      	add	r0, sp, #20
 8017220:	f7ff fc4c 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017226:	ad06      	add	r5, sp, #24
 8017228:	4418      	add	r0, r3
 801722a:	9008      	str	r0, [sp, #32]
 801722c:	9803      	ldr	r0, [sp, #12]
 801722e:	f7ff fc94 	bl	8016b5a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017232:	4631      	mov	r1, r6
 8017234:	900a      	str	r0, [sp, #40]	; 0x28
 8017236:	a805      	add	r0, sp, #20
 8017238:	f7ff fc40 	bl	8016abc <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801723c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801723e:	1a18      	subs	r0, r3, r0
 8017240:	9b03      	ldr	r3, [sp, #12]
 8017242:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8017246:	9009      	str	r0, [sp, #36]	; 0x24
 8017248:	443b      	add	r3, r7
 801724a:	930a      	str	r3, [sp, #40]	; 0x28
 801724c:	9a03      	ldr	r2, [sp, #12]
 801724e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017250:	429a      	cmp	r2, r3
 8017252:	f77f af6a 	ble.w	801712a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017256:	ab09      	add	r3, sp, #36	; 0x24
 8017258:	aa08      	add	r2, sp, #32
 801725a:	a90b      	add	r1, sp, #44	; 0x2c
 801725c:	4620      	mov	r0, r4
 801725e:	e9cd 6500 	strd	r6, r5, [sp]
 8017262:	f7ff fcc2 	bl	8016bea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017268:	443b      	add	r3, r7
 801726a:	930a      	str	r3, [sp, #40]	; 0x28
 801726c:	e7ee      	b.n	801724c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

0801726e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801726e:	4413      	add	r3, r2
 8017270:	7a42      	ldrb	r2, [r0, #9]
 8017272:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017276:	4419      	add	r1, r3
 8017278:	7a03      	ldrb	r3, [r0, #8]
 801727a:	435a      	muls	r2, r3
 801727c:	1c53      	adds	r3, r2, #1
 801727e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017282:	121b      	asrs	r3, r3, #8
 8017284:	2bff      	cmp	r3, #255	; 0xff
 8017286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017288:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801728c:	d13e      	bne.n	801730c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801728e:	4427      	add	r7, r4
 8017290:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017294:	3103      	adds	r1, #3
 8017296:	7d86      	ldrb	r6, [r0, #22]
 8017298:	2bff      	cmp	r3, #255	; 0xff
 801729a:	d10a      	bne.n	80172b2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801729c:	f801 6c03 	strb.w	r6, [r1, #-3]
 80172a0:	7d43      	ldrb	r3, [r0, #21]
 80172a2:	f801 3c02 	strb.w	r3, [r1, #-2]
 80172a6:	7d03      	ldrb	r3, [r0, #20]
 80172a8:	f801 3c01 	strb.w	r3, [r1, #-1]
 80172ac:	42a7      	cmp	r7, r4
 80172ae:	d1ef      	bne.n	8017290 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 80172b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172b2:	b29a      	uxth	r2, r3
 80172b4:	43db      	mvns	r3, r3
 80172b6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80172ba:	fb16 f602 	smulbb	r6, r6, r2
 80172be:	b2db      	uxtb	r3, r3
 80172c0:	fb05 6503 	mla	r5, r5, r3, r6
 80172c4:	b2ad      	uxth	r5, r5
 80172c6:	1c6e      	adds	r6, r5, #1
 80172c8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80172cc:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80172d0:	fb16 f603 	smulbb	r6, r6, r3
 80172d4:	122d      	asrs	r5, r5, #8
 80172d6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80172da:	7d45      	ldrb	r5, [r0, #21]
 80172dc:	fb05 6502 	mla	r5, r5, r2, r6
 80172e0:	b2ad      	uxth	r5, r5
 80172e2:	1c6e      	adds	r6, r5, #1
 80172e4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80172e8:	122d      	asrs	r5, r5, #8
 80172ea:	f801 5c02 	strb.w	r5, [r1, #-2]
 80172ee:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80172f2:	7d06      	ldrb	r6, [r0, #20]
 80172f4:	fb15 f303 	smulbb	r3, r5, r3
 80172f8:	fb06 3202 	mla	r2, r6, r2, r3
 80172fc:	b292      	uxth	r2, r2
 80172fe:	1c53      	adds	r3, r2, #1
 8017300:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017304:	1212      	asrs	r2, r2, #8
 8017306:	f801 2c01 	strb.w	r2, [r1, #-1]
 801730a:	e7cf      	b.n	80172ac <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801730c:	b2de      	uxtb	r6, r3
 801730e:	2b00      	cmp	r3, #0
 8017310:	d0ce      	beq.n	80172b0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8017312:	3103      	adds	r1, #3
 8017314:	4427      	add	r7, r4
 8017316:	f814 2b01 	ldrb.w	r2, [r4], #1
 801731a:	3103      	adds	r1, #3
 801731c:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8017320:	fb02 f306 	mul.w	r3, r2, r6
 8017324:	42bc      	cmp	r4, r7
 8017326:	f103 0201 	add.w	r2, r3, #1
 801732a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801732e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017332:	b295      	uxth	r5, r2
 8017334:	ea6f 0202 	mvn.w	r2, r2
 8017338:	b2d3      	uxtb	r3, r2
 801733a:	7d82      	ldrb	r2, [r0, #22]
 801733c:	fb1c fc03 	smulbb	ip, ip, r3
 8017340:	fb02 c205 	mla	r2, r2, r5, ip
 8017344:	b292      	uxth	r2, r2
 8017346:	f102 0c01 	add.w	ip, r2, #1
 801734a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801734e:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8017352:	fb1c fc03 	smulbb	ip, ip, r3
 8017356:	ea4f 2222 	mov.w	r2, r2, asr #8
 801735a:	f801 2c06 	strb.w	r2, [r1, #-6]
 801735e:	7d42      	ldrb	r2, [r0, #21]
 8017360:	fb02 c205 	mla	r2, r2, r5, ip
 8017364:	b292      	uxth	r2, r2
 8017366:	f102 0c01 	add.w	ip, r2, #1
 801736a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801736e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017372:	f801 2c05 	strb.w	r2, [r1, #-5]
 8017376:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801737a:	f890 c014 	ldrb.w	ip, [r0, #20]
 801737e:	fb12 f303 	smulbb	r3, r2, r3
 8017382:	fb0c 3305 	mla	r3, ip, r5, r3
 8017386:	b29b      	uxth	r3, r3
 8017388:	f103 0201 	add.w	r2, r3, #1
 801738c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017390:	ea4f 2323 	mov.w	r3, r3, asr #8
 8017394:	f801 3c04 	strb.w	r3, [r1, #-4]
 8017398:	d1bd      	bne.n	8017316 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801739a:	e789      	b.n	80172b0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801739c <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801739c:	b510      	push	{r4, lr}
 801739e:	7d04      	ldrb	r4, [r0, #20]
 80173a0:	700c      	strb	r4, [r1, #0]
 80173a2:	7d41      	ldrb	r1, [r0, #21]
 80173a4:	7011      	strb	r1, [r2, #0]
 80173a6:	7d82      	ldrb	r2, [r0, #22]
 80173a8:	701a      	strb	r2, [r3, #0]
 80173aa:	9b02      	ldr	r3, [sp, #8]
 80173ac:	7a42      	ldrb	r2, [r0, #9]
 80173ae:	2001      	movs	r0, #1
 80173b0:	701a      	strb	r2, [r3, #0]
 80173b2:	bd10      	pop	{r4, pc}

080173b4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80173b4:	6281      	str	r1, [r0, #40]	; 0x28
 80173b6:	4770      	bx	lr

080173b8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80173b8:	b513      	push	{r0, r1, r4, lr}
 80173ba:	6803      	ldr	r3, [r0, #0]
 80173bc:	4604      	mov	r4, r0
 80173be:	4601      	mov	r1, r0
 80173c0:	4668      	mov	r0, sp
 80173c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173c4:	4798      	blx	r3
 80173c6:	6823      	ldr	r3, [r4, #0]
 80173c8:	4669      	mov	r1, sp
 80173ca:	4620      	mov	r0, r4
 80173cc:	691b      	ldr	r3, [r3, #16]
 80173ce:	4798      	blx	r3
 80173d0:	b002      	add	sp, #8
 80173d2:	bd10      	pop	{r4, pc}

080173d4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80173d4:	b510      	push	{r4, lr}
 80173d6:	2200      	movs	r2, #0
 80173d8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80173dc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80173e0:	8002      	strh	r2, [r0, #0]
 80173e2:	8042      	strh	r2, [r0, #2]
 80173e4:	8084      	strh	r4, [r0, #4]
 80173e6:	80c1      	strh	r1, [r0, #6]
 80173e8:	bd10      	pop	{r4, pc}

080173ea <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80173ea:	2200      	movs	r2, #0
 80173ec:	8002      	strh	r2, [r0, #0]
 80173ee:	8042      	strh	r2, [r0, #2]
 80173f0:	8082      	strh	r2, [r0, #4]
 80173f2:	80c2      	strh	r2, [r0, #6]
 80173f4:	4770      	bx	lr
	...

080173f8 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80173f8:	b508      	push	{r3, lr}
 80173fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80173fc:	b928      	cbnz	r0, 801740a <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80173fe:	4b03      	ldr	r3, [pc, #12]	; (801740c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8017400:	2123      	movs	r1, #35	; 0x23
 8017402:	4a03      	ldr	r2, [pc, #12]	; (8017410 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8017404:	4803      	ldr	r0, [pc, #12]	; (8017414 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8017406:	f00e f97b 	bl	8025700 <__assert_func>
 801740a:	bd08      	pop	{r3, pc}
 801740c:	0802996c 	.word	0x0802996c
 8017410:	08029a50 	.word	0x08029a50
 8017414:	08029993 	.word	0x08029993

08017418 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801741c:	b089      	sub	sp, #36	; 0x24
 801741e:	4604      	mov	r4, r0
 8017420:	6808      	ldr	r0, [r1, #0]
 8017422:	f04f 0a00 	mov.w	sl, #0
 8017426:	6849      	ldr	r1, [r1, #4]
 8017428:	ab02      	add	r3, sp, #8
 801742a:	f04f 0b01 	mov.w	fp, #1
 801742e:	c303      	stmia	r3!, {r0, r1}
 8017430:	4b3f      	ldr	r3, [pc, #252]	; (8017530 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8017432:	4621      	mov	r1, r4
 8017434:	a804      	add	r0, sp, #16
 8017436:	781b      	ldrb	r3, [r3, #0]
 8017438:	2b01      	cmp	r3, #1
 801743a:	6823      	ldr	r3, [r4, #0]
 801743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801743e:	bf1f      	itttt	ne
 8017440:	f10d 0906 	addne.w	r9, sp, #6
 8017444:	ae03      	addne	r6, sp, #12
 8017446:	f10d 050e 	addne.w	r5, sp, #14
 801744a:	f10d 080a 	addne.w	r8, sp, #10
 801744e:	bf01      	itttt	eq
 8017450:	f10d 090e 	addeq.w	r9, sp, #14
 8017454:	f10d 0606 	addeq.w	r6, sp, #6
 8017458:	ad03      	addeq	r5, sp, #12
 801745a:	f10d 0808 	addeq.w	r8, sp, #8
 801745e:	4798      	blx	r3
 8017460:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017464:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017468:	2b00      	cmp	r3, #0
 801746a:	d056      	beq.n	801751a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801746c:	4293      	cmp	r3, r2
 801746e:	bfa8      	it	ge
 8017470:	4613      	movge	r3, r2
 8017472:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017476:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801747a:	2f00      	cmp	r7, #0
 801747c:	dd34      	ble.n	80174e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801747e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8017482:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8017486:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801748a:	4484      	add	ip, r0
 801748c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017490:	f9b6 e000 	ldrsh.w	lr, [r6]
 8017494:	fa0f fc8c 	sxth.w	ip, ip
 8017498:	f9b9 1000 	ldrsh.w	r1, [r9]
 801749c:	f8ad 2018 	strh.w	r2, [sp, #24]
 80174a0:	4562      	cmp	r2, ip
 80174a2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174a6:	f8ad e01c 	strh.w	lr, [sp, #28]
 80174aa:	f8ad 101e 	strh.w	r1, [sp, #30]
 80174ae:	da29      	bge.n	8017504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174b0:	4472      	add	r2, lr
 80174b2:	b212      	sxth	r2, r2
 80174b4:	4290      	cmp	r0, r2
 80174b6:	da25      	bge.n	8017504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174b8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80174bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80174c0:	4402      	add	r2, r0
 80174c2:	b212      	sxth	r2, r2
 80174c4:	4293      	cmp	r3, r2
 80174c6:	da1d      	bge.n	8017504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174c8:	440b      	add	r3, r1
 80174ca:	b21b      	sxth	r3, r3
 80174cc:	4298      	cmp	r0, r3
 80174ce:	da19      	bge.n	8017504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174d0:	6823      	ldr	r3, [r4, #0]
 80174d2:	a906      	add	r1, sp, #24
 80174d4:	4620      	mov	r0, r4
 80174d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174d8:	4798      	blx	r3
 80174da:	b998      	cbnz	r0, 8017504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174dc:	107f      	asrs	r7, r7, #1
 80174de:	f04f 0a01 	mov.w	sl, #1
 80174e2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80174e6:	e7c6      	b.n	8017476 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80174e8:	d10c      	bne.n	8017504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174ea:	f8ad b006 	strh.w	fp, [sp, #6]
 80174ee:	f8b8 2000 	ldrh.w	r2, [r8]
 80174f2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80174f6:	440a      	add	r2, r1
 80174f8:	f8a8 2000 	strh.w	r2, [r8]
 80174fc:	882b      	ldrh	r3, [r5, #0]
 80174fe:	1a5b      	subs	r3, r3, r1
 8017500:	802b      	strh	r3, [r5, #0]
 8017502:	e7ad      	b.n	8017460 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017504:	f1ba 0f00 	cmp.w	sl, #0
 8017508:	d0f1      	beq.n	80174ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801750a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801750e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017512:	429a      	cmp	r2, r3
 8017514:	bf08      	it	eq
 8017516:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017518:	e7e9      	b.n	80174ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801751a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801751e:	429a      	cmp	r2, r3
 8017520:	bf04      	itt	eq
 8017522:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8017526:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017528:	b009      	add	sp, #36	; 0x24
 801752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801752e:	bf00      	nop
 8017530:	2000b364 	.word	0x2000b364

08017534 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017534:	2200      	movs	r2, #0
 8017536:	2101      	movs	r1, #1
 8017538:	8082      	strh	r2, [r0, #4]
 801753a:	80c2      	strh	r2, [r0, #6]
 801753c:	8102      	strh	r2, [r0, #8]
 801753e:	8142      	strh	r2, [r0, #10]
 8017540:	8182      	strh	r2, [r0, #12]
 8017542:	81c2      	strh	r2, [r0, #14]
 8017544:	8202      	strh	r2, [r0, #16]
 8017546:	8242      	strh	r2, [r0, #18]
 8017548:	61c2      	str	r2, [r0, #28]
 801754a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801754e:	6282      	str	r2, [r0, #40]	; 0x28
 8017550:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017554:	4905      	ldr	r1, [pc, #20]	; (801756c <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8017556:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801755a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801755e:	6001      	str	r1, [r0, #0]
 8017560:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017562:	22ff      	movs	r2, #255	; 0xff
 8017564:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop
 801756c:	080299d8 	.word	0x080299d8

08017570 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017570:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017574:	4770      	bx	lr

08017576 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017576:	b570      	push	{r4, r5, r6, lr}
 8017578:	790b      	ldrb	r3, [r1, #4]
 801757a:	4604      	mov	r4, r0
 801757c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017580:	460e      	mov	r6, r1
 8017582:	2b00      	cmp	r3, #0
 8017584:	bf0c      	ite	eq
 8017586:	2301      	moveq	r3, #1
 8017588:	2300      	movne	r3, #0
 801758a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801758e:	d110      	bne.n	80175b2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017590:	b185      	cbz	r5, 80175b4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8017592:	7933      	ldrb	r3, [r6, #4]
 8017594:	2b01      	cmp	r3, #1
 8017596:	d113      	bne.n	80175c0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8017598:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801759a:	b188      	cbz	r0, 80175c0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801759c:	6803      	ldr	r3, [r0, #0]
 801759e:	68db      	ldr	r3, [r3, #12]
 80175a0:	4798      	blx	r3
 80175a2:	b168      	cbz	r0, 80175c0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80175a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80175a6:	4621      	mov	r1, r4
 80175a8:	6803      	ldr	r3, [r0, #0]
 80175aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175ae:	689b      	ldr	r3, [r3, #8]
 80175b0:	4718      	bx	r3
 80175b2:	b12d      	cbz	r5, 80175c0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80175b4:	6823      	ldr	r3, [r4, #0]
 80175b6:	4620      	mov	r0, r4
 80175b8:	695b      	ldr	r3, [r3, #20]
 80175ba:	4798      	blx	r3
 80175bc:	2d00      	cmp	r5, #0
 80175be:	d1e8      	bne.n	8017592 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80175c0:	bd70      	pop	{r4, r5, r6, pc}

080175c2 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80175c2:	6803      	ldr	r3, [r0, #0]
 80175c4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80175c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80175ca:	4718      	bx	r3

080175cc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80175cc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80175d0:	2bff      	cmp	r3, #255	; 0xff
 80175d2:	b510      	push	{r4, lr}
 80175d4:	d104      	bne.n	80175e0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80175d6:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 80175d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175dc:	429a      	cmp	r2, r3
 80175de:	d105      	bne.n	80175ec <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80175e0:	2300      	movs	r3, #0
 80175e2:	8003      	strh	r3, [r0, #0]
 80175e4:	8043      	strh	r3, [r0, #2]
 80175e6:	8083      	strh	r3, [r0, #4]
 80175e8:	80c3      	strh	r3, [r0, #6]
 80175ea:	bd10      	pop	{r4, pc}
 80175ec:	2300      	movs	r3, #0
 80175ee:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80175f2:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80175f6:	8003      	strh	r3, [r0, #0]
 80175f8:	8043      	strh	r3, [r0, #2]
 80175fa:	8084      	strh	r4, [r0, #4]
 80175fc:	80c2      	strh	r2, [r0, #6]
 80175fe:	e7f4      	b.n	80175ea <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08017600 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8017600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017604:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017608:	b087      	sub	sp, #28
 801760a:	4604      	mov	r4, r0
 801760c:	4689      	mov	r9, r1
 801760e:	b363      	cbz	r3, 801766a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017610:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017616:	429a      	cmp	r2, r3
 8017618:	d027      	beq.n	801766a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801761a:	ad06      	add	r5, sp, #24
 801761c:	2700      	movs	r7, #0
 801761e:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8017622:	4628      	mov	r0, r5
 8017624:	f004 fa1e 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017628:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801762c:	a904      	add	r1, sp, #16
 801762e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017632:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017636:	4620      	mov	r0, r4
 8017638:	6823      	ldr	r3, [r4, #0]
 801763a:	9704      	str	r7, [sp, #16]
 801763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801763e:	4798      	blx	r3
 8017640:	f7f5 f87e 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8017644:	6803      	ldr	r3, [r0, #0]
 8017646:	4606      	mov	r6, r0
 8017648:	4628      	mov	r0, r5
 801764a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801764e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017650:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017654:	f004 fad4 	bl	801bc00 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017658:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801765c:	4601      	mov	r1, r0
 801765e:	9701      	str	r7, [sp, #4]
 8017660:	aa04      	add	r2, sp, #16
 8017662:	9300      	str	r3, [sp, #0]
 8017664:	4630      	mov	r0, r6
 8017666:	464b      	mov	r3, r9
 8017668:	47c0      	blx	r8
 801766a:	b007      	add	sp, #28
 801766c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017670 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8017670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017672:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017676:	460d      	mov	r5, r1
 8017678:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801767c:	2100      	movs	r1, #0
 801767e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017682:	4604      	mov	r4, r0
 8017684:	6803      	ldr	r3, [r0, #0]
 8017686:	f8ad 2004 	strh.w	r2, [sp, #4]
 801768a:	6a1b      	ldr	r3, [r3, #32]
 801768c:	9100      	str	r1, [sp, #0]
 801768e:	4669      	mov	r1, sp
 8017690:	4798      	blx	r3
 8017692:	4621      	mov	r1, r4
 8017694:	a802      	add	r0, sp, #8
 8017696:	f002 fb7e 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801769a:	f7f5 f851 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 801769e:	6803      	ldr	r3, [r0, #0]
 80176a0:	aa02      	add	r2, sp, #8
 80176a2:	4669      	mov	r1, sp
 80176a4:	695e      	ldr	r6, [r3, #20]
 80176a6:	462b      	mov	r3, r5
 80176a8:	47b0      	blx	r6
 80176aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176ae:	2800      	cmp	r0, #0
 80176b0:	bf08      	it	eq
 80176b2:	461d      	moveq	r5, r3
 80176b4:	84e5      	strh	r5, [r4, #38]	; 0x26
 80176b6:	b004      	add	sp, #16
 80176b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080176bc <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80176bc:	2200      	movs	r2, #0
 80176be:	8082      	strh	r2, [r0, #4]
 80176c0:	80c2      	strh	r2, [r0, #6]
 80176c2:	8102      	strh	r2, [r0, #8]
 80176c4:	8142      	strh	r2, [r0, #10]
 80176c6:	8182      	strh	r2, [r0, #12]
 80176c8:	81c2      	strh	r2, [r0, #14]
 80176ca:	8202      	strh	r2, [r0, #16]
 80176cc:	8242      	strh	r2, [r0, #18]
 80176ce:	61c2      	str	r2, [r0, #28]
 80176d0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80176d4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80176d8:	2201      	movs	r2, #1
 80176da:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80176de:	4a04      	ldr	r2, [pc, #16]	; (80176f0 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 80176e0:	6002      	str	r2, [r0, #0]
 80176e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176e6:	84c2      	strh	r2, [r0, #38]	; 0x26
 80176e8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80176ec:	4770      	bx	lr
 80176ee:	bf00      	nop
 80176f0:	08029b14 	.word	0x08029b14

080176f4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80176f4:	2200      	movs	r2, #0
 80176f6:	8002      	strh	r2, [r0, #0]
 80176f8:	8042      	strh	r2, [r0, #2]
 80176fa:	8082      	strh	r2, [r0, #4]
 80176fc:	80c2      	strh	r2, [r0, #6]
 80176fe:	4770      	bx	lr

08017700 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017700:	b570      	push	{r4, r5, r6, lr}
 8017702:	6803      	ldr	r3, [r0, #0]
 8017704:	4604      	mov	r4, r0
 8017706:	4615      	mov	r5, r2
 8017708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801770a:	4798      	blx	r3
 801770c:	6823      	ldr	r3, [r4, #0]
 801770e:	4629      	mov	r1, r5
 8017710:	4620      	mov	r0, r4
 8017712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017718:	4718      	bx	r3
	...

0801771c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801771c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801771e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017722:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017724:	4299      	cmp	r1, r3
 8017726:	d029      	beq.n	801777c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8017728:	4b15      	ldr	r3, [pc, #84]	; (8017780 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	b92b      	cbnz	r3, 801773a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801772e:	4b15      	ldr	r3, [pc, #84]	; (8017784 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017730:	21b1      	movs	r1, #177	; 0xb1
 8017732:	4a15      	ldr	r2, [pc, #84]	; (8017788 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017734:	4815      	ldr	r0, [pc, #84]	; (801778c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017736:	f00d ffe3 	bl	8025700 <__assert_func>
 801773a:	4a15      	ldr	r2, [pc, #84]	; (8017790 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801773c:	8812      	ldrh	r2, [r2, #0]
 801773e:	428a      	cmp	r2, r1
 8017740:	d803      	bhi.n	801774a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8017742:	4b14      	ldr	r3, [pc, #80]	; (8017794 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8017744:	21b2      	movs	r1, #178	; 0xb2
 8017746:	4a10      	ldr	r2, [pc, #64]	; (8017788 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017748:	e7f4      	b.n	8017734 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801774a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801774e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017752:	4b11      	ldr	r3, [pc, #68]	; (8017798 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8017754:	7854      	ldrb	r4, [r2, #1]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801775c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017760:	682b      	ldr	r3, [r5, #0]
 8017762:	69de      	ldr	r6, [r3, #28]
 8017764:	4b0d      	ldr	r3, [pc, #52]	; (801779c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8017766:	6818      	ldr	r0, [r3, #0]
 8017768:	f7fb f89e 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 801776c:	2300      	movs	r3, #0
 801776e:	4602      	mov	r2, r0
 8017770:	4621      	mov	r1, r4
 8017772:	9300      	str	r3, [sp, #0]
 8017774:	4628      	mov	r0, r5
 8017776:	47b0      	blx	r6
 8017778:	b002      	add	sp, #8
 801777a:	bd70      	pop	{r4, r5, r6, pc}
 801777c:	2000      	movs	r0, #0
 801777e:	e7fb      	b.n	8017778 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8017780:	2000b3fc 	.word	0x2000b3fc
 8017784:	08029b7c 	.word	0x08029b7c
 8017788:	08029cb8 	.word	0x08029cb8
 801778c:	08029bbe 	.word	0x08029bbe
 8017790:	2000b400 	.word	0x2000b400
 8017794:	08029be7 	.word	0x08029be7
 8017798:	2000b404 	.word	0x2000b404
 801779c:	2000b408 	.word	0x2000b408

080177a0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80177a0:	b570      	push	{r4, r5, r6, lr}
 80177a2:	6803      	ldr	r3, [r0, #0]
 80177a4:	4604      	mov	r4, r0
 80177a6:	b28d      	uxth	r5, r1
 80177a8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80177aa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80177ac:	4b10      	ldr	r3, [pc, #64]	; (80177f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	b92b      	cbnz	r3, 80177be <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80177b2:	4b10      	ldr	r3, [pc, #64]	; (80177f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80177b4:	21b1      	movs	r1, #177	; 0xb1
 80177b6:	4a10      	ldr	r2, [pc, #64]	; (80177f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80177b8:	4810      	ldr	r0, [pc, #64]	; (80177fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80177ba:	f00d ffa1 	bl	8025700 <__assert_func>
 80177be:	4910      	ldr	r1, [pc, #64]	; (8017800 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80177c0:	8809      	ldrh	r1, [r1, #0]
 80177c2:	4291      	cmp	r1, r2
 80177c4:	d803      	bhi.n	80177ce <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80177c6:	4b0f      	ldr	r3, [pc, #60]	; (8017804 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80177c8:	21b2      	movs	r1, #178	; 0xb2
 80177ca:	4a0b      	ldr	r2, [pc, #44]	; (80177f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80177cc:	e7f4      	b.n	80177b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80177ce:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80177d2:	4b0d      	ldr	r3, [pc, #52]	; (8017808 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80177da:	6803      	ldr	r3, [r0, #0]
 80177dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177de:	4798      	blx	r3
 80177e0:	1a29      	subs	r1, r5, r0
 80177e2:	4633      	mov	r3, r6
 80177e4:	4620      	mov	r0, r4
 80177e6:	b209      	sxth	r1, r1
 80177e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177ec:	4718      	bx	r3
 80177ee:	bf00      	nop
 80177f0:	2000b3fc 	.word	0x2000b3fc
 80177f4:	08029b7c 	.word	0x08029b7c
 80177f8:	08029cb8 	.word	0x08029cb8
 80177fc:	08029bbe 	.word	0x08029bbe
 8017800:	2000b400 	.word	0x2000b400
 8017804:	08029be7 	.word	0x08029be7
 8017808:	2000b404 	.word	0x2000b404

0801780c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017814:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017816:	b08c      	sub	sp, #48	; 0x30
 8017818:	4604      	mov	r4, r0
 801781a:	4293      	cmp	r3, r2
 801781c:	4688      	mov	r8, r1
 801781e:	d05f      	beq.n	80178e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017820:	4e31      	ldr	r6, [pc, #196]	; (80178e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8017822:	6832      	ldr	r2, [r6, #0]
 8017824:	b92a      	cbnz	r2, 8017832 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8017826:	4b31      	ldr	r3, [pc, #196]	; (80178ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8017828:	21b1      	movs	r1, #177	; 0xb1
 801782a:	4a31      	ldr	r2, [pc, #196]	; (80178f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801782c:	4831      	ldr	r0, [pc, #196]	; (80178f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801782e:	f00d ff67 	bl	8025700 <__assert_func>
 8017832:	4d31      	ldr	r5, [pc, #196]	; (80178f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017834:	8829      	ldrh	r1, [r5, #0]
 8017836:	4299      	cmp	r1, r3
 8017838:	d803      	bhi.n	8017842 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801783a:	4b30      	ldr	r3, [pc, #192]	; (80178fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801783c:	21b2      	movs	r1, #178	; 0xb2
 801783e:	4a2c      	ldr	r2, [pc, #176]	; (80178f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017840:	e7f4      	b.n	801782c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8017842:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017846:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801784a:	4b2d      	ldr	r3, [pc, #180]	; (8017900 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017852:	2a00      	cmp	r2, #0
 8017854:	d044      	beq.n	80178e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017856:	784b      	ldrb	r3, [r1, #1]
 8017858:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801785c:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017860:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017864:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017868:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801786c:	4b25      	ldr	r3, [pc, #148]	; (8017904 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801786e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8017878:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801787c:	9207      	str	r2, [sp, #28]
 801787e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017880:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017884:	9009      	str	r0, [sp, #36]	; 0x24
 8017886:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801788a:	f88d 9020 	strb.w	r9, [sp, #32]
 801788e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017892:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017896:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801789a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801789e:	b10a      	cbz	r2, 80178a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80178a0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80178a2:	b907      	cbnz	r7, 80178a6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80178a4:	689f      	ldr	r7, [r3, #8]
 80178a6:	f10d 0914 	add.w	r9, sp, #20
 80178aa:	4621      	mov	r1, r4
 80178ac:	4648      	mov	r0, r9
 80178ae:	f002 fa72 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80178b2:	6833      	ldr	r3, [r6, #0]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d0b6      	beq.n	8017826 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80178b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80178ba:	882b      	ldrh	r3, [r5, #0]
 80178bc:	428b      	cmp	r3, r1
 80178be:	d9bc      	bls.n	801783a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80178c0:	4b11      	ldr	r3, [pc, #68]	; (8017908 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80178c2:	6818      	ldr	r0, [r3, #0]
 80178c4:	f7fa fff0 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 80178c8:	2300      	movs	r3, #0
 80178ca:	9001      	str	r0, [sp, #4]
 80178cc:	4638      	mov	r0, r7
 80178ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80178d2:	ab07      	add	r3, sp, #28
 80178d4:	9300      	str	r3, [sp, #0]
 80178d6:	4643      	mov	r3, r8
 80178d8:	e899 0006 	ldmia.w	r9, {r1, r2}
 80178dc:	f7fa ff75 	bl	80127ca <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80178e0:	b00c      	add	sp, #48	; 0x30
 80178e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178e6:	bf00      	nop
 80178e8:	2000b3fc 	.word	0x2000b3fc
 80178ec:	08029b7c 	.word	0x08029b7c
 80178f0:	08029cb8 	.word	0x08029cb8
 80178f4:	08029bbe 	.word	0x08029bbe
 80178f8:	2000b400 	.word	0x2000b400
 80178fc:	08029be7 	.word	0x08029be7
 8017900:	2000b404 	.word	0x2000b404
 8017904:	2000b36c 	.word	0x2000b36c
 8017908:	2000b408 	.word	0x2000b408

0801790c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801790c:	b40e      	push	{r1, r2, r3}
 801790e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017916:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017918:	b09b      	sub	sp, #108	; 0x6c
 801791a:	4604      	mov	r4, r0
 801791c:	4293      	cmp	r3, r2
 801791e:	d061      	beq.n	80179e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8017920:	aa24      	add	r2, sp, #144	; 0x90
 8017922:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80179f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8017926:	9203      	str	r2, [sp, #12]
 8017928:	f8da 2000 	ldr.w	r2, [sl]
 801792c:	b92a      	cbnz	r2, 801793a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801792e:	4b2e      	ldr	r3, [pc, #184]	; (80179e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8017930:	21b1      	movs	r1, #177	; 0xb1
 8017932:	4a2e      	ldr	r2, [pc, #184]	; (80179ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017934:	482e      	ldr	r0, [pc, #184]	; (80179f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8017936:	f00d fee3 	bl	8025700 <__assert_func>
 801793a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80179fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801793e:	f8b8 1000 	ldrh.w	r1, [r8]
 8017942:	4299      	cmp	r1, r3
 8017944:	d803      	bhi.n	801794e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8017946:	4b2b      	ldr	r3, [pc, #172]	; (80179f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017948:	21b2      	movs	r1, #178	; 0xb2
 801794a:	4a28      	ldr	r2, [pc, #160]	; (80179ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801794c:	e7f2      	b.n	8017934 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801794e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017a00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8017952:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017956:	f8d9 3000 	ldr.w	r3, [r9]
 801795a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	4638      	mov	r0, r7
 8017962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017964:	4798      	blx	r3
 8017966:	4606      	mov	r6, r0
 8017968:	b205      	sxth	r5, r0
 801796a:	a804      	add	r0, sp, #16
 801796c:	f002 feb5 	bl	801a6da <_ZN8touchgfx12TextProviderC1Ev>
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	4638      	mov	r0, r7
 8017974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017976:	4798      	blx	r3
 8017978:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801797a:	4603      	mov	r3, r0
 801797c:	9a03      	ldr	r2, [sp, #12]
 801797e:	a804      	add	r0, sp, #16
 8017980:	f002 fef0 	bl	801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017984:	f8da 3000 	ldr.w	r3, [sl]
 8017988:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801798c:	2b00      	cmp	r3, #0
 801798e:	d0ce      	beq.n	801792e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017990:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017992:	f8b8 0000 	ldrh.w	r0, [r8]
 8017996:	4290      	cmp	r0, r2
 8017998:	d9d5      	bls.n	8017946 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801799a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 801799e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80179a2:	f8d9 3000 	ldr.w	r3, [r9]
 80179a6:	787a      	ldrb	r2, [r7, #1]
 80179a8:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 80179ac:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80179b0:	9700      	str	r7, [sp, #0]
 80179b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80179b6:	a804      	add	r0, sp, #16
 80179b8:	f001 f918 	bl	8018bec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80179bc:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80179c0:	b203      	sxth	r3, r0
 80179c2:	18a9      	adds	r1, r5, r2
 80179c4:	2900      	cmp	r1, #0
 80179c6:	dd0b      	ble.n	80179e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 80179c8:	3b01      	subs	r3, #1
 80179ca:	fb13 f302 	smulbb	r3, r3, r2
 80179ce:	fb16 3300 	smlabb	r3, r6, r0, r3
 80179d2:	b21d      	sxth	r5, r3
 80179d4:	4628      	mov	r0, r5
 80179d6:	b01b      	add	sp, #108	; 0x6c
 80179d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179dc:	b003      	add	sp, #12
 80179de:	4770      	bx	lr
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	dcf7      	bgt.n	80179d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80179e4:	2500      	movs	r5, #0
 80179e6:	e7f5      	b.n	80179d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80179e8:	08029b7c 	.word	0x08029b7c
 80179ec:	08029cb8 	.word	0x08029cb8
 80179f0:	08029bbe 	.word	0x08029bbe
 80179f4:	08029be7 	.word	0x08029be7
 80179f8:	2000b3fc 	.word	0x2000b3fc
 80179fc:	2000b400 	.word	0x2000b400
 8017a00:	2000b404 	.word	0x2000b404

08017a04 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017a04:	b570      	push	{r4, r5, r6, lr}
 8017a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a0a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017a0c:	4604      	mov	r4, r0
 8017a0e:	4299      	cmp	r1, r3
 8017a10:	d01e      	beq.n	8017a50 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017a12:	6803      	ldr	r3, [r0, #0]
 8017a14:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017a16:	4b0f      	ldr	r3, [pc, #60]	; (8017a54 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	b92b      	cbnz	r3, 8017a28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8017a1c:	4b0e      	ldr	r3, [pc, #56]	; (8017a58 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8017a1e:	21b1      	movs	r1, #177	; 0xb1
 8017a20:	4a0e      	ldr	r2, [pc, #56]	; (8017a5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017a22:	480f      	ldr	r0, [pc, #60]	; (8017a60 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017a24:	f00d fe6c 	bl	8025700 <__assert_func>
 8017a28:	4b0e      	ldr	r3, [pc, #56]	; (8017a64 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8017a2a:	881b      	ldrh	r3, [r3, #0]
 8017a2c:	428b      	cmp	r3, r1
 8017a2e:	d803      	bhi.n	8017a38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017a30:	4b0d      	ldr	r3, [pc, #52]	; (8017a68 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017a32:	21b2      	movs	r1, #178	; 0xb2
 8017a34:	4a09      	ldr	r2, [pc, #36]	; (8017a5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017a36:	e7f4      	b.n	8017a22 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017a38:	4b0c      	ldr	r3, [pc, #48]	; (8017a6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8017a3a:	6818      	ldr	r0, [r3, #0]
 8017a3c:	f7fa ff34 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 8017a40:	2300      	movs	r3, #0
 8017a42:	4601      	mov	r1, r0
 8017a44:	46ac      	mov	ip, r5
 8017a46:	4620      	mov	r0, r4
 8017a48:	461a      	mov	r2, r3
 8017a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a4e:	4760      	bx	ip
 8017a50:	2000      	movs	r0, #0
 8017a52:	bd70      	pop	{r4, r5, r6, pc}
 8017a54:	2000b3fc 	.word	0x2000b3fc
 8017a58:	08029b7c 	.word	0x08029b7c
 8017a5c:	08029cb8 	.word	0x08029cb8
 8017a60:	08029bbe 	.word	0x08029bbe
 8017a64:	2000b400 	.word	0x2000b400
 8017a68:	08029be7 	.word	0x08029be7
 8017a6c:	2000b408 	.word	0x2000b408

08017a70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017a70:	b570      	push	{r4, r5, r6, lr}
 8017a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a76:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017a78:	4604      	mov	r4, r0
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d021      	beq.n	8017ac2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017a7e:	6803      	ldr	r3, [r0, #0]
 8017a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a82:	4798      	blx	r3
 8017a84:	6823      	ldr	r3, [r4, #0]
 8017a86:	4605      	mov	r5, r0
 8017a88:	4620      	mov	r0, r4
 8017a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017a8c:	4798      	blx	r3
 8017a8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017a92:	4606      	mov	r6, r0
 8017a94:	b22d      	sxth	r5, r5
 8017a96:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017a9a:	6823      	ldr	r3, [r4, #0]
 8017a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a9e:	d109      	bne.n	8017ab4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017aa0:	4629      	mov	r1, r5
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	4798      	blx	r3
 8017aa6:	6823      	ldr	r3, [r4, #0]
 8017aa8:	4631      	mov	r1, r6
 8017aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017aac:	4620      	mov	r0, r4
 8017aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ab2:	4718      	bx	r3
 8017ab4:	4601      	mov	r1, r0
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	4798      	blx	r3
 8017aba:	6823      	ldr	r3, [r4, #0]
 8017abc:	4629      	mov	r1, r5
 8017abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ac0:	e7f4      	b.n	8017aac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8017ac2:	bd70      	pop	{r4, r5, r6, pc}

08017ac4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017ac4:	888a      	ldrh	r2, [r1, #4]
 8017ac6:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017ac8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017acc:	b922      	cbnz	r2, 8017ad8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017ace:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017ad2:	b90b      	cbnz	r3, 8017ad8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017ad4:	f7ff bfcc 	b.w	8017a70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017ad8:	4770      	bx	lr

08017ada <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017ada:	2300      	movs	r3, #0
 8017adc:	8003      	strh	r3, [r0, #0]
 8017ade:	8043      	strh	r3, [r0, #2]
 8017ae0:	8083      	strh	r3, [r0, #4]
 8017ae2:	80c3      	strh	r3, [r0, #6]
 8017ae4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017ae8:	b91b      	cbnz	r3, 8017af2 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017aea:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017aee:	2bff      	cmp	r3, #255	; 0xff
 8017af0:	d103      	bne.n	8017afa <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017af2:	890b      	ldrh	r3, [r1, #8]
 8017af4:	8083      	strh	r3, [r0, #4]
 8017af6:	894b      	ldrh	r3, [r1, #10]
 8017af8:	80c3      	strh	r3, [r0, #6]
 8017afa:	4770      	bx	lr

08017afc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017afe:	4604      	mov	r4, r0
 8017b00:	466b      	mov	r3, sp
 8017b02:	6808      	ldr	r0, [r1, #0]
 8017b04:	6849      	ldr	r1, [r1, #4]
 8017b06:	c303      	stmia	r3!, {r0, r1}
 8017b08:	6823      	ldr	r3, [r4, #0]
 8017b0a:	4669      	mov	r1, sp
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b10:	4798      	blx	r3
 8017b12:	4b08      	ldr	r3, [pc, #32]	; (8017b34 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017b1a:	b10a      	cbz	r2, 8017b20 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017b1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017b1e:	b900      	cbnz	r0, 8017b22 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017b20:	6898      	ldr	r0, [r3, #8]
 8017b22:	6803      	ldr	r3, [r0, #0]
 8017b24:	4669      	mov	r1, sp
 8017b26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017b28:	699d      	ldr	r5, [r3, #24]
 8017b2a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017b2e:	47a8      	blx	r5
 8017b30:	b003      	add	sp, #12
 8017b32:	bd30      	pop	{r4, r5, pc}
 8017b34:	2000b36c 	.word	0x2000b36c

08017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017b38:	b538      	push	{r3, r4, r5, lr}
 8017b3a:	880b      	ldrh	r3, [r1, #0]
 8017b3c:	4605      	mov	r5, r0
 8017b3e:	4604      	mov	r4, r0
 8017b40:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017b42:	8813      	ldrh	r3, [r2, #0]
 8017b44:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017b48:	4628      	mov	r0, r5
 8017b4a:	f003 ff8b 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b4e:	8120      	strh	r0, [r4, #8]
 8017b50:	4628      	mov	r0, r5
 8017b52:	f003 ffc1 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b56:	8160      	strh	r0, [r4, #10]
 8017b58:	bd38      	pop	{r3, r4, r5, pc}

08017b5a <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017b5a:	b510      	push	{r4, lr}
 8017b5c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8017b60:	4604      	mov	r4, r0
 8017b62:	2bff      	cmp	r3, #255	; 0xff
 8017b64:	d006      	beq.n	8017b74 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8017b66:	2300      	movs	r3, #0
 8017b68:	8003      	strh	r3, [r0, #0]
 8017b6a:	8043      	strh	r3, [r0, #2]
 8017b6c:	8083      	strh	r3, [r0, #4]
 8017b6e:	80c3      	strh	r3, [r0, #6]
 8017b70:	4620      	mov	r0, r4
 8017b72:	bd10      	pop	{r4, pc}
 8017b74:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017b78:	b11b      	cbz	r3, 8017b82 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017b7a:	3130      	adds	r1, #48	; 0x30
 8017b7c:	f003 ffe6 	bl	801bb4c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017b80:	e7f6      	b.n	8017b70 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017b82:	312e      	adds	r1, #46	; 0x2e
 8017b84:	e7fa      	b.n	8017b7c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08017b88 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8017b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b8c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017b90:	b08a      	sub	sp, #40	; 0x28
 8017b92:	4604      	mov	r4, r0
 8017b94:	4688      	mov	r8, r1
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d044      	beq.n	8017c24 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8017b9a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017b9c:	a805      	add	r0, sp, #20
 8017b9e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ba2:	f003 ff5f 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017ba6:	4605      	mov	r5, r0
 8017ba8:	b206      	sxth	r6, r0
 8017baa:	a805      	add	r0, sp, #20
 8017bac:	f003 ff94 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017bb0:	f9b8 2000 	ldrsh.w	r2, [r8]
 8017bb4:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8017bb8:	2300      	movs	r3, #0
 8017bba:	fa0f fc80 	sxth.w	ip, r0
 8017bbe:	4417      	add	r7, r2
 8017bc0:	9306      	str	r3, [sp, #24]
 8017bc2:	b2bf      	uxth	r7, r7
 8017bc4:	fa0f fe87 	sxth.w	lr, r7
 8017bc8:	459e      	cmp	lr, r3
 8017bca:	dd2d      	ble.n	8017c28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017bcc:	4296      	cmp	r6, r2
 8017bce:	dd2b      	ble.n	8017c28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017bd0:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8017bd4:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8017bd8:	4419      	add	r1, r3
 8017bda:	b289      	uxth	r1, r1
 8017bdc:	fa0f f881 	sxth.w	r8, r1
 8017be0:	f1b8 0f00 	cmp.w	r8, #0
 8017be4:	dd20      	ble.n	8017c28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017be6:	459c      	cmp	ip, r3
 8017be8:	dd1e      	ble.n	8017c28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017bea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017bee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017bf2:	4576      	cmp	r6, lr
 8017bf4:	bfa8      	it	ge
 8017bf6:	463d      	movge	r5, r7
 8017bf8:	45c4      	cmp	ip, r8
 8017bfa:	bfa8      	it	ge
 8017bfc:	4608      	movge	r0, r1
 8017bfe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017c02:	1aad      	subs	r5, r5, r2
 8017c04:	1ac0      	subs	r0, r0, r3
 8017c06:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017c0a:	f8ad 501c 	strh.w	r5, [sp, #28]
 8017c0e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017c12:	4b1f      	ldr	r3, [pc, #124]	; (8017c90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	b953      	cbnz	r3, 8017c2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8017c18:	4b1e      	ldr	r3, [pc, #120]	; (8017c94 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8017c1a:	2189      	movs	r1, #137	; 0x89
 8017c1c:	4a1e      	ldr	r2, [pc, #120]	; (8017c98 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8017c1e:	481f      	ldr	r0, [pc, #124]	; (8017c9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8017c20:	f00d fd6e 	bl	8025700 <__assert_func>
 8017c24:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8017c26:	e7b9      	b.n	8017b9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	9307      	str	r3, [sp, #28]
 8017c2c:	e7f1      	b.n	8017c12 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8017c2e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c36:	429a      	cmp	r2, r3
 8017c38:	d026      	beq.n	8017c88 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017c3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	dd22      	ble.n	8017c88 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017c42:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	dd1e      	ble.n	8017c88 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	a908      	add	r1, sp, #32
 8017c4e:	4620      	mov	r0, r4
 8017c50:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017c54:	6823      	ldr	r3, [r4, #0]
 8017c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c58:	4798      	blx	r3
 8017c5a:	4b11      	ldr	r3, [pc, #68]	; (8017ca0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017c62:	b10a      	cbz	r2, 8017c68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8017c64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017c66:	b900      	cbnz	r0, 8017c6a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8017c68:	6898      	ldr	r0, [r3, #8]
 8017c6a:	2501      	movs	r5, #1
 8017c6c:	6801      	ldr	r1, [r0, #0]
 8017c6e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017c72:	9502      	str	r5, [sp, #8]
 8017c74:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8017c78:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017c7c:	9401      	str	r4, [sp, #4]
 8017c7e:	ac06      	add	r4, sp, #24
 8017c80:	9400      	str	r4, [sp, #0]
 8017c82:	688c      	ldr	r4, [r1, #8]
 8017c84:	a905      	add	r1, sp, #20
 8017c86:	47a0      	blx	r4
 8017c88:	b00a      	add	sp, #40	; 0x28
 8017c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c8e:	bf00      	nop
 8017c90:	2000b434 	.word	0x2000b434
 8017c94:	08029d50 	.word	0x08029d50
 8017c98:	08029e24 	.word	0x08029e24
 8017c9c:	08029d8c 	.word	0x08029d8c
 8017ca0:	2000b36c 	.word	0x2000b36c

08017ca4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017caa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017cac:	4606      	mov	r6, r0
 8017cae:	4299      	cmp	r1, r3
 8017cb0:	d02a      	beq.n	8017d08 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8017cb2:	4b16      	ldr	r3, [pc, #88]	; (8017d0c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	b92b      	cbnz	r3, 8017cc4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8017cb8:	4b15      	ldr	r3, [pc, #84]	; (8017d10 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8017cba:	21b1      	movs	r1, #177	; 0xb1
 8017cbc:	4a15      	ldr	r2, [pc, #84]	; (8017d14 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017cbe:	4816      	ldr	r0, [pc, #88]	; (8017d18 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017cc0:	f00d fd1e 	bl	8025700 <__assert_func>
 8017cc4:	4a15      	ldr	r2, [pc, #84]	; (8017d1c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8017cc6:	8812      	ldrh	r2, [r2, #0]
 8017cc8:	428a      	cmp	r2, r1
 8017cca:	d803      	bhi.n	8017cd4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8017ccc:	4b14      	ldr	r3, [pc, #80]	; (8017d20 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8017cce:	21b2      	movs	r1, #178	; 0xb2
 8017cd0:	4a10      	ldr	r2, [pc, #64]	; (8017d14 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017cd2:	e7f4      	b.n	8017cbe <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8017cd4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017cd8:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017cdc:	4b11      	ldr	r3, [pc, #68]	; (8017d24 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8017cde:	7854      	ldrb	r4, [r2, #1]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017ce6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017cea:	682b      	ldr	r3, [r5, #0]
 8017cec:	69df      	ldr	r7, [r3, #28]
 8017cee:	4b0e      	ldr	r3, [pc, #56]	; (8017d28 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8017cf0:	6818      	ldr	r0, [r3, #0]
 8017cf2:	f7fa fdd9 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	4621      	mov	r1, r4
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	4628      	mov	r0, r5
 8017d00:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8017d02:	47b8      	blx	r7
 8017d04:	b003      	add	sp, #12
 8017d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d08:	2000      	movs	r0, #0
 8017d0a:	e7fb      	b.n	8017d04 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8017d0c:	2000b3fc 	.word	0x2000b3fc
 8017d10:	08029b7c 	.word	0x08029b7c
 8017d14:	08029ed4 	.word	0x08029ed4
 8017d18:	08029bbe 	.word	0x08029bbe
 8017d1c:	2000b400 	.word	0x2000b400
 8017d20:	08029be7 	.word	0x08029be7
 8017d24:	2000b404 	.word	0x2000b404
 8017d28:	2000b408 	.word	0x2000b408

08017d2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017d2c:	b570      	push	{r4, r5, r6, lr}
 8017d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d32:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017d34:	4604      	mov	r4, r0
 8017d36:	4299      	cmp	r1, r3
 8017d38:	d01e      	beq.n	8017d78 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8017d3a:	6803      	ldr	r3, [r0, #0]
 8017d3c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017d3e:	4b0f      	ldr	r3, [pc, #60]	; (8017d7c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	b92b      	cbnz	r3, 8017d50 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017d44:	4b0e      	ldr	r3, [pc, #56]	; (8017d80 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8017d46:	21b1      	movs	r1, #177	; 0xb1
 8017d48:	4a0e      	ldr	r2, [pc, #56]	; (8017d84 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017d4a:	480f      	ldr	r0, [pc, #60]	; (8017d88 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017d4c:	f00d fcd8 	bl	8025700 <__assert_func>
 8017d50:	4b0e      	ldr	r3, [pc, #56]	; (8017d8c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017d52:	881b      	ldrh	r3, [r3, #0]
 8017d54:	428b      	cmp	r3, r1
 8017d56:	d803      	bhi.n	8017d60 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8017d58:	4b0d      	ldr	r3, [pc, #52]	; (8017d90 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8017d5a:	21b2      	movs	r1, #178	; 0xb2
 8017d5c:	4a09      	ldr	r2, [pc, #36]	; (8017d84 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017d5e:	e7f4      	b.n	8017d4a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017d60:	4b0c      	ldr	r3, [pc, #48]	; (8017d94 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017d62:	6818      	ldr	r0, [r3, #0]
 8017d64:	f7fa fda0 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 8017d68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017d6a:	4601      	mov	r1, r0
 8017d6c:	46ac      	mov	ip, r5
 8017d6e:	4620      	mov	r0, r4
 8017d70:	2300      	movs	r3, #0
 8017d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d76:	4760      	bx	ip
 8017d78:	2000      	movs	r0, #0
 8017d7a:	bd70      	pop	{r4, r5, r6, pc}
 8017d7c:	2000b3fc 	.word	0x2000b3fc
 8017d80:	08029b7c 	.word	0x08029b7c
 8017d84:	08029ed4 	.word	0x08029ed4
 8017d88:	08029bbe 	.word	0x08029bbe
 8017d8c:	2000b400 	.word	0x2000b400
 8017d90:	08029be7 	.word	0x08029be7
 8017d94:	2000b408 	.word	0x2000b408

08017d98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017da0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017da2:	b08c      	sub	sp, #48	; 0x30
 8017da4:	4604      	mov	r4, r0
 8017da6:	4293      	cmp	r3, r2
 8017da8:	460e      	mov	r6, r1
 8017daa:	d05d      	beq.n	8017e68 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017dac:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017e8c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017db0:	f8d8 2000 	ldr.w	r2, [r8]
 8017db4:	b92a      	cbnz	r2, 8017dc2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8017db6:	4b2e      	ldr	r3, [pc, #184]	; (8017e70 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8017db8:	21b1      	movs	r1, #177	; 0xb1
 8017dba:	4a2e      	ldr	r2, [pc, #184]	; (8017e74 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017dbc:	482e      	ldr	r0, [pc, #184]	; (8017e78 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8017dbe:	f00d fc9f 	bl	8025700 <__assert_func>
 8017dc2:	4f2e      	ldr	r7, [pc, #184]	; (8017e7c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8017dc4:	8839      	ldrh	r1, [r7, #0]
 8017dc6:	4299      	cmp	r1, r3
 8017dc8:	d803      	bhi.n	8017dd2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8017dca:	4b2d      	ldr	r3, [pc, #180]	; (8017e80 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8017dcc:	21b2      	movs	r1, #178	; 0xb2
 8017dce:	4a29      	ldr	r2, [pc, #164]	; (8017e74 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017dd0:	e7f4      	b.n	8017dbc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8017dd2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017dd6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017dda:	4b2a      	ldr	r3, [pc, #168]	; (8017e84 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017de2:	2a00      	cmp	r2, #0
 8017de4:	d040      	beq.n	8017e68 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017de6:	784b      	ldrb	r3, [r1, #1]
 8017de8:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8017dec:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017df0:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017df4:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017df8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017dfc:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017e00:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8017e04:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017e08:	ad05      	add	r5, sp, #20
 8017e0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017e0c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017e10:	9207      	str	r2, [sp, #28]
 8017e12:	f88d 9020 	strb.w	r9, [sp, #32]
 8017e16:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017e1a:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017e1e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017e22:	9009      	str	r0, [sp, #36]	; 0x24
 8017e24:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8017e28:	f7f4 fc8a 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8017e2c:	4621      	mov	r1, r4
 8017e2e:	4681      	mov	r9, r0
 8017e30:	4628      	mov	r0, r5
 8017e32:	f001 ffb0 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e36:	f8d8 3000 	ldr.w	r3, [r8]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d0bb      	beq.n	8017db6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017e3e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017e40:	883b      	ldrh	r3, [r7, #0]
 8017e42:	428b      	cmp	r3, r1
 8017e44:	d9c1      	bls.n	8017dca <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8017e46:	4b10      	ldr	r3, [pc, #64]	; (8017e88 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8017e48:	6818      	ldr	r0, [r3, #0]
 8017e4a:	f7fa fd2d 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 8017e4e:	2300      	movs	r3, #0
 8017e50:	9303      	str	r3, [sp, #12]
 8017e52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e54:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017e58:	ab07      	add	r3, sp, #28
 8017e5a:	4648      	mov	r0, r9
 8017e5c:	9300      	str	r3, [sp, #0]
 8017e5e:	4633      	mov	r3, r6
 8017e60:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017e64:	f7fa fcb1 	bl	80127ca <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017e68:	b00c      	add	sp, #48	; 0x30
 8017e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e6e:	bf00      	nop
 8017e70:	08029b7c 	.word	0x08029b7c
 8017e74:	08029ed4 	.word	0x08029ed4
 8017e78:	08029bbe 	.word	0x08029bbe
 8017e7c:	2000b400 	.word	0x2000b400
 8017e80:	08029be7 	.word	0x08029be7
 8017e84:	2000b404 	.word	0x2000b404
 8017e88:	2000b408 	.word	0x2000b408
 8017e8c:	2000b3fc 	.word	0x2000b3fc

08017e90 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8017e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e94:	461c      	mov	r4, r3
 8017e96:	4606      	mov	r6, r0
 8017e98:	9f06      	ldr	r7, [sp, #24]
 8017e9a:	f7ff fe4d 	bl	8017b38 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8017e9e:	8823      	ldrh	r3, [r4, #0]
 8017ea0:	f04f 0802 	mov.w	r8, #2
 8017ea4:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8017ea8:	4638      	mov	r0, r7
 8017eaa:	86b3      	strh	r3, [r6, #52]	; 0x34
 8017eac:	883b      	ldrh	r3, [r7, #0]
 8017eae:	fb95 f5f8 	sdiv	r5, r5, r8
 8017eb2:	86f3      	strh	r3, [r6, #54]	; 0x36
 8017eb4:	b2ad      	uxth	r5, r5
 8017eb6:	f003 fdd5 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017eba:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8017ebe:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8017ec2:	fb94 f4f8 	sdiv	r4, r4, r8
 8017ec6:	b2a4      	uxth	r4, r4
 8017ec8:	8730      	strh	r0, [r6, #56]	; 0x38
 8017eca:	4638      	mov	r0, r7
 8017ecc:	f003 fe04 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ed0:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8017ed4:	8770      	strh	r0, [r6, #58]	; 0x3a
 8017ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017edc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8017edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ee0:	4604      	mov	r4, r0
 8017ee2:	b08c      	sub	sp, #48	; 0x30
 8017ee4:	460d      	mov	r5, r1
 8017ee6:	f7ff fe4f 	bl	8017b88 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8017eea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017eee:	b33b      	cbz	r3, 8017f40 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8017ef0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017ef2:	a805      	add	r0, sp, #20
 8017ef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ef8:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8017efc:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8017f00:	f003 fdb0 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017f04:	4606      	mov	r6, r0
 8017f06:	a805      	add	r0, sp, #20
 8017f08:	f003 fde6 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017f0c:	6869      	ldr	r1, [r5, #4]
 8017f0e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017f12:	ab08      	add	r3, sp, #32
 8017f14:	6828      	ldr	r0, [r5, #0]
 8017f16:	ad08      	add	r5, sp, #32
 8017f18:	f8ad 8018 	strh.w	r8, [sp, #24]
 8017f1c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8017f20:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017f24:	c303      	stmia	r3!, {r0, r1}
 8017f26:	a906      	add	r1, sp, #24
 8017f28:	4628      	mov	r0, r5
 8017f2a:	f7fd fd7b 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 8017f2e:	4b25      	ldr	r3, [pc, #148]	; (8017fc4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	b93b      	cbnz	r3, 8017f44 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8017f34:	4b24      	ldr	r3, [pc, #144]	; (8017fc8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 8017f36:	2189      	movs	r1, #137	; 0x89
 8017f38:	4a24      	ldr	r2, [pc, #144]	; (8017fcc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 8017f3a:	4825      	ldr	r0, [pc, #148]	; (8017fd0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8017f3c:	f00d fbe0 	bl	8025700 <__assert_func>
 8017f40:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017f42:	e7d6      	b.n	8017ef2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8017f44:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	d035      	beq.n	8017fbc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8017f50:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	dd31      	ble.n	8017fbc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8017f58:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	dd2d      	ble.n	8017fbc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8017f60:	2300      	movs	r3, #0
 8017f62:	a90a      	add	r1, sp, #40	; 0x28
 8017f64:	4620      	mov	r0, r4
 8017f66:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017f6a:	6823      	ldr	r3, [r4, #0]
 8017f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f6e:	4798      	blx	r3
 8017f70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017f74:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8017f76:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017f7a:	1a9b      	subs	r3, r3, r2
 8017f7c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017f80:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8017f82:	1ac9      	subs	r1, r1, r3
 8017f84:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8017f88:	4912      	ldr	r1, [pc, #72]	; (8017fd4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 8017f8a:	6809      	ldr	r1, [r1, #0]
 8017f8c:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 8017f90:	b108      	cbz	r0, 8017f96 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8017f92:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8017f94:	b900      	cbnz	r0, 8017f98 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 8017f96:	6888      	ldr	r0, [r1, #8]
 8017f98:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8017f9c:	2601      	movs	r6, #1
 8017f9e:	440b      	add	r3, r1
 8017fa0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8017fa4:	440a      	add	r2, r1
 8017fa6:	6801      	ldr	r1, [r0, #0]
 8017fa8:	9602      	str	r6, [sp, #8]
 8017faa:	b21b      	sxth	r3, r3
 8017fac:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8017fb0:	b212      	sxth	r2, r2
 8017fb2:	e9cd 5400 	strd	r5, r4, [sp]
 8017fb6:	688c      	ldr	r4, [r1, #8]
 8017fb8:	a905      	add	r1, sp, #20
 8017fba:	47a0      	blx	r4
 8017fbc:	b00c      	add	sp, #48	; 0x30
 8017fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc2:	bf00      	nop
 8017fc4:	2000b434 	.word	0x2000b434
 8017fc8:	08029d50 	.word	0x08029d50
 8017fcc:	08029f78 	.word	0x08029f78
 8017fd0:	08029d8c 	.word	0x08029d8c
 8017fd4:	2000b36c 	.word	0x2000b36c

08017fd8 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8017fd8:	2101      	movs	r1, #1
 8017fda:	2200      	movs	r2, #0
 8017fdc:	b510      	push	{r4, lr}
 8017fde:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017fe2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8017fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017fea:	4c0c      	ldr	r4, [pc, #48]	; (801801c <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 8017fec:	8082      	strh	r2, [r0, #4]
 8017fee:	80c2      	strh	r2, [r0, #6]
 8017ff0:	8102      	strh	r2, [r0, #8]
 8017ff2:	8142      	strh	r2, [r0, #10]
 8017ff4:	8182      	strh	r2, [r0, #12]
 8017ff6:	81c2      	strh	r2, [r0, #14]
 8017ff8:	8202      	strh	r2, [r0, #16]
 8017ffa:	8242      	strh	r2, [r0, #18]
 8017ffc:	61c2      	str	r2, [r0, #28]
 8017ffe:	6282      	str	r2, [r0, #40]	; 0x28
 8018000:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8018004:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8018006:	8601      	strh	r1, [r0, #48]	; 0x30
 8018008:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801800c:	6004      	str	r4, [r0, #0]
 801800e:	8681      	strh	r1, [r0, #52]	; 0x34
 8018010:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018012:	8702      	strh	r2, [r0, #56]	; 0x38
 8018014:	8742      	strh	r2, [r0, #58]	; 0x3a
 8018016:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801801a:	bd10      	pop	{r4, pc}
 801801c:	08029f0c 	.word	0x08029f0c

08018020 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018020:	b570      	push	{r4, r5, r6, lr}
 8018022:	4605      	mov	r5, r0
 8018024:	880b      	ldrh	r3, [r1, #0]
 8018026:	4604      	mov	r4, r0
 8018028:	84c3      	strh	r3, [r0, #38]	; 0x26
 801802a:	f855 3b26 	ldr.w	r3, [r5], #38
 801802e:	4628      	mov	r0, r5
 8018030:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8018032:	f003 fd17 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018036:	b201      	sxth	r1, r0
 8018038:	4620      	mov	r0, r4
 801803a:	47b0      	blx	r6
 801803c:	6823      	ldr	r3, [r4, #0]
 801803e:	4628      	mov	r0, r5
 8018040:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8018042:	f003 fd49 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018046:	b201      	sxth	r1, r0
 8018048:	4620      	mov	r0, r4
 801804a:	4633      	mov	r3, r6
 801804c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018050:	4718      	bx	r3

08018052 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018052:	b510      	push	{r4, lr}
 8018054:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018058:	4604      	mov	r4, r0
 801805a:	2bff      	cmp	r3, #255	; 0xff
 801805c:	d006      	beq.n	801806c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801805e:	2300      	movs	r3, #0
 8018060:	8003      	strh	r3, [r0, #0]
 8018062:	8043      	strh	r3, [r0, #2]
 8018064:	8083      	strh	r3, [r0, #4]
 8018066:	80c3      	strh	r3, [r0, #6]
 8018068:	4620      	mov	r0, r4
 801806a:	bd10      	pop	{r4, pc}
 801806c:	3126      	adds	r1, #38	; 0x26
 801806e:	f003 fd6d 	bl	801bb4c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018072:	e7f9      	b.n	8018068 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018074 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018078:	4604      	mov	r4, r0
 801807a:	b088      	sub	sp, #32
 801807c:	2500      	movs	r5, #0
 801807e:	460f      	mov	r7, r1
 8018080:	f854 3b26 	ldr.w	r3, [r4], #38
 8018084:	a904      	add	r1, sp, #16
 8018086:	4606      	mov	r6, r0
 8018088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801808a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801808e:	4798      	blx	r3
 8018090:	4620      	mov	r0, r4
 8018092:	f003 fce7 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018096:	4680      	mov	r8, r0
 8018098:	4620      	mov	r0, r4
 801809a:	f003 fd1d 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801809e:	9506      	str	r5, [sp, #24]
 80180a0:	ad06      	add	r5, sp, #24
 80180a2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80180a6:	4639      	mov	r1, r7
 80180a8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80180ac:	4628      	mov	r0, r5
 80180ae:	f7fd fcb9 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 80180b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	dd19      	ble.n	80180ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80180ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	dd15      	ble.n	80180ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80180c2:	4b0c      	ldr	r3, [pc, #48]	; (80180f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80180ca:	b10a      	cbz	r2, 80180d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80180cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80180ce:	b900      	cbnz	r0, 80180d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80180d0:	6898      	ldr	r0, [r3, #8]
 80180d2:	2701      	movs	r7, #1
 80180d4:	6801      	ldr	r1, [r0, #0]
 80180d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80180da:	9702      	str	r7, [sp, #8]
 80180dc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80180e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80180e4:	e9cd 5600 	strd	r5, r6, [sp]
 80180e8:	688d      	ldr	r5, [r1, #8]
 80180ea:	4621      	mov	r1, r4
 80180ec:	47a8      	blx	r5
 80180ee:	b008      	add	sp, #32
 80180f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180f4:	2000b36c 	.word	0x2000b36c

080180f8 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 80180f8:	b510      	push	{r4, lr}
 80180fa:	4604      	mov	r4, r0
 80180fc:	f7ff fd2d 	bl	8017b5a <_ZNK8touchgfx6Button12getSolidRectEv>
 8018100:	4620      	mov	r0, r4
 8018102:	bd10      	pop	{r4, pc}

08018104 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8018104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018108:	4604      	mov	r4, r0
 801810a:	b08c      	sub	sp, #48	; 0x30
 801810c:	4688      	mov	r8, r1
 801810e:	f7ff fd3b 	bl	8017b88 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8018112:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018118:	4293      	cmp	r3, r2
 801811a:	f000 809a 	beq.w	8018252 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801811e:	4e55      	ldr	r6, [pc, #340]	; (8018274 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8018120:	6832      	ldr	r2, [r6, #0]
 8018122:	b92a      	cbnz	r2, 8018130 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8018124:	4b54      	ldr	r3, [pc, #336]	; (8018278 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8018126:	21b1      	movs	r1, #177	; 0xb1
 8018128:	4a54      	ldr	r2, [pc, #336]	; (801827c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801812a:	4855      	ldr	r0, [pc, #340]	; (8018280 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801812c:	f00d fae8 	bl	8025700 <__assert_func>
 8018130:	4d54      	ldr	r5, [pc, #336]	; (8018284 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 8018132:	8829      	ldrh	r1, [r5, #0]
 8018134:	4299      	cmp	r1, r3
 8018136:	d803      	bhi.n	8018140 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8018138:	4b53      	ldr	r3, [pc, #332]	; (8018288 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801813a:	21b2      	movs	r1, #178	; 0xb2
 801813c:	4a4f      	ldr	r2, [pc, #316]	; (801827c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801813e:	e7f4      	b.n	801812a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8018140:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018144:	f04f 0c02 	mov.w	ip, #2
 8018148:	4b50      	ldr	r3, [pc, #320]	; (801828c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801814a:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018154:	f1be 0f01 	cmp.w	lr, #1
 8018158:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801815c:	f04f 0300 	mov.w	r3, #0
 8018160:	b208      	sxth	r0, r1
 8018162:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018166:	9303      	str	r3, [sp, #12]
 8018168:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801816c:	d074      	beq.n	8018258 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801816e:	f1be 0f03 	cmp.w	lr, #3
 8018172:	d071      	beq.n	8018258 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8018174:	1a52      	subs	r2, r2, r1
 8018176:	f8ad 3010 	strh.w	r3, [sp, #16]
 801817a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801817e:	fb92 f2fc 	sdiv	r2, r2, ip
 8018182:	f8ad 200e 	strh.w	r2, [sp, #14]
 8018186:	f10d 090c 	add.w	r9, sp, #12
 801818a:	f10d 0a14 	add.w	sl, sp, #20
 801818e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018192:	e88a 0003 	stmia.w	sl, {r0, r1}
 8018196:	4641      	mov	r1, r8
 8018198:	4650      	mov	r0, sl
 801819a:	f7fd fc43 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 801819e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	dd55      	ble.n	8018252 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80181a6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	dd51      	ble.n	8018252 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80181ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80181b2:	4649      	mov	r1, r9
 80181b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80181b8:	4620      	mov	r0, r4
 80181ba:	1a9b      	subs	r3, r3, r2
 80181bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80181c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80181c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80181c8:	1a9b      	subs	r3, r3, r2
 80181ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80181ce:	6823      	ldr	r3, [r4, #0]
 80181d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181d2:	4798      	blx	r3
 80181d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d047      	beq.n	801826c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 80181dc:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80181e0:	6833      	ldr	r3, [r6, #0]
 80181e2:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d09c      	beq.n	8018124 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 80181ea:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80181ec:	8828      	ldrh	r0, [r5, #0]
 80181ee:	4288      	cmp	r0, r1
 80181f0:	d9a2      	bls.n	8018138 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 80181f2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80181f6:	6812      	ldr	r2, [r2, #0]
 80181f8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80181fc:	785b      	ldrb	r3, [r3, #1]
 80181fe:	9209      	str	r2, [sp, #36]	; 0x24
 8018200:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8018204:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018208:	9707      	str	r7, [sp, #28]
 801820a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801820e:	2300      	movs	r3, #0
 8018210:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8018214:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8018218:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801821c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018220:	4b1b      	ldr	r3, [pc, #108]	; (8018290 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 8018222:	f88d 5020 	strb.w	r5, [sp, #32]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801822c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018230:	b10a      	cbz	r2, 8018236 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 8018232:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018234:	b904      	cbnz	r4, 8018238 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 8018236:	689c      	ldr	r4, [r3, #8]
 8018238:	4b16      	ldr	r3, [pc, #88]	; (8018294 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801823a:	6818      	ldr	r0, [r3, #0]
 801823c:	f7fa fb34 	bl	80128a8 <_ZNK8touchgfx5Texts7getTextEt>
 8018240:	ab07      	add	r3, sp, #28
 8018242:	9001      	str	r0, [sp, #4]
 8018244:	4620      	mov	r0, r4
 8018246:	9300      	str	r3, [sp, #0]
 8018248:	4653      	mov	r3, sl
 801824a:	e899 0006 	ldmia.w	r9, {r1, r2}
 801824e:	f7fa fabc 	bl	80127ca <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018252:	b00c      	add	sp, #48	; 0x30
 8018254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018258:	1a5b      	subs	r3, r3, r1
 801825a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801825e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018262:	fb93 f3fc 	sdiv	r3, r3, ip
 8018266:	f8ad 300c 	strh.w	r3, [sp, #12]
 801826a:	e78c      	b.n	8018186 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801826c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8018270:	e7b6      	b.n	80181e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 8018272:	bf00      	nop
 8018274:	2000b3fc 	.word	0x2000b3fc
 8018278:	08029b7c 	.word	0x08029b7c
 801827c:	0802a088 	.word	0x0802a088
 8018280:	08029bbe 	.word	0x08029bbe
 8018284:	2000b400 	.word	0x2000b400
 8018288:	08029be7 	.word	0x08029be7
 801828c:	2000b404 	.word	0x2000b404
 8018290:	2000b36c 	.word	0x2000b36c
 8018294:	2000b408 	.word	0x2000b408

08018298 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8018298:	2101      	movs	r1, #1
 801829a:	2200      	movs	r2, #0
 801829c:	b510      	push	{r4, lr}
 801829e:	4c12      	ldr	r4, [pc, #72]	; (80182e8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 80182a0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80182a4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80182a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80182ac:	6004      	str	r4, [r0, #0]
 80182ae:	4c0f      	ldr	r4, [pc, #60]	; (80182ec <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80182b0:	8082      	strh	r2, [r0, #4]
 80182b2:	80c2      	strh	r2, [r0, #6]
 80182b4:	8102      	strh	r2, [r0, #8]
 80182b6:	8142      	strh	r2, [r0, #10]
 80182b8:	8182      	strh	r2, [r0, #12]
 80182ba:	81c2      	strh	r2, [r0, #14]
 80182bc:	8202      	strh	r2, [r0, #16]
 80182be:	8242      	strh	r2, [r0, #18]
 80182c0:	61c2      	str	r2, [r0, #28]
 80182c2:	6282      	str	r2, [r0, #40]	; 0x28
 80182c4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80182c8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80182ca:	8601      	strh	r1, [r0, #48]	; 0x30
 80182cc:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80182d0:	6344      	str	r4, [r0, #52]	; 0x34
 80182d2:	8701      	strh	r1, [r0, #56]	; 0x38
 80182d4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80182d8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 80182dc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80182e0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80182e4:	bd10      	pop	{r4, pc}
 80182e6:	bf00      	nop
 80182e8:	0802a020 	.word	0x0802a020
 80182ec:	080272c4 	.word	0x080272c4

080182f0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80182f0:	4b02      	ldr	r3, [pc, #8]	; (80182fc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80182f2:	6018      	str	r0, [r3, #0]
 80182f4:	4b02      	ldr	r3, [pc, #8]	; (8018300 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80182f6:	6019      	str	r1, [r3, #0]
 80182f8:	4770      	bx	lr
 80182fa:	bf00      	nop
 80182fc:	2000b374 	.word	0x2000b374
 8018300:	2000b388 	.word	0x2000b388

08018304 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8018304:	b538      	push	{r3, r4, r5, lr}
 8018306:	4c2b      	ldr	r4, [pc, #172]	; (80183b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8018308:	4b2b      	ldr	r3, [pc, #172]	; (80183b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801830a:	6821      	ldr	r1, [r4, #0]
 801830c:	681a      	ldr	r2, [r3, #0]
 801830e:	4281      	cmp	r1, r0
 8018310:	4d2a      	ldr	r5, [pc, #168]	; (80183bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8018312:	492b      	ldr	r1, [pc, #172]	; (80183c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8018314:	d108      	bne.n	8018328 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8018316:	682b      	ldr	r3, [r5, #0]
 8018318:	4293      	cmp	r3, r2
 801831a:	d105      	bne.n	8018328 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801831c:	6808      	ldr	r0, [r1, #0]
 801831e:	280f      	cmp	r0, #15
 8018320:	bf94      	ite	ls
 8018322:	2000      	movls	r0, #0
 8018324:	2001      	movhi	r0, #1
 8018326:	bd38      	pop	{r3, r4, r5, pc}
 8018328:	4b26      	ldr	r3, [pc, #152]	; (80183c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801832a:	6020      	str	r0, [r4, #0]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	602a      	str	r2, [r5, #0]
 8018330:	4298      	cmp	r0, r3
 8018332:	d905      	bls.n	8018340 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8018334:	4b24      	ldr	r3, [pc, #144]	; (80183c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018336:	2137      	movs	r1, #55	; 0x37
 8018338:	4a24      	ldr	r2, [pc, #144]	; (80183cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801833a:	4825      	ldr	r0, [pc, #148]	; (80183d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801833c:	f00d f9e0 	bl	8025700 <__assert_func>
 8018340:	f010 0403 	ands.w	r4, r0, #3
 8018344:	bf1f      	itttt	ne
 8018346:	f1c4 0504 	rsbne	r5, r4, #4
 801834a:	3b04      	subne	r3, #4
 801834c:	1952      	addne	r2, r2, r5
 801834e:	191b      	addne	r3, r3, r4
 8018350:	4d20      	ldr	r5, [pc, #128]	; (80183d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8018352:	4402      	add	r2, r0
 8018354:	1a1b      	subs	r3, r3, r0
 8018356:	3001      	adds	r0, #1
 8018358:	602a      	str	r2, [r5, #0]
 801835a:	f020 0401 	bic.w	r4, r0, #1
 801835e:	42a3      	cmp	r3, r4
 8018360:	d203      	bcs.n	801836a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8018362:	4b19      	ldr	r3, [pc, #100]	; (80183c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018364:	214a      	movs	r1, #74	; 0x4a
 8018366:	4a19      	ldr	r2, [pc, #100]	; (80183cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018368:	e7e7      	b.n	801833a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801836a:	f010 0002 	ands.w	r0, r0, #2
 801836e:	bf1f      	itttt	ne
 8018370:	f1c0 0504 	rsbne	r5, r0, #4
 8018374:	1952      	addne	r2, r2, r5
 8018376:	1f05      	subne	r5, r0, #4
 8018378:	195b      	addne	r3, r3, r5
 801837a:	4422      	add	r2, r4
 801837c:	4d16      	ldr	r5, [pc, #88]	; (80183d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801837e:	1b1b      	subs	r3, r3, r4
 8018380:	602a      	str	r2, [r5, #0]
 8018382:	429c      	cmp	r4, r3
 8018384:	d903      	bls.n	801838e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8018386:	4b10      	ldr	r3, [pc, #64]	; (80183c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018388:	215d      	movs	r1, #93	; 0x5d
 801838a:	4a10      	ldr	r2, [pc, #64]	; (80183cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801838c:	e7d5      	b.n	801833a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801838e:	b120      	cbz	r0, 801839a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8018390:	f1c0 0504 	rsb	r5, r0, #4
 8018394:	3804      	subs	r0, #4
 8018396:	442a      	add	r2, r5
 8018398:	4403      	add	r3, r0
 801839a:	1b1b      	subs	r3, r3, r4
 801839c:	4422      	add	r2, r4
 801839e:	480f      	ldr	r0, [pc, #60]	; (80183dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 80183a0:	2b0f      	cmp	r3, #15
 80183a2:	600b      	str	r3, [r1, #0]
 80183a4:	6002      	str	r2, [r0, #0]
 80183a6:	d803      	bhi.n	80183b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80183a8:	4b0d      	ldr	r3, [pc, #52]	; (80183e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80183aa:	2170      	movs	r1, #112	; 0x70
 80183ac:	4a07      	ldr	r2, [pc, #28]	; (80183cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80183ae:	e7c4      	b.n	801833a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80183b0:	2001      	movs	r0, #1
 80183b2:	e7b8      	b.n	8018326 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80183b4:	2000b37c 	.word	0x2000b37c
 80183b8:	2000b374 	.word	0x2000b374
 80183bc:	2000b384 	.word	0x2000b384
 80183c0:	2000b38c 	.word	0x2000b38c
 80183c4:	2000b388 	.word	0x2000b388
 80183c8:	0802a0b6 	.word	0x0802a0b6
 80183cc:	0802a17e 	.word	0x0802a17e
 80183d0:	0802a0ef 	.word	0x0802a0ef
 80183d4:	2000b390 	.word	0x2000b390
 80183d8:	2000b380 	.word	0x2000b380
 80183dc:	2000b378 	.word	0x2000b378
 80183e0:	0802a139 	.word	0x0802a139

080183e4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80183e4:	4b04      	ldr	r3, [pc, #16]	; (80183f8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80183e6:	6818      	ldr	r0, [r3, #0]
 80183e8:	b120      	cbz	r0, 80183f4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80183ea:	4b04      	ldr	r3, [pc, #16]	; (80183fc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80183ec:	6818      	ldr	r0, [r3, #0]
 80183ee:	3000      	adds	r0, #0
 80183f0:	bf18      	it	ne
 80183f2:	2001      	movne	r0, #1
 80183f4:	4770      	bx	lr
 80183f6:	bf00      	nop
 80183f8:	2000b374 	.word	0x2000b374
 80183fc:	2000b388 	.word	0x2000b388

08018400 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8018400:	4b01      	ldr	r3, [pc, #4]	; (8018408 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8018402:	6818      	ldr	r0, [r3, #0]
 8018404:	4770      	bx	lr
 8018406:	bf00      	nop
 8018408:	2000b37c 	.word	0x2000b37c

0801840c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801840c:	4b01      	ldr	r3, [pc, #4]	; (8018414 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801840e:	6818      	ldr	r0, [r3, #0]
 8018410:	4770      	bx	lr
 8018412:	bf00      	nop
 8018414:	2000b384 	.word	0x2000b384

08018418 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8018418:	4b01      	ldr	r3, [pc, #4]	; (8018420 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801841a:	6818      	ldr	r0, [r3, #0]
 801841c:	4770      	bx	lr
 801841e:	bf00      	nop
 8018420:	2000b390 	.word	0x2000b390

08018424 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8018424:	4b01      	ldr	r3, [pc, #4]	; (801842c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8018426:	6818      	ldr	r0, [r3, #0]
 8018428:	4770      	bx	lr
 801842a:	bf00      	nop
 801842c:	2000b380 	.word	0x2000b380

08018430 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018430:	4b01      	ldr	r3, [pc, #4]	; (8018438 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018432:	6818      	ldr	r0, [r3, #0]
 8018434:	4770      	bx	lr
 8018436:	bf00      	nop
 8018438:	2000b378 	.word	0x2000b378

0801843c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801843c:	4b01      	ldr	r3, [pc, #4]	; (8018444 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801843e:	6818      	ldr	r0, [r3, #0]
 8018440:	4770      	bx	lr
 8018442:	bf00      	nop
 8018444:	2000b38c 	.word	0x2000b38c

08018448 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018448:	2000      	movs	r0, #0
 801844a:	4770      	bx	lr

0801844c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018450:	b091      	sub	sp, #68	; 0x44
 8018452:	4699      	mov	r9, r3
 8018454:	4617      	mov	r7, r2
 8018456:	2500      	movs	r5, #0
 8018458:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801845c:	4680      	mov	r8, r0
 801845e:	a80e      	add	r0, sp, #56	; 0x38
 8018460:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8018462:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8018466:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801846a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801846e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018472:	910d      	str	r1, [sp, #52]	; 0x34
 8018474:	950e      	str	r5, [sp, #56]	; 0x38
 8018476:	f000 fe39 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801847a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801847c:	f8d9 6000 	ldr.w	r6, [r9]
 8018480:	6818      	ldr	r0, [r3, #0]
 8018482:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018484:	f9b4 b000 	ldrsh.w	fp, [r4]
 8018488:	1b80      	subs	r0, r0, r6
 801848a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801848e:	eb02 0c06 	add.w	ip, r2, r6
 8018492:	ebab 0e0c 	sub.w	lr, fp, ip
 8018496:	4570      	cmp	r0, lr
 8018498:	f340 80bc 	ble.w	8018614 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801849c:	88a1      	ldrh	r1, [r4, #4]
 801849e:	4459      	add	r1, fp
 80184a0:	b209      	sxth	r1, r1
 80184a2:	458c      	cmp	ip, r1
 80184a4:	f300 80b6 	bgt.w	8018614 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80184a8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80184ac:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 80184b0:	4283      	cmp	r3, r0
 80184b2:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 80184b6:	edd9 6a07 	vldr	s13, [r9, #28]
 80184ba:	bfa8      	it	ge
 80184bc:	4603      	movge	r3, r0
 80184be:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 80184c2:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80184c6:	45e3      	cmp	fp, ip
 80184c8:	ee07 3a90 	vmov	s15, r3
 80184cc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80184d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80184d4:	ee25 4a04 	vmul.f32	s8, s10, s8
 80184d8:	ee65 4a24 	vmul.f32	s9, s10, s9
 80184dc:	ee25 5a27 	vmul.f32	s10, s10, s15
 80184e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80184e4:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80184e8:	ee32 1a05 	vadd.f32	s2, s4, s10
 80184ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80184f0:	ee36 0a84 	vadd.f32	s0, s13, s8
 80184f4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80184f8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80184fc:	f340 808d 	ble.w	801861a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8018500:	fb9e f5f3 	sdiv	r5, lr, r3
 8018504:	ee07 5a10 	vmov	s14, r5
 8018508:	2d00      	cmp	r5, #0
 801850a:	fb03 e415 	mls	r4, r3, r5, lr
 801850e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018512:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018516:	eee7 0a24 	vfma.f32	s1, s14, s9
 801851a:	eea7 1a05 	vfma.f32	s2, s14, s10
 801851e:	dd12      	ble.n	8018546 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8018520:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018524:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018528:	ee31 2a45 	vsub.f32	s4, s2, s10
 801852c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018534:	bf14      	ite	ne
 8018536:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801853a:	eeb0 7a67 	vmoveq.f32	s14, s15
 801853e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018542:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018546:	fb05 f703 	mul.w	r7, r5, r3
 801854a:	1bc0      	subs	r0, r0, r7
 801854c:	443e      	add	r6, r7
 801854e:	1997      	adds	r7, r2, r6
 8018550:	4407      	add	r7, r0
 8018552:	42b9      	cmp	r1, r7
 8018554:	bfbc      	itt	lt
 8018556:	1a88      	sublt	r0, r1, r2
 8018558:	1b80      	sublt	r0, r0, r6
 801855a:	2800      	cmp	r0, #0
 801855c:	dd5a      	ble.n	8018614 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801855e:	fb90 f1f3 	sdiv	r1, r0, r3
 8018562:	fb03 0211 	mls	r2, r3, r1, r0
 8018566:	b90a      	cbnz	r2, 801856c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8018568:	3901      	subs	r1, #1
 801856a:	461a      	mov	r2, r3
 801856c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018570:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8018574:	44a4      	add	ip, r4
 8018576:	2900      	cmp	r1, #0
 8018578:	bfcc      	ite	gt
 801857a:	469e      	movgt	lr, r3
 801857c:	4696      	movle	lr, r2
 801857e:	fb03 c505 	mla	r5, r3, r5, ip
 8018582:	eef0 6a42 	vmov.f32	s13, s4
 8018586:	eeb0 7a61 	vmov.f32	s14, s3
 801858a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801858e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018592:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018596:	ee21 3a23 	vmul.f32	s6, s2, s7
 801859a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801859e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80185a2:	ee17 0a90 	vmov	r0, s15
 80185a6:	ee73 7a42 	vsub.f32	s15, s6, s4
 80185aa:	fb90 f6f3 	sdiv	r6, r0, r3
 80185ae:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80185b2:	ee17 0a90 	vmov	r0, s15
 80185b6:	fb90 f7f3 	sdiv	r7, r0, r3
 80185ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80185be:	f8d0 8000 	ldr.w	r8, [r0]
 80185c2:	900c      	str	r0, [sp, #48]	; 0x30
 80185c4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80185c6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80185ca:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80185ce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80185d2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80185d6:	f8cd a020 	str.w	sl, [sp, #32]
 80185da:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80185de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80185e0:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80185e4:	9603      	str	r6, [sp, #12]
 80185e6:	44ca      	add	sl, r9
 80185e8:	9506      	str	r5, [sp, #24]
 80185ea:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80185ee:	ee16 0a90 	vmov	r0, s13
 80185f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80185f6:	fb07 0704 	mla	r7, r7, r4, r0
 80185fa:	ee17 0a10 	vmov	r0, s14
 80185fe:	fb06 0604 	mla	r6, r6, r4, r0
 8018602:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018604:	9702      	str	r7, [sp, #8]
 8018606:	e9cd 3600 	strd	r3, r6, [sp]
 801860a:	ebae 0304 	sub.w	r3, lr, r4
 801860e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018612:	47a8      	blx	r5
 8018614:	b011      	add	sp, #68	; 0x44
 8018616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801861a:	462c      	mov	r4, r5
 801861c:	e797      	b.n	801854e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801861e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801861e:	b570      	push	{r4, r5, r6, lr}
 8018620:	4604      	mov	r4, r0
 8018622:	2500      	movs	r5, #0
 8018624:	9804      	ldr	r0, [sp, #16]
 8018626:	7223      	strb	r3, [r4, #8]
 8018628:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801862c:	8025      	strh	r5, [r4, #0]
 801862e:	6061      	str	r1, [r4, #4]
 8018630:	7263      	strb	r3, [r4, #9]
 8018632:	60e0      	str	r0, [r4, #12]
 8018634:	8222      	strh	r2, [r4, #16]
 8018636:	8265      	strh	r5, [r4, #18]
 8018638:	82a5      	strh	r5, [r4, #20]
 801863a:	82e5      	strh	r5, [r4, #22]
 801863c:	8325      	strh	r5, [r4, #24]
 801863e:	8365      	strh	r5, [r4, #26]
 8018640:	83a5      	strh	r5, [r4, #28]
 8018642:	77a5      	strb	r5, [r4, #30]
 8018644:	6803      	ldr	r3, [r0, #0]
 8018646:	695b      	ldr	r3, [r3, #20]
 8018648:	4798      	blx	r3
 801864a:	4606      	mov	r6, r0
 801864c:	b1f8      	cbz	r0, 801868e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801864e:	68e0      	ldr	r0, [r4, #12]
 8018650:	4631      	mov	r1, r6
 8018652:	6803      	ldr	r3, [r0, #0]
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	4798      	blx	r3
 8018658:	7b43      	ldrb	r3, [r0, #13]
 801865a:	7a82      	ldrb	r2, [r0, #10]
 801865c:	4605      	mov	r5, r0
 801865e:	005b      	lsls	r3, r3, #1
 8018660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018664:	4313      	orrs	r3, r2
 8018666:	83a3      	strh	r3, [r4, #28]
 8018668:	7a63      	ldrb	r3, [r4, #9]
 801866a:	2b04      	cmp	r3, #4
 801866c:	d10f      	bne.n	801868e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801866e:	68e0      	ldr	r0, [r4, #12]
 8018670:	462a      	mov	r2, r5
 8018672:	4631      	mov	r1, r6
 8018674:	6803      	ldr	r3, [r0, #0]
 8018676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018678:	4798      	blx	r3
 801867a:	7b6b      	ldrb	r3, [r5, #13]
 801867c:	005b      	lsls	r3, r3, #1
 801867e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018682:	7aab      	ldrb	r3, [r5, #10]
 8018684:	4313      	orrs	r3, r2
 8018686:	4418      	add	r0, r3
 8018688:	8ba3      	ldrh	r3, [r4, #28]
 801868a:	4418      	add	r0, r3
 801868c:	83a0      	strh	r0, [r4, #28]
 801868e:	4620      	mov	r0, r4
 8018690:	bd70      	pop	{r4, r5, r6, pc}

08018692 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018696:	2400      	movs	r4, #0
 8018698:	b085      	sub	sp, #20
 801869a:	4681      	mov	r9, r0
 801869c:	4688      	mov	r8, r1
 801869e:	4692      	mov	sl, r2
 80186a0:	469b      	mov	fp, r3
 80186a2:	4627      	mov	r7, r4
 80186a4:	4625      	mov	r5, r4
 80186a6:	4626      	mov	r6, r4
 80186a8:	4554      	cmp	r4, sl
 80186aa:	da2a      	bge.n	8018702 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80186ac:	2300      	movs	r3, #0
 80186ae:	9303      	str	r3, [sp, #12]
 80186b0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80186b4:	429d      	cmp	r5, r3
 80186b6:	d004      	beq.n	80186c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80186b8:	f242 030b 	movw	r3, #8203	; 0x200b
 80186bc:	429d      	cmp	r5, r3
 80186be:	bf18      	it	ne
 80186c0:	462f      	movne	r7, r5
 80186c2:	ab03      	add	r3, sp, #12
 80186c4:	4642      	mov	r2, r8
 80186c6:	4659      	mov	r1, fp
 80186c8:	4648      	mov	r0, r9
 80186ca:	f002 fb45 	bl	801ad58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80186ce:	4605      	mov	r5, r0
 80186d0:	b1b8      	cbz	r0, 8018702 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80186d2:	280a      	cmp	r0, #10
 80186d4:	d015      	beq.n	8018702 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80186d6:	9a03      	ldr	r2, [sp, #12]
 80186d8:	b18a      	cbz	r2, 80186fe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80186da:	7b50      	ldrb	r0, [r2, #13]
 80186dc:	4639      	mov	r1, r7
 80186de:	7a93      	ldrb	r3, [r2, #10]
 80186e0:	0040      	lsls	r0, r0, #1
 80186e2:	8895      	ldrh	r5, [r2, #4]
 80186e4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80186e8:	4303      	orrs	r3, r0
 80186ea:	4640      	mov	r0, r8
 80186ec:	9301      	str	r3, [sp, #4]
 80186ee:	f8d8 3000 	ldr.w	r3, [r8]
 80186f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186f4:	4798      	blx	r3
 80186f6:	9b01      	ldr	r3, [sp, #4]
 80186f8:	4418      	add	r0, r3
 80186fa:	4406      	add	r6, r0
 80186fc:	b2b6      	uxth	r6, r6
 80186fe:	3401      	adds	r4, #1
 8018700:	e7d2      	b.n	80186a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018702:	4630      	mov	r0, r6
 8018704:	b005      	add	sp, #20
 8018706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801870a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801870a:	2a02      	cmp	r2, #2
 801870c:	b530      	push	{r4, r5, lr}
 801870e:	d011      	beq.n	8018734 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018710:	2a03      	cmp	r2, #3
 8018712:	d01c      	beq.n	801874e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018714:	2a01      	cmp	r2, #1
 8018716:	d10c      	bne.n	8018732 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018718:	888b      	ldrh	r3, [r1, #4]
 801871a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801871e:	8801      	ldrh	r1, [r0, #0]
 8018720:	1a9b      	subs	r3, r3, r2
 8018722:	8844      	ldrh	r4, [r0, #2]
 8018724:	1a5b      	subs	r3, r3, r1
 8018726:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801872a:	8004      	strh	r4, [r0, #0]
 801872c:	8043      	strh	r3, [r0, #2]
 801872e:	8081      	strh	r1, [r0, #4]
 8018730:	80c2      	strh	r2, [r0, #6]
 8018732:	bd30      	pop	{r4, r5, pc}
 8018734:	88cb      	ldrh	r3, [r1, #6]
 8018736:	88c2      	ldrh	r2, [r0, #6]
 8018738:	1a9b      	subs	r3, r3, r2
 801873a:	8842      	ldrh	r2, [r0, #2]
 801873c:	1a9b      	subs	r3, r3, r2
 801873e:	888a      	ldrh	r2, [r1, #4]
 8018740:	8881      	ldrh	r1, [r0, #4]
 8018742:	8043      	strh	r3, [r0, #2]
 8018744:	1a52      	subs	r2, r2, r1
 8018746:	8801      	ldrh	r1, [r0, #0]
 8018748:	1a52      	subs	r2, r2, r1
 801874a:	8002      	strh	r2, [r0, #0]
 801874c:	e7f1      	b.n	8018732 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801874e:	88cb      	ldrh	r3, [r1, #6]
 8018750:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018754:	8841      	ldrh	r1, [r0, #2]
 8018756:	1a9b      	subs	r3, r3, r2
 8018758:	f9b0 5000 	ldrsh.w	r5, [r0]
 801875c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018760:	1a5b      	subs	r3, r3, r1
 8018762:	8045      	strh	r5, [r0, #2]
 8018764:	8082      	strh	r2, [r0, #4]
 8018766:	8003      	strh	r3, [r0, #0]
 8018768:	80c4      	strh	r4, [r0, #6]
 801876a:	e7e2      	b.n	8018732 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801876c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018770:	b09f      	sub	sp, #124	; 0x7c
 8018772:	9116      	str	r1, [sp, #88]	; 0x58
 8018774:	9317      	str	r3, [sp, #92]	; 0x5c
 8018776:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018778:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801877a:	8809      	ldrh	r1, [r1, #0]
 801877c:	889b      	ldrh	r3, [r3, #4]
 801877e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018782:	440b      	add	r3, r1
 8018784:	9212      	str	r2, [sp, #72]	; 0x48
 8018786:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801878a:	b21b      	sxth	r3, r3
 801878c:	9011      	str	r0, [sp, #68]	; 0x44
 801878e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018792:	9310      	str	r3, [sp, #64]	; 0x40
 8018794:	f8d8 3000 	ldr.w	r3, [r8]
 8018798:	7a59      	ldrb	r1, [r3, #9]
 801879a:	7a1b      	ldrb	r3, [r3, #8]
 801879c:	9114      	str	r1, [sp, #80]	; 0x50
 801879e:	9315      	str	r3, [sp, #84]	; 0x54
 80187a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80187a2:	f9b3 5000 	ldrsh.w	r5, [r3]
 80187a6:	2a00      	cmp	r2, #0
 80187a8:	d067      	beq.n	801887a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 80187aa:	f898 3010 	ldrb.w	r3, [r8, #16]
 80187ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80187b0:	2b04      	cmp	r3, #4
 80187b2:	bf14      	ite	ne
 80187b4:	2301      	movne	r3, #1
 80187b6:	2302      	moveq	r3, #2
 80187b8:	4413      	add	r3, r2
 80187ba:	f04f 0900 	mov.w	r9, #0
 80187be:	930f      	str	r3, [sp, #60]	; 0x3c
 80187c0:	464c      	mov	r4, r9
 80187c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80187c6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80187ca:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80187ce:	4293      	cmp	r3, r2
 80187d0:	f280 808c 	bge.w	80188ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80187d4:	2300      	movs	r3, #0
 80187d6:	931c      	str	r3, [sp, #112]	; 0x70
 80187d8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80187dc:	429c      	cmp	r4, r3
 80187de:	d006      	beq.n	80187ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80187e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187e2:	f242 020b 	movw	r2, #8203	; 0x200b
 80187e6:	4294      	cmp	r4, r2
 80187e8:	bf18      	it	ne
 80187ea:	4623      	movne	r3, r4
 80187ec:	930d      	str	r3, [sp, #52]	; 0x34
 80187ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187f0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80187f2:	f8d8 2000 	ldr.w	r2, [r8]
 80187f6:	428b      	cmp	r3, r1
 80187f8:	db41      	blt.n	801887e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80187fa:	6813      	ldr	r3, [r2, #0]
 80187fc:	4610      	mov	r0, r2
 80187fe:	695b      	ldr	r3, [r3, #20]
 8018800:	4798      	blx	r3
 8018802:	4604      	mov	r4, r0
 8018804:	f8d8 0000 	ldr.w	r0, [r8]
 8018808:	aa1d      	add	r2, sp, #116	; 0x74
 801880a:	4621      	mov	r1, r4
 801880c:	6803      	ldr	r3, [r0, #0]
 801880e:	689e      	ldr	r6, [r3, #8]
 8018810:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018814:	47b0      	blx	r6
 8018816:	901c      	str	r0, [sp, #112]	; 0x70
 8018818:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801881c:	429c      	cmp	r4, r3
 801881e:	f000 80ea 	beq.w	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018822:	f242 030b 	movw	r3, #8203	; 0x200b
 8018826:	429c      	cmp	r4, r3
 8018828:	f000 80e5 	beq.w	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801882c:	2c00      	cmp	r4, #0
 801882e:	f000 80f7 	beq.w	8018a20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018832:	2c0a      	cmp	r4, #10
 8018834:	d060      	beq.n	80188f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018836:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018838:	b36a      	cbz	r2, 8018896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801883a:	8894      	ldrh	r4, [r2, #4]
 801883c:	f1bb 0f00 	cmp.w	fp, #0
 8018840:	d03b      	beq.n	80188ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018842:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018846:	f1bb 0f01 	cmp.w	fp, #1
 801884a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801884e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018852:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018856:	ea49 0903 	orr.w	r9, r9, r3
 801885a:	d134      	bne.n	80188c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801885c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801885e:	eba5 0509 	sub.w	r5, r5, r9
 8018862:	2b00      	cmp	r3, #0
 8018864:	d14f      	bne.n	8018906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018866:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018868:	eb09 0305 	add.w	r3, r9, r5
 801886c:	4413      	add	r3, r2
 801886e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018870:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018874:	4293      	cmp	r3, r2
 8018876:	da51      	bge.n	801891c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018878:	e038      	b.n	80188ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801887a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801887c:	e79d      	b.n	80187ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801887e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018882:	4659      	mov	r1, fp
 8018884:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018886:	9301      	str	r3, [sp, #4]
 8018888:	ab1d      	add	r3, sp, #116	; 0x74
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	ab1c      	add	r3, sp, #112	; 0x70
 801888e:	f002 fab7 	bl	801ae00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018892:	4604      	mov	r4, r0
 8018894:	e7c0      	b.n	8018818 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018896:	f8d8 0000 	ldr.w	r0, [r8]
 801889a:	6803      	ldr	r3, [r0, #0]
 801889c:	691b      	ldr	r3, [r3, #16]
 801889e:	4798      	blx	r3
 80188a0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80188a4:	4298      	cmp	r0, r3
 80188a6:	f000 80a6 	beq.w	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80188aa:	f242 030b 	movw	r3, #8203	; 0x200b
 80188ae:	4298      	cmp	r0, r3
 80188b0:	f000 80a1 	beq.w	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80188b4:	f1bb 0f00 	cmp.w	fp, #0
 80188b8:	d100      	bne.n	80188bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80188ba:	444d      	add	r5, r9
 80188bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80188be:	2a00      	cmp	r2, #0
 80188c0:	d1bf      	bne.n	8018842 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80188c2:	4691      	mov	r9, r2
 80188c4:	e097      	b.n	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80188c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	f000 80ab 	beq.w	8018a24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80188ce:	f1bb 0f00 	cmp.w	fp, #0
 80188d2:	d118      	bne.n	8018906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80188d4:	f8d8 0000 	ldr.w	r0, [r8]
 80188d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80188da:	6803      	ldr	r3, [r0, #0]
 80188dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188de:	4798      	blx	r3
 80188e0:	4405      	add	r5, r0
 80188e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80188e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80188e6:	1aeb      	subs	r3, r5, r3
 80188e8:	4293      	cmp	r3, r2
 80188ea:	dd17      	ble.n	801891c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80188ec:	2c00      	cmp	r4, #0
 80188ee:	f000 8097 	beq.w	8018a20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80188f2:	2c0a      	cmp	r4, #10
 80188f4:	f040 8085 	bne.w	8018a02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80188f8:	240a      	movs	r4, #10
 80188fa:	fab4 f084 	clz	r0, r4
 80188fe:	0940      	lsrs	r0, r0, #5
 8018900:	b01f      	add	sp, #124	; 0x7c
 8018902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018906:	f8d8 0000 	ldr.w	r0, [r8]
 801890a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801890c:	6803      	ldr	r3, [r0, #0]
 801890e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018910:	4798      	blx	r3
 8018912:	f1bb 0f01 	cmp.w	fp, #1
 8018916:	eba5 0500 	sub.w	r5, r5, r0
 801891a:	d0a4      	beq.n	8018866 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801891c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801891e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018920:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018924:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018928:	7b43      	ldrb	r3, [r0, #13]
 801892a:	4429      	add	r1, r5
 801892c:	015b      	lsls	r3, r3, #5
 801892e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018932:	7983      	ldrb	r3, [r0, #6]
 8018934:	4313      	orrs	r3, r2
 8018936:	440b      	add	r3, r1
 8018938:	42b3      	cmp	r3, r6
 801893a:	db5c      	blt.n	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801893c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801893e:	4299      	cmp	r1, r3
 8018940:	da59      	bge.n	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018942:	f8d8 0000 	ldr.w	r0, [r8]
 8018946:	42ae      	cmp	r6, r5
 8018948:	6803      	ldr	r3, [r0, #0]
 801894a:	bfcc      	ite	gt
 801894c:	1b76      	subgt	r6, r6, r5
 801894e:	2600      	movle	r6, #0
 8018950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018952:	bfc8      	it	gt
 8018954:	b2b6      	uxthgt	r6, r6
 8018956:	4798      	blx	r3
 8018958:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801895a:	7b5a      	ldrb	r2, [r3, #13]
 801895c:	00d1      	lsls	r1, r2, #3
 801895e:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018962:	7a19      	ldrb	r1, [r3, #8]
 8018964:	4339      	orrs	r1, r7
 8018966:	0657      	lsls	r7, r2, #25
 8018968:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801896a:	bf48      	it	mi
 801896c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018970:	4407      	add	r7, r0
 8018972:	bf48      	it	mi
 8018974:	b209      	sxthmi	r1, r1
 8018976:	1a7f      	subs	r7, r7, r1
 8018978:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801897a:	b2bf      	uxth	r7, r7
 801897c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018980:	fa0f fa87 	sxth.w	sl, r7
 8018984:	4551      	cmp	r1, sl
 8018986:	dd3a      	ble.n	80189fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018988:	0112      	lsls	r2, r2, #4
 801898a:	79d8      	ldrb	r0, [r3, #7]
 801898c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018990:	4302      	orrs	r2, r0
 8018992:	4492      	add	sl, r2
 8018994:	4551      	cmp	r1, sl
 8018996:	dc2e      	bgt.n	80189f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018998:	1bcf      	subs	r7, r1, r7
 801899a:	468a      	mov	sl, r1
 801899c:	b2bf      	uxth	r7, r7
 801899e:	9319      	str	r3, [sp, #100]	; 0x64
 80189a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80189a2:	f8d8 0000 	ldr.w	r0, [r8]
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	6801      	ldr	r1, [r0, #0]
 80189aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80189ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80189ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80189b0:	9218      	str	r2, [sp, #96]	; 0x60
 80189b2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80189b4:	4788      	blx	r1
 80189b6:	f898 1006 	ldrb.w	r1, [r8, #6]
 80189ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80189bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80189be:	f898 100e 	ldrb.w	r1, [r8, #14]
 80189c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80189c4:	910a      	str	r1, [sp, #40]	; 0x28
 80189c6:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80189ca:	9109      	str	r1, [sp, #36]	; 0x24
 80189cc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80189d0:	9305      	str	r3, [sp, #20]
 80189d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80189d4:	9206      	str	r2, [sp, #24]
 80189d6:	e9cd a601 	strd	sl, r6, [sp, #4]
 80189da:	442e      	add	r6, r5
 80189dc:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80189e0:	b236      	sxth	r6, r6
 80189e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80189e4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80189e8:	9600      	str	r6, [sp, #0]
 80189ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80189f0:	685b      	ldr	r3, [r3, #4]
 80189f2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80189f4:	47b0      	blx	r6
 80189f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189f8:	3301      	adds	r3, #1
 80189fa:	930e      	str	r3, [sp, #56]	; 0x38
 80189fc:	e6e5      	b.n	80187ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80189fe:	2700      	movs	r7, #0
 8018a00:	e7cd      	b.n	801899e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8018a02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018a04:	3501      	adds	r5, #1
 8018a06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018a08:	429d      	cmp	r5, r3
 8018a0a:	f6bf af76 	bge.w	80188fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018a0e:	4659      	mov	r1, fp
 8018a10:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018a12:	f7f9 fe2b 	bl	801266c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018a16:	4604      	mov	r4, r0
 8018a18:	b110      	cbz	r0, 8018a20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018a1a:	280a      	cmp	r0, #10
 8018a1c:	d1f2      	bne.n	8018a04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018a1e:	e76b      	b.n	80188f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018a20:	2400      	movs	r4, #0
 8018a22:	e76a      	b.n	80188fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018a24:	f1bb 0f00 	cmp.w	fp, #0
 8018a28:	f43f af5b 	beq.w	80188e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018a2c:	e776      	b.n	801891c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018a2e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018a2e:	b530      	push	{r4, r5, lr}
 8018a30:	8a44      	ldrh	r4, [r0, #18]
 8018a32:	8ac5      	ldrh	r5, [r0, #22]
 8018a34:	82c3      	strh	r3, [r0, #22]
 8018a36:	442c      	add	r4, r5
 8018a38:	1ae4      	subs	r4, r4, r3
 8018a3a:	8b03      	ldrh	r3, [r0, #24]
 8018a3c:	8244      	strh	r4, [r0, #18]
 8018a3e:	8a84      	ldrh	r4, [r0, #20]
 8018a40:	4422      	add	r2, r4
 8018a42:	440c      	add	r4, r1
 8018a44:	1a59      	subs	r1, r3, r1
 8018a46:	8342      	strh	r2, [r0, #26]
 8018a48:	8284      	strh	r4, [r0, #20]
 8018a4a:	8301      	strh	r1, [r0, #24]
 8018a4c:	bd30      	pop	{r4, r5, pc}

08018a4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a52:	7a43      	ldrb	r3, [r0, #9]
 8018a54:	b087      	sub	sp, #28
 8018a56:	4604      	mov	r4, r0
 8018a58:	460f      	mov	r7, r1
 8018a5a:	1eda      	subs	r2, r3, #3
 8018a5c:	b2d2      	uxtb	r2, r2
 8018a5e:	2900      	cmp	r1, #0
 8018a60:	d036      	beq.n	8018ad0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018a62:	2a01      	cmp	r2, #1
 8018a64:	d932      	bls.n	8018acc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018a66:	1e58      	subs	r0, r3, #1
 8018a68:	f1d0 0b00 	rsbs	fp, r0, #0
 8018a6c:	eb4b 0b00 	adc.w	fp, fp, r0
 8018a70:	1e99      	subs	r1, r3, #2
 8018a72:	424b      	negs	r3, r1
 8018a74:	414b      	adcs	r3, r1
 8018a76:	9303      	str	r3, [sp, #12]
 8018a78:	2300      	movs	r3, #0
 8018a7a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018a7e:	2500      	movs	r5, #0
 8018a80:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018a84:	46a9      	mov	r9, r5
 8018a86:	8265      	strh	r5, [r4, #18]
 8018a88:	82a5      	strh	r5, [r4, #20]
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	9305      	str	r3, [sp, #20]
 8018a8e:	8823      	ldrh	r3, [r4, #0]
 8018a90:	2b20      	cmp	r3, #32
 8018a92:	d02b      	beq.n	8018aec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018a94:	eba3 020a 	sub.w	r2, r3, sl
 8018a98:	4256      	negs	r6, r2
 8018a9a:	4156      	adcs	r6, r2
 8018a9c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018aa0:	4293      	cmp	r3, r2
 8018aa2:	d004      	beq.n	8018aae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018aa4:	4553      	cmp	r3, sl
 8018aa6:	bf16      	itet	ne
 8018aa8:	4699      	movne	r9, r3
 8018aaa:	2601      	moveq	r6, #1
 8018aac:	2600      	movne	r6, #0
 8018aae:	ab05      	add	r3, sp, #20
 8018ab0:	68e2      	ldr	r2, [r4, #12]
 8018ab2:	7a21      	ldrb	r1, [r4, #8]
 8018ab4:	6860      	ldr	r0, [r4, #4]
 8018ab6:	f002 f94f 	bl	801ad58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018aba:	8020      	strh	r0, [r4, #0]
 8018abc:	b9c8      	cbnz	r0, 8018af2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018abe:	8b22      	ldrh	r2, [r4, #24]
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	4611      	mov	r1, r2
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	f7ff ffb2 	bl	8018a2e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018aca:	e066      	b.n	8018b9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018acc:	468b      	mov	fp, r1
 8018ace:	e7cf      	b.n	8018a70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8018ad0:	3b01      	subs	r3, #1
 8018ad2:	2a01      	cmp	r2, #1
 8018ad4:	9103      	str	r1, [sp, #12]
 8018ad6:	468b      	mov	fp, r1
 8018ad8:	bf8c      	ite	hi
 8018ada:	2200      	movhi	r2, #0
 8018adc:	2201      	movls	r2, #1
 8018ade:	2b01      	cmp	r3, #1
 8018ae0:	9202      	str	r2, [sp, #8]
 8018ae2:	bf8c      	ite	hi
 8018ae4:	2300      	movhi	r3, #0
 8018ae6:	2301      	movls	r3, #1
 8018ae8:	9301      	str	r3, [sp, #4]
 8018aea:	e7c8      	b.n	8018a7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8018aec:	4699      	mov	r9, r3
 8018aee:	2601      	movs	r6, #1
 8018af0:	e7dd      	b.n	8018aae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018af2:	8ae3      	ldrh	r3, [r4, #22]
 8018af4:	280a      	cmp	r0, #10
 8018af6:	f103 0301 	add.w	r3, r3, #1
 8018afa:	82e3      	strh	r3, [r4, #22]
 8018afc:	d0df      	beq.n	8018abe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018afe:	9a05      	ldr	r2, [sp, #20]
 8018b00:	bb42      	cbnz	r2, 8018b54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018b02:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018b06:	4298      	cmp	r0, r3
 8018b08:	d001      	beq.n	8018b0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018b0a:	4550      	cmp	r0, sl
 8018b0c:	d1bd      	bne.n	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b0e:	8823      	ldrh	r3, [r4, #0]
 8018b10:	8b21      	ldrh	r1, [r4, #24]
 8018b12:	2b20      	cmp	r3, #32
 8018b14:	d001      	beq.n	8018b1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018b16:	4553      	cmp	r3, sl
 8018b18:	d131      	bne.n	8018b7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018b1a:	2e00      	cmp	r6, #0
 8018b1c:	bf0a      	itet	eq
 8018b1e:	460d      	moveq	r5, r1
 8018b20:	4630      	movne	r0, r6
 8018b22:	2001      	moveq	r0, #1
 8018b24:	440a      	add	r2, r1
 8018b26:	8aa3      	ldrh	r3, [r4, #20]
 8018b28:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018b2c:	b292      	uxth	r2, r2
 8018b2e:	8322      	strh	r2, [r4, #24]
 8018b30:	4413      	add	r3, r2
 8018b32:	2f00      	cmp	r7, #0
 8018b34:	d03a      	beq.n	8018bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018b36:	f1bb 0f00 	cmp.w	fp, #0
 8018b3a:	d102      	bne.n	8018b42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8018b3c:	9903      	ldr	r1, [sp, #12]
 8018b3e:	b301      	cbz	r1, 8018b82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018b40:	b1f8      	cbz	r0, 8018b82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018b42:	8ba1      	ldrh	r1, [r4, #28]
 8018b44:	4419      	add	r1, r3
 8018b46:	458c      	cmp	ip, r1
 8018b48:	da2a      	bge.n	8018ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018b4a:	8a61      	ldrh	r1, [r4, #18]
 8018b4c:	b341      	cbz	r1, 8018ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018b4e:	4563      	cmp	r3, ip
 8018b50:	dd9b      	ble.n	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b52:	e01c      	b.n	8018b8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018b54:	8893      	ldrh	r3, [r2, #4]
 8018b56:	4649      	mov	r1, r9
 8018b58:	8023      	strh	r3, [r4, #0]
 8018b5a:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018b5e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018b62:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018b66:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018b6a:	ea48 0800 	orr.w	r8, r8, r0
 8018b6e:	68e0      	ldr	r0, [r4, #12]
 8018b70:	6803      	ldr	r3, [r0, #0]
 8018b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b74:	4798      	blx	r3
 8018b76:	eb08 0200 	add.w	r2, r8, r0
 8018b7a:	b292      	uxth	r2, r2
 8018b7c:	e7c7      	b.n	8018b0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018b7e:	2000      	movs	r0, #0
 8018b80:	e7d0      	b.n	8018b24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018b82:	4563      	cmp	r3, ip
 8018b84:	dd81      	ble.n	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b86:	8a63      	ldrh	r3, [r4, #18]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	f43f af7e 	beq.w	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018b8e:	2301      	movs	r3, #1
 8018b90:	8ba2      	ldrh	r2, [r4, #28]
 8018b92:	77a3      	strb	r3, [r4, #30]
 8018b94:	8b63      	ldrh	r3, [r4, #26]
 8018b96:	4413      	add	r3, r2
 8018b98:	8363      	strh	r3, [r4, #26]
 8018b9a:	b007      	add	sp, #28
 8018b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	4611      	mov	r1, r2
 8018ba4:	4620      	mov	r0, r4
 8018ba6:	f7ff ff42 	bl	8018a2e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018baa:	e76e      	b.n	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018bac:	4563      	cmp	r3, ip
 8018bae:	dd14      	ble.n	8018bda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018bb0:	9b02      	ldr	r3, [sp, #8]
 8018bb2:	b113      	cbz	r3, 8018bba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	460a      	mov	r2, r1
 8018bb8:	e783      	b.n	8018ac2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018bba:	9b01      	ldr	r3, [sp, #4]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	f43f af64 	beq.w	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018bc2:	2800      	cmp	r0, #0
 8018bc4:	f47f af61 	bne.w	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018bc8:	b116      	cbz	r6, 8018bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018bca:	2301      	movs	r3, #1
 8018bcc:	462a      	mov	r2, r5
 8018bce:	e779      	b.n	8018ac4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8018bd0:	8a63      	ldrh	r3, [r4, #18]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	f43f af59 	beq.w	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018bd8:	e7df      	b.n	8018b9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018bda:	2800      	cmp	r0, #0
 8018bdc:	f47f af55 	bne.w	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018be0:	2e00      	cmp	r6, #0
 8018be2:	f43f af52 	beq.w	8018a8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018be6:	2301      	movs	r3, #1
 8018be8:	462a      	mov	r2, r5
 8018bea:	e7db      	b.n	8018ba4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08018bec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018bec:	b530      	push	{r4, r5, lr}
 8018bee:	4605      	mov	r5, r0
 8018bf0:	b08b      	sub	sp, #44	; 0x2c
 8018bf2:	b191      	cbz	r1, 8018c1a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8018bf4:	2401      	movs	r4, #1
 8018bf6:	e9cd 3100 	strd	r3, r1, [sp]
 8018bfa:	4613      	mov	r3, r2
 8018bfc:	4601      	mov	r1, r0
 8018bfe:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018c02:	a802      	add	r0, sp, #8
 8018c04:	f7ff fd0b 	bl	801861e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018c08:	2100      	movs	r1, #0
 8018c0a:	a802      	add	r0, sp, #8
 8018c0c:	f7ff ff1f 	bl	8018a4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018c10:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018c14:	b163      	cbz	r3, 8018c30 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018c16:	3401      	adds	r4, #1
 8018c18:	e7f6      	b.n	8018c08 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018c1a:	2401      	movs	r4, #1
 8018c1c:	f002 f98e 	bl	801af3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c20:	280a      	cmp	r0, #10
 8018c22:	4628      	mov	r0, r5
 8018c24:	bf08      	it	eq
 8018c26:	3401      	addeq	r4, #1
 8018c28:	f002 f988 	bl	801af3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c2c:	2800      	cmp	r0, #0
 8018c2e:	d1f7      	bne.n	8018c20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018c30:	b2a0      	uxth	r0, r4
 8018c32:	b00b      	add	sp, #44	; 0x2c
 8018c34:	bd30      	pop	{r4, r5, pc}

08018c36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018c36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c3a:	b0db      	sub	sp, #364	; 0x16c
 8018c3c:	4689      	mov	r9, r1
 8018c3e:	461c      	mov	r4, r3
 8018c40:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8018c44:	900a      	str	r0, [sp, #40]	; 0x28
 8018c46:	f1ba 0f00 	cmp.w	sl, #0
 8018c4a:	f000 80a5 	beq.w	8018d98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	f000 80a1 	beq.w	8018d98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018c56:	7ba3      	ldrb	r3, [r4, #14]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	f000 809d 	beq.w	8018d98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018c5e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8018c62:	6810      	ldr	r0, [r2, #0]
 8018c64:	6851      	ldr	r1, [r2, #4]
 8018c66:	2500      	movs	r5, #0
 8018c68:	4643      	mov	r3, r8
 8018c6a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018c6e:	950e      	str	r5, [sp, #56]	; 0x38
 8018c70:	af18      	add	r7, sp, #96	; 0x60
 8018c72:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018c76:	79a2      	ldrb	r2, [r4, #6]
 8018c78:	c303      	stmia	r3!, {r0, r1}
 8018c7a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018c7e:	a90e      	add	r1, sp, #56	; 0x38
 8018c80:	4640      	mov	r0, r8
 8018c82:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018c86:	f7ff fd40 	bl	801870a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018c8a:	a90e      	add	r1, sp, #56	; 0x38
 8018c8c:	79a2      	ldrb	r2, [r4, #6]
 8018c8e:	4608      	mov	r0, r1
 8018c90:	f7ff fd3b 	bl	801870a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018c94:	4638      	mov	r0, r7
 8018c96:	f001 fd20 	bl	801a6da <_ZN8touchgfx12TextProviderC1Ev>
 8018c9a:	6820      	ldr	r0, [r4, #0]
 8018c9c:	6803      	ldr	r3, [r0, #0]
 8018c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ca0:	4798      	blx	r3
 8018ca2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	4651      	mov	r1, sl
 8018ca8:	4638      	mov	r0, r7
 8018caa:	f001 fd5b 	bl	801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018cae:	7923      	ldrb	r3, [r4, #4]
 8018cb0:	6820      	ldr	r0, [r4, #0]
 8018cb2:	9308      	str	r3, [sp, #32]
 8018cb4:	6803      	ldr	r3, [r0, #0]
 8018cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cb8:	4798      	blx	r3
 8018cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cbe:	181e      	adds	r6, r3, r0
 8018cc0:	42ae      	cmp	r6, r5
 8018cc2:	dd06      	ble.n	8018cd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8018cc4:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8018cc8:	4282      	cmp	r2, r0
 8018cca:	bfa4      	itt	ge
 8018ccc:	189d      	addge	r5, r3, r2
 8018cce:	fb95 f5f6 	sdivge	r5, r5, r6
 8018cd2:	a82e      	add	r0, sp, #184	; 0xb8
 8018cd4:	f001 fd01 	bl	801a6da <_ZN8touchgfx12TextProviderC1Ev>
 8018cd8:	7c23      	ldrb	r3, [r4, #16]
 8018cda:	b14b      	cbz	r3, 8018cf0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8018cdc:	6820      	ldr	r0, [r4, #0]
 8018cde:	6803      	ldr	r3, [r0, #0]
 8018ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ce2:	4798      	blx	r3
 8018ce4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	4651      	mov	r1, sl
 8018cea:	a82e      	add	r0, sp, #184	; 0xb8
 8018cec:	f001 fd3a 	bl	801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018cf0:	7c21      	ldrb	r1, [r4, #16]
 8018cf2:	a810      	add	r0, sp, #64	; 0x40
 8018cf4:	7963      	ldrb	r3, [r4, #5]
 8018cf6:	9101      	str	r1, [sp, #4]
 8018cf8:	6821      	ldr	r1, [r4, #0]
 8018cfa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8018cfe:	9100      	str	r1, [sp, #0]
 8018d00:	a92e      	add	r1, sp, #184	; 0xb8
 8018d02:	f7ff fc8c 	bl	801861e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018d06:	7c23      	ldrb	r3, [r4, #16]
 8018d08:	b9bb      	cbnz	r3, 8018d3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8018d0a:	fa1f fa86 	uxth.w	sl, r6
 8018d0e:	2d00      	cmp	r5, #0
 8018d10:	dd45      	ble.n	8018d9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8018d12:	4638      	mov	r0, r7
 8018d14:	f002 f912 	bl	801af3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018d18:	2800      	cmp	r0, #0
 8018d1a:	d03d      	beq.n	8018d98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018d1c:	280a      	cmp	r0, #10
 8018d1e:	d1f6      	bne.n	8018d0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8018d20:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018d24:	3d01      	subs	r5, #1
 8018d26:	4453      	add	r3, sl
 8018d28:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018d2c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018d30:	eba3 030a 	sub.w	r3, r3, sl
 8018d34:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018d38:	e7e9      	b.n	8018d0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8018d3a:	0073      	lsls	r3, r6, #1
 8018d3c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8018d40:	fa1f fa86 	uxth.w	sl, r6
 8018d44:	9309      	str	r3, [sp, #36]	; 0x24
 8018d46:	2d00      	cmp	r5, #0
 8018d48:	dd29      	ble.n	8018d9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8018d4a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018d4e:	a810      	add	r0, sp, #64	; 0x40
 8018d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d52:	428b      	cmp	r3, r1
 8018d54:	bfd4      	ite	le
 8018d56:	2100      	movle	r1, #0
 8018d58:	2101      	movgt	r1, #1
 8018d5a:	f7ff fe78 	bl	8018a4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018d5e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8018d62:	3b01      	subs	r3, #1
 8018d64:	b29b      	uxth	r3, r3
 8018d66:	455b      	cmp	r3, fp
 8018d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d6a:	d005      	beq.n	8018d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018d6c:	7961      	ldrb	r1, [r4, #5]
 8018d6e:	4638      	mov	r0, r7
 8018d70:	f7f9 fc7c 	bl	801266c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d76:	e7f4      	b.n	8018d62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8018d78:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018d7c:	3d01      	subs	r5, #1
 8018d7e:	4453      	add	r3, sl
 8018d80:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018d84:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018d88:	eba3 030a 	sub.w	r3, r3, sl
 8018d8c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018d90:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d1d6      	bne.n	8018d46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8018d98:	b05b      	add	sp, #364	; 0x16c
 8018d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d9e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8018da2:	ad44      	add	r5, sp, #272	; 0x110
 8018da4:	f04f 0b00 	mov.w	fp, #0
 8018da8:	7c23      	ldrb	r3, [r4, #16]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d067      	beq.n	8018e7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8018dae:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018db2:	a810      	add	r0, sp, #64	; 0x40
 8018db4:	458a      	cmp	sl, r1
 8018db6:	bfd4      	ite	le
 8018db8:	2100      	movle	r1, #0
 8018dba:	2101      	movgt	r1, #1
 8018dbc:	f7ff fe47 	bl	8018a4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018dc0:	9b08      	ldr	r3, [sp, #32]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d056      	beq.n	8018e74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018dc6:	7c23      	ldrb	r3, [r4, #16]
 8018dc8:	2258      	movs	r2, #88	; 0x58
 8018dca:	4639      	mov	r1, r7
 8018dcc:	4628      	mov	r0, r5
 8018dce:	9309      	str	r3, [sp, #36]	; 0x24
 8018dd0:	f00c fd14 	bl	80257fc <memcpy>
 8018dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d059      	beq.n	8018e8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8018dda:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018dde:	7922      	ldrb	r2, [r4, #4]
 8018de0:	2a01      	cmp	r2, #1
 8018de2:	d13d      	bne.n	8018e60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8018de4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018de8:	1ac0      	subs	r0, r0, r3
 8018dea:	2302      	movs	r3, #2
 8018dec:	fb90 f0f3 	sdiv	r0, r0, r3
 8018df0:	b200      	sxth	r0, r0
 8018df2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018df6:	4418      	add	r0, r3
 8018df8:	7c23      	ldrb	r3, [r4, #16]
 8018dfa:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d03a      	beq.n	8018e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8018e02:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018e06:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8018e0a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018e0e:	9500      	str	r5, [sp, #0]
 8018e10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018e12:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018e16:	e9cd b703 	strd	fp, r7, [sp, #12]
 8018e1a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8018e1e:	464a      	mov	r2, r9
 8018e20:	2100      	movs	r1, #0
 8018e22:	f7ff fca3 	bl	801876c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	d1b6      	bne.n	8018d98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018e2a:	b2b2      	uxth	r2, r6
 8018e2c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018e30:	4611      	mov	r1, r2
 8018e32:	4413      	add	r3, r2
 8018e34:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018e38:	b21b      	sxth	r3, r3
 8018e3a:	1a52      	subs	r2, r2, r1
 8018e3c:	7c21      	ldrb	r1, [r4, #16]
 8018e3e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018e42:	b212      	sxth	r2, r2
 8018e44:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8018e48:	b109      	cbz	r1, 8018e4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8018e4a:	42b2      	cmp	r2, r6
 8018e4c:	dba4      	blt.n	8018d98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018e4e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8018e52:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8018e56:	440a      	add	r2, r1
 8018e58:	b212      	sxth	r2, r2
 8018e5a:	4293      	cmp	r3, r2
 8018e5c:	dda4      	ble.n	8018da8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8018e5e:	e79b      	b.n	8018d98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018e60:	2a02      	cmp	r2, #2
 8018e62:	d105      	bne.n	8018e70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8018e64:	7be2      	ldrb	r2, [r4, #15]
 8018e66:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8018e6a:	1a80      	subs	r0, r0, r2
 8018e6c:	1ac0      	subs	r0, r0, r3
 8018e6e:	e7bf      	b.n	8018df0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8018e70:	2000      	movs	r0, #0
 8018e72:	e7be      	b.n	8018df2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8018e74:	7be0      	ldrb	r0, [r4, #15]
 8018e76:	e7bc      	b.n	8018df2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8018e78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018e7c:	e7c3      	b.n	8018e06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8018e7e:	9b08      	ldr	r3, [sp, #32]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d0f7      	beq.n	8018e74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018e84:	2258      	movs	r2, #88	; 0x58
 8018e86:	4639      	mov	r1, r7
 8018e88:	4628      	mov	r0, r5
 8018e8a:	f00c fcb7 	bl	80257fc <memcpy>
 8018e8e:	2300      	movs	r3, #0
 8018e90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018e94:	6821      	ldr	r1, [r4, #0]
 8018e96:	4628      	mov	r0, r5
 8018e98:	f7ff fbfb 	bl	8018692 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018e9c:	b203      	sxth	r3, r0
 8018e9e:	e79e      	b.n	8018dde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08018ea0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018ea0:	2b02      	cmp	r3, #2
 8018ea2:	b510      	push	{r4, lr}
 8018ea4:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018ea8:	d00b      	beq.n	8018ec2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018eaa:	2b03      	cmp	r3, #3
 8018eac:	d00e      	beq.n	8018ecc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018eae:	2b01      	cmp	r3, #1
 8018eb0:	d001      	beq.n	8018eb6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018eb2:	1860      	adds	r0, r4, r1
 8018eb4:	bd10      	pop	{r4, pc}
 8018eb6:	8880      	ldrh	r0, [r0, #4]
 8018eb8:	4420      	add	r0, r4
 8018eba:	b200      	sxth	r0, r0
 8018ebc:	1a80      	subs	r0, r0, r2
 8018ebe:	3801      	subs	r0, #1
 8018ec0:	e7f8      	b.n	8018eb4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018ec2:	8880      	ldrh	r0, [r0, #4]
 8018ec4:	4420      	add	r0, r4
 8018ec6:	b200      	sxth	r0, r0
 8018ec8:	1a40      	subs	r0, r0, r1
 8018eca:	e7f8      	b.n	8018ebe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018ecc:	18a0      	adds	r0, r4, r2
 8018ece:	e7f1      	b.n	8018eb4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018ed0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018ed0:	2b02      	cmp	r3, #2
 8018ed2:	b510      	push	{r4, lr}
 8018ed4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018ed8:	d006      	beq.n	8018ee8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018eda:	2b03      	cmp	r3, #3
 8018edc:	d00a      	beq.n	8018ef4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018ede:	2b01      	cmp	r3, #1
 8018ee0:	bf14      	ite	ne
 8018ee2:	18a0      	addne	r0, r4, r2
 8018ee4:	1860      	addeq	r0, r4, r1
 8018ee6:	bd10      	pop	{r4, pc}
 8018ee8:	88c0      	ldrh	r0, [r0, #6]
 8018eea:	4420      	add	r0, r4
 8018eec:	b200      	sxth	r0, r0
 8018eee:	1a80      	subs	r0, r0, r2
 8018ef0:	3801      	subs	r0, #1
 8018ef2:	e7f8      	b.n	8018ee6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018ef4:	88c0      	ldrh	r0, [r0, #6]
 8018ef6:	4420      	add	r0, r4
 8018ef8:	b200      	sxth	r0, r0
 8018efa:	1a40      	subs	r0, r0, r1
 8018efc:	e7f8      	b.n	8018ef0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018f00 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018f00:	4b01      	ldr	r3, [pc, #4]	; (8018f08 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018f02:	2200      	movs	r2, #0
 8018f04:	601a      	str	r2, [r3, #0]
 8018f06:	4770      	bx	lr
 8018f08:	2000b394 	.word	0x2000b394

08018f0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f0e:	1e05      	subs	r5, r0, #0
 8018f10:	f04f 0601 	mov.w	r6, #1
 8018f14:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018f18:	bfba      	itte	lt
 8018f1a:	f04f 37ff 	movlt.w	r7, #4294967295
 8018f1e:	426d      	neglt	r5, r5
 8018f20:	2701      	movge	r7, #1
 8018f22:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8018f26:	f1be 0f00 	cmp.w	lr, #0
 8018f2a:	bfbc      	itt	lt
 8018f2c:	f1ce 0e00 	rsblt	lr, lr, #0
 8018f30:	427f      	neglt	r7, r7
 8018f32:	2c00      	cmp	r4, #0
 8018f34:	fa4e f001 	asr.w	r0, lr, r1
 8018f38:	fa06 f101 	lsl.w	r1, r6, r1
 8018f3c:	bfbc      	itt	lt
 8018f3e:	4264      	neglt	r4, r4
 8018f40:	427f      	neglt	r7, r7
 8018f42:	3901      	subs	r1, #1
 8018f44:	ea01 010e 	and.w	r1, r1, lr
 8018f48:	434d      	muls	r5, r1
 8018f4a:	f8dc 1000 	ldr.w	r1, [ip]
 8018f4e:	fb03 1300 	mla	r3, r3, r0, r1
 8018f52:	fb95 f1f4 	sdiv	r1, r5, r4
 8018f56:	fb04 5511 	mls	r5, r4, r1, r5
 8018f5a:	441d      	add	r5, r3
 8018f5c:	fb95 f3f4 	sdiv	r3, r5, r4
 8018f60:	4419      	add	r1, r3
 8018f62:	fb04 5413 	mls	r4, r4, r3, r5
 8018f66:	fb02 1000 	mla	r0, r2, r0, r1
 8018f6a:	f8cc 4000 	str.w	r4, [ip]
 8018f6e:	4378      	muls	r0, r7
 8018f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018f74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f78:	4c24      	ldr	r4, [pc, #144]	; (801900c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018f7a:	b086      	sub	sp, #24
 8018f7c:	4605      	mov	r5, r0
 8018f7e:	6807      	ldr	r7, [r0, #0]
 8018f80:	69a3      	ldr	r3, [r4, #24]
 8018f82:	b92b      	cbnz	r3, 8018f90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018f84:	6840      	ldr	r0, [r0, #4]
 8018f86:	e9c5 7000 	strd	r7, r0, [r5]
 8018f8a:	b006      	add	sp, #24
 8018f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f90:	f04f 0802 	mov.w	r8, #2
 8018f94:	68a2      	ldr	r2, [r4, #8]
 8018f96:	ae06      	add	r6, sp, #24
 8018f98:	6820      	ldr	r0, [r4, #0]
 8018f9a:	fb93 f1f8 	sdiv	r1, r3, r8
 8018f9e:	440a      	add	r2, r1
 8018fa0:	69e1      	ldr	r1, [r4, #28]
 8018fa2:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018fa6:	9700      	str	r7, [sp, #0]
 8018fa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018faa:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018fae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018fb0:	f7ff ffac 	bl	8018f0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018fb4:	69a3      	ldr	r3, [r4, #24]
 8018fb6:	4607      	mov	r7, r0
 8018fb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018fba:	9301      	str	r3, [sp, #4]
 8018fbc:	686b      	ldr	r3, [r5, #4]
 8018fbe:	6a21      	ldr	r1, [r4, #32]
 8018fc0:	9300      	str	r3, [sp, #0]
 8018fc2:	9602      	str	r6, [sp, #8]
 8018fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018fc6:	6860      	ldr	r0, [r4, #4]
 8018fc8:	f7ff ffa0 	bl	8018f0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018fcc:	69a2      	ldr	r2, [r4, #24]
 8018fce:	6963      	ldr	r3, [r4, #20]
 8018fd0:	4407      	add	r7, r0
 8018fd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018fd4:	68e0      	ldr	r0, [r4, #12]
 8018fd6:	fb92 f8f8 	sdiv	r8, r2, r8
 8018fda:	4443      	add	r3, r8
 8018fdc:	9305      	str	r3, [sp, #20]
 8018fde:	682b      	ldr	r3, [r5, #0]
 8018fe0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018fe4:	9300      	str	r3, [sp, #0]
 8018fe6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018fe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018fea:	f7ff ff8f 	bl	8018f0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018fee:	69a3      	ldr	r3, [r4, #24]
 8018ff0:	4680      	mov	r8, r0
 8018ff2:	9602      	str	r6, [sp, #8]
 8018ff4:	9301      	str	r3, [sp, #4]
 8018ff6:	686b      	ldr	r3, [r5, #4]
 8018ff8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018ffa:	9300      	str	r3, [sp, #0]
 8018ffc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018ffe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8019000:	6920      	ldr	r0, [r4, #16]
 8019002:	f7ff ff83 	bl	8018f0c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019006:	4440      	add	r0, r8
 8019008:	e7bd      	b.n	8018f86 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801900a:	bf00      	nop
 801900c:	2000b398 	.word	0x2000b398

08019010 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019010:	4b07      	ldr	r3, [pc, #28]	; (8019030 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019012:	b510      	push	{r4, lr}
 8019014:	781b      	ldrb	r3, [r3, #0]
 8019016:	2b01      	cmp	r3, #1
 8019018:	d108      	bne.n	801902c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801901a:	4b06      	ldr	r3, [pc, #24]	; (8019034 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801901c:	880c      	ldrh	r4, [r1, #0]
 801901e:	881b      	ldrh	r3, [r3, #0]
 8019020:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019024:	3b01      	subs	r3, #1
 8019026:	1b1b      	subs	r3, r3, r4
 8019028:	8003      	strh	r3, [r0, #0]
 801902a:	800a      	strh	r2, [r1, #0]
 801902c:	bd10      	pop	{r4, pc}
 801902e:	bf00      	nop
 8019030:	2000b364 	.word	0x2000b364
 8019034:	2000b368 	.word	0x2000b368

08019038 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019038:	4b0a      	ldr	r3, [pc, #40]	; (8019064 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801903a:	b510      	push	{r4, lr}
 801903c:	781b      	ldrb	r3, [r3, #0]
 801903e:	2b01      	cmp	r3, #1
 8019040:	d10e      	bne.n	8019060 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019042:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019046:	8843      	ldrh	r3, [r0, #2]
 8019048:	f9b0 4000 	ldrsh.w	r4, [r0]
 801904c:	18ca      	adds	r2, r1, r3
 801904e:	4b06      	ldr	r3, [pc, #24]	; (8019068 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019050:	8044      	strh	r4, [r0, #2]
 8019052:	881b      	ldrh	r3, [r3, #0]
 8019054:	1a9b      	subs	r3, r3, r2
 8019056:	8003      	strh	r3, [r0, #0]
 8019058:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801905c:	8081      	strh	r1, [r0, #4]
 801905e:	80c3      	strh	r3, [r0, #6]
 8019060:	bd10      	pop	{r4, pc}
 8019062:	bf00      	nop
 8019064:	2000b364 	.word	0x2000b364
 8019068:	2000b360 	.word	0x2000b360

0801906c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801906c:	4b07      	ldr	r3, [pc, #28]	; (801908c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801906e:	b510      	push	{r4, lr}
 8019070:	781b      	ldrb	r3, [r3, #0]
 8019072:	2b01      	cmp	r3, #1
 8019074:	d108      	bne.n	8019088 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019076:	f9b1 3000 	ldrsh.w	r3, [r1]
 801907a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801907e:	8003      	strh	r3, [r0, #0]
 8019080:	8893      	ldrh	r3, [r2, #4]
 8019082:	3b01      	subs	r3, #1
 8019084:	1b1b      	subs	r3, r3, r4
 8019086:	800b      	strh	r3, [r1, #0]
 8019088:	bd10      	pop	{r4, pc}
 801908a:	bf00      	nop
 801908c:	2000b364 	.word	0x2000b364

08019090 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019090:	4b08      	ldr	r3, [pc, #32]	; (80190b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019092:	b513      	push	{r0, r1, r4, lr}
 8019094:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019098:	2400      	movs	r4, #0
 801909a:	4b07      	ldr	r3, [pc, #28]	; (80190b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801909c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80190a0:	466a      	mov	r2, sp
 80190a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190a6:	9400      	str	r4, [sp, #0]
 80190a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80190ac:	f7ff ffde 	bl	801906c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80190b0:	b002      	add	sp, #8
 80190b2:	bd10      	pop	{r4, pc}
 80190b4:	2000b360 	.word	0x2000b360
 80190b8:	2000b362 	.word	0x2000b362

080190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80190bc:	4b0a      	ldr	r3, [pc, #40]	; (80190e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80190be:	460a      	mov	r2, r1
 80190c0:	b510      	push	{r4, lr}
 80190c2:	781b      	ldrb	r3, [r3, #0]
 80190c4:	2b01      	cmp	r3, #1
 80190c6:	d10d      	bne.n	80190e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80190c8:	8881      	ldrh	r1, [r0, #4]
 80190ca:	8803      	ldrh	r3, [r0, #0]
 80190cc:	440b      	add	r3, r1
 80190ce:	4601      	mov	r1, r0
 80190d0:	3b01      	subs	r3, #1
 80190d2:	f821 3b02 	strh.w	r3, [r1], #2
 80190d6:	f7ff ffc9 	bl	801906c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80190da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80190de:	88c2      	ldrh	r2, [r0, #6]
 80190e0:	80c3      	strh	r3, [r0, #6]
 80190e2:	8082      	strh	r2, [r0, #4]
 80190e4:	bd10      	pop	{r4, pc}
 80190e6:	bf00      	nop
 80190e8:	2000b364 	.word	0x2000b364

080190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80190ec:	4b09      	ldr	r3, [pc, #36]	; (8019114 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80190ee:	b507      	push	{r0, r1, r2, lr}
 80190f0:	2100      	movs	r1, #0
 80190f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80190f6:	4b08      	ldr	r3, [pc, #32]	; (8019118 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80190f8:	9100      	str	r1, [sp, #0]
 80190fa:	4669      	mov	r1, sp
 80190fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019100:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019104:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019108:	f7ff ffd8 	bl	80190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801910c:	b003      	add	sp, #12
 801910e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019112:	bf00      	nop
 8019114:	2000b360 	.word	0x2000b360
 8019118:	2000b362 	.word	0x2000b362

0801911c <_ZN8touchgfx11Application13requestRedrawEv>:
 801911c:	4b06      	ldr	r3, [pc, #24]	; (8019138 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801911e:	2100      	movs	r1, #0
 8019120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019124:	4b05      	ldr	r3, [pc, #20]	; (801913c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019126:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801912a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801912e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019132:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019136:	4770      	bx	lr
 8019138:	2000b360 	.word	0x2000b360
 801913c:	2000b362 	.word	0x2000b362

08019140 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019140:	4b03      	ldr	r3, [pc, #12]	; (8019150 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019142:	6818      	ldr	r0, [r3, #0]
 8019144:	b110      	cbz	r0, 801914c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019146:	6803      	ldr	r3, [r0, #0]
 8019148:	699b      	ldr	r3, [r3, #24]
 801914a:	4718      	bx	r3
 801914c:	4770      	bx	lr
 801914e:	bf00      	nop
 8019150:	2000b3e8 	.word	0x2000b3e8

08019154 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019154:	4770      	bx	lr
	...

08019158 <_ZN8touchgfx11Application4drawEv>:
 8019158:	4b09      	ldr	r3, [pc, #36]	; (8019180 <_ZN8touchgfx11Application4drawEv+0x28>)
 801915a:	b507      	push	{r0, r1, r2, lr}
 801915c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019160:	2100      	movs	r1, #0
 8019162:	4b08      	ldr	r3, [pc, #32]	; (8019184 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019164:	9100      	str	r1, [sp, #0]
 8019166:	4669      	mov	r1, sp
 8019168:	f9b3 3000 	ldrsh.w	r3, [r3]
 801916c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019170:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019174:	6803      	ldr	r3, [r0, #0]
 8019176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019178:	4798      	blx	r3
 801917a:	b003      	add	sp, #12
 801917c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019180:	2000b360 	.word	0x2000b360
 8019184:	2000b362 	.word	0x2000b362

08019188 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019188:	4b03      	ldr	r3, [pc, #12]	; (8019198 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801918a:	6818      	ldr	r0, [r3, #0]
 801918c:	b110      	cbz	r0, 8019194 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801918e:	6803      	ldr	r3, [r0, #0]
 8019190:	69db      	ldr	r3, [r3, #28]
 8019192:	4718      	bx	r3
 8019194:	4770      	bx	lr
 8019196:	bf00      	nop
 8019198:	2000b3e8 	.word	0x2000b3e8

0801919c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801919c:	4b03      	ldr	r3, [pc, #12]	; (80191ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801919e:	6818      	ldr	r0, [r3, #0]
 80191a0:	b110      	cbz	r0, 80191a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80191a2:	6803      	ldr	r3, [r0, #0]
 80191a4:	6a1b      	ldr	r3, [r3, #32]
 80191a6:	4718      	bx	r3
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop
 80191ac:	2000b3e8 	.word	0x2000b3e8

080191b0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80191b0:	4b03      	ldr	r3, [pc, #12]	; (80191c0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80191b2:	6818      	ldr	r0, [r3, #0]
 80191b4:	b110      	cbz	r0, 80191bc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80191b6:	6803      	ldr	r3, [r0, #0]
 80191b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191ba:	4718      	bx	r3
 80191bc:	4770      	bx	lr
 80191be:	bf00      	nop
 80191c0:	2000b3e8 	.word	0x2000b3e8

080191c4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80191c4:	b570      	push	{r4, r5, r6, lr}
 80191c6:	4d34      	ldr	r5, [pc, #208]	; (8019298 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80191c8:	4604      	mov	r4, r0
 80191ca:	6828      	ldr	r0, [r5, #0]
 80191cc:	b140      	cbz	r0, 80191e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80191ce:	7a03      	ldrb	r3, [r0, #8]
 80191d0:	b933      	cbnz	r3, 80191e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80191d2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80191d6:	6803      	ldr	r3, [r0, #0]
 80191d8:	689b      	ldr	r3, [r3, #8]
 80191da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191de:	4718      	bx	r3
 80191e0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80191e4:	b97b      	cbnz	r3, 8019206 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80191e6:	b170      	cbz	r0, 8019206 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80191e8:	7a03      	ldrb	r3, [r0, #8]
 80191ea:	b163      	cbz	r3, 8019206 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80191ec:	4b2b      	ldr	r3, [pc, #172]	; (801929c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80191ee:	6818      	ldr	r0, [r3, #0]
 80191f0:	b110      	cbz	r0, 80191f8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80191f2:	6803      	ldr	r3, [r0, #0]
 80191f4:	691b      	ldr	r3, [r3, #16]
 80191f6:	4798      	blx	r3
 80191f8:	6828      	ldr	r0, [r5, #0]
 80191fa:	6803      	ldr	r3, [r0, #0]
 80191fc:	68db      	ldr	r3, [r3, #12]
 80191fe:	4798      	blx	r3
 8019200:	2301      	movs	r3, #1
 8019202:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019206:	2500      	movs	r5, #0
 8019208:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801920c:	42a8      	cmp	r0, r5
 801920e:	dd0c      	ble.n	801922a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8019210:	1963      	adds	r3, r4, r5
 8019212:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019216:	b132      	cbz	r2, 8019226 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019218:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801921c:	4413      	add	r3, r2
 801921e:	6858      	ldr	r0, [r3, #4]
 8019220:	6803      	ldr	r3, [r0, #0]
 8019222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019224:	4798      	blx	r3
 8019226:	3501      	adds	r5, #1
 8019228:	e7ee      	b.n	8019208 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801922a:	2300      	movs	r3, #0
 801922c:	461a      	mov	r2, r3
 801922e:	4298      	cmp	r0, r3
 8019230:	d114      	bne.n	801925c <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8019232:	1d25      	adds	r5, r4, #4
 8019234:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019238:	1e48      	subs	r0, r1, #1
 801923a:	b280      	uxth	r0, r0
 801923c:	4291      	cmp	r1, r2
 801923e:	dd24      	ble.n	801928a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8019240:	4288      	cmp	r0, r1
 8019242:	d2fb      	bcs.n	801923c <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019244:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019248:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801924c:	3304      	adds	r3, #4
 801924e:	428b      	cmp	r3, r1
 8019250:	d018      	beq.n	8019284 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8019252:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019256:	f843 6c04 	str.w	r6, [r3, #-4]
 801925a:	e7f8      	b.n	801924e <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801925c:	18e1      	adds	r1, r4, r3
 801925e:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8019262:	b16d      	cbz	r5, 8019280 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019264:	429a      	cmp	r2, r3
 8019266:	d00a      	beq.n	801927e <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019268:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801926c:	4431      	add	r1, r6
 801926e:	684e      	ldr	r6, [r1, #4]
 8019270:	b291      	uxth	r1, r2
 8019272:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019276:	604e      	str	r6, [r1, #4]
 8019278:	18a1      	adds	r1, r4, r2
 801927a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801927e:	3201      	adds	r2, #1
 8019280:	3301      	adds	r3, #1
 8019282:	e7d4      	b.n	801922e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019284:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8019288:	e7d4      	b.n	8019234 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801928a:	4b04      	ldr	r3, [pc, #16]	; (801929c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801928c:	6818      	ldr	r0, [r3, #0]
 801928e:	b110      	cbz	r0, 8019296 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8019290:	6803      	ldr	r3, [r0, #0]
 8019292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019294:	e7a1      	b.n	80191da <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019296:	bd70      	pop	{r4, r5, r6, pc}
 8019298:	2000b3ec 	.word	0x2000b3ec
 801929c:	2000b3e8 	.word	0x2000b3e8

080192a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80192a0:	b570      	push	{r4, r5, r6, lr}
 80192a2:	4606      	mov	r6, r0
 80192a4:	460c      	mov	r4, r1
 80192a6:	b929      	cbnz	r1, 80192b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80192a8:	4b0c      	ldr	r3, [pc, #48]	; (80192dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80192aa:	2165      	movs	r1, #101	; 0x65
 80192ac:	4a0c      	ldr	r2, [pc, #48]	; (80192e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80192ae:	480d      	ldr	r0, [pc, #52]	; (80192e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80192b0:	f00c fa26 	bl	8025700 <__assert_func>
 80192b4:	2300      	movs	r3, #0
 80192b6:	4d0c      	ldr	r5, [pc, #48]	; (80192e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80192b8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80192bc:	6828      	ldr	r0, [r5, #0]
 80192be:	b110      	cbz	r0, 80192c6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80192c0:	6803      	ldr	r3, [r0, #0]
 80192c2:	695b      	ldr	r3, [r3, #20]
 80192c4:	4798      	blx	r3
 80192c6:	602c      	str	r4, [r5, #0]
 80192c8:	4620      	mov	r0, r4
 80192ca:	6823      	ldr	r3, [r4, #0]
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	4798      	blx	r3
 80192d0:	6833      	ldr	r3, [r6, #0]
 80192d2:	4630      	mov	r0, r6
 80192d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192da:	4718      	bx	r3
 80192dc:	0802a218 	.word	0x0802a218
 80192e0:	0802a2e8 	.word	0x0802a2e8
 80192e4:	0802a222 	.word	0x0802a222
 80192e8:	2000b3e8 	.word	0x2000b3e8

080192ec <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80192ec:	b510      	push	{r4, lr}
 80192ee:	f9b1 4000 	ldrsh.w	r4, [r1]
 80192f2:	888a      	ldrh	r2, [r1, #4]
 80192f4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80192f8:	4422      	add	r2, r4
 80192fa:	b212      	sxth	r2, r2
 80192fc:	4293      	cmp	r3, r2
 80192fe:	da15      	bge.n	801932c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019300:	8882      	ldrh	r2, [r0, #4]
 8019302:	4413      	add	r3, r2
 8019304:	b21b      	sxth	r3, r3
 8019306:	429c      	cmp	r4, r3
 8019308:	da10      	bge.n	801932c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801930a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801930e:	88c9      	ldrh	r1, [r1, #6]
 8019310:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019314:	4419      	add	r1, r3
 8019316:	b209      	sxth	r1, r1
 8019318:	428a      	cmp	r2, r1
 801931a:	da07      	bge.n	801932c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801931c:	88c0      	ldrh	r0, [r0, #6]
 801931e:	4410      	add	r0, r2
 8019320:	b200      	sxth	r0, r0
 8019322:	4283      	cmp	r3, r0
 8019324:	bfac      	ite	ge
 8019326:	2000      	movge	r0, #0
 8019328:	2001      	movlt	r0, #1
 801932a:	bd10      	pop	{r4, pc}
 801932c:	2000      	movs	r0, #0
 801932e:	e7fc      	b.n	801932a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019330 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019330:	b570      	push	{r4, r5, r6, lr}
 8019332:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019336:	f9b0 5000 	ldrsh.w	r5, [r0]
 801933a:	42ac      	cmp	r4, r5
 801933c:	db18      	blt.n	8019370 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801933e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019342:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019346:	429a      	cmp	r2, r3
 8019348:	db12      	blt.n	8019370 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801934a:	8886      	ldrh	r6, [r0, #4]
 801934c:	4435      	add	r5, r6
 801934e:	888e      	ldrh	r6, [r1, #4]
 8019350:	4434      	add	r4, r6
 8019352:	b22d      	sxth	r5, r5
 8019354:	b224      	sxth	r4, r4
 8019356:	42a5      	cmp	r5, r4
 8019358:	db0a      	blt.n	8019370 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801935a:	88c0      	ldrh	r0, [r0, #6]
 801935c:	4418      	add	r0, r3
 801935e:	88cb      	ldrh	r3, [r1, #6]
 8019360:	441a      	add	r2, r3
 8019362:	b200      	sxth	r0, r0
 8019364:	b212      	sxth	r2, r2
 8019366:	4290      	cmp	r0, r2
 8019368:	bfb4      	ite	lt
 801936a:	2000      	movlt	r0, #0
 801936c:	2001      	movge	r0, #1
 801936e:	bd70      	pop	{r4, r5, r6, pc}
 8019370:	2000      	movs	r0, #0
 8019372:	e7fc      	b.n	801936e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08019374 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019376:	4604      	mov	r4, r0
 8019378:	4608      	mov	r0, r1
 801937a:	460d      	mov	r5, r1
 801937c:	f7fc fb95 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019380:	b978      	cbnz	r0, 80193a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019382:	4620      	mov	r0, r4
 8019384:	f7fc fb91 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019388:	f9b5 6000 	ldrsh.w	r6, [r5]
 801938c:	b150      	cbz	r0, 80193a4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801938e:	8026      	strh	r6, [r4, #0]
 8019390:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019394:	8063      	strh	r3, [r4, #2]
 8019396:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801939a:	80a3      	strh	r3, [r4, #4]
 801939c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80193a0:	80e3      	strh	r3, [r4, #6]
 80193a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193a4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80193a8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80193ac:	42b1      	cmp	r1, r6
 80193ae:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80193b2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80193b6:	460f      	mov	r7, r1
 80193b8:	88ed      	ldrh	r5, [r5, #6]
 80193ba:	bfa8      	it	ge
 80193bc:	4637      	movge	r7, r6
 80193be:	4293      	cmp	r3, r2
 80193c0:	4618      	mov	r0, r3
 80193c2:	4466      	add	r6, ip
 80193c4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80193c8:	bfa8      	it	ge
 80193ca:	4610      	movge	r0, r2
 80193cc:	442a      	add	r2, r5
 80193ce:	88e5      	ldrh	r5, [r4, #6]
 80193d0:	4461      	add	r1, ip
 80193d2:	b236      	sxth	r6, r6
 80193d4:	8027      	strh	r7, [r4, #0]
 80193d6:	442b      	add	r3, r5
 80193d8:	b209      	sxth	r1, r1
 80193da:	b212      	sxth	r2, r2
 80193dc:	8060      	strh	r0, [r4, #2]
 80193de:	b21b      	sxth	r3, r3
 80193e0:	428e      	cmp	r6, r1
 80193e2:	bfac      	ite	ge
 80193e4:	ebc7 0106 	rsbge	r1, r7, r6
 80193e8:	ebc7 0101 	rsblt	r1, r7, r1
 80193ec:	429a      	cmp	r2, r3
 80193ee:	bfac      	ite	ge
 80193f0:	ebc0 0202 	rsbge	r2, r0, r2
 80193f4:	ebc0 0203 	rsblt	r2, r0, r3
 80193f8:	80a1      	strh	r1, [r4, #4]
 80193fa:	80e2      	strh	r2, [r4, #6]
 80193fc:	e7d1      	b.n	80193a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019400 <_ZN8touchgfx11Application11getInstanceEv>:
 8019400:	4b01      	ldr	r3, [pc, #4]	; (8019408 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019402:	6818      	ldr	r0, [r3, #0]
 8019404:	4770      	bx	lr
 8019406:	bf00      	nop
 8019408:	2000b3f8 	.word	0x2000b3f8

0801940c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801940c:	b570      	push	{r4, r5, r6, lr}
 801940e:	2300      	movs	r3, #0
 8019410:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8019414:	1d04      	adds	r4, r0, #4
 8019416:	b29a      	uxth	r2, r3
 8019418:	4296      	cmp	r6, r2
 801941a:	d90a      	bls.n	8019432 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801941c:	f854 2b04 	ldr.w	r2, [r4], #4
 8019420:	428a      	cmp	r2, r1
 8019422:	d107      	bne.n	8019434 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019424:	18c5      	adds	r5, r0, r3
 8019426:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801942a:	b11a      	cbz	r2, 8019434 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801942c:	3a01      	subs	r2, #1
 801942e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8019432:	bd70      	pop	{r4, r5, r6, pc}
 8019434:	3301      	adds	r3, #1
 8019436:	e7ee      	b.n	8019416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019438:	2300      	movs	r3, #0
 801943a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801943e:	30a8      	adds	r0, #168	; 0xa8
 8019440:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019444:	f802 3b01 	strb.w	r3, [r2], #1
 8019448:	4282      	cmp	r2, r0
 801944a:	d1fb      	bne.n	8019444 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801944c:	4770      	bx	lr

0801944e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801944e:	4603      	mov	r3, r0
 8019450:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019454:	2200      	movs	r2, #0
 8019456:	801a      	strh	r2, [r3, #0]
 8019458:	3308      	adds	r3, #8
 801945a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801945e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019462:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019466:	428b      	cmp	r3, r1
 8019468:	d1f5      	bne.n	8019456 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801946a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801946e:	4770      	bx	lr

08019470 <_ZN8touchgfx11ApplicationC1Ev>:
 8019470:	b570      	push	{r4, r5, r6, lr}
 8019472:	4b1a      	ldr	r3, [pc, #104]	; (80194dc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019474:	2500      	movs	r5, #0
 8019476:	4604      	mov	r4, r0
 8019478:	30a8      	adds	r0, #168	; 0xa8
 801947a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801947e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019482:	f7ff ffe4 	bl	801944e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019486:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801948a:	f7ff ffe0 	bl	801944e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801948e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8019492:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019496:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801949a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801949e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80194a2:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80194a6:	490e      	ldr	r1, [pc, #56]	; (80194e0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80194a8:	480e      	ldr	r0, [pc, #56]	; (80194e4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80194aa:	f00a fc05 	bl	8023cb8 <CRC_Lock>
 80194ae:	4e0e      	ldr	r6, [pc, #56]	; (80194e8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80194b0:	4b0e      	ldr	r3, [pc, #56]	; (80194ec <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80194b2:	b158      	cbz	r0, 80194cc <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 80194b4:	801d      	strh	r5, [r3, #0]
 80194b6:	2300      	movs	r3, #0
 80194b8:	4a0d      	ldr	r2, [pc, #52]	; (80194f0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80194ba:	4620      	mov	r0, r4
 80194bc:	6013      	str	r3, [r2, #0]
 80194be:	4a0d      	ldr	r2, [pc, #52]	; (80194f4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80194c0:	6033      	str	r3, [r6, #0]
 80194c2:	6013      	str	r3, [r2, #0]
 80194c4:	f7ff ffb8 	bl	8019438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80194c8:	4620      	mov	r0, r4
 80194ca:	bd70      	pop	{r4, r5, r6, pc}
 80194cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80194d0:	2002      	movs	r0, #2
 80194d2:	801a      	strh	r2, [r3, #0]
 80194d4:	6030      	str	r0, [r6, #0]
 80194d6:	f000 ff83 	bl	801a3e0 <_ZN8touchgfx6Screen4drawEv>
 80194da:	e7ec      	b.n	80194b6 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 80194dc:	0802a2ac 	.word	0x0802a2ac
 80194e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80194e4:	f407a5c2 	.word	0xf407a5c2
 80194e8:	2000b3e8 	.word	0x2000b3e8
 80194ec:	20000040 	.word	0x20000040
 80194f0:	2000b3f8 	.word	0x2000b3f8
 80194f4:	2000b3ec 	.word	0x2000b3ec

080194f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80194f8:	2300      	movs	r3, #0
 80194fa:	8003      	strh	r3, [r0, #0]
 80194fc:	8043      	strh	r3, [r0, #2]
 80194fe:	8083      	strh	r3, [r0, #4]
 8019500:	80c3      	strh	r3, [r0, #6]
 8019502:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8019506:	4293      	cmp	r3, r2
 8019508:	b530      	push	{r4, r5, lr}
 801950a:	d912      	bls.n	8019532 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801950c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8019510:	3b01      	subs	r3, #1
 8019512:	6825      	ldr	r5, [r4, #0]
 8019514:	b29b      	uxth	r3, r3
 8019516:	6005      	str	r5, [r0, #0]
 8019518:	4293      	cmp	r3, r2
 801951a:	6865      	ldr	r5, [r4, #4]
 801951c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8019520:	6045      	str	r5, [r0, #4]
 8019522:	d906      	bls.n	8019532 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019524:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019528:	681d      	ldr	r5, [r3, #0]
 801952a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801952e:	685d      	ldr	r5, [r3, #4]
 8019530:	6065      	str	r5, [r4, #4]
 8019532:	bd30      	pop	{r4, r5, pc}

08019534 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8019534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019536:	466b      	mov	r3, sp
 8019538:	4604      	mov	r4, r0
 801953a:	e883 0006 	stmia.w	r3, {r1, r2}
 801953e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8019542:	2a07      	cmp	r2, #7
 8019544:	d906      	bls.n	8019554 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8019546:	4b09      	ldr	r3, [pc, #36]	; (801956c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019548:	f240 118f 	movw	r1, #399	; 0x18f
 801954c:	4a08      	ldr	r2, [pc, #32]	; (8019570 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801954e:	4809      	ldr	r0, [pc, #36]	; (8019574 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019550:	f00c f8d6 	bl	8025700 <__assert_func>
 8019554:	1c51      	adds	r1, r2, #1
 8019556:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801955a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801955e:	cb03      	ldmia	r3!, {r0, r1}
 8019560:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019564:	6069      	str	r1, [r5, #4]
 8019566:	b003      	add	sp, #12
 8019568:	bd30      	pop	{r4, r5, pc}
 801956a:	bf00      	nop
 801956c:	0802a24c 	.word	0x0802a24c
 8019570:	0802a32c 	.word	0x0802a32c
 8019574:	0802a27b 	.word	0x0802a27b

08019578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801957c:	b089      	sub	sp, #36	; 0x24
 801957e:	4606      	mov	r6, r0
 8019580:	466c      	mov	r4, sp
 8019582:	4620      	mov	r0, r4
 8019584:	e884 0006 	stmia.w	r4, {r1, r2}
 8019588:	f7fc fa8f 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 801958c:	bbb0      	cbnz	r0, 80195fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801958e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8019592:	b1fd      	cbz	r5, 80195d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019594:	3d01      	subs	r5, #1
 8019596:	af04      	add	r7, sp, #16
 8019598:	f04f 090a 	mov.w	r9, #10
 801959c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80195a0:	ab02      	add	r3, sp, #8
 80195a2:	fa1f f885 	uxth.w	r8, r5
 80195a6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80195aa:	6851      	ldr	r1, [r2, #4]
 80195ac:	c303      	stmia	r3!, {r0, r1}
 80195ae:	4621      	mov	r1, r4
 80195b0:	a802      	add	r0, sp, #8
 80195b2:	f7ff febd 	bl	8019330 <_ZNK8touchgfx4Rect8includesERKS0_>
 80195b6:	bb08      	cbnz	r0, 80195fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80195b8:	a902      	add	r1, sp, #8
 80195ba:	4620      	mov	r0, r4
 80195bc:	f7ff feb8 	bl	8019330 <_ZNK8touchgfx4Rect8includesERKS0_>
 80195c0:	b1f8      	cbz	r0, 8019602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80195c2:	4642      	mov	r2, r8
 80195c4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80195c8:	a806      	add	r0, sp, #24
 80195ca:	f7ff ff95 	bl	80194f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195ce:	f115 35ff 	adds.w	r5, r5, #4294967295
 80195d2:	d2e3      	bcs.n	801959c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80195d4:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80195d8:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80195dc:	2b08      	cmp	r3, #8
 80195de:	d108      	bne.n	80195f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80195e0:	4629      	mov	r1, r5
 80195e2:	a806      	add	r0, sp, #24
 80195e4:	2207      	movs	r2, #7
 80195e6:	f7ff ff87 	bl	80194f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195ea:	a906      	add	r1, sp, #24
 80195ec:	4620      	mov	r0, r4
 80195ee:	f7ff fec1 	bl	8019374 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80195f2:	4628      	mov	r0, r5
 80195f4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80195f8:	f7ff ff9c 	bl	8019534 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80195fc:	b009      	add	sp, #36	; 0x24
 80195fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019602:	4621      	mov	r1, r4
 8019604:	a802      	add	r0, sp, #8
 8019606:	f7ff fe71 	bl	80192ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801960a:	b150      	cbz	r0, 8019622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801960c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019610:	a806      	add	r0, sp, #24
 8019612:	4642      	mov	r2, r8
 8019614:	f7ff ff70 	bl	80194f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019618:	a902      	add	r1, sp, #8
 801961a:	4620      	mov	r0, r4
 801961c:	f7ff feaa 	bl	8019374 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019620:	e7d5      	b.n	80195ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019626:	e887 0003 	stmia.w	r7, {r0, r1}
 801962a:	a902      	add	r1, sp, #8
 801962c:	4638      	mov	r0, r7
 801962e:	f7ff fea1 	bl	8019374 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019632:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019636:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801963a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801963e:	fb13 f302 	smulbb	r3, r3, r2
 8019642:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019646:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801964a:	fb11 f102 	smulbb	r1, r1, r2
 801964e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019652:	fb09 f303 	mul.w	r3, r9, r3
 8019656:	fb12 1100 	smlabb	r1, r2, r0, r1
 801965a:	220b      	movs	r2, #11
 801965c:	434a      	muls	r2, r1
 801965e:	4293      	cmp	r3, r2
 8019660:	dab5      	bge.n	80195ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019662:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019666:	a806      	add	r0, sp, #24
 8019668:	4642      	mov	r2, r8
 801966a:	f7ff ff45 	bl	80194f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801966e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019672:	e884 0003 	stmia.w	r4, {r0, r1}
 8019676:	e7aa      	b.n	80195ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019678 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019678:	4b1d      	ldr	r3, [pc, #116]	; (80196f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801967a:	b530      	push	{r4, r5, lr}
 801967c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019680:	b085      	sub	sp, #20
 8019682:	4b1c      	ldr	r3, [pc, #112]	; (80196f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019684:	460c      	mov	r4, r1
 8019686:	2100      	movs	r1, #0
 8019688:	4605      	mov	r5, r0
 801968a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801968e:	6820      	ldr	r0, [r4, #0]
 8019690:	9100      	str	r1, [sp, #0]
 8019692:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019696:	ab02      	add	r3, sp, #8
 8019698:	6861      	ldr	r1, [r4, #4]
 801969a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801969e:	c303      	stmia	r3!, {r0, r1}
 80196a0:	4669      	mov	r1, sp
 80196a2:	a802      	add	r0, sp, #8
 80196a4:	f7fc f9be 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 80196a8:	ab02      	add	r3, sp, #8
 80196aa:	cb03      	ldmia	r3!, {r0, r1}
 80196ac:	4b12      	ldr	r3, [pc, #72]	; (80196f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80196ae:	6020      	str	r0, [r4, #0]
 80196b0:	6818      	ldr	r0, [r3, #0]
 80196b2:	6061      	str	r1, [r4, #4]
 80196b4:	b138      	cbz	r0, 80196c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80196b6:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 80196ba:	b133      	cbz	r3, 80196ca <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80196bc:	6821      	ldr	r1, [r4, #0]
 80196be:	4628      	mov	r0, r5
 80196c0:	6862      	ldr	r2, [r4, #4]
 80196c2:	f7ff ff59 	bl	8019578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80196c6:	b005      	add	sp, #20
 80196c8:	bd30      	pop	{r4, r5, pc}
 80196ca:	6803      	ldr	r3, [r0, #0]
 80196cc:	4621      	mov	r1, r4
 80196ce:	689b      	ldr	r3, [r3, #8]
 80196d0:	4798      	blx	r3
 80196d2:	4b0a      	ldr	r3, [pc, #40]	; (80196fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80196d4:	6818      	ldr	r0, [r3, #0]
 80196d6:	b118      	cbz	r0, 80196e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80196d8:	6803      	ldr	r3, [r0, #0]
 80196da:	4621      	mov	r1, r4
 80196dc:	689b      	ldr	r3, [r3, #8]
 80196de:	4798      	blx	r3
 80196e0:	4b07      	ldr	r3, [pc, #28]	; (8019700 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80196e2:	4621      	mov	r1, r4
 80196e4:	6818      	ldr	r0, [r3, #0]
 80196e6:	6803      	ldr	r3, [r0, #0]
 80196e8:	695b      	ldr	r3, [r3, #20]
 80196ea:	4798      	blx	r3
 80196ec:	e7eb      	b.n	80196c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80196ee:	bf00      	nop
 80196f0:	2000b360 	.word	0x2000b360
 80196f4:	2000b362 	.word	0x2000b362
 80196f8:	2000b3e8 	.word	0x2000b3e8
 80196fc:	2000b3e4 	.word	0x2000b3e4
 8019700:	2000b36c 	.word	0x2000b36c

08019704 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019708:	4604      	mov	r4, r0
 801970a:	b09b      	sub	sp, #108	; 0x6c
 801970c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8019710:	b129      	cbz	r1, 801971e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019712:	2300      	movs	r3, #0
 8019714:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019718:	b01b      	add	sp, #108	; 0x6c
 801971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801971e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019722:	4630      	mov	r0, r6
 8019724:	f7fc f9c1 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019728:	4605      	mov	r5, r0
 801972a:	b940      	cbnz	r0, 801973e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801972c:	4620      	mov	r0, r4
 801972e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019732:	f7ff ff21 	bl	8019578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019736:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801973a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801973e:	4baf      	ldr	r3, [pc, #700]	; (80199fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	b33b      	cbz	r3, 8019794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019744:	4dae      	ldr	r5, [pc, #696]	; (8019a00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 8019746:	4628      	mov	r0, r5
 8019748:	f7fc f9af 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 801974c:	4606      	mov	r6, r0
 801974e:	bb08      	cbnz	r0, 8019794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019750:	4628      	mov	r0, r5
 8019752:	f7ff fc71 	bl	8019038 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019756:	6829      	ldr	r1, [r5, #0]
 8019758:	686a      	ldr	r2, [r5, #4]
 801975a:	4620      	mov	r0, r4
 801975c:	f7ff ff0c 	bl	8019578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019760:	802e      	strh	r6, [r5, #0]
 8019762:	806e      	strh	r6, [r5, #2]
 8019764:	80ae      	strh	r6, [r5, #4]
 8019766:	80ee      	strh	r6, [r5, #6]
 8019768:	4fa6      	ldr	r7, [pc, #664]	; (8019a04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 801976a:	a809      	add	r0, sp, #36	; 0x24
 801976c:	f7ff fe6f 	bl	801944e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019770:	883d      	ldrh	r5, [r7, #0]
 8019772:	462e      	mov	r6, r5
 8019774:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019778:	42b3      	cmp	r3, r6
 801977a:	d910      	bls.n	801979e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801977c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019780:	3601      	adds	r6, #1
 8019782:	a809      	add	r0, sp, #36	; 0x24
 8019784:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019788:	b2b6      	uxth	r6, r6
 801978a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801978e:	f7ff fed1 	bl	8019534 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019792:	e7ef      	b.n	8019774 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019794:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019798:	2b00      	cmp	r3, #0
 801979a:	d1e5      	bne.n	8019768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801979c:	e7bc      	b.n	8019718 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801979e:	462e      	mov	r6, r5
 80197a0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80197a4:	42b3      	cmp	r3, r6
 80197a6:	d90b      	bls.n	80197c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80197a8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80197ac:	3601      	adds	r6, #1
 80197ae:	4620      	mov	r0, r4
 80197b0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80197b4:	b2b6      	uxth	r6, r6
 80197b6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80197ba:	f7ff fedd 	bl	8019578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80197be:	e7ef      	b.n	80197a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80197c0:	4e91      	ldr	r6, [pc, #580]	; (8019a08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 80197c2:	6833      	ldr	r3, [r6, #0]
 80197c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80197c8:	2b01      	cmp	r3, #1
 80197ca:	f040 8092 	bne.w	80198f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 80197ce:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80197d2:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80197d6:	f04f 0900 	mov.w	r9, #0
 80197da:	33aa      	adds	r3, #170	; 0xaa
 80197dc:	42a8      	cmp	r0, r5
 80197de:	f103 0308 	add.w	r3, r3, #8
 80197e2:	dd0a      	ble.n	80197fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 80197e4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80197e8:	3501      	adds	r5, #1
 80197ea:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80197ee:	440a      	add	r2, r1
 80197f0:	b212      	sxth	r2, r2
 80197f2:	4591      	cmp	r9, r2
 80197f4:	bfb8      	it	lt
 80197f6:	4691      	movlt	r9, r2
 80197f8:	e7f0      	b.n	80197dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 80197fa:	4b84      	ldr	r3, [pc, #528]	; (8019a0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 80197fc:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8019a14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 8019800:	881d      	ldrh	r5, [r3, #0]
 8019802:	2300      	movs	r3, #0
 8019804:	2d0f      	cmp	r5, #15
 8019806:	bf8c      	ite	hi
 8019808:	08ed      	lsrhi	r5, r5, #3
 801980a:	2501      	movls	r5, #1
 801980c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019810:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019814:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019818:	6830      	ldr	r0, [r6, #0]
 801981a:	440b      	add	r3, r1
 801981c:	6802      	ldr	r2, [r0, #0]
 801981e:	b21b      	sxth	r3, r3
 8019820:	4599      	cmp	r9, r3
 8019822:	dd49      	ble.n	80198b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 8019824:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019828:	4798      	blx	r3
 801982a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801982e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019832:	4413      	add	r3, r2
 8019834:	b21b      	sxth	r3, r3
 8019836:	195a      	adds	r2, r3, r5
 8019838:	4290      	cmp	r0, r2
 801983a:	da07      	bge.n	801984c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801983c:	4581      	cmp	r9, r0
 801983e:	dd05      	ble.n	801984c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8019840:	4298      	cmp	r0, r3
 8019842:	da33      	bge.n	80198ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019844:	2b00      	cmp	r3, #0
 8019846:	dd31      	ble.n	80198ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019848:	4648      	mov	r0, r9
 801984a:	e004      	b.n	8019856 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 801984c:	4298      	cmp	r0, r3
 801984e:	dbfb      	blt.n	8019848 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 8019850:	4548      	cmp	r0, r9
 8019852:	bfa8      	it	ge
 8019854:	4648      	movge	r0, r9
 8019856:	f9b8 2000 	ldrsh.w	r2, [r8]
 801985a:	2100      	movs	r1, #0
 801985c:	1ac0      	subs	r0, r0, r3
 801985e:	f8b7 a000 	ldrh.w	sl, [r7]
 8019862:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019866:	f8ad 3016 	strh.w	r3, [sp, #22]
 801986a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801986e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019872:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019876:	4553      	cmp	r3, sl
 8019878:	d9ca      	bls.n	8019810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801987a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801987e:	ab07      	add	r3, sp, #28
 8019880:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019884:	6851      	ldr	r1, [r2, #4]
 8019886:	c303      	stmia	r3!, {r0, r1}
 8019888:	a807      	add	r0, sp, #28
 801988a:	a905      	add	r1, sp, #20
 801988c:	f7fc f8ca 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 8019890:	a807      	add	r0, sp, #28
 8019892:	f7fc f90a 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019896:	b920      	cbnz	r0, 80198a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 8019898:	6823      	ldr	r3, [r4, #0]
 801989a:	a907      	add	r1, sp, #28
 801989c:	4620      	mov	r0, r4
 801989e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198a0:	4798      	blx	r3
 80198a2:	f10a 0a01 	add.w	sl, sl, #1
 80198a6:	fa1f fa8a 	uxth.w	sl, sl
 80198aa:	e7e2      	b.n	8019872 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 80198ac:	6830      	ldr	r0, [r6, #0]
 80198ae:	2101      	movs	r1, #1
 80198b0:	6803      	ldr	r3, [r0, #0]
 80198b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80198b4:	4798      	blx	r3
 80198b6:	e7ab      	b.n	8019810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80198b8:	69d3      	ldr	r3, [r2, #28]
 80198ba:	4798      	blx	r3
 80198bc:	4b54      	ldr	r3, [pc, #336]	; (8019a10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 80198be:	781b      	ldrb	r3, [r3, #0]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	f43f af29 	beq.w	8019718 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80198c6:	2300      	movs	r3, #0
 80198c8:	883d      	ldrh	r5, [r7, #0]
 80198ca:	34ea      	adds	r4, #234	; 0xea
 80198cc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80198d0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80198d4:	42ab      	cmp	r3, r5
 80198d6:	f67f af1f 	bls.w	8019718 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80198da:	ab1a      	add	r3, sp, #104	; 0x68
 80198dc:	4620      	mov	r0, r4
 80198de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80198e2:	3501      	adds	r5, #1
 80198e4:	3b44      	subs	r3, #68	; 0x44
 80198e6:	b2ad      	uxth	r5, r5
 80198e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80198ec:	f7ff fe22 	bl	8019534 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80198f0:	e7ee      	b.n	80198d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 80198f2:	2b02      	cmp	r3, #2
 80198f4:	d16a      	bne.n	80199cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 80198f6:	f8df a120 	ldr.w	sl, [pc, #288]	; 8019a18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 80198fa:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80198fe:	42ab      	cmp	r3, r5
 8019900:	d9dc      	bls.n	80198bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8019902:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019906:	ab03      	add	r3, sp, #12
 8019908:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801990c:	6851      	ldr	r1, [r2, #4]
 801990e:	c303      	stmia	r3!, {r0, r1}
 8019910:	f89a 3000 	ldrb.w	r3, [sl]
 8019914:	2b01      	cmp	r3, #1
 8019916:	d102      	bne.n	801991e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 8019918:	a803      	add	r0, sp, #12
 801991a:	f7ff fbe7 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801991e:	a803      	add	r0, sp, #12
 8019920:	f7fc f8c3 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019924:	2800      	cmp	r0, #0
 8019926:	d14a      	bne.n	80199be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 8019928:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801992c:	f10d 0914 	add.w	r9, sp, #20
 8019930:	f10d 081c 	add.w	r8, sp, #28
 8019934:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019938:	f8ad 3014 	strh.w	r3, [sp, #20]
 801993c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019940:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019944:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019948:	f8ad 3018 	strh.w	r3, [sp, #24]
 801994c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019950:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019954:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019958:	44dc      	add	ip, fp
 801995a:	6830      	ldr	r0, [r6, #0]
 801995c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019960:	ebac 0c02 	sub.w	ip, ip, r2
 8019964:	f8d0 e000 	ldr.w	lr, [r0]
 8019968:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801996c:	fa1f fc8c 	uxth.w	ip, ip
 8019970:	f8cd c000 	str.w	ip, [sp]
 8019974:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019978:	47d8      	blx	fp
 801997a:	f89a 3000 	ldrb.w	r3, [sl]
 801997e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019982:	2b01      	cmp	r3, #1
 8019984:	d11e      	bne.n	80199c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 8019986:	e899 0003 	ldmia.w	r9, {r0, r1}
 801998a:	e888 0003 	stmia.w	r8, {r0, r1}
 801998e:	4640      	mov	r0, r8
 8019990:	f7ff fb52 	bl	8019038 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019994:	6823      	ldr	r3, [r4, #0]
 8019996:	4641      	mov	r1, r8
 8019998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801999a:	4620      	mov	r0, r4
 801999c:	4798      	blx	r3
 801999e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80199a2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80199a6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80199aa:	4413      	add	r3, r2
 80199ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80199b0:	440a      	add	r2, r1
 80199b2:	b21b      	sxth	r3, r3
 80199b4:	b212      	sxth	r2, r2
 80199b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80199ba:	4293      	cmp	r3, r2
 80199bc:	dbc6      	blt.n	801994c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 80199be:	3501      	adds	r5, #1
 80199c0:	b2ad      	uxth	r5, r5
 80199c2:	e79a      	b.n	80198fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 80199c4:	6823      	ldr	r3, [r4, #0]
 80199c6:	4649      	mov	r1, r9
 80199c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199ca:	e7e6      	b.n	801999a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 80199cc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80199d0:	42ab      	cmp	r3, r5
 80199d2:	f67f af73 	bls.w	80198bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 80199d6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80199da:	ab07      	add	r3, sp, #28
 80199dc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80199e0:	6851      	ldr	r1, [r2, #4]
 80199e2:	c303      	stmia	r3!, {r0, r1}
 80199e4:	a807      	add	r0, sp, #28
 80199e6:	f7fc f860 	bl	8015aaa <_ZNK8touchgfx4Rect7isEmptyEv>
 80199ea:	b920      	cbnz	r0, 80199f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 80199ec:	6823      	ldr	r3, [r4, #0]
 80199ee:	a907      	add	r1, sp, #28
 80199f0:	4620      	mov	r0, r4
 80199f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199f4:	4798      	blx	r3
 80199f6:	3501      	adds	r5, #1
 80199f8:	b2ad      	uxth	r5, r5
 80199fa:	e7e7      	b.n	80199cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 80199fc:	2000b3e4 	.word	0x2000b3e4
 8019a00:	2000b3f0 	.word	0x2000b3f0
 8019a04:	20000040 	.word	0x20000040
 8019a08:	2000b36c 	.word	0x2000b36c
 8019a0c:	2000b362 	.word	0x2000b362
 8019a10:	2000b36a 	.word	0x2000b36a
 8019a14:	2000b360 	.word	0x2000b360
 8019a18:	2000b364 	.word	0x2000b364

08019a1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019a1c:	4b03      	ldr	r3, [pc, #12]	; (8019a2c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019a1e:	2200      	movs	r2, #0
 8019a20:	801a      	strh	r2, [r3, #0]
 8019a22:	805a      	strh	r2, [r3, #2]
 8019a24:	809a      	strh	r2, [r3, #4]
 8019a26:	80da      	strh	r2, [r3, #6]
 8019a28:	4770      	bx	lr
 8019a2a:	bf00      	nop
 8019a2c:	2000b3f0 	.word	0x2000b3f0

08019a30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a34:	b099      	sub	sp, #100	; 0x64
 8019a36:	4607      	mov	r7, r0
 8019a38:	4614      	mov	r4, r2
 8019a3a:	461d      	mov	r5, r3
 8019a3c:	a802      	add	r0, sp, #8
 8019a3e:	468a      	mov	sl, r1
 8019a40:	f000 fe4b 	bl	801a6da <_ZN8touchgfx12TextProviderC1Ev>
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	4638      	mov	r0, r7
 8019a48:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a4e:	4798      	blx	r3
 8019a50:	462a      	mov	r2, r5
 8019a52:	2500      	movs	r5, #0
 8019a54:	4621      	mov	r1, r4
 8019a56:	4603      	mov	r3, r0
 8019a58:	a802      	add	r0, sp, #8
 8019a5a:	462c      	mov	r4, r5
 8019a5c:	46a9      	mov	r9, r5
 8019a5e:	46a8      	mov	r8, r5
 8019a60:	f000 fe80 	bl	801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019a64:	2300      	movs	r3, #0
 8019a66:	9301      	str	r3, [sp, #4]
 8019a68:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019a6c:	429c      	cmp	r4, r3
 8019a6e:	d002      	beq.n	8019a76 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8019a70:	455c      	cmp	r4, fp
 8019a72:	bf18      	it	ne
 8019a74:	4625      	movne	r5, r4
 8019a76:	ab01      	add	r3, sp, #4
 8019a78:	463a      	mov	r2, r7
 8019a7a:	4651      	mov	r1, sl
 8019a7c:	a802      	add	r0, sp, #8
 8019a7e:	f001 f96b 	bl	801ad58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a82:	4604      	mov	r4, r0
 8019a84:	b108      	cbz	r0, 8019a8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8019a86:	280a      	cmp	r0, #10
 8019a88:	d10a      	bne.n	8019aa0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8019a8a:	45c1      	cmp	r9, r8
 8019a8c:	bf38      	it	cc
 8019a8e:	46c1      	movcc	r9, r8
 8019a90:	f04f 0800 	mov.w	r8, #0
 8019a94:	2c00      	cmp	r4, #0
 8019a96:	d1e5      	bne.n	8019a64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019a98:	4648      	mov	r0, r9
 8019a9a:	b019      	add	sp, #100	; 0x64
 8019a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aa0:	9a01      	ldr	r2, [sp, #4]
 8019aa2:	2a00      	cmp	r2, #0
 8019aa4:	d0de      	beq.n	8019a64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019aa6:	7b56      	ldrb	r6, [r2, #13]
 8019aa8:	4629      	mov	r1, r5
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	0076      	lsls	r6, r6, #1
 8019aae:	8894      	ldrh	r4, [r2, #4]
 8019ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ab2:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8019ab6:	7a96      	ldrb	r6, [r2, #10]
 8019ab8:	4306      	orrs	r6, r0
 8019aba:	4638      	mov	r0, r7
 8019abc:	4798      	blx	r3
 8019abe:	4430      	add	r0, r6
 8019ac0:	4480      	add	r8, r0
 8019ac2:	fa1f f888 	uxth.w	r8, r8
 8019ac6:	e7e5      	b.n	8019a94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08019ac8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019ac8:	b508      	push	{r3, lr}
 8019aca:	6803      	ldr	r3, [r0, #0]
 8019acc:	68db      	ldr	r3, [r3, #12]
 8019ace:	4798      	blx	r3
 8019ad0:	b128      	cbz	r0, 8019ade <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019ad2:	7b43      	ldrb	r3, [r0, #13]
 8019ad4:	7a80      	ldrb	r0, [r0, #10]
 8019ad6:	005b      	lsls	r3, r3, #1
 8019ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019adc:	4318      	orrs	r0, r3
 8019ade:	bd08      	pop	{r3, pc}

08019ae0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019ae0:	b40e      	push	{r1, r2, r3}
 8019ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ae4:	b098      	sub	sp, #96	; 0x60
 8019ae6:	4605      	mov	r5, r0
 8019ae8:	ab1d      	add	r3, sp, #116	; 0x74
 8019aea:	a802      	add	r0, sp, #8
 8019aec:	ae18      	add	r6, sp, #96	; 0x60
 8019aee:	f853 4b04 	ldr.w	r4, [r3], #4
 8019af2:	9300      	str	r3, [sp, #0]
 8019af4:	f000 fdf1 	bl	801a6da <_ZN8touchgfx12TextProviderC1Ev>
 8019af8:	682b      	ldr	r3, [r5, #0]
 8019afa:	4628      	mov	r0, r5
 8019afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019afe:	4798      	blx	r3
 8019b00:	4621      	mov	r1, r4
 8019b02:	2400      	movs	r4, #0
 8019b04:	4603      	mov	r3, r0
 8019b06:	9a00      	ldr	r2, [sp, #0]
 8019b08:	a802      	add	r0, sp, #8
 8019b0a:	f000 fe2b 	bl	801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019b0e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8019b12:	462a      	mov	r2, r5
 8019b14:	4633      	mov	r3, r6
 8019b16:	4621      	mov	r1, r4
 8019b18:	a802      	add	r0, sp, #8
 8019b1a:	f001 f91d 	bl	801ad58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b1e:	b300      	cbz	r0, 8019b62 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019b20:	280a      	cmp	r0, #10
 8019b22:	d01a      	beq.n	8019b5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019b24:	9f01      	ldr	r7, [sp, #4]
 8019b26:	b1c7      	cbz	r7, 8019b5a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019b28:	7b78      	ldrb	r0, [r7, #13]
 8019b2a:	7a3b      	ldrb	r3, [r7, #8]
 8019b2c:	00c1      	lsls	r1, r0, #3
 8019b2e:	88aa      	ldrh	r2, [r5, #4]
 8019b30:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019b34:	4319      	orrs	r1, r3
 8019b36:	0643      	lsls	r3, r0, #25
 8019b38:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019b3c:	bf48      	it	mi
 8019b3e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019b42:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019b46:	bf48      	it	mi
 8019b48:	b219      	sxthmi	r1, r3
 8019b4a:	79fb      	ldrb	r3, [r7, #7]
 8019b4c:	4303      	orrs	r3, r0
 8019b4e:	4413      	add	r3, r2
 8019b50:	1a5b      	subs	r3, r3, r1
 8019b52:	b29b      	uxth	r3, r3
 8019b54:	42a3      	cmp	r3, r4
 8019b56:	bfc8      	it	gt
 8019b58:	b21c      	sxthgt	r4, r3
 8019b5a:	4633      	mov	r3, r6
 8019b5c:	462a      	mov	r2, r5
 8019b5e:	2100      	movs	r1, #0
 8019b60:	e7da      	b.n	8019b18 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8019b62:	b2a0      	uxth	r0, r4
 8019b64:	b018      	add	sp, #96	; 0x60
 8019b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b6a:	b003      	add	sp, #12
 8019b6c:	4770      	bx	lr

08019b6e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019b6e:	b40e      	push	{r1, r2, r3}
 8019b70:	b530      	push	{r4, r5, lr}
 8019b72:	b098      	sub	sp, #96	; 0x60
 8019b74:	4604      	mov	r4, r0
 8019b76:	ab1b      	add	r3, sp, #108	; 0x6c
 8019b78:	a802      	add	r0, sp, #8
 8019b7a:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b7e:	9301      	str	r3, [sp, #4]
 8019b80:	f000 fdab 	bl	801a6da <_ZN8touchgfx12TextProviderC1Ev>
 8019b84:	6823      	ldr	r3, [r4, #0]
 8019b86:	4620      	mov	r0, r4
 8019b88:	2401      	movs	r4, #1
 8019b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b8c:	4798      	blx	r3
 8019b8e:	9a01      	ldr	r2, [sp, #4]
 8019b90:	4603      	mov	r3, r0
 8019b92:	4629      	mov	r1, r5
 8019b94:	a802      	add	r0, sp, #8
 8019b96:	f000 fde5 	bl	801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019b9a:	a802      	add	r0, sp, #8
 8019b9c:	f001 f9ce 	bl	801af3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ba0:	b2a3      	uxth	r3, r4
 8019ba2:	b138      	cbz	r0, 8019bb4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8019ba4:	280a      	cmp	r0, #10
 8019ba6:	a802      	add	r0, sp, #8
 8019ba8:	bf04      	itt	eq
 8019baa:	3301      	addeq	r3, #1
 8019bac:	b21c      	sxtheq	r4, r3
 8019bae:	f001 f9c5 	bl	801af3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019bb2:	e7f5      	b.n	8019ba0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	b018      	add	sp, #96	; 0x60
 8019bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019bbc:	b003      	add	sp, #12
 8019bbe:	4770      	bx	lr

08019bc0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019bc0:	b40e      	push	{r1, r2, r3}
 8019bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bc4:	b098      	sub	sp, #96	; 0x60
 8019bc6:	4604      	mov	r4, r0
 8019bc8:	26ff      	movs	r6, #255	; 0xff
 8019bca:	ab1d      	add	r3, sp, #116	; 0x74
 8019bcc:	a802      	add	r0, sp, #8
 8019bce:	f853 5b04 	ldr.w	r5, [r3], #4
 8019bd2:	9300      	str	r3, [sp, #0]
 8019bd4:	f000 fd81 	bl	801a6da <_ZN8touchgfx12TextProviderC1Ev>
 8019bd8:	6823      	ldr	r3, [r4, #0]
 8019bda:	4620      	mov	r0, r4
 8019bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bde:	4798      	blx	r3
 8019be0:	4629      	mov	r1, r5
 8019be2:	4603      	mov	r3, r0
 8019be4:	9a00      	ldr	r2, [sp, #0]
 8019be6:	a802      	add	r0, sp, #8
 8019be8:	ad18      	add	r5, sp, #96	; 0x60
 8019bea:	f000 fdbb 	bl	801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019bee:	2100      	movs	r1, #0
 8019bf0:	4622      	mov	r2, r4
 8019bf2:	a802      	add	r0, sp, #8
 8019bf4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019bf8:	462b      	mov	r3, r5
 8019bfa:	f001 f8ad 	bl	801ad58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019bfe:	b1d8      	cbz	r0, 8019c38 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019c00:	280a      	cmp	r0, #10
 8019c02:	d012      	beq.n	8019c2a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019c04:	9801      	ldr	r0, [sp, #4]
 8019c06:	b180      	cbz	r0, 8019c2a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019c08:	7b47      	ldrb	r7, [r0, #13]
 8019c0a:	7922      	ldrb	r2, [r4, #4]
 8019c0c:	00fb      	lsls	r3, r7, #3
 8019c0e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019c12:	7a03      	ldrb	r3, [r0, #8]
 8019c14:	430b      	orrs	r3, r1
 8019c16:	0679      	lsls	r1, r7, #25
 8019c18:	bf44      	itt	mi
 8019c1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c1e:	b21b      	sxthmi	r3, r3
 8019c20:	1ad3      	subs	r3, r2, r3
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	429e      	cmp	r6, r3
 8019c26:	bf28      	it	cs
 8019c28:	461e      	movcs	r6, r3
 8019c2a:	462b      	mov	r3, r5
 8019c2c:	4622      	mov	r2, r4
 8019c2e:	2100      	movs	r1, #0
 8019c30:	a802      	add	r0, sp, #8
 8019c32:	f001 f891 	bl	801ad58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c36:	e7e2      	b.n	8019bfe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019c38:	4630      	mov	r0, r6
 8019c3a:	b018      	add	sp, #96	; 0x60
 8019c3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019c40:	b003      	add	sp, #12
 8019c42:	4770      	bx	lr

08019c44 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019c44:	b513      	push	{r0, r1, r4, lr}
 8019c46:	1d01      	adds	r1, r0, #4
 8019c48:	4603      	mov	r3, r0
 8019c4a:	466a      	mov	r2, sp
 8019c4c:	c903      	ldmia	r1, {r0, r1}
 8019c4e:	e882 0003 	stmia.w	r2, {r0, r1}
 8019c52:	2100      	movs	r1, #0
 8019c54:	4618      	mov	r0, r3
 8019c56:	9100      	str	r1, [sp, #0]
 8019c58:	6819      	ldr	r1, [r3, #0]
 8019c5a:	690c      	ldr	r4, [r1, #16]
 8019c5c:	4611      	mov	r1, r2
 8019c5e:	47a0      	blx	r4
 8019c60:	b002      	add	sp, #8
 8019c62:	bd10      	pop	{r4, pc}

08019c64 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019c64:	b538      	push	{r3, r4, r5, lr}
 8019c66:	680b      	ldr	r3, [r1, #0]
 8019c68:	460c      	mov	r4, r1
 8019c6a:	4605      	mov	r5, r0
 8019c6c:	68db      	ldr	r3, [r3, #12]
 8019c6e:	4798      	blx	r3
 8019c70:	6823      	ldr	r3, [r4, #0]
 8019c72:	4620      	mov	r0, r4
 8019c74:	4629      	mov	r1, r5
 8019c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c78:	4798      	blx	r3
 8019c7a:	4628      	mov	r0, r5
 8019c7c:	bd38      	pop	{r3, r4, r5, pc}

08019c7e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019c7e:	b410      	push	{r4}
 8019c80:	880a      	ldrh	r2, [r1, #0]
 8019c82:	8884      	ldrh	r4, [r0, #4]
 8019c84:	4422      	add	r2, r4
 8019c86:	800a      	strh	r2, [r1, #0]
 8019c88:	884a      	ldrh	r2, [r1, #2]
 8019c8a:	88c4      	ldrh	r4, [r0, #6]
 8019c8c:	4422      	add	r2, r4
 8019c8e:	804a      	strh	r2, [r1, #2]
 8019c90:	6940      	ldr	r0, [r0, #20]
 8019c92:	b120      	cbz	r0, 8019c9e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019c94:	6803      	ldr	r3, [r0, #0]
 8019c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c9c:	4718      	bx	r3
 8019c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ca2:	4770      	bx	lr

08019ca4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ca6:	460b      	mov	r3, r1
 8019ca8:	b085      	sub	sp, #20
 8019caa:	4604      	mov	r4, r0
 8019cac:	b901      	cbnz	r1, 8019cb0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019cae:	b1fa      	cbz	r2, 8019cf0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019cb0:	1d27      	adds	r7, r4, #4
 8019cb2:	466e      	mov	r6, sp
 8019cb4:	ad02      	add	r5, sp, #8
 8019cb6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019cba:	e886 0003 	stmia.w	r6, {r0, r1}
 8019cbe:	88e1      	ldrh	r1, [r4, #6]
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	440a      	add	r2, r1
 8019cc4:	88a1      	ldrh	r1, [r4, #4]
 8019cc6:	4419      	add	r1, r3
 8019cc8:	6823      	ldr	r3, [r4, #0]
 8019cca:	b212      	sxth	r2, r2
 8019ccc:	b209      	sxth	r1, r1
 8019cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cd0:	4798      	blx	r3
 8019cd2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019cd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8019cda:	6960      	ldr	r0, [r4, #20]
 8019cdc:	b150      	cbz	r0, 8019cf4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019cde:	6803      	ldr	r3, [r0, #0]
 8019ce0:	4631      	mov	r1, r6
 8019ce2:	691b      	ldr	r3, [r3, #16]
 8019ce4:	4798      	blx	r3
 8019ce6:	6960      	ldr	r0, [r4, #20]
 8019ce8:	6803      	ldr	r3, [r0, #0]
 8019cea:	691b      	ldr	r3, [r3, #16]
 8019cec:	4629      	mov	r1, r5
 8019cee:	4798      	blx	r3
 8019cf0:	b005      	add	sp, #20
 8019cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cf4:	f7ff fb84 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8019cf8:	6803      	ldr	r3, [r0, #0]
 8019cfa:	4631      	mov	r1, r6
 8019cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cfe:	4798      	blx	r3
 8019d00:	f7ff fb7e 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8019d04:	6803      	ldr	r3, [r0, #0]
 8019d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d08:	e7f0      	b.n	8019cec <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019d0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019d0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d0c:	8882      	ldrh	r2, [r0, #4]
 8019d0e:	4605      	mov	r5, r0
 8019d10:	880b      	ldrh	r3, [r1, #0]
 8019d12:	460c      	mov	r4, r1
 8019d14:	4413      	add	r3, r2
 8019d16:	800b      	strh	r3, [r1, #0]
 8019d18:	884b      	ldrh	r3, [r1, #2]
 8019d1a:	88c2      	ldrh	r2, [r0, #6]
 8019d1c:	4413      	add	r3, r2
 8019d1e:	4602      	mov	r2, r0
 8019d20:	804b      	strh	r3, [r1, #2]
 8019d22:	466b      	mov	r3, sp
 8019d24:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019d28:	6851      	ldr	r1, [r2, #4]
 8019d2a:	c303      	stmia	r3!, {r0, r1}
 8019d2c:	4621      	mov	r1, r4
 8019d2e:	4668      	mov	r0, sp
 8019d30:	f7fb fe78 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 8019d34:	466b      	mov	r3, sp
 8019d36:	cb03      	ldmia	r3!, {r0, r1}
 8019d38:	6020      	str	r0, [r4, #0]
 8019d3a:	6061      	str	r1, [r4, #4]
 8019d3c:	6968      	ldr	r0, [r5, #20]
 8019d3e:	b128      	cbz	r0, 8019d4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019d40:	6803      	ldr	r3, [r0, #0]
 8019d42:	691b      	ldr	r3, [r3, #16]
 8019d44:	4621      	mov	r1, r4
 8019d46:	4798      	blx	r3
 8019d48:	b003      	add	sp, #12
 8019d4a:	bd30      	pop	{r4, r5, pc}
 8019d4c:	f7ff fb58 	bl	8019400 <_ZN8touchgfx11Application11getInstanceEv>
 8019d50:	6803      	ldr	r3, [r0, #0]
 8019d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d54:	e7f6      	b.n	8019d44 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019d56 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019d56:	b570      	push	{r4, r5, r6, lr}
 8019d58:	8882      	ldrh	r2, [r0, #4]
 8019d5a:	460c      	mov	r4, r1
 8019d5c:	880b      	ldrh	r3, [r1, #0]
 8019d5e:	4605      	mov	r5, r0
 8019d60:	4413      	add	r3, r2
 8019d62:	800b      	strh	r3, [r1, #0]
 8019d64:	884b      	ldrh	r3, [r1, #2]
 8019d66:	88c2      	ldrh	r2, [r0, #6]
 8019d68:	4413      	add	r3, r2
 8019d6a:	804b      	strh	r3, [r1, #2]
 8019d6c:	1d01      	adds	r1, r0, #4
 8019d6e:	4620      	mov	r0, r4
 8019d70:	f7fb fe58 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 8019d74:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	dd0b      	ble.n	8019d94 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019d7c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	dd07      	ble.n	8019d94 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019d84:	6968      	ldr	r0, [r5, #20]
 8019d86:	b128      	cbz	r0, 8019d94 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019d88:	6803      	ldr	r3, [r0, #0]
 8019d8a:	4621      	mov	r1, r4
 8019d8c:	6a1b      	ldr	r3, [r3, #32]
 8019d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d92:	4718      	bx	r3
 8019d94:	bd70      	pop	{r4, r5, r6, pc}

08019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019d96:	b510      	push	{r4, lr}
 8019d98:	2300      	movs	r3, #0
 8019d9a:	4604      	mov	r4, r0
 8019d9c:	4608      	mov	r0, r1
 8019d9e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019da2:	8023      	strh	r3, [r4, #0]
 8019da4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019da8:	8063      	strh	r3, [r4, #2]
 8019daa:	6803      	ldr	r3, [r0, #0]
 8019dac:	80a1      	strh	r1, [r4, #4]
 8019dae:	4621      	mov	r1, r4
 8019db0:	80e2      	strh	r2, [r4, #6]
 8019db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019db4:	4798      	blx	r3
 8019db6:	4620      	mov	r0, r4
 8019db8:	bd10      	pop	{r4, pc}
	...

08019dbc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019dbc:	b530      	push	{r4, r5, lr}
 8019dbe:	8083      	strh	r3, [r0, #4]
 8019dc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019dc4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019dc8:	7183      	strb	r3, [r0, #6]
 8019dca:	79c3      	ldrb	r3, [r0, #7]
 8019dcc:	6101      	str	r1, [r0, #16]
 8019dce:	f365 0306 	bfi	r3, r5, #0, #7
 8019dd2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019dd6:	8282      	strh	r2, [r0, #20]
 8019dd8:	f365 13c7 	bfi	r3, r5, #7, #1
 8019ddc:	71c3      	strb	r3, [r0, #7]
 8019dde:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019de2:	7203      	strb	r3, [r0, #8]
 8019de4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019de8:	7243      	strb	r3, [r0, #9]
 8019dea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019dee:	8143      	strh	r3, [r0, #10]
 8019df0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019df4:	8183      	strh	r3, [r0, #12]
 8019df6:	4b01      	ldr	r3, [pc, #4]	; (8019dfc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019df8:	6003      	str	r3, [r0, #0]
 8019dfa:	bd30      	pop	{r4, r5, pc}
 8019dfc:	0802a404 	.word	0x0802a404

08019e00 <_ZNK8touchgfx9ConstFont4findEt>:
 8019e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e02:	6904      	ldr	r4, [r0, #16]
 8019e04:	8a82      	ldrh	r2, [r0, #20]
 8019e06:	88a3      	ldrh	r3, [r4, #4]
 8019e08:	3a01      	subs	r2, #1
 8019e0a:	1acb      	subs	r3, r1, r3
 8019e0c:	d431      	bmi.n	8019e72 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e0e:	4293      	cmp	r3, r2
 8019e10:	dd0c      	ble.n	8019e2c <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 8019e12:	230e      	movs	r3, #14
 8019e14:	fb03 4302 	mla	r3, r3, r2, r4
 8019e18:	889b      	ldrh	r3, [r3, #4]
 8019e1a:	1a5b      	subs	r3, r3, r1
 8019e1c:	1ad3      	subs	r3, r2, r3
 8019e1e:	429a      	cmp	r2, r3
 8019e20:	db27      	blt.n	8019e72 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	bfbc      	itt	lt
 8019e26:	2302      	movlt	r3, #2
 8019e28:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019e2c:	2500      	movs	r5, #0
 8019e2e:	260e      	movs	r6, #14
 8019e30:	4295      	cmp	r5, r2
 8019e32:	dc1e      	bgt.n	8019e72 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e34:	fb06 4003 	mla	r0, r6, r3, r4
 8019e38:	8887      	ldrh	r7, [r0, #4]
 8019e3a:	428f      	cmp	r7, r1
 8019e3c:	d01a      	beq.n	8019e74 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8019e3e:	d90d      	bls.n	8019e5c <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 8019e40:	1e5a      	subs	r2, r3, #1
 8019e42:	4295      	cmp	r5, r2
 8019e44:	dc15      	bgt.n	8019e72 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e46:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019e4a:	1a5b      	subs	r3, r3, r1
 8019e4c:	1ad3      	subs	r3, r2, r3
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	db0f      	blt.n	8019e72 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e52:	429d      	cmp	r5, r3
 8019e54:	ddec      	ble.n	8019e30 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e56:	1953      	adds	r3, r2, r5
 8019e58:	105b      	asrs	r3, r3, #1
 8019e5a:	e7e9      	b.n	8019e30 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e5c:	1c5d      	adds	r5, r3, #1
 8019e5e:	42aa      	cmp	r2, r5
 8019e60:	db07      	blt.n	8019e72 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e62:	8a43      	ldrh	r3, [r0, #18]
 8019e64:	1acb      	subs	r3, r1, r3
 8019e66:	442b      	add	r3, r5
 8019e68:	429d      	cmp	r5, r3
 8019e6a:	dc02      	bgt.n	8019e72 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019e6c:	429a      	cmp	r2, r3
 8019e6e:	dadf      	bge.n	8019e30 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e70:	e7f1      	b.n	8019e56 <_ZNK8touchgfx9ConstFont4findEt+0x56>
 8019e72:	2000      	movs	r0, #0
 8019e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e76 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e78:	4604      	mov	r4, r0
 8019e7a:	4617      	mov	r7, r2
 8019e7c:	461e      	mov	r6, r3
 8019e7e:	b911      	cbnz	r1, 8019e86 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019e80:	2500      	movs	r5, #0
 8019e82:	4628      	mov	r0, r5
 8019e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e86:	290a      	cmp	r1, #10
 8019e88:	d0fa      	beq.n	8019e80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e8a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019e8e:	4291      	cmp	r1, r2
 8019e90:	d0f6      	beq.n	8019e80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e92:	f242 020b 	movw	r2, #8203	; 0x200b
 8019e96:	4291      	cmp	r1, r2
 8019e98:	d0f2      	beq.n	8019e80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e9a:	f7ff ffb1 	bl	8019e00 <_ZNK8touchgfx9ConstFont4findEt>
 8019e9e:	4605      	mov	r5, r0
 8019ea0:	b950      	cbnz	r0, 8019eb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019ea2:	6823      	ldr	r3, [r4, #0]
 8019ea4:	4620      	mov	r0, r4
 8019ea6:	691b      	ldr	r3, [r3, #16]
 8019ea8:	4798      	blx	r3
 8019eaa:	4601      	mov	r1, r0
 8019eac:	4620      	mov	r0, r4
 8019eae:	f7ff ffa7 	bl	8019e00 <_ZNK8touchgfx9ConstFont4findEt>
 8019eb2:	4605      	mov	r5, r0
 8019eb4:	2800      	cmp	r0, #0
 8019eb6:	d0e3      	beq.n	8019e80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019eb8:	6823      	ldr	r3, [r4, #0]
 8019eba:	4629      	mov	r1, r5
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ec0:	4798      	blx	r3
 8019ec2:	6038      	str	r0, [r7, #0]
 8019ec4:	6823      	ldr	r3, [r4, #0]
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019eca:	4798      	blx	r3
 8019ecc:	7030      	strb	r0, [r6, #0]
 8019ece:	e7d8      	b.n	8019e82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019ed0 <_ZN8touchgfx6memsetEPvhm>:
 8019ed0:	4402      	add	r2, r0
 8019ed2:	4290      	cmp	r0, r2
 8019ed4:	d002      	beq.n	8019edc <_ZN8touchgfx6memsetEPvhm+0xc>
 8019ed6:	f800 1b01 	strb.w	r1, [r0], #1
 8019eda:	e7fa      	b.n	8019ed2 <_ZN8touchgfx6memsetEPvhm+0x2>
 8019edc:	4770      	bx	lr

08019ede <_ZN8touchgfx3clzEl>:
 8019ede:	b1e8      	cbz	r0, 8019f1c <_ZN8touchgfx3clzEl+0x3e>
 8019ee0:	2800      	cmp	r0, #0
 8019ee2:	bfb8      	it	lt
 8019ee4:	4240      	neglt	r0, r0
 8019ee6:	0c03      	lsrs	r3, r0, #16
 8019ee8:	041b      	lsls	r3, r3, #16
 8019eea:	b9ab      	cbnz	r3, 8019f18 <_ZN8touchgfx3clzEl+0x3a>
 8019eec:	0400      	lsls	r0, r0, #16
 8019eee:	2310      	movs	r3, #16
 8019ef0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019ef4:	bf04      	itt	eq
 8019ef6:	0200      	lsleq	r0, r0, #8
 8019ef8:	3308      	addeq	r3, #8
 8019efa:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019efe:	bf04      	itt	eq
 8019f00:	0100      	lsleq	r0, r0, #4
 8019f02:	3304      	addeq	r3, #4
 8019f04:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019f08:	bf04      	itt	eq
 8019f0a:	0080      	lsleq	r0, r0, #2
 8019f0c:	3302      	addeq	r3, #2
 8019f0e:	2800      	cmp	r0, #0
 8019f10:	bfa8      	it	ge
 8019f12:	3301      	addge	r3, #1
 8019f14:	1e58      	subs	r0, r3, #1
 8019f16:	4770      	bx	lr
 8019f18:	2300      	movs	r3, #0
 8019f1a:	e7e9      	b.n	8019ef0 <_ZN8touchgfx3clzEl+0x12>
 8019f1c:	201f      	movs	r0, #31
 8019f1e:	4770      	bx	lr

08019f20 <_ZN8touchgfx6muldivElllRl>:
 8019f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f24:	4604      	mov	r4, r0
 8019f26:	4698      	mov	r8, r3
 8019f28:	2601      	movs	r6, #1
 8019f2a:	f7ff ffd8 	bl	8019ede <_ZN8touchgfx3clzEl>
 8019f2e:	2c00      	cmp	r4, #0
 8019f30:	fa04 f500 	lsl.w	r5, r4, r0
 8019f34:	fa06 f600 	lsl.w	r6, r6, r0
 8019f38:	bfba      	itte	lt
 8019f3a:	f04f 37ff 	movlt.w	r7, #4294967295
 8019f3e:	4264      	neglt	r4, r4
 8019f40:	2701      	movge	r7, #1
 8019f42:	2900      	cmp	r1, #0
 8019f44:	f106 36ff 	add.w	r6, r6, #4294967295
 8019f48:	bfbc      	itt	lt
 8019f4a:	4249      	neglt	r1, r1
 8019f4c:	427f      	neglt	r7, r7
 8019f4e:	2a00      	cmp	r2, #0
 8019f50:	fa41 fc00 	asr.w	ip, r1, r0
 8019f54:	ea01 0106 	and.w	r1, r1, r6
 8019f58:	bfb8      	it	lt
 8019f5a:	427f      	neglt	r7, r7
 8019f5c:	fb04 f401 	mul.w	r4, r4, r1
 8019f60:	fb95 f3f2 	sdiv	r3, r5, r2
 8019f64:	fb02 5513 	mls	r5, r2, r3, r5
 8019f68:	bfb8      	it	lt
 8019f6a:	4252      	neglt	r2, r2
 8019f6c:	fb94 f0f2 	sdiv	r0, r4, r2
 8019f70:	fb02 4410 	mls	r4, r2, r0, r4
 8019f74:	fb0c 4405 	mla	r4, ip, r5, r4
 8019f78:	fb94 f1f2 	sdiv	r1, r4, r2
 8019f7c:	4408      	add	r0, r1
 8019f7e:	fb02 4211 	mls	r2, r2, r1, r4
 8019f82:	fb0c 0003 	mla	r0, ip, r3, r0
 8019f86:	f8c8 2000 	str.w	r2, [r8]
 8019f8a:	4378      	muls	r0, r7
 8019f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f90 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019f90:	2000      	movs	r0, #0
 8019f92:	4770      	bx	lr

08019f94 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019f94:	2001      	movs	r0, #1
 8019f96:	4770      	bx	lr

08019f98 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019f98:	2002      	movs	r0, #2
 8019f9a:	4770      	bx	lr

08019f9c <_ZN8touchgfx12GestureEventD1Ev>:
 8019f9c:	4770      	bx	lr

08019f9e <_ZN8touchgfx9DragEventD1Ev>:
 8019f9e:	4770      	bx	lr

08019fa0 <_ZN8touchgfx10ClickEventD1Ev>:
 8019fa0:	4770      	bx	lr

08019fa2 <_ZN8touchgfx10ClickEventD0Ev>:
 8019fa2:	b510      	push	{r4, lr}
 8019fa4:	4604      	mov	r4, r0
 8019fa6:	210c      	movs	r1, #12
 8019fa8:	f00b fb7e 	bl	80256a8 <_ZdlPvj>
 8019fac:	4620      	mov	r0, r4
 8019fae:	bd10      	pop	{r4, pc}

08019fb0 <_ZN8touchgfx9DragEventD0Ev>:
 8019fb0:	b510      	push	{r4, lr}
 8019fb2:	4604      	mov	r4, r0
 8019fb4:	2110      	movs	r1, #16
 8019fb6:	f00b fb77 	bl	80256a8 <_ZdlPvj>
 8019fba:	4620      	mov	r0, r4
 8019fbc:	bd10      	pop	{r4, pc}

08019fbe <_ZN8touchgfx12GestureEventD0Ev>:
 8019fbe:	b510      	push	{r4, lr}
 8019fc0:	4604      	mov	r4, r0
 8019fc2:	210c      	movs	r1, #12
 8019fc4:	f00b fb70 	bl	80256a8 <_ZdlPvj>
 8019fc8:	4620      	mov	r0, r4
 8019fca:	bd10      	pop	{r4, pc}

08019fcc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019fcc:	b530      	push	{r4, r5, lr}
 8019fce:	460d      	mov	r5, r1
 8019fd0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019fd2:	b087      	sub	sp, #28
 8019fd4:	4604      	mov	r4, r0
 8019fd6:	b301      	cbz	r1, 801a01a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019fd8:	a801      	add	r0, sp, #4
 8019fda:	f7ff fedc 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fde:	892a      	ldrh	r2, [r5, #8]
 8019fe0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019fe4:	7928      	ldrb	r0, [r5, #4]
 8019fe6:	1ad2      	subs	r2, r2, r3
 8019fe8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019fea:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019fee:	441a      	add	r2, r3
 8019ff0:	896b      	ldrh	r3, [r5, #10]
 8019ff2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019ff6:	f88d 0010 	strb.w	r0, [sp, #16]
 8019ffa:	1b5b      	subs	r3, r3, r5
 8019ffc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019ffe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a000:	442b      	add	r3, r5
 801a002:	4d07      	ldr	r5, [pc, #28]	; (801a020 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a004:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a008:	a903      	add	r1, sp, #12
 801a00a:	9503      	str	r5, [sp, #12]
 801a00c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a010:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a014:	6803      	ldr	r3, [r0, #0]
 801a016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a018:	4798      	blx	r3
 801a01a:	b007      	add	sp, #28
 801a01c:	bd30      	pop	{r4, r5, pc}
 801a01e:	bf00      	nop
 801a020:	0802a480 	.word	0x0802a480

0801a024 <_ZNK8touchgfx4Rect9intersectEss>:
 801a024:	b510      	push	{r4, lr}
 801a026:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a02a:	428b      	cmp	r3, r1
 801a02c:	dc10      	bgt.n	801a050 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a02e:	8884      	ldrh	r4, [r0, #4]
 801a030:	4423      	add	r3, r4
 801a032:	b21b      	sxth	r3, r3
 801a034:	4299      	cmp	r1, r3
 801a036:	da0b      	bge.n	801a050 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a038:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a03c:	4293      	cmp	r3, r2
 801a03e:	dc07      	bgt.n	801a050 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a040:	88c0      	ldrh	r0, [r0, #6]
 801a042:	4418      	add	r0, r3
 801a044:	b200      	sxth	r0, r0
 801a046:	4282      	cmp	r2, r0
 801a048:	bfac      	ite	ge
 801a04a:	2000      	movge	r0, #0
 801a04c:	2001      	movlt	r0, #1
 801a04e:	bd10      	pop	{r4, pc}
 801a050:	2000      	movs	r0, #0
 801a052:	e7fc      	b.n	801a04e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a054 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a054:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a056:	460c      	mov	r4, r1
 801a058:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a05a:	b089      	sub	sp, #36	; 0x24
 801a05c:	4605      	mov	r5, r0
 801a05e:	2900      	cmp	r1, #0
 801a060:	d054      	beq.n	801a10c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a062:	4668      	mov	r0, sp
 801a064:	f7ff fe97 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a068:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a06a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a06c:	4668      	mov	r0, sp
 801a06e:	8922      	ldrh	r2, [r4, #8]
 801a070:	88e1      	ldrh	r1, [r4, #6]
 801a072:	443a      	add	r2, r7
 801a074:	4431      	add	r1, r6
 801a076:	b212      	sxth	r2, r2
 801a078:	b209      	sxth	r1, r1
 801a07a:	f7ff ffd3 	bl	801a024 <_ZNK8touchgfx4Rect9intersectEss>
 801a07e:	b1d0      	cbz	r0, 801a0b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a080:	89a2      	ldrh	r2, [r4, #12]
 801a082:	4668      	mov	r0, sp
 801a084:	8961      	ldrh	r1, [r4, #10]
 801a086:	443a      	add	r2, r7
 801a088:	4431      	add	r1, r6
 801a08a:	b212      	sxth	r2, r2
 801a08c:	b209      	sxth	r1, r1
 801a08e:	f7ff ffc9 	bl	801a024 <_ZNK8touchgfx4Rect9intersectEss>
 801a092:	4603      	mov	r3, r0
 801a094:	b978      	cbnz	r0, 801a0b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a096:	4a1e      	ldr	r2, [pc, #120]	; (801a110 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a098:	a904      	add	r1, sp, #16
 801a09a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a09c:	9204      	str	r2, [sp, #16]
 801a09e:	2202      	movs	r2, #2
 801a0a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a0a4:	f88d 2014 	strb.w	r2, [sp, #20]
 801a0a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a0ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a0b0:	6803      	ldr	r3, [r0, #0]
 801a0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0b4:	4798      	blx	r3
 801a0b6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a0b8:	a802      	add	r0, sp, #8
 801a0ba:	f7ff fe6c 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a0c2:	88e0      	ldrh	r0, [r4, #6]
 801a0c4:	8961      	ldrh	r1, [r4, #10]
 801a0c6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a0ca:	1a80      	subs	r0, r0, r2
 801a0cc:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a0d0:	1a89      	subs	r1, r1, r2
 801a0d2:	8923      	ldrh	r3, [r4, #8]
 801a0d4:	4460      	add	r0, ip
 801a0d6:	89a2      	ldrh	r2, [r4, #12]
 801a0d8:	4461      	add	r1, ip
 801a0da:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a0dc:	eba3 030e 	sub.w	r3, r3, lr
 801a0e0:	eba2 020e 	sub.w	r2, r2, lr
 801a0e4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a0e8:	7927      	ldrb	r7, [r4, #4]
 801a0ea:	4433      	add	r3, r6
 801a0ec:	4432      	add	r2, r6
 801a0ee:	4c09      	ldr	r4, [pc, #36]	; (801a114 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a0f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a0f2:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a0f6:	a904      	add	r1, sp, #16
 801a0f8:	9404      	str	r4, [sp, #16]
 801a0fa:	f88d 7014 	strb.w	r7, [sp, #20]
 801a0fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a102:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a106:	6803      	ldr	r3, [r0, #0]
 801a108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a10a:	4798      	blx	r3
 801a10c:	b009      	add	sp, #36	; 0x24
 801a10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a110:	0802a458 	.word	0x0802a458
 801a114:	0802a46c 	.word	0x0802a46c

0801a118 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a11c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a120:	b0a1      	sub	sp, #132	; 0x84
 801a122:	4604      	mov	r4, r0
 801a124:	460d      	mov	r5, r1
 801a126:	790b      	ldrb	r3, [r1, #4]
 801a128:	f1b9 0f00 	cmp.w	r9, #0
 801a12c:	d00f      	beq.n	801a14e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a12e:	2b00      	cmp	r3, #0
 801a130:	f040 80a2 	bne.w	801a278 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a134:	b021      	add	sp, #132	; 0x84
 801a136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a13a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a13e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a142:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a146:	1d20      	adds	r0, r4, #4
 801a148:	f7fb fbba 	bl	80158c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a14c:	e094      	b.n	801a278 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d1f0      	bne.n	801a134 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a152:	4b5f      	ldr	r3, [pc, #380]	; (801a2d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a15a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a15e:	f1ba 0f03 	cmp.w	sl, #3
 801a162:	ddea      	ble.n	801a13a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a164:	f1ba 0f0c 	cmp.w	sl, #12
 801a168:	f04f 0303 	mov.w	r3, #3
 801a16c:	f04f 0600 	mov.w	r6, #0
 801a170:	4958      	ldr	r1, [pc, #352]	; (801a2d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a172:	bfd8      	it	le
 801a174:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a178:	960a      	str	r6, [sp, #40]	; 0x28
 801a17a:	bfd8      	it	le
 801a17c:	fb92 f3f3 	sdivle	r3, r2, r3
 801a180:	9301      	str	r3, [sp, #4]
 801a182:	4b55      	ldr	r3, [pc, #340]	; (801a2d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a184:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a188:	4b54      	ldr	r3, [pc, #336]	; (801a2dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a18a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a18e:	2248      	movs	r2, #72	; 0x48
 801a190:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a194:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a198:	ab0e      	add	r3, sp, #56	; 0x38
 801a19a:	4618      	mov	r0, r3
 801a19c:	f00b fb2e 	bl	80257fc <memcpy>
 801a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a1a4:	f8cd a008 	str.w	sl, [sp, #8]
 801a1a8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a1ac:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a1b0:	46b3      	mov	fp, r6
 801a1b2:	fb93 f3f2 	sdiv	r3, r3, r2
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	9303      	str	r3, [sp, #12]
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	9a03      	ldr	r2, [sp, #12]
 801a1be:	88ef      	ldrh	r7, [r5, #6]
 801a1c0:	a80a      	add	r0, sp, #40	; 0x28
 801a1c2:	9309      	str	r3, [sp, #36]	; 0x24
 801a1c4:	9b07      	ldr	r3, [sp, #28]
 801a1c6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a1ca:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a1ce:	fb13 f302 	smulbb	r3, r3, r2
 801a1d2:	b29b      	uxth	r3, r3
 801a1d4:	9304      	str	r3, [sp, #16]
 801a1d6:	9b07      	ldr	r3, [sp, #28]
 801a1d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a1dc:	685b      	ldr	r3, [r3, #4]
 801a1de:	fb13 f302 	smulbb	r3, r3, r2
 801a1e2:	b29b      	uxth	r3, r3
 801a1e4:	9305      	str	r3, [sp, #20]
 801a1e6:	9b04      	ldr	r3, [sp, #16]
 801a1e8:	441f      	add	r7, r3
 801a1ea:	9b05      	ldr	r3, [sp, #20]
 801a1ec:	4498      	add	r8, r3
 801a1ee:	b23f      	sxth	r7, r7
 801a1f0:	fa0f f888 	sxth.w	r8, r8
 801a1f4:	4639      	mov	r1, r7
 801a1f6:	4642      	mov	r2, r8
 801a1f8:	f7ff ff14 	bl	801a024 <_ZNK8touchgfx4Rect9intersectEss>
 801a1fc:	b380      	cbz	r0, 801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a1fe:	4639      	mov	r1, r7
 801a200:	ab09      	add	r3, sp, #36	; 0x24
 801a202:	4642      	mov	r2, r8
 801a204:	1d20      	adds	r0, r4, #4
 801a206:	f7fb fb5b 	bl	80158c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a20a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a20c:	b341      	cbz	r1, 801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a20e:	4549      	cmp	r1, r9
 801a210:	d026      	beq.n	801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a212:	a80c      	add	r0, sp, #48	; 0x30
 801a214:	f7ff fdbf 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a218:	2002      	movs	r0, #2
 801a21a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a21e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a222:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a226:	fb92 f2f0 	sdiv	r2, r2, r0
 801a22a:	440a      	add	r2, r1
 801a22c:	1a99      	subs	r1, r3, r2
 801a22e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a232:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a236:	fb93 f3f0 	sdiv	r3, r3, r0
 801a23a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a23e:	4403      	add	r3, r0
 801a240:	1ad3      	subs	r3, r2, r3
 801a242:	9a06      	ldr	r2, [sp, #24]
 801a244:	435b      	muls	r3, r3
 801a246:	fb01 3301 	mla	r3, r1, r1, r3
 801a24a:	4293      	cmp	r3, r2
 801a24c:	d208      	bcs.n	801a260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a24e:	9a04      	ldr	r2, [sp, #16]
 801a250:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a254:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a256:	9a05      	ldr	r2, [sp, #20]
 801a258:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a25c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a25e:	9306      	str	r3, [sp, #24]
 801a260:	f10b 0b02 	add.w	fp, fp, #2
 801a264:	f1bb 0f08 	cmp.w	fp, #8
 801a268:	dda7      	ble.n	801a1ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a26a:	9b02      	ldr	r3, [sp, #8]
 801a26c:	3601      	adds	r6, #1
 801a26e:	4453      	add	r3, sl
 801a270:	9302      	str	r3, [sp, #8]
 801a272:	9b01      	ldr	r3, [sp, #4]
 801a274:	42b3      	cmp	r3, r6
 801a276:	d199      	bne.n	801a1ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a278:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a27a:	2900      	cmp	r1, #0
 801a27c:	f43f af5a 	beq.w	801a134 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a280:	a80c      	add	r0, sp, #48	; 0x30
 801a282:	2600      	movs	r6, #0
 801a284:	f7ff fd87 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a288:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a28c:	88ea      	ldrh	r2, [r5, #6]
 801a28e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a292:	1ad2      	subs	r2, r2, r3
 801a294:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a296:	7929      	ldrb	r1, [r5, #4]
 801a298:	441a      	add	r2, r3
 801a29a:	892b      	ldrh	r3, [r5, #8]
 801a29c:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a2a0:	a90e      	add	r1, sp, #56	; 0x38
 801a2a2:	1a1b      	subs	r3, r3, r0
 801a2a4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a2a6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a2aa:	4403      	add	r3, r0
 801a2ac:	480c      	ldr	r0, [pc, #48]	; (801a2e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a2ae:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a2b2:	900e      	str	r0, [sp, #56]	; 0x38
 801a2b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a2b6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a2ba:	6803      	ldr	r3, [r0, #0]
 801a2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2be:	4798      	blx	r3
 801a2c0:	792b      	ldrb	r3, [r5, #4]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	f43f af36 	beq.w	801a134 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a2c8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a2cc:	e732      	b.n	801a134 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a2ce:	bf00      	nop
 801a2d0:	2000b36c 	.word	0x2000b36c
 801a2d4:	08027234 	.word	0x08027234
 801a2d8:	2000b360 	.word	0x2000b360
 801a2dc:	2000b362 	.word	0x2000b362
 801a2e0:	0802a458 	.word	0x0802a458

0801a2e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a2ec:	3201      	adds	r2, #1
 801a2ee:	d112      	bne.n	801a316 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a2f0:	2500      	movs	r5, #0
 801a2f2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a2f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a2fa:	6803      	ldr	r3, [r0, #0]
 801a2fc:	9500      	str	r5, [sp, #0]
 801a2fe:	466d      	mov	r5, sp
 801a300:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a304:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a308:	4629      	mov	r1, r5
 801a30a:	6a1b      	ldr	r3, [r3, #32]
 801a30c:	4798      	blx	r3
 801a30e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a312:	e884 0003 	stmia.w	r4, {r0, r1}
 801a316:	4620      	mov	r0, r4
 801a318:	b003      	add	sp, #12
 801a31a:	bd30      	pop	{r4, r5, pc}

0801a31c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a31c:	b513      	push	{r0, r1, r4, lr}
 801a31e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a322:	4604      	mov	r4, r0
 801a324:	3301      	adds	r3, #1
 801a326:	d109      	bne.n	801a33c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a328:	4601      	mov	r1, r0
 801a32a:	4668      	mov	r0, sp
 801a32c:	f7ff fd33 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a330:	f8bd 3000 	ldrh.w	r3, [sp]
 801a334:	8423      	strh	r3, [r4, #32]
 801a336:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a33a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a33c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a340:	b002      	add	sp, #8
 801a342:	bd10      	pop	{r4, pc}

0801a344 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a344:	b513      	push	{r0, r1, r4, lr}
 801a346:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a34a:	4604      	mov	r4, r0
 801a34c:	3301      	adds	r3, #1
 801a34e:	d109      	bne.n	801a364 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a350:	4601      	mov	r1, r0
 801a352:	4668      	mov	r0, sp
 801a354:	f7ff fd1f 	bl	8019d96 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a358:	f8bd 3000 	ldrh.w	r3, [sp]
 801a35c:	8423      	strh	r3, [r4, #32]
 801a35e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a362:	8463      	strh	r3, [r4, #34]	; 0x22
 801a364:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a368:	b002      	add	sp, #8
 801a36a:	bd10      	pop	{r4, pc}

0801a36c <_ZN8touchgfx6ScreenC1Ev>:
 801a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a36e:	4605      	mov	r5, r0
 801a370:	4b17      	ldr	r3, [pc, #92]	; (801a3d0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a372:	2200      	movs	r2, #0
 801a374:	4917      	ldr	r1, [pc, #92]	; (801a3d4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a376:	f845 3b04 	str.w	r3, [r5], #4
 801a37a:	2301      	movs	r3, #1
 801a37c:	8102      	strh	r2, [r0, #8]
 801a37e:	4604      	mov	r4, r0
 801a380:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a384:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a388:	4b13      	ldr	r3, [pc, #76]	; (801a3d8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a38a:	8142      	strh	r2, [r0, #10]
 801a38c:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a390:	4b12      	ldr	r3, [pc, #72]	; (801a3dc <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a392:	8182      	strh	r2, [r0, #12]
 801a394:	81c2      	strh	r2, [r0, #14]
 801a396:	8202      	strh	r2, [r0, #16]
 801a398:	8242      	strh	r2, [r0, #18]
 801a39a:	8282      	strh	r2, [r0, #20]
 801a39c:	82c2      	strh	r2, [r0, #22]
 801a39e:	6202      	str	r2, [r0, #32]
 801a3a0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a3a4:	6342      	str	r2, [r0, #52]	; 0x34
 801a3a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a3aa:	6041      	str	r1, [r0, #4]
 801a3ac:	4611      	mov	r1, r2
 801a3ae:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a3b2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f7f2 f8dd 	bl	800c576 <_ZN8touchgfx8Drawable5setXYEss>
 801a3bc:	4639      	mov	r1, r7
 801a3be:	4628      	mov	r0, r5
 801a3c0:	f7f2 f8f7 	bl	800c5b2 <_ZN8touchgfx8Drawable8setWidthEs>
 801a3c4:	4628      	mov	r0, r5
 801a3c6:	4631      	mov	r1, r6
 801a3c8:	f7f2 f902 	bl	800c5d0 <_ZN8touchgfx8Drawable9setHeightEs>
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3d0:	0802a494 	.word	0x0802a494
 801a3d4:	08028fdc 	.word	0x08028fdc
 801a3d8:	2000b360 	.word	0x2000b360
 801a3dc:	2000b362 	.word	0x2000b362

0801a3e0 <_ZN8touchgfx6Screen4drawEv>:
 801a3e0:	4b09      	ldr	r3, [pc, #36]	; (801a408 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a3e2:	b507      	push	{r0, r1, r2, lr}
 801a3e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3e8:	2100      	movs	r1, #0
 801a3ea:	4b08      	ldr	r3, [pc, #32]	; (801a40c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a3ec:	9100      	str	r1, [sp, #0]
 801a3ee:	4669      	mov	r1, sp
 801a3f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3f4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a3f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3fc:	6803      	ldr	r3, [r0, #0]
 801a3fe:	689b      	ldr	r3, [r3, #8]
 801a400:	4798      	blx	r3
 801a402:	b003      	add	sp, #12
 801a404:	f85d fb04 	ldr.w	pc, [sp], #4
 801a408:	2000b360 	.word	0x2000b360
 801a40c:	2000b362 	.word	0x2000b362

0801a410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a414:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a418:	b089      	sub	sp, #36	; 0x24
 801a41a:	4680      	mov	r8, r0
 801a41c:	460c      	mov	r4, r1
 801a41e:	2b00      	cmp	r3, #0
 801a420:	4615      	mov	r5, r2
 801a422:	dd0e      	ble.n	801a442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a424:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	dd0a      	ble.n	801a442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a42c:	4628      	mov	r0, r5
 801a42e:	f7ff ff59 	bl	801a2e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a432:	4621      	mov	r1, r4
 801a434:	f7fe ff5a 	bl	80192ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a438:	69eb      	ldr	r3, [r5, #28]
 801a43a:	b928      	cbnz	r0, 801a448 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a43c:	461d      	mov	r5, r3
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d1f4      	bne.n	801a42c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a442:	b009      	add	sp, #36	; 0x24
 801a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a448:	ae04      	add	r6, sp, #16
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d051      	beq.n	801a4f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a44e:	682b      	ldr	r3, [r5, #0]
 801a450:	4629      	mov	r1, r5
 801a452:	a802      	add	r0, sp, #8
 801a454:	68db      	ldr	r3, [r3, #12]
 801a456:	4798      	blx	r3
 801a458:	4628      	mov	r0, r5
 801a45a:	f7ff ff5f 	bl	801a31c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a45e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a462:	4407      	add	r7, r0
 801a464:	4628      	mov	r0, r5
 801a466:	f7ff ff6d 	bl	801a344 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a46a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a46e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a472:	b23f      	sxth	r7, r7
 801a474:	4418      	add	r0, r3
 801a476:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a47a:	4621      	mov	r1, r4
 801a47c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a480:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a484:	4630      	mov	r0, r6
 801a486:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a48a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a48e:	f7fb fac9 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 801a492:	4628      	mov	r0, r5
 801a494:	f7ff ff26 	bl	801a2e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a498:	ab06      	add	r3, sp, #24
 801a49a:	4602      	mov	r2, r0
 801a49c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a4a0:	e883 0003 	stmia.w	r3, {r0, r1}
 801a4a4:	4611      	mov	r1, r2
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f7fb fabc 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 801a4ac:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a4b0:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a4b4:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a4b8:	4299      	cmp	r1, r3
 801a4ba:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a4be:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a4c2:	d10b      	bne.n	801a4dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a4c4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a4c8:	4552      	cmp	r2, sl
 801a4ca:	d107      	bne.n	801a4dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a4cc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a4d0:	455a      	cmp	r2, fp
 801a4d2:	d103      	bne.n	801a4dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a4d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a4d8:	454a      	cmp	r2, r9
 801a4da:	d00a      	beq.n	801a4f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a4dc:	f1bb 0f00 	cmp.w	fp, #0
 801a4e0:	d002      	beq.n	801a4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801a4e2:	f1b9 0f00 	cmp.w	r9, #0
 801a4e6:	d12e      	bne.n	801a546 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801a4e8:	69ea      	ldr	r2, [r5, #28]
 801a4ea:	4621      	mov	r1, r4
 801a4ec:	4640      	mov	r0, r8
 801a4ee:	f7ff ff8f 	bl	801a410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4f2:	4628      	mov	r0, r5
 801a4f4:	f7ff fef6 	bl	801a2e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a4f8:	6861      	ldr	r1, [r4, #4]
 801a4fa:	4602      	mov	r2, r0
 801a4fc:	4633      	mov	r3, r6
 801a4fe:	6820      	ldr	r0, [r4, #0]
 801a500:	c303      	stmia	r3!, {r0, r1}
 801a502:	4611      	mov	r1, r2
 801a504:	4630      	mov	r0, r6
 801a506:	f7fb fa8d 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 801a50a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	dd97      	ble.n	801a442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a512:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a516:	2b00      	cmp	r3, #0
 801a518:	dd93      	ble.n	801a442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a51a:	4628      	mov	r0, r5
 801a51c:	f7ff fefe 	bl	801a31c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a520:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a524:	1a18      	subs	r0, r3, r0
 801a526:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a52a:	4628      	mov	r0, r5
 801a52c:	f7ff ff0a 	bl	801a344 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a530:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a534:	4631      	mov	r1, r6
 801a536:	1a18      	subs	r0, r3, r0
 801a538:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a53c:	4628      	mov	r0, r5
 801a53e:	682b      	ldr	r3, [r5, #0]
 801a540:	689b      	ldr	r3, [r3, #8]
 801a542:	4798      	blx	r3
 801a544:	e77d      	b.n	801a442 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a546:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a54a:	fa1f f08a 	uxth.w	r0, sl
 801a54e:	4552      	cmp	r2, sl
 801a550:	9000      	str	r0, [sp, #0]
 801a552:	da12      	bge.n	801a57a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801a554:	9301      	str	r3, [sp, #4]
 801a556:	9b00      	ldr	r3, [sp, #0]
 801a558:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a55c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a560:	1a9a      	subs	r2, r3, r2
 801a562:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a566:	4631      	mov	r1, r6
 801a568:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a56c:	4640      	mov	r0, r8
 801a56e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a572:	69ea      	ldr	r2, [r5, #28]
 801a574:	f7ff ff4c 	bl	801a410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a578:	9b01      	ldr	r3, [sp, #4]
 801a57a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a57e:	b29f      	uxth	r7, r3
 801a580:	429a      	cmp	r2, r3
 801a582:	da0d      	bge.n	801a5a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801a584:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a588:	1aba      	subs	r2, r7, r2
 801a58a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a58e:	4631      	mov	r1, r6
 801a590:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a594:	4640      	mov	r0, r8
 801a596:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a59a:	69ea      	ldr	r2, [r5, #28]
 801a59c:	f7ff ff38 	bl	801a410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a5a0:	8822      	ldrh	r2, [r4, #0]
 801a5a2:	445f      	add	r7, fp
 801a5a4:	88a3      	ldrh	r3, [r4, #4]
 801a5a6:	b2bf      	uxth	r7, r7
 801a5a8:	4413      	add	r3, r2
 801a5aa:	b23a      	sxth	r2, r7
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	b219      	sxth	r1, r3
 801a5b0:	4291      	cmp	r1, r2
 801a5b2:	dd0d      	ble.n	801a5d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801a5b4:	1bdb      	subs	r3, r3, r7
 801a5b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a5ba:	f8ad a012 	strh.w	sl, [sp, #18]
 801a5be:	4631      	mov	r1, r6
 801a5c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a5c4:	4640      	mov	r0, r8
 801a5c6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a5ca:	69ea      	ldr	r2, [r5, #28]
 801a5cc:	f7ff ff20 	bl	801a410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a5d0:	88e2      	ldrh	r2, [r4, #6]
 801a5d2:	8863      	ldrh	r3, [r4, #2]
 801a5d4:	4413      	add	r3, r2
 801a5d6:	9a00      	ldr	r2, [sp, #0]
 801a5d8:	444a      	add	r2, r9
 801a5da:	b29b      	uxth	r3, r3
 801a5dc:	fa1f f982 	uxth.w	r9, r2
 801a5e0:	b219      	sxth	r1, r3
 801a5e2:	fa0f f289 	sxth.w	r2, r9
 801a5e6:	428a      	cmp	r2, r1
 801a5e8:	da83      	bge.n	801a4f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a5ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a5ee:	eba3 0309 	sub.w	r3, r3, r9
 801a5f2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a5f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a5fa:	4631      	mov	r1, r6
 801a5fc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a600:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a604:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a608:	69ea      	ldr	r2, [r5, #28]
 801a60a:	e76f      	b.n	801a4ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801a60c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a60e:	2300      	movs	r3, #0
 801a610:	aa02      	add	r2, sp, #8
 801a612:	4604      	mov	r4, r0
 801a614:	3004      	adds	r0, #4
 801a616:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a61a:	460d      	mov	r5, r1
 801a61c:	f7fb fada 	bl	8015bd4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a620:	9a01      	ldr	r2, [sp, #4]
 801a622:	b11a      	cbz	r2, 801a62c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a624:	4629      	mov	r1, r5
 801a626:	4620      	mov	r0, r4
 801a628:	f7ff fef2 	bl	801a410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a62c:	b003      	add	sp, #12
 801a62e:	bd30      	pop	{r4, r5, pc}

0801a630 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a632:	4602      	mov	r2, r0
 801a634:	4604      	mov	r4, r0
 801a636:	460d      	mov	r5, r1
 801a638:	466b      	mov	r3, sp
 801a63a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a63e:	6851      	ldr	r1, [r2, #4]
 801a640:	c303      	stmia	r3!, {r0, r1}
 801a642:	4629      	mov	r1, r5
 801a644:	4668      	mov	r0, sp
 801a646:	f7fb f9ed 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 801a64a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a64e:	4669      	mov	r1, sp
 801a650:	b123      	cbz	r3, 801a65c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a652:	4620      	mov	r0, r4
 801a654:	f7ff ffda 	bl	801a60c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a658:	b003      	add	sp, #12
 801a65a:	bd30      	pop	{r4, r5, pc}
 801a65c:	1d20      	adds	r0, r4, #4
 801a65e:	f7fb fa80 	bl	8015b62 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a662:	e7f9      	b.n	801a658 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a664 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a664:	460b      	mov	r3, r1
 801a666:	680a      	ldr	r2, [r1, #0]
 801a668:	1d01      	adds	r1, r0, #4
 801a66a:	6952      	ldr	r2, [r2, #20]
 801a66c:	4618      	mov	r0, r3
 801a66e:	4710      	bx	r2

0801a670 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a670:	b510      	push	{r4, lr}
 801a672:	4298      	cmp	r0, r3
 801a674:	eb01 0402 	add.w	r4, r1, r2
 801a678:	b224      	sxth	r4, r4
 801a67a:	d22c      	bcs.n	801a6d6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a67c:	b35b      	cbz	r3, 801a6d6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a67e:	ee07 0a90 	vmov	s15, r0
 801a682:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801a686:	ee07 3a90 	vmov	s15, r3
 801a68a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a68e:	ee07 2a90 	vmov	s15, r2
 801a692:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801a696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a69a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a69e:	ee07 1a90 	vmov	s15, r1
 801a6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6a6:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a6aa:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a6ae:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a6b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a6b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a6ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c2:	bfcc      	ite	gt
 801a6c4:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a6c8:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a6cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a6d0:	ee17 3a90 	vmov	r3, s15
 801a6d4:	b21c      	sxth	r4, r3
 801a6d6:	4620      	mov	r0, r4
 801a6d8:	bd10      	pop	{r4, pc}

0801a6da <_ZN8touchgfx12TextProviderC1Ev>:
 801a6da:	2300      	movs	r3, #0
 801a6dc:	2201      	movs	r2, #1
 801a6de:	b510      	push	{r4, lr}
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	60c3      	str	r3, [r0, #12]
 801a6e4:	7403      	strb	r3, [r0, #16]
 801a6e6:	82c3      	strh	r3, [r0, #22]
 801a6e8:	8303      	strh	r3, [r0, #24]
 801a6ea:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a6ec:	8603      	strh	r3, [r0, #48]	; 0x30
 801a6ee:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a6f0:	8703      	strh	r3, [r0, #56]	; 0x38
 801a6f2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a6f4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a6f8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a6fc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a700:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a704:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a708:	e9c0 3300 	strd	r3, r3, [r0]
 801a70c:	f7f8 f852 	bl	80127b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a710:	4620      	mov	r0, r4
 801a712:	bd10      	pop	{r4, pc}

0801a714 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a714:	b530      	push	{r4, r5, lr}
 801a716:	2500      	movs	r5, #0
 801a718:	2401      	movs	r4, #1
 801a71a:	6843      	ldr	r3, [r0, #4]
 801a71c:	b913      	cbnz	r3, 801a724 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a71e:	6803      	ldr	r3, [r0, #0]
 801a720:	b1f3      	cbz	r3, 801a760 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a722:	6043      	str	r3, [r0, #4]
 801a724:	7c03      	ldrb	r3, [r0, #16]
 801a726:	b143      	cbz	r3, 801a73a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a728:	68c3      	ldr	r3, [r0, #12]
 801a72a:	b12b      	cbz	r3, 801a738 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a72c:	881a      	ldrh	r2, [r3, #0]
 801a72e:	b11a      	cbz	r2, 801a738 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a730:	1c9a      	adds	r2, r3, #2
 801a732:	60c2      	str	r2, [r0, #12]
 801a734:	8818      	ldrh	r0, [r3, #0]
 801a736:	bd30      	pop	{r4, r5, pc}
 801a738:	7405      	strb	r5, [r0, #16]
 801a73a:	6843      	ldr	r3, [r0, #4]
 801a73c:	8819      	ldrh	r1, [r3, #0]
 801a73e:	b179      	cbz	r1, 801a760 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a740:	1c9a      	adds	r2, r3, #2
 801a742:	2902      	cmp	r1, #2
 801a744:	6042      	str	r2, [r0, #4]
 801a746:	d1f5      	bne.n	801a734 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a748:	6883      	ldr	r3, [r0, #8]
 801a74a:	1d1a      	adds	r2, r3, #4
 801a74c:	6082      	str	r2, [r0, #8]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	60c3      	str	r3, [r0, #12]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d0e1      	beq.n	801a71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a756:	881b      	ldrh	r3, [r3, #0]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d0de      	beq.n	801a71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a75c:	7404      	strb	r4, [r0, #16]
 801a75e:	e7dc      	b.n	801a71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a760:	2000      	movs	r0, #0
 801a762:	e7e8      	b.n	801a736 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a764 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a764:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a766:	2300      	movs	r3, #0
 801a768:	6082      	str	r2, [r0, #8]
 801a76a:	6001      	str	r1, [r0, #0]
 801a76c:	6043      	str	r3, [r0, #4]
 801a76e:	60c3      	str	r3, [r0, #12]
 801a770:	7403      	strb	r3, [r0, #16]
 801a772:	8603      	strh	r3, [r0, #48]	; 0x30
 801a774:	8303      	strh	r3, [r0, #24]
 801a776:	8703      	strh	r3, [r0, #56]	; 0x38
 801a778:	b410      	push	{r4}
 801a77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a77e:	f7f8 b819 	b.w	80127b4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a782 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a782:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a784:	4605      	mov	r5, r0
 801a786:	4608      	mov	r0, r1
 801a788:	b1f1      	cbz	r1, 801a7c8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a78a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a78e:	460b      	mov	r3, r1
 801a790:	f101 0708 	add.w	r7, r1, #8
 801a794:	4622      	mov	r2, r4
 801a796:	6818      	ldr	r0, [r3, #0]
 801a798:	3308      	adds	r3, #8
 801a79a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a79e:	4626      	mov	r6, r4
 801a7a0:	42bb      	cmp	r3, r7
 801a7a2:	c603      	stmia	r6!, {r0, r1}
 801a7a4:	4634      	mov	r4, r6
 801a7a6:	d1f6      	bne.n	801a796 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a7a8:	6818      	ldr	r0, [r3, #0]
 801a7aa:	6030      	str	r0, [r6, #0]
 801a7ac:	4610      	mov	r0, r2
 801a7ae:	889b      	ldrh	r3, [r3, #4]
 801a7b0:	80b3      	strh	r3, [r6, #4]
 801a7b2:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a7b6:	015b      	lsls	r3, r3, #5
 801a7b8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a7bc:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a7c0:	430b      	orrs	r3, r1
 801a7c2:	425b      	negs	r3, r3
 801a7c4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a7ca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a7ca:	b538      	push	{r3, r4, r5, lr}
 801a7cc:	460c      	mov	r4, r1
 801a7ce:	6811      	ldr	r1, [r2, #0]
 801a7d0:	4610      	mov	r0, r2
 801a7d2:	68cd      	ldr	r5, [r1, #12]
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	47a8      	blx	r5
 801a7d8:	2800      	cmp	r0, #0
 801a7da:	bf08      	it	eq
 801a7dc:	4620      	moveq	r0, r4
 801a7de:	bd38      	pop	{r3, r4, r5, pc}

0801a7e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7e2:	4604      	mov	r4, r0
 801a7e4:	4615      	mov	r5, r2
 801a7e6:	4608      	mov	r0, r1
 801a7e8:	b93a      	cbnz	r2, 801a7fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a7ea:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a7ee:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a7f2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a7f6:	4628      	mov	r0, r5
 801a7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7fa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a7fe:	8893      	ldrh	r3, [r2, #4]
 801a800:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a804:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a808:	79ee      	ldrb	r6, [r5, #7]
 801a80a:	4316      	orrs	r6, r2
 801a80c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a810:	189a      	adds	r2, r3, r2
 801a812:	b2b7      	uxth	r7, r6
 801a814:	b291      	uxth	r1, r2
 801a816:	291d      	cmp	r1, #29
 801a818:	f200 8084 	bhi.w	801a924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a81c:	2201      	movs	r2, #1
 801a81e:	10f6      	asrs	r6, r6, #3
 801a820:	408a      	lsls	r2, r1
 801a822:	4978      	ldr	r1, [pc, #480]	; (801aa04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a824:	420a      	tst	r2, r1
 801a826:	d12e      	bne.n	801a886 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a828:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a82c:	d07a      	beq.n	801a924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a82e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801a832:	462b      	mov	r3, r5
 801a834:	f105 0e08 	add.w	lr, r5, #8
 801a838:	4615      	mov	r5, r2
 801a83a:	6818      	ldr	r0, [r3, #0]
 801a83c:	3308      	adds	r3, #8
 801a83e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a842:	4694      	mov	ip, r2
 801a844:	4573      	cmp	r3, lr
 801a846:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a84a:	4662      	mov	r2, ip
 801a84c:	d1f5      	bne.n	801a83a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a84e:	6818      	ldr	r0, [r3, #0]
 801a850:	f8cc 0000 	str.w	r0, [ip]
 801a854:	889b      	ldrh	r3, [r3, #4]
 801a856:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a85a:	b2b3      	uxth	r3, r6
 801a85c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a860:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801a864:	1aca      	subs	r2, r1, r3
 801a866:	1bcf      	subs	r7, r1, r7
 801a868:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a86c:	b292      	uxth	r2, r2
 801a86e:	1afb      	subs	r3, r7, r3
 801a870:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801a874:	10d2      	asrs	r2, r2, #3
 801a876:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a87a:	4302      	orrs	r2, r0
 801a87c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801a880:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801a884:	e7b7      	b.n	801a7f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a886:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a888:	b92b      	cbnz	r3, 801a896 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a88a:	4b5f      	ldr	r3, [pc, #380]	; (801aa08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a88c:	21c0      	movs	r1, #192	; 0xc0
 801a88e:	4a5f      	ldr	r2, [pc, #380]	; (801aa0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a890:	485f      	ldr	r0, [pc, #380]	; (801aa10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a892:	f00a ff35 	bl	8025700 <__assert_func>
 801a896:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a898:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a89c:	8b59      	ldrh	r1, [r3, #26]
 801a89e:	f640 6333 	movw	r3, #3635	; 0xe33
 801a8a2:	4299      	cmp	r1, r3
 801a8a4:	d110      	bne.n	801a8c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a8a6:	6803      	ldr	r3, [r0, #0]
 801a8a8:	68db      	ldr	r3, [r3, #12]
 801a8aa:	4798      	blx	r3
 801a8ac:	7b41      	ldrb	r1, [r0, #13]
 801a8ae:	00cb      	lsls	r3, r1, #3
 801a8b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a8b4:	7a03      	ldrb	r3, [r0, #8]
 801a8b6:	0648      	lsls	r0, r1, #25
 801a8b8:	ea43 0302 	orr.w	r3, r3, r2
 801a8bc:	bf44      	itt	mi
 801a8be:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a8c2:	b21b      	sxthmi	r3, r3
 801a8c4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a8c8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801a8cc:	462a      	mov	r2, r5
 801a8ce:	f105 0c08 	add.w	ip, r5, #8
 801a8d2:	443b      	add	r3, r7
 801a8d4:	4433      	add	r3, r6
 801a8d6:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801a8da:	b29b      	uxth	r3, r3
 801a8dc:	4635      	mov	r5, r6
 801a8de:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a8e2:	6810      	ldr	r0, [r2, #0]
 801a8e4:	3208      	adds	r2, #8
 801a8e6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a8ea:	4637      	mov	r7, r6
 801a8ec:	4562      	cmp	r2, ip
 801a8ee:	c703      	stmia	r7!, {r0, r1}
 801a8f0:	463e      	mov	r6, r7
 801a8f2:	d1f6      	bne.n	801a8e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a8f4:	6810      	ldr	r0, [r2, #0]
 801a8f6:	6038      	str	r0, [r7, #0]
 801a8f8:	8892      	ldrh	r2, [r2, #4]
 801a8fa:	80ba      	strh	r2, [r7, #4]
 801a8fc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801a900:	10db      	asrs	r3, r3, #3
 801a902:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801a906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a90a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a90e:	4313      	orrs	r3, r2
 801a910:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a914:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801a918:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a91c:	1a9b      	subs	r3, r3, r2
 801a91e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a922:	e768      	b.n	801a7f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a924:	f023 0204 	bic.w	r2, r3, #4
 801a928:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a92c:	428a      	cmp	r2, r1
 801a92e:	d003      	beq.n	801a938 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801a930:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a934:	4293      	cmp	r3, r2
 801a936:	d120      	bne.n	801a97a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a938:	3b01      	subs	r3, #1
 801a93a:	4602      	mov	r2, r0
 801a93c:	4629      	mov	r1, r5
 801a93e:	4620      	mov	r0, r4
 801a940:	b29b      	uxth	r3, r3
 801a942:	f7ff ff42 	bl	801a7ca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a946:	7b41      	ldrb	r1, [r0, #13]
 801a948:	00cb      	lsls	r3, r1, #3
 801a94a:	0649      	lsls	r1, r1, #25
 801a94c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a950:	7a03      	ldrb	r3, [r0, #8]
 801a952:	ea43 0302 	orr.w	r3, r3, r2
 801a956:	bf44      	itt	mi
 801a958:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a95c:	b21b      	sxthmi	r3, r3
 801a95e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a962:	7b6b      	ldrb	r3, [r5, #13]
 801a964:	7aaa      	ldrb	r2, [r5, #10]
 801a966:	005b      	lsls	r3, r3, #1
 801a968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a96c:	4313      	orrs	r3, r2
 801a96e:	115a      	asrs	r2, r3, #5
 801a970:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a974:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a978:	e035      	b.n	801a9e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801a97a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a97e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a982:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a986:	7a2a      	ldrb	r2, [r5, #8]
 801a988:	ea42 0201 	orr.w	r2, r2, r1
 801a98c:	f640 6109 	movw	r1, #3593	; 0xe09
 801a990:	bf1c      	itt	ne
 801a992:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a996:	b212      	sxthne	r2, r2
 801a998:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a99c:	f023 0210 	bic.w	r2, r3, #16
 801a9a0:	428a      	cmp	r2, r1
 801a9a2:	d003      	beq.n	801a9ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801a9a4:	f640 6213 	movw	r2, #3603	; 0xe13
 801a9a8:	4293      	cmp	r3, r2
 801a9aa:	d129      	bne.n	801aa00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801a9ac:	7b6e      	ldrb	r6, [r5, #13]
 801a9ae:	4629      	mov	r1, r5
 801a9b0:	0076      	lsls	r6, r6, #1
 801a9b2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a9b6:	7aae      	ldrb	r6, [r5, #10]
 801a9b8:	4316      	orrs	r6, r2
 801a9ba:	f640 6213 	movw	r2, #3603	; 0xe13
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	4602      	mov	r2, r0
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	bf16      	itet	ne
 801a9c6:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a9ca:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a9ce:	b29b      	uxthne	r3, r3
 801a9d0:	f7ff fefb 	bl	801a7ca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a9d4:	7b43      	ldrb	r3, [r0, #13]
 801a9d6:	7a82      	ldrb	r2, [r0, #10]
 801a9d8:	005b      	lsls	r3, r3, #1
 801a9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a9de:	4313      	orrs	r3, r2
 801a9e0:	1af6      	subs	r6, r6, r3
 801a9e2:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801a9e6:	7b69      	ldrb	r1, [r5, #13]
 801a9e8:	00cb      	lsls	r3, r1, #3
 801a9ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9ee:	7a2b      	ldrb	r3, [r5, #8]
 801a9f0:	4313      	orrs	r3, r2
 801a9f2:	064a      	lsls	r2, r1, #25
 801a9f4:	bf44      	itt	mi
 801a9f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9fa:	b21b      	sxthmi	r3, r3
 801a9fc:	1bdb      	subs	r3, r3, r7
 801a9fe:	e73f      	b.n	801a880 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801aa00:	2300      	movs	r3, #0
 801aa02:	e7b7      	b.n	801a974 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801aa04:	3fc00079 	.word	0x3fc00079
 801aa08:	0802a4c0 	.word	0x0802a4c0
 801aa0c:	0802a732 	.word	0x0802a732
 801aa10:	0802a4c9 	.word	0x0802a4c9

0801aa14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801aa14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa18:	4604      	mov	r4, r0
 801aa1a:	b942      	cbnz	r2, 801aa2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801aa1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801aa20:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801aa24:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801aa28:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801aa2c:	e046      	b.n	801aabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801aa2e:	7b51      	ldrb	r1, [r2, #13]
 801aa30:	8893      	ldrh	r3, [r2, #4]
 801aa32:	010f      	lsls	r7, r1, #4
 801aa34:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801aa38:	79d7      	ldrb	r7, [r2, #7]
 801aa3a:	4307      	orrs	r7, r0
 801aa3c:	2f04      	cmp	r7, #4
 801aa3e:	b2bd      	uxth	r5, r7
 801aa40:	bfcc      	ite	gt
 801aa42:	08bf      	lsrgt	r7, r7, #2
 801aa44:	2701      	movle	r7, #1
 801aa46:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801aa4a:	f200 80ab 	bhi.w	801aba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801aa4e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801aa52:	4283      	cmp	r3, r0
 801aa54:	d216      	bcs.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa56:	f240 605b 	movw	r0, #1627	; 0x65b
 801aa5a:	4283      	cmp	r3, r0
 801aa5c:	d859      	bhi.n	801ab12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801aa5e:	f240 6057 	movw	r0, #1623	; 0x657
 801aa62:	4283      	cmp	r3, r0
 801aa64:	d20e      	bcs.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa66:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aa6a:	d24a      	bcs.n	801ab02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801aa6c:	f240 604e 	movw	r0, #1614	; 0x64e
 801aa70:	4283      	cmp	r3, r0
 801aa72:	d207      	bcs.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa74:	f240 601a 	movw	r0, #1562	; 0x61a
 801aa78:	4283      	cmp	r3, r0
 801aa7a:	d02a      	beq.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa7c:	d821      	bhi.n	801aac2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801aa7e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801aa82:	d35b      	bcc.n	801ab3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aa84:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801aa88:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aa8c:	f040 80d0 	bne.w	801ac30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa90:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801aa94:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa98:	f040 80ca 	bne.w	801ac30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801aa9c:	00cb      	lsls	r3, r1, #3
 801aa9e:	0649      	lsls	r1, r1, #25
 801aaa0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aaa4:	7a13      	ldrb	r3, [r2, #8]
 801aaa6:	ea43 0300 	orr.w	r3, r3, r0
 801aaaa:	bf44      	itt	mi
 801aaac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aab0:	b21b      	sxthmi	r3, r3
 801aab2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801aab6:	1b5d      	subs	r5, r3, r5
 801aab8:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801aabc:	4610      	mov	r0, r2
 801aabe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aac2:	f240 604b 	movw	r0, #1611	; 0x64b
 801aac6:	4283      	cmp	r3, r0
 801aac8:	d338      	bcc.n	801ab3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aaca:	f240 604c 	movw	r0, #1612	; 0x64c
 801aace:	4283      	cmp	r3, r0
 801aad0:	d9d8      	bls.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aad2:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801aad6:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801aada:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aade:	f040 80f2 	bne.w	801acc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aae2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aae6:	f040 80ee 	bne.w	801acc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801aaea:	00cb      	lsls	r3, r1, #3
 801aaec:	064e      	lsls	r6, r1, #25
 801aaee:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aaf2:	7a13      	ldrb	r3, [r2, #8]
 801aaf4:	ea43 0300 	orr.w	r3, r3, r0
 801aaf8:	bf44      	itt	mi
 801aafa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aafe:	b21b      	sxthmi	r3, r3
 801ab00:	e7d9      	b.n	801aab6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801ab02:	f240 6054 	movw	r0, #1620	; 0x654
 801ab06:	4283      	cmp	r3, r0
 801ab08:	d8e3      	bhi.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab0a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ab0e:	d9e0      	bls.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab10:	e7b8      	b.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab12:	f240 6074 	movw	r0, #1652	; 0x674
 801ab16:	4283      	cmp	r3, r0
 801ab18:	d0b4      	beq.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab1a:	d82d      	bhi.n	801ab78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801ab1c:	f240 605e 	movw	r0, #1630	; 0x65e
 801ab20:	4283      	cmp	r3, r0
 801ab22:	d804      	bhi.n	801ab2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801ab24:	f240 605d 	movw	r0, #1629	; 0x65d
 801ab28:	4283      	cmp	r3, r0
 801ab2a:	d3d2      	bcc.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab2c:	e7aa      	b.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab2e:	f240 605f 	movw	r0, #1631	; 0x65f
 801ab32:	4283      	cmp	r3, r0
 801ab34:	d0cd      	beq.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab36:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801ab3a:	d0a3      	beq.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab3c:	00cb      	lsls	r3, r1, #3
 801ab3e:	0649      	lsls	r1, r1, #25
 801ab40:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ab44:	7a13      	ldrb	r3, [r2, #8]
 801ab46:	ea43 0300 	orr.w	r3, r3, r0
 801ab4a:	bf44      	itt	mi
 801ab4c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab50:	b21b      	sxthmi	r3, r3
 801ab52:	1b5d      	subs	r5, r3, r5
 801ab54:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ab58:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801ab5c:	7b53      	ldrb	r3, [r2, #13]
 801ab5e:	015b      	lsls	r3, r3, #5
 801ab60:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ab64:	7993      	ldrb	r3, [r2, #6]
 801ab66:	430b      	orrs	r3, r1
 801ab68:	2105      	movs	r1, #5
 801ab6a:	005b      	lsls	r3, r3, #1
 801ab6c:	fb93 f3f1 	sdiv	r3, r3, r1
 801ab70:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ab74:	440b      	add	r3, r1
 801ab76:	e757      	b.n	801aa28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ab78:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ab7c:	4283      	cmp	r3, r0
 801ab7e:	d809      	bhi.n	801ab94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ab80:	f240 60df 	movw	r0, #1759	; 0x6df
 801ab84:	4283      	cmp	r3, r0
 801ab86:	f4bf af7d 	bcs.w	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab8a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ab8e:	2b05      	cmp	r3, #5
 801ab90:	d8d4      	bhi.n	801ab3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ab92:	e777      	b.n	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab94:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ab98:	4283      	cmp	r3, r0
 801ab9a:	d09a      	beq.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab9c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801aba0:	4283      	cmp	r3, r0
 801aba2:	e7ca      	b.n	801ab3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801aba4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801aba8:	d22b      	bcs.n	801ac02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801abaa:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801abae:	4283      	cmp	r3, r0
 801abb0:	d28f      	bcs.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abb2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801abb6:	4283      	cmp	r3, r0
 801abb8:	d816      	bhi.n	801abe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801abba:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801abbe:	4283      	cmp	r3, r0
 801abc0:	f4bf af60 	bcs.w	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abc4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801abc8:	4283      	cmp	r3, r0
 801abca:	d80a      	bhi.n	801abe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801abcc:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801abd0:	4283      	cmp	r3, r0
 801abd2:	f4bf af57 	bcs.w	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abd6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801abda:	4283      	cmp	r3, r0
 801abdc:	f43f af79 	beq.w	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801abe0:	e7ac      	b.n	801ab3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801abe2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801abe6:	e7f8      	b.n	801abda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801abe8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801abec:	4283      	cmp	r3, r0
 801abee:	d802      	bhi.n	801abf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801abf0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801abf4:	e798      	b.n	801ab28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801abf6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801abfa:	4283      	cmp	r3, r0
 801abfc:	f47f af42 	bne.w	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac00:	e767      	b.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac02:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ac06:	4283      	cmp	r3, r0
 801ac08:	f43f af63 	beq.w	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac0c:	d802      	bhi.n	801ac14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ac0e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ac12:	e7f2      	b.n	801abfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801ac14:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ac18:	4283      	cmp	r3, r0
 801ac1a:	d805      	bhi.n	801ac28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801ac1c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ac20:	4283      	cmp	r3, r0
 801ac22:	f4ff af2f 	bcc.w	801aa84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac26:	e754      	b.n	801aad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac28:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ac2c:	4283      	cmp	r3, r0
 801ac2e:	e7af      	b.n	801ab90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ac30:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801ac34:	4617      	mov	r7, r2
 801ac36:	f102 0808 	add.w	r8, r2, #8
 801ac3a:	4666      	mov	r6, ip
 801ac3c:	6838      	ldr	r0, [r7, #0]
 801ac3e:	3708      	adds	r7, #8
 801ac40:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ac44:	46e6      	mov	lr, ip
 801ac46:	4547      	cmp	r7, r8
 801ac48:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ac4c:	46f4      	mov	ip, lr
 801ac4e:	d1f5      	bne.n	801ac3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ac50:	6838      	ldr	r0, [r7, #0]
 801ac52:	f8ce 0000 	str.w	r0, [lr]
 801ac56:	88b9      	ldrh	r1, [r7, #4]
 801ac58:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ac5c:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801ac60:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ac64:	d009      	beq.n	801ac7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ac66:	7b51      	ldrb	r1, [r2, #13]
 801ac68:	7992      	ldrb	r2, [r2, #6]
 801ac6a:	0149      	lsls	r1, r1, #5
 801ac6c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ac70:	4311      	orrs	r1, r2
 801ac72:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ac76:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801ac7a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac7e:	d00d      	beq.n	801ac9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ac80:	442b      	add	r3, r5
 801ac82:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801ac86:	b29b      	uxth	r3, r3
 801ac88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ac8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801ac90:	10db      	asrs	r3, r3, #3
 801ac92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ac96:	4313      	orrs	r3, r2
 801ac98:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801ac9c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801aca0:	00cb      	lsls	r3, r1, #3
 801aca2:	064f      	lsls	r7, r1, #25
 801aca4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aca8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801acac:	ea43 0302 	orr.w	r3, r3, r2
 801acb0:	bf44      	itt	mi
 801acb2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801acb6:	b21b      	sxthmi	r3, r3
 801acb8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801acbc:	1b5d      	subs	r5, r3, r5
 801acbe:	4632      	mov	r2, r6
 801acc0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801acc4:	e6fa      	b.n	801aabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801acc6:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801acca:	4694      	mov	ip, r2
 801accc:	f102 0908 	add.w	r9, r2, #8
 801acd0:	4676      	mov	r6, lr
 801acd2:	f8dc 0000 	ldr.w	r0, [ip]
 801acd6:	f10c 0c08 	add.w	ip, ip, #8
 801acda:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801acde:	46f0      	mov	r8, lr
 801ace0:	45cc      	cmp	ip, r9
 801ace2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ace6:	46c6      	mov	lr, r8
 801ace8:	d1f3      	bne.n	801acd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801acea:	f8dc 0000 	ldr.w	r0, [ip]
 801acee:	f8c8 0000 	str.w	r0, [r8]
 801acf2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801acf6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801acfa:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801acfe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ad02:	d009      	beq.n	801ad18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801ad04:	7b51      	ldrb	r1, [r2, #13]
 801ad06:	7992      	ldrb	r2, [r2, #6]
 801ad08:	0149      	lsls	r1, r1, #5
 801ad0a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ad0e:	4311      	orrs	r1, r2
 801ad10:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ad14:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801ad18:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ad1c:	d00d      	beq.n	801ad3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801ad1e:	1bdb      	subs	r3, r3, r7
 801ad20:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ad2a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801ad2e:	10db      	asrs	r3, r3, #3
 801ad30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ad34:	4313      	orrs	r3, r2
 801ad36:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801ad3a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801ad3e:	00cb      	lsls	r3, r1, #3
 801ad40:	0648      	lsls	r0, r1, #25
 801ad42:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad46:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801ad4a:	ea43 0302 	orr.w	r3, r3, r2
 801ad4e:	bf44      	itt	mi
 801ad50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ad54:	b21b      	sxthmi	r3, r3
 801ad56:	e7b1      	b.n	801acbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801ad58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad5c:	461d      	mov	r5, r3
 801ad5e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ad60:	4604      	mov	r4, r0
 801ad62:	4617      	mov	r7, r2
 801ad64:	b92b      	cbnz	r3, 801ad72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ad66:	4b23      	ldr	r3, [pc, #140]	; (801adf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801ad68:	21c0      	movs	r1, #192	; 0xc0
 801ad6a:	4a23      	ldr	r2, [pc, #140]	; (801adf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801ad6c:	4823      	ldr	r0, [pc, #140]	; (801adfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ad6e:	f00a fcc7 	bl	8025700 <__assert_func>
 801ad72:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ad74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ad78:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ad7c:	f7f7 fc76 	bl	801266c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ad80:	683b      	ldr	r3, [r7, #0]
 801ad82:	4601      	mov	r1, r0
 801ad84:	4606      	mov	r6, r0
 801ad86:	4638      	mov	r0, r7
 801ad88:	68db      	ldr	r3, [r3, #12]
 801ad8a:	4798      	blx	r3
 801ad8c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ad90:	4602      	mov	r2, r0
 801ad92:	6028      	str	r0, [r5, #0]
 801ad94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad98:	d215      	bcs.n	801adc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ad9a:	4643      	mov	r3, r8
 801ad9c:	4639      	mov	r1, r7
 801ad9e:	4620      	mov	r0, r4
 801ada0:	f7ff fe38 	bl	801aa14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ada4:	6028      	str	r0, [r5, #0]
 801ada6:	682b      	ldr	r3, [r5, #0]
 801ada8:	b143      	cbz	r3, 801adbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801adaa:	7b5a      	ldrb	r2, [r3, #13]
 801adac:	7a9b      	ldrb	r3, [r3, #10]
 801adae:	0052      	lsls	r2, r2, #1
 801adb0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801adb4:	4313      	orrs	r3, r2
 801adb6:	bf0c      	ite	eq
 801adb8:	2301      	moveq	r3, #1
 801adba:	2300      	movne	r3, #0
 801adbc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801adc0:	4630      	mov	r0, r6
 801adc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adc6:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801adca:	b29b      	uxth	r3, r3
 801adcc:	2b7f      	cmp	r3, #127	; 0x7f
 801adce:	d804      	bhi.n	801adda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801add0:	4639      	mov	r1, r7
 801add2:	4620      	mov	r0, r4
 801add4:	f7ff fd04 	bl	801a7e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801add8:	e7e4      	b.n	801ada4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801adda:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d0e1      	beq.n	801ada6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801ade2:	f640 1302 	movw	r3, #2306	; 0x902
 801ade6:	429e      	cmp	r6, r3
 801ade8:	d1dd      	bne.n	801ada6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801adea:	4601      	mov	r1, r0
 801adec:	4620      	mov	r0, r4
 801adee:	f7ff fcc8 	bl	801a782 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801adf2:	e7d7      	b.n	801ada4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801adf4:	0802a4c0 	.word	0x0802a4c0
 801adf8:	0802a732 	.word	0x0802a732
 801adfc:	0802a4c9 	.word	0x0802a4c9

0801ae00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ae00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae04:	461d      	mov	r5, r3
 801ae06:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ae08:	4604      	mov	r4, r0
 801ae0a:	4617      	mov	r7, r2
 801ae0c:	b92b      	cbnz	r3, 801ae1a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801ae0e:	4b25      	ldr	r3, [pc, #148]	; (801aea4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801ae10:	21c0      	movs	r1, #192	; 0xc0
 801ae12:	4a25      	ldr	r2, [pc, #148]	; (801aea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801ae14:	4825      	ldr	r0, [pc, #148]	; (801aeac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ae16:	f00a fc73 	bl	8025700 <__assert_func>
 801ae1a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ae1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ae20:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ae24:	f7f7 fc22 	bl	801266c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae28:	683b      	ldr	r3, [r7, #0]
 801ae2a:	4601      	mov	r1, r0
 801ae2c:	4606      	mov	r6, r0
 801ae2e:	4638      	mov	r0, r7
 801ae30:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ae34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ae38:	47c8      	blx	r9
 801ae3a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ae3e:	4602      	mov	r2, r0
 801ae40:	6028      	str	r0, [r5, #0]
 801ae42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ae46:	d215      	bcs.n	801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ae48:	4643      	mov	r3, r8
 801ae4a:	4639      	mov	r1, r7
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	f7ff fde1 	bl	801aa14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ae52:	6028      	str	r0, [r5, #0]
 801ae54:	682b      	ldr	r3, [r5, #0]
 801ae56:	b143      	cbz	r3, 801ae6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801ae58:	7b5a      	ldrb	r2, [r3, #13]
 801ae5a:	7a9b      	ldrb	r3, [r3, #10]
 801ae5c:	0052      	lsls	r2, r2, #1
 801ae5e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ae62:	4313      	orrs	r3, r2
 801ae64:	bf0c      	ite	eq
 801ae66:	2301      	moveq	r3, #1
 801ae68:	2300      	movne	r3, #0
 801ae6a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ae6e:	4630      	mov	r0, r6
 801ae70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae74:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801ae78:	b29b      	uxth	r3, r3
 801ae7a:	2b7f      	cmp	r3, #127	; 0x7f
 801ae7c:	d804      	bhi.n	801ae88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801ae7e:	4639      	mov	r1, r7
 801ae80:	4620      	mov	r0, r4
 801ae82:	f7ff fcad 	bl	801a7e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ae86:	e7e4      	b.n	801ae52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801ae88:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d0e1      	beq.n	801ae54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801ae90:	f640 1302 	movw	r3, #2306	; 0x902
 801ae94:	429e      	cmp	r6, r3
 801ae96:	d1dd      	bne.n	801ae54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801ae98:	4601      	mov	r1, r0
 801ae9a:	4620      	mov	r0, r4
 801ae9c:	f7ff fc71 	bl	801a782 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aea0:	e7d7      	b.n	801ae52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801aea2:	bf00      	nop
 801aea4:	0802a4c0 	.word	0x0802a4c0
 801aea8:	0802a732 	.word	0x0802a732
 801aeac:	0802a4c9 	.word	0x0802a4c9

0801aeb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801aeb0:	b510      	push	{r4, lr}
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801aeb6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aeb8:	b9d9      	cbnz	r1, 801aef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801aeba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aebc:	2b0a      	cmp	r3, #10
 801aebe:	d036      	beq.n	801af2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801aec0:	4620      	mov	r0, r4
 801aec2:	f7ff fc27 	bl	801a714 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801aec6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aec8:	2b09      	cmp	r3, #9
 801aeca:	d906      	bls.n	801aeda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801aecc:	4b18      	ldr	r3, [pc, #96]	; (801af30 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801aece:	f44f 7182 	mov.w	r1, #260	; 0x104
 801aed2:	4a18      	ldr	r2, [pc, #96]	; (801af34 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801aed4:	4818      	ldr	r0, [pc, #96]	; (801af38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801aed6:	f00a fc13 	bl	8025700 <__assert_func>
 801aeda:	1c5a      	adds	r2, r3, #1
 801aedc:	8622      	strh	r2, [r4, #48]	; 0x30
 801aede:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801aee0:	4413      	add	r3, r2
 801aee2:	b29b      	uxth	r3, r3
 801aee4:	2b09      	cmp	r3, #9
 801aee6:	bf88      	it	hi
 801aee8:	3b0a      	subhi	r3, #10
 801aeea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aeee:	8358      	strh	r0, [r3, #26]
 801aef0:	e7e3      	b.n	801aeba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801aef2:	2b0a      	cmp	r3, #10
 801aef4:	d01b      	beq.n	801af2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801aef6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aef8:	3901      	subs	r1, #1
 801aefa:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aefe:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801af00:	8721      	strh	r1, [r4, #56]	; 0x38
 801af02:	1c51      	adds	r1, r2, #1
 801af04:	b289      	uxth	r1, r1
 801af06:	2901      	cmp	r1, #1
 801af08:	bf8a      	itet	hi
 801af0a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801af0e:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801af10:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801af12:	2b09      	cmp	r3, #9
 801af14:	d8da      	bhi.n	801aecc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801af16:	1c5a      	adds	r2, r3, #1
 801af18:	8622      	strh	r2, [r4, #48]	; 0x30
 801af1a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801af1c:	4413      	add	r3, r2
 801af1e:	b29b      	uxth	r3, r3
 801af20:	2b09      	cmp	r3, #9
 801af22:	bf88      	it	hi
 801af24:	3b0a      	subhi	r3, #10
 801af26:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801af2a:	8358      	strh	r0, [r3, #26]
 801af2c:	e7c2      	b.n	801aeb4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801af2e:	bd10      	pop	{r4, pc}
 801af30:	0802a4f5 	.word	0x0802a4f5
 801af34:	0802a888 	.word	0x0802a888
 801af38:	0802a4c9 	.word	0x0802a4c9

0801af3c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801af3c:	b538      	push	{r3, r4, r5, lr}
 801af3e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801af40:	4604      	mov	r4, r0
 801af42:	b92a      	cbnz	r2, 801af50 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801af44:	4b13      	ldr	r3, [pc, #76]	; (801af94 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801af46:	21d5      	movs	r1, #213	; 0xd5
 801af48:	4a13      	ldr	r2, [pc, #76]	; (801af98 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801af4a:	4814      	ldr	r0, [pc, #80]	; (801af9c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801af4c:	f00a fbd8 	bl	8025700 <__assert_func>
 801af50:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801af52:	3a01      	subs	r2, #1
 801af54:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801af58:	8b4d      	ldrh	r5, [r1, #26]
 801af5a:	8602      	strh	r2, [r0, #48]	; 0x30
 801af5c:	1c5a      	adds	r2, r3, #1
 801af5e:	b292      	uxth	r2, r2
 801af60:	2a09      	cmp	r2, #9
 801af62:	bf8a      	itet	hi
 801af64:	3b09      	subhi	r3, #9
 801af66:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801af68:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801af6a:	f7ff ffa1 	bl	801aeb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801af6e:	8b23      	ldrh	r3, [r4, #24]
 801af70:	2b01      	cmp	r3, #1
 801af72:	bf9c      	itt	ls
 801af74:	3301      	addls	r3, #1
 801af76:	8323      	strhls	r3, [r4, #24]
 801af78:	8ae3      	ldrh	r3, [r4, #22]
 801af7a:	b90b      	cbnz	r3, 801af80 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801af7c:	2302      	movs	r3, #2
 801af7e:	82e3      	strh	r3, [r4, #22]
 801af80:	8ae3      	ldrh	r3, [r4, #22]
 801af82:	4628      	mov	r0, r5
 801af84:	3b01      	subs	r3, #1
 801af86:	b29b      	uxth	r3, r3
 801af88:	82e3      	strh	r3, [r4, #22]
 801af8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801af8e:	8265      	strh	r5, [r4, #18]
 801af90:	bd38      	pop	{r3, r4, r5, pc}
 801af92:	bf00      	nop
 801af94:	0802a4c0 	.word	0x0802a4c0
 801af98:	0802a7dd 	.word	0x0802a7dd
 801af9c:	0802a4c9 	.word	0x0802a4c9

0801afa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801afa0:	428a      	cmp	r2, r1
 801afa2:	b538      	push	{r3, r4, r5, lr}
 801afa4:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801afa6:	d90c      	bls.n	801afc2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801afa8:	b92c      	cbnz	r4, 801afb6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801afaa:	4b1c      	ldr	r3, [pc, #112]	; (801b01c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801afac:	21e1      	movs	r1, #225	; 0xe1
 801afae:	4a1c      	ldr	r2, [pc, #112]	; (801b020 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801afb0:	481c      	ldr	r0, [pc, #112]	; (801b024 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801afb2:	f00a fba5 	bl	8025700 <__assert_func>
 801afb6:	3c01      	subs	r4, #1
 801afb8:	4b1b      	ldr	r3, [pc, #108]	; (801b028 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801afba:	4a1c      	ldr	r2, [pc, #112]	; (801b02c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801afbc:	21c5      	movs	r1, #197	; 0xc5
 801afbe:	8604      	strh	r4, [r0, #48]	; 0x30
 801afc0:	e7f6      	b.n	801afb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afc2:	428c      	cmp	r4, r1
 801afc4:	d203      	bcs.n	801afce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801afc6:	4b1a      	ldr	r3, [pc, #104]	; (801b030 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801afc8:	21cb      	movs	r1, #203	; 0xcb
 801afca:	4a1a      	ldr	r2, [pc, #104]	; (801b034 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801afcc:	e7f0      	b.n	801afb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801afce:	1a64      	subs	r4, r4, r1
 801afd0:	250a      	movs	r5, #10
 801afd2:	8604      	strh	r4, [r0, #48]	; 0x30
 801afd4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801afd6:	4421      	add	r1, r4
 801afd8:	b289      	uxth	r1, r1
 801afda:	2909      	cmp	r1, #9
 801afdc:	bf88      	it	hi
 801afde:	390a      	subhi	r1, #10
 801afe0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801afe2:	b1ba      	cbz	r2, 801b014 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801afe4:	3a01      	subs	r2, #1
 801afe6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801afe8:	b292      	uxth	r2, r2
 801afea:	2909      	cmp	r1, #9
 801afec:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801aff0:	d903      	bls.n	801affa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801aff2:	4b11      	ldr	r3, [pc, #68]	; (801b038 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801aff4:	21e6      	movs	r1, #230	; 0xe6
 801aff6:	4a11      	ldr	r2, [pc, #68]	; (801b03c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801aff8:	e7da      	b.n	801afb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801affa:	3101      	adds	r1, #1
 801affc:	8601      	strh	r1, [r0, #48]	; 0x30
 801affe:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b000:	b901      	cbnz	r1, 801b004 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801b002:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b004:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b006:	3901      	subs	r1, #1
 801b008:	b289      	uxth	r1, r1
 801b00a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b00c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b010:	834c      	strh	r4, [r1, #26]
 801b012:	e7e6      	b.n	801afe2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801b014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b018:	f7ff bf4a 	b.w	801aeb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b01c:	0802a4c0 	.word	0x0802a4c0
 801b020:	0802a5b6 	.word	0x0802a5b6
 801b024:	0802a4c9 	.word	0x0802a4c9
 801b028:	0802a501 	.word	0x0802a501
 801b02c:	0802a660 	.word	0x0802a660
 801b030:	0802a50f 	.word	0x0802a50f
 801b034:	0802a937 	.word	0x0802a937
 801b038:	0802a51b 	.word	0x0802a51b
 801b03c:	0802a52e 	.word	0x0802a52e

0801b040 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b040:	3a01      	subs	r2, #1
 801b042:	b570      	push	{r4, r5, r6, lr}
 801b044:	b292      	uxth	r2, r2
 801b046:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b04a:	42b2      	cmp	r2, r6
 801b04c:	d019      	beq.n	801b082 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b04e:	8b04      	ldrh	r4, [r0, #24]
 801b050:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b054:	4294      	cmp	r4, r2
 801b056:	d805      	bhi.n	801b064 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b058:	4b19      	ldr	r3, [pc, #100]	; (801b0c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b05a:	4a1a      	ldr	r2, [pc, #104]	; (801b0c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b05c:	21c5      	movs	r1, #197	; 0xc5
 801b05e:	481a      	ldr	r0, [pc, #104]	; (801b0c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b060:	f00a fb4e 	bl	8025700 <__assert_func>
 801b064:	8ac4      	ldrh	r4, [r0, #22]
 801b066:	4414      	add	r4, r2
 801b068:	3a01      	subs	r2, #1
 801b06a:	b2a4      	uxth	r4, r4
 801b06c:	b292      	uxth	r2, r2
 801b06e:	2c01      	cmp	r4, #1
 801b070:	bf88      	it	hi
 801b072:	3c02      	subhi	r4, #2
 801b074:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b078:	8a64      	ldrh	r4, [r4, #18]
 801b07a:	42ac      	cmp	r4, r5
 801b07c:	d0e5      	beq.n	801b04a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b07e:	2000      	movs	r0, #0
 801b080:	bd70      	pop	{r4, r5, r6, pc}
 801b082:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b086:	2400      	movs	r4, #0
 801b088:	4413      	add	r3, r2
 801b08a:	b2a2      	uxth	r2, r4
 801b08c:	429a      	cmp	r2, r3
 801b08e:	da14      	bge.n	801b0ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b090:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801b092:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b096:	4296      	cmp	r6, r2
 801b098:	d802      	bhi.n	801b0a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b09a:	4b09      	ldr	r3, [pc, #36]	; (801b0c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b09c:	4a0b      	ldr	r2, [pc, #44]	; (801b0cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b09e:	e7dd      	b.n	801b05c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b0a0:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801b0a2:	3401      	adds	r4, #1
 801b0a4:	4432      	add	r2, r6
 801b0a6:	b292      	uxth	r2, r2
 801b0a8:	2a09      	cmp	r2, #9
 801b0aa:	bf88      	it	hi
 801b0ac:	3a0a      	subhi	r2, #10
 801b0ae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b0b2:	8b52      	ldrh	r2, [r2, #26]
 801b0b4:	42aa      	cmp	r2, r5
 801b0b6:	d0e8      	beq.n	801b08a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b0b8:	e7e1      	b.n	801b07e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b0ba:	2001      	movs	r0, #1
 801b0bc:	e7e0      	b.n	801b080 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b0be:	bf00      	nop
 801b0c0:	0802a501 	.word	0x0802a501
 801b0c4:	0802a9bb 	.word	0x0802a9bb
 801b0c8:	0802a4c9 	.word	0x0802a4c9
 801b0cc:	0802a660 	.word	0x0802a660

0801b0d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d4:	4605      	mov	r5, r0
 801b0d6:	4616      	mov	r6, r2
 801b0d8:	1c8c      	adds	r4, r1, #2
 801b0da:	8809      	ldrh	r1, [r1, #0]
 801b0dc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b0e0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b0e4:	42b3      	cmp	r3, r6
 801b0e6:	d124      	bne.n	801b132 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b0e8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b0ec:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b0f0:	f001 070f 	and.w	r7, r1, #15
 801b0f4:	4652      	mov	r2, sl
 801b0f6:	f8cd 8000 	str.w	r8, [sp]
 801b0fa:	464b      	mov	r3, r9
 801b0fc:	4621      	mov	r1, r4
 801b0fe:	4628      	mov	r0, r5
 801b100:	f7ff ff9e 	bl	801b040 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b104:	4683      	mov	fp, r0
 801b106:	b168      	cbz	r0, 801b124 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b108:	eb0a 0109 	add.w	r1, sl, r9
 801b10c:	463a      	mov	r2, r7
 801b10e:	4628      	mov	r0, r5
 801b110:	4441      	add	r1, r8
 801b112:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b116:	4649      	mov	r1, r9
 801b118:	f7ff ff42 	bl	801afa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b11c:	4658      	mov	r0, fp
 801b11e:	b003      	add	sp, #12
 801b120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b124:	eb07 010a 	add.w	r1, r7, sl
 801b128:	4449      	add	r1, r9
 801b12a:	4441      	add	r1, r8
 801b12c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b130:	e7d2      	b.n	801b0d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b132:	f04f 0b00 	mov.w	fp, #0
 801b136:	e7f1      	b.n	801b11c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b138 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b138:	b570      	push	{r4, r5, r6, lr}
 801b13a:	8810      	ldrh	r0, [r2, #0]
 801b13c:	4298      	cmp	r0, r3
 801b13e:	d817      	bhi.n	801b170 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b140:	1e48      	subs	r0, r1, #1
 801b142:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b146:	4298      	cmp	r0, r3
 801b148:	d312      	bcc.n	801b170 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b14a:	2400      	movs	r4, #0
 801b14c:	428c      	cmp	r4, r1
 801b14e:	d20f      	bcs.n	801b170 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b150:	1860      	adds	r0, r4, r1
 801b152:	1040      	asrs	r0, r0, #1
 801b154:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b158:	0085      	lsls	r5, r0, #2
 801b15a:	42b3      	cmp	r3, r6
 801b15c:	d902      	bls.n	801b164 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b15e:	3001      	adds	r0, #1
 801b160:	b284      	uxth	r4, r0
 801b162:	e7f3      	b.n	801b14c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b164:	d201      	bcs.n	801b16a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b166:	b281      	uxth	r1, r0
 801b168:	e7f0      	b.n	801b14c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b16a:	442a      	add	r2, r5
 801b16c:	8850      	ldrh	r0, [r2, #2]
 801b16e:	bd70      	pop	{r4, r5, r6, pc}
 801b170:	2000      	movs	r0, #0
 801b172:	e7fc      	b.n	801b16e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b174 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b178:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b17a:	4604      	mov	r4, r0
 801b17c:	260b      	movs	r6, #11
 801b17e:	886f      	ldrh	r7, [r5, #2]
 801b180:	087f      	lsrs	r7, r7, #1
 801b182:	3e01      	subs	r6, #1
 801b184:	d01b      	beq.n	801b1be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b186:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b188:	b92b      	cbnz	r3, 801b196 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b18a:	4b0e      	ldr	r3, [pc, #56]	; (801b1c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b18c:	21c0      	movs	r1, #192	; 0xc0
 801b18e:	4a0e      	ldr	r2, [pc, #56]	; (801b1c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b190:	480e      	ldr	r0, [pc, #56]	; (801b1cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b192:	f00a fab5 	bl	8025700 <__assert_func>
 801b196:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b198:	462a      	mov	r2, r5
 801b19a:	4639      	mov	r1, r7
 801b19c:	4620      	mov	r0, r4
 801b19e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b1a2:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b1a6:	4643      	mov	r3, r8
 801b1a8:	f7ff ffc6 	bl	801b138 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b1ac:	b138      	cbz	r0, 801b1be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b1ae:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b1b2:	4642      	mov	r2, r8
 801b1b4:	4620      	mov	r0, r4
 801b1b6:	f7ff ff8b 	bl	801b0d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b1ba:	2800      	cmp	r0, #0
 801b1bc:	d1e1      	bne.n	801b182 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1c2:	bf00      	nop
 801b1c4:	0802a4c0 	.word	0x0802a4c0
 801b1c8:	0802a732 	.word	0x0802a732
 801b1cc:	0802a4c9 	.word	0x0802a4c9

0801b1d0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b1d0:	4602      	mov	r2, r0
 801b1d2:	b148      	cbz	r0, 801b1e8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	b298      	uxth	r0, r3
 801b1d8:	3301      	adds	r3, #1
 801b1da:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b1de:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b1e2:	2900      	cmp	r1, #0
 801b1e4:	d1f7      	bne.n	801b1d6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b1e6:	4770      	bx	lr
 801b1e8:	4770      	bx	lr

0801b1ea <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b1ea:	b530      	push	{r4, r5, lr}
 801b1ec:	4604      	mov	r4, r0
 801b1ee:	b159      	cbz	r1, 801b208 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b1f0:	b148      	cbz	r0, 801b206 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	b298      	uxth	r0, r3
 801b1f6:	4282      	cmp	r2, r0
 801b1f8:	d905      	bls.n	801b206 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b1fa:	5ccd      	ldrb	r5, [r1, r3]
 801b1fc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b200:	3301      	adds	r3, #1
 801b202:	2d00      	cmp	r5, #0
 801b204:	d1f6      	bne.n	801b1f4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b206:	bd30      	pop	{r4, r5, pc}
 801b208:	4608      	mov	r0, r1
 801b20a:	e7fc      	b.n	801b206 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b20c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b20e:	468c      	mov	ip, r1
 801b210:	b08b      	sub	sp, #44	; 0x2c
 801b212:	2100      	movs	r1, #0
 801b214:	ae01      	add	r6, sp, #4
 801b216:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b21a:	211f      	movs	r1, #31
 801b21c:	fbb0 f7f3 	udiv	r7, r0, r3
 801b220:	fb03 0517 	mls	r5, r3, r7, r0
 801b224:	4638      	mov	r0, r7
 801b226:	b2ec      	uxtb	r4, r5
 801b228:	2d09      	cmp	r5, #9
 801b22a:	bfd4      	ite	le
 801b22c:	3430      	addle	r4, #48	; 0x30
 801b22e:	3457      	addgt	r4, #87	; 0x57
 801b230:	b2e4      	uxtb	r4, r4
 801b232:	558c      	strb	r4, [r1, r6]
 801b234:	1e4c      	subs	r4, r1, #1
 801b236:	b92f      	cbnz	r7, 801b244 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b238:	4431      	add	r1, r6
 801b23a:	4660      	mov	r0, ip
 801b23c:	f7ff ffd5 	bl	801b1ea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b240:	b00b      	add	sp, #44	; 0x2c
 801b242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b244:	4621      	mov	r1, r4
 801b246:	e7e9      	b.n	801b21c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b248 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b24a:	4607      	mov	r7, r0
 801b24c:	b08b      	sub	sp, #44	; 0x2c
 801b24e:	4608      	mov	r0, r1
 801b250:	b341      	cbz	r1, 801b2a4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b252:	1e99      	subs	r1, r3, #2
 801b254:	290e      	cmp	r1, #14
 801b256:	d825      	bhi.n	801b2a4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b258:	2100      	movs	r1, #0
 801b25a:	463c      	mov	r4, r7
 801b25c:	261f      	movs	r6, #31
 801b25e:	f10d 0c04 	add.w	ip, sp, #4
 801b262:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b266:	1e71      	subs	r1, r6, #1
 801b268:	fb94 fef3 	sdiv	lr, r4, r3
 801b26c:	fb03 441e 	mls	r4, r3, lr, r4
 801b270:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b274:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b278:	b2ec      	uxtb	r4, r5
 801b27a:	2d09      	cmp	r5, #9
 801b27c:	bfd4      	ite	le
 801b27e:	3430      	addle	r4, #48	; 0x30
 801b280:	3457      	addgt	r4, #87	; 0x57
 801b282:	b2e4      	uxtb	r4, r4
 801b284:	f80c 4006 	strb.w	r4, [ip, r6]
 801b288:	4674      	mov	r4, lr
 801b28a:	b96c      	cbnz	r4, 801b2a8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b28c:	2f00      	cmp	r7, #0
 801b28e:	da05      	bge.n	801b29c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b290:	ab0a      	add	r3, sp, #40	; 0x28
 801b292:	4419      	add	r1, r3
 801b294:	232d      	movs	r3, #45	; 0x2d
 801b296:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b29a:	1eb1      	subs	r1, r6, #2
 801b29c:	3101      	adds	r1, #1
 801b29e:	4461      	add	r1, ip
 801b2a0:	f7ff ffa3 	bl	801b1ea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b2a4:	b00b      	add	sp, #44	; 0x2c
 801b2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2a8:	460e      	mov	r6, r1
 801b2aa:	e7dc      	b.n	801b266 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b2ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2b0:	b085      	sub	sp, #20
 801b2b2:	4691      	mov	r9, r2
 801b2b4:	6802      	ldr	r2, [r0, #0]
 801b2b6:	4688      	mov	r8, r1
 801b2b8:	461c      	mov	r4, r3
 801b2ba:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b2be:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b2c2:	4683      	mov	fp, r0
 801b2c4:	4610      	mov	r0, r2
 801b2c6:	9103      	str	r1, [sp, #12]
 801b2c8:	9302      	str	r3, [sp, #8]
 801b2ca:	9201      	str	r2, [sp, #4]
 801b2cc:	f7ff ff80 	bl	801b1d0 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b2d0:	f1b8 0f00 	cmp.w	r8, #0
 801b2d4:	bf0c      	ite	eq
 801b2d6:	4684      	moveq	ip, r0
 801b2d8:	f100 0c01 	addne.w	ip, r0, #1
 801b2dc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b2e0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b2e4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b2e6:	fa1f fc8c 	uxth.w	ip, ip
 801b2ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b2ec:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b2f0:	9903      	ldr	r1, [sp, #12]
 801b2f2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b2f6:	d041      	beq.n	801b37c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b2f8:	d834      	bhi.n	801b364 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b2fa:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b2fe:	d059      	beq.n	801b3b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b300:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b304:	d03a      	beq.n	801b37c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b306:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b30a:	d034      	beq.n	801b376 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b30c:	2400      	movs	r4, #0
 801b30e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b312:	3a01      	subs	r2, #1
 801b314:	b169      	cbz	r1, 801b332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b316:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b318:	458c      	cmp	ip, r1
 801b31a:	da09      	bge.n	801b330 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b31c:	eba1 010c 	sub.w	r1, r1, ip
 801b320:	b289      	uxth	r1, r1
 801b322:	b933      	cbnz	r3, 801b332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b324:	2e00      	cmp	r6, #0
 801b326:	d051      	beq.n	801b3cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b328:	2800      	cmp	r0, #0
 801b32a:	d04f      	beq.n	801b3cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b32c:	440c      	add	r4, r1
 801b32e:	b2a4      	uxth	r4, r4
 801b330:	2100      	movs	r1, #0
 801b332:	682b      	ldr	r3, [r5, #0]
 801b334:	4293      	cmp	r3, r2
 801b336:	da07      	bge.n	801b348 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b338:	f1b8 0f00 	cmp.w	r8, #0
 801b33c:	d004      	beq.n	801b348 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b33e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b342:	682b      	ldr	r3, [r5, #0]
 801b344:	3301      	adds	r3, #1
 801b346:	602b      	str	r3, [r5, #0]
 801b348:	2730      	movs	r7, #48	; 0x30
 801b34a:	2c00      	cmp	r4, #0
 801b34c:	d04e      	beq.n	801b3ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b34e:	682e      	ldr	r6, [r5, #0]
 801b350:	3c01      	subs	r4, #1
 801b352:	42b2      	cmp	r2, r6
 801b354:	b2a4      	uxth	r4, r4
 801b356:	dd49      	ble.n	801b3ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b358:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b35c:	682b      	ldr	r3, [r5, #0]
 801b35e:	3301      	adds	r3, #1
 801b360:	602b      	str	r3, [r5, #0]
 801b362:	e7f2      	b.n	801b34a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b364:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b368:	d01d      	beq.n	801b3a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b36a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b36e:	d002      	beq.n	801b376 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b370:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b374:	e7c9      	b.n	801b30a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b376:	4684      	mov	ip, r0
 801b378:	f04f 0800 	mov.w	r8, #0
 801b37c:	2c00      	cmp	r4, #0
 801b37e:	d0c6      	beq.n	801b30e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b380:	b947      	cbnz	r7, 801b394 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b382:	2801      	cmp	r0, #1
 801b384:	d106      	bne.n	801b394 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b386:	8814      	ldrh	r4, [r2, #0]
 801b388:	2c30      	cmp	r4, #48	; 0x30
 801b38a:	bf02      	ittt	eq
 801b38c:	3202      	addeq	r2, #2
 801b38e:	4638      	moveq	r0, r7
 801b390:	f8cb 2000 	streq.w	r2, [fp]
 801b394:	45bc      	cmp	ip, r7
 801b396:	da14      	bge.n	801b3c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b398:	b2bf      	uxth	r7, r7
 801b39a:	eba7 040c 	sub.w	r4, r7, ip
 801b39e:	46bc      	mov	ip, r7
 801b3a0:	b2a4      	uxth	r4, r4
 801b3a2:	2600      	movs	r6, #0
 801b3a4:	e7b3      	b.n	801b30e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3a6:	4684      	mov	ip, r0
 801b3a8:	b16c      	cbz	r4, 801b3c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b3aa:	42b8      	cmp	r0, r7
 801b3ac:	dd00      	ble.n	801b3b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b3ae:	b2b8      	uxth	r0, r7
 801b3b0:	2400      	movs	r4, #0
 801b3b2:	e003      	b.n	801b3bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b3b4:	f04f 0c01 	mov.w	ip, #1
 801b3b8:	2400      	movs	r4, #0
 801b3ba:	4660      	mov	r0, ip
 801b3bc:	4626      	mov	r6, r4
 801b3be:	46a0      	mov	r8, r4
 801b3c0:	e7a5      	b.n	801b30e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3c2:	2400      	movs	r4, #0
 801b3c4:	e7ed      	b.n	801b3a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b3c6:	4626      	mov	r6, r4
 801b3c8:	46a0      	mov	r8, r4
 801b3ca:	e7a0      	b.n	801b30e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3cc:	2900      	cmp	r1, #0
 801b3ce:	d0b0      	beq.n	801b332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b3d0:	2720      	movs	r7, #32
 801b3d2:	682e      	ldr	r6, [r5, #0]
 801b3d4:	2900      	cmp	r1, #0
 801b3d6:	d0ac      	beq.n	801b332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b3d8:	3901      	subs	r1, #1
 801b3da:	4296      	cmp	r6, r2
 801b3dc:	b289      	uxth	r1, r1
 801b3de:	daa7      	bge.n	801b330 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b3e0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b3e4:	682b      	ldr	r3, [r5, #0]
 801b3e6:	3301      	adds	r3, #1
 801b3e8:	602b      	str	r3, [r5, #0]
 801b3ea:	e7f2      	b.n	801b3d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b3ec:	b188      	cbz	r0, 801b412 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b3ee:	682b      	ldr	r3, [r5, #0]
 801b3f0:	3801      	subs	r0, #1
 801b3f2:	429a      	cmp	r2, r3
 801b3f4:	b280      	uxth	r0, r0
 801b3f6:	dd0c      	ble.n	801b412 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b3f8:	f8db 3000 	ldr.w	r3, [fp]
 801b3fc:	1c9c      	adds	r4, r3, #2
 801b3fe:	f8cb 4000 	str.w	r4, [fp]
 801b402:	881c      	ldrh	r4, [r3, #0]
 801b404:	682b      	ldr	r3, [r5, #0]
 801b406:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b40a:	682b      	ldr	r3, [r5, #0]
 801b40c:	3301      	adds	r3, #1
 801b40e:	602b      	str	r3, [r5, #0]
 801b410:	e7ec      	b.n	801b3ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b412:	2620      	movs	r6, #32
 801b414:	b151      	cbz	r1, 801b42c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b416:	6828      	ldr	r0, [r5, #0]
 801b418:	3901      	subs	r1, #1
 801b41a:	4282      	cmp	r2, r0
 801b41c:	b289      	uxth	r1, r1
 801b41e:	dd05      	ble.n	801b42c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b420:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b424:	682b      	ldr	r3, [r5, #0]
 801b426:	3301      	adds	r3, #1
 801b428:	602b      	str	r3, [r5, #0]
 801b42a:	e7f3      	b.n	801b414 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b42c:	b005      	add	sp, #20
 801b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b432 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b436:	2400      	movs	r4, #0
 801b438:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b43c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b440:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b444:	8014      	strh	r4, [r2, #0]
 801b446:	701c      	strb	r4, [r3, #0]
 801b448:	f888 4000 	strb.w	r4, [r8]
 801b44c:	f88c 4000 	strb.w	r4, [ip]
 801b450:	f88e 4000 	strb.w	r4, [lr]
 801b454:	703c      	strb	r4, [r7, #0]
 801b456:	6804      	ldr	r4, [r0, #0]
 801b458:	b1a4      	cbz	r4, 801b484 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b45a:	8824      	ldrh	r4, [r4, #0]
 801b45c:	f04f 0901 	mov.w	r9, #1
 801b460:	b314      	cbz	r4, 801b4a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b462:	2c2b      	cmp	r4, #43	; 0x2b
 801b464:	d001      	beq.n	801b46a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b466:	2c20      	cmp	r4, #32
 801b468:	d110      	bne.n	801b48c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b46a:	8014      	strh	r4, [r2, #0]
 801b46c:	6804      	ldr	r4, [r0, #0]
 801b46e:	b10c      	cbz	r4, 801b474 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b470:	3402      	adds	r4, #2
 801b472:	6004      	str	r4, [r0, #0]
 801b474:	680c      	ldr	r4, [r1, #0]
 801b476:	b10c      	cbz	r4, 801b47c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b478:	3401      	adds	r4, #1
 801b47a:	600c      	str	r4, [r1, #0]
 801b47c:	6804      	ldr	r4, [r0, #0]
 801b47e:	b17c      	cbz	r4, 801b4a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b480:	8824      	ldrh	r4, [r4, #0]
 801b482:	e7ed      	b.n	801b460 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b484:	680c      	ldr	r4, [r1, #0]
 801b486:	b17c      	cbz	r4, 801b4a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b488:	7824      	ldrb	r4, [r4, #0]
 801b48a:	e7e7      	b.n	801b45c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b48c:	2c2d      	cmp	r4, #45	; 0x2d
 801b48e:	d102      	bne.n	801b496 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b490:	f883 9000 	strb.w	r9, [r3]
 801b494:	e7ea      	b.n	801b46c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b496:	2c23      	cmp	r4, #35	; 0x23
 801b498:	d107      	bne.n	801b4aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b49a:	f888 9000 	strb.w	r9, [r8]
 801b49e:	e7e5      	b.n	801b46c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b4a0:	680c      	ldr	r4, [r1, #0]
 801b4a2:	b10c      	cbz	r4, 801b4a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b4a4:	7824      	ldrb	r4, [r4, #0]
 801b4a6:	e7db      	b.n	801b460 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b4a8:	2400      	movs	r4, #0
 801b4aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b4ae:	2b09      	cmp	r3, #9
 801b4b0:	d901      	bls.n	801b4b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b4b2:	2c2a      	cmp	r4, #42	; 0x2a
 801b4b4:	d122      	bne.n	801b4fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b4b6:	2301      	movs	r3, #1
 801b4b8:	2c30      	cmp	r4, #48	; 0x30
 801b4ba:	f88e 3000 	strb.w	r3, [lr]
 801b4be:	d10d      	bne.n	801b4dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b4c0:	f88c 3000 	strb.w	r3, [ip]
 801b4c4:	6803      	ldr	r3, [r0, #0]
 801b4c6:	b10b      	cbz	r3, 801b4cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b4c8:	3302      	adds	r3, #2
 801b4ca:	6003      	str	r3, [r0, #0]
 801b4cc:	680b      	ldr	r3, [r1, #0]
 801b4ce:	b10b      	cbz	r3, 801b4d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b4d0:	3301      	adds	r3, #1
 801b4d2:	600b      	str	r3, [r1, #0]
 801b4d4:	6803      	ldr	r3, [r0, #0]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d02f      	beq.n	801b53a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b4da:	881c      	ldrh	r4, [r3, #0]
 801b4dc:	2c2a      	cmp	r4, #42	; 0x2a
 801b4de:	d135      	bne.n	801b54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b4e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b4e4:	6033      	str	r3, [r6, #0]
 801b4e6:	6803      	ldr	r3, [r0, #0]
 801b4e8:	b10b      	cbz	r3, 801b4ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b4ea:	3302      	adds	r3, #2
 801b4ec:	6003      	str	r3, [r0, #0]
 801b4ee:	680b      	ldr	r3, [r1, #0]
 801b4f0:	b10b      	cbz	r3, 801b4f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b4f2:	3301      	adds	r3, #1
 801b4f4:	600b      	str	r3, [r1, #0]
 801b4f6:	6803      	ldr	r3, [r0, #0]
 801b4f8:	b31b      	cbz	r3, 801b542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b4fa:	881c      	ldrh	r4, [r3, #0]
 801b4fc:	2c2e      	cmp	r4, #46	; 0x2e
 801b4fe:	d11a      	bne.n	801b536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b500:	2301      	movs	r3, #1
 801b502:	703b      	strb	r3, [r7, #0]
 801b504:	6803      	ldr	r3, [r0, #0]
 801b506:	b10b      	cbz	r3, 801b50c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b508:	3302      	adds	r3, #2
 801b50a:	6003      	str	r3, [r0, #0]
 801b50c:	680b      	ldr	r3, [r1, #0]
 801b50e:	b10b      	cbz	r3, 801b514 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b510:	3301      	adds	r3, #1
 801b512:	600b      	str	r3, [r1, #0]
 801b514:	6803      	ldr	r3, [r0, #0]
 801b516:	2b00      	cmp	r3, #0
 801b518:	d036      	beq.n	801b588 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b51a:	881b      	ldrh	r3, [r3, #0]
 801b51c:	2b2a      	cmp	r3, #42	; 0x2a
 801b51e:	d137      	bne.n	801b590 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b520:	f04f 33ff 	mov.w	r3, #4294967295
 801b524:	602b      	str	r3, [r5, #0]
 801b526:	6803      	ldr	r3, [r0, #0]
 801b528:	b10b      	cbz	r3, 801b52e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b52a:	3302      	adds	r3, #2
 801b52c:	6003      	str	r3, [r0, #0]
 801b52e:	680b      	ldr	r3, [r1, #0]
 801b530:	b10b      	cbz	r3, 801b536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b532:	3301      	adds	r3, #1
 801b534:	600b      	str	r3, [r1, #0]
 801b536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b53a:	680c      	ldr	r4, [r1, #0]
 801b53c:	b134      	cbz	r4, 801b54c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b53e:	7824      	ldrb	r4, [r4, #0]
 801b540:	e7cc      	b.n	801b4dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b542:	680b      	ldr	r3, [r1, #0]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d0f6      	beq.n	801b536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b548:	781c      	ldrb	r4, [r3, #0]
 801b54a:	e7d7      	b.n	801b4fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b54c:	2300      	movs	r3, #0
 801b54e:	220a      	movs	r2, #10
 801b550:	6033      	str	r3, [r6, #0]
 801b552:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b556:	fa1f f38c 	uxth.w	r3, ip
 801b55a:	2b09      	cmp	r3, #9
 801b55c:	d8ce      	bhi.n	801b4fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b55e:	6833      	ldr	r3, [r6, #0]
 801b560:	fb02 c303 	mla	r3, r2, r3, ip
 801b564:	6033      	str	r3, [r6, #0]
 801b566:	6803      	ldr	r3, [r0, #0]
 801b568:	b10b      	cbz	r3, 801b56e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b56a:	3302      	adds	r3, #2
 801b56c:	6003      	str	r3, [r0, #0]
 801b56e:	680b      	ldr	r3, [r1, #0]
 801b570:	b10b      	cbz	r3, 801b576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b572:	3301      	adds	r3, #1
 801b574:	600b      	str	r3, [r1, #0]
 801b576:	6803      	ldr	r3, [r0, #0]
 801b578:	b10b      	cbz	r3, 801b57e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b57a:	881c      	ldrh	r4, [r3, #0]
 801b57c:	e7e9      	b.n	801b552 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b57e:	680c      	ldr	r4, [r1, #0]
 801b580:	2c00      	cmp	r4, #0
 801b582:	d0e6      	beq.n	801b552 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b584:	7824      	ldrb	r4, [r4, #0]
 801b586:	e7e4      	b.n	801b552 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b588:	680b      	ldr	r3, [r1, #0]
 801b58a:	b10b      	cbz	r3, 801b590 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	e7c5      	b.n	801b51c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b590:	2200      	movs	r2, #0
 801b592:	240a      	movs	r4, #10
 801b594:	602a      	str	r2, [r5, #0]
 801b596:	3b30      	subs	r3, #48	; 0x30
 801b598:	682a      	ldr	r2, [r5, #0]
 801b59a:	b29e      	uxth	r6, r3
 801b59c:	2e09      	cmp	r6, #9
 801b59e:	d813      	bhi.n	801b5c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b5a0:	fb04 3302 	mla	r3, r4, r2, r3
 801b5a4:	602b      	str	r3, [r5, #0]
 801b5a6:	6803      	ldr	r3, [r0, #0]
 801b5a8:	b10b      	cbz	r3, 801b5ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b5aa:	3302      	adds	r3, #2
 801b5ac:	6003      	str	r3, [r0, #0]
 801b5ae:	680b      	ldr	r3, [r1, #0]
 801b5b0:	b10b      	cbz	r3, 801b5b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b5b2:	3301      	adds	r3, #1
 801b5b4:	600b      	str	r3, [r1, #0]
 801b5b6:	6803      	ldr	r3, [r0, #0]
 801b5b8:	b10b      	cbz	r3, 801b5be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b5ba:	881b      	ldrh	r3, [r3, #0]
 801b5bc:	e7eb      	b.n	801b596 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5be:	680b      	ldr	r3, [r1, #0]
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d0e8      	beq.n	801b596 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5c4:	781b      	ldrb	r3, [r3, #0]
 801b5c6:	e7e6      	b.n	801b596 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5c8:	2a06      	cmp	r2, #6
 801b5ca:	bfa8      	it	ge
 801b5cc:	2206      	movge	r2, #6
 801b5ce:	602a      	str	r2, [r5, #0]
 801b5d0:	e7b1      	b.n	801b536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b5d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b5d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5d6:	b0a3      	sub	sp, #140	; 0x8c
 801b5d8:	2600      	movs	r6, #0
 801b5da:	4607      	mov	r7, r0
 801b5dc:	4688      	mov	r8, r1
 801b5de:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801b5e2:	4631      	mov	r1, r6
 801b5e4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b5e6:	4648      	mov	r0, r9
 801b5e8:	960d      	str	r6, [sp, #52]	; 0x34
 801b5ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b5ee:	2242      	movs	r2, #66	; 0x42
 801b5f0:	f7fe fc6e 	bl	8019ed0 <_ZN8touchgfx6memsetEPvhm>
 801b5f4:	b15f      	cbz	r7, 801b60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b5f6:	f108 3aff 	add.w	sl, r8, #4294967295
 801b5fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5fe:	b152      	cbz	r2, 801b616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b600:	8812      	ldrh	r2, [r2, #0]
 801b602:	b10a      	cbz	r2, 801b608 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b604:	459a      	cmp	sl, r3
 801b606:	dc2e      	bgt.n	801b666 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b608:	2200      	movs	r2, #0
 801b60a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b60e:	4638      	mov	r0, r7
 801b610:	b023      	add	sp, #140	; 0x8c
 801b612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b616:	9a08      	ldr	r2, [sp, #32]
 801b618:	2a00      	cmp	r2, #0
 801b61a:	d0f5      	beq.n	801b608 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b61c:	7812      	ldrb	r2, [r2, #0]
 801b61e:	e7f0      	b.n	801b602 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b620:	2d00      	cmp	r5, #0
 801b622:	d0ea      	beq.n	801b5fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b624:	782a      	ldrb	r2, [r5, #0]
 801b626:	b142      	cbz	r2, 801b63a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b628:	2a25      	cmp	r2, #37	; 0x25
 801b62a:	d001      	beq.n	801b630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b62c:	459a      	cmp	sl, r3
 801b62e:	dc08      	bgt.n	801b642 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b630:	f1bb 0f00 	cmp.w	fp, #0
 801b634:	d121      	bne.n	801b67a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b636:	2d00      	cmp	r5, #0
 801b638:	d0df      	beq.n	801b5fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b63a:	782a      	ldrb	r2, [r5, #0]
 801b63c:	f04f 0b00 	mov.w	fp, #0
 801b640:	e01d      	b.n	801b67e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b642:	f1bb 0f00 	cmp.w	fp, #0
 801b646:	d077      	beq.n	801b738 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b648:	f8bb 2000 	ldrh.w	r2, [fp]
 801b64c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b650:	f1bb 0f00 	cmp.w	fp, #0
 801b654:	d002      	beq.n	801b65c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b656:	f10b 0202 	add.w	r2, fp, #2
 801b65a:	9209      	str	r2, [sp, #36]	; 0x24
 801b65c:	b10d      	cbz	r5, 801b662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b65e:	3501      	adds	r5, #1
 801b660:	9508      	str	r5, [sp, #32]
 801b662:	3301      	adds	r3, #1
 801b664:	930d      	str	r3, [sp, #52]	; 0x34
 801b666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b668:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b66c:	f1bb 0f00 	cmp.w	fp, #0
 801b670:	d0d6      	beq.n	801b620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b672:	f8bb 2000 	ldrh.w	r2, [fp]
 801b676:	2a00      	cmp	r2, #0
 801b678:	d1d6      	bne.n	801b628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b67a:	f8bb 2000 	ldrh.w	r2, [fp]
 801b67e:	2a00      	cmp	r2, #0
 801b680:	d0bb      	beq.n	801b5fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b682:	459a      	cmp	sl, r3
 801b684:	ddb9      	ble.n	801b5fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b686:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801b68a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801b68e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801b692:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801b696:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801b69a:	960e      	str	r6, [sp, #56]	; 0x38
 801b69c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801b6a0:	960f      	str	r6, [sp, #60]	; 0x3c
 801b6a2:	f1bb 0f00 	cmp.w	fp, #0
 801b6a6:	d002      	beq.n	801b6ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b6a8:	f10b 0302 	add.w	r3, fp, #2
 801b6ac:	9309      	str	r3, [sp, #36]	; 0x24
 801b6ae:	b10d      	cbz	r5, 801b6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b6b0:	1c6b      	adds	r3, r5, #1
 801b6b2:	9308      	str	r3, [sp, #32]
 801b6b4:	ab0f      	add	r3, sp, #60	; 0x3c
 801b6b6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801b6ba:	a908      	add	r1, sp, #32
 801b6bc:	a809      	add	r0, sp, #36	; 0x24
 801b6be:	9305      	str	r3, [sp, #20]
 801b6c0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b6c4:	9304      	str	r3, [sp, #16]
 801b6c6:	ab0e      	add	r3, sp, #56	; 0x38
 801b6c8:	9303      	str	r3, [sp, #12]
 801b6ca:	ab0c      	add	r3, sp, #48	; 0x30
 801b6cc:	9302      	str	r3, [sp, #8]
 801b6ce:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b6d2:	9301      	str	r3, [sp, #4]
 801b6d4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b6d8:	9300      	str	r3, [sp, #0]
 801b6da:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b6de:	f7ff fea8 	bl	801b432 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	bfbf      	itttt	lt
 801b6e8:	6823      	ldrlt	r3, [r4, #0]
 801b6ea:	3404      	addlt	r4, #4
 801b6ec:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b6f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b6f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	bfbe      	ittt	lt
 801b6f8:	6823      	ldrlt	r3, [r4, #0]
 801b6fa:	3404      	addlt	r4, #4
 801b6fc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b700:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b704:	bfb8      	it	lt
 801b706:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b708:	b1d9      	cbz	r1, 801b742 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801b70a:	880b      	ldrh	r3, [r1, #0]
 801b70c:	2b69      	cmp	r3, #105	; 0x69
 801b70e:	d01f      	beq.n	801b750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b710:	d82f      	bhi.n	801b772 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b712:	2b58      	cmp	r3, #88	; 0x58
 801b714:	d01c      	beq.n	801b750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b716:	d818      	bhi.n	801b74a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b718:	2b25      	cmp	r3, #37	; 0x25
 801b71a:	d034      	beq.n	801b786 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b71c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b71e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b722:	f1bb 0f00 	cmp.w	fp, #0
 801b726:	f000 80b7 	beq.w	801b898 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801b72a:	f8bb 5000 	ldrh.w	r5, [fp]
 801b72e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b732:	3301      	adds	r3, #1
 801b734:	930d      	str	r3, [sp, #52]	; 0x34
 801b736:	e029      	b.n	801b78c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b738:	b10d      	cbz	r5, 801b73e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b73a:	782a      	ldrb	r2, [r5, #0]
 801b73c:	e786      	b.n	801b64c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b73e:	462a      	mov	r2, r5
 801b740:	e784      	b.n	801b64c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b742:	2a00      	cmp	r2, #0
 801b744:	d0ea      	beq.n	801b71c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b746:	7813      	ldrb	r3, [r2, #0]
 801b748:	e7e0      	b.n	801b70c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b74a:	3b63      	subs	r3, #99	; 0x63
 801b74c:	2b01      	cmp	r3, #1
 801b74e:	d8e5      	bhi.n	801b71c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b750:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801b754:	b329      	cbz	r1, 801b7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b756:	880b      	ldrh	r3, [r1, #0]
 801b758:	2b69      	cmp	r3, #105	; 0x69
 801b75a:	d063      	beq.n	801b824 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b75c:	d825      	bhi.n	801b7aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b75e:	2b63      	cmp	r3, #99	; 0x63
 801b760:	d038      	beq.n	801b7d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b762:	2b64      	cmp	r3, #100	; 0x64
 801b764:	d05e      	beq.n	801b824 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b766:	2b58      	cmp	r3, #88	; 0x58
 801b768:	d07a      	beq.n	801b860 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b76a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b76e:	4625      	mov	r5, r4
 801b770:	e036      	b.n	801b7e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b772:	2b73      	cmp	r3, #115	; 0x73
 801b774:	d0ec      	beq.n	801b750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b776:	d802      	bhi.n	801b77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b778:	2b6f      	cmp	r3, #111	; 0x6f
 801b77a:	d1cf      	bne.n	801b71c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b77c:	e7e8      	b.n	801b750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b77e:	2b75      	cmp	r3, #117	; 0x75
 801b780:	d0e6      	beq.n	801b750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b782:	2b78      	cmp	r3, #120	; 0x78
 801b784:	e7f9      	b.n	801b77a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b788:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b78e:	b10b      	cbz	r3, 801b794 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b790:	3302      	adds	r3, #2
 801b792:	9309      	str	r3, [sp, #36]	; 0x24
 801b794:	9b08      	ldr	r3, [sp, #32]
 801b796:	2b00      	cmp	r3, #0
 801b798:	f43f af2f 	beq.w	801b5fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b79c:	3301      	adds	r3, #1
 801b79e:	9308      	str	r3, [sp, #32]
 801b7a0:	e72b      	b.n	801b5fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b7a2:	2a00      	cmp	r2, #0
 801b7a4:	d0e1      	beq.n	801b76a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b7a6:	7813      	ldrb	r3, [r2, #0]
 801b7a8:	e7d6      	b.n	801b758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b7aa:	2b73      	cmp	r3, #115	; 0x73
 801b7ac:	d036      	beq.n	801b81c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b7ae:	d807      	bhi.n	801b7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b7b0:	2b6f      	cmp	r3, #111	; 0x6f
 801b7b2:	d1da      	bne.n	801b76a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b7b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b7b6:	1d25      	adds	r5, r4, #4
 801b7b8:	2308      	movs	r3, #8
 801b7ba:	eba8 0202 	sub.w	r2, r8, r2
 801b7be:	e049      	b.n	801b854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b7c0:	2b75      	cmp	r3, #117	; 0x75
 801b7c2:	d042      	beq.n	801b84a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b7c4:	2b78      	cmp	r3, #120	; 0x78
 801b7c6:	d1d0      	bne.n	801b76a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b7c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b7ca:	1d25      	adds	r5, r4, #4
 801b7cc:	2310      	movs	r3, #16
 801b7ce:	eba8 0202 	sub.w	r2, r8, r2
 801b7d2:	e03f      	b.n	801b854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b7d4:	7823      	ldrb	r3, [r4, #0]
 801b7d6:	1d25      	adds	r5, r4, #4
 801b7d8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801b7dc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d051      	beq.n	801b88e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b7ea:	881a      	ldrh	r2, [r3, #0]
 801b7ec:	a80d      	add	r0, sp, #52	; 0x34
 801b7ee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b7f2:	462c      	mov	r4, r5
 801b7f4:	9005      	str	r0, [sp, #20]
 801b7f6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801b7fa:	9004      	str	r0, [sp, #16]
 801b7fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b7fe:	9003      	str	r0, [sp, #12]
 801b800:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801b804:	9002      	str	r0, [sp, #8]
 801b806:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b808:	9001      	str	r0, [sp, #4]
 801b80a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801b80e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b812:	9000      	str	r0, [sp, #0]
 801b814:	a810      	add	r0, sp, #64	; 0x40
 801b816:	f7ff fd49 	bl	801b2ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b81a:	e7b7      	b.n	801b78c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b81c:	1d25      	adds	r5, r4, #4
 801b81e:	6823      	ldr	r3, [r4, #0]
 801b820:	9310      	str	r3, [sp, #64]	; 0x40
 801b822:	e7dd      	b.n	801b7e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b826:	230a      	movs	r3, #10
 801b828:	4649      	mov	r1, r9
 801b82a:	6820      	ldr	r0, [r4, #0]
 801b82c:	eba8 0202 	sub.w	r2, r8, r2
 801b830:	1d25      	adds	r5, r4, #4
 801b832:	b292      	uxth	r2, r2
 801b834:	f7ff fd08 	bl	801b248 <_ZN8touchgfx7Unicode4itoaElPtti>
 801b838:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b83c:	2b2d      	cmp	r3, #45	; 0x2d
 801b83e:	d1cf      	bne.n	801b7e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b840:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b846:	3302      	adds	r3, #2
 801b848:	e7ea      	b.n	801b820 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b84a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b84c:	1d25      	adds	r5, r4, #4
 801b84e:	230a      	movs	r3, #10
 801b850:	eba8 0202 	sub.w	r2, r8, r2
 801b854:	b292      	uxth	r2, r2
 801b856:	4649      	mov	r1, r9
 801b858:	6820      	ldr	r0, [r4, #0]
 801b85a:	f7ff fcd7 	bl	801b20c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b85e:	e7bf      	b.n	801b7e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b862:	2310      	movs	r3, #16
 801b864:	4649      	mov	r1, r9
 801b866:	6820      	ldr	r0, [r4, #0]
 801b868:	eba8 0202 	sub.w	r2, r8, r2
 801b86c:	1d25      	adds	r5, r4, #4
 801b86e:	b292      	uxth	r2, r2
 801b870:	f7ff fccc 	bl	801b20c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b874:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b878:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d0af      	beq.n	801b7e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b880:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b884:	2919      	cmp	r1, #25
 801b886:	d8f7      	bhi.n	801b878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b888:	3b20      	subs	r3, #32
 801b88a:	8013      	strh	r3, [r2, #0]
 801b88c:	e7f4      	b.n	801b878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b88e:	9a08      	ldr	r2, [sp, #32]
 801b890:	2a00      	cmp	r2, #0
 801b892:	d0ab      	beq.n	801b7ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b894:	7812      	ldrb	r2, [r2, #0]
 801b896:	e7a9      	b.n	801b7ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b898:	2d00      	cmp	r5, #0
 801b89a:	f43f af48 	beq.w	801b72e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b89e:	782d      	ldrb	r5, [r5, #0]
 801b8a0:	e745      	b.n	801b72e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b8a2:	b507      	push	{r0, r1, r2, lr}
 801b8a4:	9300      	str	r3, [sp, #0]
 801b8a6:	4613      	mov	r3, r2
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	f7ff fe92 	bl	801b5d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b8ae:	b003      	add	sp, #12
 801b8b0:	f85d fb04 	ldr.w	pc, [sp], #4

0801b8b4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b8b4:	b40c      	push	{r2, r3}
 801b8b6:	b507      	push	{r0, r1, r2, lr}
 801b8b8:	ab04      	add	r3, sp, #16
 801b8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8be:	9301      	str	r3, [sp, #4]
 801b8c0:	f7ff ffef 	bl	801b8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b8c4:	b003      	add	sp, #12
 801b8c6:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8ca:	b002      	add	sp, #8
 801b8cc:	4770      	bx	lr
	...

0801b8d0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b8d0:	4b01      	ldr	r3, [pc, #4]	; (801b8d8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b8d2:	6018      	str	r0, [r3, #0]
 801b8d4:	4770      	bx	lr
 801b8d6:	bf00      	nop
 801b8d8:	2000b40c 	.word	0x2000b40c

0801b8dc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b8dc:	4b07      	ldr	r3, [pc, #28]	; (801b8fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b8de:	881a      	ldrh	r2, [r3, #0]
 801b8e0:	4282      	cmp	r2, r0
 801b8e2:	d809      	bhi.n	801b8f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b8e4:	4b06      	ldr	r3, [pc, #24]	; (801b900 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b8e6:	881b      	ldrh	r3, [r3, #0]
 801b8e8:	4413      	add	r3, r2
 801b8ea:	4298      	cmp	r0, r3
 801b8ec:	da04      	bge.n	801b8f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b8ee:	4b05      	ldr	r3, [pc, #20]	; (801b904 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b8f6:	4770      	bx	lr
 801b8f8:	2000      	movs	r0, #0
 801b8fa:	4770      	bx	lr
 801b8fc:	2000b42c 	.word	0x2000b42c
 801b900:	2000b430 	.word	0x2000b430
 801b904:	2000b410 	.word	0x2000b410

0801b908 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b90c:	4d28      	ldr	r5, [pc, #160]	; (801b9b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b90e:	682b      	ldr	r3, [r5, #0]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d04a      	beq.n	801b9aa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b914:	4a27      	ldr	r2, [pc, #156]	; (801b9b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b916:	4e28      	ldr	r6, [pc, #160]	; (801b9b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b918:	8810      	ldrh	r0, [r2, #0]
 801b91a:	f8b6 8000 	ldrh.w	r8, [r6]
 801b91e:	4c27      	ldr	r4, [pc, #156]	; (801b9bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b920:	4440      	add	r0, r8
 801b922:	4f27      	ldr	r7, [pc, #156]	; (801b9c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b924:	1c41      	adds	r1, r0, #1
 801b926:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801b92a:	f021 0101 	bic.w	r1, r1, #1
 801b92e:	eb03 020e 	add.w	r2, r3, lr
 801b932:	0409      	lsls	r1, r1, #16
 801b934:	6022      	str	r2, [r4, #0]
 801b936:	0c09      	lsrs	r1, r1, #16
 801b938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801b93c:	eb0e 010c 	add.w	r1, lr, ip
 801b940:	185a      	adds	r2, r3, r1
 801b942:	603a      	str	r2, [r7, #0]
 801b944:	220e      	movs	r2, #14
 801b946:	fb02 f208 	mul.w	r2, r2, r8
 801b94a:	3203      	adds	r2, #3
 801b94c:	f022 0203 	bic.w	r2, r2, #3
 801b950:	4411      	add	r1, r2
 801b952:	440b      	add	r3, r1
 801b954:	491b      	ldr	r1, [pc, #108]	; (801b9c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b956:	600b      	str	r3, [r1, #0]
 801b958:	2300      	movs	r3, #0
 801b95a:	491b      	ldr	r1, [pc, #108]	; (801b9c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b95c:	800b      	strh	r3, [r1, #0]
 801b95e:	491b      	ldr	r1, [pc, #108]	; (801b9cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b960:	6809      	ldr	r1, [r1, #0]
 801b962:	eba1 010e 	sub.w	r1, r1, lr
 801b966:	eba1 010c 	sub.w	r1, r1, ip
 801b96a:	469c      	mov	ip, r3
 801b96c:	1a8a      	subs	r2, r1, r2
 801b96e:	4918      	ldr	r1, [pc, #96]	; (801b9d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801b970:	600a      	str	r2, [r1, #0]
 801b972:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b976:	4a17      	ldr	r2, [pc, #92]	; (801b9d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801b978:	8013      	strh	r3, [r2, #0]
 801b97a:	4283      	cmp	r3, r0
 801b97c:	d10d      	bne.n	801b99a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801b97e:	8835      	ldrh	r5, [r6, #0]
 801b980:	2300      	movs	r3, #0
 801b982:	6838      	ldr	r0, [r7, #0]
 801b984:	240e      	movs	r4, #14
 801b986:	429d      	cmp	r5, r3
 801b988:	d90f      	bls.n	801b9aa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801b98a:	fb04 0203 	mla	r2, r4, r3, r0
 801b98e:	3301      	adds	r3, #1
 801b990:	7b11      	ldrb	r1, [r2, #12]
 801b992:	f36f 1145 	bfc	r1, #5, #1
 801b996:	7311      	strb	r1, [r2, #12]
 801b998:	e7f5      	b.n	801b986 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801b99a:	682a      	ldr	r2, [r5, #0]
 801b99c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b9a0:	6822      	ldr	r2, [r4, #0]
 801b9a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b9a6:	3301      	adds	r3, #1
 801b9a8:	e7e7      	b.n	801b97a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801b9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9ae:	bf00      	nop
 801b9b0:	2000b410 	.word	0x2000b410
 801b9b4:	2000b42c 	.word	0x2000b42c
 801b9b8:	2000b430 	.word	0x2000b430
 801b9bc:	2000b424 	.word	0x2000b424
 801b9c0:	2000b414 	.word	0x2000b414
 801b9c4:	2000b41c 	.word	0x2000b41c
 801b9c8:	2000b42e 	.word	0x2000b42e
 801b9cc:	2000b418 	.word	0x2000b418
 801b9d0:	2000b428 	.word	0x2000b428
 801b9d4:	2000b420 	.word	0x2000b420

0801b9d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b9d8:	4b10      	ldr	r3, [pc, #64]	; (801ba1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b9da:	b510      	push	{r4, lr}
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	b9db      	cbnz	r3, 801ba18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b9e0:	b1d1      	cbz	r1, 801ba18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b9e2:	4b0f      	ldr	r3, [pc, #60]	; (801ba20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b9e4:	240e      	movs	r4, #14
 801b9e6:	801a      	strh	r2, [r3, #0]
 801b9e8:	b292      	uxth	r2, r2
 801b9ea:	4b0e      	ldr	r3, [pc, #56]	; (801ba24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b9ec:	881b      	ldrh	r3, [r3, #0]
 801b9ee:	4413      	add	r3, r2
 801b9f0:	4362      	muls	r2, r4
 801b9f2:	2406      	movs	r4, #6
 801b9f4:	fb04 2203 	mla	r2, r4, r3, r2
 801b9f8:	428a      	cmp	r2, r1
 801b9fa:	d305      	bcc.n	801ba08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b9fc:	4b0a      	ldr	r3, [pc, #40]	; (801ba28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b9fe:	2137      	movs	r1, #55	; 0x37
 801ba00:	4a0a      	ldr	r2, [pc, #40]	; (801ba2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ba02:	480b      	ldr	r0, [pc, #44]	; (801ba30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801ba04:	f009 fe7c 	bl	8025700 <__assert_func>
 801ba08:	4b0a      	ldr	r3, [pc, #40]	; (801ba34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801ba0a:	6019      	str	r1, [r3, #0]
 801ba0c:	4b0a      	ldr	r3, [pc, #40]	; (801ba38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801ba0e:	6018      	str	r0, [r3, #0]
 801ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba14:	f7ff bf78 	b.w	801b908 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ba18:	bd10      	pop	{r4, pc}
 801ba1a:	bf00      	nop
 801ba1c:	2000b41c 	.word	0x2000b41c
 801ba20:	2000b430 	.word	0x2000b430
 801ba24:	2000b42c 	.word	0x2000b42c
 801ba28:	0802aae9 	.word	0x0802aae9
 801ba2c:	0802ab42 	.word	0x0802ab42
 801ba30:	0802aac4 	.word	0x0802aac4
 801ba34:	2000b418 	.word	0x2000b418
 801ba38:	2000b410 	.word	0x2000b410

0801ba3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ba3c:	b470      	push	{r4, r5, r6}
 801ba3e:	4c07      	ldr	r4, [pc, #28]	; (801ba5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ba40:	4605      	mov	r5, r0
 801ba42:	4610      	mov	r0, r2
 801ba44:	9a03      	ldr	r2, [sp, #12]
 801ba46:	6826      	ldr	r6, [r4, #0]
 801ba48:	b936      	cbnz	r6, 801ba58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ba4a:	6025      	str	r5, [r4, #0]
 801ba4c:	4c04      	ldr	r4, [pc, #16]	; (801ba60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ba4e:	8021      	strh	r1, [r4, #0]
 801ba50:	4619      	mov	r1, r3
 801ba52:	bc70      	pop	{r4, r5, r6}
 801ba54:	f7ff bfc0 	b.w	801b9d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ba58:	bc70      	pop	{r4, r5, r6}
 801ba5a:	4770      	bx	lr
 801ba5c:	2000b434 	.word	0x2000b434
 801ba60:	2000b42c 	.word	0x2000b42c

0801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ba64:	b508      	push	{r3, lr}
 801ba66:	4b14      	ldr	r3, [pc, #80]	; (801bab8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ba68:	6819      	ldr	r1, [r3, #0]
 801ba6a:	b931      	cbnz	r1, 801ba7a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ba6c:	4b13      	ldr	r3, [pc, #76]	; (801babc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ba6e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801ba72:	4a13      	ldr	r2, [pc, #76]	; (801bac0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ba74:	4813      	ldr	r0, [pc, #76]	; (801bac4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ba76:	f009 fe43 	bl	8025700 <__assert_func>
 801ba7a:	4a13      	ldr	r2, [pc, #76]	; (801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ba7c:	8803      	ldrh	r3, [r0, #0]
 801ba7e:	8812      	ldrh	r2, [r2, #0]
 801ba80:	4293      	cmp	r3, r2
 801ba82:	d204      	bcs.n	801ba8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ba84:	2214      	movs	r2, #20
 801ba86:	fb02 1303 	mla	r3, r2, r3, r1
 801ba8a:	8918      	ldrh	r0, [r3, #8]
 801ba8c:	bd08      	pop	{r3, pc}
 801ba8e:	490f      	ldr	r1, [pc, #60]	; (801bacc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ba90:	8809      	ldrh	r1, [r1, #0]
 801ba92:	4411      	add	r1, r2
 801ba94:	428b      	cmp	r3, r1
 801ba96:	da06      	bge.n	801baa6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ba98:	1a9b      	subs	r3, r3, r2
 801ba9a:	4a0d      	ldr	r2, [pc, #52]	; (801bad0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ba9c:	210e      	movs	r1, #14
 801ba9e:	6812      	ldr	r2, [r2, #0]
 801baa0:	fb01 2303 	mla	r3, r1, r3, r2
 801baa4:	e7f1      	b.n	801ba8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801baa6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801baaa:	4293      	cmp	r3, r2
 801baac:	bf0a      	itet	eq
 801baae:	4b09      	ldreq	r3, [pc, #36]	; (801bad4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bab0:	2000      	movne	r0, #0
 801bab2:	8818      	ldrheq	r0, [r3, #0]
 801bab4:	e7ea      	b.n	801ba8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801bab6:	bf00      	nop
 801bab8:	2000b434 	.word	0x2000b434
 801babc:	08029d50 	.word	0x08029d50
 801bac0:	0802abef 	.word	0x0802abef
 801bac4:	0802aac4 	.word	0x0802aac4
 801bac8:	2000b42c 	.word	0x2000b42c
 801bacc:	2000b430 	.word	0x2000b430
 801bad0:	2000b414 	.word	0x2000b414
 801bad4:	2000b360 	.word	0x2000b360

0801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bad8:	b508      	push	{r3, lr}
 801bada:	4b14      	ldr	r3, [pc, #80]	; (801bb2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801badc:	6819      	ldr	r1, [r3, #0]
 801bade:	b931      	cbnz	r1, 801baee <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bae0:	4b13      	ldr	r3, [pc, #76]	; (801bb30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bae2:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801bae6:	4a13      	ldr	r2, [pc, #76]	; (801bb34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bae8:	4813      	ldr	r0, [pc, #76]	; (801bb38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801baea:	f009 fe09 	bl	8025700 <__assert_func>
 801baee:	4a13      	ldr	r2, [pc, #76]	; (801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801baf0:	8803      	ldrh	r3, [r0, #0]
 801baf2:	8812      	ldrh	r2, [r2, #0]
 801baf4:	4293      	cmp	r3, r2
 801baf6:	d204      	bcs.n	801bb02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801baf8:	2214      	movs	r2, #20
 801bafa:	fb02 1303 	mla	r3, r2, r3, r1
 801bafe:	8958      	ldrh	r0, [r3, #10]
 801bb00:	bd08      	pop	{r3, pc}
 801bb02:	490f      	ldr	r1, [pc, #60]	; (801bb40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bb04:	8809      	ldrh	r1, [r1, #0]
 801bb06:	4411      	add	r1, r2
 801bb08:	428b      	cmp	r3, r1
 801bb0a:	da06      	bge.n	801bb1a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bb0c:	1a9b      	subs	r3, r3, r2
 801bb0e:	4a0d      	ldr	r2, [pc, #52]	; (801bb44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bb10:	210e      	movs	r1, #14
 801bb12:	6812      	ldr	r2, [r2, #0]
 801bb14:	fb01 2303 	mla	r3, r1, r3, r2
 801bb18:	e7f1      	b.n	801bafe <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bb1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bb1e:	4293      	cmp	r3, r2
 801bb20:	bf0a      	itet	eq
 801bb22:	4b09      	ldreq	r3, [pc, #36]	; (801bb48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bb24:	2000      	movne	r0, #0
 801bb26:	8818      	ldrheq	r0, [r3, #0]
 801bb28:	e7ea      	b.n	801bb00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801bb2a:	bf00      	nop
 801bb2c:	2000b434 	.word	0x2000b434
 801bb30:	08029d50 	.word	0x08029d50
 801bb34:	0802ac1b 	.word	0x0802ac1b
 801bb38:	0802aac4 	.word	0x0802aac4
 801bb3c:	2000b42c 	.word	0x2000b42c
 801bb40:	2000b430 	.word	0x2000b430
 801bb44:	2000b414 	.word	0x2000b414
 801bb48:	2000b362 	.word	0x2000b362

0801bb4c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bb4c:	4b23      	ldr	r3, [pc, #140]	; (801bbdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bb4e:	b510      	push	{r4, lr}
 801bb50:	681c      	ldr	r4, [r3, #0]
 801bb52:	b934      	cbnz	r4, 801bb62 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801bb54:	4b22      	ldr	r3, [pc, #136]	; (801bbe0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bb56:	f44f 7148 	mov.w	r1, #800	; 0x320
 801bb5a:	4a22      	ldr	r2, [pc, #136]	; (801bbe4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bb5c:	4822      	ldr	r0, [pc, #136]	; (801bbe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bb5e:	f009 fdcf 	bl	8025700 <__assert_func>
 801bb62:	4a22      	ldr	r2, [pc, #136]	; (801bbec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bb64:	880b      	ldrh	r3, [r1, #0]
 801bb66:	8812      	ldrh	r2, [r2, #0]
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	d211      	bcs.n	801bb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801bb6c:	2214      	movs	r2, #20
 801bb6e:	fb02 4303 	mla	r3, r2, r3, r4
 801bb72:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bb76:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bb7a:	8a1a      	ldrh	r2, [r3, #16]
 801bb7c:	8a5b      	ldrh	r3, [r3, #18]
 801bb7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bb82:	8004      	strh	r4, [r0, #0]
 801bb84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb88:	8041      	strh	r1, [r0, #2]
 801bb8a:	8082      	strh	r2, [r0, #4]
 801bb8c:	80c3      	strh	r3, [r0, #6]
 801bb8e:	e00e      	b.n	801bbae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bb90:	4917      	ldr	r1, [pc, #92]	; (801bbf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801bb92:	8809      	ldrh	r1, [r1, #0]
 801bb94:	4411      	add	r1, r2
 801bb96:	428b      	cmp	r3, r1
 801bb98:	da0a      	bge.n	801bbb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801bb9a:	1a9b      	subs	r3, r3, r2
 801bb9c:	4a15      	ldr	r2, [pc, #84]	; (801bbf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801bb9e:	210e      	movs	r1, #14
 801bba0:	6812      	ldr	r2, [r2, #0]
 801bba2:	fb01 2303 	mla	r3, r1, r3, r2
 801bba6:	681a      	ldr	r2, [r3, #0]
 801bba8:	6002      	str	r2, [r0, #0]
 801bbaa:	685a      	ldr	r2, [r3, #4]
 801bbac:	6042      	str	r2, [r0, #4]
 801bbae:	bd10      	pop	{r4, pc}
 801bbb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bbb4:	4293      	cmp	r3, r2
 801bbb6:	d10b      	bne.n	801bbd0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801bbb8:	4b0f      	ldr	r3, [pc, #60]	; (801bbf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801bbba:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bbbe:	4b0f      	ldr	r3, [pc, #60]	; (801bbfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bbc0:	8081      	strh	r1, [r0, #4]
 801bbc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bbc6:	2300      	movs	r3, #0
 801bbc8:	80c2      	strh	r2, [r0, #6]
 801bbca:	8003      	strh	r3, [r0, #0]
 801bbcc:	8043      	strh	r3, [r0, #2]
 801bbce:	e7ee      	b.n	801bbae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	8003      	strh	r3, [r0, #0]
 801bbd4:	8043      	strh	r3, [r0, #2]
 801bbd6:	8083      	strh	r3, [r0, #4]
 801bbd8:	e7d8      	b.n	801bb8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bbda:	bf00      	nop
 801bbdc:	2000b434 	.word	0x2000b434
 801bbe0:	08029d50 	.word	0x08029d50
 801bbe4:	0802ab88 	.word	0x0802ab88
 801bbe8:	0802aac4 	.word	0x0802aac4
 801bbec:	2000b42c 	.word	0x2000b42c
 801bbf0:	2000b430 	.word	0x2000b430
 801bbf4:	2000b414 	.word	0x2000b414
 801bbf8:	2000b360 	.word	0x2000b360
 801bbfc:	2000b362 	.word	0x2000b362

0801bc00 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bc00:	b508      	push	{r3, lr}
 801bc02:	4b12      	ldr	r3, [pc, #72]	; (801bc4c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bc04:	6819      	ldr	r1, [r3, #0]
 801bc06:	b931      	cbnz	r1, 801bc16 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bc08:	4b11      	ldr	r3, [pc, #68]	; (801bc50 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bc0a:	f44f 7151 	mov.w	r1, #836	; 0x344
 801bc0e:	4a11      	ldr	r2, [pc, #68]	; (801bc54 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bc10:	4811      	ldr	r0, [pc, #68]	; (801bc58 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bc12:	f009 fd75 	bl	8025700 <__assert_func>
 801bc16:	8803      	ldrh	r3, [r0, #0]
 801bc18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc1c:	4293      	cmp	r3, r2
 801bc1e:	d012      	beq.n	801bc46 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bc20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bc24:	4293      	cmp	r3, r2
 801bc26:	d103      	bne.n	801bc30 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bc28:	4b0c      	ldr	r3, [pc, #48]	; (801bc5c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bc2e:	bd08      	pop	{r3, pc}
 801bc30:	4a0b      	ldr	r2, [pc, #44]	; (801bc60 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bc32:	6812      	ldr	r2, [r2, #0]
 801bc34:	b11a      	cbz	r2, 801bc3e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bc36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bc3a:	2800      	cmp	r0, #0
 801bc3c:	d1f7      	bne.n	801bc2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bc3e:	2214      	movs	r2, #20
 801bc40:	4353      	muls	r3, r2
 801bc42:	58c8      	ldr	r0, [r1, r3]
 801bc44:	e7f3      	b.n	801bc2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bc46:	2000      	movs	r0, #0
 801bc48:	e7f1      	b.n	801bc2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bc4a:	bf00      	nop
 801bc4c:	2000b434 	.word	0x2000b434
 801bc50:	08029d50 	.word	0x08029d50
 801bc54:	0802abbe 	.word	0x0802abbe
 801bc58:	0802aac4 	.word	0x0802aac4
 801bc5c:	2000b36c 	.word	0x2000b36c
 801bc60:	2000b410 	.word	0x2000b410

0801bc64 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bc64:	8802      	ldrh	r2, [r0, #0]
 801bc66:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bc6a:	429a      	cmp	r2, r3
 801bc6c:	d840      	bhi.n	801bcf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bc6e:	4b21      	ldr	r3, [pc, #132]	; (801bcf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bc70:	881b      	ldrh	r3, [r3, #0]
 801bc72:	429a      	cmp	r2, r3
 801bc74:	d220      	bcs.n	801bcb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bc76:	4b20      	ldr	r3, [pc, #128]	; (801bcf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bc78:	6819      	ldr	r1, [r3, #0]
 801bc7a:	2314      	movs	r3, #20
 801bc7c:	fb03 1302 	mla	r3, r3, r2, r1
 801bc80:	6858      	ldr	r0, [r3, #4]
 801bc82:	2800      	cmp	r0, #0
 801bc84:	d035      	beq.n	801bcf2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc86:	491d      	ldr	r1, [pc, #116]	; (801bcfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bc88:	6809      	ldr	r1, [r1, #0]
 801bc8a:	2900      	cmp	r1, #0
 801bc8c:	d031      	beq.n	801bcf2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bc92:	b371      	cbz	r1, 801bcf2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc94:	895a      	ldrh	r2, [r3, #10]
 801bc96:	8918      	ldrh	r0, [r3, #8]
 801bc98:	4350      	muls	r0, r2
 801bc9a:	7c5a      	ldrb	r2, [r3, #17]
 801bc9c:	7cdb      	ldrb	r3, [r3, #19]
 801bc9e:	0952      	lsrs	r2, r2, #5
 801bca0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bca4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bca8:	2b0b      	cmp	r3, #11
 801bcaa:	bf18      	it	ne
 801bcac:	0040      	lslne	r0, r0, #1
 801bcae:	3003      	adds	r0, #3
 801bcb0:	f020 0003 	bic.w	r0, r0, #3
 801bcb4:	4408      	add	r0, r1
 801bcb6:	4770      	bx	lr
 801bcb8:	4911      	ldr	r1, [pc, #68]	; (801bd00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bcba:	8809      	ldrh	r1, [r1, #0]
 801bcbc:	4419      	add	r1, r3
 801bcbe:	428a      	cmp	r2, r1
 801bcc0:	da16      	bge.n	801bcf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bcc2:	4910      	ldr	r1, [pc, #64]	; (801bd04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bcc4:	1ad3      	subs	r3, r2, r3
 801bcc6:	200e      	movs	r0, #14
 801bcc8:	6809      	ldr	r1, [r1, #0]
 801bcca:	fb00 1303 	mla	r3, r0, r3, r1
 801bcce:	7b19      	ldrb	r1, [r3, #12]
 801bcd0:	f001 011f 	and.w	r1, r1, #31
 801bcd4:	290b      	cmp	r1, #11
 801bcd6:	d10b      	bne.n	801bcf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bcd8:	8919      	ldrh	r1, [r3, #8]
 801bcda:	8958      	ldrh	r0, [r3, #10]
 801bcdc:	4b07      	ldr	r3, [pc, #28]	; (801bcfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bcde:	4348      	muls	r0, r1
 801bce0:	6819      	ldr	r1, [r3, #0]
 801bce2:	3003      	adds	r0, #3
 801bce4:	f020 0303 	bic.w	r3, r0, #3
 801bce8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bcec:	4418      	add	r0, r3
 801bcee:	4770      	bx	lr
 801bcf0:	2000      	movs	r0, #0
 801bcf2:	4770      	bx	lr
 801bcf4:	2000b42c 	.word	0x2000b42c
 801bcf8:	2000b434 	.word	0x2000b434
 801bcfc:	2000b410 	.word	0x2000b410
 801bd00:	2000b430 	.word	0x2000b430
 801bd04:	2000b414 	.word	0x2000b414

0801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bd08:	4b19      	ldr	r3, [pc, #100]	; (801bd70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bd0a:	6819      	ldr	r1, [r3, #0]
 801bd0c:	8803      	ldrh	r3, [r0, #0]
 801bd0e:	b1e9      	cbz	r1, 801bd4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bd10:	4a18      	ldr	r2, [pc, #96]	; (801bd74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bd12:	8812      	ldrh	r2, [r2, #0]
 801bd14:	429a      	cmp	r2, r3
 801bd16:	d90a      	bls.n	801bd2e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bd18:	2214      	movs	r2, #20
 801bd1a:	fb02 1303 	mla	r3, r2, r3, r1
 801bd1e:	7c58      	ldrb	r0, [r3, #17]
 801bd20:	0942      	lsrs	r2, r0, #5
 801bd22:	7cd8      	ldrb	r0, [r3, #19]
 801bd24:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bd28:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bd2c:	4770      	bx	lr
 801bd2e:	4912      	ldr	r1, [pc, #72]	; (801bd78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801bd30:	8809      	ldrh	r1, [r1, #0]
 801bd32:	4411      	add	r1, r2
 801bd34:	428b      	cmp	r3, r1
 801bd36:	da09      	bge.n	801bd4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bd38:	1a9b      	subs	r3, r3, r2
 801bd3a:	4a10      	ldr	r2, [pc, #64]	; (801bd7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801bd3c:	210e      	movs	r1, #14
 801bd3e:	6812      	ldr	r2, [r2, #0]
 801bd40:	fb01 2303 	mla	r3, r1, r3, r2
 801bd44:	7b18      	ldrb	r0, [r3, #12]
 801bd46:	f000 001f 	and.w	r0, r0, #31
 801bd4a:	4770      	bx	lr
 801bd4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd50:	4293      	cmp	r3, r2
 801bd52:	d10a      	bne.n	801bd6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801bd54:	4b0a      	ldr	r3, [pc, #40]	; (801bd80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bd5c:	b10a      	cbz	r2, 801bd62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801bd5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801bd60:	b900      	cbnz	r0, 801bd64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801bd62:	6898      	ldr	r0, [r3, #8]
 801bd64:	6803      	ldr	r3, [r0, #0]
 801bd66:	6a1b      	ldr	r3, [r3, #32]
 801bd68:	4718      	bx	r3
 801bd6a:	2000      	movs	r0, #0
 801bd6c:	4770      	bx	lr
 801bd6e:	bf00      	nop
 801bd70:	2000b434 	.word	0x2000b434
 801bd74:	2000b42c 	.word	0x2000b42c
 801bd78:	2000b430 	.word	0x2000b430
 801bd7c:	2000b414 	.word	0x2000b414
 801bd80:	2000b36c 	.word	0x2000b36c

0801bd84 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801bd84:	2018      	movs	r0, #24
 801bd86:	4770      	bx	lr

0801bd88 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801bd88:	2001      	movs	r0, #1
 801bd8a:	4770      	bx	lr

0801bd8c <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801bd8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801bd90:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801bd94:	4770      	bx	lr

0801bd96 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801bd96:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801bd9a:	4770      	bx	lr

0801bd9c <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801bd9c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801bda0:	4770      	bx	lr

0801bda2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801bda2:	b2c8      	uxtb	r0, r1
 801bda4:	4770      	bx	lr

0801bda6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bda6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdaa:	b085      	sub	sp, #20
 801bdac:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801bdae:	9203      	str	r2, [sp, #12]
 801bdb0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bdb4:	6878      	ldr	r0, [r7, #4]
 801bdb6:	9201      	str	r2, [sp, #4]
 801bdb8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801bdba:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801bdbe:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801bdc2:	fa1f fc84 	uxth.w	ip, r4
 801bdc6:	43e4      	mvns	r4, r4
 801bdc8:	9100      	str	r1, [sp, #0]
 801bdca:	b2e4      	uxtb	r4, r4
 801bdcc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bdd0:	fb00 2505 	mla	r5, r0, r5, r2
 801bdd4:	683a      	ldr	r2, [r7, #0]
 801bdd6:	6877      	ldr	r7, [r6, #4]
 801bdd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bddc:	3704      	adds	r7, #4
 801bdde:	4415      	add	r5, r2
 801bde0:	6832      	ldr	r2, [r6, #0]
 801bde2:	9202      	str	r2, [sp, #8]
 801bde4:	9a00      	ldr	r2, [sp, #0]
 801bde6:	2a00      	cmp	r2, #0
 801bde8:	dc03      	bgt.n	801bdf2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801bdea:	9a03      	ldr	r2, [sp, #12]
 801bdec:	2a00      	cmp	r2, #0
 801bdee:	f340 8116 	ble.w	801c01e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bdf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bdf4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bdf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bdfa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	dd0f      	ble.n	801be22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801be02:	1406      	asrs	r6, r0, #16
 801be04:	d406      	bmi.n	801be14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801be06:	4546      	cmp	r6, r8
 801be08:	da04      	bge.n	801be14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801be0a:	1416      	asrs	r6, r2, #16
 801be0c:	d402      	bmi.n	801be14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801be0e:	9901      	ldr	r1, [sp, #4]
 801be10:	428e      	cmp	r6, r1
 801be12:	db07      	blt.n	801be24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801be14:	9911      	ldr	r1, [sp, #68]	; 0x44
 801be16:	3b01      	subs	r3, #1
 801be18:	3503      	adds	r5, #3
 801be1a:	4408      	add	r0, r1
 801be1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801be1e:	440a      	add	r2, r1
 801be20:	e7ed      	b.n	801bdfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801be22:	d011      	beq.n	801be48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801be24:	1e5e      	subs	r6, r3, #1
 801be26:	9911      	ldr	r1, [sp, #68]	; 0x44
 801be28:	fb01 0e06 	mla	lr, r1, r6, r0
 801be2c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801be30:	d548      	bpl.n	801bec4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801be32:	4699      	mov	r9, r3
 801be34:	462e      	mov	r6, r5
 801be36:	f1b9 0f00 	cmp.w	r9, #0
 801be3a:	f300 809e 	bgt.w	801bf7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801be3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be46:	441d      	add	r5, r3
 801be48:	9b00      	ldr	r3, [sp, #0]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	f340 80e7 	ble.w	801c01e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801be50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be56:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be5e:	eef0 6a62 	vmov.f32	s13, s5
 801be62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801be66:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be6e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801be72:	eef0 6a43 	vmov.f32	s13, s6
 801be76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be7a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801be7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be82:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be86:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be96:	ee12 2a90 	vmov	r2, s5
 801be9a:	eef0 2a47 	vmov.f32	s5, s14
 801be9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bea2:	ee13 2a10 	vmov	r2, s6
 801bea6:	9311      	str	r3, [sp, #68]	; 0x44
 801bea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801beaa:	eeb0 3a67 	vmov.f32	s6, s15
 801beae:	fb92 f3f3 	sdiv	r3, r2, r3
 801beb2:	9312      	str	r3, [sp, #72]	; 0x48
 801beb4:	9b00      	ldr	r3, [sp, #0]
 801beb6:	9a03      	ldr	r2, [sp, #12]
 801beb8:	3b01      	subs	r3, #1
 801beba:	9300      	str	r3, [sp, #0]
 801bebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bebe:	bf08      	it	eq
 801bec0:	4613      	moveq	r3, r2
 801bec2:	e78f      	b.n	801bde4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801bec4:	45c6      	cmp	lr, r8
 801bec6:	dab4      	bge.n	801be32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bec8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801beca:	fb01 2606 	mla	r6, r1, r6, r2
 801bece:	1436      	asrs	r6, r6, #16
 801bed0:	d4af      	bmi.n	801be32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bed2:	9901      	ldr	r1, [sp, #4]
 801bed4:	428e      	cmp	r6, r1
 801bed6:	daac      	bge.n	801be32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bed8:	1cee      	adds	r6, r5, #3
 801beda:	4699      	mov	r9, r3
 801bedc:	f1b9 0f00 	cmp.w	r9, #0
 801bee0:	f106 0603 	add.w	r6, r6, #3
 801bee4:	ddab      	ble.n	801be3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801bee6:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801beea:	9902      	ldr	r1, [sp, #8]
 801beec:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bef0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bef4:	fb08 1e0e 	mla	lr, r8, lr, r1
 801bef8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801befa:	fb1b fb04 	smulbb	fp, fp, r4
 801befe:	f109 39ff 	add.w	r9, r9, #4294967295
 801bf02:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801bf06:	4408      	add	r0, r1
 801bf08:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bf0a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bf0e:	440a      	add	r2, r1
 801bf10:	eb07 0a0e 	add.w	sl, r7, lr
 801bf14:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bf18:	fb0e be0c 	mla	lr, lr, ip, fp
 801bf1c:	fa1f fe8e 	uxth.w	lr, lr
 801bf20:	f10e 0b01 	add.w	fp, lr, #1
 801bf24:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf28:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801bf2c:	fb1b fb04 	smulbb	fp, fp, r4
 801bf30:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf34:	f806 ec06 	strb.w	lr, [r6, #-6]
 801bf38:	f89a e001 	ldrb.w	lr, [sl, #1]
 801bf3c:	fb0e be0c 	mla	lr, lr, ip, fp
 801bf40:	fa1f fe8e 	uxth.w	lr, lr
 801bf44:	f10e 0b01 	add.w	fp, lr, #1
 801bf48:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf4c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf50:	f806 ec05 	strb.w	lr, [r6, #-5]
 801bf54:	f89a e002 	ldrb.w	lr, [sl, #2]
 801bf58:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bf5c:	fb1a fa04 	smulbb	sl, sl, r4
 801bf60:	fb0e ae0c 	mla	lr, lr, ip, sl
 801bf64:	fa1f fe8e 	uxth.w	lr, lr
 801bf68:	f10e 0a01 	add.w	sl, lr, #1
 801bf6c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801bf70:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf74:	f806 ec04 	strb.w	lr, [r6, #-4]
 801bf78:	e7b0      	b.n	801bedc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bf7a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bf7e:	d446      	bmi.n	801c00e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf80:	45c2      	cmp	sl, r8
 801bf82:	da44      	bge.n	801c00e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf84:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801bf88:	d441      	bmi.n	801c00e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf8a:	9901      	ldr	r1, [sp, #4]
 801bf8c:	458e      	cmp	lr, r1
 801bf8e:	da3e      	bge.n	801c00e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bf90:	9902      	ldr	r1, [sp, #8]
 801bf92:	f896 b000 	ldrb.w	fp, [r6]
 801bf96:	fb08 1e0e 	mla	lr, r8, lr, r1
 801bf9a:	fb1b fb04 	smulbb	fp, fp, r4
 801bf9e:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801bfa2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bfa6:	eb07 0a0e 	add.w	sl, r7, lr
 801bfaa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bfae:	fb0e be0c 	mla	lr, lr, ip, fp
 801bfb2:	fa1f fe8e 	uxth.w	lr, lr
 801bfb6:	f10e 0b01 	add.w	fp, lr, #1
 801bfba:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bfbe:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bfc2:	fb1b fb04 	smulbb	fp, fp, r4
 801bfc6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bfca:	f886 e000 	strb.w	lr, [r6]
 801bfce:	f89a e001 	ldrb.w	lr, [sl, #1]
 801bfd2:	fb0e be0c 	mla	lr, lr, ip, fp
 801bfd6:	fa1f fe8e 	uxth.w	lr, lr
 801bfda:	f10e 0b01 	add.w	fp, lr, #1
 801bfde:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bfe2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bfe6:	f886 e001 	strb.w	lr, [r6, #1]
 801bfea:	f89a e002 	ldrb.w	lr, [sl, #2]
 801bfee:	f896 a002 	ldrb.w	sl, [r6, #2]
 801bff2:	fb1a fa04 	smulbb	sl, sl, r4
 801bff6:	fb0e ae0c 	mla	lr, lr, ip, sl
 801bffa:	fa1f fe8e 	uxth.w	lr, lr
 801bffe:	f10e 0a01 	add.w	sl, lr, #1
 801c002:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c006:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c00a:	f886 e002 	strb.w	lr, [r6, #2]
 801c00e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c010:	3603      	adds	r6, #3
 801c012:	f109 39ff 	add.w	r9, r9, #4294967295
 801c016:	4408      	add	r0, r1
 801c018:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c01a:	440a      	add	r2, r1
 801c01c:	e70b      	b.n	801be36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801c01e:	b005      	add	sp, #20
 801c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c024 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c028:	b085      	sub	sp, #20
 801c02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c02e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c030:	9203      	str	r2, [sp, #12]
 801c032:	6870      	ldr	r0, [r6, #4]
 801c034:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c036:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c03a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c03e:	9101      	str	r1, [sp, #4]
 801c040:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c044:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801c048:	fb00 2404 	mla	r4, r0, r4, r2
 801c04c:	6832      	ldr	r2, [r6, #0]
 801c04e:	686e      	ldr	r6, [r5, #4]
 801c050:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c054:	3604      	adds	r6, #4
 801c056:	4414      	add	r4, r2
 801c058:	682a      	ldr	r2, [r5, #0]
 801c05a:	9202      	str	r2, [sp, #8]
 801c05c:	9a01      	ldr	r2, [sp, #4]
 801c05e:	2a00      	cmp	r2, #0
 801c060:	dc03      	bgt.n	801c06a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801c062:	9a03      	ldr	r2, [sp, #12]
 801c064:	2a00      	cmp	r2, #0
 801c066:	f340 80b2 	ble.w	801c1ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c06a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c06c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c070:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c072:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c076:	2b00      	cmp	r3, #0
 801c078:	dd0c      	ble.n	801c094 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c07a:	1405      	asrs	r5, r0, #16
 801c07c:	d405      	bmi.n	801c08a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c07e:	4575      	cmp	r5, lr
 801c080:	da03      	bge.n	801c08a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c082:	1415      	asrs	r5, r2, #16
 801c084:	d401      	bmi.n	801c08a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c086:	4545      	cmp	r5, r8
 801c088:	db05      	blt.n	801c096 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c08a:	4460      	add	r0, ip
 801c08c:	443a      	add	r2, r7
 801c08e:	3b01      	subs	r3, #1
 801c090:	3403      	adds	r4, #3
 801c092:	e7f0      	b.n	801c076 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801c094:	d03d      	beq.n	801c112 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c096:	1e5d      	subs	r5, r3, #1
 801c098:	fb0c 0905 	mla	r9, ip, r5, r0
 801c09c:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c0a0:	d42c      	bmi.n	801c0fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c0a2:	45f1      	cmp	r9, lr
 801c0a4:	da2a      	bge.n	801c0fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c0a6:	fb07 2505 	mla	r5, r7, r5, r2
 801c0aa:	142d      	asrs	r5, r5, #16
 801c0ac:	d426      	bmi.n	801c0fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c0ae:	4545      	cmp	r5, r8
 801c0b0:	da24      	bge.n	801c0fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c0b2:	1ce5      	adds	r5, r4, #3
 801c0b4:	469a      	mov	sl, r3
 801c0b6:	f1ba 0f00 	cmp.w	sl, #0
 801c0ba:	f105 0503 	add.w	r5, r5, #3
 801c0be:	dd23      	ble.n	801c108 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c0c0:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c0c4:	9902      	ldr	r1, [sp, #8]
 801c0c6:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c0ca:	443a      	add	r2, r7
 801c0cc:	fb0e 1909 	mla	r9, lr, r9, r1
 801c0d0:	4460      	add	r0, ip
 801c0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c0d6:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c0da:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c0de:	eb06 0b09 	add.w	fp, r6, r9
 801c0e2:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c0e6:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c0ea:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c0ee:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c0f2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c0f6:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c0fa:	e7dc      	b.n	801c0b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c0fc:	2500      	movs	r5, #0
 801c0fe:	eba3 0905 	sub.w	r9, r3, r5
 801c102:	f1b9 0f00 	cmp.w	r9, #0
 801c106:	dc3c      	bgt.n	801c182 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c108:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c10c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c110:	441c      	add	r4, r3
 801c112:	9b01      	ldr	r3, [sp, #4]
 801c114:	2b00      	cmp	r3, #0
 801c116:	dd5a      	ble.n	801c1ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c118:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c11c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c11e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c122:	eeb0 6a62 	vmov.f32	s12, s5
 801c126:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c12a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c12e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c132:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c136:	eeb0 6a43 	vmov.f32	s12, s6
 801c13a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c13e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c142:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c146:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c14a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c14e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c152:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c156:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c15a:	ee12 2a90 	vmov	r2, s5
 801c15e:	eef0 2a47 	vmov.f32	s5, s14
 801c162:	fb92 fcf3 	sdiv	ip, r2, r3
 801c166:	ee13 2a10 	vmov	r2, s6
 801c16a:	eeb0 3a67 	vmov.f32	s6, s15
 801c16e:	fb92 f7f3 	sdiv	r7, r2, r3
 801c172:	9b01      	ldr	r3, [sp, #4]
 801c174:	9a03      	ldr	r2, [sp, #12]
 801c176:	3b01      	subs	r3, #1
 801c178:	9301      	str	r3, [sp, #4]
 801c17a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c17c:	bf08      	it	eq
 801c17e:	4613      	moveq	r3, r2
 801c180:	e76c      	b.n	801c05c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c182:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c186:	d41e      	bmi.n	801c1c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c188:	45f2      	cmp	sl, lr
 801c18a:	da1c      	bge.n	801c1c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c18c:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c190:	d419      	bmi.n	801c1c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c192:	45c1      	cmp	r9, r8
 801c194:	da17      	bge.n	801c1c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c196:	9902      	ldr	r1, [sp, #8]
 801c198:	fb0e 1909 	mla	r9, lr, r9, r1
 801c19c:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c1a0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c1a4:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c1a8:	eb06 0a09 	add.w	sl, r6, r9
 801c1ac:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c1b0:	f804 b009 	strb.w	fp, [r4, r9]
 801c1b4:	44a1      	add	r9, r4
 801c1b6:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c1ba:	f889 b001 	strb.w	fp, [r9, #1]
 801c1be:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c1c2:	f889 a002 	strb.w	sl, [r9, #2]
 801c1c6:	4460      	add	r0, ip
 801c1c8:	443a      	add	r2, r7
 801c1ca:	3501      	adds	r5, #1
 801c1cc:	e797      	b.n	801c0fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c1ce:	b005      	add	sp, #20
 801c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d8:	b087      	sub	sp, #28
 801c1da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1de:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c1e0:	9204      	str	r2, [sp, #16]
 801c1e2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c1e6:	6870      	ldr	r0, [r6, #4]
 801c1e8:	9205      	str	r2, [sp, #20]
 801c1ea:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c1ec:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c1f0:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c1f4:	9101      	str	r1, [sp, #4]
 801c1f6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c1fa:	fb00 2505 	mla	r5, r0, r5, r2
 801c1fe:	6832      	ldr	r2, [r6, #0]
 801c200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c204:	4415      	add	r5, r2
 801c206:	6822      	ldr	r2, [r4, #0]
 801c208:	9202      	str	r2, [sp, #8]
 801c20a:	6862      	ldr	r2, [r4, #4]
 801c20c:	3204      	adds	r2, #4
 801c20e:	9203      	str	r2, [sp, #12]
 801c210:	9a01      	ldr	r2, [sp, #4]
 801c212:	2a00      	cmp	r2, #0
 801c214:	dc03      	bgt.n	801c21e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c216:	9a04      	ldr	r2, [sp, #16]
 801c218:	2a00      	cmp	r2, #0
 801c21a:	f340 8124 	ble.w	801c466 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c21e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c220:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c226:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	dd0e      	ble.n	801c24c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c22e:	1422      	asrs	r2, r4, #16
 801c230:	d405      	bmi.n	801c23e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c232:	4572      	cmp	r2, lr
 801c234:	da03      	bge.n	801c23e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c236:	1402      	asrs	r2, r0, #16
 801c238:	d401      	bmi.n	801c23e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c23a:	4542      	cmp	r2, r8
 801c23c:	db07      	blt.n	801c24e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c23e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c240:	3b01      	subs	r3, #1
 801c242:	3503      	adds	r5, #3
 801c244:	4414      	add	r4, r2
 801c246:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c248:	4410      	add	r0, r2
 801c24a:	e7ee      	b.n	801c22a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c24c:	d010      	beq.n	801c270 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c24e:	1e5a      	subs	r2, r3, #1
 801c250:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c252:	fb06 4602 	mla	r6, r6, r2, r4
 801c256:	1436      	asrs	r6, r6, #16
 801c258:	d546      	bpl.n	801c2e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c25a:	4699      	mov	r9, r3
 801c25c:	462f      	mov	r7, r5
 801c25e:	f1b9 0f00 	cmp.w	r9, #0
 801c262:	f300 80a5 	bgt.w	801c3b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c26a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c26e:	441d      	add	r5, r3
 801c270:	9b01      	ldr	r3, [sp, #4]
 801c272:	2b00      	cmp	r3, #0
 801c274:	f340 80f7 	ble.w	801c466 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c278:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c27e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c282:	eeb0 6a62 	vmov.f32	s12, s5
 801c286:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c28a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c28e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c292:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c296:	eeb0 6a43 	vmov.f32	s12, s6
 801c29a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c29e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c2a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c2a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c2ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2ba:	ee12 2a90 	vmov	r2, s5
 801c2be:	eef0 2a47 	vmov.f32	s5, s14
 801c2c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2c6:	ee13 2a10 	vmov	r2, s6
 801c2ca:	9313      	str	r3, [sp, #76]	; 0x4c
 801c2cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2ce:	eeb0 3a67 	vmov.f32	s6, s15
 801c2d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2d6:	9314      	str	r3, [sp, #80]	; 0x50
 801c2d8:	9b01      	ldr	r3, [sp, #4]
 801c2da:	9a04      	ldr	r2, [sp, #16]
 801c2dc:	3b01      	subs	r3, #1
 801c2de:	9301      	str	r3, [sp, #4]
 801c2e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2e2:	bf08      	it	eq
 801c2e4:	4613      	moveq	r3, r2
 801c2e6:	e793      	b.n	801c210 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c2e8:	4576      	cmp	r6, lr
 801c2ea:	dab6      	bge.n	801c25a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c2ec:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c2ee:	fb06 0202 	mla	r2, r6, r2, r0
 801c2f2:	1412      	asrs	r2, r2, #16
 801c2f4:	d4b1      	bmi.n	801c25a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c2f6:	4542      	cmp	r2, r8
 801c2f8:	daaf      	bge.n	801c25a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c2fa:	1cef      	adds	r7, r5, #3
 801c2fc:	4699      	mov	r9, r3
 801c2fe:	f1b9 0f00 	cmp.w	r9, #0
 801c302:	ddb0      	ble.n	801c266 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c304:	9902      	ldr	r1, [sp, #8]
 801c306:	1402      	asrs	r2, r0, #16
 801c308:	1426      	asrs	r6, r4, #16
 801c30a:	fb0e 1202 	mla	r2, lr, r2, r1
 801c30e:	9903      	ldr	r1, [sp, #12]
 801c310:	5d92      	ldrb	r2, [r2, r6]
 801c312:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c316:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c31a:	d041      	beq.n	801c3a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c31c:	9a05      	ldr	r2, [sp, #20]
 801c31e:	fa5f fb86 	uxtb.w	fp, r6
 801c322:	fb02 fc0c 	mul.w	ip, r2, ip
 801c326:	f10c 0201 	add.w	r2, ip, #1
 801c32a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c32e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c332:	1212      	asrs	r2, r2, #8
 801c334:	fa1f fa82 	uxth.w	sl, r2
 801c338:	43d2      	mvns	r2, r2
 801c33a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c33e:	b2d2      	uxtb	r2, r2
 801c340:	fb0c bc02 	mla	ip, ip, r2, fp
 801c344:	fa1f fc8c 	uxth.w	ip, ip
 801c348:	f10c 0b01 	add.w	fp, ip, #1
 801c34c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c350:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c354:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c358:	fb1b fb0a 	smulbb	fp, fp, sl
 801c35c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c360:	fb16 fa0a 	smulbb	sl, r6, sl
 801c364:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c368:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c36c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c370:	fb06 aa02 	mla	sl, r6, r2, sl
 801c374:	fb0c bc02 	mla	ip, ip, r2, fp
 801c378:	fa1f fa8a 	uxth.w	sl, sl
 801c37c:	fa1f fc8c 	uxth.w	ip, ip
 801c380:	f10a 0601 	add.w	r6, sl, #1
 801c384:	f10c 0b01 	add.w	fp, ip, #1
 801c388:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c38c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c390:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c394:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c398:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c39c:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c3a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c3a2:	3703      	adds	r7, #3
 801c3a4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3a8:	4414      	add	r4, r2
 801c3aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c3ac:	4410      	add	r0, r2
 801c3ae:	e7a6      	b.n	801c2fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c3b0:	1426      	asrs	r6, r4, #16
 801c3b2:	d450      	bmi.n	801c456 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c3b4:	4576      	cmp	r6, lr
 801c3b6:	da4e      	bge.n	801c456 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c3b8:	1402      	asrs	r2, r0, #16
 801c3ba:	d44c      	bmi.n	801c456 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c3bc:	4542      	cmp	r2, r8
 801c3be:	da4a      	bge.n	801c456 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c3c0:	9902      	ldr	r1, [sp, #8]
 801c3c2:	fb0e 1202 	mla	r2, lr, r2, r1
 801c3c6:	9903      	ldr	r1, [sp, #12]
 801c3c8:	5d92      	ldrb	r2, [r2, r6]
 801c3ca:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c3ce:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c3d2:	d040      	beq.n	801c456 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c3d4:	9a05      	ldr	r2, [sp, #20]
 801c3d6:	fa5f fb86 	uxtb.w	fp, r6
 801c3da:	fb02 fc0c 	mul.w	ip, r2, ip
 801c3de:	f10c 0201 	add.w	r2, ip, #1
 801c3e2:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c3e6:	f897 c000 	ldrb.w	ip, [r7]
 801c3ea:	1212      	asrs	r2, r2, #8
 801c3ec:	fa1f fa82 	uxth.w	sl, r2
 801c3f0:	43d2      	mvns	r2, r2
 801c3f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c3f6:	b2d2      	uxtb	r2, r2
 801c3f8:	fb0c bc02 	mla	ip, ip, r2, fp
 801c3fc:	fa1f fc8c 	uxth.w	ip, ip
 801c400:	f10c 0b01 	add.w	fp, ip, #1
 801c404:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c408:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c40c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c410:	fb1b fb0a 	smulbb	fp, fp, sl
 801c414:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c418:	fb16 fa0a 	smulbb	sl, r6, sl
 801c41c:	78be      	ldrb	r6, [r7, #2]
 801c41e:	f887 c000 	strb.w	ip, [r7]
 801c422:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c426:	fb06 aa02 	mla	sl, r6, r2, sl
 801c42a:	fb0c bc02 	mla	ip, ip, r2, fp
 801c42e:	fa1f fa8a 	uxth.w	sl, sl
 801c432:	fa1f fc8c 	uxth.w	ip, ip
 801c436:	f10a 0601 	add.w	r6, sl, #1
 801c43a:	f10c 0b01 	add.w	fp, ip, #1
 801c43e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c442:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c446:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c44a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c44e:	f887 a002 	strb.w	sl, [r7, #2]
 801c452:	f887 c001 	strb.w	ip, [r7, #1]
 801c456:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c458:	3703      	adds	r7, #3
 801c45a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c45e:	4414      	add	r4, r2
 801c460:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c462:	4410      	add	r0, r2
 801c464:	e6fb      	b.n	801c25e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c466:	b007      	add	sp, #28
 801c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c46c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c470:	b085      	sub	sp, #20
 801c472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c476:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c478:	9203      	str	r2, [sp, #12]
 801c47a:	6870      	ldr	r0, [r6, #4]
 801c47c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c47e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c482:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c486:	9100      	str	r1, [sp, #0]
 801c488:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c48c:	fb00 2404 	mla	r4, r0, r4, r2
 801c490:	6832      	ldr	r2, [r6, #0]
 801c492:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c496:	4414      	add	r4, r2
 801c498:	682a      	ldr	r2, [r5, #0]
 801c49a:	9201      	str	r2, [sp, #4]
 801c49c:	686a      	ldr	r2, [r5, #4]
 801c49e:	3204      	adds	r2, #4
 801c4a0:	9202      	str	r2, [sp, #8]
 801c4a2:	9a00      	ldr	r2, [sp, #0]
 801c4a4:	2a00      	cmp	r2, #0
 801c4a6:	dc03      	bgt.n	801c4b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c4a8:	9a03      	ldr	r2, [sp, #12]
 801c4aa:	2a00      	cmp	r2, #0
 801c4ac:	f340 8131 	ble.w	801c712 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c4b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c4b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c4b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c4b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	dd0e      	ble.n	801c4de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c4c0:	1405      	asrs	r5, r0, #16
 801c4c2:	d405      	bmi.n	801c4d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c4c4:	4575      	cmp	r5, lr
 801c4c6:	da03      	bge.n	801c4d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c4c8:	1415      	asrs	r5, r2, #16
 801c4ca:	d401      	bmi.n	801c4d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c4cc:	4545      	cmp	r5, r8
 801c4ce:	db07      	blt.n	801c4e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c4d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c4d2:	3b01      	subs	r3, #1
 801c4d4:	3403      	adds	r4, #3
 801c4d6:	4428      	add	r0, r5
 801c4d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c4da:	442a      	add	r2, r5
 801c4dc:	e7ee      	b.n	801c4bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c4de:	d06f      	beq.n	801c5c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c4e0:	1e5d      	subs	r5, r3, #1
 801c4e2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c4e4:	fb06 0605 	mla	r6, r6, r5, r0
 801c4e8:	1436      	asrs	r6, r6, #16
 801c4ea:	d460      	bmi.n	801c5ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4ec:	4576      	cmp	r6, lr
 801c4ee:	da5e      	bge.n	801c5ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4f0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c4f2:	fb06 2505 	mla	r5, r6, r5, r2
 801c4f6:	142d      	asrs	r5, r5, #16
 801c4f8:	d459      	bmi.n	801c5ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4fa:	4545      	cmp	r5, r8
 801c4fc:	da57      	bge.n	801c5ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c4fe:	1ce5      	adds	r5, r4, #3
 801c500:	469a      	mov	sl, r3
 801c502:	f1ba 0f00 	cmp.w	sl, #0
 801c506:	dd56      	ble.n	801c5b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c508:	9901      	ldr	r1, [sp, #4]
 801c50a:	1416      	asrs	r6, r2, #16
 801c50c:	1407      	asrs	r7, r0, #16
 801c50e:	fb0e 1606 	mla	r6, lr, r6, r1
 801c512:	9902      	ldr	r1, [sp, #8]
 801c514:	5df6      	ldrb	r6, [r6, r7]
 801c516:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c51a:	0e37      	lsrs	r7, r6, #24
 801c51c:	2fff      	cmp	r7, #255	; 0xff
 801c51e:	f000 80ef 	beq.w	801c700 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c522:	fa5f fc87 	uxtb.w	ip, r7
 801c526:	b3d7      	cbz	r7, 801c59e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c528:	fa1f f78c 	uxth.w	r7, ip
 801c52c:	ea6f 0c0c 	mvn.w	ip, ip
 801c530:	fa5f fb86 	uxtb.w	fp, r6
 801c534:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c538:	fa5f fc8c 	uxtb.w	ip, ip
 801c53c:	fb1b fb07 	smulbb	fp, fp, r7
 801c540:	fb09 b90c 	mla	r9, r9, ip, fp
 801c544:	fa1f f989 	uxth.w	r9, r9
 801c548:	f109 0b01 	add.w	fp, r9, #1
 801c54c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c550:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c554:	fb1b fb0c 	smulbb	fp, fp, ip
 801c558:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c55c:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c560:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c564:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c568:	fb09 b907 	mla	r9, r9, r7, fp
 801c56c:	fa1f f989 	uxth.w	r9, r9
 801c570:	f109 0b01 	add.w	fp, r9, #1
 801c574:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c578:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c57c:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c580:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c584:	fb19 fc0c 	smulbb	ip, r9, ip
 801c588:	fb06 c607 	mla	r6, r6, r7, ip
 801c58c:	b2b6      	uxth	r6, r6
 801c58e:	f106 0c01 	add.w	ip, r6, #1
 801c592:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c596:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c59a:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c59e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c5a0:	3503      	adds	r5, #3
 801c5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c5a6:	4408      	add	r0, r1
 801c5a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c5aa:	440a      	add	r2, r1
 801c5ac:	e7a9      	b.n	801c502 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c5ae:	2600      	movs	r6, #0
 801c5b0:	1b9d      	subs	r5, r3, r6
 801c5b2:	2d00      	cmp	r5, #0
 801c5b4:	dc40      	bgt.n	801c638 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c5b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5be:	441c      	add	r4, r3
 801c5c0:	9b00      	ldr	r3, [sp, #0]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	f340 80a5 	ble.w	801c712 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c5c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5d2:	eeb0 6a62 	vmov.f32	s12, s5
 801c5d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c5e6:	eeb0 6a43 	vmov.f32	s12, s6
 801c5ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c5f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c602:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c606:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c60a:	ee12 2a90 	vmov	r2, s5
 801c60e:	eef0 2a47 	vmov.f32	s5, s14
 801c612:	fb92 f3f3 	sdiv	r3, r2, r3
 801c616:	ee13 2a10 	vmov	r2, s6
 801c61a:	9311      	str	r3, [sp, #68]	; 0x44
 801c61c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c61e:	eeb0 3a67 	vmov.f32	s6, s15
 801c622:	fb92 f3f3 	sdiv	r3, r2, r3
 801c626:	9312      	str	r3, [sp, #72]	; 0x48
 801c628:	9b00      	ldr	r3, [sp, #0]
 801c62a:	9a03      	ldr	r2, [sp, #12]
 801c62c:	3b01      	subs	r3, #1
 801c62e:	9300      	str	r3, [sp, #0]
 801c630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c632:	bf08      	it	eq
 801c634:	4613      	moveq	r3, r2
 801c636:	e734      	b.n	801c4a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c638:	1407      	asrs	r7, r0, #16
 801c63a:	d450      	bmi.n	801c6de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c63c:	4577      	cmp	r7, lr
 801c63e:	da4e      	bge.n	801c6de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c640:	1415      	asrs	r5, r2, #16
 801c642:	d44c      	bmi.n	801c6de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c644:	4545      	cmp	r5, r8
 801c646:	da4a      	bge.n	801c6de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c648:	9901      	ldr	r1, [sp, #4]
 801c64a:	fb0e 1505 	mla	r5, lr, r5, r1
 801c64e:	9902      	ldr	r1, [sp, #8]
 801c650:	5ded      	ldrb	r5, [r5, r7]
 801c652:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c656:	0e2f      	lsrs	r7, r5, #24
 801c658:	2fff      	cmp	r7, #255	; 0xff
 801c65a:	d046      	beq.n	801c6ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c65c:	fa5f f987 	uxtb.w	r9, r7
 801c660:	b3ef      	cbz	r7, 801c6de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c662:	fa1f fc89 	uxth.w	ip, r9
 801c666:	ea6f 0909 	mvn.w	r9, r9
 801c66a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c66e:	fa5f fb85 	uxtb.w	fp, r5
 801c672:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c676:	fa5f f989 	uxtb.w	r9, r9
 801c67a:	fb1b fb0c 	smulbb	fp, fp, ip
 801c67e:	fb0a ba09 	mla	sl, sl, r9, fp
 801c682:	fa1f fa8a 	uxth.w	sl, sl
 801c686:	f10a 0b01 	add.w	fp, sl, #1
 801c68a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c68e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c692:	f804 a007 	strb.w	sl, [r4, r7]
 801c696:	4427      	add	r7, r4
 801c698:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c69c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c6a0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c6a4:	fb1b fb09 	smulbb	fp, fp, r9
 801c6a8:	fb0a ba0c 	mla	sl, sl, ip, fp
 801c6ac:	fa1f fa8a 	uxth.w	sl, sl
 801c6b0:	f10a 0b01 	add.w	fp, sl, #1
 801c6b4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c6b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6bc:	f887 a001 	strb.w	sl, [r7, #1]
 801c6c0:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c6c4:	fb1a f909 	smulbb	r9, sl, r9
 801c6c8:	fb05 950c 	mla	r5, r5, ip, r9
 801c6cc:	b2ad      	uxth	r5, r5
 801c6ce:	f105 0901 	add.w	r9, r5, #1
 801c6d2:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c6d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6da:	f887 9002 	strb.w	r9, [r7, #2]
 801c6de:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c6e0:	3601      	adds	r6, #1
 801c6e2:	4408      	add	r0, r1
 801c6e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c6e6:	440a      	add	r2, r1
 801c6e8:	e762      	b.n	801c5b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c6ea:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c6ee:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801c6f2:	55e5      	strb	r5, [r4, r7]
 801c6f4:	4427      	add	r7, r4
 801c6f6:	0c2d      	lsrs	r5, r5, #16
 801c6f8:	f887 c001 	strb.w	ip, [r7, #1]
 801c6fc:	70bd      	strb	r5, [r7, #2]
 801c6fe:	e7ee      	b.n	801c6de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c700:	0a37      	lsrs	r7, r6, #8
 801c702:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c706:	0c36      	lsrs	r6, r6, #16
 801c708:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c70c:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c710:	e745      	b.n	801c59e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c712:	b005      	add	sp, #20
 801c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c718 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c71c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c71e:	9201      	str	r2, [sp, #4]
 801c720:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c724:	6870      	ldr	r0, [r6, #4]
 801c726:	9200      	str	r2, [sp, #0]
 801c728:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c72c:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801c730:	fa1f fc85 	uxth.w	ip, r5
 801c734:	43ed      	mvns	r5, r5
 801c736:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c73a:	b2ed      	uxtb	r5, r5
 801c73c:	fb00 2404 	mla	r4, r0, r4, r2
 801c740:	6832      	ldr	r2, [r6, #0]
 801c742:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c746:	4414      	add	r4, r2
 801c748:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c74a:	f8d2 8000 	ldr.w	r8, [r2]
 801c74e:	2900      	cmp	r1, #0
 801c750:	dc03      	bgt.n	801c75a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801c752:	9a01      	ldr	r2, [sp, #4]
 801c754:	2a00      	cmp	r2, #0
 801c756:	f340 8104 	ble.w	801c962 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c75a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c75c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c762:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c766:	2b00      	cmp	r3, #0
 801c768:	dd0f      	ble.n	801c78a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c76a:	1406      	asrs	r6, r0, #16
 801c76c:	d406      	bmi.n	801c77c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c76e:	4576      	cmp	r6, lr
 801c770:	da04      	bge.n	801c77c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c772:	1416      	asrs	r6, r2, #16
 801c774:	d402      	bmi.n	801c77c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c776:	9f00      	ldr	r7, [sp, #0]
 801c778:	42be      	cmp	r6, r7
 801c77a:	db07      	blt.n	801c78c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c77c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c77e:	3b01      	subs	r3, #1
 801c780:	3403      	adds	r4, #3
 801c782:	4430      	add	r0, r6
 801c784:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c786:	4432      	add	r2, r6
 801c788:	e7ed      	b.n	801c766 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c78a:	d05f      	beq.n	801c84c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801c78c:	1e5e      	subs	r6, r3, #1
 801c78e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c790:	fb07 0706 	mla	r7, r7, r6, r0
 801c794:	143f      	asrs	r7, r7, #16
 801c796:	d450      	bmi.n	801c83a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c798:	4577      	cmp	r7, lr
 801c79a:	da4e      	bge.n	801c83a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c79c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c79e:	fb07 2606 	mla	r6, r7, r6, r2
 801c7a2:	1436      	asrs	r6, r6, #16
 801c7a4:	d449      	bmi.n	801c83a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c7a6:	9f00      	ldr	r7, [sp, #0]
 801c7a8:	42be      	cmp	r6, r7
 801c7aa:	da46      	bge.n	801c83a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c7ac:	1ce6      	adds	r6, r4, #3
 801c7ae:	4699      	mov	r9, r3
 801c7b0:	f1b9 0f00 	cmp.w	r9, #0
 801c7b4:	f106 0603 	add.w	r6, r6, #3
 801c7b8:	dd43      	ble.n	801c842 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c7ba:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c7be:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c7c2:	1417      	asrs	r7, r2, #16
 801c7c4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c7c8:	fb1b fb05 	smulbb	fp, fp, r5
 801c7cc:	fb0e a707 	mla	r7, lr, r7, sl
 801c7d0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c7d4:	eb08 0a07 	add.w	sl, r8, r7
 801c7d8:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c7dc:	fb07 b70c 	mla	r7, r7, ip, fp
 801c7e0:	b2bf      	uxth	r7, r7
 801c7e2:	f107 0b01 	add.w	fp, r7, #1
 801c7e6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c7ea:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c7ee:	fb1b fb05 	smulbb	fp, fp, r5
 801c7f2:	123f      	asrs	r7, r7, #8
 801c7f4:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c7f8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c7fc:	fb07 b70c 	mla	r7, r7, ip, fp
 801c800:	b2bf      	uxth	r7, r7
 801c802:	f107 0b01 	add.w	fp, r7, #1
 801c806:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c80a:	123f      	asrs	r7, r7, #8
 801c80c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c810:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c814:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c818:	fb1a fa05 	smulbb	sl, sl, r5
 801c81c:	fb07 a70c 	mla	r7, r7, ip, sl
 801c820:	b2bf      	uxth	r7, r7
 801c822:	f107 0a01 	add.w	sl, r7, #1
 801c826:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c82a:	123f      	asrs	r7, r7, #8
 801c82c:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c830:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c832:	4438      	add	r0, r7
 801c834:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c836:	443a      	add	r2, r7
 801c838:	e7ba      	b.n	801c7b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c83a:	2700      	movs	r7, #0
 801c83c:	1bde      	subs	r6, r3, r7
 801c83e:	2e00      	cmp	r6, #0
 801c840:	dc3f      	bgt.n	801c8c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c842:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c84a:	441c      	add	r4, r3
 801c84c:	2900      	cmp	r1, #0
 801c84e:	f340 8088 	ble.w	801c962 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c858:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c85c:	3901      	subs	r1, #1
 801c85e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c862:	eef0 6a62 	vmov.f32	s13, s5
 801c866:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c86a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c86e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c872:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c876:	eef0 6a43 	vmov.f32	s13, s6
 801c87a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c87e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c882:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c886:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c88a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c88e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c892:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c896:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c89a:	ee12 2a90 	vmov	r2, s5
 801c89e:	eef0 2a47 	vmov.f32	s5, s14
 801c8a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8a6:	ee13 2a10 	vmov	r2, s6
 801c8aa:	930f      	str	r3, [sp, #60]	; 0x3c
 801c8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c8ae:	eeb0 3a67 	vmov.f32	s6, s15
 801c8b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8b6:	9a01      	ldr	r2, [sp, #4]
 801c8b8:	9310      	str	r3, [sp, #64]	; 0x40
 801c8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c8bc:	bf08      	it	eq
 801c8be:	4613      	moveq	r3, r2
 801c8c0:	e745      	b.n	801c74e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c8c2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c8c6:	d446      	bmi.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8c8:	45f2      	cmp	sl, lr
 801c8ca:	da44      	bge.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8cc:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c8d0:	d441      	bmi.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8d2:	9e00      	ldr	r6, [sp, #0]
 801c8d4:	45b1      	cmp	r9, r6
 801c8d6:	da3e      	bge.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c8d8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c8dc:	fb0e a909 	mla	r9, lr, r9, sl
 801c8e0:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c8e4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c8e8:	fb1b fb05 	smulbb	fp, fp, r5
 801c8ec:	eb08 0a09 	add.w	sl, r8, r9
 801c8f0:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c8f4:	fb09 b90c 	mla	r9, r9, ip, fp
 801c8f8:	fa1f f989 	uxth.w	r9, r9
 801c8fc:	f109 0b01 	add.w	fp, r9, #1
 801c900:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c904:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c908:	f804 9006 	strb.w	r9, [r4, r6]
 801c90c:	4426      	add	r6, r4
 801c90e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c912:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c916:	fb1b fb05 	smulbb	fp, fp, r5
 801c91a:	fb09 b90c 	mla	r9, r9, ip, fp
 801c91e:	fa1f f989 	uxth.w	r9, r9
 801c922:	f109 0b01 	add.w	fp, r9, #1
 801c926:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c92a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c92e:	f886 9001 	strb.w	r9, [r6, #1]
 801c932:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c936:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c93a:	fb1a fa05 	smulbb	sl, sl, r5
 801c93e:	fb09 a90c 	mla	r9, r9, ip, sl
 801c942:	fa1f f989 	uxth.w	r9, r9
 801c946:	f109 0a01 	add.w	sl, r9, #1
 801c94a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c94e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c952:	f886 9002 	strb.w	r9, [r6, #2]
 801c956:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c958:	3701      	adds	r7, #1
 801c95a:	4430      	add	r0, r6
 801c95c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c95e:	4432      	add	r2, r6
 801c960:	e76c      	b.n	801c83c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c962:	b003      	add	sp, #12
 801c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c968 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c96c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c972:	9201      	str	r2, [sp, #4]
 801c974:	6868      	ldr	r0, [r5, #4]
 801c976:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c97a:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c97e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c982:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c986:	fb00 2404 	mla	r4, r0, r4, r2
 801c98a:	682a      	ldr	r2, [r5, #0]
 801c98c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c990:	4414      	add	r4, r2
 801c992:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c994:	f8d2 9000 	ldr.w	r9, [r2]
 801c998:	2900      	cmp	r1, #0
 801c99a:	dc03      	bgt.n	801c9a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c99c:	9a01      	ldr	r2, [sp, #4]
 801c99e:	2a00      	cmp	r2, #0
 801c9a0:	f340 80a8 	ble.w	801caf4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c9a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c9a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c9aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c9ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	dd0c      	ble.n	801c9ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c9b4:	1405      	asrs	r5, r0, #16
 801c9b6:	d405      	bmi.n	801c9c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c9b8:	4565      	cmp	r5, ip
 801c9ba:	da03      	bge.n	801c9c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c9bc:	1415      	asrs	r5, r2, #16
 801c9be:	d401      	bmi.n	801c9c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c9c0:	4575      	cmp	r5, lr
 801c9c2:	db05      	blt.n	801c9d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c9c4:	4438      	add	r0, r7
 801c9c6:	4432      	add	r2, r6
 801c9c8:	3b01      	subs	r3, #1
 801c9ca:	3403      	adds	r4, #3
 801c9cc:	e7f0      	b.n	801c9b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c9ce:	d03a      	beq.n	801ca46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c9d0:	1e5d      	subs	r5, r3, #1
 801c9d2:	fb07 0805 	mla	r8, r7, r5, r0
 801c9d6:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c9da:	d429      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9dc:	45e0      	cmp	r8, ip
 801c9de:	da27      	bge.n	801ca30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9e0:	fb06 2505 	mla	r5, r6, r5, r2
 801c9e4:	142d      	asrs	r5, r5, #16
 801c9e6:	d423      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9e8:	4575      	cmp	r5, lr
 801c9ea:	da21      	bge.n	801ca30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c9ec:	f104 0803 	add.w	r8, r4, #3
 801c9f0:	469a      	mov	sl, r3
 801c9f2:	f1ba 0f00 	cmp.w	sl, #0
 801c9f6:	f108 0803 	add.w	r8, r8, #3
 801c9fa:	dd1f      	ble.n	801ca3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c9fc:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801ca00:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca04:	1415      	asrs	r5, r2, #16
 801ca06:	4438      	add	r0, r7
 801ca08:	4432      	add	r2, r6
 801ca0a:	fb0c b505 	mla	r5, ip, r5, fp
 801ca0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca12:	eb09 0b05 	add.w	fp, r9, r5
 801ca16:	f819 5005 	ldrb.w	r5, [r9, r5]
 801ca1a:	f808 5c06 	strb.w	r5, [r8, #-6]
 801ca1e:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801ca22:	f808 5c05 	strb.w	r5, [r8, #-5]
 801ca26:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801ca2a:	f808 5c04 	strb.w	r5, [r8, #-4]
 801ca2e:	e7e0      	b.n	801c9f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ca30:	2500      	movs	r5, #0
 801ca32:	eba3 0805 	sub.w	r8, r3, r5
 801ca36:	f1b8 0f00 	cmp.w	r8, #0
 801ca3a:	dc38      	bgt.n	801caae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801ca3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca44:	441c      	add	r4, r3
 801ca46:	2900      	cmp	r1, #0
 801ca48:	dd54      	ble.n	801caf4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ca4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca54:	3901      	subs	r1, #1
 801ca56:	eeb0 6a62 	vmov.f32	s12, s5
 801ca5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca66:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ca6a:	eeb0 6a43 	vmov.f32	s12, s6
 801ca6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca72:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ca76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca8e:	ee12 2a90 	vmov	r2, s5
 801ca92:	eef0 2a47 	vmov.f32	s5, s14
 801ca96:	fb92 f7f3 	sdiv	r7, r2, r3
 801ca9a:	ee13 2a10 	vmov	r2, s6
 801ca9e:	eeb0 3a67 	vmov.f32	s6, s15
 801caa2:	fb92 f6f3 	sdiv	r6, r2, r3
 801caa6:	9a01      	ldr	r2, [sp, #4]
 801caa8:	bf08      	it	eq
 801caaa:	4613      	moveq	r3, r2
 801caac:	e774      	b.n	801c998 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801caae:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cab2:	d41b      	bmi.n	801caec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cab4:	45e2      	cmp	sl, ip
 801cab6:	da19      	bge.n	801caec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cab8:	ea5f 4822 	movs.w	r8, r2, asr #16
 801cabc:	d416      	bmi.n	801caec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cabe:	45f0      	cmp	r8, lr
 801cac0:	da14      	bge.n	801caec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cac2:	fb0c a808 	mla	r8, ip, r8, sl
 801cac6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801caca:	f819 b008 	ldrb.w	fp, [r9, r8]
 801cace:	eb09 0a08 	add.w	sl, r9, r8
 801cad2:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801cad6:	f804 b008 	strb.w	fp, [r4, r8]
 801cada:	44a0      	add	r8, r4
 801cadc:	f89a b001 	ldrb.w	fp, [sl, #1]
 801cae0:	f888 b001 	strb.w	fp, [r8, #1]
 801cae4:	f89a a002 	ldrb.w	sl, [sl, #2]
 801cae8:	f888 a002 	strb.w	sl, [r8, #2]
 801caec:	4438      	add	r0, r7
 801caee:	4432      	add	r2, r6
 801caf0:	3501      	adds	r5, #1
 801caf2:	e79e      	b.n	801ca32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801caf4:	b003      	add	sp, #12
 801caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cafa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cafa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cafe:	b085      	sub	sp, #20
 801cb00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb04:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb06:	9202      	str	r2, [sp, #8]
 801cb08:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cb0c:	6860      	ldr	r0, [r4, #4]
 801cb0e:	9203      	str	r2, [sp, #12]
 801cb10:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801cb14:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801cb18:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cb1c:	fb00 2505 	mla	r5, r0, r5, r2
 801cb20:	6822      	ldr	r2, [r4, #0]
 801cb22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb26:	4415      	add	r5, r2
 801cb28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cb2a:	6812      	ldr	r2, [r2, #0]
 801cb2c:	9201      	str	r2, [sp, #4]
 801cb2e:	2900      	cmp	r1, #0
 801cb30:	dc03      	bgt.n	801cb3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801cb32:	9a02      	ldr	r2, [sp, #8]
 801cb34:	2a00      	cmp	r2, #0
 801cb36:	f340 811c 	ble.w	801cd72 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cb3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb3c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cb40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb42:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	dd0e      	ble.n	801cb68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cb4a:	1422      	asrs	r2, r4, #16
 801cb4c:	d405      	bmi.n	801cb5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cb4e:	4572      	cmp	r2, lr
 801cb50:	da03      	bge.n	801cb5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cb52:	1402      	asrs	r2, r0, #16
 801cb54:	d401      	bmi.n	801cb5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cb56:	4542      	cmp	r2, r8
 801cb58:	db07      	blt.n	801cb6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801cb5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb5c:	3b01      	subs	r3, #1
 801cb5e:	3503      	adds	r5, #3
 801cb60:	4414      	add	r4, r2
 801cb62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb64:	4410      	add	r0, r2
 801cb66:	e7ee      	b.n	801cb46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cb68:	d072      	beq.n	801cc50 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801cb6a:	1e5a      	subs	r2, r3, #1
 801cb6c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cb6e:	fb06 4602 	mla	r6, r6, r2, r4
 801cb72:	1436      	asrs	r6, r6, #16
 801cb74:	d461      	bmi.n	801cc3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb76:	4576      	cmp	r6, lr
 801cb78:	da5f      	bge.n	801cc3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb7a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cb7c:	fb06 0202 	mla	r2, r6, r2, r0
 801cb80:	1412      	asrs	r2, r2, #16
 801cb82:	d45a      	bmi.n	801cc3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb84:	4542      	cmp	r2, r8
 801cb86:	da58      	bge.n	801cc3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cb88:	1cef      	adds	r7, r5, #3
 801cb8a:	4699      	mov	r9, r3
 801cb8c:	f1b9 0f00 	cmp.w	r9, #0
 801cb90:	dd59      	ble.n	801cc46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cb92:	1426      	asrs	r6, r4, #16
 801cb94:	1402      	asrs	r2, r0, #16
 801cb96:	fb0e 6202 	mla	r2, lr, r2, r6
 801cb9a:	9e01      	ldr	r6, [sp, #4]
 801cb9c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cba0:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cba4:	d041      	beq.n	801cc2a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801cba6:	9a03      	ldr	r2, [sp, #12]
 801cba8:	fa5f fb86 	uxtb.w	fp, r6
 801cbac:	fb02 fc0c 	mul.w	ip, r2, ip
 801cbb0:	f10c 0201 	add.w	r2, ip, #1
 801cbb4:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cbb8:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cbbc:	1212      	asrs	r2, r2, #8
 801cbbe:	fa1f fa82 	uxth.w	sl, r2
 801cbc2:	43d2      	mvns	r2, r2
 801cbc4:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbc8:	b2d2      	uxtb	r2, r2
 801cbca:	fb0c bc02 	mla	ip, ip, r2, fp
 801cbce:	fa1f fc8c 	uxth.w	ip, ip
 801cbd2:	f10c 0b01 	add.w	fp, ip, #1
 801cbd6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cbda:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cbde:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cbe2:	fb1b fb0a 	smulbb	fp, fp, sl
 801cbe6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cbea:	fb16 fa0a 	smulbb	sl, r6, sl
 801cbee:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cbf2:	f807 cc03 	strb.w	ip, [r7, #-3]
 801cbf6:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801cbfa:	fb06 aa02 	mla	sl, r6, r2, sl
 801cbfe:	fb0c bc02 	mla	ip, ip, r2, fp
 801cc02:	fa1f fa8a 	uxth.w	sl, sl
 801cc06:	fa1f fc8c 	uxth.w	ip, ip
 801cc0a:	f10a 0601 	add.w	r6, sl, #1
 801cc0e:	f10c 0b01 	add.w	fp, ip, #1
 801cc12:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cc16:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cc1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cc1e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cc22:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cc26:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cc2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc2c:	3703      	adds	r7, #3
 801cc2e:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc32:	4414      	add	r4, r2
 801cc34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc36:	4410      	add	r0, r2
 801cc38:	e7a8      	b.n	801cb8c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cc3a:	f04f 0c00 	mov.w	ip, #0
 801cc3e:	eba3 020c 	sub.w	r2, r3, ip
 801cc42:	2a00      	cmp	r2, #0
 801cc44:	dc3d      	bgt.n	801ccc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cc46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc4e:	441d      	add	r5, r3
 801cc50:	2900      	cmp	r1, #0
 801cc52:	f340 808e 	ble.w	801cd72 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cc56:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc60:	3901      	subs	r1, #1
 801cc62:	eeb0 6a62 	vmov.f32	s12, s5
 801cc66:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc72:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cc76:	eeb0 6a43 	vmov.f32	s12, s6
 801cc7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc7e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cc82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc9a:	ee12 2a90 	vmov	r2, s5
 801cc9e:	eef0 2a47 	vmov.f32	s5, s14
 801cca2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cca6:	ee13 2a10 	vmov	r2, s6
 801ccaa:	9311      	str	r3, [sp, #68]	; 0x44
 801ccac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccae:	eeb0 3a67 	vmov.f32	s6, s15
 801ccb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccb6:	9a02      	ldr	r2, [sp, #8]
 801ccb8:	9312      	str	r3, [sp, #72]	; 0x48
 801ccba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccbc:	bf08      	it	eq
 801ccbe:	4613      	moveq	r3, r2
 801ccc0:	e735      	b.n	801cb2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801ccc2:	1426      	asrs	r6, r4, #16
 801ccc4:	d44e      	bmi.n	801cd64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccc6:	4576      	cmp	r6, lr
 801ccc8:	da4c      	bge.n	801cd64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccca:	1402      	asrs	r2, r0, #16
 801cccc:	d44a      	bmi.n	801cd64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccce:	4542      	cmp	r2, r8
 801ccd0:	da48      	bge.n	801cd64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ccd2:	fb0e 6202 	mla	r2, lr, r2, r6
 801ccd6:	9e01      	ldr	r6, [sp, #4]
 801ccd8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ccdc:	0e3a      	lsrs	r2, r7, #24
 801ccde:	d041      	beq.n	801cd64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cce0:	9e03      	ldr	r6, [sp, #12]
 801cce2:	fa5f fb87 	uxtb.w	fp, r7
 801cce6:	4372      	muls	r2, r6
 801cce8:	1c56      	adds	r6, r2, #1
 801ccea:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ccee:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801ccf2:	1212      	asrs	r2, r2, #8
 801ccf4:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ccf8:	fa1f fa82 	uxth.w	sl, r2
 801ccfc:	43d2      	mvns	r2, r2
 801ccfe:	fb1b fb0a 	smulbb	fp, fp, sl
 801cd02:	b2d2      	uxtb	r2, r2
 801cd04:	fb09 b902 	mla	r9, r9, r2, fp
 801cd08:	fa1f f989 	uxth.w	r9, r9
 801cd0c:	f109 0b01 	add.w	fp, r9, #1
 801cd10:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cd14:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cd18:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cd1c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cd20:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd24:	fb17 fa0a 	smulbb	sl, r7, sl
 801cd28:	f805 9006 	strb.w	r9, [r5, r6]
 801cd2c:	442e      	add	r6, r5
 801cd2e:	78b7      	ldrb	r7, [r6, #2]
 801cd30:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cd34:	fb07 aa02 	mla	sl, r7, r2, sl
 801cd38:	fb09 b902 	mla	r9, r9, r2, fp
 801cd3c:	fa1f fa8a 	uxth.w	sl, sl
 801cd40:	fa1f f989 	uxth.w	r9, r9
 801cd44:	f10a 0701 	add.w	r7, sl, #1
 801cd48:	f109 0b01 	add.w	fp, r9, #1
 801cd4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cd50:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cd54:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cd58:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd5c:	f886 a002 	strb.w	sl, [r6, #2]
 801cd60:	f886 9001 	strb.w	r9, [r6, #1]
 801cd64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd66:	f10c 0c01 	add.w	ip, ip, #1
 801cd6a:	4414      	add	r4, r2
 801cd6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd6e:	4410      	add	r0, r2
 801cd70:	e765      	b.n	801cc3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801cd72:	b005      	add	sp, #20
 801cd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd7c:	b085      	sub	sp, #20
 801cd7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cd84:	9203      	str	r2, [sp, #12]
 801cd86:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801cd8a:	6860      	ldr	r0, [r4, #4]
 801cd8c:	9201      	str	r2, [sp, #4]
 801cd8e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801cd92:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cd96:	fb00 2505 	mla	r5, r0, r5, r2
 801cd9a:	6822      	ldr	r2, [r4, #0]
 801cd9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cda0:	4415      	add	r5, r2
 801cda2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cda4:	6812      	ldr	r2, [r2, #0]
 801cda6:	9202      	str	r2, [sp, #8]
 801cda8:	2900      	cmp	r1, #0
 801cdaa:	dc03      	bgt.n	801cdb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cdac:	9a03      	ldr	r2, [sp, #12]
 801cdae:	2a00      	cmp	r2, #0
 801cdb0:	f340 8122 	ble.w	801cff8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801cdb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cdb6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cdba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cdbc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	dd0f      	ble.n	801cde4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cdc4:	1422      	asrs	r2, r4, #16
 801cdc6:	d406      	bmi.n	801cdd6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cdc8:	4572      	cmp	r2, lr
 801cdca:	da04      	bge.n	801cdd6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cdcc:	1402      	asrs	r2, r0, #16
 801cdce:	d402      	bmi.n	801cdd6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cdd0:	9e01      	ldr	r6, [sp, #4]
 801cdd2:	42b2      	cmp	r2, r6
 801cdd4:	db07      	blt.n	801cde6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cdd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cdd8:	3b01      	subs	r3, #1
 801cdda:	3503      	adds	r5, #3
 801cddc:	4414      	add	r4, r2
 801cdde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cde0:	4410      	add	r0, r2
 801cde2:	e7ed      	b.n	801cdc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801cde4:	d06e      	beq.n	801cec4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cde6:	1e5a      	subs	r2, r3, #1
 801cde8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cdea:	fb06 4602 	mla	r6, r6, r2, r4
 801cdee:	1436      	asrs	r6, r6, #16
 801cdf0:	d45d      	bmi.n	801ceae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cdf2:	4576      	cmp	r6, lr
 801cdf4:	da5b      	bge.n	801ceae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cdf6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cdf8:	fb06 0202 	mla	r2, r6, r2, r0
 801cdfc:	1412      	asrs	r2, r2, #16
 801cdfe:	d456      	bmi.n	801ceae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ce00:	9e01      	ldr	r6, [sp, #4]
 801ce02:	42b2      	cmp	r2, r6
 801ce04:	da53      	bge.n	801ceae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ce06:	1cee      	adds	r6, r5, #3
 801ce08:	469a      	mov	sl, r3
 801ce0a:	f1ba 0f00 	cmp.w	sl, #0
 801ce0e:	dd54      	ble.n	801ceba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ce10:	1427      	asrs	r7, r4, #16
 801ce12:	1402      	asrs	r2, r0, #16
 801ce14:	fb0e 7202 	mla	r2, lr, r2, r7
 801ce18:	9f02      	ldr	r7, [sp, #8]
 801ce1a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ce1e:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801ce22:	d03c      	beq.n	801ce9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ce24:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ce28:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ce2c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ce30:	fa5f f28c 	uxtb.w	r2, ip
 801ce34:	b2ff      	uxtb	r7, r7
 801ce36:	f000 80d8 	beq.w	801cfea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ce3a:	fa1f f882 	uxth.w	r8, r2
 801ce3e:	43d2      	mvns	r2, r2
 801ce40:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ce44:	fb17 f708 	smulbb	r7, r7, r8
 801ce48:	b2d2      	uxtb	r2, r2
 801ce4a:	fb19 f908 	smulbb	r9, r9, r8
 801ce4e:	fb0c 7702 	mla	r7, ip, r2, r7
 801ce52:	fb1b f808 	smulbb	r8, fp, r8
 801ce56:	b2bf      	uxth	r7, r7
 801ce58:	f107 0c01 	add.w	ip, r7, #1
 801ce5c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ce60:	123f      	asrs	r7, r7, #8
 801ce62:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ce66:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ce6a:	fb07 9902 	mla	r9, r7, r2, r9
 801ce6e:	fa1f f989 	uxth.w	r9, r9
 801ce72:	f109 0701 	add.w	r7, r9, #1
 801ce76:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ce7a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ce7e:	fb07 8802 	mla	r8, r7, r2, r8
 801ce82:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce86:	fa1f f888 	uxth.w	r8, r8
 801ce8a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ce8e:	f108 0201 	add.w	r2, r8, #1
 801ce92:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ce96:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ce9a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ce9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cea0:	3603      	adds	r6, #3
 801cea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cea6:	4414      	add	r4, r2
 801cea8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ceaa:	4410      	add	r0, r2
 801ceac:	e7ad      	b.n	801ce0a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ceae:	f04f 0c00 	mov.w	ip, #0
 801ceb2:	eba3 020c 	sub.w	r2, r3, ip
 801ceb6:	2a00      	cmp	r2, #0
 801ceb8:	dc3d      	bgt.n	801cf36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801ceba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cebe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cec2:	441d      	add	r5, r3
 801cec4:	2900      	cmp	r1, #0
 801cec6:	f340 8097 	ble.w	801cff8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ceca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ced0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ced4:	3901      	subs	r1, #1
 801ced6:	eeb0 6a62 	vmov.f32	s12, s5
 801ceda:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cede:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cee2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cee6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ceea:	eeb0 6a43 	vmov.f32	s12, s6
 801ceee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cef2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cef6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cefa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cefe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf0e:	ee12 2a90 	vmov	r2, s5
 801cf12:	eef0 2a47 	vmov.f32	s5, s14
 801cf16:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf1a:	ee13 2a10 	vmov	r2, s6
 801cf1e:	9311      	str	r3, [sp, #68]	; 0x44
 801cf20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf22:	eeb0 3a67 	vmov.f32	s6, s15
 801cf26:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf2a:	9a03      	ldr	r2, [sp, #12]
 801cf2c:	9312      	str	r3, [sp, #72]	; 0x48
 801cf2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf30:	bf08      	it	eq
 801cf32:	4613      	moveq	r3, r2
 801cf34:	e738      	b.n	801cda8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801cf36:	1426      	asrs	r6, r4, #16
 801cf38:	d448      	bmi.n	801cfcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf3a:	4576      	cmp	r6, lr
 801cf3c:	da46      	bge.n	801cfcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf3e:	1402      	asrs	r2, r0, #16
 801cf40:	d444      	bmi.n	801cfcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf42:	9f01      	ldr	r7, [sp, #4]
 801cf44:	42ba      	cmp	r2, r7
 801cf46:	da41      	bge.n	801cfcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf48:	fb0e 6202 	mla	r2, lr, r2, r6
 801cf4c:	9e02      	ldr	r6, [sp, #8]
 801cf4e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801cf52:	0e3a      	lsrs	r2, r7, #24
 801cf54:	d03a      	beq.n	801cfcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf56:	2aff      	cmp	r2, #255	; 0xff
 801cf58:	b2d6      	uxtb	r6, r2
 801cf5a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cf5e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801cf62:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801cf66:	b2ff      	uxtb	r7, r7
 801cf68:	d037      	beq.n	801cfda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801cf6a:	fa1f f986 	uxth.w	r9, r6
 801cf6e:	4462      	add	r2, ip
 801cf70:	43f6      	mvns	r6, r6
 801cf72:	f815 8002 	ldrb.w	r8, [r5, r2]
 801cf76:	fb17 f709 	smulbb	r7, r7, r9
 801cf7a:	fb1a fa09 	smulbb	sl, sl, r9
 801cf7e:	b2f6      	uxtb	r6, r6
 801cf80:	fb1b f909 	smulbb	r9, fp, r9
 801cf84:	fb08 7706 	mla	r7, r8, r6, r7
 801cf88:	b2bf      	uxth	r7, r7
 801cf8a:	f107 0801 	add.w	r8, r7, #1
 801cf8e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801cf92:	123f      	asrs	r7, r7, #8
 801cf94:	54af      	strb	r7, [r5, r2]
 801cf96:	442a      	add	r2, r5
 801cf98:	7857      	ldrb	r7, [r2, #1]
 801cf9a:	fb07 aa06 	mla	sl, r7, r6, sl
 801cf9e:	fa1f fa8a 	uxth.w	sl, sl
 801cfa2:	f10a 0701 	add.w	r7, sl, #1
 801cfa6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cfaa:	7897      	ldrb	r7, [r2, #2]
 801cfac:	fb07 9906 	mla	r9, r7, r6, r9
 801cfb0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cfb4:	fa1f f989 	uxth.w	r9, r9
 801cfb8:	f882 a001 	strb.w	sl, [r2, #1]
 801cfbc:	f109 0601 	add.w	r6, r9, #1
 801cfc0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801cfc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cfc8:	f882 9002 	strb.w	r9, [r2, #2]
 801cfcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfce:	f10c 0c01 	add.w	ip, ip, #1
 801cfd2:	4414      	add	r4, r2
 801cfd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfd6:	4410      	add	r0, r2
 801cfd8:	e76b      	b.n	801ceb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801cfda:	4462      	add	r2, ip
 801cfdc:	54af      	strb	r7, [r5, r2]
 801cfde:	442a      	add	r2, r5
 801cfe0:	f882 a001 	strb.w	sl, [r2, #1]
 801cfe4:	f882 b002 	strb.w	fp, [r2, #2]
 801cfe8:	e7f0      	b.n	801cfcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cfea:	f806 7c03 	strb.w	r7, [r6, #-3]
 801cfee:	f806 9c02 	strb.w	r9, [r6, #-2]
 801cff2:	f806 bc01 	strb.w	fp, [r6, #-1]
 801cff6:	e752      	b.n	801ce9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801cff8:	b005      	add	sp, #20
 801cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d000 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d004:	b087      	sub	sp, #28
 801d006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d00a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d00c:	9204      	str	r2, [sp, #16]
 801d00e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d012:	6860      	ldr	r0, [r4, #4]
 801d014:	9205      	str	r2, [sp, #20]
 801d016:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d01a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d01e:	9101      	str	r1, [sp, #4]
 801d020:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d024:	fb00 2505 	mla	r5, r0, r5, r2
 801d028:	6822      	ldr	r2, [r4, #0]
 801d02a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d02e:	4415      	add	r5, r2
 801d030:	f10e 0201 	add.w	r2, lr, #1
 801d034:	f022 0201 	bic.w	r2, r2, #1
 801d038:	9202      	str	r2, [sp, #8]
 801d03a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d03c:	6812      	ldr	r2, [r2, #0]
 801d03e:	9203      	str	r2, [sp, #12]
 801d040:	9a01      	ldr	r2, [sp, #4]
 801d042:	2a00      	cmp	r2, #0
 801d044:	dc03      	bgt.n	801d04e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d046:	9a04      	ldr	r2, [sp, #16]
 801d048:	2a00      	cmp	r2, #0
 801d04a:	f340 8132 	ble.w	801d2b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d04e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d050:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d056:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	dd0e      	ble.n	801d07c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d05e:	1422      	asrs	r2, r4, #16
 801d060:	d405      	bmi.n	801d06e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d062:	4596      	cmp	lr, r2
 801d064:	dd03      	ble.n	801d06e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d066:	1402      	asrs	r2, r0, #16
 801d068:	d401      	bmi.n	801d06e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d06a:	4542      	cmp	r2, r8
 801d06c:	db07      	blt.n	801d07e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d06e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d070:	3b01      	subs	r3, #1
 801d072:	3503      	adds	r5, #3
 801d074:	4414      	add	r4, r2
 801d076:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d078:	4410      	add	r0, r2
 801d07a:	e7ee      	b.n	801d05a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801d07c:	d010      	beq.n	801d0a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d07e:	1e5a      	subs	r2, r3, #1
 801d080:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d082:	fb06 4602 	mla	r6, r6, r2, r4
 801d086:	1436      	asrs	r6, r6, #16
 801d088:	d546      	bpl.n	801d118 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d08a:	4699      	mov	r9, r3
 801d08c:	462e      	mov	r6, r5
 801d08e:	f1b9 0f00 	cmp.w	r9, #0
 801d092:	f300 80ac 	bgt.w	801d1ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801d096:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d09a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d09e:	441d      	add	r5, r3
 801d0a0:	9b01      	ldr	r3, [sp, #4]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	f340 8105 	ble.w	801d2b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d0a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0b2:	eeb0 6a62 	vmov.f32	s12, s5
 801d0b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d0ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0c2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d0c6:	eeb0 6a43 	vmov.f32	s12, s6
 801d0ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0ce:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d0d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d0ea:	ee12 2a90 	vmov	r2, s5
 801d0ee:	eef0 2a47 	vmov.f32	s5, s14
 801d0f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0f6:	ee13 2a10 	vmov	r2, s6
 801d0fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801d0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0fe:	eeb0 3a67 	vmov.f32	s6, s15
 801d102:	fb92 f3f3 	sdiv	r3, r2, r3
 801d106:	9314      	str	r3, [sp, #80]	; 0x50
 801d108:	9b01      	ldr	r3, [sp, #4]
 801d10a:	9a04      	ldr	r2, [sp, #16]
 801d10c:	3b01      	subs	r3, #1
 801d10e:	9301      	str	r3, [sp, #4]
 801d110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d112:	bf08      	it	eq
 801d114:	4613      	moveq	r3, r2
 801d116:	e793      	b.n	801d040 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d118:	45b6      	cmp	lr, r6
 801d11a:	ddb6      	ble.n	801d08a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d11c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d11e:	fb06 0202 	mla	r2, r6, r2, r0
 801d122:	1412      	asrs	r2, r2, #16
 801d124:	d4b1      	bmi.n	801d08a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d126:	4542      	cmp	r2, r8
 801d128:	daaf      	bge.n	801d08a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d12a:	1cee      	adds	r6, r5, #3
 801d12c:	4699      	mov	r9, r3
 801d12e:	f1b9 0f00 	cmp.w	r9, #0
 801d132:	ddb0      	ble.n	801d096 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d134:	1422      	asrs	r2, r4, #16
 801d136:	9902      	ldr	r1, [sp, #8]
 801d138:	1407      	asrs	r7, r0, #16
 801d13a:	fb01 2707 	mla	r7, r1, r7, r2
 801d13e:	9903      	ldr	r1, [sp, #12]
 801d140:	087a      	lsrs	r2, r7, #1
 801d142:	5c8a      	ldrb	r2, [r1, r2]
 801d144:	07f9      	lsls	r1, r7, #31
 801d146:	bf54      	ite	pl
 801d148:	f002 020f 	andpl.w	r2, r2, #15
 801d14c:	1112      	asrmi	r2, r2, #4
 801d14e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d152:	b2d2      	uxtb	r2, r2
 801d154:	2a00      	cmp	r2, #0
 801d156:	d042      	beq.n	801d1de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d158:	4957      	ldr	r1, [pc, #348]	; (801d2b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d15a:	680f      	ldr	r7, [r1, #0]
 801d15c:	9905      	ldr	r1, [sp, #20]
 801d15e:	fa5f fb87 	uxtb.w	fp, r7
 801d162:	434a      	muls	r2, r1
 801d164:	f102 0c01 	add.w	ip, r2, #1
 801d168:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d16c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d170:	1212      	asrs	r2, r2, #8
 801d172:	fa1f fa82 	uxth.w	sl, r2
 801d176:	43d2      	mvns	r2, r2
 801d178:	fb1b fb0a 	smulbb	fp, fp, sl
 801d17c:	b2d2      	uxtb	r2, r2
 801d17e:	fb0c bc02 	mla	ip, ip, r2, fp
 801d182:	fa1f fc8c 	uxth.w	ip, ip
 801d186:	f10c 0b01 	add.w	fp, ip, #1
 801d18a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d18e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d192:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d196:	fb1b fb0a 	smulbb	fp, fp, sl
 801d19a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d19e:	fb17 fa0a 	smulbb	sl, r7, sl
 801d1a2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d1a6:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d1aa:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d1ae:	fb07 aa02 	mla	sl, r7, r2, sl
 801d1b2:	fb0c bc02 	mla	ip, ip, r2, fp
 801d1b6:	fa1f fa8a 	uxth.w	sl, sl
 801d1ba:	fa1f fc8c 	uxth.w	ip, ip
 801d1be:	f10a 0701 	add.w	r7, sl, #1
 801d1c2:	f10c 0b01 	add.w	fp, ip, #1
 801d1c6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d1ca:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d1ce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d1d2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d1d6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d1da:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d1de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d1e0:	3603      	adds	r6, #3
 801d1e2:	f109 39ff 	add.w	r9, r9, #4294967295
 801d1e6:	4414      	add	r4, r2
 801d1e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d1ea:	4410      	add	r0, r2
 801d1ec:	e79f      	b.n	801d12e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d1ee:	1422      	asrs	r2, r4, #16
 801d1f0:	d457      	bmi.n	801d2a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1f2:	4596      	cmp	lr, r2
 801d1f4:	dd55      	ble.n	801d2a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1f6:	1407      	asrs	r7, r0, #16
 801d1f8:	d453      	bmi.n	801d2a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1fa:	4547      	cmp	r7, r8
 801d1fc:	da51      	bge.n	801d2a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1fe:	9902      	ldr	r1, [sp, #8]
 801d200:	fb07 2701 	mla	r7, r7, r1, r2
 801d204:	9903      	ldr	r1, [sp, #12]
 801d206:	087a      	lsrs	r2, r7, #1
 801d208:	07ff      	lsls	r7, r7, #31
 801d20a:	5c8a      	ldrb	r2, [r1, r2]
 801d20c:	bf54      	ite	pl
 801d20e:	f002 020f 	andpl.w	r2, r2, #15
 801d212:	1112      	asrmi	r2, r2, #4
 801d214:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d218:	b2d2      	uxtb	r2, r2
 801d21a:	2a00      	cmp	r2, #0
 801d21c:	d041      	beq.n	801d2a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d21e:	4926      	ldr	r1, [pc, #152]	; (801d2b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d220:	680f      	ldr	r7, [r1, #0]
 801d222:	9905      	ldr	r1, [sp, #20]
 801d224:	fa5f fb87 	uxtb.w	fp, r7
 801d228:	434a      	muls	r2, r1
 801d22a:	f102 0c01 	add.w	ip, r2, #1
 801d22e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d232:	f896 c000 	ldrb.w	ip, [r6]
 801d236:	1212      	asrs	r2, r2, #8
 801d238:	fa1f fa82 	uxth.w	sl, r2
 801d23c:	43d2      	mvns	r2, r2
 801d23e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d242:	b2d2      	uxtb	r2, r2
 801d244:	fb0c bc02 	mla	ip, ip, r2, fp
 801d248:	fa1f fc8c 	uxth.w	ip, ip
 801d24c:	f10c 0b01 	add.w	fp, ip, #1
 801d250:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d254:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d258:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d25c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d260:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d264:	fb17 fa0a 	smulbb	sl, r7, sl
 801d268:	78b7      	ldrb	r7, [r6, #2]
 801d26a:	f886 c000 	strb.w	ip, [r6]
 801d26e:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d272:	fb07 aa02 	mla	sl, r7, r2, sl
 801d276:	fb0c bc02 	mla	ip, ip, r2, fp
 801d27a:	fa1f fa8a 	uxth.w	sl, sl
 801d27e:	fa1f fc8c 	uxth.w	ip, ip
 801d282:	f10a 0701 	add.w	r7, sl, #1
 801d286:	f10c 0b01 	add.w	fp, ip, #1
 801d28a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d28e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d292:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d296:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d29a:	f886 a002 	strb.w	sl, [r6, #2]
 801d29e:	f886 c001 	strb.w	ip, [r6, #1]
 801d2a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d2a4:	3603      	adds	r6, #3
 801d2a6:	f109 39ff 	add.w	r9, r9, #4294967295
 801d2aa:	4414      	add	r4, r2
 801d2ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d2ae:	4410      	add	r0, r2
 801d2b0:	e6ed      	b.n	801d08e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d2b2:	b007      	add	sp, #28
 801d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2b8:	2000b394 	.word	0x2000b394

0801d2bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2c0:	b087      	sub	sp, #28
 801d2c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d2c8:	9205      	str	r2, [sp, #20]
 801d2ca:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d2ce:	6860      	ldr	r0, [r4, #4]
 801d2d0:	9202      	str	r2, [sp, #8]
 801d2d2:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d2d6:	9101      	str	r1, [sp, #4]
 801d2d8:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d2dc:	fb00 2606 	mla	r6, r0, r6, r2
 801d2e0:	6822      	ldr	r2, [r4, #0]
 801d2e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d2e6:	4416      	add	r6, r2
 801d2e8:	f108 0201 	add.w	r2, r8, #1
 801d2ec:	f022 0201 	bic.w	r2, r2, #1
 801d2f0:	9203      	str	r2, [sp, #12]
 801d2f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d2f4:	6812      	ldr	r2, [r2, #0]
 801d2f6:	9204      	str	r2, [sp, #16]
 801d2f8:	9a01      	ldr	r2, [sp, #4]
 801d2fa:	2a00      	cmp	r2, #0
 801d2fc:	dc03      	bgt.n	801d306 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d2fe:	9a05      	ldr	r2, [sp, #20]
 801d300:	2a00      	cmp	r2, #0
 801d302:	f340 813a 	ble.w	801d57a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d306:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d308:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d30c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d30e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d312:	2b00      	cmp	r3, #0
 801d314:	dd0f      	ble.n	801d336 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d316:	142a      	asrs	r2, r5, #16
 801d318:	d406      	bmi.n	801d328 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d31a:	4590      	cmp	r8, r2
 801d31c:	dd04      	ble.n	801d328 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d31e:	1422      	asrs	r2, r4, #16
 801d320:	d402      	bmi.n	801d328 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d322:	9802      	ldr	r0, [sp, #8]
 801d324:	4282      	cmp	r2, r0
 801d326:	db07      	blt.n	801d338 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d32a:	3b01      	subs	r3, #1
 801d32c:	3603      	adds	r6, #3
 801d32e:	4415      	add	r5, r2
 801d330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d332:	4414      	add	r4, r2
 801d334:	e7ed      	b.n	801d312 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d336:	d073      	beq.n	801d420 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d338:	1e5a      	subs	r2, r3, #1
 801d33a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d33c:	fb00 5002 	mla	r0, r0, r2, r5
 801d340:	1400      	asrs	r0, r0, #16
 801d342:	d464      	bmi.n	801d40e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d344:	4580      	cmp	r8, r0
 801d346:	dd62      	ble.n	801d40e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d348:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d34a:	fb00 4202 	mla	r2, r0, r2, r4
 801d34e:	1412      	asrs	r2, r2, #16
 801d350:	d45d      	bmi.n	801d40e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d352:	9802      	ldr	r0, [sp, #8]
 801d354:	4282      	cmp	r2, r0
 801d356:	da5a      	bge.n	801d40e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d358:	1cf0      	adds	r0, r6, #3
 801d35a:	469a      	mov	sl, r3
 801d35c:	f1ba 0f00 	cmp.w	sl, #0
 801d360:	dd59      	ble.n	801d416 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d362:	142a      	asrs	r2, r5, #16
 801d364:	9903      	ldr	r1, [sp, #12]
 801d366:	1427      	asrs	r7, r4, #16
 801d368:	fb01 2707 	mla	r7, r1, r7, r2
 801d36c:	9904      	ldr	r1, [sp, #16]
 801d36e:	087a      	lsrs	r2, r7, #1
 801d370:	5c8a      	ldrb	r2, [r1, r2]
 801d372:	07f9      	lsls	r1, r7, #31
 801d374:	bf54      	ite	pl
 801d376:	f002 020f 	andpl.w	r2, r2, #15
 801d37a:	1112      	asrmi	r2, r2, #4
 801d37c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d380:	b2d2      	uxtb	r2, r2
 801d382:	2a00      	cmp	r2, #0
 801d384:	d03b      	beq.n	801d3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d386:	497e      	ldr	r1, [pc, #504]	; (801d580 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d388:	2aff      	cmp	r2, #255	; 0xff
 801d38a:	680f      	ldr	r7, [r1, #0]
 801d38c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d390:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d394:	b2ff      	uxtb	r7, r7
 801d396:	f000 80e9 	beq.w	801d56c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d39a:	fa1f fe82 	uxth.w	lr, r2
 801d39e:	43d2      	mvns	r2, r2
 801d3a0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d3a4:	fb17 f70e 	smulbb	r7, r7, lr
 801d3a8:	b2d2      	uxtb	r2, r2
 801d3aa:	fb19 f90e 	smulbb	r9, r9, lr
 801d3ae:	fb0c 7702 	mla	r7, ip, r2, r7
 801d3b2:	fb1b fe0e 	smulbb	lr, fp, lr
 801d3b6:	b2bf      	uxth	r7, r7
 801d3b8:	f107 0c01 	add.w	ip, r7, #1
 801d3bc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d3c0:	123f      	asrs	r7, r7, #8
 801d3c2:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d3c6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d3ca:	fb07 9902 	mla	r9, r7, r2, r9
 801d3ce:	fa1f f989 	uxth.w	r9, r9
 801d3d2:	f109 0701 	add.w	r7, r9, #1
 801d3d6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d3da:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d3de:	fb07 ee02 	mla	lr, r7, r2, lr
 801d3e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3e6:	fa1f fe8e 	uxth.w	lr, lr
 801d3ea:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d3ee:	f10e 0201 	add.w	r2, lr, #1
 801d3f2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d3f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d3fa:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d3fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d400:	3003      	adds	r0, #3
 801d402:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d406:	4415      	add	r5, r2
 801d408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d40a:	4414      	add	r4, r2
 801d40c:	e7a6      	b.n	801d35c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d40e:	2700      	movs	r7, #0
 801d410:	1bda      	subs	r2, r3, r7
 801d412:	2a00      	cmp	r2, #0
 801d414:	dc40      	bgt.n	801d498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d41a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d41e:	441e      	add	r6, r3
 801d420:	9b01      	ldr	r3, [sp, #4]
 801d422:	2b00      	cmp	r3, #0
 801d424:	f340 80a9 	ble.w	801d57a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d428:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d42e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d432:	eeb0 6a62 	vmov.f32	s12, s5
 801d436:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d43a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d43e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d442:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d446:	eeb0 6a43 	vmov.f32	s12, s6
 801d44a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d44e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d452:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d456:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d45a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d45e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d462:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d466:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d46a:	ee12 2a90 	vmov	r2, s5
 801d46e:	eef0 2a47 	vmov.f32	s5, s14
 801d472:	fb92 f3f3 	sdiv	r3, r2, r3
 801d476:	ee13 2a10 	vmov	r2, s6
 801d47a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d47e:	eeb0 3a67 	vmov.f32	s6, s15
 801d482:	fb92 f3f3 	sdiv	r3, r2, r3
 801d486:	9314      	str	r3, [sp, #80]	; 0x50
 801d488:	9b01      	ldr	r3, [sp, #4]
 801d48a:	9a05      	ldr	r2, [sp, #20]
 801d48c:	3b01      	subs	r3, #1
 801d48e:	9301      	str	r3, [sp, #4]
 801d490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d492:	bf08      	it	eq
 801d494:	4613      	moveq	r3, r2
 801d496:	e72f      	b.n	801d2f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d498:	142a      	asrs	r2, r5, #16
 801d49a:	d458      	bmi.n	801d54e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d49c:	4590      	cmp	r8, r2
 801d49e:	dd56      	ble.n	801d54e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d4a0:	1420      	asrs	r0, r4, #16
 801d4a2:	d454      	bmi.n	801d54e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d4a4:	9902      	ldr	r1, [sp, #8]
 801d4a6:	4288      	cmp	r0, r1
 801d4a8:	da51      	bge.n	801d54e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d4aa:	9903      	ldr	r1, [sp, #12]
 801d4ac:	fb00 2001 	mla	r0, r0, r1, r2
 801d4b0:	9904      	ldr	r1, [sp, #16]
 801d4b2:	0842      	lsrs	r2, r0, #1
 801d4b4:	07c0      	lsls	r0, r0, #31
 801d4b6:	5c8a      	ldrb	r2, [r1, r2]
 801d4b8:	bf54      	ite	pl
 801d4ba:	f002 020f 	andpl.w	r2, r2, #15
 801d4be:	1112      	asrmi	r2, r2, #4
 801d4c0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d4c4:	b2d2      	uxtb	r2, r2
 801d4c6:	2a00      	cmp	r2, #0
 801d4c8:	d041      	beq.n	801d54e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d4ca:	492d      	ldr	r1, [pc, #180]	; (801d580 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d4cc:	2aff      	cmp	r2, #255	; 0xff
 801d4ce:	6808      	ldr	r0, [r1, #0]
 801d4d0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d4d4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d4d8:	fa5f fc80 	uxtb.w	ip, r0
 801d4dc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d4e0:	d03b      	beq.n	801d55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d4e2:	fa1f f982 	uxth.w	r9, r2
 801d4e6:	4438      	add	r0, r7
 801d4e8:	43d2      	mvns	r2, r2
 801d4ea:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d4ee:	fb1c fc09 	smulbb	ip, ip, r9
 801d4f2:	fb1a fa09 	smulbb	sl, sl, r9
 801d4f6:	b2d2      	uxtb	r2, r2
 801d4f8:	fb1b f909 	smulbb	r9, fp, r9
 801d4fc:	fb0e cc02 	mla	ip, lr, r2, ip
 801d500:	fa1f fc8c 	uxth.w	ip, ip
 801d504:	f10c 0e01 	add.w	lr, ip, #1
 801d508:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d50c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d510:	f806 c000 	strb.w	ip, [r6, r0]
 801d514:	4430      	add	r0, r6
 801d516:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d51a:	fb0c aa02 	mla	sl, ip, r2, sl
 801d51e:	fa1f fa8a 	uxth.w	sl, sl
 801d522:	f10a 0c01 	add.w	ip, sl, #1
 801d526:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d52a:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d52e:	fb0c 9902 	mla	r9, ip, r2, r9
 801d532:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d536:	fa1f f989 	uxth.w	r9, r9
 801d53a:	f880 a001 	strb.w	sl, [r0, #1]
 801d53e:	f109 0201 	add.w	r2, r9, #1
 801d542:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d546:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d54a:	f880 9002 	strb.w	r9, [r0, #2]
 801d54e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d550:	3701      	adds	r7, #1
 801d552:	4415      	add	r5, r2
 801d554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d556:	4414      	add	r4, r2
 801d558:	e75a      	b.n	801d410 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d55a:	4438      	add	r0, r7
 801d55c:	f806 c000 	strb.w	ip, [r6, r0]
 801d560:	4430      	add	r0, r6
 801d562:	f880 a001 	strb.w	sl, [r0, #1]
 801d566:	f880 b002 	strb.w	fp, [r0, #2]
 801d56a:	e7f0      	b.n	801d54e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d56c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d570:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d574:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d578:	e741      	b.n	801d3fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d57a:	b007      	add	sp, #28
 801d57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d580:	2000b394 	.word	0x2000b394

0801d584 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d584:	4770      	bx	lr

0801d586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d586:	4770      	bx	lr

0801d588 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d588:	4770      	bx	lr

0801d58a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d58a:	4770      	bx	lr

0801d58c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d58c:	4770      	bx	lr

0801d58e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d58e:	4770      	bx	lr

0801d590 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d590:	4770      	bx	lr

0801d592 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d592:	4770      	bx	lr

0801d594 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d594:	4770      	bx	lr

0801d596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d596:	4770      	bx	lr

0801d598 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d598:	4770      	bx	lr

0801d59a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d59a:	4770      	bx	lr

0801d59c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d59c:	4770      	bx	lr

0801d59e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d59e:	4770      	bx	lr

0801d5a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d5a0:	4770      	bx	lr

0801d5a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d5a2:	4770      	bx	lr

0801d5a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d5a4:	4770      	bx	lr

0801d5a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d5a6:	4770      	bx	lr

0801d5a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d5a8:	4770      	bx	lr

0801d5aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d5aa:	4770      	bx	lr

0801d5ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d5ac:	2bff      	cmp	r3, #255	; 0xff
 801d5ae:	b508      	push	{r3, lr}
 801d5b0:	d04f      	beq.n	801d652 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d5b2:	2a2c      	cmp	r2, #44	; 0x2c
 801d5b4:	d032      	beq.n	801d61c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d5b6:	d80f      	bhi.n	801d5d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d5b8:	2a08      	cmp	r2, #8
 801d5ba:	d046      	beq.n	801d64a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d5bc:	d805      	bhi.n	801d5ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d5be:	2a04      	cmp	r2, #4
 801d5c0:	d041      	beq.n	801d646 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d5c2:	2a05      	cmp	r2, #5
 801d5c4:	d03d      	beq.n	801d642 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d5c6:	2000      	movs	r0, #0
 801d5c8:	e027      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5ca:	2a0a      	cmp	r2, #10
 801d5cc:	d03d      	beq.n	801d64a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d5ce:	d301      	bcc.n	801d5d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d5d0:	2a0b      	cmp	r2, #11
 801d5d2:	d1f8      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5d4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d5d6:	e020      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5d8:	2a30      	cmp	r2, #48	; 0x30
 801d5da:	d038      	beq.n	801d64e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d5dc:	d808      	bhi.n	801d5f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d5de:	2a2e      	cmp	r2, #46	; 0x2e
 801d5e0:	684b      	ldr	r3, [r1, #4]
 801d5e2:	d029      	beq.n	801d638 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d5e4:	d90b      	bls.n	801d5fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d5e6:	781b      	ldrb	r3, [r3, #0]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d1ec      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5ec:	6a00      	ldr	r0, [r0, #32]
 801d5ee:	e014      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5f0:	2a32      	cmp	r2, #50	; 0x32
 801d5f2:	d02c      	beq.n	801d64e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d5f4:	d301      	bcc.n	801d5fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d5f6:	2a33      	cmp	r2, #51	; 0x33
 801d5f8:	d1e5      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5fa:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d5fc:	e00d      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5fe:	781b      	ldrb	r3, [r3, #0]
 801d600:	2b01      	cmp	r3, #1
 801d602:	d009      	beq.n	801d618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d604:	d3f2      	bcc.n	801d5ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d606:	2b02      	cmp	r3, #2
 801d608:	d1dd      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d60a:	4b39      	ldr	r3, [pc, #228]	; (801d6f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d60c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 801d610:	4a38      	ldr	r2, [pc, #224]	; (801d6f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d612:	4839      	ldr	r0, [pc, #228]	; (801d6f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d614:	f008 f874 	bl	8025700 <__assert_func>
 801d618:	6900      	ldr	r0, [r0, #16]
 801d61a:	bd08      	pop	{r3, pc}
 801d61c:	684b      	ldr	r3, [r1, #4]
 801d61e:	781b      	ldrb	r3, [r3, #0]
 801d620:	2b01      	cmp	r3, #1
 801d622:	d007      	beq.n	801d634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d624:	d30b      	bcc.n	801d63e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d626:	2b02      	cmp	r3, #2
 801d628:	d1cd      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d62a:	4b31      	ldr	r3, [pc, #196]	; (801d6f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d62c:	f44f 6181 	mov.w	r1, #1032	; 0x408
 801d630:	4a30      	ldr	r2, [pc, #192]	; (801d6f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d632:	e7ee      	b.n	801d612 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d634:	6880      	ldr	r0, [r0, #8]
 801d636:	e7f0      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d638:	781b      	ldrb	r3, [r3, #0]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d1c3      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d63e:	6980      	ldr	r0, [r0, #24]
 801d640:	e7eb      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d642:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d644:	e7e9      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d646:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d648:	e7e7      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d64a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d64c:	e7e5      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d64e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d650:	e7e3      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d652:	2a2c      	cmp	r2, #44	; 0x2c
 801d654:	d030      	beq.n	801d6b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d656:	d80f      	bhi.n	801d678 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d658:	2a08      	cmp	r2, #8
 801d65a:	d044      	beq.n	801d6e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d65c:	d805      	bhi.n	801d66a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d65e:	2a04      	cmp	r2, #4
 801d660:	d03f      	beq.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d662:	2a05      	cmp	r2, #5
 801d664:	d1af      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d666:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d668:	e7d7      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d66a:	2a0a      	cmp	r2, #10
 801d66c:	d03b      	beq.n	801d6e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d66e:	d301      	bcc.n	801d674 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d670:	2a0b      	cmp	r2, #11
 801d672:	d1a8      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d674:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d676:	e7d0      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d678:	2a30      	cmp	r2, #48	; 0x30
 801d67a:	d036      	beq.n	801d6ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d67c:	d808      	bhi.n	801d690 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d67e:	2a2e      	cmp	r2, #46	; 0x2e
 801d680:	684b      	ldr	r3, [r1, #4]
 801d682:	d028      	beq.n	801d6d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d684:	d90b      	bls.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d686:	781b      	ldrb	r3, [r3, #0]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d19c      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d68c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d68e:	e7c4      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d690:	2a32      	cmp	r2, #50	; 0x32
 801d692:	d02a      	beq.n	801d6ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d694:	d301      	bcc.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d696:	2a33      	cmp	r2, #51	; 0x33
 801d698:	d195      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d69a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d69c:	e7bd      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d69e:	781b      	ldrb	r3, [r3, #0]
 801d6a0:	2b01      	cmp	r3, #1
 801d6a2:	d007      	beq.n	801d6b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d6a4:	d3f2      	bcc.n	801d68c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d6a6:	2b02      	cmp	r3, #2
 801d6a8:	d18d      	bne.n	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6aa:	4b11      	ldr	r3, [pc, #68]	; (801d6f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d6ac:	f240 4139 	movw	r1, #1081	; 0x439
 801d6b0:	4a10      	ldr	r2, [pc, #64]	; (801d6f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d6b2:	e7ae      	b.n	801d612 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6b4:	6940      	ldr	r0, [r0, #20]
 801d6b6:	e7b0      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6b8:	684b      	ldr	r3, [r1, #4]
 801d6ba:	781b      	ldrb	r3, [r3, #0]
 801d6bc:	2b01      	cmp	r3, #1
 801d6be:	d008      	beq.n	801d6d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d6c0:	d30d      	bcc.n	801d6de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d6c2:	2b02      	cmp	r3, #2
 801d6c4:	f47f af7f 	bne.w	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6c8:	4b09      	ldr	r3, [pc, #36]	; (801d6f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d6ca:	f240 4145 	movw	r1, #1093	; 0x445
 801d6ce:	4a09      	ldr	r2, [pc, #36]	; (801d6f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d6d0:	e79f      	b.n	801d612 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6d2:	68c0      	ldr	r0, [r0, #12]
 801d6d4:	e7a1      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6d6:	781b      	ldrb	r3, [r3, #0]
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	f47f af74 	bne.w	801d5c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6de:	69c0      	ldr	r0, [r0, #28]
 801d6e0:	e79b      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d6e4:	e799      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d6e8:	e797      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d6ec:	e795      	b.n	801d61a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6ee:	bf00      	nop
 801d6f0:	0802adff 	.word	0x0802adff
 801d6f4:	0802b5af 	.word	0x0802b5af
 801d6f8:	0802ae4b 	.word	0x0802ae4b

0801d6fc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d6fc:	b508      	push	{r3, lr}
 801d6fe:	4b06      	ldr	r3, [pc, #24]	; (801d718 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d700:	8818      	ldrh	r0, [r3, #0]
 801d702:	b928      	cbnz	r0, 801d710 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d704:	4b05      	ldr	r3, [pc, #20]	; (801d71c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d706:	2155      	movs	r1, #85	; 0x55
 801d708:	4a05      	ldr	r2, [pc, #20]	; (801d720 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d70a:	4806      	ldr	r0, [pc, #24]	; (801d724 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d70c:	f007 fff8 	bl	8025700 <__assert_func>
 801d710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d714:	b280      	uxth	r0, r0
 801d716:	bd08      	pop	{r3, pc}
 801d718:	2000b366 	.word	0x2000b366
 801d71c:	0802b098 	.word	0x0802b098
 801d720:	0802b574 	.word	0x0802b574
 801d724:	0802b0da 	.word	0x0802b0da

0801d728 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d72c:	4616      	mov	r6, r2
 801d72e:	b087      	sub	sp, #28
 801d730:	461f      	mov	r7, r3
 801d732:	b34b      	cbz	r3, 801d788 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d734:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	dd25      	ble.n	801d788 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d73c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d740:	2b00      	cmp	r3, #0
 801d742:	dd21      	ble.n	801d788 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d744:	6808      	ldr	r0, [r1, #0]
 801d746:	ab04      	add	r3, sp, #16
 801d748:	6849      	ldr	r1, [r1, #4]
 801d74a:	4c5a      	ldr	r4, [pc, #360]	; (801d8b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d74c:	c303      	stmia	r3!, {r0, r1}
 801d74e:	a804      	add	r0, sp, #16
 801d750:	f7fb fccc 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d754:	6820      	ldr	r0, [r4, #0]
 801d756:	6803      	ldr	r3, [r0, #0]
 801d758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d75a:	4798      	blx	r3
 801d75c:	2fff      	cmp	r7, #255	; 0xff
 801d75e:	4623      	mov	r3, r4
 801d760:	d015      	beq.n	801d78e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d762:	f010 0f08 	tst.w	r0, #8
 801d766:	d015      	beq.n	801d794 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801d768:	6818      	ldr	r0, [r3, #0]
 801d76a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d76e:	6801      	ldr	r1, [r0, #0]
 801d770:	9401      	str	r4, [sp, #4]
 801d772:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d776:	9702      	str	r7, [sp, #8]
 801d778:	9400      	str	r4, [sp, #0]
 801d77a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d77e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801d780:	4631      	mov	r1, r6
 801d782:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d786:	47a0      	blx	r4
 801d788:	b007      	add	sp, #28
 801d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d78e:	f010 0f02 	tst.w	r0, #2
 801d792:	e7e8      	b.n	801d766 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801d794:	6818      	ldr	r0, [r3, #0]
 801d796:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d79a:	6803      	ldr	r3, [r0, #0]
 801d79c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d7a0:	6a1b      	ldr	r3, [r3, #32]
 801d7a2:	4798      	blx	r3
 801d7a4:	4944      	ldr	r1, [pc, #272]	; (801d8b8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801d7a6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d7aa:	2fff      	cmp	r7, #255	; 0xff
 801d7ac:	f8b1 c000 	ldrh.w	ip, [r1]
 801d7b0:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d7b4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d7b8:	4688      	mov	r8, r1
 801d7ba:	fb0c 2303 	mla	r3, ip, r3, r2
 801d7be:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d7c2:	b2f2      	uxtb	r2, r6
 801d7c4:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d7c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7cc:	4418      	add	r0, r3
 801d7ce:	d112      	bne.n	801d7f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801d7d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7d4:	2100      	movs	r1, #0
 801d7d6:	42a9      	cmp	r1, r5
 801d7d8:	da66      	bge.n	801d8a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801d7da:	4603      	mov	r3, r0
 801d7dc:	2700      	movs	r7, #0
 801d7de:	42a7      	cmp	r7, r4
 801d7e0:	f103 0303 	add.w	r3, r3, #3
 801d7e4:	da57      	bge.n	801d896 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801d7e6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d7ea:	3701      	adds	r7, #1
 801d7ec:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d7f0:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d7f4:	e7f3      	b.n	801d7de <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801d7f6:	b2bb      	uxth	r3, r7
 801d7f8:	f04f 0800 	mov.w	r8, #0
 801d7fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d800:	fb0c fc03 	mul.w	ip, ip, r3
 801d804:	fb0e fe03 	mul.w	lr, lr, r3
 801d808:	435a      	muls	r2, r3
 801d80a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d80e:	460f      	mov	r7, r1
 801d810:	b29b      	uxth	r3, r3
 801d812:	45a8      	cmp	r8, r5
 801d814:	da48      	bge.n	801d8a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801d816:	4601      	mov	r1, r0
 801d818:	f04f 0a00 	mov.w	sl, #0
 801d81c:	45a2      	cmp	sl, r4
 801d81e:	f101 0103 	add.w	r1, r1, #3
 801d822:	da2f      	bge.n	801d884 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801d824:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d828:	f10a 0a01 	add.w	sl, sl, #1
 801d82c:	fb19 f903 	smulbb	r9, r9, r3
 801d830:	4491      	add	r9, r2
 801d832:	fa1f f989 	uxth.w	r9, r9
 801d836:	f109 0b01 	add.w	fp, r9, #1
 801d83a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d83e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d842:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d846:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d84a:	fb19 f903 	smulbb	r9, r9, r3
 801d84e:	44f1      	add	r9, lr
 801d850:	fa1f f989 	uxth.w	r9, r9
 801d854:	f109 0b01 	add.w	fp, r9, #1
 801d858:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d85c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d860:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d864:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d868:	fb19 f903 	smulbb	r9, r9, r3
 801d86c:	44e1      	add	r9, ip
 801d86e:	fa1f f989 	uxth.w	r9, r9
 801d872:	f109 0b01 	add.w	fp, r9, #1
 801d876:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d87a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d87e:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d882:	e7cb      	b.n	801d81c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801d884:	8839      	ldrh	r1, [r7, #0]
 801d886:	f108 0801 	add.w	r8, r8, #1
 801d88a:	1b09      	subs	r1, r1, r4
 801d88c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d890:	4431      	add	r1, r6
 801d892:	4408      	add	r0, r1
 801d894:	e7bd      	b.n	801d812 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801d896:	f8b8 3000 	ldrh.w	r3, [r8]
 801d89a:	3101      	adds	r1, #1
 801d89c:	1b1b      	subs	r3, r3, r4
 801d89e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8a2:	4433      	add	r3, r6
 801d8a4:	4418      	add	r0, r3
 801d8a6:	e796      	b.n	801d7d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801d8a8:	4b02      	ldr	r3, [pc, #8]	; (801d8b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d8aa:	6818      	ldr	r0, [r3, #0]
 801d8ac:	6803      	ldr	r3, [r0, #0]
 801d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8b0:	4798      	blx	r3
 801d8b2:	e769      	b.n	801d788 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d8b4:	2000b36c 	.word	0x2000b36c
 801d8b8:	2000b366 	.word	0x2000b366

0801d8bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c0:	b08d      	sub	sp, #52	; 0x34
 801d8c2:	460c      	mov	r4, r1
 801d8c4:	4617      	mov	r7, r2
 801d8c6:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d8ca:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d8ce:	2e00      	cmp	r6, #0
 801d8d0:	d04a      	beq.n	801d968 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d8d2:	6810      	ldr	r0, [r2, #0]
 801d8d4:	ad08      	add	r5, sp, #32
 801d8d6:	6851      	ldr	r1, [r2, #4]
 801d8d8:	c503      	stmia	r5!, {r0, r1}
 801d8da:	6818      	ldr	r0, [r3, #0]
 801d8dc:	ad0a      	add	r5, sp, #40	; 0x28
 801d8de:	6859      	ldr	r1, [r3, #4]
 801d8e0:	c503      	stmia	r5!, {r0, r1}
 801d8e2:	a808      	add	r0, sp, #32
 801d8e4:	f7fb fc02 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8e8:	4639      	mov	r1, r7
 801d8ea:	a80a      	add	r0, sp, #40	; 0x28
 801d8ec:	4f59      	ldr	r7, [pc, #356]	; (801da54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d8ee:	f7fb fbe5 	bl	80190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8f2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d8f6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d8fa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d8fe:	6838      	ldr	r0, [r7, #0]
 801d900:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d904:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d908:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d90c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d910:	440c      	add	r4, r1
 801d912:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d916:	440a      	add	r2, r1
 801d918:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d91c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d920:	4413      	add	r3, r2
 801d922:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d926:	6803      	ldr	r3, [r0, #0]
 801d928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d92a:	4798      	blx	r3
 801d92c:	2eff      	cmp	r6, #255	; 0xff
 801d92e:	f000 8089 	beq.w	801da44 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d932:	0743      	lsls	r3, r0, #29
 801d934:	d405      	bmi.n	801d942 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d936:	f1b9 0f00 	cmp.w	r9, #0
 801d93a:	d018      	beq.n	801d96e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d93c:	f010 0f10 	tst.w	r0, #16
 801d940:	d015      	beq.n	801d96e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d942:	6838      	ldr	r0, [r7, #0]
 801d944:	b2ad      	uxth	r5, r5
 801d946:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d94a:	6801      	ldr	r1, [r0, #0]
 801d94c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d950:	9500      	str	r5, [sp, #0]
 801d952:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d956:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d95a:	9602      	str	r6, [sp, #8]
 801d95c:	fa1f f688 	uxth.w	r6, r8
 801d960:	9601      	str	r6, [sp, #4]
 801d962:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d964:	4621      	mov	r1, r4
 801d966:	47a8      	blx	r5
 801d968:	b00d      	add	sp, #52	; 0x34
 801d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d96e:	6838      	ldr	r0, [r7, #0]
 801d970:	6803      	ldr	r3, [r0, #0]
 801d972:	6a1b      	ldr	r3, [r3, #32]
 801d974:	4798      	blx	r3
 801d976:	4a38      	ldr	r2, [pc, #224]	; (801da58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d978:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d97c:	2eff      	cmp	r6, #255	; 0xff
 801d97e:	8813      	ldrh	r3, [r2, #0]
 801d980:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d984:	fb0c 1303 	mla	r3, ip, r3, r1
 801d988:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d98c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d990:	4418      	add	r0, r3
 801d992:	d032      	beq.n	801d9fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d994:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d998:	f04f 0c00 	mov.w	ip, #0
 801d99c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d9a0:	9306      	str	r3, [sp, #24]
 801d9a2:	45c4      	cmp	ip, r8
 801d9a4:	da49      	bge.n	801da3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d9a6:	4686      	mov	lr, r0
 801d9a8:	46a1      	mov	r9, r4
 801d9aa:	eba9 0304 	sub.w	r3, r9, r4
 801d9ae:	428b      	cmp	r3, r1
 801d9b0:	da13      	bge.n	801d9da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d9b2:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d9b6:	f89e b000 	ldrb.w	fp, [lr]
 801d9ba:	9307      	str	r3, [sp, #28]
 801d9bc:	9b06      	ldr	r3, [sp, #24]
 801d9be:	fb1b fb03 	smulbb	fp, fp, r3
 801d9c2:	9b07      	ldr	r3, [sp, #28]
 801d9c4:	fb03 b306 	mla	r3, r3, r6, fp
 801d9c8:	b29b      	uxth	r3, r3
 801d9ca:	f103 0b01 	add.w	fp, r3, #1
 801d9ce:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d9d2:	121b      	asrs	r3, r3, #8
 801d9d4:	f80e 3b01 	strb.w	r3, [lr], #1
 801d9d8:	e7e7      	b.n	801d9aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d9da:	8813      	ldrh	r3, [r2, #0]
 801d9dc:	f10c 0c01 	add.w	ip, ip, #1
 801d9e0:	1b5b      	subs	r3, r3, r5
 801d9e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9e6:	4453      	add	r3, sl
 801d9e8:	4418      	add	r0, r3
 801d9ea:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d9ee:	1b5b      	subs	r3, r3, r5
 801d9f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9f4:	4453      	add	r3, sl
 801d9f6:	441c      	add	r4, r3
 801d9f8:	e7d3      	b.n	801d9a2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d9fa:	2600      	movs	r6, #0
 801d9fc:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801da00:	4546      	cmp	r6, r8
 801da02:	da1a      	bge.n	801da3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801da04:	f100 3eff 	add.w	lr, r0, #4294967295
 801da08:	4623      	mov	r3, r4
 801da0a:	eba3 0904 	sub.w	r9, r3, r4
 801da0e:	4589      	cmp	r9, r1
 801da10:	da04      	bge.n	801da1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801da12:	f813 9b01 	ldrb.w	r9, [r3], #1
 801da16:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801da1a:	e7f6      	b.n	801da0a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801da1c:	8813      	ldrh	r3, [r2, #0]
 801da1e:	3601      	adds	r6, #1
 801da20:	1b5b      	subs	r3, r3, r5
 801da22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da26:	4463      	add	r3, ip
 801da28:	4418      	add	r0, r3
 801da2a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801da2e:	1b5b      	subs	r3, r3, r5
 801da30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da34:	4463      	add	r3, ip
 801da36:	441c      	add	r4, r3
 801da38:	e7e2      	b.n	801da00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801da3a:	6838      	ldr	r0, [r7, #0]
 801da3c:	6803      	ldr	r3, [r0, #0]
 801da3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da40:	4798      	blx	r3
 801da42:	e791      	b.n	801d968 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801da44:	f1b9 0f00 	cmp.w	r9, #0
 801da48:	f47f af78 	bne.w	801d93c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801da4c:	f010 0f01 	tst.w	r0, #1
 801da50:	e776      	b.n	801d940 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801da52:	bf00      	nop
 801da54:	2000b36c 	.word	0x2000b36c
 801da58:	2000b366 	.word	0x2000b366

0801da5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801da5c:	b510      	push	{r4, lr}
 801da5e:	4604      	mov	r4, r0
 801da60:	2104      	movs	r1, #4
 801da62:	f007 fe21 	bl	80256a8 <_ZdlPvj>
 801da66:	4620      	mov	r0, r4
 801da68:	bd10      	pop	{r4, pc}

0801da6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801da6a:	b510      	push	{r4, lr}
 801da6c:	4604      	mov	r4, r0
 801da6e:	2104      	movs	r1, #4
 801da70:	f007 fe1a 	bl	80256a8 <_ZdlPvj>
 801da74:	4620      	mov	r0, r4
 801da76:	bd10      	pop	{r4, pc}

0801da78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801da78:	b510      	push	{r4, lr}
 801da7a:	4604      	mov	r4, r0
 801da7c:	2104      	movs	r1, #4
 801da7e:	f007 fe13 	bl	80256a8 <_ZdlPvj>
 801da82:	4620      	mov	r0, r4
 801da84:	bd10      	pop	{r4, pc}

0801da86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801da86:	b510      	push	{r4, lr}
 801da88:	4604      	mov	r4, r0
 801da8a:	2104      	movs	r1, #4
 801da8c:	f007 fe0c 	bl	80256a8 <_ZdlPvj>
 801da90:	4620      	mov	r0, r4
 801da92:	bd10      	pop	{r4, pc}

0801da94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801da94:	b510      	push	{r4, lr}
 801da96:	4604      	mov	r4, r0
 801da98:	2104      	movs	r1, #4
 801da9a:	f007 fe05 	bl	80256a8 <_ZdlPvj>
 801da9e:	4620      	mov	r0, r4
 801daa0:	bd10      	pop	{r4, pc}

0801daa2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801daa2:	b510      	push	{r4, lr}
 801daa4:	4604      	mov	r4, r0
 801daa6:	2104      	movs	r1, #4
 801daa8:	f007 fdfe 	bl	80256a8 <_ZdlPvj>
 801daac:	4620      	mov	r0, r4
 801daae:	bd10      	pop	{r4, pc}

0801dab0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dab0:	b510      	push	{r4, lr}
 801dab2:	4604      	mov	r4, r0
 801dab4:	2104      	movs	r1, #4
 801dab6:	f007 fdf7 	bl	80256a8 <_ZdlPvj>
 801daba:	4620      	mov	r0, r4
 801dabc:	bd10      	pop	{r4, pc}

0801dabe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dabe:	b510      	push	{r4, lr}
 801dac0:	4604      	mov	r4, r0
 801dac2:	2104      	movs	r1, #4
 801dac4:	f007 fdf0 	bl	80256a8 <_ZdlPvj>
 801dac8:	4620      	mov	r0, r4
 801daca:	bd10      	pop	{r4, pc}

0801dacc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dacc:	b510      	push	{r4, lr}
 801dace:	4604      	mov	r4, r0
 801dad0:	2104      	movs	r1, #4
 801dad2:	f007 fde9 	bl	80256a8 <_ZdlPvj>
 801dad6:	4620      	mov	r0, r4
 801dad8:	bd10      	pop	{r4, pc}

0801dada <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dada:	b510      	push	{r4, lr}
 801dadc:	4604      	mov	r4, r0
 801dade:	2104      	movs	r1, #4
 801dae0:	f007 fde2 	bl	80256a8 <_ZdlPvj>
 801dae4:	4620      	mov	r0, r4
 801dae6:	bd10      	pop	{r4, pc}

0801dae8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dae8:	b510      	push	{r4, lr}
 801daea:	4604      	mov	r4, r0
 801daec:	2104      	movs	r1, #4
 801daee:	f007 fddb 	bl	80256a8 <_ZdlPvj>
 801daf2:	4620      	mov	r0, r4
 801daf4:	bd10      	pop	{r4, pc}

0801daf6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801daf6:	b510      	push	{r4, lr}
 801daf8:	4604      	mov	r4, r0
 801dafa:	2104      	movs	r1, #4
 801dafc:	f007 fdd4 	bl	80256a8 <_ZdlPvj>
 801db00:	4620      	mov	r0, r4
 801db02:	bd10      	pop	{r4, pc}

0801db04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801db04:	b510      	push	{r4, lr}
 801db06:	4604      	mov	r4, r0
 801db08:	2104      	movs	r1, #4
 801db0a:	f007 fdcd 	bl	80256a8 <_ZdlPvj>
 801db0e:	4620      	mov	r0, r4
 801db10:	bd10      	pop	{r4, pc}

0801db12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801db12:	b510      	push	{r4, lr}
 801db14:	4604      	mov	r4, r0
 801db16:	2104      	movs	r1, #4
 801db18:	f007 fdc6 	bl	80256a8 <_ZdlPvj>
 801db1c:	4620      	mov	r0, r4
 801db1e:	bd10      	pop	{r4, pc}

0801db20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801db20:	b510      	push	{r4, lr}
 801db22:	4604      	mov	r4, r0
 801db24:	2104      	movs	r1, #4
 801db26:	f007 fdbf 	bl	80256a8 <_ZdlPvj>
 801db2a:	4620      	mov	r0, r4
 801db2c:	bd10      	pop	{r4, pc}

0801db2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801db2e:	b510      	push	{r4, lr}
 801db30:	4604      	mov	r4, r0
 801db32:	2104      	movs	r1, #4
 801db34:	f007 fdb8 	bl	80256a8 <_ZdlPvj>
 801db38:	4620      	mov	r0, r4
 801db3a:	bd10      	pop	{r4, pc}

0801db3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801db3c:	b510      	push	{r4, lr}
 801db3e:	4604      	mov	r4, r0
 801db40:	2104      	movs	r1, #4
 801db42:	f007 fdb1 	bl	80256a8 <_ZdlPvj>
 801db46:	4620      	mov	r0, r4
 801db48:	bd10      	pop	{r4, pc}

0801db4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801db4a:	b510      	push	{r4, lr}
 801db4c:	4604      	mov	r4, r0
 801db4e:	2104      	movs	r1, #4
 801db50:	f007 fdaa 	bl	80256a8 <_ZdlPvj>
 801db54:	4620      	mov	r0, r4
 801db56:	bd10      	pop	{r4, pc}

0801db58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801db58:	b510      	push	{r4, lr}
 801db5a:	4604      	mov	r4, r0
 801db5c:	2104      	movs	r1, #4
 801db5e:	f007 fda3 	bl	80256a8 <_ZdlPvj>
 801db62:	4620      	mov	r0, r4
 801db64:	bd10      	pop	{r4, pc}

0801db66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801db66:	b510      	push	{r4, lr}
 801db68:	4604      	mov	r4, r0
 801db6a:	2104      	movs	r1, #4
 801db6c:	f007 fd9c 	bl	80256a8 <_ZdlPvj>
 801db70:	4620      	mov	r0, r4
 801db72:	bd10      	pop	{r4, pc}

0801db74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801db74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db78:	4d9e      	ldr	r5, [pc, #632]	; (801ddf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801db7a:	4690      	mov	r8, r2
 801db7c:	b08f      	sub	sp, #60	; 0x3c
 801db7e:	4604      	mov	r4, r0
 801db80:	682a      	ldr	r2, [r5, #0]
 801db82:	4689      	mov	r9, r1
 801db84:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801db88:	2a02      	cmp	r2, #2
 801db8a:	d106      	bne.n	801db9a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801db8c:	4b9a      	ldr	r3, [pc, #616]	; (801ddf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801db8e:	f240 11ef 	movw	r1, #495	; 0x1ef
 801db92:	4a9a      	ldr	r2, [pc, #616]	; (801ddfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801db94:	489a      	ldr	r0, [pc, #616]	; (801de00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801db96:	f007 fdb3 	bl	8025700 <__assert_func>
 801db9a:	ae0e      	add	r6, sp, #56	; 0x38
 801db9c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801dba0:	4630      	mov	r0, r6
 801dba2:	f7fe f8b1 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dba6:	6823      	ldr	r3, [r4, #0]
 801dba8:	4607      	mov	r7, r0
 801dbaa:	4620      	mov	r0, r4
 801dbac:	6a1b      	ldr	r3, [r3, #32]
 801dbae:	4798      	blx	r3
 801dbb0:	4287      	cmp	r7, r0
 801dbb2:	d004      	beq.n	801dbbe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801dbb4:	4b93      	ldr	r3, [pc, #588]	; (801de04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801dbb6:	f240 11f1 	movw	r1, #497	; 0x1f1
 801dbba:	4a90      	ldr	r2, [pc, #576]	; (801ddfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dbbc:	e7ea      	b.n	801db94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dbbe:	4630      	mov	r0, r6
 801dbc0:	f7fe f81e 	bl	801bc00 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dbc4:	4607      	mov	r7, r0
 801dbc6:	b920      	cbnz	r0, 801dbd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801dbc8:	4b8f      	ldr	r3, [pc, #572]	; (801de08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801dbca:	f240 11f3 	movw	r1, #499	; 0x1f3
 801dbce:	4a8b      	ldr	r2, [pc, #556]	; (801ddfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dbd0:	e7e0      	b.n	801db94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dbd2:	f8d8 0000 	ldr.w	r0, [r8]
 801dbd6:	ab06      	add	r3, sp, #24
 801dbd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dbdc:	f9b8 a000 	ldrsh.w	sl, [r8]
 801dbe0:	c303      	stmia	r3!, {r0, r1}
 801dbe2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dbe6:	ab08      	add	r3, sp, #32
 801dbe8:	f8d9 0000 	ldr.w	r0, [r9]
 801dbec:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801dbf0:	c303      	stmia	r3!, {r0, r1}
 801dbf2:	4630      	mov	r0, r6
 801dbf4:	f7fd ff36 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbf8:	4680      	mov	r8, r0
 801dbfa:	4630      	mov	r0, r6
 801dbfc:	4e83      	ldr	r6, [pc, #524]	; (801de0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801dbfe:	f7fd ff6b 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dc02:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801dc06:	f10d 0920 	add.w	r9, sp, #32
 801dc0a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801dc0e:	a806      	add	r0, sp, #24
 801dc10:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801dc14:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801dc18:	f7fb fa68 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc1c:	4648      	mov	r0, r9
 801dc1e:	f7fb fa65 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc22:	a80a      	add	r0, sp, #40	; 0x28
 801dc24:	f7fb fa62 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc28:	4b79      	ldr	r3, [pc, #484]	; (801de10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dc2a:	2100      	movs	r1, #0
 801dc2c:	f9b6 2000 	ldrsh.w	r2, [r6]
 801dc30:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc34:	4648      	mov	r0, r9
 801dc36:	910c      	str	r1, [sp, #48]	; 0x30
 801dc38:	a90c      	add	r1, sp, #48	; 0x30
 801dc3a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801dc3e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dc42:	f7f7 feef 	bl	8015a24 <_ZN8touchgfx4RectaNERKS0_>
 801dc46:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801dc4a:	9602      	str	r6, [sp, #8]
 801dc4c:	f1bc 0f00 	cmp.w	ip, #0
 801dc50:	f340 80a4 	ble.w	801dd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dc54:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801dc58:	2e00      	cmp	r6, #0
 801dc5a:	f340 809f 	ble.w	801dd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dc5e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dc62:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dc66:	4288      	cmp	r0, r1
 801dc68:	db36      	blt.n	801dcd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc6a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dc6e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dc72:	429a      	cmp	r2, r3
 801dc74:	db30      	blt.n	801dcd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc76:	4460      	add	r0, ip
 801dc78:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dc7c:	4461      	add	r1, ip
 801dc7e:	b200      	sxth	r0, r0
 801dc80:	b209      	sxth	r1, r1
 801dc82:	4288      	cmp	r0, r1
 801dc84:	dc28      	bgt.n	801dcd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc86:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dc8a:	4432      	add	r2, r6
 801dc8c:	440b      	add	r3, r1
 801dc8e:	b212      	sxth	r2, r2
 801dc90:	b21b      	sxth	r3, r3
 801dc92:	429a      	cmp	r2, r3
 801dc94:	dc20      	bgt.n	801dcd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dc96:	6823      	ldr	r3, [r4, #0]
 801dc98:	4620      	mov	r0, r4
 801dc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc9c:	4798      	blx	r3
 801dc9e:	4682      	mov	sl, r0
 801dca0:	6828      	ldr	r0, [r5, #0]
 801dca2:	6803      	ldr	r3, [r0, #0]
 801dca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dca6:	4798      	blx	r3
 801dca8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dcac:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dcb0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dcb4:	9303      	str	r3, [sp, #12]
 801dcb6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dcba:	1a9b      	subs	r3, r3, r2
 801dcbc:	b29b      	uxth	r3, r3
 801dcbe:	b21c      	sxth	r4, r3
 801dcc0:	2c00      	cmp	r4, #0
 801dcc2:	dc0e      	bgt.n	801dce2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801dcc4:	b134      	cbz	r4, 801dcd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801dcc6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dcca:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801dcce:	4413      	add	r3, r2
 801dcd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801dcd4:	463c      	mov	r4, r7
 801dcd6:	e00b      	b.n	801dcf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801dcd8:	4b4e      	ldr	r3, [pc, #312]	; (801de14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801dcda:	f240 2101 	movw	r1, #513	; 0x201
 801dcde:	4a47      	ldr	r2, [pc, #284]	; (801ddfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dce0:	e758      	b.n	801db94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dce2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dce6:	ebab 0303 	sub.w	r3, fp, r3
 801dcea:	443c      	add	r4, r7
 801dcec:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801dcf0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801dcf4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dcf8:	1a9b      	subs	r3, r3, r2
 801dcfa:	b29b      	uxth	r3, r3
 801dcfc:	b219      	sxth	r1, r3
 801dcfe:	2900      	cmp	r1, #0
 801dd00:	dd50      	ble.n	801dda4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801dd02:	9a03      	ldr	r2, [sp, #12]
 801dd04:	fb02 4401 	mla	r4, r2, r1, r4
 801dd08:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801dd0c:	1ad3      	subs	r3, r2, r3
 801dd0e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801dd12:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801dd16:	f1bc 0f00 	cmp.w	ip, #0
 801dd1a:	dd3f      	ble.n	801dd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd1c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801dd20:	2e00      	cmp	r6, #0
 801dd22:	dd3b      	ble.n	801dd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd24:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801dd28:	2203      	movs	r2, #3
 801dd2a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801dd2e:	fb0a f801 	mul.w	r8, sl, r1
 801dd32:	fb13 8802 	smlabb	r8, r3, r2, r8
 801dd36:	9a02      	ldr	r2, [sp, #8]
 801dd38:	4480      	add	r8, r0
 801dd3a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801dd3e:	8812      	ldrh	r2, [r2, #0]
 801dd40:	4584      	cmp	ip, r0
 801dd42:	eba2 0303 	sub.w	r3, r2, r3
 801dd46:	bfa8      	it	ge
 801dd48:	4684      	movge	ip, r0
 801dd4a:	459c      	cmp	ip, r3
 801dd4c:	bfa8      	it	ge
 801dd4e:	469c      	movge	ip, r3
 801dd50:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801dd54:	429e      	cmp	r6, r3
 801dd56:	bfa8      	it	ge
 801dd58:	461e      	movge	r6, r3
 801dd5a:	4b2d      	ldr	r3, [pc, #180]	; (801de10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dd5c:	881b      	ldrh	r3, [r3, #0]
 801dd5e:	1a59      	subs	r1, r3, r1
 801dd60:	4633      	mov	r3, r6
 801dd62:	428e      	cmp	r6, r1
 801dd64:	bfa8      	it	ge
 801dd66:	460b      	movge	r3, r1
 801dd68:	4562      	cmp	r2, ip
 801dd6a:	9302      	str	r3, [sp, #8]
 801dd6c:	d12d      	bne.n	801ddca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801dd6e:	455a      	cmp	r2, fp
 801dd70:	d12b      	bne.n	801ddca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801dd72:	6828      	ldr	r0, [r5, #0]
 801dd74:	6803      	ldr	r3, [r0, #0]
 801dd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd78:	4798      	blx	r3
 801dd7a:	07c3      	lsls	r3, r0, #31
 801dd7c:	d51b      	bpl.n	801ddb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801dd7e:	6828      	ldr	r0, [r5, #0]
 801dd80:	9b02      	ldr	r3, [sp, #8]
 801dd82:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801dd86:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801dd8a:	6803      	ldr	r3, [r0, #0]
 801dd8c:	f8cd b000 	str.w	fp, [sp]
 801dd90:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801dd92:	4623      	mov	r3, r4
 801dd94:	e899 0006 	ldmia.w	r9, {r1, r2}
 801dd98:	47a8      	blx	r5
 801dd9a:	4607      	mov	r7, r0
 801dd9c:	4638      	mov	r0, r7
 801dd9e:	b00f      	add	sp, #60	; 0x3c
 801dda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dda4:	bf1f      	itttt	ne
 801dda6:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801ddaa:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801ddae:	189b      	addne	r3, r3, r2
 801ddb0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801ddb4:	e7ad      	b.n	801dd12 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801ddb6:	6828      	ldr	r0, [r5, #0]
 801ddb8:	4642      	mov	r2, r8
 801ddba:	4621      	mov	r1, r4
 801ddbc:	6803      	ldr	r3, [r0, #0]
 801ddbe:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801ddc0:	9b02      	ldr	r3, [sp, #8]
 801ddc2:	fb03 f30a 	mul.w	r3, r3, sl
 801ddc6:	47a8      	blx	r5
 801ddc8:	e7e8      	b.n	801dd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ddca:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801ddce:	f04f 0900 	mov.w	r9, #0
 801ddd2:	9b02      	ldr	r3, [sp, #8]
 801ddd4:	454b      	cmp	r3, r9
 801ddd6:	dde1      	ble.n	801dd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ddd8:	6828      	ldr	r0, [r5, #0]
 801ddda:	4642      	mov	r2, r8
 801dddc:	4621      	mov	r1, r4
 801ddde:	44d0      	add	r8, sl
 801dde0:	6803      	ldr	r3, [r0, #0]
 801dde2:	f109 0901 	add.w	r9, r9, #1
 801dde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dde8:	461e      	mov	r6, r3
 801ddea:	465b      	mov	r3, fp
 801ddec:	47b0      	blx	r6
 801ddee:	9b03      	ldr	r3, [sp, #12]
 801ddf0:	441c      	add	r4, r3
 801ddf2:	e7ee      	b.n	801ddd2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801ddf4:	2000b36c 	.word	0x2000b36c
 801ddf8:	0802ae7d 	.word	0x0802ae7d
 801ddfc:	0802b659 	.word	0x0802b659
 801de00:	0802ae4b 	.word	0x0802ae4b
 801de04:	0802af2f 	.word	0x0802af2f
 801de08:	0802af84 	.word	0x0802af84
 801de0c:	2000b366 	.word	0x2000b366
 801de10:	2000b368 	.word	0x2000b368
 801de14:	0802afc2 	.word	0x0802afc2

0801de18 <_ZN8touchgfx8LCD24bppC1Ev>:
 801de18:	4a0b      	ldr	r2, [pc, #44]	; (801de48 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801de1a:	6002      	str	r2, [r0, #0]
 801de1c:	2200      	movs	r2, #0
 801de1e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801de22:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801de26:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801de2a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801de2e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801de32:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801de36:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801de3a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801de3e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801de42:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801de46:	4770      	bx	lr
 801de48:	0802b2a8 	.word	0x0802b2a8

0801de4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de50:	b093      	sub	sp, #76	; 0x4c
 801de52:	880c      	ldrh	r4, [r1, #0]
 801de54:	4605      	mov	r5, r0
 801de56:	460f      	mov	r7, r1
 801de58:	4691      	mov	r9, r2
 801de5a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801de5e:	b12c      	cbz	r4, 801de6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801de60:	4b71      	ldr	r3, [pc, #452]	; (801e028 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801de62:	2168      	movs	r1, #104	; 0x68
 801de64:	4a71      	ldr	r2, [pc, #452]	; (801e02c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801de66:	4872      	ldr	r0, [pc, #456]	; (801e030 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801de68:	f007 fc4a 	bl	8025700 <__assert_func>
 801de6c:	6810      	ldr	r0, [r2, #0]
 801de6e:	ae0e      	add	r6, sp, #56	; 0x38
 801de70:	6851      	ldr	r1, [r2, #4]
 801de72:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801e038 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801de76:	c603      	stmia	r6!, {r0, r1}
 801de78:	6818      	ldr	r0, [r3, #0]
 801de7a:	ae10      	add	r6, sp, #64	; 0x40
 801de7c:	6859      	ldr	r1, [r3, #4]
 801de7e:	c603      	stmia	r6!, {r0, r1}
 801de80:	a80e      	add	r0, sp, #56	; 0x38
 801de82:	f7fb f933 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de86:	4649      	mov	r1, r9
 801de88:	a810      	add	r0, sp, #64	; 0x40
 801de8a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801e034 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801de8e:	f7fb f915 	bl	80190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de92:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801de96:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801de9a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801de9e:	f8d9 0000 	ldr.w	r0, [r9]
 801dea2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dea6:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801deaa:	440d      	add	r5, r1
 801deac:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801deb0:	440a      	add	r2, r1
 801deb2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801deb6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801deba:	4413      	add	r3, r2
 801debc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801dec0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801dec4:	930b      	str	r3, [sp, #44]	; 0x2c
 801dec6:	6803      	ldr	r3, [r0, #0]
 801dec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801decc:	4798      	blx	r3
 801dece:	2801      	cmp	r0, #1
 801ded0:	d11e      	bne.n	801df10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801ded2:	220b      	movs	r2, #11
 801ded4:	9008      	str	r0, [sp, #32]
 801ded6:	b2b6      	uxth	r6, r6
 801ded8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801dedc:	9207      	str	r2, [sp, #28]
 801dede:	4629      	mov	r1, r5
 801dee0:	f8ba 2000 	ldrh.w	r2, [sl]
 801dee4:	f8cd 8010 	str.w	r8, [sp, #16]
 801dee8:	9601      	str	r6, [sp, #4]
 801deea:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801deee:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801def2:	9203      	str	r2, [sp, #12]
 801def4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801def8:	9202      	str	r2, [sp, #8]
 801defa:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801defe:	9200      	str	r2, [sp, #0]
 801df00:	463a      	mov	r2, r7
 801df02:	f8d9 0000 	ldr.w	r0, [r9]
 801df06:	f7f8 f9db 	bl	80162c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801df0a:	b013      	add	sp, #76	; 0x4c
 801df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df10:	f8d9 0000 	ldr.w	r0, [r9]
 801df14:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801df18:	6803      	ldr	r3, [r0, #0]
 801df1a:	6a1b      	ldr	r3, [r3, #32]
 801df1c:	4798      	blx	r3
 801df1e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801df22:	f8ba 3000 	ldrh.w	r3, [sl]
 801df26:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801df2a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801df2e:	fb01 2303 	mla	r3, r1, r3, r2
 801df32:	4621      	mov	r1, r4
 801df34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df38:	4418      	add	r0, r3
 801df3a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801df3e:	930c      	str	r3, [sp, #48]	; 0x30
 801df40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df42:	4299      	cmp	r1, r3
 801df44:	da6a      	bge.n	801e01c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801df46:	1cc2      	adds	r2, r0, #3
 801df48:	46aa      	mov	sl, r5
 801df4a:	ebaa 0305 	sub.w	r3, sl, r5
 801df4e:	429e      	cmp	r6, r3
 801df50:	dd55      	ble.n	801dffe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801df52:	2404      	movs	r4, #4
 801df54:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801df58:	fb14 4303 	smlabb	r3, r4, r3, r4
 801df5c:	eb07 0e03 	add.w	lr, r7, r3
 801df60:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801df64:	b184      	cbz	r4, 801df88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801df66:	2cff      	cmp	r4, #255	; 0xff
 801df68:	f817 b003 	ldrb.w	fp, [r7, r3]
 801df6c:	d10e      	bne.n	801df8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801df6e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801df72:	d10b      	bne.n	801df8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801df74:	f802 bc03 	strb.w	fp, [r2, #-3]
 801df78:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801df7c:	f802 3c02 	strb.w	r3, [r2, #-2]
 801df80:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801df84:	f802 3c01 	strb.w	r3, [r2, #-1]
 801df88:	3203      	adds	r2, #3
 801df8a:	e7de      	b.n	801df4a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801df8c:	fb08 f404 	mul.w	r4, r8, r4
 801df90:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801df94:	1c63      	adds	r3, r4, #1
 801df96:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801df9a:	121b      	asrs	r3, r3, #8
 801df9c:	b29c      	uxth	r4, r3
 801df9e:	43db      	mvns	r3, r3
 801dfa0:	fb1b fb04 	smulbb	fp, fp, r4
 801dfa4:	b2db      	uxtb	r3, r3
 801dfa6:	fb0c bc03 	mla	ip, ip, r3, fp
 801dfaa:	fa1f fc8c 	uxth.w	ip, ip
 801dfae:	f10c 0b01 	add.w	fp, ip, #1
 801dfb2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dfb6:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801dfba:	fb1b fb03 	smulbb	fp, fp, r3
 801dfbe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfc2:	f802 cc03 	strb.w	ip, [r2, #-3]
 801dfc6:	f89e c001 	ldrb.w	ip, [lr, #1]
 801dfca:	fb0c bc04 	mla	ip, ip, r4, fp
 801dfce:	fa1f fc8c 	uxth.w	ip, ip
 801dfd2:	f10c 0b01 	add.w	fp, ip, #1
 801dfd6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dfda:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfde:	f802 cc02 	strb.w	ip, [r2, #-2]
 801dfe2:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801dfe6:	f89e e002 	ldrb.w	lr, [lr, #2]
 801dfea:	fb1c f303 	smulbb	r3, ip, r3
 801dfee:	fb0e 3304 	mla	r3, lr, r4, r3
 801dff2:	b29b      	uxth	r3, r3
 801dff4:	1c5c      	adds	r4, r3, #1
 801dff6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801dffa:	121b      	asrs	r3, r3, #8
 801dffc:	e7c2      	b.n	801df84 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801dffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e000:	3101      	adds	r1, #1
 801e002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e004:	881b      	ldrh	r3, [r3, #0]
 801e006:	1b9b      	subs	r3, r3, r6
 801e008:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e00c:	4413      	add	r3, r2
 801e00e:	4418      	add	r0, r3
 801e010:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e014:	1b9b      	subs	r3, r3, r6
 801e016:	444b      	add	r3, r9
 801e018:	441d      	add	r5, r3
 801e01a:	e791      	b.n	801df40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e01c:	4b05      	ldr	r3, [pc, #20]	; (801e034 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801e01e:	6818      	ldr	r0, [r3, #0]
 801e020:	6803      	ldr	r3, [r0, #0]
 801e022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e024:	4798      	blx	r3
 801e026:	e770      	b.n	801df0a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e028:	0802adaf 	.word	0x0802adaf
 801e02c:	0802b47b 	.word	0x0802b47b
 801e030:	0802ae4b 	.word	0x0802ae4b
 801e034:	2000b36c 	.word	0x2000b36c
 801e038:	2000b366 	.word	0x2000b366

0801e03c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e040:	4614      	mov	r4, r2
 801e042:	880a      	ldrh	r2, [r1, #0]
 801e044:	b091      	sub	sp, #68	; 0x44
 801e046:	4680      	mov	r8, r0
 801e048:	2a01      	cmp	r2, #1
 801e04a:	460e      	mov	r6, r1
 801e04c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e050:	d005      	beq.n	801e05e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801e052:	4b6d      	ldr	r3, [pc, #436]	; (801e208 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e054:	21b6      	movs	r1, #182	; 0xb6
 801e056:	4a6d      	ldr	r2, [pc, #436]	; (801e20c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801e058:	486d      	ldr	r0, [pc, #436]	; (801e210 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e05a:	f007 fb51 	bl	8025700 <__assert_func>
 801e05e:	6820      	ldr	r0, [r4, #0]
 801e060:	ad0c      	add	r5, sp, #48	; 0x30
 801e062:	6861      	ldr	r1, [r4, #4]
 801e064:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e214 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801e068:	c503      	stmia	r5!, {r0, r1}
 801e06a:	6818      	ldr	r0, [r3, #0]
 801e06c:	ad0e      	add	r5, sp, #56	; 0x38
 801e06e:	6859      	ldr	r1, [r3, #4]
 801e070:	c503      	stmia	r5!, {r0, r1}
 801e072:	a80c      	add	r0, sp, #48	; 0x30
 801e074:	f7fb f83a 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e078:	4621      	mov	r1, r4
 801e07a:	a80e      	add	r0, sp, #56	; 0x38
 801e07c:	f7fb f81e 	bl	80190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e080:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e084:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e088:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e08c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e090:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e094:	eb08 0401 	add.w	r4, r8, r1
 801e098:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e09c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e218 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e0a0:	440a      	add	r2, r1
 801e0a2:	f8d8 0000 	ldr.w	r0, [r8]
 801e0a6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e0aa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e0ae:	4413      	add	r3, r2
 801e0b0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e0b4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e0b8:	930a      	str	r3, [sp, #40]	; 0x28
 801e0ba:	6803      	ldr	r3, [r0, #0]
 801e0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e0c0:	4798      	blx	r3
 801e0c2:	2801      	cmp	r0, #1
 801e0c4:	d11e      	bne.n	801e104 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e0c6:	220b      	movs	r2, #11
 801e0c8:	9008      	str	r0, [sp, #32]
 801e0ca:	b2ad      	uxth	r5, r5
 801e0cc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e0d0:	9207      	str	r2, [sp, #28]
 801e0d2:	4621      	mov	r1, r4
 801e0d4:	f8b9 2000 	ldrh.w	r2, [r9]
 801e0d8:	9501      	str	r5, [sp, #4]
 801e0da:	9206      	str	r2, [sp, #24]
 801e0dc:	2200      	movs	r2, #0
 801e0de:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e0e2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e0e6:	9203      	str	r2, [sp, #12]
 801e0e8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e0ec:	9202      	str	r2, [sp, #8]
 801e0ee:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e0f2:	9200      	str	r2, [sp, #0]
 801e0f4:	4632      	mov	r2, r6
 801e0f6:	f8d8 0000 	ldr.w	r0, [r8]
 801e0fa:	f7f8 f8e1 	bl	80162c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e0fe:	b011      	add	sp, #68	; 0x44
 801e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e104:	f8d8 0000 	ldr.w	r0, [r8]
 801e108:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e10c:	6803      	ldr	r3, [r0, #0]
 801e10e:	6a1b      	ldr	r3, [r3, #32]
 801e110:	4798      	blx	r3
 801e112:	f8b9 3000 	ldrh.w	r3, [r9]
 801e116:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e11a:	f04f 0e00 	mov.w	lr, #0
 801e11e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e122:	fa1f f987 	uxth.w	r9, r7
 801e126:	fb01 2303 	mla	r3, r1, r3, r2
 801e12a:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e12e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e132:	b289      	uxth	r1, r1
 801e134:	4418      	add	r0, r3
 801e136:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e13a:	930b      	str	r3, [sp, #44]	; 0x2c
 801e13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e13e:	459e      	cmp	lr, r3
 801e140:	da5c      	bge.n	801e1fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e142:	1cc3      	adds	r3, r0, #3
 801e144:	46a2      	mov	sl, r4
 801e146:	ebaa 0204 	sub.w	r2, sl, r4
 801e14a:	4295      	cmp	r5, r2
 801e14c:	dd46      	ble.n	801e1dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e14e:	f04f 0c03 	mov.w	ip, #3
 801e152:	f04f 0b04 	mov.w	fp, #4
 801e156:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e15a:	2fff      	cmp	r7, #255	; 0xff
 801e15c:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e160:	eb06 0c02 	add.w	ip, r6, r2
 801e164:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e168:	d02f      	beq.n	801e1ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e16a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e16e:	fb12 f201 	smulbb	r2, r2, r1
 801e172:	fb0b 2209 	mla	r2, fp, r9, r2
 801e176:	b292      	uxth	r2, r2
 801e178:	f102 0b01 	add.w	fp, r2, #1
 801e17c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e180:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e184:	fb1b fb01 	smulbb	fp, fp, r1
 801e188:	1212      	asrs	r2, r2, #8
 801e18a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e18e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e192:	fb02 b209 	mla	r2, r2, r9, fp
 801e196:	b292      	uxth	r2, r2
 801e198:	f102 0b01 	add.w	fp, r2, #1
 801e19c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e1a0:	1212      	asrs	r2, r2, #8
 801e1a2:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e1a6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e1aa:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e1ae:	fb1c fc01 	smulbb	ip, ip, r1
 801e1b2:	fb02 c209 	mla	r2, r2, r9, ip
 801e1b6:	b292      	uxth	r2, r2
 801e1b8:	f102 0c01 	add.w	ip, r2, #1
 801e1bc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e1c0:	1212      	asrs	r2, r2, #8
 801e1c2:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e1c6:	3303      	adds	r3, #3
 801e1c8:	e7bd      	b.n	801e146 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e1ca:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e1ce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e1d2:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e1d6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e1da:	e7f2      	b.n	801e1c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e1dc:	4b0d      	ldr	r3, [pc, #52]	; (801e214 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e1de:	f10e 0e01 	add.w	lr, lr, #1
 801e1e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e1e4:	881b      	ldrh	r3, [r3, #0]
 801e1e6:	1b5b      	subs	r3, r3, r5
 801e1e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e1ec:	4413      	add	r3, r2
 801e1ee:	4418      	add	r0, r3
 801e1f0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e1f4:	1b5b      	subs	r3, r3, r5
 801e1f6:	4443      	add	r3, r8
 801e1f8:	441c      	add	r4, r3
 801e1fa:	e79f      	b.n	801e13c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e1fc:	4b06      	ldr	r3, [pc, #24]	; (801e218 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e1fe:	6818      	ldr	r0, [r3, #0]
 801e200:	6803      	ldr	r3, [r0, #0]
 801e202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e204:	4798      	blx	r3
 801e206:	e77a      	b.n	801e0fe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e208:	0802ac93 	.word	0x0802ac93
 801e20c:	0802b36e 	.word	0x0802b36e
 801e210:	0802ae4b 	.word	0x0802ae4b
 801e214:	2000b366 	.word	0x2000b366
 801e218:	2000b36c 	.word	0x2000b36c

0801e21c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e21c:	b570      	push	{r4, r5, r6, lr}
 801e21e:	780d      	ldrb	r5, [r1, #0]
 801e220:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e224:	2d01      	cmp	r5, #1
 801e226:	d00d      	beq.n	801e244 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e228:	d307      	bcc.n	801e23a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e22a:	2d02      	cmp	r5, #2
 801e22c:	d10f      	bne.n	801e24e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e22e:	4b08      	ldr	r3, [pc, #32]	; (801e250 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e230:	215b      	movs	r1, #91	; 0x5b
 801e232:	4a08      	ldr	r2, [pc, #32]	; (801e254 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e234:	4808      	ldr	r0, [pc, #32]	; (801e258 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e236:	f007 fa63 	bl	8025700 <__assert_func>
 801e23a:	9404      	str	r4, [sp, #16]
 801e23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e240:	f7ff be04 	b.w	801de4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e244:	9404      	str	r4, [sp, #16]
 801e246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e24a:	f7ff bef7 	b.w	801e03c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e24e:	bd70      	pop	{r4, r5, r6, pc}
 801e250:	0802ac48 	.word	0x0802ac48
 801e254:	0802b2ec 	.word	0x0802b2ec
 801e258:	0802ae4b 	.word	0x0802ae4b

0801e25c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e260:	4605      	mov	r5, r0
 801e262:	b08f      	sub	sp, #60	; 0x3c
 801e264:	460c      	mov	r4, r1
 801e266:	461f      	mov	r7, r3
 801e268:	2b00      	cmp	r3, #0
 801e26a:	d04e      	beq.n	801e30a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e26c:	6808      	ldr	r0, [r1, #0]
 801e26e:	ab0a      	add	r3, sp, #40	; 0x28
 801e270:	6849      	ldr	r1, [r1, #4]
 801e272:	4e81      	ldr	r6, [pc, #516]	; (801e478 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e274:	c303      	stmia	r3!, {r0, r1}
 801e276:	6810      	ldr	r0, [r2, #0]
 801e278:	ab0c      	add	r3, sp, #48	; 0x30
 801e27a:	6851      	ldr	r1, [r2, #4]
 801e27c:	c303      	stmia	r3!, {r0, r1}
 801e27e:	a80a      	add	r0, sp, #40	; 0x28
 801e280:	f7fa ff34 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e284:	4621      	mov	r1, r4
 801e286:	a80c      	add	r0, sp, #48	; 0x30
 801e288:	f7fa ff18 	bl	80190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e28c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e290:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e294:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e298:	6830      	ldr	r0, [r6, #0]
 801e29a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e29e:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 801e2a2:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 801e2a6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e2aa:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e2ae:	440a      	add	r2, r1
 801e2b0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e2b4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e2b8:	4413      	add	r3, r2
 801e2ba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e2be:	6803      	ldr	r3, [r0, #0]
 801e2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e2c2:	4798      	blx	r3
 801e2c4:	2fff      	cmp	r7, #255	; 0xff
 801e2c6:	4633      	mov	r3, r6
 801e2c8:	4e6c      	ldr	r6, [pc, #432]	; (801e47c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e2ca:	d021      	beq.n	801e310 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801e2cc:	f010 0f04 	tst.w	r0, #4
 801e2d0:	6818      	ldr	r0, [r3, #0]
 801e2d2:	d020      	beq.n	801e316 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801e2d4:	2100      	movs	r1, #0
 801e2d6:	f04f 0e01 	mov.w	lr, #1
 801e2da:	f8d0 c000 	ldr.w	ip, [r0]
 801e2de:	b2a4      	uxth	r4, r4
 801e2e0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e2e4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e2e8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801e2ec:	8836      	ldrh	r6, [r6, #0]
 801e2ee:	9703      	str	r7, [sp, #12]
 801e2f0:	9400      	str	r4, [sp, #0]
 801e2f2:	e9cd 1604 	strd	r1, r6, [sp, #16]
 801e2f6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e2fa:	9102      	str	r1, [sp, #8]
 801e2fc:	fa1f f188 	uxth.w	r1, r8
 801e300:	9101      	str	r1, [sp, #4]
 801e302:	4629      	mov	r1, r5
 801e304:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 801e308:	47a0      	blx	r4
 801e30a:	b00f      	add	sp, #60	; 0x3c
 801e30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e310:	f010 0f01 	tst.w	r0, #1
 801e314:	e7dc      	b.n	801e2d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 801e316:	6803      	ldr	r3, [r0, #0]
 801e318:	6a1b      	ldr	r3, [r3, #32]
 801e31a:	4798      	blx	r3
 801e31c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e320:	8833      	ldrh	r3, [r6, #0]
 801e322:	2fff      	cmp	r7, #255	; 0xff
 801e324:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801e328:	fb01 2303 	mla	r3, r1, r3, r2
 801e32c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 801e330:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e334:	4418      	add	r0, r3
 801e336:	d128      	bne.n	801e38a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 801e338:	0051      	lsls	r1, r2, #1
 801e33a:	2700      	movs	r7, #0
 801e33c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e340:	4547      	cmp	r7, r8
 801e342:	f280 8092 	bge.w	801e46a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e346:	4684      	mov	ip, r0
 801e348:	f04f 0e00 	mov.w	lr, #0
 801e34c:	45a6      	cmp	lr, r4
 801e34e:	f10c 0c03 	add.w	ip, ip, #3
 801e352:	da7c      	bge.n	801e44e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 801e354:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 801e358:	f10e 0e01 	add.w	lr, lr, #1
 801e35c:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801e360:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 801e364:	ea4f 03e9 	mov.w	r3, r9, asr #3
 801e368:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801e36c:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 801e370:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e374:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 801e378:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801e37c:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801e380:	f80c ac01 	strb.w	sl, [ip, #-1]
 801e384:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801e388:	e7e0      	b.n	801e34c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 801e38a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801e38e:	ea6f 0c07 	mvn.w	ip, r7
 801e392:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 801e396:	f04f 0900 	mov.w	r9, #0
 801e39a:	9309      	str	r3, [sp, #36]	; 0x24
 801e39c:	fa5f fc8c 	uxtb.w	ip, ip
 801e3a0:	b2bb      	uxth	r3, r7
 801e3a2:	45c1      	cmp	r9, r8
 801e3a4:	da61      	bge.n	801e46a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e3a6:	4601      	mov	r1, r0
 801e3a8:	f04f 0e00 	mov.w	lr, #0
 801e3ac:	45a6      	cmp	lr, r4
 801e3ae:	f101 0103 	add.w	r1, r1, #3
 801e3b2:	da3b      	bge.n	801e42c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 801e3b4:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801e3b8:	f10e 0e01 	add.w	lr, lr, #1
 801e3bc:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 801e3c0:	1216      	asrs	r6, r2, #8
 801e3c2:	10d7      	asrs	r7, r2, #3
 801e3c4:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 801e3c8:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 801e3cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e3d0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e3d4:	fb1b fb0c 	smulbb	fp, fp, ip
 801e3d8:	b2d2      	uxtb	r2, r2
 801e3da:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e3de:	fb02 b203 	mla	r2, r2, r3, fp
 801e3e2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e3e6:	fb17 f703 	smulbb	r7, r7, r3
 801e3ea:	fb16 f603 	smulbb	r6, r6, r3
 801e3ee:	b292      	uxth	r2, r2
 801e3f0:	f102 0b01 	add.w	fp, r2, #1
 801e3f4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e3f8:	1212      	asrs	r2, r2, #8
 801e3fa:	f801 2c03 	strb.w	r2, [r1, #-3]
 801e3fe:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 801e402:	fb02 770c 	mla	r7, r2, ip, r7
 801e406:	b2bf      	uxth	r7, r7
 801e408:	1c7a      	adds	r2, r7, #1
 801e40a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e40e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 801e412:	fb02 660c 	mla	r6, r2, ip, r6
 801e416:	123f      	asrs	r7, r7, #8
 801e418:	b2b6      	uxth	r6, r6
 801e41a:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e41e:	1c72      	adds	r2, r6, #1
 801e420:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e424:	1236      	asrs	r6, r6, #8
 801e426:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e42a:	e7bf      	b.n	801e3ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 801e42c:	4a13      	ldr	r2, [pc, #76]	; (801e47c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e42e:	f109 0901 	add.w	r9, r9, #1
 801e432:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e434:	8812      	ldrh	r2, [r2, #0]
 801e436:	1b12      	subs	r2, r2, r4
 801e438:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e43c:	440a      	add	r2, r1
 801e43e:	4410      	add	r0, r2
 801e440:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e444:	1b12      	subs	r2, r2, r4
 801e446:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801e44a:	4415      	add	r5, r2
 801e44c:	e7a9      	b.n	801e3a2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 801e44e:	8833      	ldrh	r3, [r6, #0]
 801e450:	3701      	adds	r7, #1
 801e452:	1b1b      	subs	r3, r3, r4
 801e454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e458:	4413      	add	r3, r2
 801e45a:	4418      	add	r0, r3
 801e45c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e460:	1b1b      	subs	r3, r3, r4
 801e462:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e466:	441d      	add	r5, r3
 801e468:	e76a      	b.n	801e340 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 801e46a:	4b03      	ldr	r3, [pc, #12]	; (801e478 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e46c:	6818      	ldr	r0, [r3, #0]
 801e46e:	6803      	ldr	r3, [r0, #0]
 801e470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e472:	4798      	blx	r3
 801e474:	e749      	b.n	801e30a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e476:	bf00      	nop
 801e478:	2000b36c 	.word	0x2000b36c
 801e47c:	2000b366 	.word	0x2000b366

0801e480 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e484:	b08b      	sub	sp, #44	; 0x2c
 801e486:	460c      	mov	r4, r1
 801e488:	4680      	mov	r8, r0
 801e48a:	469a      	mov	sl, r3
 801e48c:	6808      	ldr	r0, [r1, #0]
 801e48e:	ab06      	add	r3, sp, #24
 801e490:	6849      	ldr	r1, [r1, #4]
 801e492:	c303      	stmia	r3!, {r0, r1}
 801e494:	6810      	ldr	r0, [r2, #0]
 801e496:	ab08      	add	r3, sp, #32
 801e498:	6851      	ldr	r1, [r2, #4]
 801e49a:	c303      	stmia	r3!, {r0, r1}
 801e49c:	a806      	add	r0, sp, #24
 801e49e:	f7fa fe25 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e4a2:	4621      	mov	r1, r4
 801e4a4:	a808      	add	r0, sp, #32
 801e4a6:	4c61      	ldr	r4, [pc, #388]	; (801e62c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e4a8:	f7fa fe08 	bl	80190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4ac:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e4b0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e4b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e4b8:	6820      	ldr	r0, [r4, #0]
 801e4ba:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e4be:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e4c2:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e4c6:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e4ca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e4ce:	440a      	add	r2, r1
 801e4d0:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e4d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e4d8:	4413      	add	r3, r2
 801e4da:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e4de:	6803      	ldr	r3, [r0, #0]
 801e4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e4e2:	4798      	blx	r3
 801e4e4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e4e8:	d118      	bne.n	801e51c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e4ea:	f010 0f20 	tst.w	r0, #32
 801e4ee:	6820      	ldr	r0, [r4, #0]
 801e4f0:	d017      	beq.n	801e522 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e4f2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e4f6:	b2bf      	uxth	r7, r7
 801e4f8:	6801      	ldr	r1, [r0, #0]
 801e4fa:	9402      	str	r4, [sp, #8]
 801e4fc:	fa1f f489 	uxth.w	r4, r9
 801e500:	f8cd a00c 	str.w	sl, [sp, #12]
 801e504:	9401      	str	r4, [sp, #4]
 801e506:	9700      	str	r7, [sp, #0]
 801e508:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e50c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e50e:	4641      	mov	r1, r8
 801e510:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e514:	47a0      	blx	r4
 801e516:	b00b      	add	sp, #44	; 0x2c
 801e518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e51c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e520:	e7e5      	b.n	801e4ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e522:	6803      	ldr	r3, [r0, #0]
 801e524:	6a1b      	ldr	r3, [r3, #32]
 801e526:	4798      	blx	r3
 801e528:	4b41      	ldr	r3, [pc, #260]	; (801e630 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e52a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e52e:	f04f 0c00 	mov.w	ip, #0
 801e532:	881a      	ldrh	r2, [r3, #0]
 801e534:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e538:	fb04 1202 	mla	r2, r4, r2, r1
 801e53c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e540:	4410      	add	r0, r2
 801e542:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e546:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e54a:	0092      	lsls	r2, r2, #2
 801e54c:	9105      	str	r1, [sp, #20]
 801e54e:	9204      	str	r2, [sp, #16]
 801e550:	45cc      	cmp	ip, r9
 801e552:	da65      	bge.n	801e620 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e554:	1cc4      	adds	r4, r0, #3
 801e556:	f108 0504 	add.w	r5, r8, #4
 801e55a:	f04f 0e00 	mov.w	lr, #0
 801e55e:	45be      	cmp	lr, r7
 801e560:	da4d      	bge.n	801e5fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e562:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e566:	b181      	cbz	r1, 801e58a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e568:	29ff      	cmp	r1, #255	; 0xff
 801e56a:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e56e:	d111      	bne.n	801e594 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e570:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e574:	d10e      	bne.n	801e594 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e576:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e57a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e57e:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e582:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e586:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e58a:	f10e 0e01 	add.w	lr, lr, #1
 801e58e:	3403      	adds	r4, #3
 801e590:	3504      	adds	r5, #4
 801e592:	e7e4      	b.n	801e55e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e594:	fb0a f101 	mul.w	r1, sl, r1
 801e598:	1c4a      	adds	r2, r1, #1
 801e59a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e59e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e5a2:	1212      	asrs	r2, r2, #8
 801e5a4:	b296      	uxth	r6, r2
 801e5a6:	43d2      	mvns	r2, r2
 801e5a8:	fb1b fb06 	smulbb	fp, fp, r6
 801e5ac:	b2d2      	uxtb	r2, r2
 801e5ae:	fb01 b102 	mla	r1, r1, r2, fp
 801e5b2:	b289      	uxth	r1, r1
 801e5b4:	f101 0b01 	add.w	fp, r1, #1
 801e5b8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e5bc:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e5c0:	fb1b fb02 	smulbb	fp, fp, r2
 801e5c4:	1209      	asrs	r1, r1, #8
 801e5c6:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e5ca:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e5ce:	fb01 b106 	mla	r1, r1, r6, fp
 801e5d2:	b289      	uxth	r1, r1
 801e5d4:	f101 0b01 	add.w	fp, r1, #1
 801e5d8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e5dc:	1209      	asrs	r1, r1, #8
 801e5de:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e5e2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e5e6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e5ea:	fb11 f202 	smulbb	r2, r1, r2
 801e5ee:	fb0b 2206 	mla	r2, fp, r6, r2
 801e5f2:	b292      	uxth	r2, r2
 801e5f4:	1c56      	adds	r6, r2, #1
 801e5f6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e5fa:	1212      	asrs	r2, r2, #8
 801e5fc:	e7c3      	b.n	801e586 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e5fe:	881a      	ldrh	r2, [r3, #0]
 801e600:	f10c 0c01 	add.w	ip, ip, #1
 801e604:	9905      	ldr	r1, [sp, #20]
 801e606:	1bd2      	subs	r2, r2, r7
 801e608:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e60c:	440a      	add	r2, r1
 801e60e:	9904      	ldr	r1, [sp, #16]
 801e610:	4410      	add	r0, r2
 801e612:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e616:	1bd2      	subs	r2, r2, r7
 801e618:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e61c:	4490      	add	r8, r2
 801e61e:	e797      	b.n	801e550 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e620:	4b02      	ldr	r3, [pc, #8]	; (801e62c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e622:	6818      	ldr	r0, [r3, #0]
 801e624:	6803      	ldr	r3, [r0, #0]
 801e626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e628:	4798      	blx	r3
 801e62a:	e774      	b.n	801e516 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e62c:	2000b36c 	.word	0x2000b36c
 801e630:	2000b366 	.word	0x2000b366

0801e634 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e638:	b085      	sub	sp, #20
 801e63a:	4606      	mov	r6, r0
 801e63c:	460c      	mov	r4, r1
 801e63e:	4691      	mov	r9, r2
 801e640:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e644:	4698      	mov	r8, r3
 801e646:	b3a5      	cbz	r5, 801e6b2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e648:	4608      	mov	r0, r1
 801e64a:	f7fd fa0b 	bl	801ba64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e64e:	4607      	mov	r7, r0
 801e650:	4620      	mov	r0, r4
 801e652:	f7fd fa41 	bl	801bad8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e656:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e65a:	4620      	mov	r0, r4
 801e65c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e660:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e664:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e668:	f7fd fb4e 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e66c:	b1a0      	cbz	r0, 801e698 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e66e:	4620      	mov	r0, r4
 801e670:	f7fd fb4a 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e674:	2801      	cmp	r0, #1
 801e676:	d00f      	beq.n	801e698 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e678:	4620      	mov	r0, r4
 801e67a:	f7fd fb45 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e67e:	2802      	cmp	r0, #2
 801e680:	d00a      	beq.n	801e698 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e682:	4620      	mov	r0, r4
 801e684:	f7fd fb40 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e688:	280b      	cmp	r0, #11
 801e68a:	d005      	beq.n	801e698 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e68c:	4b21      	ldr	r3, [pc, #132]	; (801e714 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 801e68e:	213f      	movs	r1, #63	; 0x3f
 801e690:	4a21      	ldr	r2, [pc, #132]	; (801e718 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 801e692:	4822      	ldr	r0, [pc, #136]	; (801e71c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 801e694:	f007 f834 	bl	8025700 <__assert_func>
 801e698:	4620      	mov	r0, r4
 801e69a:	f7fd fb35 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e69e:	2802      	cmp	r0, #2
 801e6a0:	4620      	mov	r0, r4
 801e6a2:	d109      	bne.n	801e6b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 801e6a4:	f7fd faac 	bl	801bc00 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e6a8:	462b      	mov	r3, r5
 801e6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6ac:	a902      	add	r1, sp, #8
 801e6ae:	f7ff fee7 	bl	801e480 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e6b2:	b005      	add	sp, #20
 801e6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6b8:	f7fd fb26 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e6bc:	280b      	cmp	r0, #11
 801e6be:	4620      	mov	r0, r4
 801e6c0:	d10d      	bne.n	801e6de <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801e6c2:	f7fd fa9d 	bl	801bc00 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e6c6:	4606      	mov	r6, r0
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	f7fd facb 	bl	801bc64 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e6ce:	9500      	str	r5, [sp, #0]
 801e6d0:	4601      	mov	r1, r0
 801e6d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6d4:	aa02      	add	r2, sp, #8
 801e6d6:	4630      	mov	r0, r6
 801e6d8:	f7ff fda0 	bl	801e21c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e6dc:	e7e9      	b.n	801e6b2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e6de:	f7fd fb13 	bl	801bd08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e6e2:	b940      	cbnz	r0, 801e6f6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 801e6e4:	4620      	mov	r0, r4
 801e6e6:	f7fd fa8b 	bl	801bc00 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e6ea:	462b      	mov	r3, r5
 801e6ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6ee:	a902      	add	r1, sp, #8
 801e6f0:	f7ff fdb4 	bl	801e25c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e6f4:	e7dd      	b.n	801e6b2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e6f6:	6833      	ldr	r3, [r6, #0]
 801e6f8:	4620      	mov	r0, r4
 801e6fa:	68df      	ldr	r7, [r3, #12]
 801e6fc:	f7fd fa80 	bl	801bc00 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e700:	2300      	movs	r3, #0
 801e702:	4601      	mov	r1, r0
 801e704:	aa02      	add	r2, sp, #8
 801e706:	4630      	mov	r0, r6
 801e708:	e9cd 5300 	strd	r5, r3, [sp]
 801e70c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e70e:	47b8      	blx	r7
 801e710:	e7cf      	b.n	801e6b2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e712:	bf00      	nop
 801e714:	0802ace1 	.word	0x0802ace1
 801e718:	0802b3f7 	.word	0x0802b3f7
 801e71c:	0802ae4b 	.word	0x0802ae4b

0801e720 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e720:	b570      	push	{r4, r5, r6, lr}
 801e722:	9d04      	ldr	r5, [sp, #16]
 801e724:	460c      	mov	r4, r1
 801e726:	4619      	mov	r1, r3
 801e728:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e72c:	2a0c      	cmp	r2, #12
 801e72e:	d826      	bhi.n	801e77e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e730:	e8df f002 	tbb	[pc, r2]
 801e734:	200e1407 	.word	0x200e1407
 801e738:	20202020 	.word	0x20202020
 801e73c:	20202020 	.word	0x20202020
 801e740:	20          	.byte	0x20
 801e741:	00          	.byte	0x00
 801e742:	4b0f      	ldr	r3, [pc, #60]	; (801e780 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e744:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 801e748:	4a0e      	ldr	r2, [pc, #56]	; (801e784 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e74a:	480f      	ldr	r0, [pc, #60]	; (801e788 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e74c:	f006 ffd8 	bl	8025700 <__assert_func>
 801e750:	462a      	mov	r2, r5
 801e752:	4620      	mov	r0, r4
 801e754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e758:	f7ff be92 	b.w	801e480 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e75c:	6802      	ldr	r2, [r0, #0]
 801e75e:	2600      	movs	r6, #0
 801e760:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e764:	68d6      	ldr	r6, [r2, #12]
 801e766:	462b      	mov	r3, r5
 801e768:	460a      	mov	r2, r1
 801e76a:	4621      	mov	r1, r4
 801e76c:	46b4      	mov	ip, r6
 801e76e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e772:	4760      	bx	ip
 801e774:	4b05      	ldr	r3, [pc, #20]	; (801e78c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e776:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801e77a:	4a02      	ldr	r2, [pc, #8]	; (801e784 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e77c:	e7e5      	b.n	801e74a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e77e:	bd70      	pop	{r4, r5, r6, pc}
 801e780:	0802b022 	.word	0x0802b022
 801e784:	0802b6df 	.word	0x0802b6df
 801e788:	0802ae4b 	.word	0x0802ae4b
 801e78c:	0802b063 	.word	0x0802b063

0801e790 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e790:	b158      	cbz	r0, 801e7aa <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e792:	2902      	cmp	r1, #2
 801e794:	d00f      	beq.n	801e7b6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e796:	2903      	cmp	r1, #3
 801e798:	d010      	beq.n	801e7bc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e79a:	2901      	cmp	r1, #1
 801e79c:	d101      	bne.n	801e7a2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e79e:	2001      	movs	r0, #1
 801e7a0:	4770      	bx	lr
 801e7a2:	4b08      	ldr	r3, [pc, #32]	; (801e7c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e7a4:	8819      	ldrh	r1, [r3, #0]
 801e7a6:	4248      	negs	r0, r1
 801e7a8:	4770      	bx	lr
 801e7aa:	2902      	cmp	r1, #2
 801e7ac:	d006      	beq.n	801e7bc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e7ae:	2903      	cmp	r1, #3
 801e7b0:	d0f7      	beq.n	801e7a2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e7b2:	2901      	cmp	r1, #1
 801e7b4:	d1f3      	bne.n	801e79e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e7b6:	4b03      	ldr	r3, [pc, #12]	; (801e7c4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e7b8:	8818      	ldrh	r0, [r3, #0]
 801e7ba:	4770      	bx	lr
 801e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 801e7c0:	4770      	bx	lr
 801e7c2:	bf00      	nop
 801e7c4:	2000b366 	.word	0x2000b366

0801e7c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e7c8:	b170      	cbz	r0, 801e7e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e7ca:	2902      	cmp	r1, #2
 801e7cc:	d012      	beq.n	801e7f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e7ce:	2903      	cmp	r1, #3
 801e7d0:	d006      	beq.n	801e7e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e7d2:	2901      	cmp	r1, #1
 801e7d4:	d001      	beq.n	801e7da <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e7d6:	2001      	movs	r0, #1
 801e7d8:	4770      	bx	lr
 801e7da:	4b08      	ldr	r3, [pc, #32]	; (801e7fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e7dc:	8818      	ldrh	r0, [r3, #0]
 801e7de:	4770      	bx	lr
 801e7e0:	4b06      	ldr	r3, [pc, #24]	; (801e7fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e7e2:	8818      	ldrh	r0, [r3, #0]
 801e7e4:	4240      	negs	r0, r0
 801e7e6:	4770      	bx	lr
 801e7e8:	2902      	cmp	r1, #2
 801e7ea:	d0f9      	beq.n	801e7e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e7ec:	2903      	cmp	r1, #3
 801e7ee:	d0f2      	beq.n	801e7d6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e7f0:	2901      	cmp	r1, #1
 801e7f2:	d1f2      	bne.n	801e7da <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 801e7f8:	4770      	bx	lr
 801e7fa:	bf00      	nop
 801e7fc:	2000b366 	.word	0x2000b366

0801e800 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e804:	b097      	sub	sp, #92	; 0x5c
 801e806:	910b      	str	r1, [sp, #44]	; 0x2c
 801e808:	a912      	add	r1, sp, #72	; 0x48
 801e80a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801e80e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801e812:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801e816:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801e81a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801e81e:	e881 000c 	stmia.w	r1, {r2, r3}
 801e822:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801e826:	9308      	str	r3, [sp, #32]
 801e828:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801e82c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801e830:	9310      	str	r3, [sp, #64]	; 0x40
 801e832:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801e836:	798d      	ldrb	r5, [r1, #6]
 801e838:	930c      	str	r3, [sp, #48]	; 0x30
 801e83a:	7b4b      	ldrb	r3, [r1, #13]
 801e83c:	0158      	lsls	r0, r3, #5
 801e83e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e842:	4328      	orrs	r0, r5
 801e844:	9007      	str	r0, [sp, #28]
 801e846:	f000 8184 	beq.w	801eb52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e84a:	011b      	lsls	r3, r3, #4
 801e84c:	79c8      	ldrb	r0, [r1, #7]
 801e84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e852:	4303      	orrs	r3, r0
 801e854:	9309      	str	r3, [sp, #36]	; 0x24
 801e856:	f000 817c 	beq.w	801eb52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e85a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e85e:	b29b      	uxth	r3, r3
 801e860:	2f00      	cmp	r7, #0
 801e862:	f000 8122 	beq.w	801eaaa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801e866:	1aff      	subs	r7, r7, r3
 801e868:	b2bf      	uxth	r7, r7
 801e86a:	043b      	lsls	r3, r7, #16
 801e86c:	d502      	bpl.n	801e874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e86e:	1bf6      	subs	r6, r6, r7
 801e870:	2700      	movs	r7, #0
 801e872:	b236      	sxth	r6, r6
 801e874:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e878:	a812      	add	r0, sp, #72	; 0x48
 801e87a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e87e:	428e      	cmp	r6, r1
 801e880:	b28b      	uxth	r3, r1
 801e882:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801e886:	bfbf      	itttt	lt
 801e888:	18ff      	addlt	r7, r7, r3
 801e88a:	1bbe      	sublt	r6, r7, r6
 801e88c:	b2b7      	uxthlt	r7, r6
 801e88e:	460e      	movlt	r6, r1
 801e890:	8891      	ldrh	r1, [r2, #4]
 801e892:	440b      	add	r3, r1
 801e894:	4631      	mov	r1, r6
 801e896:	b21b      	sxth	r3, r3
 801e898:	930f      	str	r3, [sp, #60]	; 0x3c
 801e89a:	88d3      	ldrh	r3, [r2, #6]
 801e89c:	9a08      	ldr	r2, [sp, #32]
 801e89e:	449a      	add	sl, r3
 801e8a0:	fa0f f38a 	sxth.w	r3, sl
 801e8a4:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801e8a8:	930e      	str	r3, [sp, #56]	; 0x38
 801e8aa:	4bb2      	ldr	r3, [pc, #712]	; (801eb74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801e8ac:	f893 b000 	ldrb.w	fp, [r3]
 801e8b0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e8b4:	f1dc 0300 	rsbs	r3, ip, #0
 801e8b8:	eb43 030c 	adc.w	r3, r3, ip
 801e8bc:	930d      	str	r3, [sp, #52]	; 0x34
 801e8be:	464b      	mov	r3, r9
 801e8c0:	f7fa faee 	bl	8018ea0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e8c4:	4631      	mov	r1, r6
 801e8c6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801e8ca:	464b      	mov	r3, r9
 801e8cc:	9a08      	ldr	r2, [sp, #32]
 801e8ce:	a812      	add	r0, sp, #72	; 0x48
 801e8d0:	f7fa fafe 	bl	8018ed0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e8d4:	a916      	add	r1, sp, #88	; 0x58
 801e8d6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e8da:	a815      	add	r0, sp, #84	; 0x54
 801e8dc:	f7fa fbd8 	bl	8019090 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e8e0:	f1b9 0f00 	cmp.w	r9, #0
 801e8e4:	f040 80e4 	bne.w	801eab0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 801e8e8:	f1bb 0f01 	cmp.w	fp, #1
 801e8ec:	f040 80e8 	bne.w	801eac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 801e8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	f040 8132 	bne.w	801eb5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801e8f8:	4b9f      	ldr	r3, [pc, #636]	; (801eb78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801e8fa:	6818      	ldr	r0, [r3, #0]
 801e8fc:	6803      	ldr	r3, [r0, #0]
 801e8fe:	6a1b      	ldr	r3, [r3, #32]
 801e900:	4798      	blx	r3
 801e902:	4a9e      	ldr	r2, [pc, #632]	; (801eb7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801e904:	f1b8 0f01 	cmp.w	r8, #1
 801e908:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801e90c:	8811      	ldrh	r1, [r2, #0]
 801e90e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801e912:	fb01 2303 	mla	r3, r1, r3, r2
 801e916:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e91a:	4403      	add	r3, r0
 801e91c:	9309      	str	r3, [sp, #36]	; 0x24
 801e91e:	f04f 0301 	mov.w	r3, #1
 801e922:	fa03 f308 	lsl.w	r3, r3, r8
 801e926:	f103 33ff 	add.w	r3, r3, #4294967295
 801e92a:	b2db      	uxtb	r3, r3
 801e92c:	9311      	str	r3, [sp, #68]	; 0x44
 801e92e:	f000 8117 	beq.w	801eb60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 801e932:	f1b8 0f02 	cmp.w	r8, #2
 801e936:	f000 8115 	beq.w	801eb64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 801e93a:	f1b8 0f04 	cmp.w	r8, #4
 801e93e:	bf14      	ite	ne
 801e940:	2301      	movne	r3, #1
 801e942:	2311      	moveq	r3, #17
 801e944:	930a      	str	r3, [sp, #40]	; 0x28
 801e946:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e948:	b153      	cbz	r3, 801e960 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801e94a:	2508      	movs	r5, #8
 801e94c:	9a07      	ldr	r2, [sp, #28]
 801e94e:	fb95 f3f8 	sdiv	r3, r5, r8
 801e952:	1e5d      	subs	r5, r3, #1
 801e954:	4415      	add	r5, r2
 801e956:	fb95 f5f3 	sdiv	r5, r5, r3
 801e95a:	fb15 f503 	smulbb	r5, r5, r3
 801e95e:	b2ad      	uxth	r5, r5
 801e960:	b907      	cbnz	r7, 801e964 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 801e962:	b174      	cbz	r4, 801e982 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 801e964:	fb15 7304 	smlabb	r3, r5, r4, r7
 801e968:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e96a:	ebaa 0a04 	sub.w	sl, sl, r4
 801e96e:	fb13 f308 	smulbb	r3, r3, r8
 801e972:	fa1f fa8a 	uxth.w	sl, sl
 801e976:	b29b      	uxth	r3, r3
 801e978:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801e97c:	f003 0407 	and.w	r4, r3, #7
 801e980:	9226      	str	r2, [sp, #152]	; 0x98
 801e982:	4649      	mov	r1, r9
 801e984:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e986:	f7ff ff03 	bl	801e790 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e98a:	4649      	mov	r1, r9
 801e98c:	4683      	mov	fp, r0
 801e98e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e990:	f7ff ff1a 	bl	801e7c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e994:	9a08      	ldr	r2, [sp, #32]
 801e996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e998:	1bf6      	subs	r6, r6, r7
 801e99a:	1a9b      	subs	r3, r3, r2
 801e99c:	459a      	cmp	sl, r3
 801e99e:	bfa8      	it	ge
 801e9a0:	469a      	movge	sl, r3
 801e9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9a4:	1b9e      	subs	r6, r3, r6
 801e9a6:	9b07      	ldr	r3, [sp, #28]
 801e9a8:	429e      	cmp	r6, r3
 801e9aa:	bfd4      	ite	le
 801e9ac:	ebc7 0706 	rsble	r7, r7, r6
 801e9b0:	ebc7 0703 	rsbgt	r7, r7, r3
 801e9b4:	1bed      	subs	r5, r5, r7
 801e9b6:	fb0b 0017 	mls	r0, fp, r7, r0
 801e9ba:	fb08 f305 	mul.w	r3, r8, r5
 801e9be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e9c2:	9308      	str	r3, [sp, #32]
 801e9c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e9c6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e9ca:	930d      	str	r3, [sp, #52]	; 0x34
 801e9cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e9ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e9d2:	930e      	str	r3, [sp, #56]	; 0x38
 801e9d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e9d6:	b2de      	uxtb	r6, r3
 801e9d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e9da:	781a      	ldrb	r2, [r3, #0]
 801e9dc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e9e0:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 801e9e4:	4122      	asrs	r2, r4
 801e9e6:	9307      	str	r3, [sp, #28]
 801e9e8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801e9ec:	b2d2      	uxtb	r2, r2
 801e9ee:	f1ba 0f00 	cmp.w	sl, #0
 801e9f2:	f340 80d8 	ble.w	801eba6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 801e9f6:	46be      	mov	lr, r7
 801e9f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e9fa:	f1be 0f00 	cmp.w	lr, #0
 801e9fe:	f340 80bf 	ble.w	801eb80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801ea02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea04:	4013      	ands	r3, r2
 801ea06:	d03e      	beq.n	801ea86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801ea08:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ea0a:	fb13 f300 	smulbb	r3, r3, r0
 801ea0e:	2bfe      	cmp	r3, #254	; 0xfe
 801ea10:	dd03      	ble.n	801ea1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 801ea12:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ea14:	28ff      	cmp	r0, #255	; 0xff
 801ea16:	f000 80a7 	beq.w	801eb68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 801ea1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ea1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ea1e:	fb10 f303 	smulbb	r3, r0, r3
 801ea22:	b29b      	uxth	r3, r3
 801ea24:	1c58      	adds	r0, r3, #1
 801ea26:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ea2a:	7808      	ldrb	r0, [r1, #0]
 801ea2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea30:	fa1f fc83 	uxth.w	ip, r3
 801ea34:	43db      	mvns	r3, r3
 801ea36:	fb16 f90c 	smulbb	r9, r6, ip
 801ea3a:	b2db      	uxtb	r3, r3
 801ea3c:	fb00 9003 	mla	r0, r0, r3, r9
 801ea40:	b280      	uxth	r0, r0
 801ea42:	f100 0901 	add.w	r9, r0, #1
 801ea46:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ea4a:	fb15 f90c 	smulbb	r9, r5, ip
 801ea4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ea50:	1200      	asrs	r0, r0, #8
 801ea52:	fb15 fc0c 	smulbb	ip, r5, ip
 801ea56:	7008      	strb	r0, [r1, #0]
 801ea58:	7848      	ldrb	r0, [r1, #1]
 801ea5a:	fb00 9003 	mla	r0, r0, r3, r9
 801ea5e:	b280      	uxth	r0, r0
 801ea60:	f100 0901 	add.w	r9, r0, #1
 801ea64:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ea68:	1200      	asrs	r0, r0, #8
 801ea6a:	7048      	strb	r0, [r1, #1]
 801ea6c:	7888      	ldrb	r0, [r1, #2]
 801ea6e:	fb00 cc03 	mla	ip, r0, r3, ip
 801ea72:	fa1f fc8c 	uxth.w	ip, ip
 801ea76:	f10c 0301 	add.w	r3, ip, #1
 801ea7a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ea7e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ea82:	f881 c002 	strb.w	ip, [r1, #2]
 801ea86:	4444      	add	r4, r8
 801ea88:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ea8c:	b2a4      	uxth	r4, r4
 801ea8e:	2c07      	cmp	r4, #7
 801ea90:	bf89      	itett	hi
 801ea92:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801ea94:	fa42 f208 	asrls.w	r2, r2, r8
 801ea98:	2400      	movhi	r4, #0
 801ea9a:	785a      	ldrbhi	r2, [r3, #1]
 801ea9c:	bf8a      	itet	hi
 801ea9e:	3301      	addhi	r3, #1
 801eaa0:	b2d2      	uxtbls	r2, r2
 801eaa2:	9326      	strhi	r3, [sp, #152]	; 0x98
 801eaa4:	9b07      	ldr	r3, [sp, #28]
 801eaa6:	4419      	add	r1, r3
 801eaa8:	e7a7      	b.n	801e9fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801eaaa:	441e      	add	r6, r3
 801eaac:	b236      	sxth	r6, r6
 801eaae:	e6e1      	b.n	801e874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801eab0:	f1b9 0f01 	cmp.w	r9, #1
 801eab4:	f47f af1c 	bne.w	801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eab8:	f1bb 0f01 	cmp.w	fp, #1
 801eabc:	f47f af18 	bne.w	801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eac0:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801eb78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801eac4:	f8db 0000 	ldr.w	r0, [fp]
 801eac8:	6803      	ldr	r3, [r0, #0]
 801eaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eacc:	4798      	blx	r3
 801eace:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ead2:	465a      	mov	r2, fp
 801ead4:	d006      	beq.n	801eae4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801ead6:	f1b8 0f04 	cmp.w	r8, #4
 801eada:	d13d      	bne.n	801eb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 801eadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eade:	3300      	adds	r3, #0
 801eae0:	bf18      	it	ne
 801eae2:	2301      	movne	r3, #1
 801eae4:	05c0      	lsls	r0, r0, #23
 801eae6:	d567      	bpl.n	801ebb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801eae8:	f1b8 0f08 	cmp.w	r8, #8
 801eaec:	d164      	bne.n	801ebb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	bf0c      	ite	eq
 801eaf2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801eaf6:	2180      	movne	r1, #128	; 0x80
 801eaf8:	2f00      	cmp	r7, #0
 801eafa:	f47f aef9 	bne.w	801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eafe:	2c00      	cmp	r4, #0
 801eb00:	f47f aef6 	bne.w	801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eb04:	9b07      	ldr	r3, [sp, #28]
 801eb06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801eb08:	18f3      	adds	r3, r6, r3
 801eb0a:	4283      	cmp	r3, r0
 801eb0c:	f73f aef0 	bgt.w	801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eb10:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 801eb14:	4403      	add	r3, r0
 801eb16:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eb18:	4283      	cmp	r3, r0
 801eb1a:	f73f aee9 	bgt.w	801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eb1e:	f1b8 0f08 	cmp.w	r8, #8
 801eb22:	6810      	ldr	r0, [r2, #0]
 801eb24:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801eb28:	bf18      	it	ne
 801eb2a:	3501      	addne	r5, #1
 801eb2c:	6804      	ldr	r4, [r0, #0]
 801eb2e:	9105      	str	r1, [sp, #20]
 801eb30:	bf18      	it	ne
 801eb32:	f025 0501 	bicne.w	r5, r5, #1
 801eb36:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eb38:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801eb3c:	bf18      	it	ne
 801eb3e:	b2ad      	uxthne	r5, r5
 801eb40:	9104      	str	r1, [sp, #16]
 801eb42:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eb44:	e9cd 5a00 	strd	r5, sl, [sp]
 801eb48:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801eb4c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801eb4e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801eb50:	47a0      	blx	r4
 801eb52:	b017      	add	sp, #92	; 0x5c
 801eb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb58:	2300      	movs	r3, #0
 801eb5a:	e7c3      	b.n	801eae4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801eb5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eb5e:	e6d0      	b.n	801e902 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801eb60:	23ff      	movs	r3, #255	; 0xff
 801eb62:	e6ef      	b.n	801e944 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801eb64:	2355      	movs	r3, #85	; 0x55
 801eb66:	e6ed      	b.n	801e944 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801eb68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb6a:	700e      	strb	r6, [r1, #0]
 801eb6c:	704b      	strb	r3, [r1, #1]
 801eb6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb70:	708b      	strb	r3, [r1, #2]
 801eb72:	e788      	b.n	801ea86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801eb74:	2000b364 	.word	0x2000b364
 801eb78:	2000b36c 	.word	0x2000b36c
 801eb7c:	2000b366 	.word	0x2000b366
 801eb80:	9b08      	ldr	r3, [sp, #32]
 801eb82:	b153      	cbz	r3, 801eb9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801eb84:	441c      	add	r4, r3
 801eb86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb88:	b2a4      	uxth	r4, r4
 801eb8a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801eb8e:	f004 0407 	and.w	r4, r4, #7
 801eb92:	781a      	ldrb	r2, [r3, #0]
 801eb94:	9326      	str	r3, [sp, #152]	; 0x98
 801eb96:	4122      	asrs	r2, r4
 801eb98:	b2d2      	uxtb	r2, r2
 801eb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eba0:	445b      	add	r3, fp
 801eba2:	9309      	str	r3, [sp, #36]	; 0x24
 801eba4:	e723      	b.n	801e9ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801eba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d1d2      	bne.n	801eb52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ebac:	4b05      	ldr	r3, [pc, #20]	; (801ebc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 801ebae:	6818      	ldr	r0, [r3, #0]
 801ebb0:	6803      	ldr	r3, [r0, #0]
 801ebb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebb4:	4798      	blx	r3
 801ebb6:	e7cc      	b.n	801eb52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ebb8:	2b00      	cmp	r3, #0
 801ebba:	f43f ae99 	beq.w	801e8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebbe:	2180      	movs	r1, #128	; 0x80
 801ebc0:	e79a      	b.n	801eaf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801ebc2:	bf00      	nop
 801ebc4:	2000b36c 	.word	0x2000b36c

0801ebc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ebc8:	b538      	push	{r3, r4, r5, lr}
 801ebca:	4c15      	ldr	r4, [pc, #84]	; (801ec20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ebcc:	4605      	mov	r5, r0
 801ebce:	7823      	ldrb	r3, [r4, #0]
 801ebd0:	f3bf 8f5b 	dmb	ish
 801ebd4:	07da      	lsls	r2, r3, #31
 801ebd6:	d40b      	bmi.n	801ebf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ebd8:	4620      	mov	r0, r4
 801ebda:	f006 fd67 	bl	80256ac <__cxa_guard_acquire>
 801ebde:	b138      	cbz	r0, 801ebf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ebe0:	4620      	mov	r0, r4
 801ebe2:	f006 fd6f 	bl	80256c4 <__cxa_guard_release>
 801ebe6:	4a0f      	ldr	r2, [pc, #60]	; (801ec24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ebe8:	490f      	ldr	r1, [pc, #60]	; (801ec28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ebea:	4810      	ldr	r0, [pc, #64]	; (801ec2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ebec:	f006 fd54 	bl	8025698 <__aeabi_atexit>
 801ebf0:	4c0f      	ldr	r4, [pc, #60]	; (801ec30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ebf2:	7823      	ldrb	r3, [r4, #0]
 801ebf4:	f3bf 8f5b 	dmb	ish
 801ebf8:	07db      	lsls	r3, r3, #31
 801ebfa:	d40b      	bmi.n	801ec14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ebfc:	4620      	mov	r0, r4
 801ebfe:	f006 fd55 	bl	80256ac <__cxa_guard_acquire>
 801ec02:	b138      	cbz	r0, 801ec14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ec04:	4620      	mov	r0, r4
 801ec06:	f006 fd5d 	bl	80256c4 <__cxa_guard_release>
 801ec0a:	4a06      	ldr	r2, [pc, #24]	; (801ec24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ec0c:	4909      	ldr	r1, [pc, #36]	; (801ec34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ec0e:	480a      	ldr	r0, [pc, #40]	; (801ec38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ec10:	f006 fd42 	bl	8025698 <__aeabi_atexit>
 801ec14:	4b05      	ldr	r3, [pc, #20]	; (801ec2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ec16:	612b      	str	r3, [r5, #16]
 801ec18:	4b07      	ldr	r3, [pc, #28]	; (801ec38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ec1a:	616b      	str	r3, [r5, #20]
 801ec1c:	bd38      	pop	{r3, r4, r5, pc}
 801ec1e:	bf00      	nop
 801ec20:	2000b478 	.word	0x2000b478
 801ec24:	20000000 	.word	0x20000000
 801ec28:	0801d5a7 	.word	0x0801d5a7
 801ec2c:	20000084 	.word	0x20000084
 801ec30:	2000b47c 	.word	0x2000b47c
 801ec34:	0801d5a5 	.word	0x0801d5a5
 801ec38:	20000088 	.word	0x20000088

0801ec3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ec3c:	b538      	push	{r3, r4, r5, lr}
 801ec3e:	4c15      	ldr	r4, [pc, #84]	; (801ec94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ec40:	4605      	mov	r5, r0
 801ec42:	7823      	ldrb	r3, [r4, #0]
 801ec44:	f3bf 8f5b 	dmb	ish
 801ec48:	07da      	lsls	r2, r3, #31
 801ec4a:	d40b      	bmi.n	801ec64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ec4c:	4620      	mov	r0, r4
 801ec4e:	f006 fd2d 	bl	80256ac <__cxa_guard_acquire>
 801ec52:	b138      	cbz	r0, 801ec64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ec54:	4620      	mov	r0, r4
 801ec56:	f006 fd35 	bl	80256c4 <__cxa_guard_release>
 801ec5a:	4a0f      	ldr	r2, [pc, #60]	; (801ec98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ec5c:	490f      	ldr	r1, [pc, #60]	; (801ec9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ec5e:	4810      	ldr	r0, [pc, #64]	; (801eca0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ec60:	f006 fd1a 	bl	8025698 <__aeabi_atexit>
 801ec64:	4c0f      	ldr	r4, [pc, #60]	; (801eca4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ec66:	7823      	ldrb	r3, [r4, #0]
 801ec68:	f3bf 8f5b 	dmb	ish
 801ec6c:	07db      	lsls	r3, r3, #31
 801ec6e:	d40b      	bmi.n	801ec88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ec70:	4620      	mov	r0, r4
 801ec72:	f006 fd1b 	bl	80256ac <__cxa_guard_acquire>
 801ec76:	b138      	cbz	r0, 801ec88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ec78:	4620      	mov	r0, r4
 801ec7a:	f006 fd23 	bl	80256c4 <__cxa_guard_release>
 801ec7e:	4a06      	ldr	r2, [pc, #24]	; (801ec98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ec80:	4909      	ldr	r1, [pc, #36]	; (801eca8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ec82:	480a      	ldr	r0, [pc, #40]	; (801ecac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ec84:	f006 fd08 	bl	8025698 <__aeabi_atexit>
 801ec88:	4b05      	ldr	r3, [pc, #20]	; (801eca0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ec8a:	60ab      	str	r3, [r5, #8]
 801ec8c:	4b07      	ldr	r3, [pc, #28]	; (801ecac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ec8e:	60eb      	str	r3, [r5, #12]
 801ec90:	bd38      	pop	{r3, r4, r5, pc}
 801ec92:	bf00      	nop
 801ec94:	2000b458 	.word	0x2000b458
 801ec98:	20000000 	.word	0x20000000
 801ec9c:	0801d5ab 	.word	0x0801d5ab
 801eca0:	20000064 	.word	0x20000064
 801eca4:	2000b45c 	.word	0x2000b45c
 801eca8:	0801d5a9 	.word	0x0801d5a9
 801ecac:	20000068 	.word	0x20000068

0801ecb0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801ecb0:	b510      	push	{r4, lr}
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	f7ff ff88 	bl	801ebc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ecb8:	4620      	mov	r0, r4
 801ecba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ecbe:	f7ff bfbd 	b.w	801ec3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ecc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ecc4:	b538      	push	{r3, r4, r5, lr}
 801ecc6:	4c15      	ldr	r4, [pc, #84]	; (801ed1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ecc8:	4605      	mov	r5, r0
 801ecca:	7823      	ldrb	r3, [r4, #0]
 801eccc:	f3bf 8f5b 	dmb	ish
 801ecd0:	07da      	lsls	r2, r3, #31
 801ecd2:	d40b      	bmi.n	801ecec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ecd4:	4620      	mov	r0, r4
 801ecd6:	f006 fce9 	bl	80256ac <__cxa_guard_acquire>
 801ecda:	b138      	cbz	r0, 801ecec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ecdc:	4620      	mov	r0, r4
 801ecde:	f006 fcf1 	bl	80256c4 <__cxa_guard_release>
 801ece2:	4a0f      	ldr	r2, [pc, #60]	; (801ed20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ece4:	490f      	ldr	r1, [pc, #60]	; (801ed24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ece6:	4810      	ldr	r0, [pc, #64]	; (801ed28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ece8:	f006 fcd6 	bl	8025698 <__aeabi_atexit>
 801ecec:	4c0f      	ldr	r4, [pc, #60]	; (801ed2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ecee:	7823      	ldrb	r3, [r4, #0]
 801ecf0:	f3bf 8f5b 	dmb	ish
 801ecf4:	07db      	lsls	r3, r3, #31
 801ecf6:	d40b      	bmi.n	801ed10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ecf8:	4620      	mov	r0, r4
 801ecfa:	f006 fcd7 	bl	80256ac <__cxa_guard_acquire>
 801ecfe:	b138      	cbz	r0, 801ed10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ed00:	4620      	mov	r0, r4
 801ed02:	f006 fcdf 	bl	80256c4 <__cxa_guard_release>
 801ed06:	4a06      	ldr	r2, [pc, #24]	; (801ed20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ed08:	4909      	ldr	r1, [pc, #36]	; (801ed30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ed0a:	480a      	ldr	r0, [pc, #40]	; (801ed34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ed0c:	f006 fcc4 	bl	8025698 <__aeabi_atexit>
 801ed10:	4b05      	ldr	r3, [pc, #20]	; (801ed28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ed12:	622b      	str	r3, [r5, #32]
 801ed14:	4b07      	ldr	r3, [pc, #28]	; (801ed34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ed16:	626b      	str	r3, [r5, #36]	; 0x24
 801ed18:	bd38      	pop	{r3, r4, r5, pc}
 801ed1a:	bf00      	nop
 801ed1c:	2000b480 	.word	0x2000b480
 801ed20:	20000000 	.word	0x20000000
 801ed24:	0801d59f 	.word	0x0801d59f
 801ed28:	2000008c 	.word	0x2000008c
 801ed2c:	2000b484 	.word	0x2000b484
 801ed30:	0801d59d 	.word	0x0801d59d
 801ed34:	20000090 	.word	0x20000090

0801ed38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ed38:	b538      	push	{r3, r4, r5, lr}
 801ed3a:	4c15      	ldr	r4, [pc, #84]	; (801ed90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ed3c:	4605      	mov	r5, r0
 801ed3e:	7823      	ldrb	r3, [r4, #0]
 801ed40:	f3bf 8f5b 	dmb	ish
 801ed44:	07da      	lsls	r2, r3, #31
 801ed46:	d40b      	bmi.n	801ed60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ed48:	4620      	mov	r0, r4
 801ed4a:	f006 fcaf 	bl	80256ac <__cxa_guard_acquire>
 801ed4e:	b138      	cbz	r0, 801ed60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ed50:	4620      	mov	r0, r4
 801ed52:	f006 fcb7 	bl	80256c4 <__cxa_guard_release>
 801ed56:	4a0f      	ldr	r2, [pc, #60]	; (801ed94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ed58:	490f      	ldr	r1, [pc, #60]	; (801ed98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ed5a:	4810      	ldr	r0, [pc, #64]	; (801ed9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ed5c:	f006 fc9c 	bl	8025698 <__aeabi_atexit>
 801ed60:	4c0f      	ldr	r4, [pc, #60]	; (801eda0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ed62:	7823      	ldrb	r3, [r4, #0]
 801ed64:	f3bf 8f5b 	dmb	ish
 801ed68:	07db      	lsls	r3, r3, #31
 801ed6a:	d40b      	bmi.n	801ed84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ed6c:	4620      	mov	r0, r4
 801ed6e:	f006 fc9d 	bl	80256ac <__cxa_guard_acquire>
 801ed72:	b138      	cbz	r0, 801ed84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ed74:	4620      	mov	r0, r4
 801ed76:	f006 fca5 	bl	80256c4 <__cxa_guard_release>
 801ed7a:	4a06      	ldr	r2, [pc, #24]	; (801ed94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ed7c:	4909      	ldr	r1, [pc, #36]	; (801eda4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ed7e:	480a      	ldr	r0, [pc, #40]	; (801eda8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ed80:	f006 fc8a 	bl	8025698 <__aeabi_atexit>
 801ed84:	4b05      	ldr	r3, [pc, #20]	; (801ed9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ed86:	61ab      	str	r3, [r5, #24]
 801ed88:	4b07      	ldr	r3, [pc, #28]	; (801eda8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ed8a:	61eb      	str	r3, [r5, #28]
 801ed8c:	bd38      	pop	{r3, r4, r5, pc}
 801ed8e:	bf00      	nop
 801ed90:	2000b460 	.word	0x2000b460
 801ed94:	20000000 	.word	0x20000000
 801ed98:	0801d5a3 	.word	0x0801d5a3
 801ed9c:	2000006c 	.word	0x2000006c
 801eda0:	2000b464 	.word	0x2000b464
 801eda4:	0801d5a1 	.word	0x0801d5a1
 801eda8:	20000070 	.word	0x20000070

0801edac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801edac:	b510      	push	{r4, lr}
 801edae:	4604      	mov	r4, r0
 801edb0:	f7ff ff88 	bl	801ecc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801edb4:	4620      	mov	r0, r4
 801edb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edba:	f7ff bfbd 	b.w	801ed38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801edc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801edc0:	b538      	push	{r3, r4, r5, lr}
 801edc2:	4c15      	ldr	r4, [pc, #84]	; (801ee18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801edc4:	4605      	mov	r5, r0
 801edc6:	7823      	ldrb	r3, [r4, #0]
 801edc8:	f3bf 8f5b 	dmb	ish
 801edcc:	07da      	lsls	r2, r3, #31
 801edce:	d40b      	bmi.n	801ede8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801edd0:	4620      	mov	r0, r4
 801edd2:	f006 fc6b 	bl	80256ac <__cxa_guard_acquire>
 801edd6:	b138      	cbz	r0, 801ede8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801edd8:	4620      	mov	r0, r4
 801edda:	f006 fc73 	bl	80256c4 <__cxa_guard_release>
 801edde:	4a0f      	ldr	r2, [pc, #60]	; (801ee1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ede0:	490f      	ldr	r1, [pc, #60]	; (801ee20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801ede2:	4810      	ldr	r0, [pc, #64]	; (801ee24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ede4:	f006 fc58 	bl	8025698 <__aeabi_atexit>
 801ede8:	4c0f      	ldr	r4, [pc, #60]	; (801ee28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801edea:	7823      	ldrb	r3, [r4, #0]
 801edec:	f3bf 8f5b 	dmb	ish
 801edf0:	07db      	lsls	r3, r3, #31
 801edf2:	d40b      	bmi.n	801ee0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801edf4:	4620      	mov	r0, r4
 801edf6:	f006 fc59 	bl	80256ac <__cxa_guard_acquire>
 801edfa:	b138      	cbz	r0, 801ee0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801edfc:	4620      	mov	r0, r4
 801edfe:	f006 fc61 	bl	80256c4 <__cxa_guard_release>
 801ee02:	4a06      	ldr	r2, [pc, #24]	; (801ee1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ee04:	4909      	ldr	r1, [pc, #36]	; (801ee2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801ee06:	480a      	ldr	r0, [pc, #40]	; (801ee30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ee08:	f006 fc46 	bl	8025698 <__aeabi_atexit>
 801ee0c:	4b05      	ldr	r3, [pc, #20]	; (801ee24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ee0e:	632b      	str	r3, [r5, #48]	; 0x30
 801ee10:	4b07      	ldr	r3, [pc, #28]	; (801ee30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ee12:	636b      	str	r3, [r5, #52]	; 0x34
 801ee14:	bd38      	pop	{r3, r4, r5, pc}
 801ee16:	bf00      	nop
 801ee18:	2000b468 	.word	0x2000b468
 801ee1c:	20000000 	.word	0x20000000
 801ee20:	0801d597 	.word	0x0801d597
 801ee24:	20000074 	.word	0x20000074
 801ee28:	2000b46c 	.word	0x2000b46c
 801ee2c:	0801d595 	.word	0x0801d595
 801ee30:	20000078 	.word	0x20000078

0801ee34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ee34:	b538      	push	{r3, r4, r5, lr}
 801ee36:	4c15      	ldr	r4, [pc, #84]	; (801ee8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ee38:	4605      	mov	r5, r0
 801ee3a:	7823      	ldrb	r3, [r4, #0]
 801ee3c:	f3bf 8f5b 	dmb	ish
 801ee40:	07da      	lsls	r2, r3, #31
 801ee42:	d40b      	bmi.n	801ee5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ee44:	4620      	mov	r0, r4
 801ee46:	f006 fc31 	bl	80256ac <__cxa_guard_acquire>
 801ee4a:	b138      	cbz	r0, 801ee5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ee4c:	4620      	mov	r0, r4
 801ee4e:	f006 fc39 	bl	80256c4 <__cxa_guard_release>
 801ee52:	4a0f      	ldr	r2, [pc, #60]	; (801ee90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ee54:	490f      	ldr	r1, [pc, #60]	; (801ee94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ee56:	4810      	ldr	r0, [pc, #64]	; (801ee98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ee58:	f006 fc1e 	bl	8025698 <__aeabi_atexit>
 801ee5c:	4c0f      	ldr	r4, [pc, #60]	; (801ee9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ee5e:	7823      	ldrb	r3, [r4, #0]
 801ee60:	f3bf 8f5b 	dmb	ish
 801ee64:	07db      	lsls	r3, r3, #31
 801ee66:	d40b      	bmi.n	801ee80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ee68:	4620      	mov	r0, r4
 801ee6a:	f006 fc1f 	bl	80256ac <__cxa_guard_acquire>
 801ee6e:	b138      	cbz	r0, 801ee80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ee70:	4620      	mov	r0, r4
 801ee72:	f006 fc27 	bl	80256c4 <__cxa_guard_release>
 801ee76:	4a06      	ldr	r2, [pc, #24]	; (801ee90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ee78:	4909      	ldr	r1, [pc, #36]	; (801eea0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ee7a:	480a      	ldr	r0, [pc, #40]	; (801eea4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ee7c:	f006 fc0c 	bl	8025698 <__aeabi_atexit>
 801ee80:	4b05      	ldr	r3, [pc, #20]	; (801ee98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ee82:	62ab      	str	r3, [r5, #40]	; 0x28
 801ee84:	4b07      	ldr	r3, [pc, #28]	; (801eea4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ee86:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ee88:	bd38      	pop	{r3, r4, r5, pc}
 801ee8a:	bf00      	nop
 801ee8c:	2000b440 	.word	0x2000b440
 801ee90:	20000000 	.word	0x20000000
 801ee94:	0801d59b 	.word	0x0801d59b
 801ee98:	2000004c 	.word	0x2000004c
 801ee9c:	2000b444 	.word	0x2000b444
 801eea0:	0801d599 	.word	0x0801d599
 801eea4:	20000050 	.word	0x20000050

0801eea8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801eea8:	b510      	push	{r4, lr}
 801eeaa:	4604      	mov	r4, r0
 801eeac:	f7ff ff88 	bl	801edc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801eeb0:	4620      	mov	r0, r4
 801eeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eeb6:	f7ff bfbd 	b.w	801ee34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801eebc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801eebc:	b538      	push	{r3, r4, r5, lr}
 801eebe:	4c15      	ldr	r4, [pc, #84]	; (801ef14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801eec0:	4605      	mov	r5, r0
 801eec2:	7823      	ldrb	r3, [r4, #0]
 801eec4:	f3bf 8f5b 	dmb	ish
 801eec8:	07da      	lsls	r2, r3, #31
 801eeca:	d40b      	bmi.n	801eee4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eecc:	4620      	mov	r0, r4
 801eece:	f006 fbed 	bl	80256ac <__cxa_guard_acquire>
 801eed2:	b138      	cbz	r0, 801eee4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eed4:	4620      	mov	r0, r4
 801eed6:	f006 fbf5 	bl	80256c4 <__cxa_guard_release>
 801eeda:	4a0f      	ldr	r2, [pc, #60]	; (801ef18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eedc:	490f      	ldr	r1, [pc, #60]	; (801ef1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801eede:	4810      	ldr	r0, [pc, #64]	; (801ef20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eee0:	f006 fbda 	bl	8025698 <__aeabi_atexit>
 801eee4:	4c0f      	ldr	r4, [pc, #60]	; (801ef24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801eee6:	7823      	ldrb	r3, [r4, #0]
 801eee8:	f3bf 8f5b 	dmb	ish
 801eeec:	07db      	lsls	r3, r3, #31
 801eeee:	d40b      	bmi.n	801ef08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eef0:	4620      	mov	r0, r4
 801eef2:	f006 fbdb 	bl	80256ac <__cxa_guard_acquire>
 801eef6:	b138      	cbz	r0, 801ef08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eef8:	4620      	mov	r0, r4
 801eefa:	f006 fbe3 	bl	80256c4 <__cxa_guard_release>
 801eefe:	4a06      	ldr	r2, [pc, #24]	; (801ef18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ef00:	4909      	ldr	r1, [pc, #36]	; (801ef28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ef02:	480a      	ldr	r0, [pc, #40]	; (801ef2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ef04:	f006 fbc8 	bl	8025698 <__aeabi_atexit>
 801ef08:	4b05      	ldr	r3, [pc, #20]	; (801ef20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ef0a:	642b      	str	r3, [r5, #64]	; 0x40
 801ef0c:	4b07      	ldr	r3, [pc, #28]	; (801ef2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ef0e:	646b      	str	r3, [r5, #68]	; 0x44
 801ef10:	bd38      	pop	{r3, r4, r5, pc}
 801ef12:	bf00      	nop
 801ef14:	2000b470 	.word	0x2000b470
 801ef18:	20000000 	.word	0x20000000
 801ef1c:	0801d58f 	.word	0x0801d58f
 801ef20:	2000007c 	.word	0x2000007c
 801ef24:	2000b474 	.word	0x2000b474
 801ef28:	0801d58d 	.word	0x0801d58d
 801ef2c:	20000080 	.word	0x20000080

0801ef30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ef30:	b538      	push	{r3, r4, r5, lr}
 801ef32:	4c15      	ldr	r4, [pc, #84]	; (801ef88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ef34:	4605      	mov	r5, r0
 801ef36:	7823      	ldrb	r3, [r4, #0]
 801ef38:	f3bf 8f5b 	dmb	ish
 801ef3c:	07da      	lsls	r2, r3, #31
 801ef3e:	d40b      	bmi.n	801ef58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ef40:	4620      	mov	r0, r4
 801ef42:	f006 fbb3 	bl	80256ac <__cxa_guard_acquire>
 801ef46:	b138      	cbz	r0, 801ef58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ef48:	4620      	mov	r0, r4
 801ef4a:	f006 fbbb 	bl	80256c4 <__cxa_guard_release>
 801ef4e:	4a0f      	ldr	r2, [pc, #60]	; (801ef8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ef50:	490f      	ldr	r1, [pc, #60]	; (801ef90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ef52:	4810      	ldr	r0, [pc, #64]	; (801ef94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ef54:	f006 fba0 	bl	8025698 <__aeabi_atexit>
 801ef58:	4c0f      	ldr	r4, [pc, #60]	; (801ef98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ef5a:	7823      	ldrb	r3, [r4, #0]
 801ef5c:	f3bf 8f5b 	dmb	ish
 801ef60:	07db      	lsls	r3, r3, #31
 801ef62:	d40b      	bmi.n	801ef7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ef64:	4620      	mov	r0, r4
 801ef66:	f006 fba1 	bl	80256ac <__cxa_guard_acquire>
 801ef6a:	b138      	cbz	r0, 801ef7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ef6c:	4620      	mov	r0, r4
 801ef6e:	f006 fba9 	bl	80256c4 <__cxa_guard_release>
 801ef72:	4a06      	ldr	r2, [pc, #24]	; (801ef8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ef74:	4909      	ldr	r1, [pc, #36]	; (801ef9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ef76:	480a      	ldr	r0, [pc, #40]	; (801efa0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ef78:	f006 fb8e 	bl	8025698 <__aeabi_atexit>
 801ef7c:	4b05      	ldr	r3, [pc, #20]	; (801ef94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ef7e:	63ab      	str	r3, [r5, #56]	; 0x38
 801ef80:	4b07      	ldr	r3, [pc, #28]	; (801efa0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ef82:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ef84:	bd38      	pop	{r3, r4, r5, pc}
 801ef86:	bf00      	nop
 801ef88:	2000b450 	.word	0x2000b450
 801ef8c:	20000000 	.word	0x20000000
 801ef90:	0801d593 	.word	0x0801d593
 801ef94:	2000005c 	.word	0x2000005c
 801ef98:	2000b454 	.word	0x2000b454
 801ef9c:	0801d591 	.word	0x0801d591
 801efa0:	20000060 	.word	0x20000060

0801efa4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801efa4:	b510      	push	{r4, lr}
 801efa6:	4604      	mov	r4, r0
 801efa8:	f7ff ff88 	bl	801eebc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801efac:	4620      	mov	r0, r4
 801efae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801efb2:	f7ff bfbd 	b.w	801ef30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801efb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801efb8:	b538      	push	{r3, r4, r5, lr}
 801efba:	4c15      	ldr	r4, [pc, #84]	; (801f010 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801efbc:	4605      	mov	r5, r0
 801efbe:	7823      	ldrb	r3, [r4, #0]
 801efc0:	f3bf 8f5b 	dmb	ish
 801efc4:	07da      	lsls	r2, r3, #31
 801efc6:	d40b      	bmi.n	801efe0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801efc8:	4620      	mov	r0, r4
 801efca:	f006 fb6f 	bl	80256ac <__cxa_guard_acquire>
 801efce:	b138      	cbz	r0, 801efe0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801efd0:	4620      	mov	r0, r4
 801efd2:	f006 fb77 	bl	80256c4 <__cxa_guard_release>
 801efd6:	4a0f      	ldr	r2, [pc, #60]	; (801f014 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801efd8:	490f      	ldr	r1, [pc, #60]	; (801f018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801efda:	4810      	ldr	r0, [pc, #64]	; (801f01c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801efdc:	f006 fb5c 	bl	8025698 <__aeabi_atexit>
 801efe0:	4c0f      	ldr	r4, [pc, #60]	; (801f020 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801efe2:	7823      	ldrb	r3, [r4, #0]
 801efe4:	f3bf 8f5b 	dmb	ish
 801efe8:	07db      	lsls	r3, r3, #31
 801efea:	d40b      	bmi.n	801f004 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801efec:	4620      	mov	r0, r4
 801efee:	f006 fb5d 	bl	80256ac <__cxa_guard_acquire>
 801eff2:	b138      	cbz	r0, 801f004 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801eff4:	4620      	mov	r0, r4
 801eff6:	f006 fb65 	bl	80256c4 <__cxa_guard_release>
 801effa:	4a06      	ldr	r2, [pc, #24]	; (801f014 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801effc:	4909      	ldr	r1, [pc, #36]	; (801f024 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801effe:	480a      	ldr	r0, [pc, #40]	; (801f028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f000:	f006 fb4a 	bl	8025698 <__aeabi_atexit>
 801f004:	4b05      	ldr	r3, [pc, #20]	; (801f01c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f006:	652b      	str	r3, [r5, #80]	; 0x50
 801f008:	4b07      	ldr	r3, [pc, #28]	; (801f028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f00a:	656b      	str	r3, [r5, #84]	; 0x54
 801f00c:	bd38      	pop	{r3, r4, r5, pc}
 801f00e:	bf00      	nop
 801f010:	2000b448 	.word	0x2000b448
 801f014:	20000000 	.word	0x20000000
 801f018:	0801d587 	.word	0x0801d587
 801f01c:	20000054 	.word	0x20000054
 801f020:	2000b44c 	.word	0x2000b44c
 801f024:	0801d585 	.word	0x0801d585
 801f028:	20000058 	.word	0x20000058

0801f02c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f02c:	b538      	push	{r3, r4, r5, lr}
 801f02e:	4c15      	ldr	r4, [pc, #84]	; (801f084 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f030:	4605      	mov	r5, r0
 801f032:	7823      	ldrb	r3, [r4, #0]
 801f034:	f3bf 8f5b 	dmb	ish
 801f038:	07da      	lsls	r2, r3, #31
 801f03a:	d40b      	bmi.n	801f054 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f03c:	4620      	mov	r0, r4
 801f03e:	f006 fb35 	bl	80256ac <__cxa_guard_acquire>
 801f042:	b138      	cbz	r0, 801f054 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f044:	4620      	mov	r0, r4
 801f046:	f006 fb3d 	bl	80256c4 <__cxa_guard_release>
 801f04a:	4a0f      	ldr	r2, [pc, #60]	; (801f088 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f04c:	490f      	ldr	r1, [pc, #60]	; (801f08c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f04e:	4810      	ldr	r0, [pc, #64]	; (801f090 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f050:	f006 fb22 	bl	8025698 <__aeabi_atexit>
 801f054:	4c0f      	ldr	r4, [pc, #60]	; (801f094 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f056:	7823      	ldrb	r3, [r4, #0]
 801f058:	f3bf 8f5b 	dmb	ish
 801f05c:	07db      	lsls	r3, r3, #31
 801f05e:	d40b      	bmi.n	801f078 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f060:	4620      	mov	r0, r4
 801f062:	f006 fb23 	bl	80256ac <__cxa_guard_acquire>
 801f066:	b138      	cbz	r0, 801f078 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f068:	4620      	mov	r0, r4
 801f06a:	f006 fb2b 	bl	80256c4 <__cxa_guard_release>
 801f06e:	4a06      	ldr	r2, [pc, #24]	; (801f088 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f070:	4909      	ldr	r1, [pc, #36]	; (801f098 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f072:	480a      	ldr	r0, [pc, #40]	; (801f09c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f074:	f006 fb10 	bl	8025698 <__aeabi_atexit>
 801f078:	4b05      	ldr	r3, [pc, #20]	; (801f090 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f07a:	64ab      	str	r3, [r5, #72]	; 0x48
 801f07c:	4b07      	ldr	r3, [pc, #28]	; (801f09c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f07e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f080:	bd38      	pop	{r3, r4, r5, pc}
 801f082:	bf00      	nop
 801f084:	2000b438 	.word	0x2000b438
 801f088:	20000000 	.word	0x20000000
 801f08c:	0801d58b 	.word	0x0801d58b
 801f090:	20000044 	.word	0x20000044
 801f094:	2000b43c 	.word	0x2000b43c
 801f098:	0801d589 	.word	0x0801d589
 801f09c:	20000048 	.word	0x20000048

0801f0a0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f0a0:	b510      	push	{r4, lr}
 801f0a2:	4604      	mov	r4, r0
 801f0a4:	f7ff ff88 	bl	801efb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f0a8:	4620      	mov	r0, r4
 801f0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0ae:	f7ff bfbd 	b.w	801f02c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f0b2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f0b2:	b510      	push	{r4, lr}
 801f0b4:	4604      	mov	r4, r0
 801f0b6:	f7ff fff3 	bl	801f0a0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f0ba:	4620      	mov	r0, r4
 801f0bc:	f7ff ff72 	bl	801efa4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f0c0:	4620      	mov	r0, r4
 801f0c2:	f7ff fe73 	bl	801edac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f0c6:	4620      	mov	r0, r4
 801f0c8:	f7ff fdf2 	bl	801ecb0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0d2:	f7ff bee9 	b.w	801eea8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0dc:	b087      	sub	sp, #28
 801f0de:	7888      	ldrb	r0, [r1, #2]
 801f0e0:	4616      	mov	r6, r2
 801f0e2:	9001      	str	r0, [sp, #4]
 801f0e4:	7848      	ldrb	r0, [r1, #1]
 801f0e6:	9100      	str	r1, [sp, #0]
 801f0e8:	9002      	str	r0, [sp, #8]
 801f0ea:	7808      	ldrb	r0, [r1, #0]
 801f0ec:	9901      	ldr	r1, [sp, #4]
 801f0ee:	9003      	str	r0, [sp, #12]
 801f0f0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f0f4:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f0f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f0fc:	9902      	ldr	r1, [sp, #8]
 801f0fe:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f102:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801f106:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f10a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f10e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f112:	9005      	str	r0, [sp, #20]
 801f114:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f118:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f11c:	2d00      	cmp	r5, #0
 801f11e:	eb06 080a 	add.w	r8, r6, sl
 801f122:	db4a      	blt.n	801f1ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f124:	45a9      	cmp	r9, r5
 801f126:	dd48      	ble.n	801f1ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f128:	f1bc 0f00 	cmp.w	ip, #0
 801f12c:	db43      	blt.n	801f1b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f12e:	45e6      	cmp	lr, ip
 801f130:	dd41      	ble.n	801f1b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f132:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f136:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f13a:	441e      	add	r6, r3
 801f13c:	f11c 0001 	adds.w	r0, ip, #1
 801f140:	d43e      	bmi.n	801f1c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f142:	4586      	cmp	lr, r0
 801f144:	dd3c      	ble.n	801f1c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f146:	2a00      	cmp	r2, #0
 801f148:	d03a      	beq.n	801f1c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f14a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f14e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f152:	4418      	add	r0, r3
 801f154:	3501      	adds	r5, #1
 801f156:	d437      	bmi.n	801f1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f158:	45a9      	cmp	r9, r5
 801f15a:	dd35      	ble.n	801f1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f15c:	b3a4      	cbz	r4, 801f1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f15e:	f1bc 0f00 	cmp.w	ip, #0
 801f162:	db2f      	blt.n	801f1c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f164:	45e6      	cmp	lr, ip
 801f166:	dd2d      	ble.n	801f1c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f168:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f16c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f170:	441d      	add	r5, r3
 801f172:	f11c 0c01 	adds.w	ip, ip, #1
 801f176:	d42a      	bmi.n	801f1ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f178:	45e6      	cmp	lr, ip
 801f17a:	dd28      	ble.n	801f1ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f17c:	b33a      	cbz	r2, 801f1ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f17e:	44c6      	add	lr, r8
 801f180:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f184:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f188:	4463      	add	r3, ip
 801f18a:	ea6f 0c07 	mvn.w	ip, r7
 801f18e:	2a0f      	cmp	r2, #15
 801f190:	f896 a000 	ldrb.w	sl, [r6]
 801f194:	fa5f fc8c 	uxtb.w	ip, ip
 801f198:	f890 b000 	ldrb.w	fp, [r0]
 801f19c:	f895 9000 	ldrb.w	r9, [r5]
 801f1a0:	7819      	ldrb	r1, [r3, #0]
 801f1a2:	d801      	bhi.n	801f1a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801f1a4:	2c0f      	cmp	r4, #15
 801f1a6:	d914      	bls.n	801f1d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801f1a8:	4b40      	ldr	r3, [pc, #256]	; (801f2ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f1aa:	f240 11a5 	movw	r1, #421	; 0x1a5
 801f1ae:	4a40      	ldr	r2, [pc, #256]	; (801f2b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f1b0:	4840      	ldr	r0, [pc, #256]	; (801f2b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801f1b2:	f006 faa5 	bl	8025700 <__assert_func>
 801f1b6:	ae05      	add	r6, sp, #20
 801f1b8:	e7c0      	b.n	801f13c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801f1ba:	a805      	add	r0, sp, #20
 801f1bc:	4606      	mov	r6, r0
 801f1be:	e7c9      	b.n	801f154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f1c0:	a805      	add	r0, sp, #20
 801f1c2:	e7c7      	b.n	801f154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f1c4:	ad05      	add	r5, sp, #20
 801f1c6:	e7d4      	b.n	801f172 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801f1c8:	ab05      	add	r3, sp, #20
 801f1ca:	461d      	mov	r5, r3
 801f1cc:	e7dd      	b.n	801f18a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f1ce:	ab05      	add	r3, sp, #20
 801f1d0:	e7db      	b.n	801f18a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f1d2:	b292      	uxth	r2, r2
 801f1d4:	b2a4      	uxth	r4, r4
 801f1d6:	fa1f fc8c 	uxth.w	ip, ip
 801f1da:	fb02 f804 	mul.w	r8, r2, r4
 801f1de:	0112      	lsls	r2, r2, #4
 801f1e0:	b2bf      	uxth	r7, r7
 801f1e2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f1e6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f1ea:	eba2 0208 	sub.w	r2, r2, r8
 801f1ee:	b2a4      	uxth	r4, r4
 801f1f0:	b292      	uxth	r2, r2
 801f1f2:	ebae 0e04 	sub.w	lr, lr, r4
 801f1f6:	fb02 fb0b 	mul.w	fp, r2, fp
 801f1fa:	fa1f fe8e 	uxth.w	lr, lr
 801f1fe:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f202:	fb04 aa09 	mla	sl, r4, r9, sl
 801f206:	fb08 aa01 	mla	sl, r8, r1, sl
 801f20a:	9903      	ldr	r1, [sp, #12]
 801f20c:	fb11 f90c 	smulbb	r9, r1, ip
 801f210:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f214:	9900      	ldr	r1, [sp, #0]
 801f216:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f21a:	fa1f fa8a 	uxth.w	sl, sl
 801f21e:	f10a 0901 	add.w	r9, sl, #1
 801f222:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f226:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f22a:	f881 a000 	strb.w	sl, [r1]
 801f22e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f232:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f236:	fb02 fa0a 	mul.w	sl, r2, sl
 801f23a:	9902      	ldr	r1, [sp, #8]
 801f23c:	fb0e aa09 	mla	sl, lr, r9, sl
 801f240:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f244:	fb04 aa09 	mla	sl, r4, r9, sl
 801f248:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f24c:	fb08 a909 	mla	r9, r8, r9, sl
 801f250:	fb11 fa0c 	smulbb	sl, r1, ip
 801f254:	9900      	ldr	r1, [sp, #0]
 801f256:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f25a:	fb09 a907 	mla	r9, r9, r7, sl
 801f25e:	fa1f f989 	uxth.w	r9, r9
 801f262:	f109 0a01 	add.w	sl, r9, #1
 801f266:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f26a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f26e:	f881 9001 	strb.w	r9, [r1, #1]
 801f272:	7880      	ldrb	r0, [r0, #2]
 801f274:	78b6      	ldrb	r6, [r6, #2]
 801f276:	4342      	muls	r2, r0
 801f278:	78a8      	ldrb	r0, [r5, #2]
 801f27a:	789b      	ldrb	r3, [r3, #2]
 801f27c:	fb0e 2206 	mla	r2, lr, r6, r2
 801f280:	fb04 2400 	mla	r4, r4, r0, r2
 801f284:	fb08 4803 	mla	r8, r8, r3, r4
 801f288:	9b01      	ldr	r3, [sp, #4]
 801f28a:	fb13 fc0c 	smulbb	ip, r3, ip
 801f28e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f292:	fb08 c707 	mla	r7, r8, r7, ip
 801f296:	b2bf      	uxth	r7, r7
 801f298:	f107 0c01 	add.w	ip, r7, #1
 801f29c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f2a0:	123f      	asrs	r7, r7, #8
 801f2a2:	708f      	strb	r7, [r1, #2]
 801f2a4:	b007      	add	sp, #28
 801f2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2aa:	bf00      	nop
 801f2ac:	0802b011 	.word	0x0802b011
 801f2b0:	0802b506 	.word	0x0802b506
 801f2b4:	0802b0da 	.word	0x0802b0da

0801f2b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2bc:	ed2d 8b08 	vpush	{d8-d11}
 801f2c0:	b095      	sub	sp, #84	; 0x54
 801f2c2:	eeb0 aa40 	vmov.f32	s20, s0
 801f2c6:	eef0 9a60 	vmov.f32	s19, s1
 801f2ca:	930a      	str	r3, [sp, #40]	; 0x28
 801f2cc:	eeb0 9a41 	vmov.f32	s18, s2
 801f2d0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f2d4:	eeb0 8a62 	vmov.f32	s16, s5
 801f2d8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801f2da:	eef0 8a43 	vmov.f32	s17, s6
 801f2de:	930c      	str	r3, [sp, #48]	; 0x30
 801f2e0:	eef0 ba44 	vmov.f32	s23, s8
 801f2e4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f2e8:	eeb0 ba64 	vmov.f32	s22, s9
 801f2ec:	9013      	str	r0, [sp, #76]	; 0x4c
 801f2ee:	eef0 aa45 	vmov.f32	s21, s10
 801f2f2:	9310      	str	r3, [sp, #64]	; 0x40
 801f2f4:	6860      	ldr	r0, [r4, #4]
 801f2f6:	910f      	str	r1, [sp, #60]	; 0x3c
 801f2f8:	9212      	str	r2, [sp, #72]	; 0x48
 801f2fa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f2fc:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f300:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f304:	fb00 1303 	mla	r3, r0, r3, r1
 801f308:	6821      	ldr	r1, [r4, #0]
 801f30a:	6854      	ldr	r4, [r2, #4]
 801f30c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f310:	18cb      	adds	r3, r1, r3
 801f312:	930b      	str	r3, [sp, #44]	; 0x2c
 801f314:	6813      	ldr	r3, [r2, #0]
 801f316:	930e      	str	r3, [sp, #56]	; 0x38
 801f318:	1d23      	adds	r3, r4, #4
 801f31a:	9309      	str	r3, [sp, #36]	; 0x24
 801f31c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f31e:	43db      	mvns	r3, r3
 801f320:	b2db      	uxtb	r3, r3
 801f322:	930d      	str	r3, [sp, #52]	; 0x34
 801f324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f326:	2b00      	cmp	r3, #0
 801f328:	dc03      	bgt.n	801f332 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f32a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	f340 823c 	ble.w	801f7aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f334:	2b00      	cmp	r3, #0
 801f336:	f340 8115 	ble.w	801f564 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f33a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f33c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f33e:	1412      	asrs	r2, r2, #16
 801f340:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f344:	d431      	bmi.n	801f3aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f346:	1c51      	adds	r1, r2, #1
 801f348:	428d      	cmp	r5, r1
 801f34a:	dd31      	ble.n	801f3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	db2f      	blt.n	801f3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f350:	1c59      	adds	r1, r3, #1
 801f352:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f354:	4288      	cmp	r0, r1
 801f356:	dd2b      	ble.n	801f3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f35a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f35c:	3b01      	subs	r3, #1
 801f35e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f360:	fb02 1203 	mla	r2, r2, r3, r1
 801f364:	1412      	asrs	r2, r2, #16
 801f366:	d42d      	bmi.n	801f3c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f368:	3201      	adds	r2, #1
 801f36a:	4295      	cmp	r5, r2
 801f36c:	dd2a      	ble.n	801f3c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f36e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f370:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f372:	fb02 1303 	mla	r3, r2, r3, r1
 801f376:	141b      	asrs	r3, r3, #16
 801f378:	d424      	bmi.n	801f3c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f37a:	3301      	adds	r3, #1
 801f37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f37e:	429a      	cmp	r2, r3
 801f380:	dd20      	ble.n	801f3c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f384:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f388:	f103 0c03 	add.w	ip, r3, #3
 801f38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f38e:	9311      	str	r3, [sp, #68]	; 0x44
 801f390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f392:	2b00      	cmp	r3, #0
 801f394:	f300 814f 	bgt.w	801f636 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f39a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f39c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3a4:	441a      	add	r2, r3
 801f3a6:	920b      	str	r2, [sp, #44]	; 0x2c
 801f3a8:	e0de      	b.n	801f568 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f3aa:	1c51      	adds	r1, r2, #1
 801f3ac:	f040 80cb 	bne.w	801f546 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f3b0:	42aa      	cmp	r2, r5
 801f3b2:	f280 80c8 	bge.w	801f546 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f3b6:	1c5f      	adds	r7, r3, #1
 801f3b8:	f2c0 80c5 	blt.w	801f546 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f3be:	4293      	cmp	r3, r2
 801f3c0:	f280 80c1 	bge.w	801f546 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f3c8:	9311      	str	r3, [sp, #68]	; 0x44
 801f3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	dde3      	ble.n	801f398 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f3d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f3d2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f3d4:	141a      	asrs	r2, r3, #16
 801f3d6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f3d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f3da:	1400      	asrs	r0, r0, #16
 801f3dc:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f3e0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f3e4:	f100 810e 	bmi.w	801f604 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f3e8:	1c46      	adds	r6, r0, #1
 801f3ea:	42b5      	cmp	r5, r6
 801f3ec:	f340 810c 	ble.w	801f608 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f3f0:	2a00      	cmp	r2, #0
 801f3f2:	f2c0 8109 	blt.w	801f608 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f3f6:	1c56      	adds	r6, r2, #1
 801f3f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f3fa:	42b4      	cmp	r4, r6
 801f3fc:	f340 8104 	ble.w	801f608 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f400:	fb02 0005 	mla	r0, r2, r5, r0
 801f404:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f408:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f40c:	4402      	add	r2, r0
 801f40e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f410:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f414:	eb00 080e 	add.w	r8, r0, lr
 801f418:	2b00      	cmp	r3, #0
 801f41a:	f000 80e4 	beq.w	801f5e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f41e:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f422:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f426:	4484      	add	ip, r0
 801f428:	2900      	cmp	r1, #0
 801f42a:	f000 80e5 	beq.w	801f5f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f42e:	1950      	adds	r0, r2, r5
 801f430:	5d52      	ldrb	r2, [r2, r5]
 801f432:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f434:	7840      	ldrb	r0, [r0, #1]
 801f436:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f43a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f43e:	4422      	add	r2, r4
 801f440:	4420      	add	r0, r4
 801f442:	b29b      	uxth	r3, r3
 801f444:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f446:	b289      	uxth	r1, r1
 801f448:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f44c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f450:	fb03 fa01 	mul.w	sl, r3, r1
 801f454:	011b      	lsls	r3, r3, #4
 801f456:	f89c e000 	ldrb.w	lr, [ip]
 801f45a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f45e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f462:	eba3 030a 	sub.w	r3, r3, sl
 801f466:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f468:	b289      	uxth	r1, r1
 801f46a:	b29b      	uxth	r3, r3
 801f46c:	eba9 0901 	sub.w	r9, r9, r1
 801f470:	fb03 fe0e 	mul.w	lr, r3, lr
 801f474:	fa1f f989 	uxth.w	r9, r9
 801f478:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f47c:	f892 b000 	ldrb.w	fp, [r2]
 801f480:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f484:	f890 b000 	ldrb.w	fp, [r0]
 801f488:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f48c:	f897 b000 	ldrb.w	fp, [r7]
 801f490:	fb1b fb04 	smulbb	fp, fp, r4
 801f494:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f498:	fb0e be06 	mla	lr, lr, r6, fp
 801f49c:	fa1f fe8e 	uxth.w	lr, lr
 801f4a0:	f10e 0b01 	add.w	fp, lr, #1
 801f4a4:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f4a8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f4ac:	f887 b000 	strb.w	fp, [r7]
 801f4b0:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f4b4:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f4b8:	fb03 fe0e 	mul.w	lr, r3, lr
 801f4bc:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f4c0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f4c4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f4c8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f4cc:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f4d0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f4d4:	fb1b fb04 	smulbb	fp, fp, r4
 801f4d8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f4dc:	fb0e be06 	mla	lr, lr, r6, fp
 801f4e0:	fa1f fe8e 	uxth.w	lr, lr
 801f4e4:	f10e 0b01 	add.w	fp, lr, #1
 801f4e8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f4ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f4f0:	f887 e001 	strb.w	lr, [r7, #1]
 801f4f4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f4f8:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f4fc:	fb03 f30c 	mul.w	r3, r3, ip
 801f500:	fb09 330e 	mla	r3, r9, lr, r3
 801f504:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f508:	7882      	ldrb	r2, [r0, #2]
 801f50a:	fb01 310e 	mla	r1, r1, lr, r3
 801f50e:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f512:	78b9      	ldrb	r1, [r7, #2]
 801f514:	fb11 f104 	smulbb	r1, r1, r4
 801f518:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f51c:	fb0a 1606 	mla	r6, sl, r6, r1
 801f520:	b2b6      	uxth	r6, r6
 801f522:	1c73      	adds	r3, r6, #1
 801f524:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f528:	1236      	asrs	r6, r6, #8
 801f52a:	70be      	strb	r6, [r7, #2]
 801f52c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f52e:	3703      	adds	r7, #3
 801f530:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f532:	4413      	add	r3, r2
 801f534:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f536:	9327      	str	r3, [sp, #156]	; 0x9c
 801f538:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f53a:	4413      	add	r3, r2
 801f53c:	9328      	str	r3, [sp, #160]	; 0xa0
 801f53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f540:	3b01      	subs	r3, #1
 801f542:	9311      	str	r3, [sp, #68]	; 0x44
 801f544:	e741      	b.n	801f3ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f546:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f548:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f54a:	4413      	add	r3, r2
 801f54c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f54e:	9327      	str	r3, [sp, #156]	; 0x9c
 801f550:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f552:	4413      	add	r3, r2
 801f554:	9328      	str	r3, [sp, #160]	; 0xa0
 801f556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f558:	3b01      	subs	r3, #1
 801f55a:	930a      	str	r3, [sp, #40]	; 0x28
 801f55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f55e:	3303      	adds	r3, #3
 801f560:	930b      	str	r3, [sp, #44]	; 0x2c
 801f562:	e6e6      	b.n	801f332 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f564:	f47f aef8 	bne.w	801f358 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	f340 811d 	ble.w	801f7aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f574:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f576:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f57a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f57e:	eef0 6a48 	vmov.f32	s13, s16
 801f582:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f586:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f58a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f58e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f592:	eef0 6a68 	vmov.f32	s13, s17
 801f596:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f59a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f59e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f5a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f5a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f5aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f5ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f5b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f5b6:	ee18 2a10 	vmov	r2, s16
 801f5ba:	eeb0 8a47 	vmov.f32	s16, s14
 801f5be:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5c2:	ee18 2a90 	vmov	r2, s17
 801f5c6:	9329      	str	r3, [sp, #164]	; 0xa4
 801f5c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f5ca:	eef0 8a67 	vmov.f32	s17, s15
 801f5ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5d2:	932a      	str	r3, [sp, #168]	; 0xa8
 801f5d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f5d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5d8:	3b01      	subs	r3, #1
 801f5da:	930f      	str	r3, [sp, #60]	; 0x3c
 801f5dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f5de:	bf08      	it	eq
 801f5e0:	4613      	moveq	r3, r2
 801f5e2:	930a      	str	r3, [sp, #40]	; 0x28
 801f5e4:	e69e      	b.n	801f324 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f5e6:	b151      	cbz	r1, 801f5fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f5e8:	5d52      	ldrb	r2, [r2, r5]
 801f5ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f5ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5f0:	4402      	add	r2, r0
 801f5f2:	4640      	mov	r0, r8
 801f5f4:	46c4      	mov	ip, r8
 801f5f6:	e724      	b.n	801f442 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f5f8:	4640      	mov	r0, r8
 801f5fa:	4642      	mov	r2, r8
 801f5fc:	e721      	b.n	801f442 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f5fe:	4640      	mov	r0, r8
 801f600:	4642      	mov	r2, r8
 801f602:	e7f7      	b.n	801f5f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f604:	1c46      	adds	r6, r0, #1
 801f606:	d191      	bne.n	801f52c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f608:	4285      	cmp	r5, r0
 801f60a:	dd8f      	ble.n	801f52c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f60c:	1c54      	adds	r4, r2, #1
 801f60e:	db8d      	blt.n	801f52c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f610:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f612:	4294      	cmp	r4, r2
 801f614:	dd8a      	ble.n	801f52c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f616:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f618:	9002      	str	r0, [sp, #8]
 801f61a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f61c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f624:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f628:	e9cd 5300 	strd	r5, r3, [sp]
 801f62c:	4639      	mov	r1, r7
 801f62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f630:	f7ff fd52 	bl	801f0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f634:	e77a      	b.n	801f52c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f636:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f638:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f63a:	1410      	asrs	r0, r2, #16
 801f63c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f640:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f642:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f644:	1412      	asrs	r2, r2, #16
 801f646:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f64a:	fb05 2000 	mla	r0, r5, r0, r2
 801f64e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f650:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f654:	4402      	add	r2, r0
 801f656:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f658:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f65c:	eb00 0708 	add.w	r7, r0, r8
 801f660:	2b00      	cmp	r3, #0
 801f662:	f000 8093 	beq.w	801f78c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f666:	7856      	ldrb	r6, [r2, #1]
 801f668:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f66c:	4406      	add	r6, r0
 801f66e:	2900      	cmp	r1, #0
 801f670:	f000 8095 	beq.w	801f79e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f674:	1950      	adds	r0, r2, r5
 801f676:	5d52      	ldrb	r2, [r2, r5]
 801f678:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f67a:	7840      	ldrb	r0, [r0, #1]
 801f67c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f680:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f684:	4422      	add	r2, r4
 801f686:	4420      	add	r0, r4
 801f688:	b29b      	uxth	r3, r3
 801f68a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f68c:	b289      	uxth	r1, r1
 801f68e:	f10c 0c03 	add.w	ip, ip, #3
 801f692:	f814 b008 	ldrb.w	fp, [r4, r8]
 801f696:	fb03 f901 	mul.w	r9, r3, r1
 801f69a:	011b      	lsls	r3, r3, #4
 801f69c:	f896 8000 	ldrb.w	r8, [r6]
 801f6a0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f6a4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f6a8:	eba3 0309 	sub.w	r3, r3, r9
 801f6ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f6ae:	b289      	uxth	r1, r1
 801f6b0:	b29b      	uxth	r3, r3
 801f6b2:	ebae 0e01 	sub.w	lr, lr, r1
 801f6b6:	fb03 f808 	mul.w	r8, r3, r8
 801f6ba:	fa1f fe8e 	uxth.w	lr, lr
 801f6be:	fb0e 880b 	mla	r8, lr, fp, r8
 801f6c2:	f892 b000 	ldrb.w	fp, [r2]
 801f6c6:	fb01 880b 	mla	r8, r1, fp, r8
 801f6ca:	f890 b000 	ldrb.w	fp, [r0]
 801f6ce:	fb09 880b 	mla	r8, r9, fp, r8
 801f6d2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801f6d6:	fb1b fb04 	smulbb	fp, fp, r4
 801f6da:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f6de:	fb08 b80a 	mla	r8, r8, sl, fp
 801f6e2:	fa1f f888 	uxth.w	r8, r8
 801f6e6:	f108 0b01 	add.w	fp, r8, #1
 801f6ea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f6ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f6f2:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801f6f6:	f896 8001 	ldrb.w	r8, [r6, #1]
 801f6fa:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f6fe:	fb03 f808 	mul.w	r8, r3, r8
 801f702:	fb0e 880b 	mla	r8, lr, fp, r8
 801f706:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f70a:	fb01 880b 	mla	r8, r1, fp, r8
 801f70e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f712:	fb09 880b 	mla	r8, r9, fp, r8
 801f716:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801f71a:	fb1b fb04 	smulbb	fp, fp, r4
 801f71e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f722:	fb08 b80a 	mla	r8, r8, sl, fp
 801f726:	fa1f f888 	uxth.w	r8, r8
 801f72a:	f108 0b01 	add.w	fp, r8, #1
 801f72e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f732:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f736:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801f73a:	78b6      	ldrb	r6, [r6, #2]
 801f73c:	78bf      	ldrb	r7, [r7, #2]
 801f73e:	4373      	muls	r3, r6
 801f740:	7896      	ldrb	r6, [r2, #2]
 801f742:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f744:	fb0e 3307 	mla	r3, lr, r7, r3
 801f748:	fb01 3306 	mla	r3, r1, r6, r3
 801f74c:	7886      	ldrb	r6, [r0, #2]
 801f74e:	fb09 3906 	mla	r9, r9, r6, r3
 801f752:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f756:	fb13 f304 	smulbb	r3, r3, r4
 801f75a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f75e:	fb09 390a 	mla	r9, r9, sl, r3
 801f762:	fa1f f989 	uxth.w	r9, r9
 801f766:	f109 0301 	add.w	r3, r9, #1
 801f76a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f76e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f770:	4413      	add	r3, r2
 801f772:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f774:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f778:	9327      	str	r3, [sp, #156]	; 0x9c
 801f77a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f77c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801f780:	4413      	add	r3, r2
 801f782:	9328      	str	r3, [sp, #160]	; 0xa0
 801f784:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f786:	3b01      	subs	r3, #1
 801f788:	9311      	str	r3, [sp, #68]	; 0x44
 801f78a:	e601      	b.n	801f390 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f78c:	b151      	cbz	r1, 801f7a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801f78e:	5d52      	ldrb	r2, [r2, r5]
 801f790:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f792:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f796:	4402      	add	r2, r0
 801f798:	4638      	mov	r0, r7
 801f79a:	463e      	mov	r6, r7
 801f79c:	e774      	b.n	801f688 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f79e:	4638      	mov	r0, r7
 801f7a0:	463a      	mov	r2, r7
 801f7a2:	e771      	b.n	801f688 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f7a4:	4638      	mov	r0, r7
 801f7a6:	463a      	mov	r2, r7
 801f7a8:	e7f7      	b.n	801f79a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f7aa:	b015      	add	sp, #84	; 0x54
 801f7ac:	ecbd 8b08 	vpop	{d8-d11}
 801f7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b8:	780d      	ldrb	r5, [r1, #0]
 801f7ba:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f7be:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801f7c2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f7c6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f7ca:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f7ce:	f891 9001 	ldrb.w	r9, [r1, #1]
 801f7d2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f7d6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f7da:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f7de:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f7e2:	9501      	str	r5, [sp, #4]
 801f7e4:	fb06 470c 	mla	r7, r6, ip, r4
 801f7e8:	2e00      	cmp	r6, #0
 801f7ea:	eb02 0e07 	add.w	lr, r2, r7
 801f7ee:	db46      	blt.n	801f87e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f7f0:	45b0      	cmp	r8, r6
 801f7f2:	dd44      	ble.n	801f87e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f7f4:	2c00      	cmp	r4, #0
 801f7f6:	db40      	blt.n	801f87a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f7f8:	45a4      	cmp	ip, r4
 801f7fa:	dd3e      	ble.n	801f87a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f7fc:	5dd7      	ldrb	r7, [r2, r7]
 801f7fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f802:	441f      	add	r7, r3
 801f804:	1c62      	adds	r2, r4, #1
 801f806:	d43d      	bmi.n	801f884 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f808:	4594      	cmp	ip, r2
 801f80a:	dd3b      	ble.n	801f884 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f80c:	f1ba 0f00 	cmp.w	sl, #0
 801f810:	d038      	beq.n	801f884 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f812:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f81a:	441d      	add	r5, r3
 801f81c:	3601      	adds	r6, #1
 801f81e:	d435      	bmi.n	801f88c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f820:	45b0      	cmp	r8, r6
 801f822:	dd33      	ble.n	801f88c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f824:	b390      	cbz	r0, 801f88c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f826:	2c00      	cmp	r4, #0
 801f828:	db2e      	blt.n	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f82a:	45a4      	cmp	ip, r4
 801f82c:	dd2c      	ble.n	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f82e:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f832:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f836:	441e      	add	r6, r3
 801f838:	1c62      	adds	r2, r4, #1
 801f83a:	d42a      	bmi.n	801f892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f83c:	4594      	cmp	ip, r2
 801f83e:	dd28      	ble.n	801f892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f840:	f1ba 0f00 	cmp.w	sl, #0
 801f844:	d025      	beq.n	801f892 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f846:	44f4      	add	ip, lr
 801f848:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f84c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f850:	4413      	add	r3, r2
 801f852:	f1ba 0f0f 	cmp.w	sl, #15
 801f856:	f897 8000 	ldrb.w	r8, [r7]
 801f85a:	f895 9000 	ldrb.w	r9, [r5]
 801f85e:	f896 e000 	ldrb.w	lr, [r6]
 801f862:	f893 c000 	ldrb.w	ip, [r3]
 801f866:	d801      	bhi.n	801f86c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f868:	280f      	cmp	r0, #15
 801f86a:	d914      	bls.n	801f896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f86c:	4b29      	ldr	r3, [pc, #164]	; (801f914 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f86e:	f240 11a5 	movw	r1, #421	; 0x1a5
 801f872:	4a29      	ldr	r2, [pc, #164]	; (801f918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f874:	4829      	ldr	r0, [pc, #164]	; (801f91c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f876:	f005 ff43 	bl	8025700 <__assert_func>
 801f87a:	af01      	add	r7, sp, #4
 801f87c:	e7c2      	b.n	801f804 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f87e:	ad01      	add	r5, sp, #4
 801f880:	462f      	mov	r7, r5
 801f882:	e7cb      	b.n	801f81c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f884:	ad01      	add	r5, sp, #4
 801f886:	e7c9      	b.n	801f81c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f888:	ae01      	add	r6, sp, #4
 801f88a:	e7d5      	b.n	801f838 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f88c:	ab01      	add	r3, sp, #4
 801f88e:	461e      	mov	r6, r3
 801f890:	e7df      	b.n	801f852 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f892:	ab01      	add	r3, sp, #4
 801f894:	e7dd      	b.n	801f852 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f896:	fa1f f48a 	uxth.w	r4, sl
 801f89a:	b280      	uxth	r0, r0
 801f89c:	fb04 fa00 	mul.w	sl, r4, r0
 801f8a0:	0124      	lsls	r4, r4, #4
 801f8a2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f8a6:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f8aa:	b282      	uxth	r2, r0
 801f8ac:	eba4 000a 	sub.w	r0, r4, sl
 801f8b0:	ebab 0b02 	sub.w	fp, fp, r2
 801f8b4:	b280      	uxth	r0, r0
 801f8b6:	fa1f fb8b 	uxth.w	fp, fp
 801f8ba:	fb00 f909 	mul.w	r9, r0, r9
 801f8be:	fb0b 9808 	mla	r8, fp, r8, r9
 801f8c2:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f8c6:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f8ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f8ce:	f881 c000 	strb.w	ip, [r1]
 801f8d2:	786c      	ldrb	r4, [r5, #1]
 801f8d4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f8d8:	4344      	muls	r4, r0
 801f8da:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f8de:	7874      	ldrb	r4, [r6, #1]
 801f8e0:	fb02 cc04 	mla	ip, r2, r4, ip
 801f8e4:	785c      	ldrb	r4, [r3, #1]
 801f8e6:	fb0a c404 	mla	r4, sl, r4, ip
 801f8ea:	1224      	asrs	r4, r4, #8
 801f8ec:	704c      	strb	r4, [r1, #1]
 801f8ee:	78ad      	ldrb	r5, [r5, #2]
 801f8f0:	78bc      	ldrb	r4, [r7, #2]
 801f8f2:	4368      	muls	r0, r5
 801f8f4:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f8f8:	78b0      	ldrb	r0, [r6, #2]
 801f8fa:	fb02 b000 	mla	r0, r2, r0, fp
 801f8fe:	789a      	ldrb	r2, [r3, #2]
 801f900:	fb0a 0a02 	mla	sl, sl, r2, r0
 801f904:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f908:	f881 a002 	strb.w	sl, [r1, #2]
 801f90c:	b003      	add	sp, #12
 801f90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f912:	bf00      	nop
 801f914:	0802b011 	.word	0x0802b011
 801f918:	0802b506 	.word	0x0802b506
 801f91c:	0802b0da 	.word	0x0802b0da

0801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f924:	ed2d 8b0a 	vpush	{d8-d12}
 801f928:	b08f      	sub	sp, #60	; 0x3c
 801f92a:	eeb0 aa40 	vmov.f32	s20, s0
 801f92e:	eef0 9a60 	vmov.f32	s19, s1
 801f932:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801f934:	eeb0 9a41 	vmov.f32	s18, s2
 801f938:	9307      	str	r3, [sp, #28]
 801f93a:	eeb0 8a62 	vmov.f32	s16, s5
 801f93e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f942:	eef0 8a43 	vmov.f32	s17, s6
 801f946:	900d      	str	r0, [sp, #52]	; 0x34
 801f948:	eeb0 ca44 	vmov.f32	s24, s8
 801f94c:	6860      	ldr	r0, [r4, #4]
 801f94e:	eef0 ba64 	vmov.f32	s23, s9
 801f952:	9309      	str	r3, [sp, #36]	; 0x24
 801f954:	eeb0 ba45 	vmov.f32	s22, s10
 801f958:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f95c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801f960:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801f964:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f968:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f96a:	fb00 1303 	mla	r3, r0, r3, r1
 801f96e:	6821      	ldr	r1, [r4, #0]
 801f970:	6854      	ldr	r4, [r2, #4]
 801f972:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f976:	3404      	adds	r4, #4
 801f978:	18cb      	adds	r3, r1, r3
 801f97a:	9308      	str	r3, [sp, #32]
 801f97c:	6813      	ldr	r3, [r2, #0]
 801f97e:	930a      	str	r3, [sp, #40]	; 0x28
 801f980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f982:	2b00      	cmp	r3, #0
 801f984:	dc03      	bgt.n	801f98e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f988:	2b00      	cmp	r3, #0
 801f98a:	f340 81d2 	ble.w	801fd32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f98e:	9b07      	ldr	r3, [sp, #28]
 801f990:	2b00      	cmp	r3, #0
 801f992:	f340 80e3 	ble.w	801fb5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801f996:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f998:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f99a:	1412      	asrs	r2, r2, #16
 801f99c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f9a0:	d42f      	bmi.n	801fa02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f9a2:	1c51      	adds	r1, r2, #1
 801f9a4:	428d      	cmp	r5, r1
 801f9a6:	dd2f      	ble.n	801fa08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	db2d      	blt.n	801fa08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f9ac:	1c59      	adds	r1, r3, #1
 801f9ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9b0:	4288      	cmp	r0, r1
 801f9b2:	dd29      	ble.n	801fa08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f9b4:	9b07      	ldr	r3, [sp, #28]
 801f9b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f9b8:	3b01      	subs	r3, #1
 801f9ba:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f9bc:	fb02 1203 	mla	r2, r2, r3, r1
 801f9c0:	1412      	asrs	r2, r2, #16
 801f9c2:	d42b      	bmi.n	801fa1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9c4:	3201      	adds	r2, #1
 801f9c6:	4295      	cmp	r5, r2
 801f9c8:	dd28      	ble.n	801fa1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f9cc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f9ce:	fb02 1303 	mla	r3, r2, r3, r1
 801f9d2:	141b      	asrs	r3, r3, #16
 801f9d4:	d422      	bmi.n	801fa1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9d6:	3301      	adds	r3, #1
 801f9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9da:	429a      	cmp	r2, r3
 801f9dc:	dd1e      	ble.n	801fa1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f9de:	9b08      	ldr	r3, [sp, #32]
 801f9e0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f9e4:	f103 0803 	add.w	r8, r3, #3
 801f9e8:	f1ba 0f00 	cmp.w	sl, #0
 801f9ec:	f300 8119 	bgt.w	801fc22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801f9f0:	9b07      	ldr	r3, [sp, #28]
 801f9f2:	9a08      	ldr	r2, [sp, #32]
 801f9f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f9fc:	441a      	add	r2, r3
 801f9fe:	9208      	str	r2, [sp, #32]
 801fa00:	e0ae      	b.n	801fb60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801fa02:	1c51      	adds	r1, r2, #1
 801fa04:	f040 809b 	bne.w	801fb3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fa08:	42aa      	cmp	r2, r5
 801fa0a:	f280 8098 	bge.w	801fb3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fa0e:	1c5a      	adds	r2, r3, #1
 801fa10:	f2c0 8095 	blt.w	801fb3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fa14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa16:	4293      	cmp	r3, r2
 801fa18:	f280 8091 	bge.w	801fb3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fa1c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801fa20:	f1bb 0f00 	cmp.w	fp, #0
 801fa24:	dde4      	ble.n	801f9f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fa26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa28:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fa2a:	141a      	asrs	r2, r3, #16
 801fa2c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fa2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fa30:	1400      	asrs	r0, r0, #16
 801fa32:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801fa36:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fa3a:	f100 80dc 	bmi.w	801fbf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801fa3e:	1c47      	adds	r7, r0, #1
 801fa40:	42bd      	cmp	r5, r7
 801fa42:	f340 80da 	ble.w	801fbfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fa46:	2a00      	cmp	r2, #0
 801fa48:	f2c0 80d7 	blt.w	801fbfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fa4c:	f102 0c01 	add.w	ip, r2, #1
 801fa50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fa52:	4567      	cmp	r7, ip
 801fa54:	f340 80d1 	ble.w	801fbfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fa58:	fb02 0005 	mla	r0, r2, r5, r0
 801fa5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fa5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa60:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fa64:	4402      	add	r2, r0
 801fa66:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fa6a:	eb04 0c08 	add.w	ip, r4, r8
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	f000 80b3 	beq.w	801fbda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801fa74:	7857      	ldrb	r7, [r2, #1]
 801fa76:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fa7a:	4427      	add	r7, r4
 801fa7c:	2900      	cmp	r1, #0
 801fa7e:	f000 80b4 	beq.w	801fbea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801fa82:	1950      	adds	r0, r2, r5
 801fa84:	5d52      	ldrb	r2, [r2, r5]
 801fa86:	7840      	ldrb	r0, [r0, #1]
 801fa88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fa90:	4422      	add	r2, r4
 801fa92:	4420      	add	r0, r4
 801fa94:	b29b      	uxth	r3, r3
 801fa96:	f814 a008 	ldrb.w	sl, [r4, r8]
 801fa9a:	b289      	uxth	r1, r1
 801fa9c:	f897 8000 	ldrb.w	r8, [r7]
 801faa0:	fb03 f901 	mul.w	r9, r3, r1
 801faa4:	011b      	lsls	r3, r3, #4
 801faa6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801faaa:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801faae:	eba3 0309 	sub.w	r3, r3, r9
 801fab2:	b289      	uxth	r1, r1
 801fab4:	b29b      	uxth	r3, r3
 801fab6:	ebae 0e01 	sub.w	lr, lr, r1
 801faba:	fb03 f808 	mul.w	r8, r3, r8
 801fabe:	fa1f fe8e 	uxth.w	lr, lr
 801fac2:	fb0e 880a 	mla	r8, lr, sl, r8
 801fac6:	f892 a000 	ldrb.w	sl, [r2]
 801faca:	fb01 880a 	mla	r8, r1, sl, r8
 801face:	f890 a000 	ldrb.w	sl, [r0]
 801fad2:	fb09 880a 	mla	r8, r9, sl, r8
 801fad6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fada:	f886 8000 	strb.w	r8, [r6]
 801fade:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fae2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fae6:	fb03 f808 	mul.w	r8, r3, r8
 801faea:	fb0e 880a 	mla	r8, lr, sl, r8
 801faee:	f892 a001 	ldrb.w	sl, [r2, #1]
 801faf2:	fb01 880a 	mla	r8, r1, sl, r8
 801faf6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fafa:	fb09 880a 	mla	r8, r9, sl, r8
 801fafe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fb02:	f886 8001 	strb.w	r8, [r6, #1]
 801fb06:	78bf      	ldrb	r7, [r7, #2]
 801fb08:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fb0c:	437b      	muls	r3, r7
 801fb0e:	7892      	ldrb	r2, [r2, #2]
 801fb10:	fb0e 330c 	mla	r3, lr, ip, r3
 801fb14:	fb01 3102 	mla	r1, r1, r2, r3
 801fb18:	7882      	ldrb	r2, [r0, #2]
 801fb1a:	fb09 1902 	mla	r9, r9, r2, r1
 801fb1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb22:	f886 9002 	strb.w	r9, [r6, #2]
 801fb26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb28:	3603      	adds	r6, #3
 801fb2a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fb2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fb30:	4413      	add	r3, r2
 801fb32:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fb34:	9323      	str	r3, [sp, #140]	; 0x8c
 801fb36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb38:	4413      	add	r3, r2
 801fb3a:	9324      	str	r3, [sp, #144]	; 0x90
 801fb3c:	e770      	b.n	801fa20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801fb3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb40:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fb42:	4413      	add	r3, r2
 801fb44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fb46:	9323      	str	r3, [sp, #140]	; 0x8c
 801fb48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb4a:	4413      	add	r3, r2
 801fb4c:	9324      	str	r3, [sp, #144]	; 0x90
 801fb4e:	9b07      	ldr	r3, [sp, #28]
 801fb50:	3b01      	subs	r3, #1
 801fb52:	9307      	str	r3, [sp, #28]
 801fb54:	9b08      	ldr	r3, [sp, #32]
 801fb56:	3303      	adds	r3, #3
 801fb58:	9308      	str	r3, [sp, #32]
 801fb5a:	e718      	b.n	801f98e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fb5c:	f47f af2a 	bne.w	801f9b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	f340 80e5 	ble.w	801fd32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fb68:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801fb6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fb6e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801fb72:	eef0 6a48 	vmov.f32	s13, s16
 801fb76:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801fb7a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801fb7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb82:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801fb86:	eef0 6a68 	vmov.f32	s13, s17
 801fb8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb8e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801fb92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fb96:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fb9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fb9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fba2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fba6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fbaa:	ee18 2a10 	vmov	r2, s16
 801fbae:	eeb0 8a47 	vmov.f32	s16, s14
 801fbb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbb6:	ee18 2a90 	vmov	r2, s17
 801fbba:	9325      	str	r3, [sp, #148]	; 0x94
 801fbbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fbbe:	eef0 8a67 	vmov.f32	s17, s15
 801fbc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbc6:	9326      	str	r3, [sp, #152]	; 0x98
 801fbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fbca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fbcc:	3b01      	subs	r3, #1
 801fbce:	930b      	str	r3, [sp, #44]	; 0x2c
 801fbd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fbd2:	bf08      	it	eq
 801fbd4:	4613      	moveq	r3, r2
 801fbd6:	9307      	str	r3, [sp, #28]
 801fbd8:	e6d2      	b.n	801f980 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fbda:	b149      	cbz	r1, 801fbf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801fbdc:	5d52      	ldrb	r2, [r2, r5]
 801fbde:	4660      	mov	r0, ip
 801fbe0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbe4:	4422      	add	r2, r4
 801fbe6:	4667      	mov	r7, ip
 801fbe8:	e754      	b.n	801fa94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fbea:	4660      	mov	r0, ip
 801fbec:	4662      	mov	r2, ip
 801fbee:	e751      	b.n	801fa94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fbf0:	4660      	mov	r0, ip
 801fbf2:	4662      	mov	r2, ip
 801fbf4:	e7f7      	b.n	801fbe6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801fbf6:	1c47      	adds	r7, r0, #1
 801fbf8:	d195      	bne.n	801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fbfa:	4285      	cmp	r5, r0
 801fbfc:	dd93      	ble.n	801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fbfe:	1c57      	adds	r7, r2, #1
 801fc00:	db91      	blt.n	801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fc02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fc04:	4297      	cmp	r7, r2
 801fc06:	dd8e      	ble.n	801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fc08:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fc0c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fc10:	e9cd 5700 	strd	r5, r7, [sp]
 801fc14:	4623      	mov	r3, r4
 801fc16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fc18:	4631      	mov	r1, r6
 801fc1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fc1c:	f7ff fdca 	bl	801f7b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fc20:	e781      	b.n	801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fc22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fc24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fc26:	1410      	asrs	r0, r2, #16
 801fc28:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fc2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fc2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc30:	1412      	asrs	r2, r2, #16
 801fc32:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fc36:	fb05 2000 	mla	r0, r5, r0, r2
 801fc3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fc3c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fc40:	4402      	add	r2, r0
 801fc42:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fc46:	eb04 070e 	add.w	r7, r4, lr
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d063      	beq.n	801fd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801fc4e:	7856      	ldrb	r6, [r2, #1]
 801fc50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fc54:	4426      	add	r6, r4
 801fc56:	2900      	cmp	r1, #0
 801fc58:	d065      	beq.n	801fd26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801fc5a:	1950      	adds	r0, r2, r5
 801fc5c:	5d52      	ldrb	r2, [r2, r5]
 801fc5e:	7840      	ldrb	r0, [r0, #1]
 801fc60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fc68:	4422      	add	r2, r4
 801fc6a:	4420      	add	r0, r4
 801fc6c:	b29b      	uxth	r3, r3
 801fc6e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fc72:	b289      	uxth	r1, r1
 801fc74:	f896 e000 	ldrb.w	lr, [r6]
 801fc78:	f108 0803 	add.w	r8, r8, #3
 801fc7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fc80:	fb03 f901 	mul.w	r9, r3, r1
 801fc84:	011b      	lsls	r3, r3, #4
 801fc86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fc8a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fc8e:	eba3 0309 	sub.w	r3, r3, r9
 801fc92:	b289      	uxth	r1, r1
 801fc94:	b29b      	uxth	r3, r3
 801fc96:	ebac 0c01 	sub.w	ip, ip, r1
 801fc9a:	fb03 fe0e 	mul.w	lr, r3, lr
 801fc9e:	fa1f fc8c 	uxth.w	ip, ip
 801fca2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fca6:	f892 b000 	ldrb.w	fp, [r2]
 801fcaa:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fcae:	f890 b000 	ldrb.w	fp, [r0]
 801fcb2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fcb6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fcba:	f808 ec06 	strb.w	lr, [r8, #-6]
 801fcbe:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fcc2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fcc6:	fb03 fe0e 	mul.w	lr, r3, lr
 801fcca:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fcce:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fcd2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fcd6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fcda:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fcde:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fce2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fce6:	78b6      	ldrb	r6, [r6, #2]
 801fce8:	78bf      	ldrb	r7, [r7, #2]
 801fcea:	4373      	muls	r3, r6
 801fcec:	7896      	ldrb	r6, [r2, #2]
 801fcee:	7882      	ldrb	r2, [r0, #2]
 801fcf0:	fb0c 3307 	mla	r3, ip, r7, r3
 801fcf4:	fb01 3306 	mla	r3, r1, r6, r3
 801fcf8:	fb09 3902 	mla	r9, r9, r2, r3
 801fcfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fcfe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fd00:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fd04:	4413      	add	r3, r2
 801fd06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fd08:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fd0c:	9323      	str	r3, [sp, #140]	; 0x8c
 801fd0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd10:	4413      	add	r3, r2
 801fd12:	9324      	str	r3, [sp, #144]	; 0x90
 801fd14:	e668      	b.n	801f9e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fd16:	b149      	cbz	r1, 801fd2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801fd18:	5d52      	ldrb	r2, [r2, r5]
 801fd1a:	4638      	mov	r0, r7
 801fd1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd20:	4422      	add	r2, r4
 801fd22:	463e      	mov	r6, r7
 801fd24:	e7a2      	b.n	801fc6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fd26:	4638      	mov	r0, r7
 801fd28:	463a      	mov	r2, r7
 801fd2a:	e79f      	b.n	801fc6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fd2c:	4638      	mov	r0, r7
 801fd2e:	463a      	mov	r2, r7
 801fd30:	e7f7      	b.n	801fd22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801fd32:	b00f      	add	sp, #60	; 0x3c
 801fd34:	ecbd 8b0a 	vpop	{d8-d12}
 801fd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd40:	b087      	sub	sp, #28
 801fd42:	7888      	ldrb	r0, [r1, #2]
 801fd44:	9002      	str	r0, [sp, #8]
 801fd46:	7848      	ldrb	r0, [r1, #1]
 801fd48:	9e02      	ldr	r6, [sp, #8]
 801fd4a:	9003      	str	r0, [sp, #12]
 801fd4c:	7808      	ldrb	r0, [r1, #0]
 801fd4e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fd52:	9004      	str	r0, [sp, #16]
 801fd54:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fd58:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801fd5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801fd60:	9e03      	ldr	r6, [sp, #12]
 801fd62:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801fd66:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fd6a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801fd6e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801fd72:	fb04 7508 	mla	r5, r4, r8, r7
 801fd76:	2c00      	cmp	r4, #0
 801fd78:	eb02 0905 	add.w	r9, r2, r5
 801fd7c:	db45      	blt.n	801fe0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fd7e:	45a2      	cmp	sl, r4
 801fd80:	dd43      	ble.n	801fe0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fd82:	2f00      	cmp	r7, #0
 801fd84:	db3f      	blt.n	801fe06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fd86:	45b8      	cmp	r8, r7
 801fd88:	dd3d      	ble.n	801fe06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fd8a:	5d52      	ldrb	r2, [r2, r5]
 801fd8c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fd90:	1c7a      	adds	r2, r7, #1
 801fd92:	d43d      	bmi.n	801fe10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fd94:	4590      	cmp	r8, r2
 801fd96:	dd3b      	ble.n	801fe10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fd98:	f1bc 0f00 	cmp.w	ip, #0
 801fd9c:	d038      	beq.n	801fe10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fd9e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fda2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fda6:	3401      	adds	r4, #1
 801fda8:	d436      	bmi.n	801fe18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fdaa:	45a2      	cmp	sl, r4
 801fdac:	dd34      	ble.n	801fe18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fdae:	f1be 0f00 	cmp.w	lr, #0
 801fdb2:	d031      	beq.n	801fe18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fdb4:	2f00      	cmp	r7, #0
 801fdb6:	db2d      	blt.n	801fe14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fdb8:	45b8      	cmp	r8, r7
 801fdba:	dd2b      	ble.n	801fe14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fdbc:	f819 2008 	ldrb.w	r2, [r9, r8]
 801fdc0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fdc4:	3701      	adds	r7, #1
 801fdc6:	d409      	bmi.n	801fddc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fdc8:	45b8      	cmp	r8, r7
 801fdca:	dd07      	ble.n	801fddc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fdcc:	f1bc 0f00 	cmp.w	ip, #0
 801fdd0:	d004      	beq.n	801fddc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fdd2:	44c8      	add	r8, r9
 801fdd4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fdd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fddc:	f1bc 0f0f 	cmp.w	ip, #15
 801fde0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fde4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801fde8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fdec:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fdf0:	d802      	bhi.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801fdf2:	f1be 0f0f 	cmp.w	lr, #15
 801fdf6:	d911      	bls.n	801fe1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801fdf8:	4b77      	ldr	r3, [pc, #476]	; (801ffd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801fdfa:	f240 11a5 	movw	r1, #421	; 0x1a5
 801fdfe:	4a77      	ldr	r2, [pc, #476]	; (801ffdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801fe00:	4877      	ldr	r0, [pc, #476]	; (801ffe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801fe02:	f005 fc7d 	bl	8025700 <__assert_func>
 801fe06:	4606      	mov	r6, r0
 801fe08:	e7c2      	b.n	801fd90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801fe0a:	4605      	mov	r5, r0
 801fe0c:	4606      	mov	r6, r0
 801fe0e:	e7ca      	b.n	801fda6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fe10:	4605      	mov	r5, r0
 801fe12:	e7c8      	b.n	801fda6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fe14:	4604      	mov	r4, r0
 801fe16:	e7d5      	b.n	801fdc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801fe18:	4604      	mov	r4, r0
 801fe1a:	e7df      	b.n	801fddc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fe1c:	fa1f fc8c 	uxth.w	ip, ip
 801fe20:	fa1f f28e 	uxth.w	r2, lr
 801fe24:	fb02 fe0c 	mul.w	lr, r2, ip
 801fe28:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fe2c:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801fe30:	ebac 070e 	sub.w	r7, ip, lr
 801fe34:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801fe38:	b292      	uxth	r2, r2
 801fe3a:	b2bf      	uxth	r7, r7
 801fe3c:	1a9b      	subs	r3, r3, r2
 801fe3e:	fb07 fc0a 	mul.w	ip, r7, sl
 801fe42:	b29b      	uxth	r3, r3
 801fe44:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fe48:	9301      	str	r3, [sp, #4]
 801fe4a:	fb02 cc09 	mla	ip, r2, r9, ip
 801fe4e:	fb0e cc08 	mla	ip, lr, r8, ip
 801fe52:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fe56:	9305      	str	r3, [sp, #20]
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	f000 80b9 	beq.w	801ffd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801fe5e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fe62:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe66:	fb0b fc0c 	mul.w	ip, fp, ip
 801fe6a:	fb0b f606 	mul.w	r6, fp, r6
 801fe6e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fe72:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe76:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fe7a:	44dc      	add	ip, fp
 801fe7c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fe80:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fe84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe88:	fb0a fb0b 	mul.w	fp, sl, fp
 801fe8c:	fb0a fa05 	mul.w	sl, sl, r5
 801fe90:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801fe94:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fe98:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801fe9c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fea0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fea4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fea8:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801feac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801feb0:	0a36      	lsrs	r6, r6, #8
 801feb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801feb6:	44dc      	add	ip, fp
 801feb8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801febc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fec0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fec4:	fb09 fb0b 	mul.w	fp, r9, fp
 801fec8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fecc:	fb09 f904 	mul.w	r9, r9, r4
 801fed0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fed4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801fed8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fedc:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fee0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fee4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fee8:	fb0c fc07 	mul.w	ip, ip, r7
 801feec:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fef0:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801fef4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fef8:	445d      	add	r5, fp
 801fefa:	fb08 f404 	mul.w	r4, r8, r4
 801fefe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ff02:	fb08 f800 	mul.w	r8, r8, r0
 801ff06:	0a2d      	lsrs	r5, r5, #8
 801ff08:	0a20      	lsrs	r0, r4, #8
 801ff0a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801ff0e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ff12:	fb07 f70a 	mul.w	r7, r7, sl
 801ff16:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ff1a:	4404      	add	r4, r0
 801ff1c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801ff20:	0a24      	lsrs	r4, r4, #8
 801ff22:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801ff26:	9801      	ldr	r0, [sp, #4]
 801ff28:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ff2c:	fb03 cc00 	mla	ip, r3, r0, ip
 801ff30:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ff34:	fb00 7606 	mla	r6, r0, r6, r7
 801ff38:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801ff3c:	fb04 cc0e 	mla	ip, r4, lr, ip
 801ff40:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ff44:	b280      	uxth	r0, r0
 801ff46:	9c04      	ldr	r4, [sp, #16]
 801ff48:	fb05 cc02 	mla	ip, r5, r2, ip
 801ff4c:	fb0e 6e08 	mla	lr, lr, r8, r6
 801ff50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff54:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801ff58:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801ff5c:	fb02 ec0c 	mla	ip, r2, ip, lr
 801ff60:	9a05      	ldr	r2, [sp, #20]
 801ff62:	4342      	muls	r2, r0
 801ff64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff68:	1c53      	adds	r3, r2, #1
 801ff6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ff6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ff72:	ea45 0c0c 	orr.w	ip, r5, ip
 801ff76:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ff7a:	fa5f f28c 	uxtb.w	r2, ip
 801ff7e:	b2db      	uxtb	r3, r3
 801ff80:	fb14 f403 	smulbb	r4, r4, r3
 801ff84:	fb02 4200 	mla	r2, r2, r0, r4
 801ff88:	b292      	uxth	r2, r2
 801ff8a:	1c54      	adds	r4, r2, #1
 801ff8c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801ff90:	9c03      	ldr	r4, [sp, #12]
 801ff92:	fb14 f403 	smulbb	r4, r4, r3
 801ff96:	1212      	asrs	r2, r2, #8
 801ff98:	700a      	strb	r2, [r1, #0]
 801ff9a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801ff9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ffa2:	fb02 4200 	mla	r2, r2, r0, r4
 801ffa6:	b292      	uxth	r2, r2
 801ffa8:	1c54      	adds	r4, r2, #1
 801ffaa:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801ffae:	1212      	asrs	r2, r2, #8
 801ffb0:	704a      	strb	r2, [r1, #1]
 801ffb2:	9a02      	ldr	r2, [sp, #8]
 801ffb4:	fb12 f303 	smulbb	r3, r2, r3
 801ffb8:	fb0c 3c00 	mla	ip, ip, r0, r3
 801ffbc:	fa1f fc8c 	uxth.w	ip, ip
 801ffc0:	f10c 0301 	add.w	r3, ip, #1
 801ffc4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ffc8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ffcc:	f881 c002 	strb.w	ip, [r1, #2]
 801ffd0:	b007      	add	sp, #28
 801ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffd6:	bf00      	nop
 801ffd8:	0802b011 	.word	0x0802b011
 801ffdc:	0802b506 	.word	0x0802b506
 801ffe0:	0802b0da 	.word	0x0802b0da

0801ffe4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ffe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffe8:	ed2d 8b08 	vpush	{d8-d11}
 801ffec:	b09b      	sub	sp, #108	; 0x6c
 801ffee:	eeb0 aa40 	vmov.f32	s20, s0
 801fff2:	eef0 9a60 	vmov.f32	s19, s1
 801fff6:	930a      	str	r3, [sp, #40]	; 0x28
 801fff8:	eeb0 9a41 	vmov.f32	s18, s2
 801fffc:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8020000:	eeb0 8a62 	vmov.f32	s16, s5
 8020004:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8020006:	eef0 8a43 	vmov.f32	s17, s6
 802000a:	9312      	str	r3, [sp, #72]	; 0x48
 802000c:	eef0 ba44 	vmov.f32	s23, s8
 8020010:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8020014:	eeb0 ba64 	vmov.f32	s22, s9
 8020018:	9019      	str	r0, [sp, #100]	; 0x64
 802001a:	eef0 aa45 	vmov.f32	s21, s10
 802001e:	9114      	str	r1, [sp, #80]	; 0x50
 8020020:	9317      	str	r3, [sp, #92]	; 0x5c
 8020022:	6868      	ldr	r0, [r5, #4]
 8020024:	9218      	str	r2, [sp, #96]	; 0x60
 8020026:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020028:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 802002c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8020030:	fb00 1303 	mla	r3, r0, r3, r1
 8020034:	6829      	ldr	r1, [r5, #0]
 8020036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802003a:	18cb      	adds	r3, r1, r3
 802003c:	930d      	str	r3, [sp, #52]	; 0x34
 802003e:	6813      	ldr	r3, [r2, #0]
 8020040:	9313      	str	r3, [sp, #76]	; 0x4c
 8020042:	6853      	ldr	r3, [r2, #4]
 8020044:	3304      	adds	r3, #4
 8020046:	9309      	str	r3, [sp, #36]	; 0x24
 8020048:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802004a:	2b00      	cmp	r3, #0
 802004c:	dc03      	bgt.n	8020056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802004e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020050:	2b00      	cmp	r3, #0
 8020052:	f340 8352 	ble.w	80206fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020058:	2b00      	cmp	r3, #0
 802005a:	f340 81a2 	ble.w	80203a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802005e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020060:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020062:	1412      	asrs	r2, r2, #16
 8020064:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020068:	d431      	bmi.n	80200ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802006a:	1c51      	adds	r1, r2, #1
 802006c:	428c      	cmp	r4, r1
 802006e:	dd31      	ble.n	80200d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020070:	2b00      	cmp	r3, #0
 8020072:	db2f      	blt.n	80200d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020074:	1c59      	adds	r1, r3, #1
 8020076:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020078:	4288      	cmp	r0, r1
 802007a:	dd2b      	ble.n	80200d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802007c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802007e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020080:	3b01      	subs	r3, #1
 8020082:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020084:	fb02 1203 	mla	r2, r2, r3, r1
 8020088:	1412      	asrs	r2, r2, #16
 802008a:	d42d      	bmi.n	80200e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802008c:	3201      	adds	r2, #1
 802008e:	4294      	cmp	r4, r2
 8020090:	dd2a      	ble.n	80200e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020092:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020094:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8020096:	fb02 1303 	mla	r3, r2, r3, r1
 802009a:	141b      	asrs	r3, r3, #16
 802009c:	d424      	bmi.n	80200e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802009e:	3301      	adds	r3, #1
 80200a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80200a2:	429a      	cmp	r2, r3
 80200a4:	dd20      	ble.n	80200e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80200a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80200a8:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80200ac:	f103 0e03 	add.w	lr, r3, #3
 80200b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200b2:	9315      	str	r3, [sp, #84]	; 0x54
 80200b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	f300 81de 	bgt.w	8020478 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80200bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200c8:	441a      	add	r2, r3
 80200ca:	920d      	str	r2, [sp, #52]	; 0x34
 80200cc:	e16b      	b.n	80203a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80200ce:	1c51      	adds	r1, r2, #1
 80200d0:	f040 8158 	bne.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200d4:	42a2      	cmp	r2, r4
 80200d6:	f280 8155 	bge.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200da:	1c5a      	adds	r2, r3, #1
 80200dc:	f2c0 8152 	blt.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80200e2:	4293      	cmp	r3, r2
 80200e4:	f280 814e 	bge.w	8020384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80200e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80200ec:	9316      	str	r3, [sp, #88]	; 0x58
 80200ee:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80200f2:	9315      	str	r3, [sp, #84]	; 0x54
 80200f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	dde0      	ble.n	80200bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80200fa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80200fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80200fe:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020102:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020104:	141b      	asrs	r3, r3, #16
 8020106:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802010a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802010c:	1412      	asrs	r2, r2, #16
 802010e:	f100 819a 	bmi.w	8020446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8020112:	1c55      	adds	r5, r2, #1
 8020114:	42ac      	cmp	r4, r5
 8020116:	f340 8198 	ble.w	802044a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802011a:	2b00      	cmp	r3, #0
 802011c:	f2c0 8195 	blt.w	802044a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020120:	1c5d      	adds	r5, r3, #1
 8020122:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020124:	42af      	cmp	r7, r5
 8020126:	f340 8190 	ble.w	802044a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802012a:	fb03 2304 	mla	r3, r3, r4, r2
 802012e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020130:	18d5      	adds	r5, r2, r3
 8020132:	5cd3      	ldrb	r3, [r2, r3]
 8020134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802013a:	0e1f      	lsrs	r7, r3, #24
 802013c:	2800      	cmp	r0, #0
 802013e:	f000 8171 	beq.w	8020424 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8020142:	f895 c001 	ldrb.w	ip, [r5, #1]
 8020146:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802014a:	920e      	str	r2, [sp, #56]	; 0x38
 802014c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020150:	2900      	cmp	r1, #0
 8020152:	f000 8172 	beq.w	802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8020156:	eb05 0c04 	add.w	ip, r5, r4
 802015a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802015c:	5d2d      	ldrb	r5, [r5, r4]
 802015e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8020162:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020166:	950b      	str	r5, [sp, #44]	; 0x2c
 8020168:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802016c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802016e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020172:	0e15      	lsrs	r5, r2, #24
 8020174:	920f      	str	r2, [sp, #60]	; 0x3c
 8020176:	b280      	uxth	r0, r0
 8020178:	b289      	uxth	r1, r1
 802017a:	fb00 fa01 	mul.w	sl, r0, r1
 802017e:	0100      	lsls	r0, r0, #4
 8020180:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020184:	eba0 080a 	sub.w	r8, r0, sl
 8020188:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802018c:	b289      	uxth	r1, r1
 802018e:	fa1f f888 	uxth.w	r8, r8
 8020192:	1a52      	subs	r2, r2, r1
 8020194:	fb08 f00e 	mul.w	r0, r8, lr
 8020198:	b292      	uxth	r2, r2
 802019a:	fb02 0007 	mla	r0, r2, r7, r0
 802019e:	fb01 0009 	mla	r0, r1, r9, r0
 80201a2:	fb0a 0005 	mla	r0, sl, r5, r0
 80201a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80201aa:	2800      	cmp	r0, #0
 80201ac:	f000 80dd 	beq.w	802036a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80201b0:	2fff      	cmp	r7, #255	; 0xff
 80201b2:	d01a      	beq.n	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80201b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80201b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80201bc:	fb07 fc0c 	mul.w	ip, r7, ip
 80201c0:	435f      	muls	r7, r3
 80201c2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80201c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201ca:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80201ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80201d2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80201d6:	4463      	add	r3, ip
 80201d8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80201dc:	0a1b      	lsrs	r3, r3, #8
 80201de:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80201e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80201e6:	ea43 030b 	orr.w	r3, r3, fp
 80201ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80201ee:	d01e      	beq.n	802022e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80201f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80201f2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80201f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80201fa:	fb0e fb0b 	mul.w	fp, lr, fp
 80201fe:	fb0e fe07 	mul.w	lr, lr, r7
 8020202:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020206:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802020a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802020e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020212:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020216:	44dc      	add	ip, fp
 8020218:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802021c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020220:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020224:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020228:	ea4c 070e 	orr.w	r7, ip, lr
 802022c:	970e      	str	r7, [sp, #56]	; 0x38
 802022e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020232:	d01e      	beq.n	8020272 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020234:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020236:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802023a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802023e:	fb09 fe0e 	mul.w	lr, r9, lr
 8020242:	fb09 f907 	mul.w	r9, r9, r7
 8020246:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802024a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802024e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020252:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020256:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802025a:	44f4      	add	ip, lr
 802025c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020260:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020264:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020268:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802026c:	ea4c 0709 	orr.w	r7, ip, r9
 8020270:	970b      	str	r7, [sp, #44]	; 0x2c
 8020272:	2dff      	cmp	r5, #255	; 0xff
 8020274:	d01c      	beq.n	80202b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8020276:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020278:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802027c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020280:	fb05 fe0e 	mul.w	lr, r5, lr
 8020284:	437d      	muls	r5, r7
 8020286:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802028a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802028e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8020292:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020296:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802029a:	44f4      	add	ip, lr
 802029c:	0a2d      	lsrs	r5, r5, #8
 802029e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202a2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80202a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202aa:	ea4c 0505 	orr.w	r5, ip, r5
 80202ae:	950f      	str	r5, [sp, #60]	; 0x3c
 80202b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80202b2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80202b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80202ba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80202be:	fb08 f505 	mul.w	r5, r8, r5
 80202c2:	fb02 5507 	mla	r5, r2, r7, r5
 80202c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80202c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80202cc:	fb01 5507 	mla	r5, r1, r7, r5
 80202d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80202d2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80202d6:	fb0a 5507 	mla	r5, sl, r7, r5
 80202da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80202dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80202e0:	0a2d      	lsrs	r5, r5, #8
 80202e2:	fb08 f807 	mul.w	r8, r8, r7
 80202e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80202ea:	fb02 8303 	mla	r3, r2, r3, r8
 80202ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80202f0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80202f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80202f6:	fb01 330c 	mla	r3, r1, ip, r3
 80202fa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80202fe:	fb0a 3a01 	mla	sl, sl, r1, r3
 8020302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020304:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020306:	4343      	muls	r3, r0
 8020308:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802030c:	1c58      	adds	r0, r3, #1
 802030e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020312:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020316:	ea45 050a 	orr.w	r5, r5, sl
 802031a:	7833      	ldrb	r3, [r6, #0]
 802031c:	b2ea      	uxtb	r2, r5
 802031e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020322:	fb12 f201 	smulbb	r2, r2, r1
 8020326:	b2c0      	uxtb	r0, r0
 8020328:	fb03 2300 	mla	r3, r3, r0, r2
 802032c:	b29b      	uxth	r3, r3
 802032e:	1c5a      	adds	r2, r3, #1
 8020330:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020334:	7872      	ldrb	r2, [r6, #1]
 8020336:	fb12 f200 	smulbb	r2, r2, r0
 802033a:	121b      	asrs	r3, r3, #8
 802033c:	7033      	strb	r3, [r6, #0]
 802033e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020342:	0c2d      	lsrs	r5, r5, #16
 8020344:	fb03 2301 	mla	r3, r3, r1, r2
 8020348:	b29b      	uxth	r3, r3
 802034a:	1c5a      	adds	r2, r3, #1
 802034c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020350:	121b      	asrs	r3, r3, #8
 8020352:	7073      	strb	r3, [r6, #1]
 8020354:	78b3      	ldrb	r3, [r6, #2]
 8020356:	fb13 f000 	smulbb	r0, r3, r0
 802035a:	fb05 0501 	mla	r5, r5, r1, r0
 802035e:	b2ad      	uxth	r5, r5
 8020360:	1c6b      	adds	r3, r5, #1
 8020362:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020366:	122d      	asrs	r5, r5, #8
 8020368:	70b5      	strb	r5, [r6, #2]
 802036a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802036c:	3603      	adds	r6, #3
 802036e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020370:	4413      	add	r3, r2
 8020372:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020374:	932d      	str	r3, [sp, #180]	; 0xb4
 8020376:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020378:	4413      	add	r3, r2
 802037a:	932e      	str	r3, [sp, #184]	; 0xb8
 802037c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802037e:	3b01      	subs	r3, #1
 8020380:	9316      	str	r3, [sp, #88]	; 0x58
 8020382:	e6b7      	b.n	80200f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020384:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020386:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020388:	4413      	add	r3, r2
 802038a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802038c:	932d      	str	r3, [sp, #180]	; 0xb4
 802038e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020390:	4413      	add	r3, r2
 8020392:	932e      	str	r3, [sp, #184]	; 0xb8
 8020394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020396:	3b01      	subs	r3, #1
 8020398:	930a      	str	r3, [sp, #40]	; 0x28
 802039a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802039c:	3303      	adds	r3, #3
 802039e:	930d      	str	r3, [sp, #52]	; 0x34
 80203a0:	e659      	b.n	8020056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80203a2:	f47f ae6b 	bne.w	802007c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80203a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	f340 81a6 	ble.w	80206fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80203ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80203b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80203b4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80203b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80203bc:	eef0 6a48 	vmov.f32	s13, s16
 80203c0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80203c4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80203c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203cc:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80203d0:	eef0 6a68 	vmov.f32	s13, s17
 80203d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203d8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80203dc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80203e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80203e4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80203e8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80203ec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80203f0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80203f4:	ee18 2a10 	vmov	r2, s16
 80203f8:	eeb0 8a47 	vmov.f32	s16, s14
 80203fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020400:	ee18 2a90 	vmov	r2, s17
 8020404:	932f      	str	r3, [sp, #188]	; 0xbc
 8020406:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020408:	eef0 8a67 	vmov.f32	s17, s15
 802040c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020410:	9330      	str	r3, [sp, #192]	; 0xc0
 8020412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020414:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020416:	3b01      	subs	r3, #1
 8020418:	9314      	str	r3, [sp, #80]	; 0x50
 802041a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802041c:	bf08      	it	eq
 802041e:	4613      	moveq	r3, r2
 8020420:	930a      	str	r3, [sp, #40]	; 0x28
 8020422:	e611      	b.n	8020048 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020424:	b161      	cbz	r1, 8020440 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8020426:	5d2a      	ldrb	r2, [r5, r4]
 8020428:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802042a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802042e:	25ff      	movs	r5, #255	; 0xff
 8020430:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020434:	920b      	str	r2, [sp, #44]	; 0x2c
 8020436:	46ae      	mov	lr, r5
 8020438:	e69d      	b.n	8020176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802043a:	25ff      	movs	r5, #255	; 0xff
 802043c:	46a9      	mov	r9, r5
 802043e:	e69a      	b.n	8020176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020440:	25ff      	movs	r5, #255	; 0xff
 8020442:	46a9      	mov	r9, r5
 8020444:	e7f7      	b.n	8020436 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8020446:	1c57      	adds	r7, r2, #1
 8020448:	d18f      	bne.n	802036a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802044a:	4294      	cmp	r4, r2
 802044c:	dd8d      	ble.n	802036a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802044e:	1c5d      	adds	r5, r3, #1
 8020450:	db8b      	blt.n	802036a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020452:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020454:	429d      	cmp	r5, r3
 8020456:	dd88      	ble.n	802036a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020458:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802045a:	9202      	str	r2, [sp, #8]
 802045c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802045e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8020462:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020464:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020466:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802046a:	e9cd 4300 	strd	r4, r3, [sp]
 802046e:	4631      	mov	r1, r6
 8020470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020472:	f7ff fc63 	bl	801fd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020476:	e778      	b.n	802036a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020478:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802047a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802047c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020480:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020482:	1412      	asrs	r2, r2, #16
 8020484:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020488:	141b      	asrs	r3, r3, #16
 802048a:	fb04 2303 	mla	r3, r4, r3, r2
 802048e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020490:	18d5      	adds	r5, r2, r3
 8020492:	5cd3      	ldrb	r3, [r2, r3]
 8020494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802049a:	0e1e      	lsrs	r6, r3, #24
 802049c:	2900      	cmp	r1, #0
 802049e:	f000 811b 	beq.w	80206d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80204a2:	786a      	ldrb	r2, [r5, #1]
 80204a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80204a6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80204aa:	9210      	str	r2, [sp, #64]	; 0x40
 80204ac:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80204b0:	2800      	cmp	r0, #0
 80204b2:	f000 811c 	beq.w	80206ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80204b6:	192a      	adds	r2, r5, r4
 80204b8:	5d2d      	ldrb	r5, [r5, r4]
 80204ba:	7852      	ldrb	r2, [r2, #1]
 80204bc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80204c0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80204c4:	950c      	str	r5, [sp, #48]	; 0x30
 80204c6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80204ca:	0e15      	lsrs	r5, r2, #24
 80204cc:	9211      	str	r2, [sp, #68]	; 0x44
 80204ce:	b289      	uxth	r1, r1
 80204d0:	b280      	uxth	r0, r0
 80204d2:	fb01 fa00 	mul.w	sl, r1, r0
 80204d6:	0109      	lsls	r1, r1, #4
 80204d8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80204dc:	eba1 080a 	sub.w	r8, r1, sl
 80204e0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80204e4:	b280      	uxth	r0, r0
 80204e6:	fa1f f888 	uxth.w	r8, r8
 80204ea:	1a12      	subs	r2, r2, r0
 80204ec:	fb08 f10c 	mul.w	r1, r8, ip
 80204f0:	b292      	uxth	r2, r2
 80204f2:	fb02 1106 	mla	r1, r2, r6, r1
 80204f6:	fb00 1109 	mla	r1, r0, r9, r1
 80204fa:	fb0a 1105 	mla	r1, sl, r5, r1
 80204fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020502:	2900      	cmp	r1, #0
 8020504:	f000 80da 	beq.w	80206bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8020508:	2eff      	cmp	r6, #255	; 0xff
 802050a:	d016      	beq.n	802053a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802050c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020510:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020514:	4377      	muls	r7, r6
 8020516:	435e      	muls	r6, r3
 8020518:	0a3b      	lsrs	r3, r7, #8
 802051a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802051e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020522:	443b      	add	r3, r7
 8020524:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020528:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802052c:	0a1b      	lsrs	r3, r3, #8
 802052e:	0a3f      	lsrs	r7, r7, #8
 8020530:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020534:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020538:	433b      	orrs	r3, r7
 802053a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802053e:	d01d      	beq.n	802057c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8020540:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020542:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020544:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020548:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802054c:	fb0c f606 	mul.w	r6, ip, r6
 8020550:	fb0c fc07 	mul.w	ip, ip, r7
 8020554:	0a37      	lsrs	r7, r6, #8
 8020556:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802055a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802055e:	4437      	add	r7, r6
 8020560:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020564:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020568:	0a3f      	lsrs	r7, r7, #8
 802056a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802056e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020572:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020576:	ea47 060c 	orr.w	r6, r7, ip
 802057a:	9610      	str	r6, [sp, #64]	; 0x40
 802057c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020580:	d01d      	beq.n	80205be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020582:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020584:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020588:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802058c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020590:	fb09 f906 	mul.w	r9, r9, r6
 8020594:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020598:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802059c:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80205a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80205a4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80205a8:	4467      	add	r7, ip
 80205aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80205ae:	0a3f      	lsrs	r7, r7, #8
 80205b0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80205b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80205b8:	ea47 0609 	orr.w	r6, r7, r9
 80205bc:	960c      	str	r6, [sp, #48]	; 0x30
 80205be:	2dff      	cmp	r5, #255	; 0xff
 80205c0:	d01a      	beq.n	80205f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80205c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80205c4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80205c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80205cc:	fb05 fc0c 	mul.w	ip, r5, ip
 80205d0:	4375      	muls	r5, r6
 80205d2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80205d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80205da:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80205de:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80205e2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80205e6:	4467      	add	r7, ip
 80205e8:	0a2d      	lsrs	r5, r5, #8
 80205ea:	0a3f      	lsrs	r7, r7, #8
 80205ec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80205f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80205f4:	433d      	orrs	r5, r7
 80205f6:	9511      	str	r5, [sp, #68]	; 0x44
 80205f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80205fa:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80205fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020602:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020606:	fb08 f505 	mul.w	r5, r8, r5
 802060a:	fb02 5506 	mla	r5, r2, r6, r5
 802060e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020610:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020614:	fb00 5506 	mla	r5, r0, r6, r5
 8020618:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802061a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802061e:	fb0a 5506 	mla	r5, sl, r6, r5
 8020622:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020624:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020628:	0a2d      	lsrs	r5, r5, #8
 802062a:	fb08 f806 	mul.w	r8, r8, r6
 802062e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020632:	fb02 8303 	mla	r3, r2, r3, r8
 8020636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020638:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802063c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802063e:	fb00 3307 	mla	r3, r0, r7, r3
 8020642:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020646:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802064a:	fb01 f30b 	mul.w	r3, r1, fp
 802064e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020652:	1c59      	adds	r1, r3, #1
 8020654:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020658:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802065c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020660:	ea45 050c 	orr.w	r5, r5, ip
 8020664:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020668:	b2ea      	uxtb	r2, r5
 802066a:	b2c9      	uxtb	r1, r1
 802066c:	fb12 f20b 	smulbb	r2, r2, fp
 8020670:	fb03 2301 	mla	r3, r3, r1, r2
 8020674:	b29b      	uxth	r3, r3
 8020676:	1c5a      	adds	r2, r3, #1
 8020678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802067c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020680:	fb12 f201 	smulbb	r2, r2, r1
 8020684:	121b      	asrs	r3, r3, #8
 8020686:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802068a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802068e:	0c2d      	lsrs	r5, r5, #16
 8020690:	fb03 230b 	mla	r3, r3, fp, r2
 8020694:	b29b      	uxth	r3, r3
 8020696:	1c5a      	adds	r2, r3, #1
 8020698:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802069c:	121b      	asrs	r3, r3, #8
 802069e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80206a2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80206a6:	fb13 f101 	smulbb	r1, r3, r1
 80206aa:	fb05 150b 	mla	r5, r5, fp, r1
 80206ae:	b2ad      	uxth	r5, r5
 80206b0:	1c69      	adds	r1, r5, #1
 80206b2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80206b6:	122d      	asrs	r5, r5, #8
 80206b8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80206bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80206be:	f10e 0e03 	add.w	lr, lr, #3
 80206c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80206c4:	4413      	add	r3, r2
 80206c6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80206c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80206ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206cc:	4413      	add	r3, r2
 80206ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80206d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80206d2:	3b01      	subs	r3, #1
 80206d4:	9315      	str	r3, [sp, #84]	; 0x54
 80206d6:	e4ed      	b.n	80200b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80206d8:	b160      	cbz	r0, 80206f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80206da:	5d2a      	ldrb	r2, [r5, r4]
 80206dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80206de:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80206e2:	25ff      	movs	r5, #255	; 0xff
 80206e4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80206e8:	920c      	str	r2, [sp, #48]	; 0x30
 80206ea:	46ac      	mov	ip, r5
 80206ec:	e6ef      	b.n	80204ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80206ee:	25ff      	movs	r5, #255	; 0xff
 80206f0:	46a9      	mov	r9, r5
 80206f2:	e6ec      	b.n	80204ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80206f4:	25ff      	movs	r5, #255	; 0xff
 80206f6:	46a9      	mov	r9, r5
 80206f8:	e7f7      	b.n	80206ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80206fa:	b01b      	add	sp, #108	; 0x6c
 80206fc:	ecbd 8b08 	vpop	{d8-d11}
 8020700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020704 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020708:	b085      	sub	sp, #20
 802070a:	7888      	ldrb	r0, [r1, #2]
 802070c:	4692      	mov	sl, r2
 802070e:	4698      	mov	r8, r3
 8020710:	9000      	str	r0, [sp, #0]
 8020712:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020716:	7848      	ldrb	r0, [r1, #1]
 8020718:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802071c:	9001      	str	r0, [sp, #4]
 802071e:	7808      	ldrb	r0, [r1, #0]
 8020720:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020724:	9002      	str	r0, [sp, #8]
 8020726:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802072a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802072e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020732:	fb04 560c 	mla	r6, r4, ip, r5
 8020736:	2c00      	cmp	r4, #0
 8020738:	eb02 0e06 	add.w	lr, r2, r6
 802073c:	9a00      	ldr	r2, [sp, #0]
 802073e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020742:	9a01      	ldr	r2, [sp, #4]
 8020744:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020748:	db3e      	blt.n	80207c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802074a:	45a1      	cmp	r9, r4
 802074c:	dd3c      	ble.n	80207c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802074e:	2d00      	cmp	r5, #0
 8020750:	db38      	blt.n	80207c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020752:	45ac      	cmp	ip, r5
 8020754:	dd36      	ble.n	80207c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020756:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802075a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802075e:	1c6e      	adds	r6, r5, #1
 8020760:	d435      	bmi.n	80207ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020762:	45b4      	cmp	ip, r6
 8020764:	dd33      	ble.n	80207ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020766:	b393      	cbz	r3, 80207ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020768:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802076c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8020770:	3401      	adds	r4, #1
 8020772:	d430      	bmi.n	80207d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020774:	45a1      	cmp	r9, r4
 8020776:	dd2e      	ble.n	80207d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020778:	b36f      	cbz	r7, 80207d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802077a:	2d00      	cmp	r5, #0
 802077c:	db29      	blt.n	80207d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802077e:	45ac      	cmp	ip, r5
 8020780:	dd27      	ble.n	80207d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020782:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020786:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802078a:	3501      	adds	r5, #1
 802078c:	d407      	bmi.n	802079e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802078e:	45ac      	cmp	ip, r5
 8020790:	dd05      	ble.n	802079e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020792:	b123      	cbz	r3, 802079e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020794:	44f4      	add	ip, lr
 8020796:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802079a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802079e:	2b0f      	cmp	r3, #15
 80207a0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80207a4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80207a8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80207ac:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80207b0:	d801      	bhi.n	80207b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80207b2:	2f0f      	cmp	r7, #15
 80207b4:	d911      	bls.n	80207da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80207b6:	4b76      	ldr	r3, [pc, #472]	; (8020990 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80207b8:	f240 11a5 	movw	r1, #421	; 0x1a5
 80207bc:	4a75      	ldr	r2, [pc, #468]	; (8020994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80207be:	4876      	ldr	r0, [pc, #472]	; (8020998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80207c0:	f004 ff9e 	bl	8025700 <__assert_func>
 80207c4:	4602      	mov	r2, r0
 80207c6:	e7ca      	b.n	802075e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80207c8:	4606      	mov	r6, r0
 80207ca:	4602      	mov	r2, r0
 80207cc:	e7d0      	b.n	8020770 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80207ce:	4606      	mov	r6, r0
 80207d0:	e7ce      	b.n	8020770 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80207d2:	4604      	mov	r4, r0
 80207d4:	e7d9      	b.n	802078a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80207d6:	4604      	mov	r4, r0
 80207d8:	e7e1      	b.n	802079e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80207da:	b29b      	uxth	r3, r3
 80207dc:	b2bf      	uxth	r7, r7
 80207de:	fb07 fe03 	mul.w	lr, r7, r3
 80207e2:	011b      	lsls	r3, r3, #4
 80207e4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80207e8:	eba3 0c0e 	sub.w	ip, r3, lr
 80207ec:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80207f0:	b2bf      	uxth	r7, r7
 80207f2:	fa1f fc8c 	uxth.w	ip, ip
 80207f6:	1bed      	subs	r5, r5, r7
 80207f8:	fb0c f30a 	mul.w	r3, ip, sl
 80207fc:	b2ad      	uxth	r5, r5
 80207fe:	fb05 330b 	mla	r3, r5, fp, r3
 8020802:	fb07 3309 	mla	r3, r7, r9, r3
 8020806:	fb0e 3308 	mla	r3, lr, r8, r3
 802080a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802080e:	9303      	str	r3, [sp, #12]
 8020810:	2b00      	cmp	r3, #0
 8020812:	f000 80b9 	beq.w	8020988 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8020816:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802081a:	d018      	beq.n	802084e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 802081c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020820:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020824:	fb0b f303 	mul.w	r3, fp, r3
 8020828:	fb0b fb02 	mul.w	fp, fp, r2
 802082c:	0a1a      	lsrs	r2, r3, #8
 802082e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020832:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020836:	441a      	add	r2, r3
 8020838:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802083c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020840:	0a12      	lsrs	r2, r2, #8
 8020842:	0a1b      	lsrs	r3, r3, #8
 8020844:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020848:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802084c:	431a      	orrs	r2, r3
 802084e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020852:	d019      	beq.n	8020888 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020854:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020858:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802085c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020860:	fb0a fa06 	mul.w	sl, sl, r6
 8020864:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020868:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802086c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020870:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020874:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020878:	445e      	add	r6, fp
 802087a:	0a1b      	lsrs	r3, r3, #8
 802087c:	0a36      	lsrs	r6, r6, #8
 802087e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020882:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020886:	431e      	orrs	r6, r3
 8020888:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802088c:	d019      	beq.n	80208c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802088e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020892:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020896:	fb09 fa0a 	mul.w	sl, r9, sl
 802089a:	fb09 f904 	mul.w	r9, r9, r4
 802089e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80208a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80208a6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80208aa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80208ae:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80208b2:	4454      	add	r4, sl
 80208b4:	0a1b      	lsrs	r3, r3, #8
 80208b6:	0a24      	lsrs	r4, r4, #8
 80208b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208bc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80208c0:	431c      	orrs	r4, r3
 80208c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80208c6:	d019      	beq.n	80208fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80208c8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80208cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80208d0:	fb08 f909 	mul.w	r9, r8, r9
 80208d4:	fb08 f800 	mul.w	r8, r8, r0
 80208d8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80208dc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80208e0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80208e4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80208e8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80208ec:	4448      	add	r0, r9
 80208ee:	0a1b      	lsrs	r3, r3, #8
 80208f0:	0a00      	lsrs	r0, r0, #8
 80208f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208f6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80208fa:	4318      	orrs	r0, r3
 80208fc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020900:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020904:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020908:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802090c:	fb0c f808 	mul.w	r8, ip, r8
 8020910:	fb0c f606 	mul.w	r6, ip, r6
 8020914:	fb05 8803 	mla	r8, r5, r3, r8
 8020918:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802091c:	fb05 6202 	mla	r2, r5, r2, r6
 8020920:	fb07 8803 	mla	r8, r7, r3, r8
 8020924:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020928:	fb0e 8303 	mla	r3, lr, r3, r8
 802092c:	0a1b      	lsrs	r3, r3, #8
 802092e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020932:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020936:	9c02      	ldr	r4, [sp, #8]
 8020938:	fb07 2703 	mla	r7, r7, r3, r2
 802093c:	9a03      	ldr	r2, [sp, #12]
 802093e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020942:	43d2      	mvns	r2, r2
 8020944:	fb0e 7303 	mla	r3, lr, r3, r7
 8020948:	b2d2      	uxtb	r2, r2
 802094a:	0a1b      	lsrs	r3, r3, #8
 802094c:	4354      	muls	r4, r2
 802094e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020952:	1c60      	adds	r0, r4, #1
 8020954:	ea48 0303 	orr.w	r3, r8, r3
 8020958:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802095c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020960:	7008      	strb	r0, [r1, #0]
 8020962:	9801      	ldr	r0, [sp, #4]
 8020964:	4350      	muls	r0, r2
 8020966:	1c44      	adds	r4, r0, #1
 8020968:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 802096c:	0a18      	lsrs	r0, r3, #8
 802096e:	0c1b      	lsrs	r3, r3, #16
 8020970:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020974:	7048      	strb	r0, [r1, #1]
 8020976:	9800      	ldr	r0, [sp, #0]
 8020978:	4350      	muls	r0, r2
 802097a:	4602      	mov	r2, r0
 802097c:	3001      	adds	r0, #1
 802097e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020982:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020986:	708b      	strb	r3, [r1, #2]
 8020988:	b005      	add	sp, #20
 802098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802098e:	bf00      	nop
 8020990:	0802b011 	.word	0x0802b011
 8020994:	0802b506 	.word	0x0802b506
 8020998:	0802b0da 	.word	0x0802b0da

0802099c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209a0:	ed2d 8b08 	vpush	{d8-d11}
 80209a4:	b097      	sub	sp, #92	; 0x5c
 80209a6:	eeb0 aa40 	vmov.f32	s20, s0
 80209aa:	eef0 9a60 	vmov.f32	s19, s1
 80209ae:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80209b0:	eeb0 9a41 	vmov.f32	s18, s2
 80209b4:	9308      	str	r3, [sp, #32]
 80209b6:	eeb0 8a62 	vmov.f32	s16, s5
 80209ba:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80209be:	eef0 8a43 	vmov.f32	s17, s6
 80209c2:	9015      	str	r0, [sp, #84]	; 0x54
 80209c4:	eef0 ba44 	vmov.f32	s23, s8
 80209c8:	6868      	ldr	r0, [r5, #4]
 80209ca:	eeb0 ba64 	vmov.f32	s22, s9
 80209ce:	9112      	str	r1, [sp, #72]	; 0x48
 80209d0:	eef0 aa45 	vmov.f32	s21, s10
 80209d4:	9310      	str	r3, [sp, #64]	; 0x40
 80209d6:	9214      	str	r2, [sp, #80]	; 0x50
 80209d8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80209da:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80209de:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80209e2:	fb00 1303 	mla	r3, r0, r3, r1
 80209e6:	6829      	ldr	r1, [r5, #0]
 80209e8:	6855      	ldr	r5, [r2, #4]
 80209ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209ee:	3504      	adds	r5, #4
 80209f0:	18cb      	adds	r3, r1, r3
 80209f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80209f4:	6813      	ldr	r3, [r2, #0]
 80209f6:	9311      	str	r3, [sp, #68]	; 0x44
 80209f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	dc03      	bgt.n	8020a06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80209fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	f340 8333 	ble.w	802106c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020a06:	9b08      	ldr	r3, [sp, #32]
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	f340 8190 	ble.w	8020d2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020a0e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020a10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a12:	1412      	asrs	r2, r2, #16
 8020a14:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020a18:	d42f      	bmi.n	8020a7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020a1a:	1c51      	adds	r1, r2, #1
 8020a1c:	428c      	cmp	r4, r1
 8020a1e:	dd2f      	ble.n	8020a80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	db2d      	blt.n	8020a80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020a24:	1c59      	adds	r1, r3, #1
 8020a26:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020a28:	4288      	cmp	r0, r1
 8020a2a:	dd29      	ble.n	8020a80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020a2c:	9b08      	ldr	r3, [sp, #32]
 8020a2e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020a30:	3b01      	subs	r3, #1
 8020a32:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020a34:	fb02 1203 	mla	r2, r2, r3, r1
 8020a38:	1412      	asrs	r2, r2, #16
 8020a3a:	d42b      	bmi.n	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a3c:	3201      	adds	r2, #1
 8020a3e:	4294      	cmp	r4, r2
 8020a40:	dd28      	ble.n	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a42:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020a44:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020a46:	fb02 1303 	mla	r3, r2, r3, r1
 8020a4a:	141b      	asrs	r3, r3, #16
 8020a4c:	d422      	bmi.n	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a4e:	3301      	adds	r3, #1
 8020a50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a52:	429a      	cmp	r2, r3
 8020a54:	dd1e      	ble.n	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a58:	f103 0803 	add.w	r8, r3, #3
 8020a5c:	9b08      	ldr	r3, [sp, #32]
 8020a5e:	9307      	str	r3, [sp, #28]
 8020a60:	9b07      	ldr	r3, [sp, #28]
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	f300 81ca 	bgt.w	8020dfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020a68:	9b08      	ldr	r3, [sp, #32]
 8020a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020a6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a74:	441a      	add	r2, r3
 8020a76:	920b      	str	r2, [sp, #44]	; 0x2c
 8020a78:	e15b      	b.n	8020d32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8020a7a:	1c51      	adds	r1, r2, #1
 8020a7c:	f040 8148 	bne.w	8020d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a80:	42a2      	cmp	r2, r4
 8020a82:	f280 8145 	bge.w	8020d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a86:	1c5a      	adds	r2, r3, #1
 8020a88:	f2c0 8142 	blt.w	8020d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a8e:	4293      	cmp	r3, r2
 8020a90:	f280 813e 	bge.w	8020d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020a94:	9b08      	ldr	r3, [sp, #32]
 8020a96:	9313      	str	r3, [sp, #76]	; 0x4c
 8020a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a9a:	9307      	str	r3, [sp, #28]
 8020a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	dde2      	ble.n	8020a68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020aa2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020aa4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020aa6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020aaa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020aac:	141b      	asrs	r3, r3, #16
 8020aae:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020ab2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020ab4:	1412      	asrs	r2, r2, #16
 8020ab6:	f100 818b 	bmi.w	8020dd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8020aba:	1c56      	adds	r6, r2, #1
 8020abc:	42b4      	cmp	r4, r6
 8020abe:	f340 8189 	ble.w	8020dd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	f2c0 8186 	blt.w	8020dd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020ac8:	1c5e      	adds	r6, r3, #1
 8020aca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020acc:	42b7      	cmp	r7, r6
 8020ace:	f340 8181 	ble.w	8020dd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020ad2:	fb03 2304 	mla	r3, r3, r4, r2
 8020ad6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ad8:	18d6      	adds	r6, r2, r3
 8020ada:	5cd3      	ldrb	r3, [r2, r3]
 8020adc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020ae0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020ae4:	2900      	cmp	r1, #0
 8020ae6:	f000 8163 	beq.w	8020db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020aea:	7872      	ldrb	r2, [r6, #1]
 8020aec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020af0:	920c      	str	r2, [sp, #48]	; 0x30
 8020af2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020af6:	2800      	cmp	r0, #0
 8020af8:	f000 8164 	beq.w	8020dc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020afc:	1932      	adds	r2, r6, r4
 8020afe:	5d36      	ldrb	r6, [r6, r4]
 8020b00:	7852      	ldrb	r2, [r2, #1]
 8020b02:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020b06:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020b0a:	9609      	str	r6, [sp, #36]	; 0x24
 8020b0c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020b10:	0e16      	lsrs	r6, r2, #24
 8020b12:	920d      	str	r2, [sp, #52]	; 0x34
 8020b14:	b289      	uxth	r1, r1
 8020b16:	b280      	uxth	r0, r0
 8020b18:	fb01 fb00 	mul.w	fp, r1, r0
 8020b1c:	0109      	lsls	r1, r1, #4
 8020b1e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020b22:	eba1 090b 	sub.w	r9, r1, fp
 8020b26:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020b2a:	b280      	uxth	r0, r0
 8020b2c:	fa1f f989 	uxth.w	r9, r9
 8020b30:	1a12      	subs	r2, r2, r0
 8020b32:	fb09 f108 	mul.w	r1, r9, r8
 8020b36:	b292      	uxth	r2, r2
 8020b38:	fb02 110c 	mla	r1, r2, ip, r1
 8020b3c:	fb00 110a 	mla	r1, r0, sl, r1
 8020b40:	fb0b 1106 	mla	r1, fp, r6, r1
 8020b44:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020b48:	2900      	cmp	r1, #0
 8020b4a:	f000 80d2 	beq.w	8020cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020b4e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020b52:	d01b      	beq.n	8020b8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020b54:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020b58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b5c:	fb0c fe0e 	mul.w	lr, ip, lr
 8020b60:	fb0c fc03 	mul.w	ip, ip, r3
 8020b64:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020b68:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020b6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b70:	4473      	add	r3, lr
 8020b72:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020b76:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020b7a:	0a1b      	lsrs	r3, r3, #8
 8020b7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b80:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b84:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020b88:	ea43 030e 	orr.w	r3, r3, lr
 8020b8c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020b90:	d01e      	beq.n	8020bd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020b92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020b94:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020b98:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020b9c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020ba0:	fb08 f80e 	mul.w	r8, r8, lr
 8020ba4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020ba8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020bac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bb0:	44e6      	add	lr, ip
 8020bb2:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020bb6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020bba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020bbe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020bc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bc6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020bca:	ea4e 0708 	orr.w	r7, lr, r8
 8020bce:	970c      	str	r7, [sp, #48]	; 0x30
 8020bd0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020bd4:	d01e      	beq.n	8020c14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020bd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020bd8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020bdc:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020be0:	fb0a f808 	mul.w	r8, sl, r8
 8020be4:	fb0a fa0c 	mul.w	sl, sl, ip
 8020be8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020bec:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020bf0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020bf4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020bf8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020bfc:	44c6      	add	lr, r8
 8020bfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c0e:	ea4e 070a 	orr.w	r7, lr, sl
 8020c12:	9709      	str	r7, [sp, #36]	; 0x24
 8020c14:	2eff      	cmp	r6, #255	; 0xff
 8020c16:	d01d      	beq.n	8020c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020c18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020c1a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020c1e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020c22:	fb06 f808 	mul.w	r8, r6, r8
 8020c26:	fb06 f60c 	mul.w	r6, r6, ip
 8020c2a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020c2e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020c32:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020c36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c3a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020c3e:	44c6      	add	lr, r8
 8020c40:	0a36      	lsrs	r6, r6, #8
 8020c42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c46:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c4e:	ea4e 0606 	orr.w	r6, lr, r6
 8020c52:	960d      	str	r6, [sp, #52]	; 0x34
 8020c54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020c56:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020c5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020c5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c60:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c64:	43c9      	mvns	r1, r1
 8020c66:	fb09 f606 	mul.w	r6, r9, r6
 8020c6a:	b2c9      	uxtb	r1, r1
 8020c6c:	fb02 660c 	mla	r6, r2, ip, r6
 8020c70:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020c74:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020c76:	fb00 660c 	mla	r6, r0, ip, r6
 8020c7a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020c7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020c80:	fb0b 660c 	mla	r6, fp, ip, r6
 8020c84:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020c88:	fb09 f90c 	mul.w	r9, r9, ip
 8020c8c:	0a36      	lsrs	r6, r6, #8
 8020c8e:	fb02 9303 	mla	r3, r2, r3, r9
 8020c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c94:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c98:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020c9e:	fb00 330e 	mla	r3, r0, lr, r3
 8020ca2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020ca6:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020caa:	9b07      	ldr	r3, [sp, #28]
 8020cac:	781b      	ldrb	r3, [r3, #0]
 8020cae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020cb2:	fb03 f201 	mul.w	r2, r3, r1
 8020cb6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020cba:	1c53      	adds	r3, r2, #1
 8020cbc:	ea46 060b 	orr.w	r6, r6, fp
 8020cc0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020cc4:	9a07      	ldr	r2, [sp, #28]
 8020cc6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020cca:	7013      	strb	r3, [r2, #0]
 8020ccc:	7853      	ldrb	r3, [r2, #1]
 8020cce:	434b      	muls	r3, r1
 8020cd0:	1c5a      	adds	r2, r3, #1
 8020cd2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020cd6:	0a33      	lsrs	r3, r6, #8
 8020cd8:	0c36      	lsrs	r6, r6, #16
 8020cda:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020cde:	9a07      	ldr	r2, [sp, #28]
 8020ce0:	7053      	strb	r3, [r2, #1]
 8020ce2:	7893      	ldrb	r3, [r2, #2]
 8020ce4:	4359      	muls	r1, r3
 8020ce6:	1c4b      	adds	r3, r1, #1
 8020ce8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020cec:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020cf0:	7096      	strb	r6, [r2, #2]
 8020cf2:	9b07      	ldr	r3, [sp, #28]
 8020cf4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020cf6:	3303      	adds	r3, #3
 8020cf8:	9307      	str	r3, [sp, #28]
 8020cfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020cfc:	4413      	add	r3, r2
 8020cfe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020d00:	9329      	str	r3, [sp, #164]	; 0xa4
 8020d02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d04:	4413      	add	r3, r2
 8020d06:	932a      	str	r3, [sp, #168]	; 0xa8
 8020d08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020d0a:	3b01      	subs	r3, #1
 8020d0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020d0e:	e6c5      	b.n	8020a9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020d10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020d12:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020d14:	4413      	add	r3, r2
 8020d16:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020d18:	9329      	str	r3, [sp, #164]	; 0xa4
 8020d1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d1c:	4413      	add	r3, r2
 8020d1e:	932a      	str	r3, [sp, #168]	; 0xa8
 8020d20:	9b08      	ldr	r3, [sp, #32]
 8020d22:	3b01      	subs	r3, #1
 8020d24:	9308      	str	r3, [sp, #32]
 8020d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d28:	3303      	adds	r3, #3
 8020d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d2c:	e66b      	b.n	8020a06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020d2e:	f47f ae7d 	bne.w	8020a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020d32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020d34:	2b00      	cmp	r3, #0
 8020d36:	f340 8199 	ble.w	802106c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d40:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020d44:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020d48:	eef0 6a48 	vmov.f32	s13, s16
 8020d4c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020d50:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020d54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d58:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020d5c:	eef0 6a68 	vmov.f32	s13, s17
 8020d60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d64:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020d68:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020d6c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020d70:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020d74:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020d78:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020d7c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020d80:	ee18 2a10 	vmov	r2, s16
 8020d84:	eeb0 8a47 	vmov.f32	s16, s14
 8020d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d8c:	ee18 2a90 	vmov	r2, s17
 8020d90:	932b      	str	r3, [sp, #172]	; 0xac
 8020d92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d94:	eef0 8a67 	vmov.f32	s17, s15
 8020d98:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d9c:	932c      	str	r3, [sp, #176]	; 0xb0
 8020d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020da0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020da2:	3b01      	subs	r3, #1
 8020da4:	9312      	str	r3, [sp, #72]	; 0x48
 8020da6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020da8:	bf08      	it	eq
 8020daa:	4613      	moveq	r3, r2
 8020dac:	9308      	str	r3, [sp, #32]
 8020dae:	e623      	b.n	80209f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020db0:	b158      	cbz	r0, 8020dca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020db2:	5d32      	ldrb	r2, [r6, r4]
 8020db4:	26ff      	movs	r6, #255	; 0xff
 8020db6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020dba:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8020dc0:	46b0      	mov	r8, r6
 8020dc2:	e6a7      	b.n	8020b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020dc4:	26ff      	movs	r6, #255	; 0xff
 8020dc6:	46b2      	mov	sl, r6
 8020dc8:	e6a4      	b.n	8020b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020dca:	26ff      	movs	r6, #255	; 0xff
 8020dcc:	46b2      	mov	sl, r6
 8020dce:	e7f7      	b.n	8020dc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020dd0:	1c57      	adds	r7, r2, #1
 8020dd2:	d18e      	bne.n	8020cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020dd4:	4294      	cmp	r4, r2
 8020dd6:	dd8c      	ble.n	8020cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020dd8:	1c5e      	adds	r6, r3, #1
 8020dda:	db8a      	blt.n	8020cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ddc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020dde:	429e      	cmp	r6, r3
 8020de0:	dd87      	ble.n	8020cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020de2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020de6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020dea:	e9cd 4600 	strd	r4, r6, [sp]
 8020dee:	462b      	mov	r3, r5
 8020df0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020df2:	9907      	ldr	r1, [sp, #28]
 8020df4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020df6:	f7ff fc85 	bl	8020704 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020dfa:	e77a      	b.n	8020cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020dfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020dfe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020e00:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020e04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e06:	1409      	asrs	r1, r1, #16
 8020e08:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020e0c:	141b      	asrs	r3, r3, #16
 8020e0e:	fb04 1303 	mla	r3, r4, r3, r1
 8020e12:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020e14:	18ce      	adds	r6, r1, r3
 8020e16:	5ccb      	ldrb	r3, [r1, r3]
 8020e18:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020e1c:	0e1f      	lsrs	r7, r3, #24
 8020e1e:	2a00      	cmp	r2, #0
 8020e20:	f000 8114 	beq.w	802104c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020e24:	7871      	ldrb	r1, [r6, #1]
 8020e26:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020e2a:	910e      	str	r1, [sp, #56]	; 0x38
 8020e2c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020e30:	2800      	cmp	r0, #0
 8020e32:	f000 8115 	beq.w	8021060 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020e36:	1931      	adds	r1, r6, r4
 8020e38:	5d36      	ldrb	r6, [r6, r4]
 8020e3a:	7849      	ldrb	r1, [r1, #1]
 8020e3c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020e40:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020e44:	960a      	str	r6, [sp, #40]	; 0x28
 8020e46:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020e4a:	0e0e      	lsrs	r6, r1, #24
 8020e4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8020e4e:	b292      	uxth	r2, r2
 8020e50:	b280      	uxth	r0, r0
 8020e52:	fb02 fb00 	mul.w	fp, r2, r0
 8020e56:	0112      	lsls	r2, r2, #4
 8020e58:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020e5c:	eba2 090b 	sub.w	r9, r2, fp
 8020e60:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020e64:	b280      	uxth	r0, r0
 8020e66:	fa1f f989 	uxth.w	r9, r9
 8020e6a:	1a09      	subs	r1, r1, r0
 8020e6c:	fb09 f20e 	mul.w	r2, r9, lr
 8020e70:	b289      	uxth	r1, r1
 8020e72:	fb01 2207 	mla	r2, r1, r7, r2
 8020e76:	fb00 220a 	mla	r2, r0, sl, r2
 8020e7a:	fb0b 2206 	mla	r2, fp, r6, r2
 8020e7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020e82:	9213      	str	r2, [sp, #76]	; 0x4c
 8020e84:	2a00      	cmp	r2, #0
 8020e86:	f000 80d4 	beq.w	8021032 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020e8a:	2fff      	cmp	r7, #255	; 0xff
 8020e8c:	d01a      	beq.n	8020ec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020e8e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020e92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e96:	fb07 fc0c 	mul.w	ip, r7, ip
 8020e9a:	435f      	muls	r7, r3
 8020e9c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020ea0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020ea4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ea8:	4463      	add	r3, ip
 8020eaa:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020eae:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020eb2:	0a1b      	lsrs	r3, r3, #8
 8020eb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020eb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ebc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020ec0:	ea43 030c 	orr.w	r3, r3, ip
 8020ec4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020ec8:	d01f      	beq.n	8020f0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020eca:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020ecc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ece:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020ed2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020ed6:	fb0e f707 	mul.w	r7, lr, r7
 8020eda:	fb0e fe0c 	mul.w	lr, lr, ip
 8020ede:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ee2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ee6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020eea:	44bc      	add	ip, r7
 8020eec:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020ef0:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020ef4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ef8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020efc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f00:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020f04:	ea4c 020e 	orr.w	r2, ip, lr
 8020f08:	920e      	str	r2, [sp, #56]	; 0x38
 8020f0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020f0e:	d01e      	beq.n	8020f4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8020f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f12:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020f16:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020f1a:	fb0a fe0e 	mul.w	lr, sl, lr
 8020f1e:	fb0a fa07 	mul.w	sl, sl, r7
 8020f22:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020f26:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020f2a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020f2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f32:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020f36:	44f4      	add	ip, lr
 8020f38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f48:	ea4c 020a 	orr.w	r2, ip, sl
 8020f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8020f4e:	2eff      	cmp	r6, #255	; 0xff
 8020f50:	d01c      	beq.n	8020f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8020f52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f54:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020f58:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020f5c:	fb06 fe0e 	mul.w	lr, r6, lr
 8020f60:	437e      	muls	r6, r7
 8020f62:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020f66:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020f6a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020f6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f72:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020f76:	44f4      	add	ip, lr
 8020f78:	0a36      	lsrs	r6, r6, #8
 8020f7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020f82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f86:	ea4c 0206 	orr.w	r2, ip, r6
 8020f8a:	920f      	str	r2, [sp, #60]	; 0x3c
 8020f8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f8e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020f92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f96:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f9c:	fb09 f606 	mul.w	r6, r9, r6
 8020fa0:	fb01 6607 	mla	r6, r1, r7, r6
 8020fa4:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020fa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020faa:	fb00 6607 	mla	r6, r0, r7, r6
 8020fae:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020fb4:	fb0b 6607 	mla	r6, fp, r7, r6
 8020fb8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020fbe:	fb09 f907 	mul.w	r9, r9, r7
 8020fc2:	0a36      	lsrs	r6, r6, #8
 8020fc4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020fc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020fca:	fb01 9303 	mla	r3, r1, r3, r9
 8020fce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020fd2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020fd6:	fb00 330c 	mla	r3, r0, ip, r3
 8020fda:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8020fde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020fe0:	43da      	mvns	r2, r3
 8020fe2:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8020fe6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fea:	b2d2      	uxtb	r2, r2
 8020fec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020ff0:	fb03 f102 	mul.w	r1, r3, r2
 8020ff4:	ea46 060e 	orr.w	r6, r6, lr
 8020ff8:	1c4b      	adds	r3, r1, #1
 8020ffa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020ffe:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021002:	f808 3c03 	strb.w	r3, [r8, #-3]
 8021006:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 802100a:	4353      	muls	r3, r2
 802100c:	1c59      	adds	r1, r3, #1
 802100e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021012:	0a33      	lsrs	r3, r6, #8
 8021014:	0c36      	lsrs	r6, r6, #16
 8021016:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802101a:	f808 3c02 	strb.w	r3, [r8, #-2]
 802101e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021022:	435a      	muls	r2, r3
 8021024:	1c53      	adds	r3, r2, #1
 8021026:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802102a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802102e:	f808 6c01 	strb.w	r6, [r8, #-1]
 8021032:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021034:	f108 0803 	add.w	r8, r8, #3
 8021038:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802103a:	4413      	add	r3, r2
 802103c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802103e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021040:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021042:	4413      	add	r3, r2
 8021044:	932a      	str	r3, [sp, #168]	; 0xa8
 8021046:	9b07      	ldr	r3, [sp, #28]
 8021048:	3b01      	subs	r3, #1
 802104a:	e508      	b.n	8020a5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 802104c:	b158      	cbz	r0, 8021066 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802104e:	5d31      	ldrb	r1, [r6, r4]
 8021050:	26ff      	movs	r6, #255	; 0xff
 8021052:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021056:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802105a:	910a      	str	r1, [sp, #40]	; 0x28
 802105c:	46b6      	mov	lr, r6
 802105e:	e6f6      	b.n	8020e4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021060:	26ff      	movs	r6, #255	; 0xff
 8021062:	46b2      	mov	sl, r6
 8021064:	e6f3      	b.n	8020e4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021066:	26ff      	movs	r6, #255	; 0xff
 8021068:	46b2      	mov	sl, r6
 802106a:	e7f7      	b.n	802105c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 802106c:	b017      	add	sp, #92	; 0x5c
 802106e:	ecbd 8b08 	vpop	{d8-d11}
 8021072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802107c:	b08d      	sub	sp, #52	; 0x34
 802107e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8021082:	9103      	str	r1, [sp, #12]
 8021084:	fb07 5803 	mla	r8, r7, r3, r5
 8021088:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 802108c:	9803      	ldr	r0, [sp, #12]
 802108e:	2f00      	cmp	r7, #0
 8021090:	910b      	str	r1, [sp, #44]	; 0x2c
 8021092:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021096:	9903      	ldr	r1, [sp, #12]
 8021098:	9c03      	ldr	r4, [sp, #12]
 802109a:	eb02 0608 	add.w	r6, r2, r8
 802109e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80210a2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80210a6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80210aa:	7809      	ldrb	r1, [r1, #0]
 80210ac:	7840      	ldrb	r0, [r0, #1]
 80210ae:	78a4      	ldrb	r4, [r4, #2]
 80210b0:	db51      	blt.n	8021156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80210b2:	45be      	cmp	lr, r7
 80210b4:	dd4f      	ble.n	8021156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80210b6:	2d00      	cmp	r5, #0
 80210b8:	db49      	blt.n	802114e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80210ba:	42ab      	cmp	r3, r5
 80210bc:	dd47      	ble.n	802114e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80210be:	f812 2008 	ldrb.w	r2, [r2, r8]
 80210c2:	9204      	str	r2, [sp, #16]
 80210c4:	7872      	ldrb	r2, [r6, #1]
 80210c6:	9205      	str	r2, [sp, #20]
 80210c8:	78b2      	ldrb	r2, [r6, #2]
 80210ca:	9206      	str	r2, [sp, #24]
 80210cc:	1c6a      	adds	r2, r5, #1
 80210ce:	d449      	bmi.n	8021164 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80210d0:	4293      	cmp	r3, r2
 80210d2:	dd47      	ble.n	8021164 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80210d4:	f1bc 0f00 	cmp.w	ip, #0
 80210d8:	d044      	beq.n	8021164 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80210da:	7972      	ldrb	r2, [r6, #5]
 80210dc:	f896 b003 	ldrb.w	fp, [r6, #3]
 80210e0:	f896 a004 	ldrb.w	sl, [r6, #4]
 80210e4:	9201      	str	r2, [sp, #4]
 80210e6:	3701      	adds	r7, #1
 80210e8:	d444      	bmi.n	8021174 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80210ea:	45be      	cmp	lr, r7
 80210ec:	dd42      	ble.n	8021174 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80210ee:	f1b9 0f00 	cmp.w	r9, #0
 80210f2:	f000 80c1 	beq.w	8021278 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80210f6:	2d00      	cmp	r5, #0
 80210f8:	db38      	blt.n	802116c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80210fa:	42ab      	cmp	r3, r5
 80210fc:	dd36      	ble.n	802116c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80210fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021102:	f816 8002 	ldrb.w	r8, [r6, r2]
 8021106:	2203      	movs	r2, #3
 8021108:	fb03 6702 	mla	r7, r3, r2, r6
 802110c:	fb03 6202 	mla	r2, r3, r2, r6
 8021110:	787f      	ldrb	r7, [r7, #1]
 8021112:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021116:	9702      	str	r7, [sp, #8]
 8021118:	3501      	adds	r5, #1
 802111a:	d432      	bmi.n	8021182 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802111c:	42ab      	cmp	r3, r5
 802111e:	dd30      	ble.n	8021182 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021120:	f1bc 0f00 	cmp.w	ip, #0
 8021124:	d031      	beq.n	802118a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8021126:	2703      	movs	r7, #3
 8021128:	fb13 7207 	smlabb	r2, r3, r7, r7
 802112c:	5cb5      	ldrb	r5, [r6, r2]
 802112e:	fb03 6207 	mla	r2, r3, r7, r6
 8021132:	fb03 6307 	mla	r3, r3, r7, r6
 8021136:	7912      	ldrb	r2, [r2, #4]
 8021138:	795e      	ldrb	r6, [r3, #5]
 802113a:	f1bc 0f0f 	cmp.w	ip, #15
 802113e:	d927      	bls.n	8021190 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8021140:	4b53      	ldr	r3, [pc, #332]	; (8021290 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8021142:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021146:	4a53      	ldr	r2, [pc, #332]	; (8021294 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021148:	4853      	ldr	r0, [pc, #332]	; (8021298 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 802114a:	f004 fad9 	bl	8025700 <__assert_func>
 802114e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021152:	9104      	str	r1, [sp, #16]
 8021154:	e7ba      	b.n	80210cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8021156:	9401      	str	r4, [sp, #4]
 8021158:	4682      	mov	sl, r0
 802115a:	468b      	mov	fp, r1
 802115c:	9104      	str	r1, [sp, #16]
 802115e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8021162:	e7c0      	b.n	80210e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021164:	9401      	str	r4, [sp, #4]
 8021166:	4682      	mov	sl, r0
 8021168:	468b      	mov	fp, r1
 802116a:	e7bc      	b.n	80210e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802116c:	46a6      	mov	lr, r4
 802116e:	9002      	str	r0, [sp, #8]
 8021170:	4688      	mov	r8, r1
 8021172:	e7d1      	b.n	8021118 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8021174:	4626      	mov	r6, r4
 8021176:	4602      	mov	r2, r0
 8021178:	460d      	mov	r5, r1
 802117a:	46a6      	mov	lr, r4
 802117c:	9002      	str	r0, [sp, #8]
 802117e:	4688      	mov	r8, r1
 8021180:	e7db      	b.n	802113a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021182:	4626      	mov	r6, r4
 8021184:	4602      	mov	r2, r0
 8021186:	460d      	mov	r5, r1
 8021188:	e7d7      	b.n	802113a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802118a:	4626      	mov	r6, r4
 802118c:	4602      	mov	r2, r0
 802118e:	460d      	mov	r5, r1
 8021190:	f1b9 0f0f 	cmp.w	r9, #15
 8021194:	d8d4      	bhi.n	8021140 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021196:	fa1f f38c 	uxth.w	r3, ip
 802119a:	fa1f fc89 	uxth.w	ip, r9
 802119e:	fb03 f70c 	mul.w	r7, r3, ip
 80211a2:	011b      	lsls	r3, r3, #4
 80211a4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80211a8:	9707      	str	r7, [sp, #28]
 80211aa:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80211ae:	fa1f fc8c 	uxth.w	ip, ip
 80211b2:	eba7 070c 	sub.w	r7, r7, ip
 80211b6:	b2bf      	uxth	r7, r7
 80211b8:	9709      	str	r7, [sp, #36]	; 0x24
 80211ba:	9f07      	ldr	r7, [sp, #28]
 80211bc:	1bdb      	subs	r3, r3, r7
 80211be:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80211c2:	b29b      	uxth	r3, r3
 80211c4:	9708      	str	r7, [sp, #32]
 80211c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80211c8:	930a      	str	r3, [sp, #40]	; 0x28
 80211ca:	ea6f 0907 	mvn.w	r9, r7
 80211ce:	fb03 fb0b 	mul.w	fp, r3, fp
 80211d2:	9f04      	ldr	r7, [sp, #16]
 80211d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211d6:	fa5f f989 	uxtb.w	r9, r9
 80211da:	fb03 bb07 	mla	fp, r3, r7, fp
 80211de:	9f07      	ldr	r7, [sp, #28]
 80211e0:	fb11 f109 	smulbb	r1, r1, r9
 80211e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211e6:	fb0c b808 	mla	r8, ip, r8, fp
 80211ea:	fb10 f009 	smulbb	r0, r0, r9
 80211ee:	fb14 f409 	smulbb	r4, r4, r9
 80211f2:	fb07 8805 	mla	r8, r7, r5, r8
 80211f6:	9d08      	ldr	r5, [sp, #32]
 80211f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80211fa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80211fe:	fb08 1805 	mla	r8, r8, r5, r1
 8021202:	9d05      	ldr	r5, [sp, #20]
 8021204:	fa1f f888 	uxth.w	r8, r8
 8021208:	f108 0101 	add.w	r1, r8, #1
 802120c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021210:	9903      	ldr	r1, [sp, #12]
 8021212:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021216:	f881 8000 	strb.w	r8, [r1]
 802121a:	fb03 f10a 	mul.w	r1, r3, sl
 802121e:	fb07 1105 	mla	r1, r7, r5, r1
 8021222:	9d02      	ldr	r5, [sp, #8]
 8021224:	fb0c 1105 	mla	r1, ip, r5, r1
 8021228:	9d07      	ldr	r5, [sp, #28]
 802122a:	fb05 1102 	mla	r1, r5, r2, r1
 802122e:	9a08      	ldr	r2, [sp, #32]
 8021230:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021234:	fb01 0102 	mla	r1, r1, r2, r0
 8021238:	9a03      	ldr	r2, [sp, #12]
 802123a:	b289      	uxth	r1, r1
 802123c:	1c48      	adds	r0, r1, #1
 802123e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021242:	1209      	asrs	r1, r1, #8
 8021244:	7051      	strb	r1, [r2, #1]
 8021246:	9a01      	ldr	r2, [sp, #4]
 8021248:	4353      	muls	r3, r2
 802124a:	9a06      	ldr	r2, [sp, #24]
 802124c:	fb07 3702 	mla	r7, r7, r2, r3
 8021250:	9b08      	ldr	r3, [sp, #32]
 8021252:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021256:	fb05 c606 	mla	r6, r5, r6, ip
 802125a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802125e:	fb06 4603 	mla	r6, r6, r3, r4
 8021262:	9b03      	ldr	r3, [sp, #12]
 8021264:	b2b6      	uxth	r6, r6
 8021266:	f106 0e01 	add.w	lr, r6, #1
 802126a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802126e:	1236      	asrs	r6, r6, #8
 8021270:	709e      	strb	r6, [r3, #2]
 8021272:	b00d      	add	sp, #52	; 0x34
 8021274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021278:	f1bc 0f0f 	cmp.w	ip, #15
 802127c:	f63f af60 	bhi.w	8021140 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021280:	4626      	mov	r6, r4
 8021282:	4602      	mov	r2, r0
 8021284:	460d      	mov	r5, r1
 8021286:	46a6      	mov	lr, r4
 8021288:	9002      	str	r0, [sp, #8]
 802128a:	4688      	mov	r8, r1
 802128c:	e783      	b.n	8021196 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802128e:	bf00      	nop
 8021290:	0802b011 	.word	0x0802b011
 8021294:	0802b506 	.word	0x0802b506
 8021298:	0802b0da 	.word	0x0802b0da

0802129c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212a0:	ed2d 8b08 	vpush	{d8-d11}
 80212a4:	b0a1      	sub	sp, #132	; 0x84
 80212a6:	eeb0 aa40 	vmov.f32	s20, s0
 80212aa:	eef0 9a60 	vmov.f32	s19, s1
 80212ae:	9307      	str	r3, [sp, #28]
 80212b0:	eeb0 9a41 	vmov.f32	s18, s2
 80212b4:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80212b8:	eeb0 8a62 	vmov.f32	s16, s5
 80212bc:	9210      	str	r2, [sp, #64]	; 0x40
 80212be:	eef0 8a43 	vmov.f32	s17, s6
 80212c2:	9308      	str	r3, [sp, #32]
 80212c4:	eef0 ba44 	vmov.f32	s23, s8
 80212c8:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80212cc:	eeb0 ba64 	vmov.f32	s22, s9
 80212d0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80212d2:	eef0 aa45 	vmov.f32	s21, s10
 80212d6:	930a      	str	r3, [sp, #40]	; 0x28
 80212d8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80212dc:	901f      	str	r0, [sp, #124]	; 0x7c
 80212de:	930f      	str	r3, [sp, #60]	; 0x3c
 80212e0:	6850      	ldr	r0, [r2, #4]
 80212e2:	910e      	str	r1, [sp, #56]	; 0x38
 80212e4:	6812      	ldr	r2, [r2, #0]
 80212e6:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80212ea:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80212ee:	fb00 1303 	mla	r3, r0, r3, r1
 80212f2:	9908      	ldr	r1, [sp, #32]
 80212f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212f8:	18d3      	adds	r3, r2, r3
 80212fa:	2203      	movs	r2, #3
 80212fc:	9309      	str	r3, [sp, #36]	; 0x24
 80212fe:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	930c      	str	r3, [sp, #48]	; 0x30
 8021304:	f06f 0304 	mvn.w	r3, #4
 8021308:	fb11 3302 	smlabb	r3, r1, r2, r3
 802130c:	930d      	str	r3, [sp, #52]	; 0x34
 802130e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021310:	43db      	mvns	r3, r3
 8021312:	b2db      	uxtb	r3, r3
 8021314:	930b      	str	r3, [sp, #44]	; 0x2c
 8021316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021318:	2b00      	cmp	r3, #0
 802131a:	dc03      	bgt.n	8021324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802131c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802131e:	2b00      	cmp	r3, #0
 8021320:	f340 81df 	ble.w	80216e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021324:	9b07      	ldr	r3, [sp, #28]
 8021326:	2b00      	cmp	r3, #0
 8021328:	f340 80f2 	ble.w	8021510 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802132c:	ea5f 4228 	movs.w	r2, r8, asr #16
 8021330:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021334:	d430      	bmi.n	8021398 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021336:	1c51      	adds	r1, r2, #1
 8021338:	9808      	ldr	r0, [sp, #32]
 802133a:	4281      	cmp	r1, r0
 802133c:	da2f      	bge.n	802139e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802133e:	2b00      	cmp	r3, #0
 8021340:	db2d      	blt.n	802139e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021342:	1c59      	adds	r1, r3, #1
 8021344:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021346:	4288      	cmp	r0, r1
 8021348:	dd29      	ble.n	802139e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802134a:	9b07      	ldr	r3, [sp, #28]
 802134c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802134e:	3b01      	subs	r3, #1
 8021350:	fb02 8203 	mla	r2, r2, r3, r8
 8021354:	1412      	asrs	r2, r2, #16
 8021356:	d42d      	bmi.n	80213b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021358:	3201      	adds	r2, #1
 802135a:	9908      	ldr	r1, [sp, #32]
 802135c:	4291      	cmp	r1, r2
 802135e:	dd29      	ble.n	80213b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021360:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021362:	fb02 b303 	mla	r3, r2, r3, fp
 8021366:	141b      	asrs	r3, r3, #16
 8021368:	d424      	bmi.n	80213b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802136a:	3301      	adds	r3, #1
 802136c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802136e:	429a      	cmp	r2, r3
 8021370:	dd20      	ble.n	80213b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021374:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021378:	1cde      	adds	r6, r3, #3
 802137a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802137e:	f1bc 0f00 	cmp.w	ip, #0
 8021382:	f300 811f 	bgt.w	80215c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021386:	9b07      	ldr	r3, [sp, #28]
 8021388:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802138c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802138e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021392:	4423      	add	r3, r4
 8021394:	9309      	str	r3, [sp, #36]	; 0x24
 8021396:	e0bd      	b.n	8021514 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021398:	1c57      	adds	r7, r2, #1
 802139a:	f040 80ae 	bne.w	80214fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802139e:	9908      	ldr	r1, [sp, #32]
 80213a0:	428a      	cmp	r2, r1
 80213a2:	f280 80aa 	bge.w	80214fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80213a6:	1c5e      	adds	r6, r3, #1
 80213a8:	f2c0 80a7 	blt.w	80214fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80213ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80213ae:	4293      	cmp	r3, r2
 80213b0:	f280 80a3 	bge.w	80214fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80213b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80213b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80213ba:	f1ba 0f00 	cmp.w	sl, #0
 80213be:	dde2      	ble.n	8021386 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80213c0:	ea5f 4028 	movs.w	r0, r8, asr #16
 80213c4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80213c8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80213cc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80213d0:	f100 80df 	bmi.w	8021592 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80213d4:	1c45      	adds	r5, r0, #1
 80213d6:	9f08      	ldr	r7, [sp, #32]
 80213d8:	42af      	cmp	r7, r5
 80213da:	f340 80dc 	ble.w	8021596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80213de:	2900      	cmp	r1, #0
 80213e0:	f2c0 80d9 	blt.w	8021596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80213e4:	1c4d      	adds	r5, r1, #1
 80213e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80213e8:	42af      	cmp	r7, r5
 80213ea:	f340 80d4 	ble.w	8021596 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80213ee:	9d08      	ldr	r5, [sp, #32]
 80213f0:	fb05 0101 	mla	r1, r5, r1, r0
 80213f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80213f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80213fa:	1845      	adds	r5, r0, r1
 80213fc:	5c40      	ldrb	r0, [r0, r1]
 80213fe:	792f      	ldrb	r7, [r5, #4]
 8021400:	7869      	ldrb	r1, [r5, #1]
 8021402:	9711      	str	r7, [sp, #68]	; 0x44
 8021404:	796f      	ldrb	r7, [r5, #5]
 8021406:	f895 e002 	ldrb.w	lr, [r5, #2]
 802140a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802140e:	9712      	str	r7, [sp, #72]	; 0x48
 8021410:	b17a      	cbz	r2, 8021432 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8021412:	3505      	adds	r5, #5
 8021414:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021416:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021418:	19ef      	adds	r7, r5, r7
 802141a:	5d2d      	ldrb	r5, [r5, r4]
 802141c:	787c      	ldrb	r4, [r7, #1]
 802141e:	9513      	str	r5, [sp, #76]	; 0x4c
 8021420:	9415      	str	r4, [sp, #84]	; 0x54
 8021422:	78bc      	ldrb	r4, [r7, #2]
 8021424:	9417      	str	r4, [sp, #92]	; 0x5c
 8021426:	78fc      	ldrb	r4, [r7, #3]
 8021428:	9414      	str	r4, [sp, #80]	; 0x50
 802142a:	793c      	ldrb	r4, [r7, #4]
 802142c:	9416      	str	r4, [sp, #88]	; 0x58
 802142e:	797c      	ldrb	r4, [r7, #5]
 8021430:	9418      	str	r4, [sp, #96]	; 0x60
 8021432:	b29b      	uxth	r3, r3
 8021434:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021436:	b292      	uxth	r2, r2
 8021438:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802143c:	fb03 f702 	mul.w	r7, r3, r2
 8021440:	011b      	lsls	r3, r3, #4
 8021442:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8021446:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802144a:	1bdb      	subs	r3, r3, r7
 802144c:	b292      	uxth	r2, r2
 802144e:	b29b      	uxth	r3, r3
 8021450:	ebac 0c02 	sub.w	ip, ip, r2
 8021454:	fb03 f909 	mul.w	r9, r3, r9
 8021458:	fa1f fc8c 	uxth.w	ip, ip
 802145c:	fb0c 9000 	mla	r0, ip, r0, r9
 8021460:	f896 9000 	ldrb.w	r9, [r6]
 8021464:	fb02 0004 	mla	r0, r2, r4, r0
 8021468:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802146a:	fb07 0004 	mla	r0, r7, r4, r0
 802146e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021470:	fb19 f904 	smulbb	r9, r9, r4
 8021474:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021478:	fb00 9005 	mla	r0, r0, r5, r9
 802147c:	b280      	uxth	r0, r0
 802147e:	f100 0901 	add.w	r9, r0, #1
 8021482:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021486:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021488:	4358      	muls	r0, r3
 802148a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802148e:	fb0c 0101 	mla	r1, ip, r1, r0
 8021492:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021494:	f886 9000 	strb.w	r9, [r6]
 8021498:	fb02 1100 	mla	r1, r2, r0, r1
 802149c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802149e:	fb07 1100 	mla	r1, r7, r0, r1
 80214a2:	7870      	ldrb	r0, [r6, #1]
 80214a4:	fb10 f004 	smulbb	r0, r0, r4
 80214a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80214ac:	fb01 0105 	mla	r1, r1, r5, r0
 80214b0:	b289      	uxth	r1, r1
 80214b2:	1c48      	adds	r0, r1, #1
 80214b4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80214b8:	1209      	asrs	r1, r1, #8
 80214ba:	7071      	strb	r1, [r6, #1]
 80214bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80214be:	434b      	muls	r3, r1
 80214c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80214c2:	fb0c 330e 	mla	r3, ip, lr, r3
 80214c6:	fb02 3201 	mla	r2, r2, r1, r3
 80214ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80214cc:	fb07 2703 	mla	r7, r7, r3, r2
 80214d0:	78b2      	ldrb	r2, [r6, #2]
 80214d2:	fb12 f204 	smulbb	r2, r2, r4
 80214d6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80214da:	fb07 2505 	mla	r5, r7, r5, r2
 80214de:	b2ad      	uxth	r5, r5
 80214e0:	1c6f      	adds	r7, r5, #1
 80214e2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80214e6:	122d      	asrs	r5, r5, #8
 80214e8:	70b5      	strb	r5, [r6, #2]
 80214ea:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80214ec:	3603      	adds	r6, #3
 80214ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80214f2:	4498      	add	r8, r3
 80214f4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80214f6:	449b      	add	fp, r3
 80214f8:	e75f      	b.n	80213ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80214fa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80214fc:	4498      	add	r8, r3
 80214fe:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021500:	449b      	add	fp, r3
 8021502:	9b07      	ldr	r3, [sp, #28]
 8021504:	3b01      	subs	r3, #1
 8021506:	9307      	str	r3, [sp, #28]
 8021508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802150a:	3303      	adds	r3, #3
 802150c:	9309      	str	r3, [sp, #36]	; 0x24
 802150e:	e709      	b.n	8021324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021510:	f47f af1b 	bne.w	802134a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8021514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021516:	2b00      	cmp	r3, #0
 8021518:	f340 80e3 	ble.w	80216e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802151c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021520:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021522:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021526:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802152a:	eef0 6a48 	vmov.f32	s13, s16
 802152e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021532:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021536:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802153a:	ee16 8a90 	vmov	r8, s13
 802153e:	eef0 6a68 	vmov.f32	s13, s17
 8021542:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021546:	ee16 ba90 	vmov	fp, s13
 802154a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802154e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021552:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021556:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802155a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802155e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021562:	ee18 2a10 	vmov	r2, s16
 8021566:	eeb0 8a47 	vmov.f32	s16, s14
 802156a:	fb92 f3f3 	sdiv	r3, r2, r3
 802156e:	ee18 2a90 	vmov	r2, s17
 8021572:	9335      	str	r3, [sp, #212]	; 0xd4
 8021574:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021576:	eef0 8a67 	vmov.f32	s17, s15
 802157a:	fb92 f3f3 	sdiv	r3, r2, r3
 802157e:	9336      	str	r3, [sp, #216]	; 0xd8
 8021580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021584:	3b01      	subs	r3, #1
 8021586:	930e      	str	r3, [sp, #56]	; 0x38
 8021588:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802158a:	bf08      	it	eq
 802158c:	4613      	moveq	r3, r2
 802158e:	9307      	str	r3, [sp, #28]
 8021590:	e6c1      	b.n	8021316 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021592:	1c45      	adds	r5, r0, #1
 8021594:	d1a9      	bne.n	80214ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021596:	9c08      	ldr	r4, [sp, #32]
 8021598:	42a0      	cmp	r0, r4
 802159a:	daa6      	bge.n	80214ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802159c:	1c4c      	adds	r4, r1, #1
 802159e:	dba4      	blt.n	80214ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80215a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80215a2:	428c      	cmp	r4, r1
 80215a4:	dda1      	ble.n	80214ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80215a6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80215a8:	9001      	str	r0, [sp, #4]
 80215aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80215ac:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80215b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215b2:	4631      	mov	r1, r6
 80215b4:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80215b8:	9300      	str	r3, [sp, #0]
 80215ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80215bc:	9b08      	ldr	r3, [sp, #32]
 80215be:	f7ff fd5b 	bl	8021078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80215c2:	e792      	b.n	80214ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80215c4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80215c8:	9c08      	ldr	r4, [sp, #32]
 80215ca:	ea4f 402b 	mov.w	r0, fp, asr #16
 80215ce:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80215d2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80215d6:	fb04 2000 	mla	r0, r4, r0, r2
 80215da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80215dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80215de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80215e2:	4402      	add	r2, r0
 80215e4:	5c25      	ldrb	r5, [r4, r0]
 80215e6:	7894      	ldrb	r4, [r2, #2]
 80215e8:	7850      	ldrb	r0, [r2, #1]
 80215ea:	9411      	str	r4, [sp, #68]	; 0x44
 80215ec:	7954      	ldrb	r4, [r2, #5]
 80215ee:	f892 a003 	ldrb.w	sl, [r2, #3]
 80215f2:	f892 9004 	ldrb.w	r9, [r2, #4]
 80215f6:	9412      	str	r4, [sp, #72]	; 0x48
 80215f8:	b171      	cbz	r1, 8021618 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80215fa:	3205      	adds	r2, #5
 80215fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80215fe:	1917      	adds	r7, r2, r4
 8021600:	5d12      	ldrb	r2, [r2, r4]
 8021602:	9219      	str	r2, [sp, #100]	; 0x64
 8021604:	787a      	ldrb	r2, [r7, #1]
 8021606:	921b      	str	r2, [sp, #108]	; 0x6c
 8021608:	78ba      	ldrb	r2, [r7, #2]
 802160a:	921d      	str	r2, [sp, #116]	; 0x74
 802160c:	78fa      	ldrb	r2, [r7, #3]
 802160e:	921a      	str	r2, [sp, #104]	; 0x68
 8021610:	793a      	ldrb	r2, [r7, #4]
 8021612:	921c      	str	r2, [sp, #112]	; 0x70
 8021614:	797a      	ldrb	r2, [r7, #5]
 8021616:	921e      	str	r2, [sp, #120]	; 0x78
 8021618:	b29b      	uxth	r3, r3
 802161a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802161c:	b289      	uxth	r1, r1
 802161e:	3603      	adds	r6, #3
 8021620:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021624:	fb03 f201 	mul.w	r2, r3, r1
 8021628:	011b      	lsls	r3, r3, #4
 802162a:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802162e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021632:	1a9b      	subs	r3, r3, r2
 8021634:	b289      	uxth	r1, r1
 8021636:	b29b      	uxth	r3, r3
 8021638:	1a7f      	subs	r7, r7, r1
 802163a:	fb03 fa0a 	mul.w	sl, r3, sl
 802163e:	b2bf      	uxth	r7, r7
 8021640:	fb03 f909 	mul.w	r9, r3, r9
 8021644:	fb07 a505 	mla	r5, r7, r5, sl
 8021648:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802164c:	fb07 9000 	mla	r0, r7, r0, r9
 8021650:	fb01 5504 	mla	r5, r1, r4, r5
 8021654:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021656:	fb02 5504 	mla	r5, r2, r4, r5
 802165a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802165c:	fb1a fa04 	smulbb	sl, sl, r4
 8021660:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021664:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021666:	fb05 a50e 	mla	r5, r5, lr, sl
 802166a:	fb01 0004 	mla	r0, r1, r4, r0
 802166e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021670:	b2ad      	uxth	r5, r5
 8021672:	fb02 0004 	mla	r0, r2, r4, r0
 8021676:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021678:	f105 0a01 	add.w	sl, r5, #1
 802167c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021680:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021684:	122d      	asrs	r5, r5, #8
 8021686:	f806 5c06 	strb.w	r5, [r6, #-6]
 802168a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802168e:	fb15 f504 	smulbb	r5, r5, r4
 8021692:	fb00 500e 	mla	r0, r0, lr, r5
 8021696:	b280      	uxth	r0, r0
 8021698:	1c45      	adds	r5, r0, #1
 802169a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802169e:	1200      	asrs	r0, r0, #8
 80216a0:	f806 0c05 	strb.w	r0, [r6, #-5]
 80216a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80216a6:	4343      	muls	r3, r0
 80216a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80216aa:	fb07 3300 	mla	r3, r7, r0, r3
 80216ae:	981d      	ldr	r0, [sp, #116]	; 0x74
 80216b0:	fb01 3100 	mla	r1, r1, r0, r3
 80216b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80216b6:	fb02 1203 	mla	r2, r2, r3, r1
 80216ba:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80216be:	fb11 f104 	smulbb	r1, r1, r4
 80216c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80216c6:	fb02 120e 	mla	r2, r2, lr, r1
 80216ca:	b292      	uxth	r2, r2
 80216cc:	1c53      	adds	r3, r2, #1
 80216ce:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80216d2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80216d4:	1212      	asrs	r2, r2, #8
 80216d6:	4498      	add	r8, r3
 80216d8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80216da:	f806 2c04 	strb.w	r2, [r6, #-4]
 80216de:	449b      	add	fp, r3
 80216e0:	e64d      	b.n	802137e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80216e2:	b021      	add	sp, #132	; 0x84
 80216e4:	ecbd 8b08 	vpop	{d8-d11}
 80216e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080216ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80216ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216f0:	b085      	sub	sp, #20
 80216f2:	784d      	ldrb	r5, [r1, #1]
 80216f4:	788e      	ldrb	r6, [r1, #2]
 80216f6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80216fa:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80216fe:	9403      	str	r4, [sp, #12]
 8021700:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021704:	780c      	ldrb	r4, [r1, #0]
 8021706:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802170a:	fb07 ce03 	mla	lr, r7, r3, ip
 802170e:	2f00      	cmp	r7, #0
 8021710:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021714:	eb02 0b0e 	add.w	fp, r2, lr
 8021718:	db56      	blt.n	80217c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802171a:	45b9      	cmp	r9, r7
 802171c:	dd54      	ble.n	80217c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802171e:	f1bc 0f00 	cmp.w	ip, #0
 8021722:	db4d      	blt.n	80217c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021724:	4563      	cmp	r3, ip
 8021726:	dd4b      	ble.n	80217c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021728:	f812 200e 	ldrb.w	r2, [r2, lr]
 802172c:	9200      	str	r2, [sp, #0]
 802172e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021732:	9201      	str	r2, [sp, #4]
 8021734:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021738:	9202      	str	r2, [sp, #8]
 802173a:	f11c 0201 	adds.w	r2, ip, #1
 802173e:	d44a      	bmi.n	80217d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021740:	4293      	cmp	r3, r2
 8021742:	dd48      	ble.n	80217d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021744:	2800      	cmp	r0, #0
 8021746:	d046      	beq.n	80217d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021748:	f89b e003 	ldrb.w	lr, [fp, #3]
 802174c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021750:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021754:	3701      	adds	r7, #1
 8021756:	d446      	bmi.n	80217e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021758:	45b9      	cmp	r9, r7
 802175a:	dd44      	ble.n	80217e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802175c:	9a03      	ldr	r2, [sp, #12]
 802175e:	2a00      	cmp	r2, #0
 8021760:	d045      	beq.n	80217ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021762:	f1bc 0f00 	cmp.w	ip, #0
 8021766:	db3a      	blt.n	80217de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021768:	4563      	cmp	r3, ip
 802176a:	dd38      	ble.n	80217de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802176c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021770:	f04f 0903 	mov.w	r9, #3
 8021774:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021778:	fb03 b209 	mla	r2, r3, r9, fp
 802177c:	fb03 b909 	mla	r9, r3, r9, fp
 8021780:	7852      	ldrb	r2, [r2, #1]
 8021782:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021786:	f11c 0c01 	adds.w	ip, ip, #1
 802178a:	d40d      	bmi.n	80217a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802178c:	4563      	cmp	r3, ip
 802178e:	dd0b      	ble.n	80217a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021790:	b160      	cbz	r0, 80217ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021792:	2603      	movs	r6, #3
 8021794:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021798:	fb03 b506 	mla	r5, r3, r6, fp
 802179c:	fb03 b306 	mla	r3, r3, r6, fp
 80217a0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80217a4:	792d      	ldrb	r5, [r5, #4]
 80217a6:	795e      	ldrb	r6, [r3, #5]
 80217a8:	280f      	cmp	r0, #15
 80217aa:	d802      	bhi.n	80217b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80217ac:	9b03      	ldr	r3, [sp, #12]
 80217ae:	2b0f      	cmp	r3, #15
 80217b0:	d922      	bls.n	80217f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80217b2:	4b2f      	ldr	r3, [pc, #188]	; (8021870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80217b4:	f240 11a5 	movw	r1, #421	; 0x1a5
 80217b8:	4a2e      	ldr	r2, [pc, #184]	; (8021874 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80217ba:	482f      	ldr	r0, [pc, #188]	; (8021878 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80217bc:	f003 ffa0 	bl	8025700 <__assert_func>
 80217c0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80217c4:	9400      	str	r4, [sp, #0]
 80217c6:	e7b8      	b.n	802173a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80217c8:	46b2      	mov	sl, r6
 80217ca:	46a8      	mov	r8, r5
 80217cc:	46a6      	mov	lr, r4
 80217ce:	9400      	str	r4, [sp, #0]
 80217d0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80217d4:	e7be      	b.n	8021754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80217d6:	46b2      	mov	sl, r6
 80217d8:	46a8      	mov	r8, r5
 80217da:	46a6      	mov	lr, r4
 80217dc:	e7ba      	b.n	8021754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80217de:	46b1      	mov	r9, r6
 80217e0:	462a      	mov	r2, r5
 80217e2:	4627      	mov	r7, r4
 80217e4:	e7cf      	b.n	8021786 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80217e6:	46b1      	mov	r9, r6
 80217e8:	462a      	mov	r2, r5
 80217ea:	4627      	mov	r7, r4
 80217ec:	e7dc      	b.n	80217a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80217ee:	280f      	cmp	r0, #15
 80217f0:	d8df      	bhi.n	80217b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80217f2:	46b1      	mov	r9, r6
 80217f4:	462a      	mov	r2, r5
 80217f6:	4627      	mov	r7, r4
 80217f8:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80217fc:	b280      	uxth	r0, r0
 80217fe:	fb00 f30b 	mul.w	r3, r0, fp
 8021802:	0100      	lsls	r0, r0, #4
 8021804:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021808:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802180c:	1ac0      	subs	r0, r0, r3
 802180e:	fa1f fb8b 	uxth.w	fp, fp
 8021812:	b280      	uxth	r0, r0
 8021814:	ebac 0c0b 	sub.w	ip, ip, fp
 8021818:	9003      	str	r0, [sp, #12]
 802181a:	fa1f fc8c 	uxth.w	ip, ip
 802181e:	fb00 fe0e 	mul.w	lr, r0, lr
 8021822:	9800      	ldr	r0, [sp, #0]
 8021824:	fb0c ee00 	mla	lr, ip, r0, lr
 8021828:	9803      	ldr	r0, [sp, #12]
 802182a:	fb00 f808 	mul.w	r8, r0, r8
 802182e:	9801      	ldr	r0, [sp, #4]
 8021830:	fb0b ee07 	mla	lr, fp, r7, lr
 8021834:	fb0c 8800 	mla	r8, ip, r0, r8
 8021838:	fb03 ee04 	mla	lr, r3, r4, lr
 802183c:	fb0b 8202 	mla	r2, fp, r2, r8
 8021840:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021844:	fb03 2505 	mla	r5, r3, r5, r2
 8021848:	9a03      	ldr	r2, [sp, #12]
 802184a:	f881 e000 	strb.w	lr, [r1]
 802184e:	fb02 f00a 	mul.w	r0, r2, sl
 8021852:	9a02      	ldr	r2, [sp, #8]
 8021854:	122d      	asrs	r5, r5, #8
 8021856:	fb0c 0c02 	mla	ip, ip, r2, r0
 802185a:	704d      	strb	r5, [r1, #1]
 802185c:	fb0b c909 	mla	r9, fp, r9, ip
 8021860:	fb03 9606 	mla	r6, r3, r6, r9
 8021864:	1236      	asrs	r6, r6, #8
 8021866:	708e      	strb	r6, [r1, #2]
 8021868:	b005      	add	sp, #20
 802186a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802186e:	bf00      	nop
 8021870:	0802b011 	.word	0x0802b011
 8021874:	0802b506 	.word	0x0802b506
 8021878:	0802b0da 	.word	0x0802b0da

0802187c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021880:	ed2d 8b0a 	vpush	{d8-d12}
 8021884:	b09d      	sub	sp, #116	; 0x74
 8021886:	eeb0 aa40 	vmov.f32	s20, s0
 802188a:	eef0 9a60 	vmov.f32	s19, s1
 802188e:	9306      	str	r3, [sp, #24]
 8021890:	eeb0 9a41 	vmov.f32	s18, s2
 8021894:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8021898:	eeb0 8a62 	vmov.f32	s16, s5
 802189c:	901b      	str	r0, [sp, #108]	; 0x6c
 802189e:	eef0 8a43 	vmov.f32	s17, s6
 80218a2:	9307      	str	r3, [sp, #28]
 80218a4:	eeb0 ca44 	vmov.f32	s24, s8
 80218a8:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80218ac:	eef0 ba64 	vmov.f32	s23, s9
 80218b0:	eeb0 ba45 	vmov.f32	s22, s10
 80218b4:	9309      	str	r3, [sp, #36]	; 0x24
 80218b6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80218ba:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80218be:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80218c0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80218c4:	6850      	ldr	r0, [r2, #4]
 80218c6:	6812      	ldr	r2, [r2, #0]
 80218c8:	fb00 1303 	mla	r3, r0, r3, r1
 80218cc:	9907      	ldr	r1, [sp, #28]
 80218ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218d2:	18d3      	adds	r3, r2, r3
 80218d4:	2203      	movs	r2, #3
 80218d6:	9308      	str	r3, [sp, #32]
 80218d8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	930a      	str	r3, [sp, #40]	; 0x28
 80218de:	f06f 0304 	mvn.w	r3, #4
 80218e2:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80218e6:	fb11 3302 	smlabb	r3, r1, r2, r3
 80218ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80218ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	dc03      	bgt.n	80218fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80218f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	f340 8193 	ble.w	8021c20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80218fa:	9b06      	ldr	r3, [sp, #24]
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	f340 80d0 	ble.w	8021aa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8021902:	1432      	asrs	r2, r6, #16
 8021904:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021908:	d42f      	bmi.n	802196a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802190a:	1c51      	adds	r1, r2, #1
 802190c:	9807      	ldr	r0, [sp, #28]
 802190e:	4281      	cmp	r1, r0
 8021910:	da2e      	bge.n	8021970 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021912:	2b00      	cmp	r3, #0
 8021914:	db2c      	blt.n	8021970 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021916:	1c59      	adds	r1, r3, #1
 8021918:	9809      	ldr	r0, [sp, #36]	; 0x24
 802191a:	4288      	cmp	r0, r1
 802191c:	dd28      	ble.n	8021970 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802191e:	9b06      	ldr	r3, [sp, #24]
 8021920:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021922:	3b01      	subs	r3, #1
 8021924:	fb02 6203 	mla	r2, r2, r3, r6
 8021928:	1412      	asrs	r2, r2, #16
 802192a:	d42c      	bmi.n	8021986 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802192c:	3201      	adds	r2, #1
 802192e:	9907      	ldr	r1, [sp, #28]
 8021930:	4291      	cmp	r1, r2
 8021932:	dd28      	ble.n	8021986 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021934:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021936:	fb02 5303 	mla	r3, r2, r3, r5
 802193a:	141b      	asrs	r3, r3, #16
 802193c:	d423      	bmi.n	8021986 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802193e:	3301      	adds	r3, #1
 8021940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021942:	429a      	cmp	r2, r3
 8021944:	dd1f      	ble.n	8021986 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021946:	9b08      	ldr	r3, [sp, #32]
 8021948:	f8dd e018 	ldr.w	lr, [sp, #24]
 802194c:	f103 0c03 	add.w	ip, r3, #3
 8021950:	f1be 0f00 	cmp.w	lr, #0
 8021954:	f300 80fa 	bgt.w	8021b4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021958:	9b06      	ldr	r3, [sp, #24]
 802195a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802195e:	9b08      	ldr	r3, [sp, #32]
 8021960:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021964:	4423      	add	r3, r4
 8021966:	9308      	str	r3, [sp, #32]
 8021968:	e09d      	b.n	8021aa6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802196a:	1c51      	adds	r1, r2, #1
 802196c:	f040 808e 	bne.w	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021970:	9907      	ldr	r1, [sp, #28]
 8021972:	428a      	cmp	r2, r1
 8021974:	f280 808a 	bge.w	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021978:	1c5f      	adds	r7, r3, #1
 802197a:	f2c0 8087 	blt.w	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802197e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021980:	4293      	cmp	r3, r2
 8021982:	f280 8083 	bge.w	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021986:	9f06      	ldr	r7, [sp, #24]
 8021988:	f8dd a020 	ldr.w	sl, [sp, #32]
 802198c:	2f00      	cmp	r7, #0
 802198e:	dde3      	ble.n	8021958 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021990:	1432      	asrs	r2, r6, #16
 8021992:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021996:	ea4f 4325 	mov.w	r3, r5, asr #16
 802199a:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802199e:	f100 80bf 	bmi.w	8021b20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80219a2:	1c50      	adds	r0, r2, #1
 80219a4:	9c07      	ldr	r4, [sp, #28]
 80219a6:	4284      	cmp	r4, r0
 80219a8:	f340 80bc 	ble.w	8021b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	f2c0 80b9 	blt.w	8021b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80219b2:	1c58      	adds	r0, r3, #1
 80219b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80219b6:	4284      	cmp	r4, r0
 80219b8:	f340 80b4 	ble.w	8021b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80219bc:	9807      	ldr	r0, [sp, #28]
 80219be:	fb00 2303 	mla	r3, r0, r3, r2
 80219c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80219c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80219c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219ca:	441a      	add	r2, r3
 80219cc:	f810 c003 	ldrb.w	ip, [r0, r3]
 80219d0:	7953      	ldrb	r3, [r2, #5]
 80219d2:	7850      	ldrb	r0, [r2, #1]
 80219d4:	f892 e002 	ldrb.w	lr, [r2, #2]
 80219d8:	f892 9003 	ldrb.w	r9, [r2, #3]
 80219dc:	f892 8004 	ldrb.w	r8, [r2, #4]
 80219e0:	930e      	str	r3, [sp, #56]	; 0x38
 80219e2:	f1bb 0f00 	cmp.w	fp, #0
 80219e6:	d00f      	beq.n	8021a08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80219e8:	3205      	adds	r2, #5
 80219ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219ee:	18d3      	adds	r3, r2, r3
 80219f0:	5d12      	ldrb	r2, [r2, r4]
 80219f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80219f4:	785a      	ldrb	r2, [r3, #1]
 80219f6:	9211      	str	r2, [sp, #68]	; 0x44
 80219f8:	789a      	ldrb	r2, [r3, #2]
 80219fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80219fc:	78da      	ldrb	r2, [r3, #3]
 80219fe:	9210      	str	r2, [sp, #64]	; 0x40
 8021a00:	791a      	ldrb	r2, [r3, #4]
 8021a02:	795b      	ldrb	r3, [r3, #5]
 8021a04:	9212      	str	r2, [sp, #72]	; 0x48
 8021a06:	9314      	str	r3, [sp, #80]	; 0x50
 8021a08:	b28b      	uxth	r3, r1
 8021a0a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021a0c:	fa1f f28b 	uxth.w	r2, fp
 8021a10:	fb03 fb02 	mul.w	fp, r3, r2
 8021a14:	011b      	lsls	r3, r3, #4
 8021a16:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021a1a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8021a1e:	eba3 030b 	sub.w	r3, r3, fp
 8021a22:	b292      	uxth	r2, r2
 8021a24:	b29b      	uxth	r3, r3
 8021a26:	1a89      	subs	r1, r1, r2
 8021a28:	fb03 f808 	mul.w	r8, r3, r8
 8021a2c:	b289      	uxth	r1, r1
 8021a2e:	fb03 f909 	mul.w	r9, r3, r9
 8021a32:	fb01 8800 	mla	r8, r1, r0, r8
 8021a36:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021a38:	fb01 990c 	mla	r9, r1, ip, r9
 8021a3c:	fb02 8800 	mla	r8, r2, r0, r8
 8021a40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021a42:	fb02 9904 	mla	r9, r2, r4, r9
 8021a46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021a48:	fb0b 8800 	mla	r8, fp, r0, r8
 8021a4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021a4e:	fb0b 9904 	mla	r9, fp, r4, r9
 8021a52:	4343      	muls	r3, r0
 8021a54:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021a58:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a5c:	fb01 330e 	mla	r3, r1, lr, r3
 8021a60:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021a62:	f88a 9000 	strb.w	r9, [sl]
 8021a66:	fb02 3201 	mla	r2, r2, r1, r3
 8021a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021a6c:	f88a 8001 	strb.w	r8, [sl, #1]
 8021a70:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021a74:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021a78:	f88a b002 	strb.w	fp, [sl, #2]
 8021a7c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a7e:	f10a 0a03 	add.w	sl, sl, #3
 8021a82:	3f01      	subs	r7, #1
 8021a84:	441e      	add	r6, r3
 8021a86:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a88:	441d      	add	r5, r3
 8021a8a:	e77f      	b.n	802198c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021a8c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a8e:	441e      	add	r6, r3
 8021a90:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a92:	441d      	add	r5, r3
 8021a94:	9b06      	ldr	r3, [sp, #24]
 8021a96:	3b01      	subs	r3, #1
 8021a98:	9306      	str	r3, [sp, #24]
 8021a9a:	9b08      	ldr	r3, [sp, #32]
 8021a9c:	3303      	adds	r3, #3
 8021a9e:	9308      	str	r3, [sp, #32]
 8021aa0:	e72b      	b.n	80218fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021aa2:	f47f af3c 	bne.w	802191e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	f340 80b9 	ble.w	8021c20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021aae:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021ab2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021ab4:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021ab8:	eef0 6a48 	vmov.f32	s13, s16
 8021abc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021ac0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021ac4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ac8:	ee16 6a90 	vmov	r6, s13
 8021acc:	eef0 6a68 	vmov.f32	s13, s17
 8021ad0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ad4:	ee16 5a90 	vmov	r5, s13
 8021ad8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021adc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021ae0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021ae4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021ae8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021aec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021af0:	ee18 2a10 	vmov	r2, s16
 8021af4:	eeb0 8a47 	vmov.f32	s16, s14
 8021af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021afc:	ee18 2a90 	vmov	r2, s17
 8021b00:	9333      	str	r3, [sp, #204]	; 0xcc
 8021b02:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021b04:	eef0 8a67 	vmov.f32	s17, s15
 8021b08:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b0c:	9334      	str	r3, [sp, #208]	; 0xd0
 8021b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021b12:	3b01      	subs	r3, #1
 8021b14:	930c      	str	r3, [sp, #48]	; 0x30
 8021b16:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021b18:	bf08      	it	eq
 8021b1a:	4613      	moveq	r3, r2
 8021b1c:	9306      	str	r3, [sp, #24]
 8021b1e:	e6e5      	b.n	80218ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021b20:	1c54      	adds	r4, r2, #1
 8021b22:	d1ab      	bne.n	8021a7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b24:	9807      	ldr	r0, [sp, #28]
 8021b26:	4282      	cmp	r2, r0
 8021b28:	daa8      	bge.n	8021a7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b2a:	1c58      	adds	r0, r3, #1
 8021b2c:	dba6      	blt.n	8021a7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021b30:	4298      	cmp	r0, r3
 8021b32:	dda3      	ble.n	8021a7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b34:	9000      	str	r0, [sp, #0]
 8021b36:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021b38:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021b3c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021b40:	9b07      	ldr	r3, [sp, #28]
 8021b42:	4651      	mov	r1, sl
 8021b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021b46:	f7ff fdd1 	bl	80216ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021b4a:	e797      	b.n	8021a7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021b4c:	1431      	asrs	r1, r6, #16
 8021b4e:	9c07      	ldr	r4, [sp, #28]
 8021b50:	1428      	asrs	r0, r5, #16
 8021b52:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021b56:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021b5a:	fb04 1000 	mla	r0, r4, r0, r1
 8021b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021b60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021b62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021b66:	4401      	add	r1, r0
 8021b68:	5c20      	ldrb	r0, [r4, r0]
 8021b6a:	f891 8002 	ldrb.w	r8, [r1, #2]
 8021b6e:	900e      	str	r0, [sp, #56]	; 0x38
 8021b70:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021b74:	7848      	ldrb	r0, [r1, #1]
 8021b76:	f891 9004 	ldrb.w	r9, [r1, #4]
 8021b7a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8021b7e:	b172      	cbz	r2, 8021b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021b80:	3105      	adds	r1, #5
 8021b82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b84:	190f      	adds	r7, r1, r4
 8021b86:	5d09      	ldrb	r1, [r1, r4]
 8021b88:	9115      	str	r1, [sp, #84]	; 0x54
 8021b8a:	7879      	ldrb	r1, [r7, #1]
 8021b8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8021b8e:	78b9      	ldrb	r1, [r7, #2]
 8021b90:	9119      	str	r1, [sp, #100]	; 0x64
 8021b92:	78f9      	ldrb	r1, [r7, #3]
 8021b94:	9116      	str	r1, [sp, #88]	; 0x58
 8021b96:	7939      	ldrb	r1, [r7, #4]
 8021b98:	9118      	str	r1, [sp, #96]	; 0x60
 8021b9a:	7979      	ldrb	r1, [r7, #5]
 8021b9c:	911a      	str	r1, [sp, #104]	; 0x68
 8021b9e:	b29b      	uxth	r3, r3
 8021ba0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021ba2:	b292      	uxth	r2, r2
 8021ba4:	f10c 0c03 	add.w	ip, ip, #3
 8021ba8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021bac:	fb03 f102 	mul.w	r1, r3, r2
 8021bb0:	011b      	lsls	r3, r3, #4
 8021bb2:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021bb6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021bba:	1a5b      	subs	r3, r3, r1
 8021bbc:	b292      	uxth	r2, r2
 8021bbe:	b29b      	uxth	r3, r3
 8021bc0:	1abf      	subs	r7, r7, r2
 8021bc2:	fb03 f909 	mul.w	r9, r3, r9
 8021bc6:	b2bf      	uxth	r7, r7
 8021bc8:	fb03 fa0a 	mul.w	sl, r3, sl
 8021bcc:	fb03 f30b 	mul.w	r3, r3, fp
 8021bd0:	fb07 9900 	mla	r9, r7, r0, r9
 8021bd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021bd6:	fb07 aa04 	mla	sl, r7, r4, sl
 8021bda:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021bdc:	fb02 9900 	mla	r9, r2, r0, r9
 8021be0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021be2:	fb07 3308 	mla	r3, r7, r8, r3
 8021be6:	fb01 9900 	mla	r9, r1, r0, r9
 8021bea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021bec:	fb02 aa04 	mla	sl, r2, r4, sl
 8021bf0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021bf2:	fb02 3200 	mla	r2, r2, r0, r3
 8021bf6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021bf8:	fb01 aa04 	mla	sl, r1, r4, sl
 8021bfc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021c00:	fb01 2103 	mla	r1, r1, r3, r2
 8021c04:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021c06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021c0a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021c0e:	1209      	asrs	r1, r1, #8
 8021c10:	441e      	add	r6, r3
 8021c12:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021c14:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021c18:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021c1c:	441d      	add	r5, r3
 8021c1e:	e697      	b.n	8021950 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021c20:	b01d      	add	sp, #116	; 0x74
 8021c22:	ecbd 8b0a 	vpop	{d8-d12}
 8021c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c30:	b085      	sub	sp, #20
 8021c32:	7888      	ldrb	r0, [r1, #2]
 8021c34:	4691      	mov	r9, r2
 8021c36:	9000      	str	r0, [sp, #0]
 8021c38:	7848      	ldrb	r0, [r1, #1]
 8021c3a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021c3e:	9001      	str	r0, [sp, #4]
 8021c40:	7808      	ldrb	r0, [r1, #0]
 8021c42:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021c46:	9002      	str	r0, [sp, #8]
 8021c48:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021c4c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021c50:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021c54:	fb04 c603 	mla	r6, r4, r3, ip
 8021c58:	2c00      	cmp	r4, #0
 8021c5a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021c5e:	9a00      	ldr	r2, [sp, #0]
 8021c60:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021c64:	9a01      	ldr	r2, [sp, #4]
 8021c66:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021c6a:	db3a      	blt.n	8021ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021c6c:	45a0      	cmp	r8, r4
 8021c6e:	dd38      	ble.n	8021ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021c70:	f1bc 0f00 	cmp.w	ip, #0
 8021c74:	db33      	blt.n	8021cde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021c76:	4563      	cmp	r3, ip
 8021c78:	dd31      	ble.n	8021cde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021c7a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021c7e:	f11c 0601 	adds.w	r6, ip, #1
 8021c82:	d431      	bmi.n	8021ce8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021c84:	42b3      	cmp	r3, r6
 8021c86:	dd2f      	ble.n	8021ce8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021c88:	b375      	cbz	r5, 8021ce8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021c8a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021c8e:	3401      	adds	r4, #1
 8021c90:	d42e      	bmi.n	8021cf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021c92:	45a0      	cmp	r8, r4
 8021c94:	dd2c      	ble.n	8021cf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021c96:	b35f      	cbz	r7, 8021cf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021c98:	f1bc 0f00 	cmp.w	ip, #0
 8021c9c:	db26      	blt.n	8021cec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021c9e:	4563      	cmp	r3, ip
 8021ca0:	dd24      	ble.n	8021cec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021ca2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021ca6:	f11c 0c01 	adds.w	ip, ip, #1
 8021caa:	d405      	bmi.n	8021cb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021cac:	4563      	cmp	r3, ip
 8021cae:	dd03      	ble.n	8021cb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021cb0:	b115      	cbz	r5, 8021cb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021cb2:	3301      	adds	r3, #1
 8021cb4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021cb8:	2d0f      	cmp	r5, #15
 8021cba:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021cbe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021cc2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021cc6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021cca:	d801      	bhi.n	8021cd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021ccc:	2f0f      	cmp	r7, #15
 8021cce:	d911      	bls.n	8021cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8021cd0:	4b80      	ldr	r3, [pc, #512]	; (8021ed4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8021cd2:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021cd6:	4a80      	ldr	r2, [pc, #512]	; (8021ed8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021cd8:	4880      	ldr	r0, [pc, #512]	; (8021edc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021cda:	f003 fd11 	bl	8025700 <__assert_func>
 8021cde:	4602      	mov	r2, r0
 8021ce0:	e7cd      	b.n	8021c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8021ce2:	4606      	mov	r6, r0
 8021ce4:	4602      	mov	r2, r0
 8021ce6:	e7d2      	b.n	8021c8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021ce8:	4606      	mov	r6, r0
 8021cea:	e7d0      	b.n	8021c8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021cec:	4604      	mov	r4, r0
 8021cee:	e7da      	b.n	8021ca6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8021cf0:	4604      	mov	r4, r0
 8021cf2:	e7e1      	b.n	8021cb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021cf4:	b2ab      	uxth	r3, r5
 8021cf6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021cfa:	b2bf      	uxth	r7, r7
 8021cfc:	fb03 fe07 	mul.w	lr, r3, r7
 8021d00:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021d04:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021d08:	eba3 0c0e 	sub.w	ip, r3, lr
 8021d0c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021d10:	b2bf      	uxth	r7, r7
 8021d12:	fa1f fc8c 	uxth.w	ip, ip
 8021d16:	eba5 0507 	sub.w	r5, r5, r7
 8021d1a:	fb0c f30a 	mul.w	r3, ip, sl
 8021d1e:	b2ad      	uxth	r5, r5
 8021d20:	fb05 330b 	mla	r3, r5, fp, r3
 8021d24:	fb07 3309 	mla	r3, r7, r9, r3
 8021d28:	fb0e 3308 	mla	r3, lr, r8, r3
 8021d2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d30:	9303      	str	r3, [sp, #12]
 8021d32:	d018      	beq.n	8021d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021d34:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021d38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d3c:	fb0b f303 	mul.w	r3, fp, r3
 8021d40:	fb0b fb02 	mul.w	fp, fp, r2
 8021d44:	0a1a      	lsrs	r2, r3, #8
 8021d46:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021d4a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d4e:	441a      	add	r2, r3
 8021d50:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021d54:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021d58:	0a12      	lsrs	r2, r2, #8
 8021d5a:	0a1b      	lsrs	r3, r3, #8
 8021d5c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d64:	431a      	orrs	r2, r3
 8021d66:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021d6a:	d019      	beq.n	8021da0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021d6c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021d70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d74:	fb0a fb0b 	mul.w	fp, sl, fp
 8021d78:	fb0a fa06 	mul.w	sl, sl, r6
 8021d7c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021d80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d84:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021d88:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d8c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021d90:	445e      	add	r6, fp
 8021d92:	0a1b      	lsrs	r3, r3, #8
 8021d94:	0a36      	lsrs	r6, r6, #8
 8021d96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d9a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d9e:	431e      	orrs	r6, r3
 8021da0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021da4:	d019      	beq.n	8021dda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021da6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021daa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021dae:	fb09 fa0a 	mul.w	sl, r9, sl
 8021db2:	fb09 f904 	mul.w	r9, r9, r4
 8021db6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021dba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021dbe:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021dc2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021dc6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021dca:	4454      	add	r4, sl
 8021dcc:	0a1b      	lsrs	r3, r3, #8
 8021dce:	0a24      	lsrs	r4, r4, #8
 8021dd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021dd4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021dd8:	431c      	orrs	r4, r3
 8021dda:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021dde:	d019      	beq.n	8021e14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8021de0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021de4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021de8:	fb08 f909 	mul.w	r9, r8, r9
 8021dec:	fb08 f800 	mul.w	r8, r8, r0
 8021df0:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021df4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021df8:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021dfc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021e00:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021e04:	4448      	add	r0, r9
 8021e06:	0a1b      	lsrs	r3, r3, #8
 8021e08:	0a00      	lsrs	r0, r0, #8
 8021e0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e0e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021e12:	4318      	orrs	r0, r3
 8021e14:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021e18:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021e1c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021e20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e24:	fb0c f808 	mul.w	r8, ip, r8
 8021e28:	fb0c f606 	mul.w	r6, ip, r6
 8021e2c:	fb05 8803 	mla	r8, r5, r3, r8
 8021e30:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021e34:	fb05 6202 	mla	r2, r5, r2, r6
 8021e38:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021e3c:	fb07 8803 	mla	r8, r7, r3, r8
 8021e40:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021e44:	fb07 2704 	mla	r7, r7, r4, r2
 8021e48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021e4c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021e50:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021e54:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021e58:	9803      	ldr	r0, [sp, #12]
 8021e5a:	b292      	uxth	r2, r2
 8021e5c:	9c02      	ldr	r4, [sp, #8]
 8021e5e:	0a1b      	lsrs	r3, r3, #8
 8021e60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e64:	4350      	muls	r0, r2
 8021e66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e6a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021e6e:	ea43 0e0e 	orr.w	lr, r3, lr
 8021e72:	1c43      	adds	r3, r0, #1
 8021e74:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021e78:	fa5f f08e 	uxtb.w	r0, lr
 8021e7c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021e80:	b2db      	uxtb	r3, r3
 8021e82:	fb14 f403 	smulbb	r4, r4, r3
 8021e86:	fb00 4002 	mla	r0, r0, r2, r4
 8021e8a:	b280      	uxth	r0, r0
 8021e8c:	1c44      	adds	r4, r0, #1
 8021e8e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021e92:	9c01      	ldr	r4, [sp, #4]
 8021e94:	fb14 f403 	smulbb	r4, r4, r3
 8021e98:	1200      	asrs	r0, r0, #8
 8021e9a:	7008      	strb	r0, [r1, #0]
 8021e9c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021ea0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021ea4:	fb00 4002 	mla	r0, r0, r2, r4
 8021ea8:	b280      	uxth	r0, r0
 8021eaa:	1c44      	adds	r4, r0, #1
 8021eac:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021eb0:	1200      	asrs	r0, r0, #8
 8021eb2:	7048      	strb	r0, [r1, #1]
 8021eb4:	9800      	ldr	r0, [sp, #0]
 8021eb6:	fb10 f303 	smulbb	r3, r0, r3
 8021eba:	fb0e 3202 	mla	r2, lr, r2, r3
 8021ebe:	b292      	uxth	r2, r2
 8021ec0:	f102 0e01 	add.w	lr, r2, #1
 8021ec4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021ec8:	1212      	asrs	r2, r2, #8
 8021eca:	708a      	strb	r2, [r1, #2]
 8021ecc:	b005      	add	sp, #20
 8021ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ed2:	bf00      	nop
 8021ed4:	0802b011 	.word	0x0802b011
 8021ed8:	0802b506 	.word	0x0802b506
 8021edc:	0802b0da 	.word	0x0802b0da

08021ee0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ee4:	ed2d 8b08 	vpush	{d8-d11}
 8021ee8:	b099      	sub	sp, #100	; 0x64
 8021eea:	eeb0 aa40 	vmov.f32	s20, s0
 8021eee:	eef0 9a60 	vmov.f32	s19, s1
 8021ef2:	9306      	str	r3, [sp, #24]
 8021ef4:	eeb0 9a41 	vmov.f32	s18, s2
 8021ef8:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021efc:	eeb0 8a62 	vmov.f32	s16, s5
 8021f00:	9216      	str	r2, [sp, #88]	; 0x58
 8021f02:	eef0 8a43 	vmov.f32	s17, s6
 8021f06:	9307      	str	r3, [sp, #28]
 8021f08:	eef0 ba44 	vmov.f32	s23, s8
 8021f0c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8021f10:	eeb0 ba64 	vmov.f32	s22, s9
 8021f14:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021f16:	eef0 aa45 	vmov.f32	s21, s10
 8021f1a:	9310      	str	r3, [sp, #64]	; 0x40
 8021f1c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8021f20:	9017      	str	r0, [sp, #92]	; 0x5c
 8021f22:	9112      	str	r1, [sp, #72]	; 0x48
 8021f24:	6850      	ldr	r0, [r2, #4]
 8021f26:	9315      	str	r3, [sp, #84]	; 0x54
 8021f28:	6812      	ldr	r2, [r2, #0]
 8021f2a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021f2c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021f30:	fb00 1303 	mla	r3, r0, r3, r1
 8021f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f38:	18d3      	adds	r3, r2, r3
 8021f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8021f3c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	9311      	str	r3, [sp, #68]	; 0x44
 8021f42:	9b07      	ldr	r3, [sp, #28]
 8021f44:	009b      	lsls	r3, r3, #2
 8021f46:	930e      	str	r3, [sp, #56]	; 0x38
 8021f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021f4a:	2b00      	cmp	r3, #0
 8021f4c:	dc03      	bgt.n	8021f56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021f4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	f340 833b 	ble.w	80225cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021f56:	9b06      	ldr	r3, [sp, #24]
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	f340 8197 	ble.w	802228c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8021f5e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021f60:	1423      	asrs	r3, r4, #16
 8021f62:	1412      	asrs	r2, r2, #16
 8021f64:	d432      	bmi.n	8021fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8021f66:	1c51      	adds	r1, r2, #1
 8021f68:	9807      	ldr	r0, [sp, #28]
 8021f6a:	4288      	cmp	r0, r1
 8021f6c:	dd31      	ble.n	8021fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	db2f      	blt.n	8021fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021f72:	1c59      	adds	r1, r3, #1
 8021f74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021f76:	4288      	cmp	r0, r1
 8021f78:	dd2b      	ble.n	8021fd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021f7a:	9b06      	ldr	r3, [sp, #24]
 8021f7c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021f7e:	3b01      	subs	r3, #1
 8021f80:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021f82:	fb02 1203 	mla	r2, r2, r3, r1
 8021f86:	1412      	asrs	r2, r2, #16
 8021f88:	d42e      	bmi.n	8021fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021f8a:	3201      	adds	r2, #1
 8021f8c:	9907      	ldr	r1, [sp, #28]
 8021f8e:	4291      	cmp	r1, r2
 8021f90:	dd2a      	ble.n	8021fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021f92:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021f94:	fb02 4303 	mla	r3, r2, r3, r4
 8021f98:	141b      	asrs	r3, r3, #16
 8021f9a:	d425      	bmi.n	8021fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021f9c:	3301      	adds	r3, #1
 8021f9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021fa0:	429a      	cmp	r2, r3
 8021fa2:	dd21      	ble.n	8021fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fa6:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8021faa:	f103 0e03 	add.w	lr, r3, #3
 8021fae:	9b06      	ldr	r3, [sp, #24]
 8021fb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8021fb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	f300 81d2 	bgt.w	802235e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8021fba:	9b06      	ldr	r3, [sp, #24]
 8021fbc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021fc6:	4423      	add	r3, r4
 8021fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8021fca:	e161      	b.n	8022290 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021fcc:	1c51      	adds	r1, r2, #1
 8021fce:	f040 8150 	bne.w	8022272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fd2:	9907      	ldr	r1, [sp, #28]
 8021fd4:	428a      	cmp	r2, r1
 8021fd6:	f280 814c 	bge.w	8022272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fda:	1c5a      	adds	r2, r3, #1
 8021fdc:	f2c0 8149 	blt.w	8022272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fe0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021fe2:	4293      	cmp	r3, r2
 8021fe4:	f280 8145 	bge.w	8022272 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021fe8:	9b06      	ldr	r3, [sp, #24]
 8021fea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021fec:	9314      	str	r3, [sp, #80]	; 0x50
 8021fee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021ff2:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	dddf      	ble.n	8021fba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8021ffa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021ffc:	1423      	asrs	r3, r4, #16
 8021ffe:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022002:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022006:	1412      	asrs	r2, r2, #16
 8022008:	f100 8190 	bmi.w	802232c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 802200c:	1c55      	adds	r5, r2, #1
 802200e:	9f07      	ldr	r7, [sp, #28]
 8022010:	42af      	cmp	r7, r5
 8022012:	f340 818d 	ble.w	8022330 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022016:	2b00      	cmp	r3, #0
 8022018:	f2c0 818a 	blt.w	8022330 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 802201c:	1c5d      	adds	r5, r3, #1
 802201e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022020:	42af      	cmp	r7, r5
 8022022:	f340 8185 	ble.w	8022330 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022026:	9d07      	ldr	r5, [sp, #28]
 8022028:	fb03 2305 	mla	r3, r3, r5, r2
 802202c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802202e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022036:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802203a:	2800      	cmp	r0, #0
 802203c:	f000 8167 	beq.w	802230e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022040:	686a      	ldr	r2, [r5, #4]
 8022042:	920b      	str	r2, [sp, #44]	; 0x2c
 8022044:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022048:	2900      	cmp	r1, #0
 802204a:	f000 8169 	beq.w	8022320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802204e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022050:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022052:	18aa      	adds	r2, r5, r2
 8022054:	59ed      	ldr	r5, [r5, r7]
 8022056:	6852      	ldr	r2, [r2, #4]
 8022058:	9508      	str	r5, [sp, #32]
 802205a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802205e:	0e15      	lsrs	r5, r2, #24
 8022060:	920c      	str	r2, [sp, #48]	; 0x30
 8022062:	b280      	uxth	r0, r0
 8022064:	b289      	uxth	r1, r1
 8022066:	fb00 fb01 	mul.w	fp, r0, r1
 802206a:	0100      	lsls	r0, r0, #4
 802206c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022070:	eba0 090b 	sub.w	r9, r0, fp
 8022074:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022078:	b289      	uxth	r1, r1
 802207a:	fa1f f989 	uxth.w	r9, r9
 802207e:	1a52      	subs	r2, r2, r1
 8022080:	fb09 f008 	mul.w	r0, r9, r8
 8022084:	b292      	uxth	r2, r2
 8022086:	fb02 000c 	mla	r0, r2, ip, r0
 802208a:	fb01 000a 	mla	r0, r1, sl, r0
 802208e:	fb0b 0005 	mla	r0, fp, r5, r0
 8022092:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022096:	2800      	cmp	r0, #0
 8022098:	f000 80e0 	beq.w	802225c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802209c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80220a0:	d01b      	beq.n	80220da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80220a2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80220a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80220aa:	fb0c fe0e 	mul.w	lr, ip, lr
 80220ae:	fb0c fc03 	mul.w	ip, ip, r3
 80220b2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80220b6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80220ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80220be:	4473      	add	r3, lr
 80220c0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80220c4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80220c8:	0a1b      	lsrs	r3, r3, #8
 80220ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80220d2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80220d6:	ea43 030e 	orr.w	r3, r3, lr
 80220da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80220de:	d01e      	beq.n	802211e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80220e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80220e2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80220e6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80220ea:	fb08 fc0c 	mul.w	ip, r8, ip
 80220ee:	fb08 f80e 	mul.w	r8, r8, lr
 80220f2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80220f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80220fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80220fe:	44e6      	add	lr, ip
 8022100:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022104:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022108:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802210c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022110:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022114:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022118:	ea4e 0708 	orr.w	r7, lr, r8
 802211c:	970b      	str	r7, [sp, #44]	; 0x2c
 802211e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022122:	d01e      	beq.n	8022162 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022124:	9f08      	ldr	r7, [sp, #32]
 8022126:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802212a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802212e:	fb0a f808 	mul.w	r8, sl, r8
 8022132:	fb0a fa0c 	mul.w	sl, sl, ip
 8022136:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802213a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802213e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022142:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022146:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802214a:	44c6      	add	lr, r8
 802214c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022150:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022154:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022158:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802215c:	ea4e 070a 	orr.w	r7, lr, sl
 8022160:	9708      	str	r7, [sp, #32]
 8022162:	2dff      	cmp	r5, #255	; 0xff
 8022164:	d01d      	beq.n	80221a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8022166:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022168:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802216c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022170:	fb05 f808 	mul.w	r8, r5, r8
 8022174:	fb05 f50c 	mul.w	r5, r5, ip
 8022178:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802217c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022180:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022184:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022188:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802218c:	44c6      	add	lr, r8
 802218e:	0a2d      	lsrs	r5, r5, #8
 8022190:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022194:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022198:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802219c:	ea4e 0505 	orr.w	r5, lr, r5
 80221a0:	950c      	str	r5, [sp, #48]	; 0x30
 80221a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80221a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80221a8:	9f08      	ldr	r7, [sp, #32]
 80221aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80221b2:	fb09 f505 	mul.w	r5, r9, r5
 80221b6:	fb02 550c 	mla	r5, r2, ip, r5
 80221ba:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80221be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80221c0:	fb01 550c 	mla	r5, r1, ip, r5
 80221c4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80221c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80221ca:	fb0b 550c 	mla	r5, fp, ip, r5
 80221ce:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80221d2:	fb09 f90c 	mul.w	r9, r9, ip
 80221d6:	0a2d      	lsrs	r5, r5, #8
 80221d8:	fb02 9303 	mla	r3, r2, r3, r9
 80221dc:	9a08      	ldr	r2, [sp, #32]
 80221de:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80221e2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80221e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80221e8:	fb01 330e 	mla	r3, r1, lr, r3
 80221ec:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80221f0:	fb0b 3b01 	mla	fp, fp, r1, r3
 80221f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80221f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80221f8:	4343      	muls	r3, r0
 80221fa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80221fe:	1c58      	adds	r0, r3, #1
 8022200:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022204:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022208:	ea45 050b 	orr.w	r5, r5, fp
 802220c:	7833      	ldrb	r3, [r6, #0]
 802220e:	b2ea      	uxtb	r2, r5
 8022210:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022214:	fb12 f201 	smulbb	r2, r2, r1
 8022218:	b2c0      	uxtb	r0, r0
 802221a:	fb03 2300 	mla	r3, r3, r0, r2
 802221e:	b29b      	uxth	r3, r3
 8022220:	1c5a      	adds	r2, r3, #1
 8022222:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022226:	7872      	ldrb	r2, [r6, #1]
 8022228:	fb12 f200 	smulbb	r2, r2, r0
 802222c:	121b      	asrs	r3, r3, #8
 802222e:	7033      	strb	r3, [r6, #0]
 8022230:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022234:	0c2d      	lsrs	r5, r5, #16
 8022236:	fb03 2301 	mla	r3, r3, r1, r2
 802223a:	b29b      	uxth	r3, r3
 802223c:	1c5a      	adds	r2, r3, #1
 802223e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022242:	121b      	asrs	r3, r3, #8
 8022244:	7073      	strb	r3, [r6, #1]
 8022246:	78b3      	ldrb	r3, [r6, #2]
 8022248:	fb13 f000 	smulbb	r0, r3, r0
 802224c:	fb05 0501 	mla	r5, r5, r1, r0
 8022250:	b2ad      	uxth	r5, r5
 8022252:	1c6b      	adds	r3, r5, #1
 8022254:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022258:	122d      	asrs	r5, r5, #8
 802225a:	70b5      	strb	r5, [r6, #2]
 802225c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802225e:	3603      	adds	r6, #3
 8022260:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022262:	4413      	add	r3, r2
 8022264:	932b      	str	r3, [sp, #172]	; 0xac
 8022266:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022268:	441c      	add	r4, r3
 802226a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802226c:	3b01      	subs	r3, #1
 802226e:	9314      	str	r3, [sp, #80]	; 0x50
 8022270:	e6c0      	b.n	8021ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8022272:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022274:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022276:	4413      	add	r3, r2
 8022278:	932b      	str	r3, [sp, #172]	; 0xac
 802227a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802227c:	441c      	add	r4, r3
 802227e:	9b06      	ldr	r3, [sp, #24]
 8022280:	3b01      	subs	r3, #1
 8022282:	9306      	str	r3, [sp, #24]
 8022284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022286:	3303      	adds	r3, #3
 8022288:	930a      	str	r3, [sp, #40]	; 0x28
 802228a:	e664      	b.n	8021f56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802228c:	f47f ae75 	bne.w	8021f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022292:	2b00      	cmp	r3, #0
 8022294:	f340 819a 	ble.w	80225cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802229c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802229e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80222a2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80222a6:	eef0 6a48 	vmov.f32	s13, s16
 80222aa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80222ae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80222b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222b6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80222ba:	eef0 6a68 	vmov.f32	s13, s17
 80222be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222c2:	ee16 4a90 	vmov	r4, s13
 80222c6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80222ca:	ee69 7a27 	vmul.f32	s15, s18, s15
 80222ce:	ee37 8a48 	vsub.f32	s16, s14, s16
 80222d2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80222d6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80222da:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80222de:	ee18 2a10 	vmov	r2, s16
 80222e2:	eeb0 8a47 	vmov.f32	s16, s14
 80222e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80222ea:	ee18 2a90 	vmov	r2, s17
 80222ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80222f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80222f2:	eef0 8a67 	vmov.f32	s17, s15
 80222f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80222fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80222fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80222fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022300:	3b01      	subs	r3, #1
 8022302:	9312      	str	r3, [sp, #72]	; 0x48
 8022304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022306:	bf08      	it	eq
 8022308:	4613      	moveq	r3, r2
 802230a:	9306      	str	r3, [sp, #24]
 802230c:	e61c      	b.n	8021f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802230e:	b151      	cbz	r1, 8022326 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022312:	58aa      	ldr	r2, [r5, r2]
 8022314:	25ff      	movs	r5, #255	; 0xff
 8022316:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802231a:	9208      	str	r2, [sp, #32]
 802231c:	46a8      	mov	r8, r5
 802231e:	e6a0      	b.n	8022062 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022320:	25ff      	movs	r5, #255	; 0xff
 8022322:	46aa      	mov	sl, r5
 8022324:	e69d      	b.n	8022062 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022326:	25ff      	movs	r5, #255	; 0xff
 8022328:	46aa      	mov	sl, r5
 802232a:	e7f7      	b.n	802231c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802232c:	1c57      	adds	r7, r2, #1
 802232e:	d195      	bne.n	802225c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022330:	9d07      	ldr	r5, [sp, #28]
 8022332:	4295      	cmp	r5, r2
 8022334:	dd92      	ble.n	802225c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022336:	1c5d      	adds	r5, r3, #1
 8022338:	db90      	blt.n	802225c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802233a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802233c:	429d      	cmp	r5, r3
 802233e:	dd8d      	ble.n	802225c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022340:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022342:	9201      	str	r2, [sp, #4]
 8022344:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022346:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802234a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802234c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802234e:	9300      	str	r3, [sp, #0]
 8022350:	9b07      	ldr	r3, [sp, #28]
 8022352:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8022356:	4631      	mov	r1, r6
 8022358:	f7ff fc68 	bl	8021c2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802235c:	e77e      	b.n	802225c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802235e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022360:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022364:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022366:	9d07      	ldr	r5, [sp, #28]
 8022368:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802236c:	1412      	asrs	r2, r2, #16
 802236e:	1423      	asrs	r3, r4, #16
 8022370:	fb05 2303 	mla	r3, r5, r3, r2
 8022374:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022376:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802237e:	0e1e      	lsrs	r6, r3, #24
 8022380:	2900      	cmp	r1, #0
 8022382:	f000 8114 	beq.w	80225ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022386:	686a      	ldr	r2, [r5, #4]
 8022388:	920d      	str	r2, [sp, #52]	; 0x34
 802238a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802238e:	2800      	cmp	r0, #0
 8022390:	f000 8116 	beq.w	80225c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8022394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022396:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022398:	18aa      	adds	r2, r5, r2
 802239a:	59ed      	ldr	r5, [r5, r7]
 802239c:	6852      	ldr	r2, [r2, #4]
 802239e:	9509      	str	r5, [sp, #36]	; 0x24
 80223a0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80223a4:	0e15      	lsrs	r5, r2, #24
 80223a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80223a8:	b289      	uxth	r1, r1
 80223aa:	b280      	uxth	r0, r0
 80223ac:	fb01 fa00 	mul.w	sl, r1, r0
 80223b0:	0109      	lsls	r1, r1, #4
 80223b2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80223b6:	eba1 080a 	sub.w	r8, r1, sl
 80223ba:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80223be:	b280      	uxth	r0, r0
 80223c0:	fa1f f888 	uxth.w	r8, r8
 80223c4:	1a12      	subs	r2, r2, r0
 80223c6:	fb08 f10c 	mul.w	r1, r8, ip
 80223ca:	b292      	uxth	r2, r2
 80223cc:	fb02 1106 	mla	r1, r2, r6, r1
 80223d0:	fb00 1109 	mla	r1, r0, r9, r1
 80223d4:	fb0a 1105 	mla	r1, sl, r5, r1
 80223d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80223dc:	2900      	cmp	r1, #0
 80223de:	f000 80da 	beq.w	8022596 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80223e2:	2eff      	cmp	r6, #255	; 0xff
 80223e4:	d016      	beq.n	8022414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80223e6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80223ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223ee:	4377      	muls	r7, r6
 80223f0:	435e      	muls	r6, r3
 80223f2:	0a3b      	lsrs	r3, r7, #8
 80223f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80223f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80223fc:	443b      	add	r3, r7
 80223fe:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022402:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022406:	0a1b      	lsrs	r3, r3, #8
 8022408:	0a3f      	lsrs	r7, r7, #8
 802240a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802240e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022412:	433b      	orrs	r3, r7
 8022414:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022418:	d01d      	beq.n	8022456 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802241a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802241c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802241e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022422:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022426:	fb0c f606 	mul.w	r6, ip, r6
 802242a:	fb0c fc07 	mul.w	ip, ip, r7
 802242e:	0a37      	lsrs	r7, r6, #8
 8022430:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022434:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022438:	4437      	add	r7, r6
 802243a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802243e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022442:	0a3f      	lsrs	r7, r7, #8
 8022444:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022448:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802244c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022450:	ea47 060c 	orr.w	r6, r7, ip
 8022454:	960d      	str	r6, [sp, #52]	; 0x34
 8022456:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802245a:	d01d      	beq.n	8022498 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802245c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802245e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022462:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022466:	fb09 fc0c 	mul.w	ip, r9, ip
 802246a:	fb09 f906 	mul.w	r9, r9, r6
 802246e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022472:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022476:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802247a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802247e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022482:	4467      	add	r7, ip
 8022484:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022488:	0a3f      	lsrs	r7, r7, #8
 802248a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802248e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022492:	ea47 0609 	orr.w	r6, r7, r9
 8022496:	9609      	str	r6, [sp, #36]	; 0x24
 8022498:	2dff      	cmp	r5, #255	; 0xff
 802249a:	d01a      	beq.n	80224d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 802249c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802249e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80224a2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80224a6:	fb05 fc0c 	mul.w	ip, r5, ip
 80224aa:	4375      	muls	r5, r6
 80224ac:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80224b0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80224b4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80224b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80224bc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80224c0:	4467      	add	r7, ip
 80224c2:	0a2d      	lsrs	r5, r5, #8
 80224c4:	0a3f      	lsrs	r7, r7, #8
 80224c6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80224ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80224ce:	433d      	orrs	r5, r7
 80224d0:	950f      	str	r5, [sp, #60]	; 0x3c
 80224d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80224d4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80224d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80224dc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80224e0:	fb08 f505 	mul.w	r5, r8, r5
 80224e4:	fb02 5506 	mla	r5, r2, r6, r5
 80224e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80224ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224ee:	fb00 5506 	mla	r5, r0, r6, r5
 80224f2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80224f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80224f8:	fb0a 5506 	mla	r5, sl, r6, r5
 80224fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80224fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022502:	0a2d      	lsrs	r5, r5, #8
 8022504:	fb08 f806 	mul.w	r8, r8, r6
 8022508:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802250c:	fb02 8303 	mla	r3, r2, r3, r8
 8022510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022512:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022518:	fb00 3307 	mla	r3, r0, r7, r3
 802251c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022520:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8022524:	fb01 f30b 	mul.w	r3, r1, fp
 8022528:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802252c:	1c59      	adds	r1, r3, #1
 802252e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022532:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022536:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802253a:	ea45 050c 	orr.w	r5, r5, ip
 802253e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022542:	b2ea      	uxtb	r2, r5
 8022544:	b2c9      	uxtb	r1, r1
 8022546:	fb12 f20b 	smulbb	r2, r2, fp
 802254a:	fb03 2301 	mla	r3, r3, r1, r2
 802254e:	b29b      	uxth	r3, r3
 8022550:	1c5a      	adds	r2, r3, #1
 8022552:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022556:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802255a:	fb12 f201 	smulbb	r2, r2, r1
 802255e:	121b      	asrs	r3, r3, #8
 8022560:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022564:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022568:	0c2d      	lsrs	r5, r5, #16
 802256a:	fb03 230b 	mla	r3, r3, fp, r2
 802256e:	b29b      	uxth	r3, r3
 8022570:	1c5a      	adds	r2, r3, #1
 8022572:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022576:	121b      	asrs	r3, r3, #8
 8022578:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802257c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022580:	fb13 f101 	smulbb	r1, r3, r1
 8022584:	fb05 150b 	mla	r5, r5, fp, r1
 8022588:	b2ad      	uxth	r5, r5
 802258a:	1c69      	adds	r1, r5, #1
 802258c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022590:	122d      	asrs	r5, r5, #8
 8022592:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022596:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022598:	f10e 0e03 	add.w	lr, lr, #3
 802259c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802259e:	4413      	add	r3, r2
 80225a0:	932b      	str	r3, [sp, #172]	; 0xac
 80225a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80225a4:	441c      	add	r4, r3
 80225a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80225a8:	3b01      	subs	r3, #1
 80225aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80225ac:	e501      	b.n	8021fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80225ae:	b150      	cbz	r0, 80225c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80225b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80225b2:	58aa      	ldr	r2, [r5, r2]
 80225b4:	25ff      	movs	r5, #255	; 0xff
 80225b6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80225ba:	9209      	str	r2, [sp, #36]	; 0x24
 80225bc:	46ac      	mov	ip, r5
 80225be:	e6f3      	b.n	80223a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80225c0:	25ff      	movs	r5, #255	; 0xff
 80225c2:	46a9      	mov	r9, r5
 80225c4:	e6f0      	b.n	80223a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80225c6:	25ff      	movs	r5, #255	; 0xff
 80225c8:	46a9      	mov	r9, r5
 80225ca:	e7f7      	b.n	80225bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80225cc:	b019      	add	sp, #100	; 0x64
 80225ce:	ecbd 8b08 	vpop	{d8-d11}
 80225d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080225d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80225d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225dc:	b085      	sub	sp, #20
 80225de:	7888      	ldrb	r0, [r1, #2]
 80225e0:	4691      	mov	r9, r2
 80225e2:	9000      	str	r0, [sp, #0]
 80225e4:	7848      	ldrb	r0, [r1, #1]
 80225e6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80225ea:	9001      	str	r0, [sp, #4]
 80225ec:	7808      	ldrb	r0, [r1, #0]
 80225ee:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80225f2:	9002      	str	r0, [sp, #8]
 80225f4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80225f8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80225fc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022600:	fb04 c603 	mla	r6, r4, r3, ip
 8022604:	2c00      	cmp	r4, #0
 8022606:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802260a:	9a00      	ldr	r2, [sp, #0]
 802260c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022610:	9a01      	ldr	r2, [sp, #4]
 8022612:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022616:	db3a      	blt.n	802268e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8022618:	45a0      	cmp	r8, r4
 802261a:	dd38      	ble.n	802268e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802261c:	f1bc 0f00 	cmp.w	ip, #0
 8022620:	db33      	blt.n	802268a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022622:	4563      	cmp	r3, ip
 8022624:	dd31      	ble.n	802268a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022626:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802262a:	f11c 0601 	adds.w	r6, ip, #1
 802262e:	d431      	bmi.n	8022694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022630:	42b3      	cmp	r3, r6
 8022632:	dd2f      	ble.n	8022694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022634:	b375      	cbz	r5, 8022694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022636:	f8de 6004 	ldr.w	r6, [lr, #4]
 802263a:	3401      	adds	r4, #1
 802263c:	d42e      	bmi.n	802269c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802263e:	45a0      	cmp	r8, r4
 8022640:	dd2c      	ble.n	802269c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022642:	b35f      	cbz	r7, 802269c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022644:	f1bc 0f00 	cmp.w	ip, #0
 8022648:	db26      	blt.n	8022698 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802264a:	4563      	cmp	r3, ip
 802264c:	dd24      	ble.n	8022698 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802264e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022652:	f11c 0c01 	adds.w	ip, ip, #1
 8022656:	d405      	bmi.n	8022664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022658:	4563      	cmp	r3, ip
 802265a:	dd03      	ble.n	8022664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802265c:	b115      	cbz	r5, 8022664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802265e:	3301      	adds	r3, #1
 8022660:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022664:	2d0f      	cmp	r5, #15
 8022666:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802266a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802266e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022672:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022676:	d801      	bhi.n	802267c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8022678:	2f0f      	cmp	r7, #15
 802267a:	d911      	bls.n	80226a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802267c:	4b77      	ldr	r3, [pc, #476]	; (802285c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802267e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022682:	4a77      	ldr	r2, [pc, #476]	; (8022860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8022684:	4877      	ldr	r0, [pc, #476]	; (8022864 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8022686:	f003 f83b 	bl	8025700 <__assert_func>
 802268a:	4602      	mov	r2, r0
 802268c:	e7cd      	b.n	802262a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802268e:	4606      	mov	r6, r0
 8022690:	4602      	mov	r2, r0
 8022692:	e7d2      	b.n	802263a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022694:	4606      	mov	r6, r0
 8022696:	e7d0      	b.n	802263a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022698:	4604      	mov	r4, r0
 802269a:	e7da      	b.n	8022652 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 802269c:	4604      	mov	r4, r0
 802269e:	e7e1      	b.n	8022664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80226a0:	b2ab      	uxth	r3, r5
 80226a2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80226a6:	b2bf      	uxth	r7, r7
 80226a8:	fb03 fe07 	mul.w	lr, r3, r7
 80226ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80226b0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80226b4:	eba3 0c0e 	sub.w	ip, r3, lr
 80226b8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80226bc:	b2bf      	uxth	r7, r7
 80226be:	fa1f fc8c 	uxth.w	ip, ip
 80226c2:	eba5 0507 	sub.w	r5, r5, r7
 80226c6:	fb0c f30a 	mul.w	r3, ip, sl
 80226ca:	b2ad      	uxth	r5, r5
 80226cc:	fb05 330b 	mla	r3, r5, fp, r3
 80226d0:	fb07 3309 	mla	r3, r7, r9, r3
 80226d4:	fb0e 3308 	mla	r3, lr, r8, r3
 80226d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80226dc:	9303      	str	r3, [sp, #12]
 80226de:	d018      	beq.n	8022712 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80226e0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80226e4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80226e8:	fb0b f303 	mul.w	r3, fp, r3
 80226ec:	fb0b fb02 	mul.w	fp, fp, r2
 80226f0:	0a1a      	lsrs	r2, r3, #8
 80226f2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80226f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80226fa:	441a      	add	r2, r3
 80226fc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022700:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022704:	0a12      	lsrs	r2, r2, #8
 8022706:	0a1b      	lsrs	r3, r3, #8
 8022708:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802270c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022710:	431a      	orrs	r2, r3
 8022712:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022716:	d019      	beq.n	802274c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8022718:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802271c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022720:	fb0a fb0b 	mul.w	fp, sl, fp
 8022724:	fb0a fa06 	mul.w	sl, sl, r6
 8022728:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802272c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022730:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022734:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022738:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802273c:	445e      	add	r6, fp
 802273e:	0a1b      	lsrs	r3, r3, #8
 8022740:	0a36      	lsrs	r6, r6, #8
 8022742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022746:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802274a:	431e      	orrs	r6, r3
 802274c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022750:	d019      	beq.n	8022786 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8022752:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022756:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802275a:	fb09 fa0a 	mul.w	sl, r9, sl
 802275e:	fb09 f904 	mul.w	r9, r9, r4
 8022762:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022766:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802276a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802276e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022772:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022776:	4454      	add	r4, sl
 8022778:	0a1b      	lsrs	r3, r3, #8
 802277a:	0a24      	lsrs	r4, r4, #8
 802277c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022780:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022784:	431c      	orrs	r4, r3
 8022786:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802278a:	d019      	beq.n	80227c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 802278c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022790:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022794:	fb08 f909 	mul.w	r9, r8, r9
 8022798:	fb08 f800 	mul.w	r8, r8, r0
 802279c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80227a0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80227a4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80227a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80227ac:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80227b0:	4448      	add	r0, r9
 80227b2:	0a1b      	lsrs	r3, r3, #8
 80227b4:	0a00      	lsrs	r0, r0, #8
 80227b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227ba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80227be:	4318      	orrs	r0, r3
 80227c0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80227c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80227c8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80227cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80227d0:	fb0c f808 	mul.w	r8, ip, r8
 80227d4:	fb0c f606 	mul.w	r6, ip, r6
 80227d8:	fb05 8803 	mla	r8, r5, r3, r8
 80227dc:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80227e0:	fb05 6202 	mla	r2, r5, r2, r6
 80227e4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80227e8:	fb07 8803 	mla	r8, r7, r3, r8
 80227ec:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80227f0:	fb07 2704 	mla	r7, r7, r4, r2
 80227f4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80227f8:	fb0e 8303 	mla	r3, lr, r3, r8
 80227fc:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022800:	9802      	ldr	r0, [sp, #8]
 8022802:	0a1b      	lsrs	r3, r3, #8
 8022804:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022808:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802280c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022810:	ea43 0e0e 	orr.w	lr, r3, lr
 8022814:	9b03      	ldr	r3, [sp, #12]
 8022816:	43db      	mvns	r3, r3
 8022818:	b2db      	uxtb	r3, r3
 802281a:	4358      	muls	r0, r3
 802281c:	1c42      	adds	r2, r0, #1
 802281e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022822:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022826:	700a      	strb	r2, [r1, #0]
 8022828:	9a01      	ldr	r2, [sp, #4]
 802282a:	435a      	muls	r2, r3
 802282c:	1c50      	adds	r0, r2, #1
 802282e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022832:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022836:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802283a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802283e:	704a      	strb	r2, [r1, #1]
 8022840:	9a00      	ldr	r2, [sp, #0]
 8022842:	435a      	muls	r2, r3
 8022844:	4613      	mov	r3, r2
 8022846:	3201      	adds	r2, #1
 8022848:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802284c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022850:	f881 e002 	strb.w	lr, [r1, #2]
 8022854:	b005      	add	sp, #20
 8022856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802285a:	bf00      	nop
 802285c:	0802b011 	.word	0x0802b011
 8022860:	0802b506 	.word	0x0802b506
 8022864:	0802b0da 	.word	0x0802b0da

08022868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802286c:	ed2d 8b08 	vpush	{d8-d11}
 8022870:	b097      	sub	sp, #92	; 0x5c
 8022872:	eeb0 aa40 	vmov.f32	s20, s0
 8022876:	eef0 9a60 	vmov.f32	s19, s1
 802287a:	9306      	str	r3, [sp, #24]
 802287c:	eeb0 9a41 	vmov.f32	s18, s2
 8022880:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022884:	eeb0 8a62 	vmov.f32	s16, s5
 8022888:	9214      	str	r2, [sp, #80]	; 0x50
 802288a:	eef0 8a43 	vmov.f32	s17, s6
 802288e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022890:	eef0 ba44 	vmov.f32	s23, s8
 8022894:	9307      	str	r3, [sp, #28]
 8022896:	eeb0 ba64 	vmov.f32	s22, s9
 802289a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802289e:	eef0 aa45 	vmov.f32	s21, s10
 80228a2:	9015      	str	r0, [sp, #84]	; 0x54
 80228a4:	9112      	str	r1, [sp, #72]	; 0x48
 80228a6:	6850      	ldr	r0, [r2, #4]
 80228a8:	9310      	str	r3, [sp, #64]	; 0x40
 80228aa:	6812      	ldr	r2, [r2, #0]
 80228ac:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80228ae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80228b2:	fb00 1303 	mla	r3, r0, r3, r1
 80228b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80228ba:	18d3      	adds	r3, r2, r3
 80228bc:	930a      	str	r3, [sp, #40]	; 0x28
 80228be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80228c0:	681b      	ldr	r3, [r3, #0]
 80228c2:	9311      	str	r3, [sp, #68]	; 0x44
 80228c4:	9b07      	ldr	r3, [sp, #28]
 80228c6:	009b      	lsls	r3, r3, #2
 80228c8:	930e      	str	r3, [sp, #56]	; 0x38
 80228ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	dc03      	bgt.n	80228d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80228d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	f340 832e 	ble.w	8022f34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80228d8:	9b06      	ldr	r3, [sp, #24]
 80228da:	2b00      	cmp	r3, #0
 80228dc:	f340 8186 	ble.w	8022bec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80228e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80228e2:	1423      	asrs	r3, r4, #16
 80228e4:	1412      	asrs	r2, r2, #16
 80228e6:	d42f      	bmi.n	8022948 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80228e8:	1c51      	adds	r1, r2, #1
 80228ea:	9807      	ldr	r0, [sp, #28]
 80228ec:	4288      	cmp	r0, r1
 80228ee:	dd2e      	ble.n	802294e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	db2c      	blt.n	802294e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80228f4:	1c59      	adds	r1, r3, #1
 80228f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80228f8:	4288      	cmp	r0, r1
 80228fa:	dd28      	ble.n	802294e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80228fc:	9b06      	ldr	r3, [sp, #24]
 80228fe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022900:	3b01      	subs	r3, #1
 8022902:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022904:	fb02 1203 	mla	r2, r2, r3, r1
 8022908:	1412      	asrs	r2, r2, #16
 802290a:	d42b      	bmi.n	8022964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802290c:	3201      	adds	r2, #1
 802290e:	9907      	ldr	r1, [sp, #28]
 8022910:	4291      	cmp	r1, r2
 8022912:	dd27      	ble.n	8022964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022914:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022916:	fb02 4303 	mla	r3, r2, r3, r4
 802291a:	141b      	asrs	r3, r3, #16
 802291c:	d422      	bmi.n	8022964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802291e:	3301      	adds	r3, #1
 8022920:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022922:	429a      	cmp	r2, r3
 8022924:	dd1e      	ble.n	8022964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022928:	f8dd b018 	ldr.w	fp, [sp, #24]
 802292c:	1cdd      	adds	r5, r3, #3
 802292e:	f1bb 0f00 	cmp.w	fp, #0
 8022932:	f300 81c4 	bgt.w	8022cbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022936:	9b06      	ldr	r3, [sp, #24]
 8022938:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802293c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802293e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022942:	4423      	add	r3, r4
 8022944:	930a      	str	r3, [sp, #40]	; 0x28
 8022946:	e153      	b.n	8022bf0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022948:	1c51      	adds	r1, r2, #1
 802294a:	f040 8142 	bne.w	8022bd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802294e:	9907      	ldr	r1, [sp, #28]
 8022950:	428a      	cmp	r2, r1
 8022952:	f280 813e 	bge.w	8022bd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022956:	1c5a      	adds	r2, r3, #1
 8022958:	f2c0 813b 	blt.w	8022bd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802295c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802295e:	4293      	cmp	r3, r2
 8022960:	f280 8137 	bge.w	8022bd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022964:	9b06      	ldr	r3, [sp, #24]
 8022966:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022968:	9313      	str	r3, [sp, #76]	; 0x4c
 802296a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802296c:	2b00      	cmp	r3, #0
 802296e:	dde2      	ble.n	8022936 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022970:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022972:	1423      	asrs	r3, r4, #16
 8022974:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022976:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802297a:	1409      	asrs	r1, r1, #16
 802297c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022980:	f100 8187 	bmi.w	8022c92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022984:	1c4e      	adds	r6, r1, #1
 8022986:	9f07      	ldr	r7, [sp, #28]
 8022988:	42b7      	cmp	r7, r6
 802298a:	f340 8184 	ble.w	8022c96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802298e:	2b00      	cmp	r3, #0
 8022990:	f2c0 8181 	blt.w	8022c96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022994:	1c5e      	adds	r6, r3, #1
 8022996:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022998:	42b7      	cmp	r7, r6
 802299a:	f340 817c 	ble.w	8022c96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802299e:	9e07      	ldr	r6, [sp, #28]
 80229a0:	fb03 1306 	mla	r3, r3, r6, r1
 80229a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80229a6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80229aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80229ae:	0e1f      	lsrs	r7, r3, #24
 80229b0:	2a00      	cmp	r2, #0
 80229b2:	f000 815c 	beq.w	8022c6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80229b6:	6871      	ldr	r1, [r6, #4]
 80229b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80229ba:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80229be:	2800      	cmp	r0, #0
 80229c0:	f000 815e 	beq.w	8022c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80229c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80229c6:	eb06 0c01 	add.w	ip, r6, r1
 80229ca:	5876      	ldr	r6, [r6, r1]
 80229cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80229d0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80229d4:	9608      	str	r6, [sp, #32]
 80229d6:	0e0e      	lsrs	r6, r1, #24
 80229d8:	910c      	str	r1, [sp, #48]	; 0x30
 80229da:	b292      	uxth	r2, r2
 80229dc:	b280      	uxth	r0, r0
 80229de:	fb02 fa00 	mul.w	sl, r2, r0
 80229e2:	0112      	lsls	r2, r2, #4
 80229e4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80229e8:	eba2 080a 	sub.w	r8, r2, sl
 80229ec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80229f0:	b280      	uxth	r0, r0
 80229f2:	fa1f f888 	uxth.w	r8, r8
 80229f6:	1a09      	subs	r1, r1, r0
 80229f8:	fb08 f20e 	mul.w	r2, r8, lr
 80229fc:	b289      	uxth	r1, r1
 80229fe:	fb01 2207 	mla	r2, r1, r7, r2
 8022a02:	fb00 2209 	mla	r2, r0, r9, r2
 8022a06:	fb0a 2206 	mla	r2, sl, r6, r2
 8022a0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022a0e:	2a00      	cmp	r2, #0
 8022a10:	f000 80d4 	beq.w	8022bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022a14:	2fff      	cmp	r7, #255	; 0xff
 8022a16:	d01a      	beq.n	8022a4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022a18:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022a1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a20:	fb07 fc0c 	mul.w	ip, r7, ip
 8022a24:	435f      	muls	r7, r3
 8022a26:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022a2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022a2e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022a32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a36:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022a3a:	4463      	add	r3, ip
 8022a3c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022a40:	0a1b      	lsrs	r3, r3, #8
 8022a42:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022a46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a4a:	ea43 030b 	orr.w	r3, r3, fp
 8022a4e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022a52:	d01e      	beq.n	8022a92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022a54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022a56:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022a5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022a5e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022a62:	fb0e fe07 	mul.w	lr, lr, r7
 8022a66:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022a6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022a6e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022a72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a76:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022a7a:	44dc      	add	ip, fp
 8022a7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a84:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022a88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a8c:	ea4c 070e 	orr.w	r7, ip, lr
 8022a90:	970b      	str	r7, [sp, #44]	; 0x2c
 8022a92:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022a96:	d01e      	beq.n	8022ad6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022a98:	9f08      	ldr	r7, [sp, #32]
 8022a9a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022a9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022aa2:	fb09 fe0e 	mul.w	lr, r9, lr
 8022aa6:	fb09 f907 	mul.w	r9, r9, r7
 8022aaa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022aae:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022ab2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022ab6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022aba:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022abe:	44f4      	add	ip, lr
 8022ac0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022ac4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ac8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022acc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ad0:	ea4c 0709 	orr.w	r7, ip, r9
 8022ad4:	9708      	str	r7, [sp, #32]
 8022ad6:	2eff      	cmp	r6, #255	; 0xff
 8022ad8:	d01c      	beq.n	8022b14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022ada:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022adc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ae0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ae4:	fb06 fe0e 	mul.w	lr, r6, lr
 8022ae8:	437e      	muls	r6, r7
 8022aea:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022aee:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022af2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022af6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022afa:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022afe:	44f4      	add	ip, lr
 8022b00:	0a36      	lsrs	r6, r6, #8
 8022b02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b06:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b0e:	ea4c 0606 	orr.w	r6, ip, r6
 8022b12:	960c      	str	r6, [sp, #48]	; 0x30
 8022b14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022b16:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b1e:	2aff      	cmp	r2, #255	; 0xff
 8022b20:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b24:	fb08 f606 	mul.w	r6, r8, r6
 8022b28:	fb01 6607 	mla	r6, r1, r7, r6
 8022b2c:	9f08      	ldr	r7, [sp, #32]
 8022b2e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b32:	fb00 6607 	mla	r6, r0, r7, r6
 8022b36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022b38:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b3c:	fb0a 6607 	mla	r6, sl, r7, r6
 8022b40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022b42:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b46:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022b4a:	fb08 f807 	mul.w	r8, r8, r7
 8022b4e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b52:	fb01 8303 	mla	r3, r1, r3, r8
 8022b56:	9908      	ldr	r1, [sp, #32]
 8022b58:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022b5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022b5e:	fb00 330c 	mla	r3, r0, ip, r3
 8022b62:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022b66:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022b6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b72:	ea46 060a 	orr.w	r6, r6, sl
 8022b76:	b2f0      	uxtb	r0, r6
 8022b78:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022b7c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022b80:	f000 8084 	beq.w	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022b84:	43d2      	mvns	r2, r2
 8022b86:	782b      	ldrb	r3, [r5, #0]
 8022b88:	b2d2      	uxtb	r2, r2
 8022b8a:	fb03 f702 	mul.w	r7, r3, r2
 8022b8e:	1c7b      	adds	r3, r7, #1
 8022b90:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022b94:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022b98:	702b      	strb	r3, [r5, #0]
 8022b9a:	786b      	ldrb	r3, [r5, #1]
 8022b9c:	fb03 f002 	mul.w	r0, r3, r2
 8022ba0:	1c43      	adds	r3, r0, #1
 8022ba2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022ba6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022baa:	706b      	strb	r3, [r5, #1]
 8022bac:	78ab      	ldrb	r3, [r5, #2]
 8022bae:	4353      	muls	r3, r2
 8022bb0:	1c5a      	adds	r2, r3, #1
 8022bb2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022bb6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022bba:	70ae      	strb	r6, [r5, #2]
 8022bbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022bbe:	3503      	adds	r5, #3
 8022bc0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022bc2:	4413      	add	r3, r2
 8022bc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8022bc6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022bc8:	441c      	add	r4, r3
 8022bca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022bcc:	3b01      	subs	r3, #1
 8022bce:	9313      	str	r3, [sp, #76]	; 0x4c
 8022bd0:	e6cb      	b.n	802296a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022bd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022bd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022bd6:	4413      	add	r3, r2
 8022bd8:	9329      	str	r3, [sp, #164]	; 0xa4
 8022bda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022bdc:	441c      	add	r4, r3
 8022bde:	9b06      	ldr	r3, [sp, #24]
 8022be0:	3b01      	subs	r3, #1
 8022be2:	9306      	str	r3, [sp, #24]
 8022be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022be6:	3303      	adds	r3, #3
 8022be8:	930a      	str	r3, [sp, #40]	; 0x28
 8022bea:	e675      	b.n	80228d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022bec:	f47f ae86 	bne.w	80228fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022bf2:	2b00      	cmp	r3, #0
 8022bf4:	f340 819e 	ble.w	8022f34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022bfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bfe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022c02:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022c06:	eef0 6a48 	vmov.f32	s13, s16
 8022c0a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022c0e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022c12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c16:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022c1a:	eef0 6a68 	vmov.f32	s13, s17
 8022c1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c22:	ee16 4a90 	vmov	r4, s13
 8022c26:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022c2a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c2e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022c32:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022c36:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022c3a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022c3e:	ee18 2a10 	vmov	r2, s16
 8022c42:	eeb0 8a47 	vmov.f32	s16, s14
 8022c46:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c4a:	ee18 2a90 	vmov	r2, s17
 8022c4e:	932b      	str	r3, [sp, #172]	; 0xac
 8022c50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c52:	eef0 8a67 	vmov.f32	s17, s15
 8022c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c5a:	932c      	str	r3, [sp, #176]	; 0xb0
 8022c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022c60:	3b01      	subs	r3, #1
 8022c62:	9312      	str	r3, [sp, #72]	; 0x48
 8022c64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c66:	bf08      	it	eq
 8022c68:	4613      	moveq	r3, r2
 8022c6a:	9306      	str	r3, [sp, #24]
 8022c6c:	e62d      	b.n	80228ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022c6e:	b150      	cbz	r0, 8022c86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022c70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022c72:	5871      	ldr	r1, [r6, r1]
 8022c74:	26ff      	movs	r6, #255	; 0xff
 8022c76:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022c7a:	9108      	str	r1, [sp, #32]
 8022c7c:	46b6      	mov	lr, r6
 8022c7e:	e6ac      	b.n	80229da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022c80:	26ff      	movs	r6, #255	; 0xff
 8022c82:	46b1      	mov	r9, r6
 8022c84:	e6a9      	b.n	80229da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022c86:	26ff      	movs	r6, #255	; 0xff
 8022c88:	46b1      	mov	r9, r6
 8022c8a:	e7f7      	b.n	8022c7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022c8c:	7028      	strb	r0, [r5, #0]
 8022c8e:	7069      	strb	r1, [r5, #1]
 8022c90:	e793      	b.n	8022bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022c92:	1c4f      	adds	r7, r1, #1
 8022c94:	d192      	bne.n	8022bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022c96:	9e07      	ldr	r6, [sp, #28]
 8022c98:	428e      	cmp	r6, r1
 8022c9a:	dd8f      	ble.n	8022bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022c9c:	1c5e      	adds	r6, r3, #1
 8022c9e:	db8d      	blt.n	8022bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022ca0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022ca2:	429e      	cmp	r6, r3
 8022ca4:	dd8a      	ble.n	8022bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022ca6:	9600      	str	r6, [sp, #0]
 8022ca8:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022cac:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022cb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022cb2:	4629      	mov	r1, r5
 8022cb4:	9b07      	ldr	r3, [sp, #28]
 8022cb6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022cb8:	f7ff fc8e 	bl	80225d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022cbc:	e77e      	b.n	8022bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022cbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022cc0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022cc4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022cc6:	9e07      	ldr	r6, [sp, #28]
 8022cc8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022ccc:	1409      	asrs	r1, r1, #16
 8022cce:	1423      	asrs	r3, r4, #16
 8022cd0:	fb06 1303 	mla	r3, r6, r3, r1
 8022cd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022cd6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022cda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022cde:	0e1f      	lsrs	r7, r3, #24
 8022ce0:	2a00      	cmp	r2, #0
 8022ce2:	f000 8113 	beq.w	8022f0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022ce6:	6871      	ldr	r1, [r6, #4]
 8022ce8:	910d      	str	r1, [sp, #52]	; 0x34
 8022cea:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022cee:	2800      	cmp	r0, #0
 8022cf0:	f000 8115 	beq.w	8022f1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022cf4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022cf6:	eb06 0c01 	add.w	ip, r6, r1
 8022cfa:	5876      	ldr	r6, [r6, r1]
 8022cfc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022d00:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022d04:	9609      	str	r6, [sp, #36]	; 0x24
 8022d06:	0e0e      	lsrs	r6, r1, #24
 8022d08:	910f      	str	r1, [sp, #60]	; 0x3c
 8022d0a:	b292      	uxth	r2, r2
 8022d0c:	b280      	uxth	r0, r0
 8022d0e:	fb02 fa00 	mul.w	sl, r2, r0
 8022d12:	0112      	lsls	r2, r2, #4
 8022d14:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022d18:	eba2 080a 	sub.w	r8, r2, sl
 8022d1c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022d20:	b280      	uxth	r0, r0
 8022d22:	fa1f f888 	uxth.w	r8, r8
 8022d26:	1a09      	subs	r1, r1, r0
 8022d28:	fb08 f20e 	mul.w	r2, r8, lr
 8022d2c:	b289      	uxth	r1, r1
 8022d2e:	fb01 2207 	mla	r2, r1, r7, r2
 8022d32:	fb00 2209 	mla	r2, r0, r9, r2
 8022d36:	fb0a 2206 	mla	r2, sl, r6, r2
 8022d3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022d3e:	2a00      	cmp	r2, #0
 8022d40:	f000 80da 	beq.w	8022ef8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022d44:	2fff      	cmp	r7, #255	; 0xff
 8022d46:	d01a      	beq.n	8022d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022d48:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022d4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022d50:	fb07 fc0c 	mul.w	ip, r7, ip
 8022d54:	435f      	muls	r7, r3
 8022d56:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022d5a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d62:	4463      	add	r3, ip
 8022d64:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022d68:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022d6c:	0a1b      	lsrs	r3, r3, #8
 8022d6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022d7a:	ea43 030c 	orr.w	r3, r3, ip
 8022d7e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022d82:	d021      	beq.n	8022dc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022d84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022d86:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022d8a:	fb0e f707 	mul.w	r7, lr, r7
 8022d8e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022d90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022d92:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022d96:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022d98:	fb0e fe0c 	mul.w	lr, lr, ip
 8022d9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022da0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022da4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022da8:	44bc      	add	ip, r7
 8022daa:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022dae:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022db2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022db6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022dba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022dbe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022dc2:	ea4c 070e 	orr.w	r7, ip, lr
 8022dc6:	970d      	str	r7, [sp, #52]	; 0x34
 8022dc8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022dcc:	d01e      	beq.n	8022e0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022dce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022dd0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022dd4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022dd8:	fb09 fe0e 	mul.w	lr, r9, lr
 8022ddc:	fb09 f907 	mul.w	r9, r9, r7
 8022de0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022de4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022de8:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022dec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022df0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022df4:	44f4      	add	ip, lr
 8022df6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022dfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022dfe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022e02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e06:	ea4c 0709 	orr.w	r7, ip, r9
 8022e0a:	9709      	str	r7, [sp, #36]	; 0x24
 8022e0c:	2eff      	cmp	r6, #255	; 0xff
 8022e0e:	d01c      	beq.n	8022e4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022e10:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022e12:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022e16:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e1a:	fb06 fe0e 	mul.w	lr, r6, lr
 8022e1e:	437e      	muls	r6, r7
 8022e20:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022e24:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022e28:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022e2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e30:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022e34:	44f4      	add	ip, lr
 8022e36:	0a36      	lsrs	r6, r6, #8
 8022e38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e44:	ea4c 0606 	orr.w	r6, ip, r6
 8022e48:	960f      	str	r6, [sp, #60]	; 0x3c
 8022e4a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022e4c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022e50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e54:	2aff      	cmp	r2, #255	; 0xff
 8022e56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e5a:	fb08 f606 	mul.w	r6, r8, r6
 8022e5e:	fb01 6607 	mla	r6, r1, r7, r6
 8022e62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022e64:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e68:	fb00 6607 	mla	r6, r0, r7, r6
 8022e6c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022e6e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e72:	fb0a 6607 	mla	r6, sl, r7, r6
 8022e76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022e78:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022e7c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022e80:	fb08 f807 	mul.w	r8, r8, r7
 8022e84:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e88:	fb01 8303 	mla	r3, r1, r3, r8
 8022e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022e8e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022e92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022e94:	fb00 330c 	mla	r3, r0, ip, r3
 8022e98:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022e9c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022ea0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ea4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ea8:	ea46 060e 	orr.w	r6, r6, lr
 8022eac:	b2f0      	uxtb	r0, r6
 8022eae:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022eb2:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022eb6:	d038      	beq.n	8022f2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022eb8:	43d2      	mvns	r2, r2
 8022eba:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022ebe:	b2d2      	uxtb	r2, r2
 8022ec0:	4357      	muls	r7, r2
 8022ec2:	1c7b      	adds	r3, r7, #1
 8022ec4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022ec8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022ecc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022ed0:	4350      	muls	r0, r2
 8022ed2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022ed6:	1c43      	adds	r3, r0, #1
 8022ed8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022edc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022ee0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022ee4:	4353      	muls	r3, r2
 8022ee6:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022eea:	1c5a      	adds	r2, r3, #1
 8022eec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022ef0:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022ef4:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022ef8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022efa:	3503      	adds	r5, #3
 8022efc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022efe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f02:	4413      	add	r3, r2
 8022f04:	9329      	str	r3, [sp, #164]	; 0xa4
 8022f06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f08:	441c      	add	r4, r3
 8022f0a:	e510      	b.n	802292e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022f0c:	b150      	cbz	r0, 8022f24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8022f0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022f10:	5871      	ldr	r1, [r6, r1]
 8022f12:	26ff      	movs	r6, #255	; 0xff
 8022f14:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022f18:	9109      	str	r1, [sp, #36]	; 0x24
 8022f1a:	46b6      	mov	lr, r6
 8022f1c:	e6f5      	b.n	8022d0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022f1e:	26ff      	movs	r6, #255	; 0xff
 8022f20:	46b1      	mov	r9, r6
 8022f22:	e6f2      	b.n	8022d0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022f24:	26ff      	movs	r6, #255	; 0xff
 8022f26:	46b1      	mov	r9, r6
 8022f28:	e7f7      	b.n	8022f1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022f2a:	f805 0c03 	strb.w	r0, [r5, #-3]
 8022f2e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022f32:	e7df      	b.n	8022ef4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022f34:	b017      	add	sp, #92	; 0x5c
 8022f36:	ecbd 8b08 	vpop	{d8-d11}
 8022f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f44:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022f48:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022f4c:	2800      	cmp	r0, #0
 8022f4e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022f52:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022f56:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022f5a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022f5e:	db6b      	blt.n	8023038 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f60:	4580      	cmp	r8, r0
 8022f62:	dd69      	ble.n	8023038 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f64:	f1bc 0f00 	cmp.w	ip, #0
 8022f68:	db66      	blt.n	8023038 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f6a:	45e1      	cmp	r9, ip
 8022f6c:	dd64      	ble.n	8023038 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022f6e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022f72:	f01e 0f01 	tst.w	lr, #1
 8022f76:	5d16      	ldrb	r6, [r2, r4]
 8022f78:	bf0c      	ite	eq
 8022f7a:	f006 060f 	andeq.w	r6, r6, #15
 8022f7e:	1136      	asrne	r6, r6, #4
 8022f80:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022f84:	b2f6      	uxtb	r6, r6
 8022f86:	f110 0a01 	adds.w	sl, r0, #1
 8022f8a:	d457      	bmi.n	802303c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f8c:	45d0      	cmp	r8, sl
 8022f8e:	dd55      	ble.n	802303c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f90:	f1bc 0f00 	cmp.w	ip, #0
 8022f94:	db52      	blt.n	802303c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f96:	45e1      	cmp	r9, ip
 8022f98:	dd50      	ble.n	802303c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022f9a:	2f00      	cmp	r7, #0
 8022f9c:	f000 80ac 	beq.w	80230f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8022fa0:	f10e 0b01 	add.w	fp, lr, #1
 8022fa4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022fa8:	f01b 0f01 	tst.w	fp, #1
 8022fac:	5d14      	ldrb	r4, [r2, r4]
 8022fae:	bf0c      	ite	eq
 8022fb0:	f004 040f 	andeq.w	r4, r4, #15
 8022fb4:	1124      	asrne	r4, r4, #4
 8022fb6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022fba:	b2e4      	uxtb	r4, r4
 8022fbc:	2d00      	cmp	r5, #0
 8022fbe:	f000 8096 	beq.w	80230ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8022fc2:	2800      	cmp	r0, #0
 8022fc4:	f10c 0c01 	add.w	ip, ip, #1
 8022fc8:	db3c      	blt.n	8023044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022fca:	4580      	cmp	r8, r0
 8022fcc:	dd3a      	ble.n	8023044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022fce:	f1bc 0f00 	cmp.w	ip, #0
 8022fd2:	db37      	blt.n	8023044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022fd4:	45e1      	cmp	r9, ip
 8022fd6:	dd35      	ble.n	8023044 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022fd8:	eb03 0b0e 	add.w	fp, r3, lr
 8022fdc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022fe0:	f01b 0f01 	tst.w	fp, #1
 8022fe4:	5c10      	ldrb	r0, [r2, r0]
 8022fe6:	bf0c      	ite	eq
 8022fe8:	f000 000f 	andeq.w	r0, r0, #15
 8022fec:	1100      	asrne	r0, r0, #4
 8022fee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022ff2:	b2c0      	uxtb	r0, r0
 8022ff4:	f1ba 0f00 	cmp.w	sl, #0
 8022ff8:	db26      	blt.n	8023048 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022ffa:	45d0      	cmp	r8, sl
 8022ffc:	dd24      	ble.n	8023048 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022ffe:	f1bc 0f00 	cmp.w	ip, #0
 8023002:	db21      	blt.n	8023048 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023004:	45e1      	cmp	r9, ip
 8023006:	dd1f      	ble.n	8023048 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023008:	b307      	cbz	r7, 802304c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802300a:	3301      	adds	r3, #1
 802300c:	449e      	add	lr, r3
 802300e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023012:	f01e 0f01 	tst.w	lr, #1
 8023016:	5cd3      	ldrb	r3, [r2, r3]
 8023018:	bf0c      	ite	eq
 802301a:	f003 030f 	andeq.w	r3, r3, #15
 802301e:	111b      	asrne	r3, r3, #4
 8023020:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023024:	b2db      	uxtb	r3, r3
 8023026:	2f0f      	cmp	r7, #15
 8023028:	d911      	bls.n	802304e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802302a:	4b35      	ldr	r3, [pc, #212]	; (8023100 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802302c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023030:	4a34      	ldr	r2, [pc, #208]	; (8023104 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023032:	4835      	ldr	r0, [pc, #212]	; (8023108 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023034:	f002 fb64 	bl	8025700 <__assert_func>
 8023038:	2600      	movs	r6, #0
 802303a:	e7a4      	b.n	8022f86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802303c:	2400      	movs	r4, #0
 802303e:	e7bd      	b.n	8022fbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023040:	463c      	mov	r4, r7
 8023042:	e7be      	b.n	8022fc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023044:	2000      	movs	r0, #0
 8023046:	e7d5      	b.n	8022ff4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023048:	2300      	movs	r3, #0
 802304a:	e7ec      	b.n	8023026 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 802304c:	463b      	mov	r3, r7
 802304e:	2d0f      	cmp	r5, #15
 8023050:	d8eb      	bhi.n	802302a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023052:	b2bf      	uxth	r7, r7
 8023054:	b2ad      	uxth	r5, r5
 8023056:	fb07 f205 	mul.w	r2, r7, r5
 802305a:	013f      	lsls	r7, r7, #4
 802305c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023060:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023064:	1abf      	subs	r7, r7, r2
 8023066:	b2ad      	uxth	r5, r5
 8023068:	b2bf      	uxth	r7, r7
 802306a:	ebac 0c05 	sub.w	ip, ip, r5
 802306e:	437c      	muls	r4, r7
 8023070:	fa1f fc8c 	uxth.w	ip, ip
 8023074:	fb06 440c 	mla	r4, r6, ip, r4
 8023078:	fb05 4400 	mla	r4, r5, r0, r4
 802307c:	fb02 4203 	mla	r2, r2, r3, r4
 8023080:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023084:	b38a      	cbz	r2, 80230ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8023086:	4b21      	ldr	r3, [pc, #132]	; (802310c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8023088:	681c      	ldr	r4, [r3, #0]
 802308a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802308e:	b2e5      	uxtb	r5, r4
 8023090:	4353      	muls	r3, r2
 8023092:	1c5a      	adds	r2, r3, #1
 8023094:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023098:	1212      	asrs	r2, r2, #8
 802309a:	b290      	uxth	r0, r2
 802309c:	43d2      	mvns	r2, r2
 802309e:	fb15 f500 	smulbb	r5, r5, r0
 80230a2:	b2d3      	uxtb	r3, r2
 80230a4:	780a      	ldrb	r2, [r1, #0]
 80230a6:	fb02 5203 	mla	r2, r2, r3, r5
 80230aa:	b292      	uxth	r2, r2
 80230ac:	1c55      	adds	r5, r2, #1
 80230ae:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80230b2:	784d      	ldrb	r5, [r1, #1]
 80230b4:	fb15 f503 	smulbb	r5, r5, r3
 80230b8:	1212      	asrs	r2, r2, #8
 80230ba:	700a      	strb	r2, [r1, #0]
 80230bc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80230c0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80230c4:	fb02 5200 	mla	r2, r2, r0, r5
 80230c8:	b292      	uxth	r2, r2
 80230ca:	1c55      	adds	r5, r2, #1
 80230cc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80230d0:	1212      	asrs	r2, r2, #8
 80230d2:	704a      	strb	r2, [r1, #1]
 80230d4:	788a      	ldrb	r2, [r1, #2]
 80230d6:	fb12 f303 	smulbb	r3, r2, r3
 80230da:	fb04 3300 	mla	r3, r4, r0, r3
 80230de:	b29b      	uxth	r3, r3
 80230e0:	1c5a      	adds	r2, r3, #1
 80230e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80230e6:	121b      	asrs	r3, r3, #8
 80230e8:	708b      	strb	r3, [r1, #2]
 80230ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230ee:	2f0f      	cmp	r7, #15
 80230f0:	d89b      	bhi.n	802302a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80230f2:	462b      	mov	r3, r5
 80230f4:	4628      	mov	r0, r5
 80230f6:	e7ac      	b.n	8023052 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80230f8:	2d00      	cmp	r5, #0
 80230fa:	d1a1      	bne.n	8023040 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80230fc:	462c      	mov	r4, r5
 80230fe:	e7f8      	b.n	80230f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023100:	0802b011 	.word	0x0802b011
 8023104:	0802b506 	.word	0x0802b506
 8023108:	0802b0da 	.word	0x0802b0da
 802310c:	2000b394 	.word	0x2000b394

08023110 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023114:	ed2d 8b08 	vpush	{d8-d11}
 8023118:	b097      	sub	sp, #92	; 0x5c
 802311a:	eeb0 aa40 	vmov.f32	s20, s0
 802311e:	eef0 9a60 	vmov.f32	s19, s1
 8023122:	9308      	str	r3, [sp, #32]
 8023124:	eeb0 9a41 	vmov.f32	s18, s2
 8023128:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802312c:	eeb0 8a62 	vmov.f32	s16, s5
 8023130:	9214      	str	r2, [sp, #80]	; 0x50
 8023132:	eef0 8a43 	vmov.f32	s17, s6
 8023136:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023138:	eef0 ba44 	vmov.f32	s23, s8
 802313c:	9309      	str	r3, [sp, #36]	; 0x24
 802313e:	eeb0 ba64 	vmov.f32	s22, s9
 8023142:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023146:	eef0 aa45 	vmov.f32	s21, s10
 802314a:	9015      	str	r0, [sp, #84]	; 0x54
 802314c:	910c      	str	r1, [sp, #48]	; 0x30
 802314e:	930e      	str	r3, [sp, #56]	; 0x38
 8023150:	6850      	ldr	r0, [r2, #4]
 8023152:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8023156:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802315a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802315e:	fb00 1803 	mla	r8, r0, r3, r1
 8023162:	6813      	ldr	r3, [r2, #0]
 8023164:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023168:	4498      	add	r8, r3
 802316a:	f10b 0301 	add.w	r3, fp, #1
 802316e:	f023 0301 	bic.w	r3, r3, #1
 8023172:	930f      	str	r3, [sp, #60]	; 0x3c
 8023174:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023176:	681f      	ldr	r7, [r3, #0]
 8023178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802317a:	2b00      	cmp	r3, #0
 802317c:	dc03      	bgt.n	8023186 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802317e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023180:	2b00      	cmp	r3, #0
 8023182:	f340 8238 	ble.w	80235f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023186:	9b08      	ldr	r3, [sp, #32]
 8023188:	2b00      	cmp	r3, #0
 802318a:	f340 810c 	ble.w	80233a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802318e:	142a      	asrs	r2, r5, #16
 8023190:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023194:	d42c      	bmi.n	80231f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023196:	1c51      	adds	r1, r2, #1
 8023198:	458b      	cmp	fp, r1
 802319a:	dd2c      	ble.n	80231f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802319c:	2b00      	cmp	r3, #0
 802319e:	db2a      	blt.n	80231f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80231a0:	1c59      	adds	r1, r3, #1
 80231a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80231a4:	4288      	cmp	r0, r1
 80231a6:	dd26      	ble.n	80231f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80231a8:	9b08      	ldr	r3, [sp, #32]
 80231aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80231ac:	3b01      	subs	r3, #1
 80231ae:	fb02 5203 	mla	r2, r2, r3, r5
 80231b2:	1412      	asrs	r2, r2, #16
 80231b4:	d429      	bmi.n	802320a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80231b6:	3201      	adds	r2, #1
 80231b8:	4593      	cmp	fp, r2
 80231ba:	dd26      	ble.n	802320a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80231bc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80231be:	fb02 6303 	mla	r3, r2, r3, r6
 80231c2:	141b      	asrs	r3, r3, #16
 80231c4:	d421      	bmi.n	802320a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80231c6:	3301      	adds	r3, #1
 80231c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80231ca:	429a      	cmp	r2, r3
 80231cc:	dd1d      	ble.n	802320a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80231ce:	f108 0e03 	add.w	lr, r8, #3
 80231d2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80231d6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80231da:	f1b9 0f00 	cmp.w	r9, #0
 80231de:	f300 814f 	bgt.w	8023480 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80231e2:	9b08      	ldr	r3, [sp, #32]
 80231e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80231e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80231ec:	44a0      	add	r8, r4
 80231ee:	e0dc      	b.n	80233aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80231f0:	1c51      	adds	r1, r2, #1
 80231f2:	f040 80ce 	bne.w	8023392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80231f6:	4593      	cmp	fp, r2
 80231f8:	f340 80cb 	ble.w	8023392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80231fc:	1c5a      	adds	r2, r3, #1
 80231fe:	f2c0 80c8 	blt.w	8023392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023204:	4293      	cmp	r3, r2
 8023206:	f280 80c4 	bge.w	8023392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802320a:	9b08      	ldr	r3, [sp, #32]
 802320c:	46c1      	mov	r9, r8
 802320e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8023212:	930d      	str	r3, [sp, #52]	; 0x34
 8023214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023216:	2b00      	cmp	r3, #0
 8023218:	dde3      	ble.n	80231e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802321a:	1428      	asrs	r0, r5, #16
 802321c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023220:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023224:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023228:	f100 8111 	bmi.w	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 802322c:	f100 0c01 	add.w	ip, r0, #1
 8023230:	45e3      	cmp	fp, ip
 8023232:	f340 810e 	ble.w	8023452 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023236:	2b00      	cmp	r3, #0
 8023238:	f2c0 810b 	blt.w	8023452 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802323c:	f103 0c01 	add.w	ip, r3, #1
 8023240:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023242:	4564      	cmp	r4, ip
 8023244:	f340 8105 	ble.w	8023452 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023248:	fb03 030a 	mla	r3, r3, sl, r0
 802324c:	0858      	lsrs	r0, r3, #1
 802324e:	07dc      	lsls	r4, r3, #31
 8023250:	5c38      	ldrb	r0, [r7, r0]
 8023252:	bf54      	ite	pl
 8023254:	f000 000f 	andpl.w	r0, r0, #15
 8023258:	1100      	asrmi	r0, r0, #4
 802325a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802325e:	b2c0      	uxtb	r0, r0
 8023260:	2a00      	cmp	r2, #0
 8023262:	f000 80e1 	beq.w	8023428 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8023266:	f103 0e01 	add.w	lr, r3, #1
 802326a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802326e:	f01e 0f01 	tst.w	lr, #1
 8023272:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023276:	bf0c      	ite	eq
 8023278:	f00c 0c0f 	andeq.w	ip, ip, #15
 802327c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023280:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023284:	fa5f f48c 	uxtb.w	r4, ip
 8023288:	9410      	str	r4, [sp, #64]	; 0x40
 802328a:	b1f9      	cbz	r1, 80232cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802328c:	4453      	add	r3, sl
 802328e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023292:	07dc      	lsls	r4, r3, #31
 8023294:	f103 0301 	add.w	r3, r3, #1
 8023298:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802329c:	bf54      	ite	pl
 802329e:	f00c 0c0f 	andpl.w	ip, ip, #15
 80232a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80232a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80232aa:	fa5f f48c 	uxtb.w	r4, ip
 80232ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80232b2:	940a      	str	r4, [sp, #40]	; 0x28
 80232b4:	07dc      	lsls	r4, r3, #31
 80232b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80232ba:	bf54      	ite	pl
 80232bc:	f00c 030f 	andpl.w	r3, ip, #15
 80232c0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80232c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80232c8:	b2db      	uxtb	r3, r3
 80232ca:	9311      	str	r3, [sp, #68]	; 0x44
 80232cc:	b292      	uxth	r2, r2
 80232ce:	b289      	uxth	r1, r1
 80232d0:	0113      	lsls	r3, r2, #4
 80232d2:	fb02 fc01 	mul.w	ip, r2, r1
 80232d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80232d8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80232dc:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80232e0:	eba3 030c 	sub.w	r3, r3, ip
 80232e4:	b289      	uxth	r1, r1
 80232e6:	b29b      	uxth	r3, r3
 80232e8:	ebae 0e01 	sub.w	lr, lr, r1
 80232ec:	4353      	muls	r3, r2
 80232ee:	fa1f fe8e 	uxth.w	lr, lr
 80232f2:	fb00 320e 	mla	r2, r0, lr, r3
 80232f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232f8:	fb01 2203 	mla	r2, r1, r3, r2
 80232fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80232fe:	fb0c 2203 	mla	r2, ip, r3, r2
 8023302:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023306:	2a00      	cmp	r2, #0
 8023308:	d039      	beq.n	802337e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802330a:	4bbd      	ldr	r3, [pc, #756]	; (8023600 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802330c:	6819      	ldr	r1, [r3, #0]
 802330e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023310:	fa5f fc81 	uxtb.w	ip, r1
 8023314:	435a      	muls	r2, r3
 8023316:	1c53      	adds	r3, r2, #1
 8023318:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802331c:	1212      	asrs	r2, r2, #8
 802331e:	b290      	uxth	r0, r2
 8023320:	43d2      	mvns	r2, r2
 8023322:	fb1c fc00 	smulbb	ip, ip, r0
 8023326:	b2d3      	uxtb	r3, r2
 8023328:	f899 2000 	ldrb.w	r2, [r9]
 802332c:	fb02 c203 	mla	r2, r2, r3, ip
 8023330:	b292      	uxth	r2, r2
 8023332:	f102 0c01 	add.w	ip, r2, #1
 8023336:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802333a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802333e:	fb1c fc03 	smulbb	ip, ip, r3
 8023342:	1212      	asrs	r2, r2, #8
 8023344:	f889 2000 	strb.w	r2, [r9]
 8023348:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802334c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023350:	fb02 c200 	mla	r2, r2, r0, ip
 8023354:	b292      	uxth	r2, r2
 8023356:	f102 0c01 	add.w	ip, r2, #1
 802335a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802335e:	1212      	asrs	r2, r2, #8
 8023360:	f889 2001 	strb.w	r2, [r9, #1]
 8023364:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023368:	fb12 f303 	smulbb	r3, r2, r3
 802336c:	fb01 3300 	mla	r3, r1, r0, r3
 8023370:	b29b      	uxth	r3, r3
 8023372:	1c5a      	adds	r2, r3, #1
 8023374:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023378:	121b      	asrs	r3, r3, #8
 802337a:	f889 3002 	strb.w	r3, [r9, #2]
 802337e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023380:	f109 0903 	add.w	r9, r9, #3
 8023384:	441d      	add	r5, r3
 8023386:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023388:	441e      	add	r6, r3
 802338a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802338c:	3b01      	subs	r3, #1
 802338e:	930d      	str	r3, [sp, #52]	; 0x34
 8023390:	e740      	b.n	8023214 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8023392:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023394:	f108 0803 	add.w	r8, r8, #3
 8023398:	441d      	add	r5, r3
 802339a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802339c:	441e      	add	r6, r3
 802339e:	9b08      	ldr	r3, [sp, #32]
 80233a0:	3b01      	subs	r3, #1
 80233a2:	9308      	str	r3, [sp, #32]
 80233a4:	e6ef      	b.n	8023186 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80233a6:	f47f aeff 	bne.w	80231a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80233aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233ac:	2b00      	cmp	r3, #0
 80233ae:	f340 8122 	ble.w	80235f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80233b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80233bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80233c0:	eef0 6a48 	vmov.f32	s13, s16
 80233c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80233c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80233cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233d0:	ee16 5a90 	vmov	r5, s13
 80233d4:	eef0 6a68 	vmov.f32	s13, s17
 80233d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233dc:	ee16 6a90 	vmov	r6, s13
 80233e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80233e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80233e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80233ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80233f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80233f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80233f8:	ee18 2a10 	vmov	r2, s16
 80233fc:	eeb0 8a47 	vmov.f32	s16, s14
 8023400:	fb92 f3f3 	sdiv	r3, r2, r3
 8023404:	ee18 2a90 	vmov	r2, s17
 8023408:	932b      	str	r3, [sp, #172]	; 0xac
 802340a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802340c:	eef0 8a67 	vmov.f32	s17, s15
 8023410:	fb92 f3f3 	sdiv	r3, r2, r3
 8023414:	932c      	str	r3, [sp, #176]	; 0xb0
 8023416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023418:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802341a:	3b01      	subs	r3, #1
 802341c:	930c      	str	r3, [sp, #48]	; 0x30
 802341e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023420:	bf08      	it	eq
 8023422:	4613      	moveq	r3, r2
 8023424:	9308      	str	r3, [sp, #32]
 8023426:	e6a7      	b.n	8023178 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023428:	2900      	cmp	r1, #0
 802342a:	f43f af4f 	beq.w	80232cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802342e:	4453      	add	r3, sl
 8023430:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023434:	07db      	lsls	r3, r3, #31
 8023436:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802343a:	bf54      	ite	pl
 802343c:	f00c 030f 	andpl.w	r3, ip, #15
 8023440:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023444:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023448:	b2db      	uxtb	r3, r3
 802344a:	930a      	str	r3, [sp, #40]	; 0x28
 802344c:	e73e      	b.n	80232cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802344e:	1c44      	adds	r4, r0, #1
 8023450:	d195      	bne.n	802337e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023452:	4583      	cmp	fp, r0
 8023454:	dd93      	ble.n	802337e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023456:	1c5c      	adds	r4, r3, #1
 8023458:	db91      	blt.n	802337e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802345a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802345c:	429c      	cmp	r4, r3
 802345e:	dd8e      	ble.n	802337e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023460:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023462:	9002      	str	r0, [sp, #8]
 8023464:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023466:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802346c:	463a      	mov	r2, r7
 802346e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023472:	e9cd b300 	strd	fp, r3, [sp]
 8023476:	4649      	mov	r1, r9
 8023478:	4653      	mov	r3, sl
 802347a:	f7ff fd61 	bl	8022f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802347e:	e77e      	b.n	802337e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023480:	142a      	asrs	r2, r5, #16
 8023482:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023486:	1433      	asrs	r3, r6, #16
 8023488:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802348c:	fb0a 2303 	mla	r3, sl, r3, r2
 8023490:	085a      	lsrs	r2, r3, #1
 8023492:	07dc      	lsls	r4, r3, #31
 8023494:	5cba      	ldrb	r2, [r7, r2]
 8023496:	bf54      	ite	pl
 8023498:	f002 020f 	andpl.w	r2, r2, #15
 802349c:	1112      	asrmi	r2, r2, #4
 802349e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80234a2:	b2d2      	uxtb	r2, r2
 80234a4:	2900      	cmp	r1, #0
 80234a6:	f000 8093 	beq.w	80235d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80234aa:	1c5c      	adds	r4, r3, #1
 80234ac:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80234b0:	07e4      	lsls	r4, r4, #31
 80234b2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80234b6:	bf54      	ite	pl
 80234b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80234bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80234c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80234c4:	fa5f f48c 	uxtb.w	r4, ip
 80234c8:	9412      	str	r4, [sp, #72]	; 0x48
 80234ca:	b300      	cbz	r0, 802350e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80234cc:	4453      	add	r3, sl
 80234ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80234d2:	07dc      	lsls	r4, r3, #31
 80234d4:	f103 0301 	add.w	r3, r3, #1
 80234d8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80234dc:	bf54      	ite	pl
 80234de:	f00c 0c0f 	andpl.w	ip, ip, #15
 80234e2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80234e6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80234ea:	fa5f f48c 	uxtb.w	r4, ip
 80234ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80234f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80234f4:	07dc      	lsls	r4, r3, #31
 80234f6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80234fa:	bf54      	ite	pl
 80234fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023500:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023504:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023508:	fa5f f38c 	uxtb.w	r3, ip
 802350c:	9313      	str	r3, [sp, #76]	; 0x4c
 802350e:	b289      	uxth	r1, r1
 8023510:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023512:	b280      	uxth	r0, r0
 8023514:	fb01 f300 	mul.w	r3, r1, r0
 8023518:	0109      	lsls	r1, r1, #4
 802351a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802351e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023522:	1ac9      	subs	r1, r1, r3
 8023524:	b280      	uxth	r0, r0
 8023526:	b289      	uxth	r1, r1
 8023528:	ebac 0c00 	sub.w	ip, ip, r0
 802352c:	4361      	muls	r1, r4
 802352e:	fa1f fc8c 	uxth.w	ip, ip
 8023532:	fb02 120c 	mla	r2, r2, ip, r1
 8023536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023538:	fb00 2001 	mla	r0, r0, r1, r2
 802353c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802353e:	fb03 0302 	mla	r3, r3, r2, r0
 8023542:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023546:	2b00      	cmp	r3, #0
 8023548:	d039      	beq.n	80235be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802354a:	4a2d      	ldr	r2, [pc, #180]	; (8023600 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802354c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023550:	6810      	ldr	r0, [r2, #0]
 8023552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023554:	fa5f fc80 	uxtb.w	ip, r0
 8023558:	4353      	muls	r3, r2
 802355a:	1c5a      	adds	r2, r3, #1
 802355c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023560:	121b      	asrs	r3, r3, #8
 8023562:	b29a      	uxth	r2, r3
 8023564:	43db      	mvns	r3, r3
 8023566:	fb1c fc02 	smulbb	ip, ip, r2
 802356a:	b2db      	uxtb	r3, r3
 802356c:	fb01 c103 	mla	r1, r1, r3, ip
 8023570:	b289      	uxth	r1, r1
 8023572:	f101 0c01 	add.w	ip, r1, #1
 8023576:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802357a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802357e:	fb1c fc03 	smulbb	ip, ip, r3
 8023582:	1209      	asrs	r1, r1, #8
 8023584:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023588:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802358c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023590:	fb01 c102 	mla	r1, r1, r2, ip
 8023594:	b289      	uxth	r1, r1
 8023596:	f101 0c01 	add.w	ip, r1, #1
 802359a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802359e:	1209      	asrs	r1, r1, #8
 80235a0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80235a4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80235a8:	fb11 f303 	smulbb	r3, r1, r3
 80235ac:	fb00 3002 	mla	r0, r0, r2, r3
 80235b0:	b280      	uxth	r0, r0
 80235b2:	1c42      	adds	r2, r0, #1
 80235b4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80235b8:	1200      	asrs	r0, r0, #8
 80235ba:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80235be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80235c0:	f10e 0e03 	add.w	lr, lr, #3
 80235c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80235c8:	441d      	add	r5, r3
 80235ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80235cc:	441e      	add	r6, r3
 80235ce:	e604      	b.n	80231da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80235d0:	2800      	cmp	r0, #0
 80235d2:	d09c      	beq.n	802350e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80235d4:	4453      	add	r3, sl
 80235d6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80235da:	07db      	lsls	r3, r3, #31
 80235dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235e0:	bf54      	ite	pl
 80235e2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235ee:	fa5f f38c 	uxtb.w	r3, ip
 80235f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80235f4:	e78b      	b.n	802350e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80235f6:	b017      	add	sp, #92	; 0x5c
 80235f8:	ecbd 8b08 	vpop	{d8-d11}
 80235fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023600:	2000b394 	.word	0x2000b394

08023604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023608:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802360c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023610:	2800      	cmp	r0, #0
 8023612:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023616:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802361a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802361e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023622:	db6b      	blt.n	80236fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023624:	4580      	cmp	r8, r0
 8023626:	dd69      	ble.n	80236fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023628:	f1bc 0f00 	cmp.w	ip, #0
 802362c:	db66      	blt.n	80236fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802362e:	45e1      	cmp	r9, ip
 8023630:	dd64      	ble.n	80236fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023632:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023636:	f01e 0f01 	tst.w	lr, #1
 802363a:	5d16      	ldrb	r6, [r2, r4]
 802363c:	bf0c      	ite	eq
 802363e:	f006 060f 	andeq.w	r6, r6, #15
 8023642:	1136      	asrne	r6, r6, #4
 8023644:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023648:	b2f6      	uxtb	r6, r6
 802364a:	f110 0a01 	adds.w	sl, r0, #1
 802364e:	d457      	bmi.n	8023700 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023650:	45d0      	cmp	r8, sl
 8023652:	dd55      	ble.n	8023700 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023654:	f1bc 0f00 	cmp.w	ip, #0
 8023658:	db52      	blt.n	8023700 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802365a:	45e1      	cmp	r9, ip
 802365c:	dd50      	ble.n	8023700 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802365e:	2f00      	cmp	r7, #0
 8023660:	f000 80a5 	beq.w	80237ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023664:	f10e 0b01 	add.w	fp, lr, #1
 8023668:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802366c:	f01b 0f01 	tst.w	fp, #1
 8023670:	5d14      	ldrb	r4, [r2, r4]
 8023672:	bf0c      	ite	eq
 8023674:	f004 040f 	andeq.w	r4, r4, #15
 8023678:	1124      	asrne	r4, r4, #4
 802367a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802367e:	b2e4      	uxtb	r4, r4
 8023680:	2d00      	cmp	r5, #0
 8023682:	f000 808f 	beq.w	80237a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023686:	2800      	cmp	r0, #0
 8023688:	f10c 0c01 	add.w	ip, ip, #1
 802368c:	db3c      	blt.n	8023708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802368e:	4580      	cmp	r8, r0
 8023690:	dd3a      	ble.n	8023708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023692:	f1bc 0f00 	cmp.w	ip, #0
 8023696:	db37      	blt.n	8023708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023698:	45e1      	cmp	r9, ip
 802369a:	dd35      	ble.n	8023708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802369c:	eb03 0b0e 	add.w	fp, r3, lr
 80236a0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80236a4:	f01b 0f01 	tst.w	fp, #1
 80236a8:	5c10      	ldrb	r0, [r2, r0]
 80236aa:	bf0c      	ite	eq
 80236ac:	f000 000f 	andeq.w	r0, r0, #15
 80236b0:	1100      	asrne	r0, r0, #4
 80236b2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80236b6:	b2c0      	uxtb	r0, r0
 80236b8:	f1ba 0f00 	cmp.w	sl, #0
 80236bc:	db26      	blt.n	802370c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80236be:	45d0      	cmp	r8, sl
 80236c0:	dd24      	ble.n	802370c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80236c2:	f1bc 0f00 	cmp.w	ip, #0
 80236c6:	db21      	blt.n	802370c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80236c8:	45e1      	cmp	r9, ip
 80236ca:	dd1f      	ble.n	802370c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80236cc:	b307      	cbz	r7, 8023710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80236ce:	3301      	adds	r3, #1
 80236d0:	449e      	add	lr, r3
 80236d2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80236d6:	f01e 0f01 	tst.w	lr, #1
 80236da:	5cd3      	ldrb	r3, [r2, r3]
 80236dc:	bf0c      	ite	eq
 80236de:	f003 030f 	andeq.w	r3, r3, #15
 80236e2:	111b      	asrne	r3, r3, #4
 80236e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80236e8:	b2db      	uxtb	r3, r3
 80236ea:	2f0f      	cmp	r7, #15
 80236ec:	d911      	bls.n	8023712 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80236ee:	4b32      	ldr	r3, [pc, #200]	; (80237b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80236f0:	f240 11a5 	movw	r1, #421	; 0x1a5
 80236f4:	4a31      	ldr	r2, [pc, #196]	; (80237bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80236f6:	4832      	ldr	r0, [pc, #200]	; (80237c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80236f8:	f002 f802 	bl	8025700 <__assert_func>
 80236fc:	2600      	movs	r6, #0
 80236fe:	e7a4      	b.n	802364a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023700:	2400      	movs	r4, #0
 8023702:	e7bd      	b.n	8023680 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023704:	463c      	mov	r4, r7
 8023706:	e7be      	b.n	8023686 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023708:	2000      	movs	r0, #0
 802370a:	e7d5      	b.n	80236b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 802370c:	2300      	movs	r3, #0
 802370e:	e7ec      	b.n	80236ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023710:	463b      	mov	r3, r7
 8023712:	2d0f      	cmp	r5, #15
 8023714:	d8eb      	bhi.n	80236ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023716:	b2bf      	uxth	r7, r7
 8023718:	b2ad      	uxth	r5, r5
 802371a:	fb07 f205 	mul.w	r2, r7, r5
 802371e:	013f      	lsls	r7, r7, #4
 8023720:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023724:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023728:	1abf      	subs	r7, r7, r2
 802372a:	b2ad      	uxth	r5, r5
 802372c:	b2bf      	uxth	r7, r7
 802372e:	ebac 0c05 	sub.w	ip, ip, r5
 8023732:	437c      	muls	r4, r7
 8023734:	fa1f fc8c 	uxth.w	ip, ip
 8023738:	fb06 440c 	mla	r4, r6, ip, r4
 802373c:	fb05 4400 	mla	r4, r5, r0, r4
 8023740:	fb02 4303 	mla	r3, r2, r3, r4
 8023744:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023748:	b353      	cbz	r3, 80237a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802374a:	4a1e      	ldr	r2, [pc, #120]	; (80237c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802374c:	7808      	ldrb	r0, [r1, #0]
 802374e:	6814      	ldr	r4, [r2, #0]
 8023750:	b29a      	uxth	r2, r3
 8023752:	43db      	mvns	r3, r3
 8023754:	b2e5      	uxtb	r5, r4
 8023756:	b2db      	uxtb	r3, r3
 8023758:	fb15 f502 	smulbb	r5, r5, r2
 802375c:	fb00 5003 	mla	r0, r0, r3, r5
 8023760:	b280      	uxth	r0, r0
 8023762:	1c45      	adds	r5, r0, #1
 8023764:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023768:	784d      	ldrb	r5, [r1, #1]
 802376a:	fb15 f503 	smulbb	r5, r5, r3
 802376e:	1200      	asrs	r0, r0, #8
 8023770:	7008      	strb	r0, [r1, #0]
 8023772:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023776:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802377a:	fb00 5002 	mla	r0, r0, r2, r5
 802377e:	b280      	uxth	r0, r0
 8023780:	1c45      	adds	r5, r0, #1
 8023782:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023786:	1200      	asrs	r0, r0, #8
 8023788:	7048      	strb	r0, [r1, #1]
 802378a:	7888      	ldrb	r0, [r1, #2]
 802378c:	fb10 f303 	smulbb	r3, r0, r3
 8023790:	fb04 3202 	mla	r2, r4, r2, r3
 8023794:	b292      	uxth	r2, r2
 8023796:	1c53      	adds	r3, r2, #1
 8023798:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802379c:	1212      	asrs	r2, r2, #8
 802379e:	708a      	strb	r2, [r1, #2]
 80237a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237a4:	2f0f      	cmp	r7, #15
 80237a6:	d8a2      	bhi.n	80236ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80237a8:	462b      	mov	r3, r5
 80237aa:	4628      	mov	r0, r5
 80237ac:	e7b3      	b.n	8023716 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80237ae:	2d00      	cmp	r5, #0
 80237b0:	d1a8      	bne.n	8023704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80237b2:	462c      	mov	r4, r5
 80237b4:	e7f8      	b.n	80237a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80237b6:	bf00      	nop
 80237b8:	0802b011 	.word	0x0802b011
 80237bc:	0802b506 	.word	0x0802b506
 80237c0:	0802b0da 	.word	0x0802b0da
 80237c4:	2000b394 	.word	0x2000b394

080237c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80237c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237cc:	ed2d 8b08 	vpush	{d8-d11}
 80237d0:	b095      	sub	sp, #84	; 0x54
 80237d2:	461c      	mov	r4, r3
 80237d4:	eeb0 aa40 	vmov.f32	s20, s0
 80237d8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80237dc:	eef0 9a60 	vmov.f32	s19, s1
 80237e0:	920e      	str	r2, [sp, #56]	; 0x38
 80237e2:	eeb0 9a41 	vmov.f32	s18, s2
 80237e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80237e8:	eeb0 8a62 	vmov.f32	s16, s5
 80237ec:	9307      	str	r3, [sp, #28]
 80237ee:	eef0 8a43 	vmov.f32	s17, s6
 80237f2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80237f6:	eef0 ba44 	vmov.f32	s23, s8
 80237fa:	9013      	str	r0, [sp, #76]	; 0x4c
 80237fc:	eeb0 ba64 	vmov.f32	s22, s9
 8023800:	9109      	str	r1, [sp, #36]	; 0x24
 8023802:	eef0 aa45 	vmov.f32	s21, s10
 8023806:	9308      	str	r3, [sp, #32]
 8023808:	6850      	ldr	r0, [r2, #4]
 802380a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802380e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8023812:	fb00 1803 	mla	r8, r0, r3, r1
 8023816:	6813      	ldr	r3, [r2, #0]
 8023818:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802381c:	4498      	add	r8, r3
 802381e:	9b07      	ldr	r3, [sp, #28]
 8023820:	3301      	adds	r3, #1
 8023822:	f023 0301 	bic.w	r3, r3, #1
 8023826:	930b      	str	r3, [sp, #44]	; 0x2c
 8023828:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802382a:	681f      	ldr	r7, [r3, #0]
 802382c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802382e:	2b00      	cmp	r3, #0
 8023830:	dc03      	bgt.n	802383a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023834:	2b00      	cmp	r3, #0
 8023836:	f340 8238 	ble.w	8023caa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802383a:	2c00      	cmp	r4, #0
 802383c:	f340 8109 	ble.w	8023a52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023840:	142a      	asrs	r2, r5, #16
 8023842:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023846:	d42b      	bmi.n	80238a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023848:	1c51      	adds	r1, r2, #1
 802384a:	9807      	ldr	r0, [sp, #28]
 802384c:	4288      	cmp	r0, r1
 802384e:	dd2a      	ble.n	80238a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023850:	2b00      	cmp	r3, #0
 8023852:	db28      	blt.n	80238a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023854:	1c59      	adds	r1, r3, #1
 8023856:	9808      	ldr	r0, [sp, #32]
 8023858:	4288      	cmp	r0, r1
 802385a:	dd24      	ble.n	80238a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802385c:	1e63      	subs	r3, r4, #1
 802385e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023860:	fb02 5203 	mla	r2, r2, r3, r5
 8023864:	1412      	asrs	r2, r2, #16
 8023866:	d429      	bmi.n	80238bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023868:	3201      	adds	r2, #1
 802386a:	9907      	ldr	r1, [sp, #28]
 802386c:	4291      	cmp	r1, r2
 802386e:	dd25      	ble.n	80238bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023870:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023872:	fb02 6303 	mla	r3, r2, r3, r6
 8023876:	141b      	asrs	r3, r3, #16
 8023878:	d420      	bmi.n	80238bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802387a:	3301      	adds	r3, #1
 802387c:	9a08      	ldr	r2, [sp, #32]
 802387e:	429a      	cmp	r2, r3
 8023880:	dd1c      	ble.n	80238bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023882:	f108 0e03 	add.w	lr, r8, #3
 8023886:	46a1      	mov	r9, r4
 8023888:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802388c:	f1b9 0f00 	cmp.w	r9, #0
 8023890:	f300 8155 	bgt.w	8023b3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8023894:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023898:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802389c:	44a0      	add	r8, r4
 802389e:	e0da      	b.n	8023a56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80238a0:	1c50      	adds	r0, r2, #1
 80238a2:	f040 80ce 	bne.w	8023a42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80238a6:	9907      	ldr	r1, [sp, #28]
 80238a8:	4291      	cmp	r1, r2
 80238aa:	f340 80ca 	ble.w	8023a42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80238ae:	1c59      	adds	r1, r3, #1
 80238b0:	f2c0 80c7 	blt.w	8023a42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80238b4:	9a08      	ldr	r2, [sp, #32]
 80238b6:	4293      	cmp	r3, r2
 80238b8:	f280 80c3 	bge.w	8023a42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80238bc:	46a3      	mov	fp, r4
 80238be:	46c1      	mov	r9, r8
 80238c0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80238c4:	f1bb 0f00 	cmp.w	fp, #0
 80238c8:	dde4      	ble.n	8023894 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80238ca:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80238ce:	1428      	asrs	r0, r5, #16
 80238d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80238d4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80238d8:	920a      	str	r2, [sp, #40]	; 0x28
 80238da:	f100 8116 	bmi.w	8023b0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80238de:	f100 0c01 	add.w	ip, r0, #1
 80238e2:	9a07      	ldr	r2, [sp, #28]
 80238e4:	4562      	cmp	r2, ip
 80238e6:	f340 8112 	ble.w	8023b0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	f2c0 810f 	blt.w	8023b0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80238f0:	f103 0c01 	add.w	ip, r3, #1
 80238f4:	9a08      	ldr	r2, [sp, #32]
 80238f6:	4562      	cmp	r2, ip
 80238f8:	f340 8109 	ble.w	8023b0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80238fc:	fb03 030a 	mla	r3, r3, sl, r0
 8023900:	0858      	lsrs	r0, r3, #1
 8023902:	07da      	lsls	r2, r3, #31
 8023904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023906:	5c38      	ldrb	r0, [r7, r0]
 8023908:	bf54      	ite	pl
 802390a:	f000 000f 	andpl.w	r0, r0, #15
 802390e:	1100      	asrmi	r0, r0, #4
 8023910:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023914:	b2c0      	uxtb	r0, r0
 8023916:	2a00      	cmp	r2, #0
 8023918:	f000 80dd 	beq.w	8023ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 802391c:	f103 0e01 	add.w	lr, r3, #1
 8023920:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023924:	f01e 0f01 	tst.w	lr, #1
 8023928:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802392c:	bf0c      	ite	eq
 802392e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023932:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023936:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802393a:	fa5f fc8c 	uxtb.w	ip, ip
 802393e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023942:	b301      	cbz	r1, 8023986 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023944:	4453      	add	r3, sl
 8023946:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802394a:	07da      	lsls	r2, r3, #31
 802394c:	f103 0301 	add.w	r3, r3, #1
 8023950:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023954:	bf54      	ite	pl
 8023956:	f00c 0c0f 	andpl.w	ip, ip, #15
 802395a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802395e:	07da      	lsls	r2, r3, #31
 8023960:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023964:	fa5f fc8c 	uxtb.w	ip, ip
 8023968:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802396c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023970:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023974:	bf54      	ite	pl
 8023976:	f00c 030f 	andpl.w	r3, ip, #15
 802397a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802397e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023982:	b2db      	uxtb	r3, r3
 8023984:	9310      	str	r3, [sp, #64]	; 0x40
 8023986:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802398a:	b289      	uxth	r1, r1
 802398c:	fb02 f301 	mul.w	r3, r2, r1
 8023990:	0112      	lsls	r2, r2, #4
 8023992:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023996:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802399a:	1ad2      	subs	r2, r2, r3
 802399c:	fa1f fe81 	uxth.w	lr, r1
 80239a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80239a2:	b292      	uxth	r2, r2
 80239a4:	ebac 0c0e 	sub.w	ip, ip, lr
 80239a8:	434a      	muls	r2, r1
 80239aa:	fa1f fc8c 	uxth.w	ip, ip
 80239ae:	fb00 200c 	mla	r0, r0, ip, r2
 80239b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80239b4:	fb0e 0002 	mla	r0, lr, r2, r0
 80239b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80239ba:	fb03 0002 	mla	r0, r3, r2, r0
 80239be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80239c2:	b3a8      	cbz	r0, 8023a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80239c4:	4bbb      	ldr	r3, [pc, #748]	; (8023cb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80239c6:	28ff      	cmp	r0, #255	; 0xff
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80239ce:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80239d2:	b2db      	uxtb	r3, r3
 80239d4:	f000 8092 	beq.w	8023afc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80239d8:	b282      	uxth	r2, r0
 80239da:	43c0      	mvns	r0, r0
 80239dc:	f899 e000 	ldrb.w	lr, [r9]
 80239e0:	fb13 f302 	smulbb	r3, r3, r2
 80239e4:	b2c0      	uxtb	r0, r0
 80239e6:	fb11 f102 	smulbb	r1, r1, r2
 80239ea:	fb0e 3300 	mla	r3, lr, r0, r3
 80239ee:	fb1c f202 	smulbb	r2, ip, r2
 80239f2:	b29b      	uxth	r3, r3
 80239f4:	f103 0e01 	add.w	lr, r3, #1
 80239f8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80239fc:	121b      	asrs	r3, r3, #8
 80239fe:	f889 3000 	strb.w	r3, [r9]
 8023a02:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023a06:	fb03 1100 	mla	r1, r3, r0, r1
 8023a0a:	b289      	uxth	r1, r1
 8023a0c:	1c4b      	adds	r3, r1, #1
 8023a0e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023a12:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023a16:	fb03 2000 	mla	r0, r3, r0, r2
 8023a1a:	1209      	asrs	r1, r1, #8
 8023a1c:	b280      	uxth	r0, r0
 8023a1e:	f889 1001 	strb.w	r1, [r9, #1]
 8023a22:	f100 0c01 	add.w	ip, r0, #1
 8023a26:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8023a2a:	1200      	asrs	r0, r0, #8
 8023a2c:	f889 0002 	strb.w	r0, [r9, #2]
 8023a30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a32:	f109 0903 	add.w	r9, r9, #3
 8023a36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a3a:	441d      	add	r5, r3
 8023a3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a3e:	441e      	add	r6, r3
 8023a40:	e740      	b.n	80238c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023a42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a44:	3c01      	subs	r4, #1
 8023a46:	f108 0803 	add.w	r8, r8, #3
 8023a4a:	441d      	add	r5, r3
 8023a4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a4e:	441e      	add	r6, r3
 8023a50:	e6f3      	b.n	802383a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023a52:	f47f af03 	bne.w	802385c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	f340 8126 	ble.w	8023caa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a64:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a68:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a6c:	eef0 6a48 	vmov.f32	s13, s16
 8023a70:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a74:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a7c:	ee16 5a90 	vmov	r5, s13
 8023a80:	eef0 6a68 	vmov.f32	s13, s17
 8023a84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a88:	ee16 6a90 	vmov	r6, s13
 8023a8c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023a90:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023a94:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023a98:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023a9c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023aa0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023aa4:	ee18 2a10 	vmov	r2, s16
 8023aa8:	eeb0 8a47 	vmov.f32	s16, s14
 8023aac:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ab0:	ee18 2a90 	vmov	r2, s17
 8023ab4:	9329      	str	r3, [sp, #164]	; 0xa4
 8023ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ab8:	eef0 8a67 	vmov.f32	s17, s15
 8023abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ac0:	932a      	str	r3, [sp, #168]	; 0xa8
 8023ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ac6:	3b01      	subs	r3, #1
 8023ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8023aca:	bf08      	it	eq
 8023acc:	4614      	moveq	r4, r2
 8023ace:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ad0:	bf18      	it	ne
 8023ad2:	461c      	movne	r4, r3
 8023ad4:	e6aa      	b.n	802382c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023ad6:	2900      	cmp	r1, #0
 8023ad8:	f43f af55 	beq.w	8023986 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023adc:	4453      	add	r3, sl
 8023ade:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023ae2:	07db      	lsls	r3, r3, #31
 8023ae4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023ae8:	bf54      	ite	pl
 8023aea:	f00c 030f 	andpl.w	r3, ip, #15
 8023aee:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023af2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023af6:	b2db      	uxtb	r3, r3
 8023af8:	930c      	str	r3, [sp, #48]	; 0x30
 8023afa:	e744      	b.n	8023986 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023afc:	f889 3000 	strb.w	r3, [r9]
 8023b00:	f889 1001 	strb.w	r1, [r9, #1]
 8023b04:	f889 c002 	strb.w	ip, [r9, #2]
 8023b08:	e792      	b.n	8023a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023b0a:	1c42      	adds	r2, r0, #1
 8023b0c:	d190      	bne.n	8023a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023b0e:	9a07      	ldr	r2, [sp, #28]
 8023b10:	4282      	cmp	r2, r0
 8023b12:	dd8d      	ble.n	8023a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023b14:	1c5a      	adds	r2, r3, #1
 8023b16:	db8b      	blt.n	8023a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023b18:	9a08      	ldr	r2, [sp, #32]
 8023b1a:	429a      	cmp	r2, r3
 8023b1c:	dd88      	ble.n	8023a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b20:	9105      	str	r1, [sp, #20]
 8023b22:	4649      	mov	r1, r9
 8023b24:	9002      	str	r0, [sp, #8]
 8023b26:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023b28:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023b2c:	9b08      	ldr	r3, [sp, #32]
 8023b2e:	463a      	mov	r2, r7
 8023b30:	9301      	str	r3, [sp, #4]
 8023b32:	9b07      	ldr	r3, [sp, #28]
 8023b34:	9300      	str	r3, [sp, #0]
 8023b36:	4653      	mov	r3, sl
 8023b38:	f7ff fd64 	bl	8023604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023b3c:	e778      	b.n	8023a30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023b3e:	142a      	asrs	r2, r5, #16
 8023b40:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023b44:	1433      	asrs	r3, r6, #16
 8023b46:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023b4a:	fb0a 2303 	mla	r3, sl, r3, r2
 8023b4e:	085a      	lsrs	r2, r3, #1
 8023b50:	07d9      	lsls	r1, r3, #31
 8023b52:	5cba      	ldrb	r2, [r7, r2]
 8023b54:	bf54      	ite	pl
 8023b56:	f002 020f 	andpl.w	r2, r2, #15
 8023b5a:	1112      	asrmi	r2, r2, #4
 8023b5c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023b60:	b2d2      	uxtb	r2, r2
 8023b62:	2800      	cmp	r0, #0
 8023b64:	f000 808a 	beq.w	8023c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023b68:	f103 0b01 	add.w	fp, r3, #1
 8023b6c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023b70:	f01b 0f01 	tst.w	fp, #1
 8023b74:	5c79      	ldrb	r1, [r7, r1]
 8023b76:	bf0c      	ite	eq
 8023b78:	f001 010f 	andeq.w	r1, r1, #15
 8023b7c:	1109      	asrne	r1, r1, #4
 8023b7e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023b82:	b2c9      	uxtb	r1, r1
 8023b84:	9111      	str	r1, [sp, #68]	; 0x44
 8023b86:	f1bc 0f00 	cmp.w	ip, #0
 8023b8a:	d019      	beq.n	8023bc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023b8c:	4453      	add	r3, sl
 8023b8e:	0859      	lsrs	r1, r3, #1
 8023b90:	f013 0f01 	tst.w	r3, #1
 8023b94:	f103 0301 	add.w	r3, r3, #1
 8023b98:	5c79      	ldrb	r1, [r7, r1]
 8023b9a:	bf0c      	ite	eq
 8023b9c:	f001 010f 	andeq.w	r1, r1, #15
 8023ba0:	1109      	asrne	r1, r1, #4
 8023ba2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023ba6:	b2c9      	uxtb	r1, r1
 8023ba8:	910d      	str	r1, [sp, #52]	; 0x34
 8023baa:	0859      	lsrs	r1, r3, #1
 8023bac:	07db      	lsls	r3, r3, #31
 8023bae:	5c79      	ldrb	r1, [r7, r1]
 8023bb0:	bf54      	ite	pl
 8023bb2:	f001 010f 	andpl.w	r1, r1, #15
 8023bb6:	1109      	asrmi	r1, r1, #4
 8023bb8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023bbc:	b2c9      	uxtb	r1, r1
 8023bbe:	9112      	str	r1, [sp, #72]	; 0x48
 8023bc0:	b280      	uxth	r0, r0
 8023bc2:	fa1f fc8c 	uxth.w	ip, ip
 8023bc6:	fb00 f30c 	mul.w	r3, r0, ip
 8023bca:	0100      	lsls	r0, r0, #4
 8023bcc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023bd0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023bd4:	1ac0      	subs	r0, r0, r3
 8023bd6:	fa1f fc8c 	uxth.w	ip, ip
 8023bda:	b280      	uxth	r0, r0
 8023bdc:	eba1 010c 	sub.w	r1, r1, ip
 8023be0:	fa1f fb81 	uxth.w	fp, r1
 8023be4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023be6:	4348      	muls	r0, r1
 8023be8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023bea:	fb02 020b 	mla	r2, r2, fp, r0
 8023bee:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023bf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023bf4:	fb03 c302 	mla	r3, r3, r2, ip
 8023bf8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bfc:	b3ab      	cbz	r3, 8023c6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023bfe:	4a2d      	ldr	r2, [pc, #180]	; (8023cb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023c00:	2bff      	cmp	r3, #255	; 0xff
 8023c02:	6811      	ldr	r1, [r2, #0]
 8023c04:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023c08:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023c0c:	b2c9      	uxtb	r1, r1
 8023c0e:	d045      	beq.n	8023c9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023c10:	b298      	uxth	r0, r3
 8023c12:	43db      	mvns	r3, r3
 8023c14:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023c18:	fb11 f100 	smulbb	r1, r1, r0
 8023c1c:	b2db      	uxtb	r3, r3
 8023c1e:	fb1c fc00 	smulbb	ip, ip, r0
 8023c22:	fb02 1103 	mla	r1, r2, r3, r1
 8023c26:	fb1b f000 	smulbb	r0, fp, r0
 8023c2a:	b289      	uxth	r1, r1
 8023c2c:	1c4a      	adds	r2, r1, #1
 8023c2e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023c32:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023c36:	fb02 cc03 	mla	ip, r2, r3, ip
 8023c3a:	1209      	asrs	r1, r1, #8
 8023c3c:	fa1f fc8c 	uxth.w	ip, ip
 8023c40:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023c44:	f10c 0201 	add.w	r2, ip, #1
 8023c48:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023c4c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023c50:	fb02 0303 	mla	r3, r2, r3, r0
 8023c54:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023c58:	b29b      	uxth	r3, r3
 8023c5a:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023c5e:	1c5a      	adds	r2, r3, #1
 8023c60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023c64:	121b      	asrs	r3, r3, #8
 8023c66:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023c6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023c6c:	f10e 0e03 	add.w	lr, lr, #3
 8023c70:	f109 39ff 	add.w	r9, r9, #4294967295
 8023c74:	441d      	add	r5, r3
 8023c76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c78:	441e      	add	r6, r3
 8023c7a:	e607      	b.n	802388c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023c7c:	f1bc 0f00 	cmp.w	ip, #0
 8023c80:	d09e      	beq.n	8023bc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023c82:	4453      	add	r3, sl
 8023c84:	0859      	lsrs	r1, r3, #1
 8023c86:	07db      	lsls	r3, r3, #31
 8023c88:	5c79      	ldrb	r1, [r7, r1]
 8023c8a:	bf54      	ite	pl
 8023c8c:	f001 010f 	andpl.w	r1, r1, #15
 8023c90:	1109      	asrmi	r1, r1, #4
 8023c92:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023c96:	b2c9      	uxtb	r1, r1
 8023c98:	910d      	str	r1, [sp, #52]	; 0x34
 8023c9a:	e791      	b.n	8023bc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023c9c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023ca0:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023ca4:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023ca8:	e7df      	b.n	8023c6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023caa:	b015      	add	sp, #84	; 0x54
 8023cac:	ecbd 8b08 	vpop	{d8-d11}
 8023cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cb4:	2000b394 	.word	0x2000b394

08023cb8 <CRC_Lock>:
 8023cb8:	4a1d      	ldr	r2, [pc, #116]	; (8023d30 <CRC_Lock+0x78>)
 8023cba:	b530      	push	{r4, r5, lr}
 8023cbc:	6813      	ldr	r3, [r2, #0]
 8023cbe:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023cc2:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023cc6:	f023 0301 	bic.w	r3, r3, #1
 8023cca:	6013      	str	r3, [r2, #0]
 8023ccc:	4b19      	ldr	r3, [pc, #100]	; (8023d34 <CRC_Lock+0x7c>)
 8023cce:	681a      	ldr	r2, [r3, #0]
 8023cd0:	4022      	ands	r2, r4
 8023cd2:	42aa      	cmp	r2, r5
 8023cd4:	d005      	beq.n	8023ce2 <CRC_Lock+0x2a>
 8023cd6:	681b      	ldr	r3, [r3, #0]
 8023cd8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023cdc:	4023      	ands	r3, r4
 8023cde:	4293      	cmp	r3, r2
 8023ce0:	d11d      	bne.n	8023d1e <CRC_Lock+0x66>
 8023ce2:	4b15      	ldr	r3, [pc, #84]	; (8023d38 <CRC_Lock+0x80>)
 8023ce4:	681b      	ldr	r3, [r3, #0]
 8023ce6:	b9d3      	cbnz	r3, 8023d1e <CRC_Lock+0x66>
 8023ce8:	4a14      	ldr	r2, [pc, #80]	; (8023d3c <CRC_Lock+0x84>)
 8023cea:	6813      	ldr	r3, [r2, #0]
 8023cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023cf0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023cf4:	d006      	beq.n	8023d04 <CRC_Lock+0x4c>
 8023cf6:	6813      	ldr	r3, [r2, #0]
 8023cf8:	f240 4283 	movw	r2, #1155	; 0x483
 8023cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023d00:	4293      	cmp	r3, r2
 8023d02:	d10c      	bne.n	8023d1e <CRC_Lock+0x66>
 8023d04:	4b0e      	ldr	r3, [pc, #56]	; (8023d40 <CRC_Lock+0x88>)
 8023d06:	2201      	movs	r2, #1
 8023d08:	601a      	str	r2, [r3, #0]
 8023d0a:	681a      	ldr	r2, [r3, #0]
 8023d0c:	2a00      	cmp	r2, #0
 8023d0e:	d1fc      	bne.n	8023d0a <CRC_Lock+0x52>
 8023d10:	4b0c      	ldr	r3, [pc, #48]	; (8023d44 <CRC_Lock+0x8c>)
 8023d12:	6018      	str	r0, [r3, #0]
 8023d14:	6818      	ldr	r0, [r3, #0]
 8023d16:	1a43      	subs	r3, r0, r1
 8023d18:	4258      	negs	r0, r3
 8023d1a:	4158      	adcs	r0, r3
 8023d1c:	bd30      	pop	{r4, r5, pc}
 8023d1e:	4b0a      	ldr	r3, [pc, #40]	; (8023d48 <CRC_Lock+0x90>)
 8023d20:	2201      	movs	r2, #1
 8023d22:	601a      	str	r2, [r3, #0]
 8023d24:	681a      	ldr	r2, [r3, #0]
 8023d26:	2a00      	cmp	r2, #0
 8023d28:	d1fc      	bne.n	8023d24 <CRC_Lock+0x6c>
 8023d2a:	4b08      	ldr	r3, [pc, #32]	; (8023d4c <CRC_Lock+0x94>)
 8023d2c:	e7f1      	b.n	8023d12 <CRC_Lock+0x5a>
 8023d2e:	bf00      	nop
 8023d30:	e0002000 	.word	0xe0002000
 8023d34:	e000ed00 	.word	0xe000ed00
 8023d38:	e0042000 	.word	0xe0042000
 8023d3c:	5c001000 	.word	0x5c001000
 8023d40:	58024c08 	.word	0x58024c08
 8023d44:	58024c00 	.word	0x58024c00
 8023d48:	40023008 	.word	0x40023008
 8023d4c:	40023000 	.word	0x40023000

08023d50 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023d50:	6101      	str	r1, [r0, #16]
 8023d52:	4770      	bx	lr

08023d54 <_ZN8touchgfx8Gestures4tickEv>:
 8023d54:	7b83      	ldrb	r3, [r0, #14]
 8023d56:	b14b      	cbz	r3, 8023d6c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023d58:	8903      	ldrh	r3, [r0, #8]
 8023d5a:	3301      	adds	r3, #1
 8023d5c:	b29b      	uxth	r3, r3
 8023d5e:	2b07      	cmp	r3, #7
 8023d60:	8103      	strh	r3, [r0, #8]
 8023d62:	bf81      	itttt	hi
 8023d64:	2300      	movhi	r3, #0
 8023d66:	8143      	strhhi	r3, [r0, #10]
 8023d68:	8183      	strhhi	r3, [r0, #12]
 8023d6a:	7383      	strbhi	r3, [r0, #14]
 8023d6c:	4770      	bx	lr
	...

08023d70 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023d70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023d74:	4604      	mov	r4, r0
 8023d76:	4698      	mov	r8, r3
 8023d78:	8880      	ldrh	r0, [r0, #4]
 8023d7a:	4617      	mov	r7, r2
 8023d7c:	4b1d      	ldr	r3, [pc, #116]	; (8023df4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023d7e:	460e      	mov	r6, r1
 8023d80:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023d84:	eba8 0000 	sub.w	r0, r8, r0
 8023d88:	9300      	str	r3, [sp, #0]
 8023d8a:	2300      	movs	r3, #0
 8023d8c:	b280      	uxth	r0, r0
 8023d8e:	8aa2      	ldrh	r2, [r4, #20]
 8023d90:	f88d 3004 	strb.w	r3, [sp, #4]
 8023d94:	b203      	sxth	r3, r0
 8023d96:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023d9a:	88e1      	ldrh	r1, [r4, #6]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023da2:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023da6:	bfb8      	it	lt
 8023da8:	4240      	neglt	r0, r0
 8023daa:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023dae:	bfb8      	it	lt
 8023db0:	b203      	sxthlt	r3, r0
 8023db2:	4293      	cmp	r3, r2
 8023db4:	dc08      	bgt.n	8023dc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023db6:	1a69      	subs	r1, r5, r1
 8023db8:	b289      	uxth	r1, r1
 8023dba:	b20b      	sxth	r3, r1
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	bfbc      	itt	lt
 8023dc0:	4249      	neglt	r1, r1
 8023dc2:	b20b      	sxthlt	r3, r1
 8023dc4:	429a      	cmp	r2, r3
 8023dc6:	da13      	bge.n	8023df0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023dc8:	6920      	ldr	r0, [r4, #16]
 8023dca:	4669      	mov	r1, sp
 8023dcc:	eba8 0606 	sub.w	r6, r8, r6
 8023dd0:	1bef      	subs	r7, r5, r7
 8023dd2:	6803      	ldr	r3, [r0, #0]
 8023dd4:	685b      	ldr	r3, [r3, #4]
 8023dd6:	4798      	blx	r3
 8023dd8:	2300      	movs	r3, #0
 8023dda:	2001      	movs	r0, #1
 8023ddc:	8166      	strh	r6, [r4, #10]
 8023dde:	8123      	strh	r3, [r4, #8]
 8023de0:	81a7      	strh	r7, [r4, #12]
 8023de2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023de6:	80e5      	strh	r5, [r4, #6]
 8023de8:	73a0      	strb	r0, [r4, #14]
 8023dea:	b004      	add	sp, #16
 8023dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023df0:	2000      	movs	r0, #0
 8023df2:	e7fa      	b.n	8023dea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023df4:	0802a46c 	.word	0x0802a46c

08023df8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023dfa:	461e      	mov	r6, r3
 8023dfc:	1e4b      	subs	r3, r1, #1
 8023dfe:	b085      	sub	sp, #20
 8023e00:	4604      	mov	r4, r0
 8023e02:	2b01      	cmp	r3, #1
 8023e04:	460d      	mov	r5, r1
 8023e06:	4617      	mov	r7, r2
 8023e08:	d84b      	bhi.n	8023ea2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023e0a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023e0e:	1cd3      	adds	r3, r2, #3
 8023e10:	b29b      	uxth	r3, r3
 8023e12:	2b06      	cmp	r3, #6
 8023e14:	d916      	bls.n	8023e44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023e16:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023eb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023e1a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023e1e:	f8cd c004 	str.w	ip, [sp, #4]
 8023e22:	f04f 0c00 	mov.w	ip, #0
 8023e26:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023e2a:	6900      	ldr	r0, [r0, #16]
 8023e2c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023e30:	a901      	add	r1, sp, #4
 8023e32:	f88d c008 	strb.w	ip, [sp, #8]
 8023e36:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023e3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e3e:	6803      	ldr	r3, [r0, #0]
 8023e40:	689b      	ldr	r3, [r3, #8]
 8023e42:	4798      	blx	r3
 8023e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023e48:	1cd3      	adds	r3, r2, #3
 8023e4a:	b29b      	uxth	r3, r3
 8023e4c:	2b06      	cmp	r3, #6
 8023e4e:	d916      	bls.n	8023e7e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023e50:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023eb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023e54:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023e58:	f8cd c004 	str.w	ip, [sp, #4]
 8023e5c:	f04f 0c01 	mov.w	ip, #1
 8023e60:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023e64:	6920      	ldr	r0, [r4, #16]
 8023e66:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023e6a:	a901      	add	r1, sp, #4
 8023e6c:	f88d c008 	strb.w	ip, [sp, #8]
 8023e70:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023e74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e78:	6803      	ldr	r3, [r0, #0]
 8023e7a:	689b      	ldr	r3, [r3, #8]
 8023e7c:	4798      	blx	r3
 8023e7e:	4b0b      	ldr	r3, [pc, #44]	; (8023eac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023e80:	a901      	add	r1, sp, #4
 8023e82:	6920      	ldr	r0, [r4, #16]
 8023e84:	9301      	str	r3, [sp, #4]
 8023e86:	2300      	movs	r3, #0
 8023e88:	f88d 5008 	strb.w	r5, [sp, #8]
 8023e8c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023e90:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023e94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e98:	6803      	ldr	r3, [r0, #0]
 8023e9a:	681b      	ldr	r3, [r3, #0]
 8023e9c:	4798      	blx	r3
 8023e9e:	b005      	add	sp, #20
 8023ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ea2:	2900      	cmp	r1, #0
 8023ea4:	d1eb      	bne.n	8023e7e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023ea6:	80a2      	strh	r2, [r4, #4]
 8023ea8:	80c6      	strh	r6, [r0, #6]
 8023eaa:	e7e8      	b.n	8023e7e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023eac:	0802a458 	.word	0x0802a458
 8023eb0:	0802a480 	.word	0x0802a480

08023eb4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8023eb4:	10c9      	asrs	r1, r1, #3
 8023eb6:	2900      	cmp	r1, #0
 8023eb8:	bfb8      	it	lt
 8023eba:	4249      	neglt	r1, r1
 8023ebc:	2801      	cmp	r0, #1
 8023ebe:	d108      	bne.n	8023ed2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8023ec0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023ec4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023ec8:	4601      	mov	r1, r0
 8023eca:	dd02      	ble.n	8023ed2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8023ecc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023ed0:	4770      	bx	lr
 8023ed2:	29ff      	cmp	r1, #255	; 0xff
 8023ed4:	bfa8      	it	ge
 8023ed6:	21ff      	movge	r1, #255	; 0xff
 8023ed8:	4608      	mov	r0, r1
 8023eda:	4770      	bx	lr

08023edc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ee0:	688c      	ldr	r4, [r1, #8]
 8023ee2:	b087      	sub	sp, #28
 8023ee4:	4607      	mov	r7, r0
 8023ee6:	2c00      	cmp	r4, #0
 8023ee8:	db2b      	blt.n	8023f42 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023eea:	6803      	ldr	r3, [r0, #0]
 8023eec:	691a      	ldr	r2, [r3, #16]
 8023eee:	42a2      	cmp	r2, r4
 8023ef0:	dd27      	ble.n	8023f42 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023ef2:	685a      	ldr	r2, [r3, #4]
 8023ef4:	695e      	ldr	r6, [r3, #20]
 8023ef6:	68cd      	ldr	r5, [r1, #12]
 8023ef8:	fb06 2604 	mla	r6, r6, r4, r2
 8023efc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023f00:	698a      	ldr	r2, [r1, #24]
 8023f02:	f893 a008 	ldrb.w	sl, [r3, #8]
 8023f06:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023f0a:	9205      	str	r2, [sp, #20]
 8023f0c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023f10:	9b05      	ldr	r3, [sp, #20]
 8023f12:	6839      	ldr	r1, [r7, #0]
 8023f14:	eb03 0c02 	add.w	ip, r3, r2
 8023f18:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023f1c:	68c9      	ldr	r1, [r1, #12]
 8023f1e:	1898      	adds	r0, r3, r2
 8023f20:	4288      	cmp	r0, r1
 8023f22:	db02      	blt.n	8023f2a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023f24:	1a8b      	subs	r3, r1, r2
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	dd09      	ble.n	8023f3e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023f2a:	6878      	ldr	r0, [r7, #4]
 8023f2c:	6801      	ldr	r1, [r0, #0]
 8023f2e:	9400      	str	r4, [sp, #0]
 8023f30:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023f34:	4653      	mov	r3, sl
 8023f36:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023f3a:	4631      	mov	r1, r6
 8023f3c:	47d8      	blx	fp
 8023f3e:	3d01      	subs	r5, #1
 8023f40:	d1e4      	bne.n	8023f0c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8023f42:	b007      	add	sp, #28
 8023f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f48 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023f48:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023f4c:	b90b      	cbnz	r3, 8023f52 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8023f4e:	f001 b970 	b.w	8025232 <_ZN8touchgfx7Outline6lineToEii>
 8023f52:	4770      	bx	lr

08023f54 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023f58:	4604      	mov	r4, r0
 8023f5a:	2600      	movs	r6, #0
 8023f5c:	4b8e      	ldr	r3, [pc, #568]	; (8024198 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8023f5e:	f100 0518 	add.w	r5, r0, #24
 8023f62:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8023f66:	b086      	sub	sp, #24
 8023f68:	4690      	mov	r8, r2
 8023f6a:	e9c0 3100 	strd	r3, r1, [r0]
 8023f6e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8023f72:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8023f76:	4628      	mov	r0, r5
 8023f78:	f001 fb7a 	bl	8025670 <_ZN8touchgfx15RenderingBufferC1Ev>
 8023f7c:	4638      	mov	r0, r7
 8023f7e:	f000 fb41 	bl	8024604 <_ZN8touchgfx7OutlineC1Ev>
 8023f82:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8023f86:	f001 fb1f 	bl	80255c8 <_ZN8touchgfx8ScanlineC1Ev>
 8023f8a:	2301      	movs	r3, #1
 8023f8c:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8023f90:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8023f94:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8023f98:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8023f9c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8023fa0:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8023fa4:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8023fa8:	f7f4 fa1c 	bl	80183e4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023fac:	b928      	cbnz	r0, 8023fba <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8023fae:	4b7b      	ldr	r3, [pc, #492]	; (802419c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8023fb0:	2118      	movs	r1, #24
 8023fb2:	4a7b      	ldr	r2, [pc, #492]	; (80241a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023fb4:	487b      	ldr	r0, [pc, #492]	; (80241a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023fb6:	f001 fba3 	bl	8025700 <__assert_func>
 8023fba:	f9b8 2000 	ldrsh.w	r2, [r8]
 8023fbe:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8023fc2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023fc6:	4410      	add	r0, r2
 8023fc8:	9602      	str	r6, [sp, #8]
 8023fca:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8023fce:	b280      	uxth	r0, r0
 8023fd0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023fd4:	fa0f fa80 	sxth.w	sl, r0
 8023fd8:	f1ba 0f00 	cmp.w	sl, #0
 8023fdc:	dd70      	ble.n	80240c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023fde:	4591      	cmp	r9, r2
 8023fe0:	dd6e      	ble.n	80240c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023fe2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023fe6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023fea:	440b      	add	r3, r1
 8023fec:	b29b      	uxth	r3, r3
 8023fee:	b21e      	sxth	r6, r3
 8023ff0:	2e00      	cmp	r6, #0
 8023ff2:	dd65      	ble.n	80240c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023ff4:	458e      	cmp	lr, r1
 8023ff6:	dd63      	ble.n	80240c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023ff8:	45d1      	cmp	r9, sl
 8023ffa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8023ffe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024002:	bfb8      	it	lt
 8024004:	fa1f f089 	uxthlt.w	r0, r9
 8024008:	45b6      	cmp	lr, r6
 802400a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802400e:	bfb8      	it	lt
 8024010:	fa1f f38e 	uxthlt.w	r3, lr
 8024014:	1a80      	subs	r0, r0, r2
 8024016:	f8ad 100a 	strh.w	r1, [sp, #10]
 802401a:	1a5b      	subs	r3, r3, r1
 802401c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8024020:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024024:	f10d 0808 	add.w	r8, sp, #8
 8024028:	ae04      	add	r6, sp, #16
 802402a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802402e:	e886 0003 	stmia.w	r6, {r0, r1}
 8024032:	f8dc 3000 	ldr.w	r3, [ip]
 8024036:	4660      	mov	r0, ip
 8024038:	4631      	mov	r1, r6
 802403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802403c:	4798      	blx	r3
 802403e:	6861      	ldr	r1, [r4, #4]
 8024040:	4640      	mov	r0, r8
 8024042:	3104      	adds	r1, #4
 8024044:	f7f5 f83a 	bl	80190bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024048:	4630      	mov	r0, r6
 802404a:	f7f5 f84f 	bl	80190ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802404e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024052:	f7f4 f957 	bl	8018304 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024056:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802405a:	4638      	mov	r0, r7
 802405c:	f000 faae 	bl	80245bc <_ZN8touchgfx7Outline5resetEv>
 8024060:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024064:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024068:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802406c:	015b      	lsls	r3, r3, #5
 802406e:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8024072:	0152      	lsls	r2, r2, #5
 8024074:	60e3      	str	r3, [r4, #12]
 8024076:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802407a:	60a2      	str	r2, [r4, #8]
 802407c:	015b      	lsls	r3, r3, #5
 802407e:	6123      	str	r3, [r4, #16]
 8024080:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8024084:	015b      	lsls	r3, r3, #5
 8024086:	6163      	str	r3, [r4, #20]
 8024088:	4b47      	ldr	r3, [pc, #284]	; (80241a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802408a:	6818      	ldr	r0, [r3, #0]
 802408c:	6803      	ldr	r3, [r0, #0]
 802408e:	6a1b      	ldr	r3, [r3, #32]
 8024090:	4798      	blx	r3
 8024092:	4606      	mov	r6, r0
 8024094:	f7e8 fb54 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 8024098:	6803      	ldr	r3, [r0, #0]
 802409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802409c:	4798      	blx	r3
 802409e:	4607      	mov	r7, r0
 80240a0:	f7e8 fb4e 	bl	800c740 <_ZN8touchgfx3HAL3lcdEv>
 80240a4:	6803      	ldr	r3, [r0, #0]
 80240a6:	6a1b      	ldr	r3, [r3, #32]
 80240a8:	4798      	blx	r3
 80240aa:	280c      	cmp	r0, #12
 80240ac:	d854      	bhi.n	8024158 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80240ae:	e8df f000 	tbb	[pc, r0]
 80240b2:	554b      	.short	0x554b
 80240b4:	2b6e0a66 	.word	0x2b6e0a66
 80240b8:	5f5f5f3b 	.word	0x5f5f5f3b
 80240bc:	5f5f      	.short	0x5f5f
 80240be:	6e          	.byte	0x6e
 80240bf:	00          	.byte	0x00
 80240c0:	2300      	movs	r3, #0
 80240c2:	9303      	str	r3, [sp, #12]
 80240c4:	e7ae      	b.n	8024024 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80240c6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80240ca:	2108      	movs	r1, #8
 80240cc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80240d0:	fb92 f1f1 	sdiv	r1, r2, r1
 80240d4:	fb07 1303 	mla	r3, r7, r3, r1
 80240d8:	441e      	add	r6, r3
 80240da:	4253      	negs	r3, r2
 80240dc:	f002 0207 	and.w	r2, r2, #7
 80240e0:	f003 0307 	and.w	r3, r3, #7
 80240e4:	bf58      	it	pl
 80240e6:	425a      	negpl	r2, r3
 80240e8:	b2d2      	uxtb	r2, r2
 80240ea:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80240ee:	4628      	mov	r0, r5
 80240f0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80240f4:	6721      	str	r1, [r4, #112]	; 0x70
 80240f6:	e9cd 1700 	strd	r1, r7, [sp]
 80240fa:	4631      	mov	r1, r6
 80240fc:	f001 fac4 	bl	8025688 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8024100:	4620      	mov	r0, r4
 8024102:	b006      	add	sp, #24
 8024104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024108:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802410c:	2104      	movs	r1, #4
 802410e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024112:	fb92 f1f1 	sdiv	r1, r2, r1
 8024116:	fb07 1303 	mla	r3, r7, r3, r1
 802411a:	441e      	add	r6, r3
 802411c:	4253      	negs	r3, r2
 802411e:	f002 0203 	and.w	r2, r2, #3
 8024122:	f003 0303 	and.w	r3, r3, #3
 8024126:	e7dd      	b.n	80240e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8024128:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802412c:	2102      	movs	r1, #2
 802412e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024132:	2a00      	cmp	r2, #0
 8024134:	fb92 f1f1 	sdiv	r1, r2, r1
 8024138:	f002 0201 	and.w	r2, r2, #1
 802413c:	fb07 1303 	mla	r3, r7, r3, r1
 8024140:	bfb8      	it	lt
 8024142:	4252      	neglt	r2, r2
 8024144:	441e      	add	r6, r3
 8024146:	e7cf      	b.n	80240e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024148:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802414c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024150:	437b      	muls	r3, r7
 8024152:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024156:	441e      	add	r6, r3
 8024158:	2200      	movs	r2, #0
 802415a:	e7c6      	b.n	80240ea <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802415c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024160:	2103      	movs	r1, #3
 8024162:	fb07 f203 	mul.w	r2, r7, r3
 8024166:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802416a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802416e:	e7f2      	b.n	8024156 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8024170:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024174:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024178:	fb07 2303 	mla	r3, r7, r3, r2
 802417c:	e7eb      	b.n	8024156 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802417e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024182:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024186:	437b      	muls	r3, r7
 8024188:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802418c:	e7e3      	b.n	8024156 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802418e:	4b07      	ldr	r3, [pc, #28]	; (80241ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024190:	2156      	movs	r1, #86	; 0x56
 8024192:	4a03      	ldr	r2, [pc, #12]	; (80241a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024194:	e70e      	b.n	8023fb4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8024196:	bf00      	nop
 8024198:	0802b82c 	.word	0x0802b82c
 802419c:	0802b776 	.word	0x0802b776
 80241a0:	0802b834 	.word	0x0802b834
 80241a4:	0802b7d2 	.word	0x0802b7d2
 80241a8:	2000b36c 	.word	0x2000b36c
 80241ac:	0802b806 	.word	0x0802b806

080241b0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80241b0:	6812      	ldr	r2, [r2, #0]
 80241b2:	2a00      	cmp	r2, #0
 80241b4:	db0b      	blt.n	80241ce <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80241b6:	9800      	ldr	r0, [sp, #0]
 80241b8:	6800      	ldr	r0, [r0, #0]
 80241ba:	4290      	cmp	r0, r2
 80241bc:	bfd4      	ite	le
 80241be:	2002      	movle	r0, #2
 80241c0:	2000      	movgt	r0, #0
 80241c2:	680a      	ldr	r2, [r1, #0]
 80241c4:	2a00      	cmp	r2, #0
 80241c6:	da04      	bge.n	80241d2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80241c8:	f040 0004 	orr.w	r0, r0, #4
 80241cc:	4770      	bx	lr
 80241ce:	2001      	movs	r0, #1
 80241d0:	e7f7      	b.n	80241c2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80241d2:	681b      	ldr	r3, [r3, #0]
 80241d4:	4293      	cmp	r3, r2
 80241d6:	bfd8      	it	le
 80241d8:	f040 0008 	orrle.w	r0, r0, #8
 80241dc:	4770      	bx	lr
	...

080241e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80241e0:	4b07      	ldr	r3, [pc, #28]	; (8024200 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80241e2:	b510      	push	{r4, lr}
 80241e4:	781b      	ldrb	r3, [r3, #0]
 80241e6:	2b01      	cmp	r3, #1
 80241e8:	d108      	bne.n	80241fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80241ea:	6843      	ldr	r3, [r0, #4]
 80241ec:	6814      	ldr	r4, [r2, #0]
 80241ee:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80241f2:	680b      	ldr	r3, [r1, #0]
 80241f4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80241f8:	6013      	str	r3, [r2, #0]
 80241fa:	600c      	str	r4, [r1, #0]
 80241fc:	bd10      	pop	{r4, pc}
 80241fe:	bf00      	nop
 8024200:	2000b364 	.word	0x2000b364

08024204 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024206:	b085      	sub	sp, #20
 8024208:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802420c:	4604      	mov	r4, r0
 802420e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024212:	b33b      	cbz	r3, 8024264 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024214:	aa02      	add	r2, sp, #8
 8024216:	a903      	add	r1, sp, #12
 8024218:	f7ff ffe2 	bl	80241e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802421c:	68a3      	ldr	r3, [r4, #8]
 802421e:	9e03      	ldr	r6, [sp, #12]
 8024220:	aa02      	add	r2, sp, #8
 8024222:	9f02      	ldr	r7, [sp, #8]
 8024224:	a903      	add	r1, sp, #12
 8024226:	1af6      	subs	r6, r6, r3
 8024228:	68e3      	ldr	r3, [r4, #12]
 802422a:	4620      	mov	r0, r4
 802422c:	1aff      	subs	r7, r7, r3
 802422e:	f104 0314 	add.w	r3, r4, #20
 8024232:	9603      	str	r6, [sp, #12]
 8024234:	9300      	str	r3, [sp, #0]
 8024236:	f104 0310 	add.w	r3, r4, #16
 802423a:	9702      	str	r7, [sp, #8]
 802423c:	f7ff ffb8 	bl	80241b0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024240:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8024244:	4605      	mov	r5, r0
 8024246:	b97b      	cbnz	r3, 8024268 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024248:	463a      	mov	r2, r7
 802424a:	4631      	mov	r1, r6
 802424c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024250:	f7ff fe7a 	bl	8023f48 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024254:	9b03      	ldr	r3, [sp, #12]
 8024256:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802425a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802425e:	9b02      	ldr	r3, [sp, #8]
 8024260:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8024264:	b005      	add	sp, #20
 8024266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024268:	b110      	cbz	r0, 8024270 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802426a:	ea13 0200 	ands.w	r2, r3, r0
 802426e:	d11c      	bne.n	80242aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8024270:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8024274:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8024278:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802427c:	b188      	cbz	r0, 80242a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802427e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8024282:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024286:	b913      	cbnz	r3, 802428e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024288:	4630      	mov	r0, r6
 802428a:	f001 f802 	bl	8025292 <_ZN8touchgfx7Outline6moveToEii>
 802428e:	2300      	movs	r3, #0
 8024290:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024294:	2301      	movs	r3, #1
 8024296:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802429a:	4630      	mov	r0, r6
 802429c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80242a0:	e7d6      	b.n	8024250 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80242a2:	4630      	mov	r0, r6
 80242a4:	f7ff fe50 	bl	8023f48 <_ZN8touchgfx10Rasterizer6lineToEii>
 80242a8:	e7f7      	b.n	802429a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80242aa:	4615      	mov	r5, r2
 80242ac:	e7d2      	b.n	8024254 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080242ae <_ZN8touchgfx6Canvas5closeEv>:
 80242ae:	b538      	push	{r3, r4, r5, lr}
 80242b0:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80242b4:	4604      	mov	r4, r0
 80242b6:	b993      	cbnz	r3, 80242de <_ZN8touchgfx6Canvas5closeEv+0x30>
 80242b8:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80242bc:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 80242c0:	4213      	tst	r3, r2
 80242c2:	d10c      	bne.n	80242de <_ZN8touchgfx6Canvas5closeEv+0x30>
 80242c4:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80242c8:	b123      	cbz	r3, 80242d4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80242ca:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 80242ce:	4628      	mov	r0, r5
 80242d0:	f7ff fe3a 	bl	8023f48 <_ZN8touchgfx10Rasterizer6lineToEii>
 80242d4:	4628      	mov	r0, r5
 80242d6:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 80242da:	f7ff fe35 	bl	8023f48 <_ZN8touchgfx10Rasterizer6lineToEii>
 80242de:	2300      	movs	r3, #0
 80242e0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80242e4:	bd38      	pop	{r3, r4, r5, pc}

080242e6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80242e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242e8:	b085      	sub	sp, #20
 80242ea:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80242ee:	4604      	mov	r4, r0
 80242f0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80242f4:	b353      	cbz	r3, 802434c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80242f6:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80242fa:	b90b      	cbnz	r3, 8024300 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80242fc:	f7ff ffd7 	bl	80242ae <_ZN8touchgfx6Canvas5closeEv>
 8024300:	aa02      	add	r2, sp, #8
 8024302:	a903      	add	r1, sp, #12
 8024304:	4620      	mov	r0, r4
 8024306:	f7ff ff6b 	bl	80241e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802430a:	68a3      	ldr	r3, [r4, #8]
 802430c:	9d03      	ldr	r5, [sp, #12]
 802430e:	aa02      	add	r2, sp, #8
 8024310:	9e02      	ldr	r6, [sp, #8]
 8024312:	a903      	add	r1, sp, #12
 8024314:	1aed      	subs	r5, r5, r3
 8024316:	68e3      	ldr	r3, [r4, #12]
 8024318:	4620      	mov	r0, r4
 802431a:	1af6      	subs	r6, r6, r3
 802431c:	f104 0314 	add.w	r3, r4, #20
 8024320:	9503      	str	r5, [sp, #12]
 8024322:	9300      	str	r3, [sp, #0]
 8024324:	f104 0310 	add.w	r3, r4, #16
 8024328:	9602      	str	r6, [sp, #8]
 802432a:	f7ff ff41 	bl	80241b0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802432e:	4607      	mov	r7, r0
 8024330:	b170      	cbz	r0, 8024350 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024332:	2301      	movs	r3, #1
 8024334:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024338:	9a03      	ldr	r2, [sp, #12]
 802433a:	9b02      	ldr	r3, [sp, #8]
 802433c:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8024340:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8024344:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8024348:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802434c:	b005      	add	sp, #20
 802434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024350:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024354:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8024358:	b92b      	cbnz	r3, 8024366 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802435a:	4632      	mov	r2, r6
 802435c:	4629      	mov	r1, r5
 802435e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024362:	f000 ff96 	bl	8025292 <_ZN8touchgfx7Outline6moveToEii>
 8024366:	2300      	movs	r3, #0
 8024368:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802436c:	2301      	movs	r3, #1
 802436e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8024372:	e7e1      	b.n	8024338 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024374 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024378:	4604      	mov	r4, r0
 802437a:	b087      	sub	sp, #28
 802437c:	9105      	str	r1, [sp, #20]
 802437e:	f001 f8cc 	bl	802551a <_ZN8touchgfx7Outline8getCellsEv>
 8024382:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024386:	4605      	mov	r5, r0
 8024388:	f1b9 0f00 	cmp.w	r9, #0
 802438c:	d103      	bne.n	8024396 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802438e:	2001      	movs	r0, #1
 8024390:	b007      	add	sp, #28
 8024392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024396:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802439a:	2e00      	cmp	r6, #0
 802439c:	d139      	bne.n	8024412 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802439e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80243a2:	f105 0708 	add.w	r7, r5, #8
 80243a6:	4640      	mov	r0, r8
 80243a8:	f001 f8f9 	bl	802559e <_ZN8touchgfx8Scanline5resetEv>
 80243ac:	f109 33ff 	add.w	r3, r9, #4294967295
 80243b0:	9303      	str	r3, [sp, #12]
 80243b2:	f9b5 b000 	ldrsh.w	fp, [r5]
 80243b6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80243ba:	46da      	mov	sl, fp
 80243bc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80243c0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80243c4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80243c8:	9b03      	ldr	r3, [sp, #12]
 80243ca:	4416      	add	r6, r2
 80243cc:	9504      	str	r5, [sp, #16]
 80243ce:	463d      	mov	r5, r7
 80243d0:	3b01      	subs	r3, #1
 80243d2:	9303      	str	r3, [sp, #12]
 80243d4:	3301      	adds	r3, #1
 80243d6:	d01e      	beq.n	8024416 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80243d8:	3708      	adds	r7, #8
 80243da:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80243de:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80243e2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80243e6:	4290      	cmp	r0, r2
 80243e8:	d11e      	bne.n	8024428 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80243ea:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80243ee:	4411      	add	r1, r2
 80243f0:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80243f4:	e7e8      	b.n	80243c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80243f6:	1c91      	adds	r1, r2, #2
 80243f8:	f04f 0301 	mov.w	r3, #1
 80243fc:	65e1      	str	r1, [r4, #92]	; 0x5c
 80243fe:	8053      	strh	r3, [r2, #2]
 8024400:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024402:	1c91      	adds	r1, r2, #2
 8024404:	65a1      	str	r1, [r4, #88]	; 0x58
 8024406:	f8a2 b002 	strh.w	fp, [r2, #2]
 802440a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802440c:	3201      	adds	r2, #1
 802440e:	6562      	str	r2, [r4, #84]	; 0x54
 8024410:	e03a      	b.n	8024488 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024412:	2000      	movs	r0, #0
 8024414:	e7bc      	b.n	8024390 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024416:	b951      	cbnz	r1, 802442e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024418:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802441a:	2b00      	cmp	r3, #0
 802441c:	d0b7      	beq.n	802438e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802441e:	4641      	mov	r1, r8
 8024420:	9805      	ldr	r0, [sp, #20]
 8024422:	f7ff fd5b 	bl	8023edc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024426:	e7b2      	b.n	802438e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024428:	2900      	cmp	r1, #0
 802442a:	d035      	beq.n	8024498 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802442c:	9504      	str	r5, [sp, #16]
 802442e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024432:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024436:	f7ff fd3d 	bl	8023eb4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 802443a:	4605      	mov	r5, r0
 802443c:	b330      	cbz	r0, 802448c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802443e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024440:	b182      	cbz	r2, 8024464 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024442:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024444:	454a      	cmp	r2, r9
 8024446:	d00d      	beq.n	8024464 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024448:	4641      	mov	r1, r8
 802444a:	9805      	ldr	r0, [sp, #20]
 802444c:	f7ff fd46 	bl	8023edc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024450:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024454:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024456:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802445a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802445c:	2300      	movs	r3, #0
 802445e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024460:	6563      	str	r3, [r4, #84]	; 0x54
 8024462:	65a2      	str	r2, [r4, #88]	; 0x58
 8024464:	f1bb 0f00 	cmp.w	fp, #0
 8024468:	db10      	blt.n	802448c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802446a:	f7f3 ffc9 	bl	8018400 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802446e:	4583      	cmp	fp, r0
 8024470:	d20c      	bcs.n	802448c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024472:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024474:	f802 500b 	strb.w	r5, [r2, fp]
 8024478:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802447a:	3201      	adds	r2, #1
 802447c:	455a      	cmp	r2, fp
 802447e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024480:	d1b9      	bne.n	80243f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024482:	8811      	ldrh	r1, [r2, #0]
 8024484:	3101      	adds	r1, #1
 8024486:	8011      	strh	r1, [r2, #0]
 8024488:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802448c:	9b03      	ldr	r3, [sp, #12]
 802448e:	3301      	adds	r3, #1
 8024490:	d0c2      	beq.n	8024418 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024492:	f10b 0a01 	add.w	sl, fp, #1
 8024496:	9d04      	ldr	r5, [sp, #16]
 8024498:	f9b5 3000 	ldrsh.w	r3, [r5]
 802449c:	4553      	cmp	r3, sl
 802449e:	dd88      	ble.n	80243b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80244a0:	01b1      	lsls	r1, r6, #6
 80244a2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80244a6:	f7ff fd05 	bl	8023eb4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80244aa:	4683      	mov	fp, r0
 80244ac:	2800      	cmp	r0, #0
 80244ae:	d080      	beq.n	80243b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80244b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80244b2:	b183      	cbz	r3, 80244d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80244b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80244b6:	454b      	cmp	r3, r9
 80244b8:	d00d      	beq.n	80244d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80244ba:	4641      	mov	r1, r8
 80244bc:	9805      	ldr	r0, [sp, #20]
 80244be:	f7ff fd0d 	bl	8023edc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80244c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80244c6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80244ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80244cc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80244ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80244d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80244d2:	2300      	movs	r3, #0
 80244d4:	6563      	str	r3, [r4, #84]	; 0x54
 80244d6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80244da:	464a      	mov	r2, r9
 80244dc:	f8cd b000 	str.w	fp, [sp]
 80244e0:	4651      	mov	r1, sl
 80244e2:	eba3 030a 	sub.w	r3, r3, sl
 80244e6:	4640      	mov	r0, r8
 80244e8:	f001 f880 	bl	80255ec <_ZN8touchgfx8Scanline7addSpanEiijj>
 80244ec:	e761      	b.n	80243b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080244ee <_ZN8touchgfx6Canvas6renderEv>:
 80244ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80244f0:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80244f4:	4604      	mov	r4, r0
 80244f6:	b913      	cbnz	r3, 80244fe <_ZN8touchgfx6Canvas6renderEv+0x10>
 80244f8:	2001      	movs	r0, #1
 80244fa:	b003      	add	sp, #12
 80244fc:	bd30      	pop	{r4, r5, pc}
 80244fe:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8024502:	2b00      	cmp	r3, #0
 8024504:	d12e      	bne.n	8024564 <_ZN8touchgfx6Canvas6renderEv+0x76>
 8024506:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802450a:	2b00      	cmp	r3, #0
 802450c:	d0f4      	beq.n	80244f8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802450e:	6840      	ldr	r0, [r0, #4]
 8024510:	6803      	ldr	r3, [r0, #0]
 8024512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024514:	4798      	blx	r3
 8024516:	2800      	cmp	r0, #0
 8024518:	d0ee      	beq.n	80244f8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802451a:	4620      	mov	r0, r4
 802451c:	f7ff fec7 	bl	80242ae <_ZN8touchgfx6Canvas5closeEv>
 8024520:	6860      	ldr	r0, [r4, #4]
 8024522:	6803      	ldr	r3, [r0, #0]
 8024524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024526:	4798      	blx	r3
 8024528:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802452c:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8024530:	8082      	strh	r2, [r0, #4]
 8024532:	80c3      	strh	r3, [r0, #6]
 8024534:	6860      	ldr	r0, [r4, #4]
 8024536:	6803      	ldr	r3, [r0, #0]
 8024538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802453a:	4798      	blx	r3
 802453c:	4605      	mov	r5, r0
 802453e:	6860      	ldr	r0, [r4, #4]
 8024540:	6803      	ldr	r3, [r0, #0]
 8024542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024544:	4798      	blx	r3
 8024546:	7228      	strb	r0, [r5, #8]
 8024548:	6860      	ldr	r0, [r4, #4]
 802454a:	6803      	ldr	r3, [r0, #0]
 802454c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802454e:	4798      	blx	r3
 8024550:	f104 0318 	add.w	r3, r4, #24
 8024554:	4669      	mov	r1, sp
 8024556:	e9cd 3000 	strd	r3, r0, [sp]
 802455a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802455e:	f7ff ff09 	bl	8024374 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024562:	e7ca      	b.n	80244fa <_ZN8touchgfx6Canvas6renderEv+0xc>
 8024564:	2000      	movs	r0, #0
 8024566:	e7c8      	b.n	80244fa <_ZN8touchgfx6Canvas6renderEv+0xc>

08024568 <_ZN8touchgfx6CanvasD1Ev>:
 8024568:	b538      	push	{r3, r4, r5, lr}
 802456a:	4605      	mov	r5, r0
 802456c:	4b08      	ldr	r3, [pc, #32]	; (8024590 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802456e:	4604      	mov	r4, r0
 8024570:	f845 3b30 	str.w	r3, [r5], #48
 8024574:	4b07      	ldr	r3, [pc, #28]	; (8024594 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8024576:	6818      	ldr	r0, [r3, #0]
 8024578:	6803      	ldr	r3, [r0, #0]
 802457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802457c:	4798      	blx	r3
 802457e:	4628      	mov	r0, r5
 8024580:	f000 f814 	bl	80245ac <_ZN8touchgfx7OutlineD1Ev>
 8024584:	f104 0018 	add.w	r0, r4, #24
 8024588:	f001 f869 	bl	802565e <_ZN8touchgfx15RenderingBufferD1Ev>
 802458c:	4620      	mov	r0, r4
 802458e:	bd38      	pop	{r3, r4, r5, pc}
 8024590:	0802b82c 	.word	0x0802b82c
 8024594:	2000b36c 	.word	0x2000b36c

08024598 <_ZN8touchgfx6CanvasD0Ev>:
 8024598:	b510      	push	{r4, lr}
 802459a:	4604      	mov	r4, r0
 802459c:	f7ff ffe4 	bl	8024568 <_ZN8touchgfx6CanvasD1Ev>
 80245a0:	21bc      	movs	r1, #188	; 0xbc
 80245a2:	4620      	mov	r0, r4
 80245a4:	f001 f880 	bl	80256a8 <_ZdlPvj>
 80245a8:	4620      	mov	r0, r4
 80245aa:	bd10      	pop	{r4, pc}

080245ac <_ZN8touchgfx7OutlineD1Ev>:
 80245ac:	4770      	bx	lr

080245ae <_ZN8touchgfx7OutlineD0Ev>:
 80245ae:	b510      	push	{r4, lr}
 80245b0:	4604      	mov	r4, r0
 80245b2:	2148      	movs	r1, #72	; 0x48
 80245b4:	f001 f878 	bl	80256a8 <_ZdlPvj>
 80245b8:	4620      	mov	r0, r4
 80245ba:	bd10      	pop	{r4, pc}

080245bc <_ZN8touchgfx7Outline5resetEv>:
 80245bc:	b510      	push	{r4, lr}
 80245be:	4604      	mov	r4, r0
 80245c0:	f7f3 ff36 	bl	8018430 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80245c4:	60e0      	str	r0, [r4, #12]
 80245c6:	f7f3 ff39 	bl	801843c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80245ca:	68e3      	ldr	r3, [r4, #12]
 80245cc:	2200      	movs	r2, #0
 80245ce:	08c0      	lsrs	r0, r0, #3
 80245d0:	6123      	str	r3, [r4, #16]
 80245d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80245d6:	6060      	str	r0, [r4, #4]
 80245d8:	82a3      	strh	r3, [r4, #20]
 80245da:	82e3      	strh	r3, [r4, #22]
 80245dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80245de:	60a2      	str	r2, [r4, #8]
 80245e0:	f023 0301 	bic.w	r3, r3, #1
 80245e4:	8322      	strh	r2, [r4, #24]
 80245e6:	8362      	strh	r2, [r4, #26]
 80245e8:	f043 0302 	orr.w	r3, r3, #2
 80245ec:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80245f0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80245f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80245f6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80245fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80245fe:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8024602:	bd10      	pop	{r4, pc}

08024604 <_ZN8touchgfx7OutlineC1Ev>:
 8024604:	4b0f      	ldr	r3, [pc, #60]	; (8024644 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8024606:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802460a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802460e:	b510      	push	{r4, lr}
 8024610:	6003      	str	r3, [r0, #0]
 8024612:	2300      	movs	r3, #0
 8024614:	4604      	mov	r4, r0
 8024616:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802461a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802461e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024622:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024626:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802462a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802462e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8024632:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8024636:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802463a:	f7ff ffbf 	bl	80245bc <_ZN8touchgfx7Outline5resetEv>
 802463e:	4620      	mov	r0, r4
 8024640:	bd10      	pop	{r4, pc}
 8024642:	bf00      	nop
 8024644:	0802b88c 	.word	0x0802b88c

08024648 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802464c:	b093      	sub	sp, #76	; 0x4c
 802464e:	4604      	mov	r4, r0
 8024650:	1156      	asrs	r6, r2, #5
 8024652:	f002 0e1f 	and.w	lr, r2, #31
 8024656:	981c      	ldr	r0, [sp, #112]	; 0x70
 8024658:	9305      	str	r3, [sp, #20]
 802465a:	1143      	asrs	r3, r0, #5
 802465c:	1145      	asrs	r5, r0, #5
 802465e:	930c      	str	r3, [sp, #48]	; 0x30
 8024660:	f000 031f 	and.w	r3, r0, #31
 8024664:	9303      	str	r3, [sp, #12]
 8024666:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024668:	42b3      	cmp	r3, r6
 802466a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802466c:	bfc8      	it	gt
 802466e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8024670:	42b3      	cmp	r3, r6
 8024672:	bfdc      	itt	le
 8024674:	1c73      	addle	r3, r6, #1
 8024676:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802467a:	42ab      	cmp	r3, r5
 802467c:	bfc8      	it	gt
 802467e:	462b      	movgt	r3, r5
 8024680:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024684:	bfc8      	it	gt
 8024686:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802468a:	42ab      	cmp	r3, r5
 802468c:	bfd8      	it	le
 802468e:	462b      	movle	r3, r5
 8024690:	ea4f 1561 	mov.w	r5, r1, asr #5
 8024694:	bfdc      	itt	le
 8024696:	3301      	addle	r3, #1
 8024698:	63a3      	strle	r3, [r4, #56]	; 0x38
 802469a:	9b05      	ldr	r3, [sp, #20]
 802469c:	eba3 0a01 	sub.w	sl, r3, r1
 80246a0:	1143      	asrs	r3, r0, #5
 80246a2:	429e      	cmp	r6, r3
 80246a4:	f040 8119 	bne.w	80248da <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80246a8:	9b05      	ldr	r3, [sp, #20]
 80246aa:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80246ae:	9b03      	ldr	r3, [sp, #12]
 80246b0:	459e      	cmp	lr, r3
 80246b2:	d12c      	bne.n	802470e <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80246b4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80246b8:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80246bc:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80246c0:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80246c4:	4291      	cmp	r1, r2
 80246c6:	d037      	beq.n	8024738 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80246c8:	8b61      	ldrh	r1, [r4, #26]
 80246ca:	8b22      	ldrh	r2, [r4, #24]
 80246cc:	430a      	orrs	r2, r1
 80246ce:	d00b      	beq.n	80246e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80246d0:	2b00      	cmp	r3, #0
 80246d2:	db09      	blt.n	80246e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80246d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80246d6:	429a      	cmp	r2, r3
 80246d8:	dd06      	ble.n	80246e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80246da:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80246de:	429a      	cmp	r2, r3
 80246e0:	d308      	bcc.n	80246f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80246e2:	2301      	movs	r3, #1
 80246e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80246e8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80246ec:	82e6      	strh	r6, [r4, #22]
 80246ee:	2300      	movs	r3, #0
 80246f0:	8323      	strh	r3, [r4, #24]
 80246f2:	e0c6      	b.n	8024882 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80246f4:	f104 0314 	add.w	r3, r4, #20
 80246f8:	6922      	ldr	r2, [r4, #16]
 80246fa:	cb03      	ldmia	r3!, {r0, r1}
 80246fc:	6010      	str	r0, [r2, #0]
 80246fe:	6051      	str	r1, [r2, #4]
 8024700:	6923      	ldr	r3, [r4, #16]
 8024702:	3308      	adds	r3, #8
 8024704:	6123      	str	r3, [r4, #16]
 8024706:	68a3      	ldr	r3, [r4, #8]
 8024708:	3301      	adds	r3, #1
 802470a:	60a3      	str	r3, [r4, #8]
 802470c:	e7ec      	b.n	80246e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802470e:	9b05      	ldr	r3, [sp, #20]
 8024710:	45ac      	cmp	ip, r5
 8024712:	f001 011f 	and.w	r1, r1, #31
 8024716:	8b20      	ldrh	r0, [r4, #24]
 8024718:	f003 031f 	and.w	r3, r3, #31
 802471c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8024720:	9304      	str	r3, [sp, #16]
 8024722:	9b03      	ldr	r3, [sp, #12]
 8024724:	eba3 020e 	sub.w	r2, r3, lr
 8024728:	d109      	bne.n	802473e <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 802472a:	9b04      	ldr	r3, [sp, #16]
 802472c:	4410      	add	r0, r2
 802472e:	4419      	add	r1, r3
 8024730:	8320      	strh	r0, [r4, #24]
 8024732:	fb02 8201 	mla	r2, r2, r1, r8
 8024736:	8362      	strh	r2, [r4, #26]
 8024738:	b013      	add	sp, #76	; 0x4c
 802473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802473e:	f1ba 0f00 	cmp.w	sl, #0
 8024742:	f2c0 80a0 	blt.w	8024886 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8024746:	f1c1 0320 	rsb	r3, r1, #32
 802474a:	f04f 0b20 	mov.w	fp, #32
 802474e:	435a      	muls	r2, r3
 8024750:	2301      	movs	r3, #1
 8024752:	9302      	str	r3, [sp, #8]
 8024754:	4459      	add	r1, fp
 8024756:	fb92 f7fa 	sdiv	r7, r2, sl
 802475a:	fb0a 2217 	mls	r2, sl, r7, r2
 802475e:	2a00      	cmp	r2, #0
 8024760:	bfbc      	itt	lt
 8024762:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024766:	4452      	addlt	r2, sl
 8024768:	fb07 8101 	mla	r1, r7, r1, r8
 802476c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024770:	4438      	add	r0, r7
 8024772:	b20b      	sxth	r3, r1
 8024774:	9902      	ldr	r1, [sp, #8]
 8024776:	b200      	sxth	r0, r0
 8024778:	9301      	str	r3, [sp, #4]
 802477a:	8363      	strh	r3, [r4, #26]
 802477c:	186b      	adds	r3, r5, r1
 802477e:	0435      	lsls	r5, r6, #16
 8024780:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024784:	8320      	strh	r0, [r4, #24]
 8024786:	eb03 0905 	add.w	r9, r3, r5
 802478a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802478e:	9300      	str	r3, [sp, #0]
 8024790:	45c1      	cmp	r9, r8
 8024792:	9505      	str	r5, [sp, #20]
 8024794:	d014      	beq.n	80247c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8024796:	9b01      	ldr	r3, [sp, #4]
 8024798:	4303      	orrs	r3, r0
 802479a:	d00b      	beq.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802479c:	2900      	cmp	r1, #0
 802479e:	db09      	blt.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80247a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80247a2:	428b      	cmp	r3, r1
 80247a4:	dd06      	ble.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80247a6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80247aa:	4299      	cmp	r1, r3
 80247ac:	d374      	bcc.n	8024898 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80247ae:	2301      	movs	r3, #1
 80247b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80247b4:	9b00      	ldr	r3, [sp, #0]
 80247b6:	82e6      	strh	r6, [r4, #22]
 80247b8:	82a3      	strh	r3, [r4, #20]
 80247ba:	2300      	movs	r3, #0
 80247bc:	8323      	strh	r3, [r4, #24]
 80247be:	8363      	strh	r3, [r4, #26]
 80247c0:	9900      	ldr	r1, [sp, #0]
 80247c2:	eb0e 0307 	add.w	r3, lr, r7
 80247c6:	458c      	cmp	ip, r1
 80247c8:	d04e      	beq.n	8024868 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80247ca:	9903      	ldr	r1, [sp, #12]
 80247cc:	eba2 020a 	sub.w	r2, r2, sl
 80247d0:	1ac9      	subs	r1, r1, r3
 80247d2:	9201      	str	r2, [sp, #4]
 80247d4:	440f      	add	r7, r1
 80247d6:	017f      	lsls	r7, r7, #5
 80247d8:	fb97 fefa 	sdiv	lr, r7, sl
 80247dc:	fb0a 771e 	mls	r7, sl, lr, r7
 80247e0:	2f00      	cmp	r7, #0
 80247e2:	bfbc      	itt	lt
 80247e4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80247e8:	4457      	addlt	r7, sl
 80247ea:	f10e 0101 	add.w	r1, lr, #1
 80247ee:	9106      	str	r1, [sp, #24]
 80247f0:	9a01      	ldr	r2, [sp, #4]
 80247f2:	8b20      	ldrh	r0, [r4, #24]
 80247f4:	19d2      	adds	r2, r2, r7
 80247f6:	8b61      	ldrh	r1, [r4, #26]
 80247f8:	9d02      	ldr	r5, [sp, #8]
 80247fa:	9201      	str	r2, [sp, #4]
 80247fc:	bf5b      	ittet	pl
 80247fe:	eba2 020a 	subpl.w	r2, r2, sl
 8024802:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8024806:	46f0      	movmi	r8, lr
 8024808:	9201      	strpl	r2, [sp, #4]
 802480a:	9a00      	ldr	r2, [sp, #0]
 802480c:	4440      	add	r0, r8
 802480e:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024812:	4443      	add	r3, r8
 8024814:	442a      	add	r2, r5
 8024816:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802481a:	9d05      	ldr	r5, [sp, #20]
 802481c:	b200      	sxth	r0, r0
 802481e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024822:	b209      	sxth	r1, r1
 8024824:	4415      	add	r5, r2
 8024826:	8320      	strh	r0, [r4, #24]
 8024828:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802482c:	8361      	strh	r1, [r4, #26]
 802482e:	9200      	str	r2, [sp, #0]
 8024830:	454d      	cmp	r5, r9
 8024832:	d016      	beq.n	8024862 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8024834:	4301      	orrs	r1, r0
 8024836:	d00d      	beq.n	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024838:	f1b8 0f00 	cmp.w	r8, #0
 802483c:	db0a      	blt.n	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802483e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024840:	4541      	cmp	r1, r8
 8024842:	dd07      	ble.n	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024844:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024848:	4288      	cmp	r0, r1
 802484a:	d335      	bcc.n	80248b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802484c:	f04f 0101 	mov.w	r1, #1
 8024850:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024854:	9900      	ldr	r1, [sp, #0]
 8024856:	82e6      	strh	r6, [r4, #22]
 8024858:	82a1      	strh	r1, [r4, #20]
 802485a:	f04f 0100 	mov.w	r1, #0
 802485e:	8321      	strh	r1, [r4, #24]
 8024860:	8361      	strh	r1, [r4, #26]
 8024862:	9a00      	ldr	r2, [sp, #0]
 8024864:	4594      	cmp	ip, r2
 8024866:	d1c3      	bne.n	80247f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8024868:	9a03      	ldr	r2, [sp, #12]
 802486a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802486e:	1ad3      	subs	r3, r2, r3
 8024870:	8b22      	ldrh	r2, [r4, #24]
 8024872:	441a      	add	r2, r3
 8024874:	8322      	strh	r2, [r4, #24]
 8024876:	9a04      	ldr	r2, [sp, #16]
 8024878:	3220      	adds	r2, #32
 802487a:	eba2 020b 	sub.w	r2, r2, fp
 802487e:	fb03 c302 	mla	r3, r3, r2, ip
 8024882:	8363      	strh	r3, [r4, #26]
 8024884:	e758      	b.n	8024738 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024886:	f04f 33ff 	mov.w	r3, #4294967295
 802488a:	434a      	muls	r2, r1
 802488c:	f1ca 0a00 	rsb	sl, sl, #0
 8024890:	f04f 0b00 	mov.w	fp, #0
 8024894:	9302      	str	r3, [sp, #8]
 8024896:	e75d      	b.n	8024754 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8024898:	f104 0314 	add.w	r3, r4, #20
 802489c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80248a0:	cb03      	ldmia	r3!, {r0, r1}
 80248a2:	f8c8 0000 	str.w	r0, [r8]
 80248a6:	f8c8 1004 	str.w	r1, [r8, #4]
 80248aa:	6923      	ldr	r3, [r4, #16]
 80248ac:	3308      	adds	r3, #8
 80248ae:	6123      	str	r3, [r4, #16]
 80248b0:	68a3      	ldr	r3, [r4, #8]
 80248b2:	3301      	adds	r3, #1
 80248b4:	60a3      	str	r3, [r4, #8]
 80248b6:	e77d      	b.n	80247b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80248b8:	f104 0814 	add.w	r8, r4, #20
 80248bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80248c0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80248c4:	f8c9 0000 	str.w	r0, [r9]
 80248c8:	f8c9 1004 	str.w	r1, [r9, #4]
 80248cc:	6921      	ldr	r1, [r4, #16]
 80248ce:	3108      	adds	r1, #8
 80248d0:	6121      	str	r1, [r4, #16]
 80248d2:	68a1      	ldr	r1, [r4, #8]
 80248d4:	3101      	adds	r1, #1
 80248d6:	60a1      	str	r1, [r4, #8]
 80248d8:	e7bc      	b.n	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80248da:	1a83      	subs	r3, r0, r2
 80248dc:	9301      	str	r3, [sp, #4]
 80248de:	f1ba 0f00 	cmp.w	sl, #0
 80248e2:	f040 8094 	bne.w	8024a0e <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80248e6:	9a01      	ldr	r2, [sp, #4]
 80248e8:	0049      	lsls	r1, r1, #1
 80248ea:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80248ee:	2a00      	cmp	r2, #0
 80248f0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80248f4:	8b62      	ldrh	r2, [r4, #26]
 80248f6:	bfaa      	itet	ge
 80248f8:	f04f 0a20 	movge.w	sl, #32
 80248fc:	f04f 38ff 	movlt.w	r8, #4294967295
 8024900:	f04f 0801 	movge.w	r8, #1
 8024904:	8b21      	ldrh	r1, [r4, #24]
 8024906:	ebaa 0e0e 	sub.w	lr, sl, lr
 802490a:	4471      	add	r1, lr
 802490c:	fb0e 2e03 	mla	lr, lr, r3, r2
 8024910:	eb08 0206 	add.w	r2, r8, r6
 8024914:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8024918:	b209      	sxth	r1, r1
 802491a:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 802491e:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8024922:	8321      	strh	r1, [r4, #24]
 8024924:	fa0f fe8e 	sxth.w	lr, lr
 8024928:	42b7      	cmp	r7, r6
 802492a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802492e:	d013      	beq.n	8024958 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024930:	ea51 010e 	orrs.w	r1, r1, lr
 8024934:	d00b      	beq.n	802494e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024936:	2800      	cmp	r0, #0
 8024938:	db09      	blt.n	802494e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802493a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802493c:	4281      	cmp	r1, r0
 802493e:	dd06      	ble.n	802494e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024940:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024944:	4288      	cmp	r0, r1
 8024946:	d339      	bcc.n	80249bc <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024948:	2101      	movs	r1, #1
 802494a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802494e:	2100      	movs	r1, #0
 8024950:	82a5      	strh	r5, [r4, #20]
 8024952:	82e2      	strh	r2, [r4, #22]
 8024954:	8321      	strh	r1, [r4, #24]
 8024956:	8361      	strh	r1, [r4, #26]
 8024958:	f1aa 0610 	sub.w	r6, sl, #16
 802495c:	f04f 0e00 	mov.w	lr, #0
 8024960:	f04f 0b01 	mov.w	fp, #1
 8024964:	0076      	lsls	r6, r6, #1
 8024966:	fb06 f703 	mul.w	r7, r6, r3
 802496a:	b236      	sxth	r6, r6
 802496c:	b23f      	sxth	r7, r7
 802496e:	ea46 0107 	orr.w	r1, r6, r7
 8024972:	9100      	str	r1, [sp, #0]
 8024974:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024976:	428a      	cmp	r2, r1
 8024978:	d03e      	beq.n	80249f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802497a:	4442      	add	r2, r8
 802497c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024980:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024984:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024988:	8326      	strh	r6, [r4, #24]
 802498a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802498e:	8367      	strh	r7, [r4, #26]
 8024990:	4584      	cmp	ip, r0
 8024992:	d0ef      	beq.n	8024974 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024994:	9800      	ldr	r0, [sp, #0]
 8024996:	b150      	cbz	r0, 80249ae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024998:	2900      	cmp	r1, #0
 802499a:	db08      	blt.n	80249ae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802499c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802499e:	4288      	cmp	r0, r1
 80249a0:	dd05      	ble.n	80249ae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80249a2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80249a6:	4288      	cmp	r0, r1
 80249a8:	d315      	bcc.n	80249d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80249aa:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80249ae:	82a5      	strh	r5, [r4, #20]
 80249b0:	82e2      	strh	r2, [r4, #22]
 80249b2:	f8a4 e018 	strh.w	lr, [r4, #24]
 80249b6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80249ba:	e7db      	b.n	8024974 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80249bc:	f104 0614 	add.w	r6, r4, #20
 80249c0:	6927      	ldr	r7, [r4, #16]
 80249c2:	ce03      	ldmia	r6!, {r0, r1}
 80249c4:	6038      	str	r0, [r7, #0]
 80249c6:	6079      	str	r1, [r7, #4]
 80249c8:	6921      	ldr	r1, [r4, #16]
 80249ca:	3108      	adds	r1, #8
 80249cc:	6121      	str	r1, [r4, #16]
 80249ce:	68a1      	ldr	r1, [r4, #8]
 80249d0:	3101      	adds	r1, #1
 80249d2:	60a1      	str	r1, [r4, #8]
 80249d4:	e7bb      	b.n	802494e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80249d6:	f104 0c14 	add.w	ip, r4, #20
 80249da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80249de:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80249e2:	f8c9 0000 	str.w	r0, [r9]
 80249e6:	f8c9 1004 	str.w	r1, [r9, #4]
 80249ea:	6921      	ldr	r1, [r4, #16]
 80249ec:	3108      	adds	r1, #8
 80249ee:	6121      	str	r1, [r4, #16]
 80249f0:	68a1      	ldr	r1, [r4, #8]
 80249f2:	3101      	adds	r1, #1
 80249f4:	60a1      	str	r1, [r4, #8]
 80249f6:	e7da      	b.n	80249ae <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80249f8:	9a03      	ldr	r2, [sp, #12]
 80249fa:	8b61      	ldrh	r1, [r4, #26]
 80249fc:	f1a2 0c20 	sub.w	ip, r2, #32
 8024a00:	8b22      	ldrh	r2, [r4, #24]
 8024a02:	44d4      	add	ip, sl
 8024a04:	4462      	add	r2, ip
 8024a06:	fb0c 1303 	mla	r3, ip, r3, r1
 8024a0a:	8322      	strh	r2, [r4, #24]
 8024a0c:	e739      	b.n	8024882 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024a0e:	9b01      	ldr	r3, [sp, #4]
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	db3f      	blt.n	8024a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8024a14:	2201      	movs	r2, #1
 8024a16:	f1ce 0320 	rsb	r3, lr, #32
 8024a1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8024a1c:	2220      	movs	r2, #32
 8024a1e:	fb0a f303 	mul.w	r3, sl, r3
 8024a22:	9202      	str	r2, [sp, #8]
 8024a24:	9a01      	ldr	r2, [sp, #4]
 8024a26:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024a2a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024a2e:	fb93 f7f2 	sdiv	r7, r3, r2
 8024a32:	fb02 3317 	mls	r3, r2, r7, r3
 8024a36:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024a3a:	2b00      	cmp	r3, #0
 8024a3c:	9308      	str	r3, [sp, #32]
 8024a3e:	bfbc      	itt	lt
 8024a40:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024a44:	189b      	addlt	r3, r3, r2
 8024a46:	eb07 0b01 	add.w	fp, r7, r1
 8024a4a:	bfb8      	it	lt
 8024a4c:	9308      	strlt	r3, [sp, #32]
 8024a4e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024a52:	9304      	str	r3, [sp, #16]
 8024a54:	9b02      	ldr	r3, [sp, #8]
 8024a56:	4573      	cmp	r3, lr
 8024a58:	d133      	bne.n	8024ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024a5a:	9b04      	ldr	r3, [sp, #16]
 8024a5c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024a60:	454b      	cmp	r3, r9
 8024a62:	d045      	beq.n	8024af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024a64:	8b62      	ldrh	r2, [r4, #26]
 8024a66:	8b23      	ldrh	r3, [r4, #24]
 8024a68:	4313      	orrs	r3, r2
 8024a6a:	d00c      	beq.n	8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024a6c:	f1b8 0f00 	cmp.w	r8, #0
 8024a70:	db09      	blt.n	8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024a74:	4543      	cmp	r3, r8
 8024a76:	dd06      	ble.n	8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024a78:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024a7c:	429a      	cmp	r2, r3
 8024a7e:	d313      	bcc.n	8024aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024a80:	2301      	movs	r3, #1
 8024a82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024a86:	9b04      	ldr	r3, [sp, #16]
 8024a88:	82e6      	strh	r6, [r4, #22]
 8024a8a:	82a3      	strh	r3, [r4, #20]
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	8323      	strh	r3, [r4, #24]
 8024a90:	8363      	strh	r3, [r4, #26]
 8024a92:	e02d      	b.n	8024af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024a94:	9a01      	ldr	r2, [sp, #4]
 8024a96:	fb0a f30e 	mul.w	r3, sl, lr
 8024a9a:	4252      	negs	r2, r2
 8024a9c:	9201      	str	r2, [sp, #4]
 8024a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8024aa2:	920b      	str	r2, [sp, #44]	; 0x2c
 8024aa4:	2200      	movs	r2, #0
 8024aa6:	e7bc      	b.n	8024a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024aa8:	f104 0314 	add.w	r3, r4, #20
 8024aac:	6922      	ldr	r2, [r4, #16]
 8024aae:	cb03      	ldmia	r3!, {r0, r1}
 8024ab0:	6010      	str	r0, [r2, #0]
 8024ab2:	6051      	str	r1, [r2, #4]
 8024ab4:	6923      	ldr	r3, [r4, #16]
 8024ab6:	3308      	adds	r3, #8
 8024ab8:	6123      	str	r3, [r4, #16]
 8024aba:	68a3      	ldr	r3, [r4, #8]
 8024abc:	3301      	adds	r3, #1
 8024abe:	60a3      	str	r3, [r4, #8]
 8024ac0:	e7e1      	b.n	8024a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024ac2:	f00b 031f 	and.w	r3, fp, #31
 8024ac6:	f001 011f 	and.w	r1, r1, #31
 8024aca:	8b20      	ldrh	r0, [r4, #24]
 8024acc:	9309      	str	r3, [sp, #36]	; 0x24
 8024ace:	9b02      	ldr	r3, [sp, #8]
 8024ad0:	eba3 020e 	sub.w	r2, r3, lr
 8024ad4:	8b63      	ldrh	r3, [r4, #26]
 8024ad6:	9300      	str	r3, [sp, #0]
 8024ad8:	9b04      	ldr	r3, [sp, #16]
 8024ada:	42ab      	cmp	r3, r5
 8024adc:	f040 80ef 	bne.w	8024cbe <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ae2:	4410      	add	r0, r2
 8024ae4:	4419      	add	r1, r3
 8024ae6:	9b00      	ldr	r3, [sp, #0]
 8024ae8:	8320      	strh	r0, [r4, #24]
 8024aea:	fb02 3101 	mla	r1, r2, r1, r3
 8024aee:	8361      	strh	r1, [r4, #26]
 8024af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024af2:	9904      	ldr	r1, [sp, #16]
 8024af4:	4433      	add	r3, r6
 8024af6:	9300      	str	r3, [sp, #0]
 8024af8:	9a00      	ldr	r2, [sp, #0]
 8024afa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024afe:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024b02:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024b06:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024b0a:	4288      	cmp	r0, r1
 8024b0c:	d018      	beq.n	8024b40 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024b0e:	8b60      	ldrh	r0, [r4, #26]
 8024b10:	8b21      	ldrh	r1, [r4, #24]
 8024b12:	ea50 0201 	orrs.w	r2, r0, r1
 8024b16:	d00c      	beq.n	8024b32 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024b18:	2b00      	cmp	r3, #0
 8024b1a:	db0a      	blt.n	8024b32 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024b1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024b1e:	4299      	cmp	r1, r3
 8024b20:	dd07      	ble.n	8024b32 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024b22:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024b26:	4299      	cmp	r1, r3
 8024b28:	f0c0 818b 	bcc.w	8024e42 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024b2c:	2301      	movs	r3, #1
 8024b2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b32:	9b04      	ldr	r3, [sp, #16]
 8024b34:	82a3      	strh	r3, [r4, #20]
 8024b36:	9b00      	ldr	r3, [sp, #0]
 8024b38:	82e3      	strh	r3, [r4, #22]
 8024b3a:	2300      	movs	r3, #0
 8024b3c:	8323      	strh	r3, [r4, #24]
 8024b3e:	8363      	strh	r3, [r4, #26]
 8024b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b42:	9a00      	ldr	r2, [sp, #0]
 8024b44:	4293      	cmp	r3, r2
 8024b46:	f000 808d 	beq.w	8024c64 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024b4a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024b4e:	9901      	ldr	r1, [sp, #4]
 8024b50:	9801      	ldr	r0, [sp, #4]
 8024b52:	fb93 f1f1 	sdiv	r1, r3, r1
 8024b56:	fb00 3311 	mls	r3, r0, r1, r3
 8024b5a:	9106      	str	r1, [sp, #24]
 8024b5c:	2b00      	cmp	r3, #0
 8024b5e:	9307      	str	r3, [sp, #28]
 8024b60:	da04      	bge.n	8024b6c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8024b62:	1e4b      	subs	r3, r1, #1
 8024b64:	9306      	str	r3, [sp, #24]
 8024b66:	9b07      	ldr	r3, [sp, #28]
 8024b68:	4403      	add	r3, r0
 8024b6a:	9307      	str	r3, [sp, #28]
 8024b6c:	9b08      	ldr	r3, [sp, #32]
 8024b6e:	f04f 0c00 	mov.w	ip, #0
 8024b72:	9901      	ldr	r1, [sp, #4]
 8024b74:	1a5b      	subs	r3, r3, r1
 8024b76:	4659      	mov	r1, fp
 8024b78:	9308      	str	r3, [sp, #32]
 8024b7a:	9b02      	ldr	r3, [sp, #8]
 8024b7c:	f1c3 0320 	rsb	r3, r3, #32
 8024b80:	930a      	str	r3, [sp, #40]	; 0x28
 8024b82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024b84:	9b02      	ldr	r3, [sp, #8]
 8024b86:	1a1b      	subs	r3, r3, r0
 8024b88:	9309      	str	r3, [sp, #36]	; 0x24
 8024b8a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024b8e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024b92:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8024b96:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024b9a:	181b      	adds	r3, r3, r0
 8024b9c:	bf58      	it	pl
 8024b9e:	9801      	ldrpl	r0, [sp, #4]
 8024ba0:	9308      	str	r3, [sp, #32]
 8024ba2:	bf54      	ite	pl
 8024ba4:	1a1b      	subpl	r3, r3, r0
 8024ba6:	9d06      	ldrmi	r5, [sp, #24]
 8024ba8:	9802      	ldr	r0, [sp, #8]
 8024baa:	bf5e      	ittt	pl
 8024bac:	9308      	strpl	r3, [sp, #32]
 8024bae:	9b06      	ldrpl	r3, [sp, #24]
 8024bb0:	1c5d      	addpl	r5, r3, #1
 8024bb2:	44ab      	add	fp, r5
 8024bb4:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024bb8:	9304      	str	r3, [sp, #16]
 8024bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bbc:	4283      	cmp	r3, r0
 8024bbe:	f040 815a 	bne.w	8024e76 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024bc2:	9b04      	ldr	r3, [sp, #16]
 8024bc4:	9a00      	ldr	r2, [sp, #0]
 8024bc6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8024bca:	4543      	cmp	r3, r8
 8024bcc:	d01a      	beq.n	8024c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024bce:	8b61      	ldrh	r1, [r4, #26]
 8024bd0:	8b23      	ldrh	r3, [r4, #24]
 8024bd2:	430b      	orrs	r3, r1
 8024bd4:	d00e      	beq.n	8024bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024bd6:	f1be 0f00 	cmp.w	lr, #0
 8024bda:	db0b      	blt.n	8024bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024bde:	4573      	cmp	r3, lr
 8024be0:	dd08      	ble.n	8024bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024be2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024be6:	4299      	cmp	r1, r3
 8024be8:	f0c0 8138 	bcc.w	8024e5c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024bec:	f04f 0301 	mov.w	r3, #1
 8024bf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024bf4:	9b04      	ldr	r3, [sp, #16]
 8024bf6:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024bfa:	82a3      	strh	r3, [r4, #20]
 8024bfc:	9b00      	ldr	r3, [sp, #0]
 8024bfe:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024c02:	82e3      	strh	r3, [r4, #22]
 8024c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c06:	9a00      	ldr	r2, [sp, #0]
 8024c08:	441a      	add	r2, r3
 8024c0a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024c0e:	9200      	str	r2, [sp, #0]
 8024c10:	9900      	ldr	r1, [sp, #0]
 8024c12:	9a04      	ldr	r2, [sp, #16]
 8024c14:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024c18:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c20:	4288      	cmp	r0, r1
 8024c22:	d01a      	beq.n	8024c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024c24:	8b60      	ldrh	r0, [r4, #26]
 8024c26:	8b21      	ldrh	r1, [r4, #24]
 8024c28:	ea50 0201 	orrs.w	r2, r0, r1
 8024c2c:	d00d      	beq.n	8024c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024c2e:	2b00      	cmp	r3, #0
 8024c30:	db0b      	blt.n	8024c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024c32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c34:	4299      	cmp	r1, r3
 8024c36:	dd08      	ble.n	8024c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024c38:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024c3c:	4299      	cmp	r1, r3
 8024c3e:	f0c0 81f9 	bcc.w	8025034 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024c42:	f04f 0301 	mov.w	r3, #1
 8024c46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c4a:	9b04      	ldr	r3, [sp, #16]
 8024c4c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024c50:	82a3      	strh	r3, [r4, #20]
 8024c52:	9b00      	ldr	r3, [sp, #0]
 8024c54:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024c58:	82e3      	strh	r3, [r4, #22]
 8024c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c5c:	4659      	mov	r1, fp
 8024c5e:	9a00      	ldr	r2, [sp, #0]
 8024c60:	4293      	cmp	r3, r2
 8024c62:	d192      	bne.n	8024b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024c64:	9b02      	ldr	r3, [sp, #8]
 8024c66:	f1c3 0c20 	rsb	ip, r3, #32
 8024c6a:	9b05      	ldr	r3, [sp, #20]
 8024c6c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024c70:	9b03      	ldr	r3, [sp, #12]
 8024c72:	459c      	cmp	ip, r3
 8024c74:	f040 81f8 	bne.w	8025068 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024c78:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024c7c:	9a00      	ldr	r2, [sp, #0]
 8024c7e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024c82:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024c86:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c8a:	4288      	cmp	r0, r1
 8024c8c:	f43f ad54 	beq.w	8024738 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024c90:	8b60      	ldrh	r0, [r4, #26]
 8024c92:	8b21      	ldrh	r1, [r4, #24]
 8024c94:	ea50 0201 	orrs.w	r2, r0, r1
 8024c98:	d00c      	beq.n	8024cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024c9a:	2b00      	cmp	r3, #0
 8024c9c:	db0a      	blt.n	8024cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024c9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024ca0:	4299      	cmp	r1, r3
 8024ca2:	dd07      	ble.n	8024cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024ca4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024ca8:	4299      	cmp	r1, r3
 8024caa:	f0c0 81d0 	bcc.w	802504e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024cae:	2301      	movs	r3, #1
 8024cb0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024cb4:	9b00      	ldr	r3, [sp, #0]
 8024cb6:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024cba:	82e3      	strh	r3, [r4, #22]
 8024cbc:	e517      	b.n	80246ee <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024cbe:	2f00      	cmp	r7, #0
 8024cc0:	f2c0 8097 	blt.w	8024df2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024cc4:	2301      	movs	r3, #1
 8024cc6:	f1c1 0c20 	rsb	ip, r1, #32
 8024cca:	9307      	str	r3, [sp, #28]
 8024ccc:	2320      	movs	r3, #32
 8024cce:	fb02 f20c 	mul.w	r2, r2, ip
 8024cd2:	9306      	str	r3, [sp, #24]
 8024cd4:	9b06      	ldr	r3, [sp, #24]
 8024cd6:	fb92 fcf7 	sdiv	ip, r2, r7
 8024cda:	fb07 221c 	mls	r2, r7, ip, r2
 8024cde:	4419      	add	r1, r3
 8024ce0:	9b00      	ldr	r3, [sp, #0]
 8024ce2:	2a00      	cmp	r2, #0
 8024ce4:	bfbc      	itt	lt
 8024ce6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024cea:	19d2      	addlt	r2, r2, r7
 8024cec:	fb0c 3101 	mla	r1, ip, r1, r3
 8024cf0:	9b07      	ldr	r3, [sp, #28]
 8024cf2:	4460      	add	r0, ip
 8024cf4:	441d      	add	r5, r3
 8024cf6:	0433      	lsls	r3, r6, #16
 8024cf8:	b200      	sxth	r0, r0
 8024cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8024cfc:	18eb      	adds	r3, r5, r3
 8024cfe:	b209      	sxth	r1, r1
 8024d00:	8320      	strh	r0, [r4, #24]
 8024d02:	454b      	cmp	r3, r9
 8024d04:	8361      	strh	r1, [r4, #26]
 8024d06:	d014      	beq.n	8024d32 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024d08:	ea50 0301 	orrs.w	r3, r0, r1
 8024d0c:	d00c      	beq.n	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024d0e:	f1b8 0f00 	cmp.w	r8, #0
 8024d12:	db09      	blt.n	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024d16:	4543      	cmp	r3, r8
 8024d18:	dd06      	ble.n	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024d1a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024d1e:	4299      	cmp	r1, r3
 8024d20:	d36e      	bcc.n	8024e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024d22:	2301      	movs	r3, #1
 8024d24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d28:	2300      	movs	r3, #0
 8024d2a:	82a5      	strh	r5, [r4, #20]
 8024d2c:	82e6      	strh	r6, [r4, #22]
 8024d2e:	8323      	strh	r3, [r4, #24]
 8024d30:	8363      	strh	r3, [r4, #26]
 8024d32:	9904      	ldr	r1, [sp, #16]
 8024d34:	eb0e 030c 	add.w	r3, lr, ip
 8024d38:	42a9      	cmp	r1, r5
 8024d3a:	d04d      	beq.n	8024dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024d3c:	9902      	ldr	r1, [sp, #8]
 8024d3e:	1bd2      	subs	r2, r2, r7
 8024d40:	1ac9      	subs	r1, r1, r3
 8024d42:	9200      	str	r2, [sp, #0]
 8024d44:	448c      	add	ip, r1
 8024d46:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024d4a:	fb9c fef7 	sdiv	lr, ip, r7
 8024d4e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024d52:	f1bc 0f00 	cmp.w	ip, #0
 8024d56:	bfbc      	itt	lt
 8024d58:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024d5c:	44bc      	addlt	ip, r7
 8024d5e:	f10e 0101 	add.w	r1, lr, #1
 8024d62:	910d      	str	r1, [sp, #52]	; 0x34
 8024d64:	9a00      	ldr	r2, [sp, #0]
 8024d66:	8b20      	ldrh	r0, [r4, #24]
 8024d68:	eb12 020c 	adds.w	r2, r2, ip
 8024d6c:	8b61      	ldrh	r1, [r4, #26]
 8024d6e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024d72:	9200      	str	r2, [sp, #0]
 8024d74:	bf5b      	ittet	pl
 8024d76:	1bd2      	subpl	r2, r2, r7
 8024d78:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024d7c:	46f0      	movmi	r8, lr
 8024d7e:	9200      	strpl	r2, [sp, #0]
 8024d80:	9a07      	ldr	r2, [sp, #28]
 8024d82:	4440      	add	r0, r8
 8024d84:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024d88:	4443      	add	r3, r8
 8024d8a:	4415      	add	r5, r2
 8024d8c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d92:	b200      	sxth	r0, r0
 8024d94:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024d98:	442a      	add	r2, r5
 8024d9a:	b209      	sxth	r1, r1
 8024d9c:	8320      	strh	r0, [r4, #24]
 8024d9e:	454a      	cmp	r2, r9
 8024da0:	8361      	strh	r1, [r4, #26]
 8024da2:	d016      	beq.n	8024dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024da4:	ea50 0201 	orrs.w	r2, r0, r1
 8024da8:	d00d      	beq.n	8024dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024daa:	f1b8 0f00 	cmp.w	r8, #0
 8024dae:	db0a      	blt.n	8024dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024db0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024db2:	4541      	cmp	r1, r8
 8024db4:	dd07      	ble.n	8024dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024db6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024dba:	4288      	cmp	r0, r1
 8024dbc:	d330      	bcc.n	8024e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024dbe:	f04f 0201 	mov.w	r2, #1
 8024dc2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024dc6:	f04f 0200 	mov.w	r2, #0
 8024dca:	82a5      	strh	r5, [r4, #20]
 8024dcc:	82e6      	strh	r6, [r4, #22]
 8024dce:	8322      	strh	r2, [r4, #24]
 8024dd0:	8362      	strh	r2, [r4, #26]
 8024dd2:	9904      	ldr	r1, [sp, #16]
 8024dd4:	42a9      	cmp	r1, r5
 8024dd6:	d1c5      	bne.n	8024d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8024dd8:	9a02      	ldr	r2, [sp, #8]
 8024dda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024ddc:	1ad3      	subs	r3, r2, r3
 8024dde:	8b22      	ldrh	r2, [r4, #24]
 8024de0:	3120      	adds	r1, #32
 8024de2:	441a      	add	r2, r3
 8024de4:	8322      	strh	r2, [r4, #24]
 8024de6:	9a06      	ldr	r2, [sp, #24]
 8024de8:	1a89      	subs	r1, r1, r2
 8024dea:	8b62      	ldrh	r2, [r4, #26]
 8024dec:	fb03 2301 	mla	r3, r3, r1, r2
 8024df0:	e64e      	b.n	8024a90 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024df2:	f04f 33ff 	mov.w	r3, #4294967295
 8024df6:	434a      	muls	r2, r1
 8024df8:	427f      	negs	r7, r7
 8024dfa:	9307      	str	r3, [sp, #28]
 8024dfc:	2300      	movs	r3, #0
 8024dfe:	e768      	b.n	8024cd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024e00:	f104 0314 	add.w	r3, r4, #20
 8024e04:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024e08:	cb03      	ldmia	r3!, {r0, r1}
 8024e0a:	f8c8 0000 	str.w	r0, [r8]
 8024e0e:	f8c8 1004 	str.w	r1, [r8, #4]
 8024e12:	6923      	ldr	r3, [r4, #16]
 8024e14:	3308      	adds	r3, #8
 8024e16:	6123      	str	r3, [r4, #16]
 8024e18:	68a3      	ldr	r3, [r4, #8]
 8024e1a:	3301      	adds	r3, #1
 8024e1c:	60a3      	str	r3, [r4, #8]
 8024e1e:	e783      	b.n	8024d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e20:	f104 0814 	add.w	r8, r4, #20
 8024e24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024e28:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024e2c:	f8c9 0000 	str.w	r0, [r9]
 8024e30:	f8c9 1004 	str.w	r1, [r9, #4]
 8024e34:	6921      	ldr	r1, [r4, #16]
 8024e36:	3108      	adds	r1, #8
 8024e38:	6121      	str	r1, [r4, #16]
 8024e3a:	68a1      	ldr	r1, [r4, #8]
 8024e3c:	3101      	adds	r1, #1
 8024e3e:	60a1      	str	r1, [r4, #8]
 8024e40:	e7c1      	b.n	8024dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024e42:	f104 0314 	add.w	r3, r4, #20
 8024e46:	6925      	ldr	r5, [r4, #16]
 8024e48:	cb03      	ldmia	r3!, {r0, r1}
 8024e4a:	6028      	str	r0, [r5, #0]
 8024e4c:	6069      	str	r1, [r5, #4]
 8024e4e:	6923      	ldr	r3, [r4, #16]
 8024e50:	3308      	adds	r3, #8
 8024e52:	6123      	str	r3, [r4, #16]
 8024e54:	68a3      	ldr	r3, [r4, #8]
 8024e56:	3301      	adds	r3, #1
 8024e58:	60a3      	str	r3, [r4, #8]
 8024e5a:	e66a      	b.n	8024b32 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024e5c:	f104 0314 	add.w	r3, r4, #20
 8024e60:	6925      	ldr	r5, [r4, #16]
 8024e62:	cb03      	ldmia	r3!, {r0, r1}
 8024e64:	6028      	str	r0, [r5, #0]
 8024e66:	6069      	str	r1, [r5, #4]
 8024e68:	6923      	ldr	r3, [r4, #16]
 8024e6a:	3308      	adds	r3, #8
 8024e6c:	6123      	str	r3, [r4, #16]
 8024e6e:	68a3      	ldr	r3, [r4, #8]
 8024e70:	3301      	adds	r3, #1
 8024e72:	60a3      	str	r3, [r4, #8]
 8024e74:	e6be      	b.n	8024bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024e76:	f00b 031f 	and.w	r3, fp, #31
 8024e7a:	114f      	asrs	r7, r1, #5
 8024e7c:	8b20      	ldrh	r0, [r4, #24]
 8024e7e:	f001 011f 	and.w	r1, r1, #31
 8024e82:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e84:	9b04      	ldr	r3, [sp, #16]
 8024e86:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024e8a:	429f      	cmp	r7, r3
 8024e8c:	d10a      	bne.n	8024ea4 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e90:	4418      	add	r0, r3
 8024e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024e94:	4419      	add	r1, r3
 8024e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e98:	8320      	strh	r0, [r4, #24]
 8024e9a:	fb03 9901 	mla	r9, r3, r1, r9
 8024e9e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024ea2:	e6af      	b.n	8024c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024ea4:	2d00      	cmp	r5, #0
 8024ea6:	f2c0 809b 	blt.w	8024fe0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024eaa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024eac:	f1c1 0320 	rsb	r3, r1, #32
 8024eb0:	4373      	muls	r3, r6
 8024eb2:	2601      	movs	r6, #1
 8024eb4:	960e      	str	r6, [sp, #56]	; 0x38
 8024eb6:	2620      	movs	r6, #32
 8024eb8:	960d      	str	r6, [sp, #52]	; 0x34
 8024eba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024ebc:	fb93 f6f5 	sdiv	r6, r3, r5
 8024ec0:	4411      	add	r1, r2
 8024ec2:	fb05 3316 	mls	r3, r5, r6, r3
 8024ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	4417      	add	r7, r2
 8024ecc:	9a00      	ldr	r2, [sp, #0]
 8024ece:	bfbc      	itt	lt
 8024ed0:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024ed4:	195b      	addlt	r3, r3, r5
 8024ed6:	0412      	lsls	r2, r2, #16
 8024ed8:	fb06 9101 	mla	r1, r6, r1, r9
 8024edc:	4430      	add	r0, r6
 8024ede:	eb07 0902 	add.w	r9, r7, r2
 8024ee2:	9210      	str	r2, [sp, #64]	; 0x40
 8024ee4:	b200      	sxth	r0, r0
 8024ee6:	b209      	sxth	r1, r1
 8024ee8:	45c1      	cmp	r9, r8
 8024eea:	8320      	strh	r0, [r4, #24]
 8024eec:	8361      	strh	r1, [r4, #26]
 8024eee:	d017      	beq.n	8024f20 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024ef0:	ea50 0201 	orrs.w	r2, r0, r1
 8024ef4:	d00d      	beq.n	8024f12 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024ef6:	f1be 0f00 	cmp.w	lr, #0
 8024efa:	db0a      	blt.n	8024f12 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024efc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024efe:	4571      	cmp	r1, lr
 8024f00:	dd07      	ble.n	8024f12 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024f02:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024f06:	4288      	cmp	r0, r1
 8024f08:	d372      	bcc.n	8024ff0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8024f0a:	f04f 0201 	mov.w	r2, #1
 8024f0e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024f12:	9a00      	ldr	r2, [sp, #0]
 8024f14:	82a7      	strh	r7, [r4, #20]
 8024f16:	82e2      	strh	r2, [r4, #22]
 8024f18:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024f1c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f22:	eb02 0e06 	add.w	lr, r2, r6
 8024f26:	9a04      	ldr	r2, [sp, #16]
 8024f28:	42ba      	cmp	r2, r7
 8024f2a:	d049      	beq.n	8024fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024f2c:	9a02      	ldr	r2, [sp, #8]
 8024f2e:	1b5b      	subs	r3, r3, r5
 8024f30:	eba2 010e 	sub.w	r1, r2, lr
 8024f34:	440e      	add	r6, r1
 8024f36:	0176      	lsls	r6, r6, #5
 8024f38:	fb96 f8f5 	sdiv	r8, r6, r5
 8024f3c:	fb05 6618 	mls	r6, r5, r8, r6
 8024f40:	2e00      	cmp	r6, #0
 8024f42:	bfbc      	itt	lt
 8024f44:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024f48:	1976      	addlt	r6, r6, r5
 8024f4a:	f108 0201 	add.w	r2, r8, #1
 8024f4e:	9211      	str	r2, [sp, #68]	; 0x44
 8024f50:	199b      	adds	r3, r3, r6
 8024f52:	8b20      	ldrh	r0, [r4, #24]
 8024f54:	8b61      	ldrh	r1, [r4, #26]
 8024f56:	bf54      	ite	pl
 8024f58:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8024f5c:	46c1      	movmi	r9, r8
 8024f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024f60:	bf58      	it	pl
 8024f62:	1b5b      	subpl	r3, r3, r5
 8024f64:	4448      	add	r0, r9
 8024f66:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024f6a:	4417      	add	r7, r2
 8024f6c:	44ce      	add	lr, r9
 8024f6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024f70:	b200      	sxth	r0, r0
 8024f72:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024f76:	b209      	sxth	r1, r1
 8024f78:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024f7c:	443a      	add	r2, r7
 8024f7e:	8320      	strh	r0, [r4, #24]
 8024f80:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024f84:	8361      	strh	r1, [r4, #26]
 8024f86:	4552      	cmp	r2, sl
 8024f88:	d017      	beq.n	8024fba <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8024f8a:	ea50 0201 	orrs.w	r2, r0, r1
 8024f8e:	d00d      	beq.n	8024fac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024f90:	f1b9 0f00 	cmp.w	r9, #0
 8024f94:	db0a      	blt.n	8024fac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024f96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024f98:	4549      	cmp	r1, r9
 8024f9a:	dd07      	ble.n	8024fac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024f9c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024fa0:	4288      	cmp	r0, r1
 8024fa2:	d336      	bcc.n	8025012 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8024fa4:	f04f 0201 	mov.w	r2, #1
 8024fa8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024fac:	9a00      	ldr	r2, [sp, #0]
 8024fae:	82a7      	strh	r7, [r4, #20]
 8024fb0:	82e2      	strh	r2, [r4, #22]
 8024fb2:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024fb6:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024fba:	9a04      	ldr	r2, [sp, #16]
 8024fbc:	42ba      	cmp	r2, r7
 8024fbe:	d1c7      	bne.n	8024f50 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024fc0:	9b02      	ldr	r3, [sp, #8]
 8024fc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024fc4:	eba3 0e0e 	sub.w	lr, r3, lr
 8024fc8:	8b23      	ldrh	r3, [r4, #24]
 8024fca:	3120      	adds	r1, #32
 8024fcc:	4473      	add	r3, lr
 8024fce:	8323      	strh	r3, [r4, #24]
 8024fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024fd2:	1ac9      	subs	r1, r1, r3
 8024fd4:	8b63      	ldrh	r3, [r4, #26]
 8024fd6:	fb0e 3e01 	mla	lr, lr, r1, r3
 8024fda:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024fde:	e611      	b.n	8024c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024fe0:	f04f 36ff 	mov.w	r6, #4294967295
 8024fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fe6:	426d      	negs	r5, r5
 8024fe8:	960e      	str	r6, [sp, #56]	; 0x38
 8024fea:	2600      	movs	r6, #0
 8024fec:	434b      	muls	r3, r1
 8024fee:	e763      	b.n	8024eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8024ff0:	f104 0e14 	add.w	lr, r4, #20
 8024ff4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024ff8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024ffc:	f8c8 0000 	str.w	r0, [r8]
 8025000:	f8c8 1004 	str.w	r1, [r8, #4]
 8025004:	6921      	ldr	r1, [r4, #16]
 8025006:	3108      	adds	r1, #8
 8025008:	6121      	str	r1, [r4, #16]
 802500a:	68a1      	ldr	r1, [r4, #8]
 802500c:	3101      	adds	r1, #1
 802500e:	60a1      	str	r1, [r4, #8]
 8025010:	e77f      	b.n	8024f12 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025012:	f104 0914 	add.w	r9, r4, #20
 8025016:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802501a:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802501e:	f8ca 0000 	str.w	r0, [sl]
 8025022:	f8ca 1004 	str.w	r1, [sl, #4]
 8025026:	6921      	ldr	r1, [r4, #16]
 8025028:	3108      	adds	r1, #8
 802502a:	6121      	str	r1, [r4, #16]
 802502c:	68a1      	ldr	r1, [r4, #8]
 802502e:	3101      	adds	r1, #1
 8025030:	60a1      	str	r1, [r4, #8]
 8025032:	e7bb      	b.n	8024fac <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025034:	f104 0314 	add.w	r3, r4, #20
 8025038:	6925      	ldr	r5, [r4, #16]
 802503a:	cb03      	ldmia	r3!, {r0, r1}
 802503c:	6028      	str	r0, [r5, #0]
 802503e:	6069      	str	r1, [r5, #4]
 8025040:	6923      	ldr	r3, [r4, #16]
 8025042:	3308      	adds	r3, #8
 8025044:	6123      	str	r3, [r4, #16]
 8025046:	68a3      	ldr	r3, [r4, #8]
 8025048:	3301      	adds	r3, #1
 802504a:	60a3      	str	r3, [r4, #8]
 802504c:	e5fd      	b.n	8024c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802504e:	f104 0314 	add.w	r3, r4, #20
 8025052:	6925      	ldr	r5, [r4, #16]
 8025054:	cb03      	ldmia	r3!, {r0, r1}
 8025056:	6028      	str	r0, [r5, #0]
 8025058:	6069      	str	r1, [r5, #4]
 802505a:	6923      	ldr	r3, [r4, #16]
 802505c:	3308      	adds	r3, #8
 802505e:	6123      	str	r3, [r4, #16]
 8025060:	68a3      	ldr	r3, [r4, #8]
 8025062:	3301      	adds	r3, #1
 8025064:	60a3      	str	r3, [r4, #8]
 8025066:	e625      	b.n	8024cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025068:	9b05      	ldr	r3, [sp, #20]
 802506a:	ea4f 176b 	mov.w	r7, fp, asr #5
 802506e:	f00b 081f 	and.w	r8, fp, #31
 8025072:	8b20      	ldrh	r0, [r4, #24]
 8025074:	f003 031f 	and.w	r3, r3, #31
 8025078:	4577      	cmp	r7, lr
 802507a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802507e:	9302      	str	r3, [sp, #8]
 8025080:	9b03      	ldr	r3, [sp, #12]
 8025082:	eba3 050c 	sub.w	r5, r3, ip
 8025086:	d108      	bne.n	802509a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8025088:	9b02      	ldr	r3, [sp, #8]
 802508a:	4428      	add	r0, r5
 802508c:	4498      	add	r8, r3
 802508e:	8320      	strh	r0, [r4, #24]
 8025090:	fb05 9508 	mla	r5, r5, r8, r9
 8025094:	8365      	strh	r5, [r4, #26]
 8025096:	f7ff bb4f 	b.w	8024738 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802509a:	9b05      	ldr	r3, [sp, #20]
 802509c:	ebb3 030b 	subs.w	r3, r3, fp
 80250a0:	f100 809c 	bmi.w	80251dc <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80250a4:	f1c8 0120 	rsb	r1, r8, #32
 80250a8:	2201      	movs	r2, #1
 80250aa:	f04f 0b20 	mov.w	fp, #32
 80250ae:	434d      	muls	r5, r1
 80250b0:	9201      	str	r2, [sp, #4]
 80250b2:	9a01      	ldr	r2, [sp, #4]
 80250b4:	44d8      	add	r8, fp
 80250b6:	fb95 f6f3 	sdiv	r6, r5, r3
 80250ba:	fb03 5516 	mls	r5, r3, r6, r5
 80250be:	4417      	add	r7, r2
 80250c0:	9a00      	ldr	r2, [sp, #0]
 80250c2:	2d00      	cmp	r5, #0
 80250c4:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80250c8:	bfbc      	itt	lt
 80250ca:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80250ce:	18ed      	addlt	r5, r5, r3
 80250d0:	eb07 0a02 	add.w	sl, r7, r2
 80250d4:	9204      	str	r2, [sp, #16]
 80250d6:	fb06 9808 	mla	r8, r6, r8, r9
 80250da:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80250de:	4430      	add	r0, r6
 80250e0:	fa0f f188 	sxth.w	r1, r8
 80250e4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80250e8:	b200      	sxth	r0, r0
 80250ea:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80250ee:	8361      	strh	r1, [r4, #26]
 80250f0:	8320      	strh	r0, [r4, #24]
 80250f2:	45ca      	cmp	sl, r9
 80250f4:	d015      	beq.n	8025122 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80250f6:	ea50 0201 	orrs.w	r2, r0, r1
 80250fa:	d00c      	beq.n	8025116 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80250fc:	f1b8 0f00 	cmp.w	r8, #0
 8025100:	db09      	blt.n	8025116 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025102:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025104:	4541      	cmp	r1, r8
 8025106:	dd06      	ble.n	8025116 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025108:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802510c:	4288      	cmp	r0, r1
 802510e:	d36e      	bcc.n	80251ee <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8025110:	2101      	movs	r1, #1
 8025112:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025116:	2100      	movs	r1, #0
 8025118:	9a00      	ldr	r2, [sp, #0]
 802511a:	82a7      	strh	r7, [r4, #20]
 802511c:	82e2      	strh	r2, [r4, #22]
 802511e:	8321      	strh	r1, [r4, #24]
 8025120:	8361      	strh	r1, [r4, #26]
 8025122:	45be      	cmp	lr, r7
 8025124:	44b4      	add	ip, r6
 8025126:	d048      	beq.n	80251ba <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8025128:	9a03      	ldr	r2, [sp, #12]
 802512a:	1aed      	subs	r5, r5, r3
 802512c:	eba2 010c 	sub.w	r1, r2, ip
 8025130:	440e      	add	r6, r1
 8025132:	0176      	lsls	r6, r6, #5
 8025134:	fb96 f8f3 	sdiv	r8, r6, r3
 8025138:	fb03 6618 	mls	r6, r3, r8, r6
 802513c:	2e00      	cmp	r6, #0
 802513e:	bfbc      	itt	lt
 8025140:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025144:	18f6      	addlt	r6, r6, r3
 8025146:	f108 0201 	add.w	r2, r8, #1
 802514a:	9205      	str	r2, [sp, #20]
 802514c:	19ad      	adds	r5, r5, r6
 802514e:	8b20      	ldrh	r0, [r4, #24]
 8025150:	8b61      	ldrh	r1, [r4, #26]
 8025152:	bf54      	ite	pl
 8025154:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8025158:	46c1      	movmi	r9, r8
 802515a:	9a01      	ldr	r2, [sp, #4]
 802515c:	bf58      	it	pl
 802515e:	1aed      	subpl	r5, r5, r3
 8025160:	4448      	add	r0, r9
 8025162:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025166:	4417      	add	r7, r2
 8025168:	44cc      	add	ip, r9
 802516a:	9a04      	ldr	r2, [sp, #16]
 802516c:	b200      	sxth	r0, r0
 802516e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8025172:	b209      	sxth	r1, r1
 8025174:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025178:	443a      	add	r2, r7
 802517a:	8320      	strh	r0, [r4, #24]
 802517c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025180:	8361      	strh	r1, [r4, #26]
 8025182:	4552      	cmp	r2, sl
 8025184:	d017      	beq.n	80251b6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8025186:	ea50 0201 	orrs.w	r2, r0, r1
 802518a:	d00d      	beq.n	80251a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802518c:	f1b9 0f00 	cmp.w	r9, #0
 8025190:	db0a      	blt.n	80251a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025192:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025194:	4549      	cmp	r1, r9
 8025196:	dd07      	ble.n	80251a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025198:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802519c:	4288      	cmp	r0, r1
 802519e:	d337      	bcc.n	8025210 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80251a0:	f04f 0201 	mov.w	r2, #1
 80251a4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80251a8:	9a00      	ldr	r2, [sp, #0]
 80251aa:	82a7      	strh	r7, [r4, #20]
 80251ac:	82e2      	strh	r2, [r4, #22]
 80251ae:	f04f 0200 	mov.w	r2, #0
 80251b2:	8322      	strh	r2, [r4, #24]
 80251b4:	8362      	strh	r2, [r4, #26]
 80251b6:	45be      	cmp	lr, r7
 80251b8:	d1c8      	bne.n	802514c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80251ba:	9b03      	ldr	r3, [sp, #12]
 80251bc:	8b62      	ldrh	r2, [r4, #26]
 80251be:	eba3 0c0c 	sub.w	ip, r3, ip
 80251c2:	8b23      	ldrh	r3, [r4, #24]
 80251c4:	4463      	add	r3, ip
 80251c6:	8323      	strh	r3, [r4, #24]
 80251c8:	9b02      	ldr	r3, [sp, #8]
 80251ca:	3320      	adds	r3, #32
 80251cc:	eba3 030b 	sub.w	r3, r3, fp
 80251d0:	fb0c 2c03 	mla	ip, ip, r3, r2
 80251d4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80251d8:	f7ff baae 	b.w	8024738 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80251dc:	f04f 32ff 	mov.w	r2, #4294967295
 80251e0:	fb05 f508 	mul.w	r5, r5, r8
 80251e4:	425b      	negs	r3, r3
 80251e6:	f04f 0b00 	mov.w	fp, #0
 80251ea:	9201      	str	r2, [sp, #4]
 80251ec:	e761      	b.n	80250b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80251ee:	f104 0814 	add.w	r8, r4, #20
 80251f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80251f6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80251fa:	f8c9 0000 	str.w	r0, [r9]
 80251fe:	f8c9 1004 	str.w	r1, [r9, #4]
 8025202:	6921      	ldr	r1, [r4, #16]
 8025204:	3108      	adds	r1, #8
 8025206:	6121      	str	r1, [r4, #16]
 8025208:	68a1      	ldr	r1, [r4, #8]
 802520a:	3101      	adds	r1, #1
 802520c:	60a1      	str	r1, [r4, #8]
 802520e:	e782      	b.n	8025116 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025210:	f104 0914 	add.w	r9, r4, #20
 8025214:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025218:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802521c:	f8ca 0000 	str.w	r0, [sl]
 8025220:	f8ca 1004 	str.w	r1, [sl, #4]
 8025224:	6921      	ldr	r1, [r4, #16]
 8025226:	3108      	adds	r1, #8
 8025228:	6121      	str	r1, [r4, #16]
 802522a:	68a1      	ldr	r1, [r4, #8]
 802522c:	3101      	adds	r1, #1
 802522e:	60a1      	str	r1, [r4, #8]
 8025230:	e7ba      	b.n	80251a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08025232 <_ZN8touchgfx7Outline6lineToEii>:
 8025232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025234:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025236:	4604      	mov	r4, r0
 8025238:	460d      	mov	r5, r1
 802523a:	4616      	mov	r6, r2
 802523c:	079b      	lsls	r3, r3, #30
 802523e:	d526      	bpl.n	802528e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025240:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8025244:	ea85 0001 	eor.w	r0, r5, r1
 8025248:	ea86 0302 	eor.w	r3, r6, r2
 802524c:	4303      	orrs	r3, r0
 802524e:	d01e      	beq.n	802528e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8025250:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025252:	114b      	asrs	r3, r1, #5
 8025254:	9600      	str	r6, [sp, #0]
 8025256:	4283      	cmp	r3, r0
 8025258:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802525a:	bfb8      	it	lt
 802525c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802525e:	3301      	adds	r3, #1
 8025260:	4283      	cmp	r3, r0
 8025262:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025264:	bfc8      	it	gt
 8025266:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025268:	116b      	asrs	r3, r5, #5
 802526a:	4283      	cmp	r3, r0
 802526c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802526e:	bfb8      	it	lt
 8025270:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8025272:	3301      	adds	r3, #1
 8025274:	4283      	cmp	r3, r0
 8025276:	4620      	mov	r0, r4
 8025278:	bfc8      	it	gt
 802527a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802527c:	462b      	mov	r3, r5
 802527e:	f7ff f9e3 	bl	8024648 <_ZN8touchgfx7Outline10renderLineEiiii>
 8025282:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025284:	f043 0301 	orr.w	r3, r3, #1
 8025288:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802528c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802528e:	b002      	add	sp, #8
 8025290:	bd70      	pop	{r4, r5, r6, pc}

08025292 <_ZN8touchgfx7Outline6moveToEii>:
 8025292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025294:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025296:	4615      	mov	r5, r2
 8025298:	4604      	mov	r4, r0
 802529a:	460e      	mov	r6, r1
 802529c:	079a      	lsls	r2, r3, #30
 802529e:	d401      	bmi.n	80252a4 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80252a0:	f7ff f98c 	bl	80245bc <_ZN8touchgfx7Outline5resetEv>
 80252a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80252a6:	07db      	lsls	r3, r3, #31
 80252a8:	d504      	bpl.n	80252b4 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80252aa:	4620      	mov	r0, r4
 80252ac:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80252b0:	f7ff ffbf 	bl	8025232 <_ZN8touchgfx7Outline6lineToEii>
 80252b4:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80252b8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80252bc:	116f      	asrs	r7, r5, #5
 80252be:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80252c2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80252c6:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80252ca:	4291      	cmp	r1, r2
 80252cc:	d015      	beq.n	80252fa <_ZN8touchgfx7Outline6moveToEii+0x68>
 80252ce:	8b61      	ldrh	r1, [r4, #26]
 80252d0:	8b22      	ldrh	r2, [r4, #24]
 80252d2:	430a      	orrs	r2, r1
 80252d4:	d00b      	beq.n	80252ee <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80252d6:	2b00      	cmp	r3, #0
 80252d8:	db09      	blt.n	80252ee <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80252da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80252dc:	429a      	cmp	r2, r3
 80252de:	dd06      	ble.n	80252ee <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80252e0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80252e4:	429a      	cmp	r2, r3
 80252e6:	d30d      	bcc.n	8025304 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80252e8:	2301      	movs	r3, #1
 80252ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80252ee:	2300      	movs	r3, #0
 80252f0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80252f4:	82e7      	strh	r7, [r4, #22]
 80252f6:	8323      	strh	r3, [r4, #24]
 80252f8:	8363      	strh	r3, [r4, #26]
 80252fa:	61e6      	str	r6, [r4, #28]
 80252fc:	62a5      	str	r5, [r4, #40]	; 0x28
 80252fe:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8025302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025304:	f104 0314 	add.w	r3, r4, #20
 8025308:	6922      	ldr	r2, [r4, #16]
 802530a:	cb03      	ldmia	r3!, {r0, r1}
 802530c:	6010      	str	r0, [r2, #0]
 802530e:	6051      	str	r1, [r2, #4]
 8025310:	6923      	ldr	r3, [r4, #16]
 8025312:	3308      	adds	r3, #8
 8025314:	6123      	str	r3, [r4, #16]
 8025316:	68a3      	ldr	r3, [r4, #8]
 8025318:	3301      	adds	r3, #1
 802531a:	60a3      	str	r3, [r4, #8]
 802531c:	e7e7      	b.n	80252ee <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802531e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802531e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025322:	b0d1      	sub	sp, #324	; 0x144
 8025324:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025328:	466c      	mov	r4, sp
 802532a:	1a0d      	subs	r5, r1, r0
 802532c:	f100 0208 	add.w	r2, r0, #8
 8025330:	2d48      	cmp	r5, #72	; 0x48
 8025332:	f340 80ba 	ble.w	80254aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025336:	112d      	asrs	r5, r5, #4
 8025338:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802533c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025340:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8025344:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025348:	f9b0 8000 	ldrsh.w	r8, [r0]
 802534c:	681e      	ldr	r6, [r3, #0]
 802534e:	6006      	str	r6, [r0, #0]
 8025350:	685e      	ldr	r6, [r3, #4]
 8025352:	6046      	str	r6, [r0, #4]
 8025354:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025358:	f8a3 c004 	strh.w	ip, [r3, #4]
 802535c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025360:	80df      	strh	r7, [r3, #6]
 8025362:	f1a1 0308 	sub.w	r3, r1, #8
 8025366:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802536a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802536e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8025372:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025376:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802537a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802537e:	45ac      	cmp	ip, r5
 8025380:	dd0f      	ble.n	80253a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8025382:	681d      	ldr	r5, [r3, #0]
 8025384:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025388:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802538c:	6015      	str	r5, [r2, #0]
 802538e:	685d      	ldr	r5, [r3, #4]
 8025390:	6055      	str	r5, [r2, #4]
 8025392:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025396:	f821 6c06 	strh.w	r6, [r1, #-6]
 802539a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802539e:	f821 cc02 	strh.w	ip, [r1, #-2]
 80253a2:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80253a6:	f9b0 7000 	ldrsh.w	r7, [r0]
 80253aa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80253ae:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80253b2:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80253b6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80253ba:	4565      	cmp	r5, ip
 80253bc:	dd0d      	ble.n	80253da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80253be:	6815      	ldr	r5, [r2, #0]
 80253c0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80253c4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80253c8:	6005      	str	r5, [r0, #0]
 80253ca:	6855      	ldr	r5, [r2, #4]
 80253cc:	8107      	strh	r7, [r0, #8]
 80253ce:	6045      	str	r5, [r0, #4]
 80253d0:	8146      	strh	r6, [r0, #10]
 80253d2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80253d6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80253da:	f9b0 7000 	ldrsh.w	r7, [r0]
 80253de:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80253e2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80253e6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80253ea:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80253ee:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80253f2:	45ac      	cmp	ip, r5
 80253f4:	dd0f      	ble.n	8025416 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80253f6:	681d      	ldr	r5, [r3, #0]
 80253f8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80253fc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025400:	6005      	str	r5, [r0, #0]
 8025402:	685d      	ldr	r5, [r3, #4]
 8025404:	6045      	str	r5, [r0, #4]
 8025406:	f821 7c08 	strh.w	r7, [r1, #-8]
 802540a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802540e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025412:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025416:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802541a:	f102 0508 	add.w	r5, r2, #8
 802541e:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8025422:	f9b0 e000 	ldrsh.w	lr, [r0]
 8025426:	462f      	mov	r7, r5
 8025428:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802542c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025430:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8025434:	45b2      	cmp	sl, r6
 8025436:	dc18      	bgt.n	802546a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025438:	3b08      	subs	r3, #8
 802543a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802543e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025442:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8025446:	45b2      	cmp	sl, r6
 8025448:	dbf6      	blt.n	8025438 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802544a:	42ab      	cmp	r3, r5
 802544c:	681e      	ldr	r6, [r3, #0]
 802544e:	d30e      	bcc.n	802546e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025450:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8025454:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025458:	602e      	str	r6, [r5, #0]
 802545a:	685e      	ldr	r6, [r3, #4]
 802545c:	606e      	str	r6, [r5, #4]
 802545e:	f8a3 9000 	strh.w	r9, [r3]
 8025462:	f8a3 8002 	strh.w	r8, [r3, #2]
 8025466:	809f      	strh	r7, [r3, #4]
 8025468:	80da      	strh	r2, [r3, #6]
 802546a:	462a      	mov	r2, r5
 802546c:	e7d3      	b.n	8025416 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802546e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8025472:	6006      	str	r6, [r0, #0]
 8025474:	685e      	ldr	r6, [r3, #4]
 8025476:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802547a:	6046      	str	r6, [r0, #4]
 802547c:	1a1e      	subs	r6, r3, r0
 802547e:	80da      	strh	r2, [r3, #6]
 8025480:	1b4a      	subs	r2, r1, r5
 8025482:	f8a3 e000 	strh.w	lr, [r3]
 8025486:	10d2      	asrs	r2, r2, #3
 8025488:	f8a3 c002 	strh.w	ip, [r3, #2]
 802548c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025490:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8025494:	bfb5      	itete	lt
 8025496:	e9c4 0300 	strdlt	r0, r3, [r4]
 802549a:	4607      	movge	r7, r0
 802549c:	460b      	movlt	r3, r1
 802549e:	e9c4 5100 	strdge	r5, r1, [r4]
 80254a2:	4638      	mov	r0, r7
 80254a4:	3408      	adds	r4, #8
 80254a6:	4619      	mov	r1, r3
 80254a8:	e73f      	b.n	802532a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80254aa:	4291      	cmp	r1, r2
 80254ac:	d925      	bls.n	80254fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80254ae:	f1a2 0310 	sub.w	r3, r2, #16
 80254b2:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80254b6:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80254ba:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80254be:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80254c2:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80254c6:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80254ca:	42b5      	cmp	r5, r6
 80254cc:	dd13      	ble.n	80254f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80254ce:	461d      	mov	r5, r3
 80254d0:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80254d4:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80254d8:	3b08      	subs	r3, #8
 80254da:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80254de:	619e      	str	r6, [r3, #24]
 80254e0:	42a8      	cmp	r0, r5
 80254e2:	686e      	ldr	r6, [r5, #4]
 80254e4:	f8a3 c010 	strh.w	ip, [r3, #16]
 80254e8:	61de      	str	r6, [r3, #28]
 80254ea:	825f      	strh	r7, [r3, #18]
 80254ec:	f8a3 8014 	strh.w	r8, [r3, #20]
 80254f0:	f8a3 e016 	strh.w	lr, [r3, #22]
 80254f4:	d1dd      	bne.n	80254b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80254f6:	3208      	adds	r2, #8
 80254f8:	e7d7      	b.n	80254aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80254fa:	466b      	mov	r3, sp
 80254fc:	429c      	cmp	r4, r3
 80254fe:	d903      	bls.n	8025508 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025500:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8025504:	3c08      	subs	r4, #8
 8025506:	e710      	b.n	802532a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025508:	b051      	add	sp, #324	; 0x144
 802550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802550e <_ZN8touchgfx7Outline9sortCellsEv>:
 802550e:	6881      	ldr	r1, [r0, #8]
 8025510:	b111      	cbz	r1, 8025518 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8025512:	68c0      	ldr	r0, [r0, #12]
 8025514:	f7ff bf03 	b.w	802531e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025518:	4770      	bx	lr

0802551a <_ZN8touchgfx7Outline8getCellsEv>:
 802551a:	b510      	push	{r4, lr}
 802551c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802551e:	4604      	mov	r4, r0
 8025520:	07da      	lsls	r2, r3, #31
 8025522:	d507      	bpl.n	8025534 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8025524:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025528:	f7ff fe83 	bl	8025232 <_ZN8touchgfx7Outline6lineToEii>
 802552c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802552e:	f023 0301 	bic.w	r3, r3, #1
 8025532:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025536:	079b      	lsls	r3, r3, #30
 8025538:	d51a      	bpl.n	8025570 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802553a:	8b62      	ldrh	r2, [r4, #26]
 802553c:	8b23      	ldrh	r3, [r4, #24]
 802553e:	4313      	orrs	r3, r2
 8025540:	d00d      	beq.n	802555e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025542:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025546:	2b00      	cmp	r3, #0
 8025548:	db09      	blt.n	802555e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802554a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802554c:	4293      	cmp	r3, r2
 802554e:	da06      	bge.n	802555e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025550:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8025554:	429a      	cmp	r2, r3
 8025556:	d80d      	bhi.n	8025574 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025558:	2301      	movs	r3, #1
 802555a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802555e:	68a0      	ldr	r0, [r4, #8]
 8025560:	b138      	cbz	r0, 8025572 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8025562:	4620      	mov	r0, r4
 8025564:	f7ff ffd3 	bl	802550e <_ZN8touchgfx7Outline9sortCellsEv>
 8025568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802556a:	f023 0302 	bic.w	r3, r3, #2
 802556e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025570:	68e0      	ldr	r0, [r4, #12]
 8025572:	bd10      	pop	{r4, pc}
 8025574:	f104 0314 	add.w	r3, r4, #20
 8025578:	6922      	ldr	r2, [r4, #16]
 802557a:	cb03      	ldmia	r3!, {r0, r1}
 802557c:	6010      	str	r0, [r2, #0]
 802557e:	6051      	str	r1, [r2, #4]
 8025580:	6923      	ldr	r3, [r4, #16]
 8025582:	3308      	adds	r3, #8
 8025584:	6123      	str	r3, [r4, #16]
 8025586:	68a3      	ldr	r3, [r4, #8]
 8025588:	3301      	adds	r3, #1
 802558a:	60a3      	str	r3, [r4, #8]
 802558c:	e7e7      	b.n	802555e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802558e <_ZN8touchgfx8ScanlineD1Ev>:
 802558e:	4770      	bx	lr

08025590 <_ZN8touchgfx8ScanlineD0Ev>:
 8025590:	b510      	push	{r4, lr}
 8025592:	4604      	mov	r4, r0
 8025594:	2124      	movs	r1, #36	; 0x24
 8025596:	f000 f887 	bl	80256a8 <_ZdlPvj>
 802559a:	4620      	mov	r0, r4
 802559c:	bd10      	pop	{r4, pc}

0802559e <_ZN8touchgfx8Scanline5resetEv>:
 802559e:	b510      	push	{r4, lr}
 80255a0:	4604      	mov	r4, r0
 80255a2:	f7f2 ff33 	bl	801840c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80255a6:	61a0      	str	r0, [r4, #24]
 80255a8:	f7f2 ff36 	bl	8018418 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80255ac:	61e0      	str	r0, [r4, #28]
 80255ae:	f7f2 ff39 	bl	8018424 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80255b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80255b6:	6220      	str	r0, [r4, #32]
 80255b8:	6160      	str	r0, [r4, #20]
 80255ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80255be:	69e3      	ldr	r3, [r4, #28]
 80255c0:	6123      	str	r3, [r4, #16]
 80255c2:	2300      	movs	r3, #0
 80255c4:	60e3      	str	r3, [r4, #12]
 80255c6:	bd10      	pop	{r4, pc}

080255c8 <_ZN8touchgfx8ScanlineC1Ev>:
 80255c8:	4b07      	ldr	r3, [pc, #28]	; (80255e8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80255ca:	b510      	push	{r4, lr}
 80255cc:	6003      	str	r3, [r0, #0]
 80255ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80255d2:	4604      	mov	r4, r0
 80255d4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80255d8:	2300      	movs	r3, #0
 80255da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80255de:	6143      	str	r3, [r0, #20]
 80255e0:	f7ff ffdd 	bl	802559e <_ZN8touchgfx8Scanline5resetEv>
 80255e4:	4620      	mov	r0, r4
 80255e6:	bd10      	pop	{r4, pc}
 80255e8:	0802b89c 	.word	0x0802b89c

080255ec <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80255ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255f0:	1e0c      	subs	r4, r1, #0
 80255f2:	4605      	mov	r5, r0
 80255f4:	4617      	mov	r7, r2
 80255f6:	461e      	mov	r6, r3
 80255f8:	da03      	bge.n	8025602 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80255fa:	4426      	add	r6, r4
 80255fc:	2e01      	cmp	r6, #1
 80255fe:	d421      	bmi.n	8025644 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025600:	2400      	movs	r4, #0
 8025602:	f7f2 fefd 	bl	8018400 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025606:	42a0      	cmp	r0, r4
 8025608:	d91c      	bls.n	8025644 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802560a:	eb04 0806 	add.w	r8, r4, r6
 802560e:	f7f2 fef7 	bl	8018400 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025612:	4580      	cmp	r8, r0
 8025614:	d902      	bls.n	802561c <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8025616:	f7f2 fef3 	bl	8018400 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802561a:	1b06      	subs	r6, r0, r4
 802561c:	69a8      	ldr	r0, [r5, #24]
 802561e:	4632      	mov	r2, r6
 8025620:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8025624:	4420      	add	r0, r4
 8025626:	f7f4 fc53 	bl	8019ed0 <_ZN8touchgfx6memsetEPvhm>
 802562a:	686b      	ldr	r3, [r5, #4]
 802562c:	b2b2      	uxth	r2, r6
 802562e:	3301      	adds	r3, #1
 8025630:	42a3      	cmp	r3, r4
 8025632:	696b      	ldr	r3, [r5, #20]
 8025634:	d108      	bne.n	8025648 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8025636:	8819      	ldrh	r1, [r3, #0]
 8025638:	440a      	add	r2, r1
 802563a:	801a      	strh	r2, [r3, #0]
 802563c:	3c01      	subs	r4, #1
 802563e:	4434      	add	r4, r6
 8025640:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8025644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025648:	1c99      	adds	r1, r3, #2
 802564a:	6169      	str	r1, [r5, #20]
 802564c:	805a      	strh	r2, [r3, #2]
 802564e:	692b      	ldr	r3, [r5, #16]
 8025650:	1c9a      	adds	r2, r3, #2
 8025652:	612a      	str	r2, [r5, #16]
 8025654:	805c      	strh	r4, [r3, #2]
 8025656:	68eb      	ldr	r3, [r5, #12]
 8025658:	3301      	adds	r3, #1
 802565a:	60eb      	str	r3, [r5, #12]
 802565c:	e7ee      	b.n	802563c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802565e <_ZN8touchgfx15RenderingBufferD1Ev>:
 802565e:	4770      	bx	lr

08025660 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8025660:	b510      	push	{r4, lr}
 8025662:	4604      	mov	r4, r0
 8025664:	2118      	movs	r1, #24
 8025666:	f000 f81f 	bl	80256a8 <_ZdlPvj>
 802566a:	4620      	mov	r0, r4
 802566c:	bd10      	pop	{r4, pc}
	...

08025670 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025670:	4a04      	ldr	r2, [pc, #16]	; (8025684 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8025672:	6002      	str	r2, [r0, #0]
 8025674:	2200      	movs	r2, #0
 8025676:	6042      	str	r2, [r0, #4]
 8025678:	7202      	strb	r2, [r0, #8]
 802567a:	6142      	str	r2, [r0, #20]
 802567c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025680:	4770      	bx	lr
 8025682:	bf00      	nop
 8025684:	0802b8ac 	.word	0x0802b8ac

08025688 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025688:	60c3      	str	r3, [r0, #12]
 802568a:	9b00      	ldr	r3, [sp, #0]
 802568c:	6041      	str	r1, [r0, #4]
 802568e:	6103      	str	r3, [r0, #16]
 8025690:	9b01      	ldr	r3, [sp, #4]
 8025692:	7202      	strb	r2, [r0, #8]
 8025694:	6143      	str	r3, [r0, #20]
 8025696:	4770      	bx	lr

08025698 <__aeabi_atexit>:
 8025698:	460b      	mov	r3, r1
 802569a:	4601      	mov	r1, r0
 802569c:	4618      	mov	r0, r3
 802569e:	f000 b853 	b.w	8025748 <__cxa_atexit>

080256a2 <__cxa_pure_virtual>:
 80256a2:	b508      	push	{r3, lr}
 80256a4:	f000 f820 	bl	80256e8 <_ZSt9terminatev>

080256a8 <_ZdlPvj>:
 80256a8:	f000 b80f 	b.w	80256ca <_ZdlPv>

080256ac <__cxa_guard_acquire>:
 80256ac:	6803      	ldr	r3, [r0, #0]
 80256ae:	07db      	lsls	r3, r3, #31
 80256b0:	d406      	bmi.n	80256c0 <__cxa_guard_acquire+0x14>
 80256b2:	7843      	ldrb	r3, [r0, #1]
 80256b4:	b103      	cbz	r3, 80256b8 <__cxa_guard_acquire+0xc>
 80256b6:	deff      	udf	#255	; 0xff
 80256b8:	2301      	movs	r3, #1
 80256ba:	7043      	strb	r3, [r0, #1]
 80256bc:	4618      	mov	r0, r3
 80256be:	4770      	bx	lr
 80256c0:	2000      	movs	r0, #0
 80256c2:	4770      	bx	lr

080256c4 <__cxa_guard_release>:
 80256c4:	2301      	movs	r3, #1
 80256c6:	6003      	str	r3, [r0, #0]
 80256c8:	4770      	bx	lr

080256ca <_ZdlPv>:
 80256ca:	f000 b88f 	b.w	80257ec <free>

080256ce <_ZN10__cxxabiv111__terminateEPFvvE>:
 80256ce:	b508      	push	{r3, lr}
 80256d0:	4780      	blx	r0
 80256d2:	f000 f80e 	bl	80256f2 <abort>
	...

080256d8 <_ZSt13get_terminatev>:
 80256d8:	4b02      	ldr	r3, [pc, #8]	; (80256e4 <_ZSt13get_terminatev+0xc>)
 80256da:	6818      	ldr	r0, [r3, #0]
 80256dc:	f3bf 8f5b 	dmb	ish
 80256e0:	4770      	bx	lr
 80256e2:	bf00      	nop
 80256e4:	20000094 	.word	0x20000094

080256e8 <_ZSt9terminatev>:
 80256e8:	b508      	push	{r3, lr}
 80256ea:	f7ff fff5 	bl	80256d8 <_ZSt13get_terminatev>
 80256ee:	f7ff ffee 	bl	80256ce <_ZN10__cxxabiv111__terminateEPFvvE>

080256f2 <abort>:
 80256f2:	b508      	push	{r3, lr}
 80256f4:	2006      	movs	r0, #6
 80256f6:	f000 fc71 	bl	8025fdc <raise>
 80256fa:	2001      	movs	r0, #1
 80256fc:	f7dd f8ae 	bl	800285c <_exit>

08025700 <__assert_func>:
 8025700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025702:	461c      	mov	r4, r3
 8025704:	4b09      	ldr	r3, [pc, #36]	; (802572c <__assert_func+0x2c>)
 8025706:	681b      	ldr	r3, [r3, #0]
 8025708:	4605      	mov	r5, r0
 802570a:	68d8      	ldr	r0, [r3, #12]
 802570c:	b152      	cbz	r2, 8025724 <__assert_func+0x24>
 802570e:	4b08      	ldr	r3, [pc, #32]	; (8025730 <__assert_func+0x30>)
 8025710:	9100      	str	r1, [sp, #0]
 8025712:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8025716:	4907      	ldr	r1, [pc, #28]	; (8025734 <__assert_func+0x34>)
 8025718:	462b      	mov	r3, r5
 802571a:	4622      	mov	r2, r4
 802571c:	f000 f828 	bl	8025770 <fiprintf>
 8025720:	f7ff ffe7 	bl	80256f2 <abort>
 8025724:	4b04      	ldr	r3, [pc, #16]	; (8025738 <__assert_func+0x38>)
 8025726:	461a      	mov	r2, r3
 8025728:	e7f2      	b.n	8025710 <__assert_func+0x10>
 802572a:	bf00      	nop
 802572c:	20000098 	.word	0x20000098
 8025730:	0802b8b4 	.word	0x0802b8b4
 8025734:	0802b8c1 	.word	0x0802b8c1
 8025738:	0802b8ef 	.word	0x0802b8ef

0802573c <atexit>:
 802573c:	2300      	movs	r3, #0
 802573e:	4601      	mov	r1, r0
 8025740:	461a      	mov	r2, r3
 8025742:	4618      	mov	r0, r3
 8025744:	f000 bd26 	b.w	8026194 <__register_exitproc>

08025748 <__cxa_atexit>:
 8025748:	b510      	push	{r4, lr}
 802574a:	4c05      	ldr	r4, [pc, #20]	; (8025760 <__cxa_atexit+0x18>)
 802574c:	4613      	mov	r3, r2
 802574e:	b12c      	cbz	r4, 802575c <__cxa_atexit+0x14>
 8025750:	460a      	mov	r2, r1
 8025752:	4601      	mov	r1, r0
 8025754:	2002      	movs	r0, #2
 8025756:	f000 fd1d 	bl	8026194 <__register_exitproc>
 802575a:	bd10      	pop	{r4, pc}
 802575c:	4620      	mov	r0, r4
 802575e:	e7fc      	b.n	802575a <__cxa_atexit+0x12>
 8025760:	08026195 	.word	0x08026195

08025764 <__errno>:
 8025764:	4b01      	ldr	r3, [pc, #4]	; (802576c <__errno+0x8>)
 8025766:	6818      	ldr	r0, [r3, #0]
 8025768:	4770      	bx	lr
 802576a:	bf00      	nop
 802576c:	20000098 	.word	0x20000098

08025770 <fiprintf>:
 8025770:	b40e      	push	{r1, r2, r3}
 8025772:	b503      	push	{r0, r1, lr}
 8025774:	4601      	mov	r1, r0
 8025776:	ab03      	add	r3, sp, #12
 8025778:	4805      	ldr	r0, [pc, #20]	; (8025790 <fiprintf+0x20>)
 802577a:	f853 2b04 	ldr.w	r2, [r3], #4
 802577e:	6800      	ldr	r0, [r0, #0]
 8025780:	9301      	str	r3, [sp, #4]
 8025782:	f000 f921 	bl	80259c8 <_vfiprintf_r>
 8025786:	b002      	add	sp, #8
 8025788:	f85d eb04 	ldr.w	lr, [sp], #4
 802578c:	b003      	add	sp, #12
 802578e:	4770      	bx	lr
 8025790:	20000098 	.word	0x20000098

08025794 <__libc_init_array>:
 8025794:	b570      	push	{r4, r5, r6, lr}
 8025796:	4e0d      	ldr	r6, [pc, #52]	; (80257cc <__libc_init_array+0x38>)
 8025798:	4c0d      	ldr	r4, [pc, #52]	; (80257d0 <__libc_init_array+0x3c>)
 802579a:	1ba4      	subs	r4, r4, r6
 802579c:	10a4      	asrs	r4, r4, #2
 802579e:	2500      	movs	r5, #0
 80257a0:	42a5      	cmp	r5, r4
 80257a2:	d109      	bne.n	80257b8 <__libc_init_array+0x24>
 80257a4:	4e0b      	ldr	r6, [pc, #44]	; (80257d4 <__libc_init_array+0x40>)
 80257a6:	4c0c      	ldr	r4, [pc, #48]	; (80257d8 <__libc_init_array+0x44>)
 80257a8:	f000 ffe4 	bl	8026774 <_init>
 80257ac:	1ba4      	subs	r4, r4, r6
 80257ae:	10a4      	asrs	r4, r4, #2
 80257b0:	2500      	movs	r5, #0
 80257b2:	42a5      	cmp	r5, r4
 80257b4:	d105      	bne.n	80257c2 <__libc_init_array+0x2e>
 80257b6:	bd70      	pop	{r4, r5, r6, pc}
 80257b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80257bc:	4798      	blx	r3
 80257be:	3501      	adds	r5, #1
 80257c0:	e7ee      	b.n	80257a0 <__libc_init_array+0xc>
 80257c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80257c6:	4798      	blx	r3
 80257c8:	3501      	adds	r5, #1
 80257ca:	e7f2      	b.n	80257b2 <__libc_init_array+0x1e>
 80257cc:	080e03ac 	.word	0x080e03ac
 80257d0:	080e03ac 	.word	0x080e03ac
 80257d4:	080e03ac 	.word	0x080e03ac
 80257d8:	080e03c0 	.word	0x080e03c0

080257dc <malloc>:
 80257dc:	4b02      	ldr	r3, [pc, #8]	; (80257e8 <malloc+0xc>)
 80257de:	4601      	mov	r1, r0
 80257e0:	6818      	ldr	r0, [r3, #0]
 80257e2:	f000 b86d 	b.w	80258c0 <_malloc_r>
 80257e6:	bf00      	nop
 80257e8:	20000098 	.word	0x20000098

080257ec <free>:
 80257ec:	4b02      	ldr	r3, [pc, #8]	; (80257f8 <free+0xc>)
 80257ee:	4601      	mov	r1, r0
 80257f0:	6818      	ldr	r0, [r3, #0]
 80257f2:	f000 b817 	b.w	8025824 <_free_r>
 80257f6:	bf00      	nop
 80257f8:	20000098 	.word	0x20000098

080257fc <memcpy>:
 80257fc:	b510      	push	{r4, lr}
 80257fe:	1e43      	subs	r3, r0, #1
 8025800:	440a      	add	r2, r1
 8025802:	4291      	cmp	r1, r2
 8025804:	d100      	bne.n	8025808 <memcpy+0xc>
 8025806:	bd10      	pop	{r4, pc}
 8025808:	f811 4b01 	ldrb.w	r4, [r1], #1
 802580c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025810:	e7f7      	b.n	8025802 <memcpy+0x6>

08025812 <memset>:
 8025812:	4402      	add	r2, r0
 8025814:	4603      	mov	r3, r0
 8025816:	4293      	cmp	r3, r2
 8025818:	d100      	bne.n	802581c <memset+0xa>
 802581a:	4770      	bx	lr
 802581c:	f803 1b01 	strb.w	r1, [r3], #1
 8025820:	e7f9      	b.n	8025816 <memset+0x4>
	...

08025824 <_free_r>:
 8025824:	b538      	push	{r3, r4, r5, lr}
 8025826:	4605      	mov	r5, r0
 8025828:	2900      	cmp	r1, #0
 802582a:	d045      	beq.n	80258b8 <_free_r+0x94>
 802582c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025830:	1f0c      	subs	r4, r1, #4
 8025832:	2b00      	cmp	r3, #0
 8025834:	bfb8      	it	lt
 8025836:	18e4      	addlt	r4, r4, r3
 8025838:	f000 feee 	bl	8026618 <__malloc_lock>
 802583c:	4a1f      	ldr	r2, [pc, #124]	; (80258bc <_free_r+0x98>)
 802583e:	6813      	ldr	r3, [r2, #0]
 8025840:	4610      	mov	r0, r2
 8025842:	b933      	cbnz	r3, 8025852 <_free_r+0x2e>
 8025844:	6063      	str	r3, [r4, #4]
 8025846:	6014      	str	r4, [r2, #0]
 8025848:	4628      	mov	r0, r5
 802584a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802584e:	f000 bee4 	b.w	802661a <__malloc_unlock>
 8025852:	42a3      	cmp	r3, r4
 8025854:	d90c      	bls.n	8025870 <_free_r+0x4c>
 8025856:	6821      	ldr	r1, [r4, #0]
 8025858:	1862      	adds	r2, r4, r1
 802585a:	4293      	cmp	r3, r2
 802585c:	bf04      	itt	eq
 802585e:	681a      	ldreq	r2, [r3, #0]
 8025860:	685b      	ldreq	r3, [r3, #4]
 8025862:	6063      	str	r3, [r4, #4]
 8025864:	bf04      	itt	eq
 8025866:	1852      	addeq	r2, r2, r1
 8025868:	6022      	streq	r2, [r4, #0]
 802586a:	6004      	str	r4, [r0, #0]
 802586c:	e7ec      	b.n	8025848 <_free_r+0x24>
 802586e:	4613      	mov	r3, r2
 8025870:	685a      	ldr	r2, [r3, #4]
 8025872:	b10a      	cbz	r2, 8025878 <_free_r+0x54>
 8025874:	42a2      	cmp	r2, r4
 8025876:	d9fa      	bls.n	802586e <_free_r+0x4a>
 8025878:	6819      	ldr	r1, [r3, #0]
 802587a:	1858      	adds	r0, r3, r1
 802587c:	42a0      	cmp	r0, r4
 802587e:	d10b      	bne.n	8025898 <_free_r+0x74>
 8025880:	6820      	ldr	r0, [r4, #0]
 8025882:	4401      	add	r1, r0
 8025884:	1858      	adds	r0, r3, r1
 8025886:	4282      	cmp	r2, r0
 8025888:	6019      	str	r1, [r3, #0]
 802588a:	d1dd      	bne.n	8025848 <_free_r+0x24>
 802588c:	6810      	ldr	r0, [r2, #0]
 802588e:	6852      	ldr	r2, [r2, #4]
 8025890:	605a      	str	r2, [r3, #4]
 8025892:	4401      	add	r1, r0
 8025894:	6019      	str	r1, [r3, #0]
 8025896:	e7d7      	b.n	8025848 <_free_r+0x24>
 8025898:	d902      	bls.n	80258a0 <_free_r+0x7c>
 802589a:	230c      	movs	r3, #12
 802589c:	602b      	str	r3, [r5, #0]
 802589e:	e7d3      	b.n	8025848 <_free_r+0x24>
 80258a0:	6820      	ldr	r0, [r4, #0]
 80258a2:	1821      	adds	r1, r4, r0
 80258a4:	428a      	cmp	r2, r1
 80258a6:	bf04      	itt	eq
 80258a8:	6811      	ldreq	r1, [r2, #0]
 80258aa:	6852      	ldreq	r2, [r2, #4]
 80258ac:	6062      	str	r2, [r4, #4]
 80258ae:	bf04      	itt	eq
 80258b0:	1809      	addeq	r1, r1, r0
 80258b2:	6021      	streq	r1, [r4, #0]
 80258b4:	605c      	str	r4, [r3, #4]
 80258b6:	e7c7      	b.n	8025848 <_free_r+0x24>
 80258b8:	bd38      	pop	{r3, r4, r5, pc}
 80258ba:	bf00      	nop
 80258bc:	2000b488 	.word	0x2000b488

080258c0 <_malloc_r>:
 80258c0:	b570      	push	{r4, r5, r6, lr}
 80258c2:	1ccd      	adds	r5, r1, #3
 80258c4:	f025 0503 	bic.w	r5, r5, #3
 80258c8:	3508      	adds	r5, #8
 80258ca:	2d0c      	cmp	r5, #12
 80258cc:	bf38      	it	cc
 80258ce:	250c      	movcc	r5, #12
 80258d0:	2d00      	cmp	r5, #0
 80258d2:	4606      	mov	r6, r0
 80258d4:	db01      	blt.n	80258da <_malloc_r+0x1a>
 80258d6:	42a9      	cmp	r1, r5
 80258d8:	d903      	bls.n	80258e2 <_malloc_r+0x22>
 80258da:	230c      	movs	r3, #12
 80258dc:	6033      	str	r3, [r6, #0]
 80258de:	2000      	movs	r0, #0
 80258e0:	bd70      	pop	{r4, r5, r6, pc}
 80258e2:	f000 fe99 	bl	8026618 <__malloc_lock>
 80258e6:	4a21      	ldr	r2, [pc, #132]	; (802596c <_malloc_r+0xac>)
 80258e8:	6814      	ldr	r4, [r2, #0]
 80258ea:	4621      	mov	r1, r4
 80258ec:	b991      	cbnz	r1, 8025914 <_malloc_r+0x54>
 80258ee:	4c20      	ldr	r4, [pc, #128]	; (8025970 <_malloc_r+0xb0>)
 80258f0:	6823      	ldr	r3, [r4, #0]
 80258f2:	b91b      	cbnz	r3, 80258fc <_malloc_r+0x3c>
 80258f4:	4630      	mov	r0, r6
 80258f6:	f000 fb39 	bl	8025f6c <_sbrk_r>
 80258fa:	6020      	str	r0, [r4, #0]
 80258fc:	4629      	mov	r1, r5
 80258fe:	4630      	mov	r0, r6
 8025900:	f000 fb34 	bl	8025f6c <_sbrk_r>
 8025904:	1c43      	adds	r3, r0, #1
 8025906:	d124      	bne.n	8025952 <_malloc_r+0x92>
 8025908:	230c      	movs	r3, #12
 802590a:	6033      	str	r3, [r6, #0]
 802590c:	4630      	mov	r0, r6
 802590e:	f000 fe84 	bl	802661a <__malloc_unlock>
 8025912:	e7e4      	b.n	80258de <_malloc_r+0x1e>
 8025914:	680b      	ldr	r3, [r1, #0]
 8025916:	1b5b      	subs	r3, r3, r5
 8025918:	d418      	bmi.n	802594c <_malloc_r+0x8c>
 802591a:	2b0b      	cmp	r3, #11
 802591c:	d90f      	bls.n	802593e <_malloc_r+0x7e>
 802591e:	600b      	str	r3, [r1, #0]
 8025920:	50cd      	str	r5, [r1, r3]
 8025922:	18cc      	adds	r4, r1, r3
 8025924:	4630      	mov	r0, r6
 8025926:	f000 fe78 	bl	802661a <__malloc_unlock>
 802592a:	f104 000b 	add.w	r0, r4, #11
 802592e:	1d23      	adds	r3, r4, #4
 8025930:	f020 0007 	bic.w	r0, r0, #7
 8025934:	1ac3      	subs	r3, r0, r3
 8025936:	d0d3      	beq.n	80258e0 <_malloc_r+0x20>
 8025938:	425a      	negs	r2, r3
 802593a:	50e2      	str	r2, [r4, r3]
 802593c:	e7d0      	b.n	80258e0 <_malloc_r+0x20>
 802593e:	428c      	cmp	r4, r1
 8025940:	684b      	ldr	r3, [r1, #4]
 8025942:	bf16      	itet	ne
 8025944:	6063      	strne	r3, [r4, #4]
 8025946:	6013      	streq	r3, [r2, #0]
 8025948:	460c      	movne	r4, r1
 802594a:	e7eb      	b.n	8025924 <_malloc_r+0x64>
 802594c:	460c      	mov	r4, r1
 802594e:	6849      	ldr	r1, [r1, #4]
 8025950:	e7cc      	b.n	80258ec <_malloc_r+0x2c>
 8025952:	1cc4      	adds	r4, r0, #3
 8025954:	f024 0403 	bic.w	r4, r4, #3
 8025958:	42a0      	cmp	r0, r4
 802595a:	d005      	beq.n	8025968 <_malloc_r+0xa8>
 802595c:	1a21      	subs	r1, r4, r0
 802595e:	4630      	mov	r0, r6
 8025960:	f000 fb04 	bl	8025f6c <_sbrk_r>
 8025964:	3001      	adds	r0, #1
 8025966:	d0cf      	beq.n	8025908 <_malloc_r+0x48>
 8025968:	6025      	str	r5, [r4, #0]
 802596a:	e7db      	b.n	8025924 <_malloc_r+0x64>
 802596c:	2000b488 	.word	0x2000b488
 8025970:	2000b48c 	.word	0x2000b48c

08025974 <__sfputc_r>:
 8025974:	6893      	ldr	r3, [r2, #8]
 8025976:	3b01      	subs	r3, #1
 8025978:	2b00      	cmp	r3, #0
 802597a:	b410      	push	{r4}
 802597c:	6093      	str	r3, [r2, #8]
 802597e:	da08      	bge.n	8025992 <__sfputc_r+0x1e>
 8025980:	6994      	ldr	r4, [r2, #24]
 8025982:	42a3      	cmp	r3, r4
 8025984:	db01      	blt.n	802598a <__sfputc_r+0x16>
 8025986:	290a      	cmp	r1, #10
 8025988:	d103      	bne.n	8025992 <__sfputc_r+0x1e>
 802598a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802598e:	f000 bb41 	b.w	8026014 <__swbuf_r>
 8025992:	6813      	ldr	r3, [r2, #0]
 8025994:	1c58      	adds	r0, r3, #1
 8025996:	6010      	str	r0, [r2, #0]
 8025998:	7019      	strb	r1, [r3, #0]
 802599a:	4608      	mov	r0, r1
 802599c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80259a0:	4770      	bx	lr

080259a2 <__sfputs_r>:
 80259a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80259a4:	4606      	mov	r6, r0
 80259a6:	460f      	mov	r7, r1
 80259a8:	4614      	mov	r4, r2
 80259aa:	18d5      	adds	r5, r2, r3
 80259ac:	42ac      	cmp	r4, r5
 80259ae:	d101      	bne.n	80259b4 <__sfputs_r+0x12>
 80259b0:	2000      	movs	r0, #0
 80259b2:	e007      	b.n	80259c4 <__sfputs_r+0x22>
 80259b4:	463a      	mov	r2, r7
 80259b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80259ba:	4630      	mov	r0, r6
 80259bc:	f7ff ffda 	bl	8025974 <__sfputc_r>
 80259c0:	1c43      	adds	r3, r0, #1
 80259c2:	d1f3      	bne.n	80259ac <__sfputs_r+0xa>
 80259c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080259c8 <_vfiprintf_r>:
 80259c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259cc:	460c      	mov	r4, r1
 80259ce:	b09d      	sub	sp, #116	; 0x74
 80259d0:	4617      	mov	r7, r2
 80259d2:	461d      	mov	r5, r3
 80259d4:	4606      	mov	r6, r0
 80259d6:	b118      	cbz	r0, 80259e0 <_vfiprintf_r+0x18>
 80259d8:	6983      	ldr	r3, [r0, #24]
 80259da:	b90b      	cbnz	r3, 80259e0 <_vfiprintf_r+0x18>
 80259dc:	f000 fd2e 	bl	802643c <__sinit>
 80259e0:	4b7c      	ldr	r3, [pc, #496]	; (8025bd4 <_vfiprintf_r+0x20c>)
 80259e2:	429c      	cmp	r4, r3
 80259e4:	d158      	bne.n	8025a98 <_vfiprintf_r+0xd0>
 80259e6:	6874      	ldr	r4, [r6, #4]
 80259e8:	89a3      	ldrh	r3, [r4, #12]
 80259ea:	0718      	lsls	r0, r3, #28
 80259ec:	d55e      	bpl.n	8025aac <_vfiprintf_r+0xe4>
 80259ee:	6923      	ldr	r3, [r4, #16]
 80259f0:	2b00      	cmp	r3, #0
 80259f2:	d05b      	beq.n	8025aac <_vfiprintf_r+0xe4>
 80259f4:	2300      	movs	r3, #0
 80259f6:	9309      	str	r3, [sp, #36]	; 0x24
 80259f8:	2320      	movs	r3, #32
 80259fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80259fe:	2330      	movs	r3, #48	; 0x30
 8025a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025a04:	9503      	str	r5, [sp, #12]
 8025a06:	f04f 0b01 	mov.w	fp, #1
 8025a0a:	46b8      	mov	r8, r7
 8025a0c:	4645      	mov	r5, r8
 8025a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025a12:	b10b      	cbz	r3, 8025a18 <_vfiprintf_r+0x50>
 8025a14:	2b25      	cmp	r3, #37	; 0x25
 8025a16:	d154      	bne.n	8025ac2 <_vfiprintf_r+0xfa>
 8025a18:	ebb8 0a07 	subs.w	sl, r8, r7
 8025a1c:	d00b      	beq.n	8025a36 <_vfiprintf_r+0x6e>
 8025a1e:	4653      	mov	r3, sl
 8025a20:	463a      	mov	r2, r7
 8025a22:	4621      	mov	r1, r4
 8025a24:	4630      	mov	r0, r6
 8025a26:	f7ff ffbc 	bl	80259a2 <__sfputs_r>
 8025a2a:	3001      	adds	r0, #1
 8025a2c:	f000 80c2 	beq.w	8025bb4 <_vfiprintf_r+0x1ec>
 8025a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a32:	4453      	add	r3, sl
 8025a34:	9309      	str	r3, [sp, #36]	; 0x24
 8025a36:	f898 3000 	ldrb.w	r3, [r8]
 8025a3a:	2b00      	cmp	r3, #0
 8025a3c:	f000 80ba 	beq.w	8025bb4 <_vfiprintf_r+0x1ec>
 8025a40:	2300      	movs	r3, #0
 8025a42:	f04f 32ff 	mov.w	r2, #4294967295
 8025a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025a4a:	9304      	str	r3, [sp, #16]
 8025a4c:	9307      	str	r3, [sp, #28]
 8025a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025a52:	931a      	str	r3, [sp, #104]	; 0x68
 8025a54:	46a8      	mov	r8, r5
 8025a56:	2205      	movs	r2, #5
 8025a58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025a5c:	485e      	ldr	r0, [pc, #376]	; (8025bd8 <_vfiprintf_r+0x210>)
 8025a5e:	f7da fbd7 	bl	8000210 <memchr>
 8025a62:	9b04      	ldr	r3, [sp, #16]
 8025a64:	bb78      	cbnz	r0, 8025ac6 <_vfiprintf_r+0xfe>
 8025a66:	06d9      	lsls	r1, r3, #27
 8025a68:	bf44      	itt	mi
 8025a6a:	2220      	movmi	r2, #32
 8025a6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025a70:	071a      	lsls	r2, r3, #28
 8025a72:	bf44      	itt	mi
 8025a74:	222b      	movmi	r2, #43	; 0x2b
 8025a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025a7a:	782a      	ldrb	r2, [r5, #0]
 8025a7c:	2a2a      	cmp	r2, #42	; 0x2a
 8025a7e:	d02a      	beq.n	8025ad6 <_vfiprintf_r+0x10e>
 8025a80:	9a07      	ldr	r2, [sp, #28]
 8025a82:	46a8      	mov	r8, r5
 8025a84:	2000      	movs	r0, #0
 8025a86:	250a      	movs	r5, #10
 8025a88:	4641      	mov	r1, r8
 8025a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025a8e:	3b30      	subs	r3, #48	; 0x30
 8025a90:	2b09      	cmp	r3, #9
 8025a92:	d969      	bls.n	8025b68 <_vfiprintf_r+0x1a0>
 8025a94:	b360      	cbz	r0, 8025af0 <_vfiprintf_r+0x128>
 8025a96:	e024      	b.n	8025ae2 <_vfiprintf_r+0x11a>
 8025a98:	4b50      	ldr	r3, [pc, #320]	; (8025bdc <_vfiprintf_r+0x214>)
 8025a9a:	429c      	cmp	r4, r3
 8025a9c:	d101      	bne.n	8025aa2 <_vfiprintf_r+0xda>
 8025a9e:	68b4      	ldr	r4, [r6, #8]
 8025aa0:	e7a2      	b.n	80259e8 <_vfiprintf_r+0x20>
 8025aa2:	4b4f      	ldr	r3, [pc, #316]	; (8025be0 <_vfiprintf_r+0x218>)
 8025aa4:	429c      	cmp	r4, r3
 8025aa6:	bf08      	it	eq
 8025aa8:	68f4      	ldreq	r4, [r6, #12]
 8025aaa:	e79d      	b.n	80259e8 <_vfiprintf_r+0x20>
 8025aac:	4621      	mov	r1, r4
 8025aae:	4630      	mov	r0, r6
 8025ab0:	f000 fb02 	bl	80260b8 <__swsetup_r>
 8025ab4:	2800      	cmp	r0, #0
 8025ab6:	d09d      	beq.n	80259f4 <_vfiprintf_r+0x2c>
 8025ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8025abc:	b01d      	add	sp, #116	; 0x74
 8025abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ac2:	46a8      	mov	r8, r5
 8025ac4:	e7a2      	b.n	8025a0c <_vfiprintf_r+0x44>
 8025ac6:	4a44      	ldr	r2, [pc, #272]	; (8025bd8 <_vfiprintf_r+0x210>)
 8025ac8:	1a80      	subs	r0, r0, r2
 8025aca:	fa0b f000 	lsl.w	r0, fp, r0
 8025ace:	4318      	orrs	r0, r3
 8025ad0:	9004      	str	r0, [sp, #16]
 8025ad2:	4645      	mov	r5, r8
 8025ad4:	e7be      	b.n	8025a54 <_vfiprintf_r+0x8c>
 8025ad6:	9a03      	ldr	r2, [sp, #12]
 8025ad8:	1d11      	adds	r1, r2, #4
 8025ada:	6812      	ldr	r2, [r2, #0]
 8025adc:	9103      	str	r1, [sp, #12]
 8025ade:	2a00      	cmp	r2, #0
 8025ae0:	db01      	blt.n	8025ae6 <_vfiprintf_r+0x11e>
 8025ae2:	9207      	str	r2, [sp, #28]
 8025ae4:	e004      	b.n	8025af0 <_vfiprintf_r+0x128>
 8025ae6:	4252      	negs	r2, r2
 8025ae8:	f043 0302 	orr.w	r3, r3, #2
 8025aec:	9207      	str	r2, [sp, #28]
 8025aee:	9304      	str	r3, [sp, #16]
 8025af0:	f898 3000 	ldrb.w	r3, [r8]
 8025af4:	2b2e      	cmp	r3, #46	; 0x2e
 8025af6:	d10e      	bne.n	8025b16 <_vfiprintf_r+0x14e>
 8025af8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025afc:	2b2a      	cmp	r3, #42	; 0x2a
 8025afe:	d138      	bne.n	8025b72 <_vfiprintf_r+0x1aa>
 8025b00:	9b03      	ldr	r3, [sp, #12]
 8025b02:	1d1a      	adds	r2, r3, #4
 8025b04:	681b      	ldr	r3, [r3, #0]
 8025b06:	9203      	str	r2, [sp, #12]
 8025b08:	2b00      	cmp	r3, #0
 8025b0a:	bfb8      	it	lt
 8025b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8025b10:	f108 0802 	add.w	r8, r8, #2
 8025b14:	9305      	str	r3, [sp, #20]
 8025b16:	4d33      	ldr	r5, [pc, #204]	; (8025be4 <_vfiprintf_r+0x21c>)
 8025b18:	f898 1000 	ldrb.w	r1, [r8]
 8025b1c:	2203      	movs	r2, #3
 8025b1e:	4628      	mov	r0, r5
 8025b20:	f7da fb76 	bl	8000210 <memchr>
 8025b24:	b140      	cbz	r0, 8025b38 <_vfiprintf_r+0x170>
 8025b26:	2340      	movs	r3, #64	; 0x40
 8025b28:	1b40      	subs	r0, r0, r5
 8025b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8025b2e:	9b04      	ldr	r3, [sp, #16]
 8025b30:	4303      	orrs	r3, r0
 8025b32:	f108 0801 	add.w	r8, r8, #1
 8025b36:	9304      	str	r3, [sp, #16]
 8025b38:	f898 1000 	ldrb.w	r1, [r8]
 8025b3c:	482a      	ldr	r0, [pc, #168]	; (8025be8 <_vfiprintf_r+0x220>)
 8025b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025b42:	2206      	movs	r2, #6
 8025b44:	f108 0701 	add.w	r7, r8, #1
 8025b48:	f7da fb62 	bl	8000210 <memchr>
 8025b4c:	2800      	cmp	r0, #0
 8025b4e:	d037      	beq.n	8025bc0 <_vfiprintf_r+0x1f8>
 8025b50:	4b26      	ldr	r3, [pc, #152]	; (8025bec <_vfiprintf_r+0x224>)
 8025b52:	bb1b      	cbnz	r3, 8025b9c <_vfiprintf_r+0x1d4>
 8025b54:	9b03      	ldr	r3, [sp, #12]
 8025b56:	3307      	adds	r3, #7
 8025b58:	f023 0307 	bic.w	r3, r3, #7
 8025b5c:	3308      	adds	r3, #8
 8025b5e:	9303      	str	r3, [sp, #12]
 8025b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b62:	444b      	add	r3, r9
 8025b64:	9309      	str	r3, [sp, #36]	; 0x24
 8025b66:	e750      	b.n	8025a0a <_vfiprintf_r+0x42>
 8025b68:	fb05 3202 	mla	r2, r5, r2, r3
 8025b6c:	2001      	movs	r0, #1
 8025b6e:	4688      	mov	r8, r1
 8025b70:	e78a      	b.n	8025a88 <_vfiprintf_r+0xc0>
 8025b72:	2300      	movs	r3, #0
 8025b74:	f108 0801 	add.w	r8, r8, #1
 8025b78:	9305      	str	r3, [sp, #20]
 8025b7a:	4619      	mov	r1, r3
 8025b7c:	250a      	movs	r5, #10
 8025b7e:	4640      	mov	r0, r8
 8025b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025b84:	3a30      	subs	r2, #48	; 0x30
 8025b86:	2a09      	cmp	r2, #9
 8025b88:	d903      	bls.n	8025b92 <_vfiprintf_r+0x1ca>
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	d0c3      	beq.n	8025b16 <_vfiprintf_r+0x14e>
 8025b8e:	9105      	str	r1, [sp, #20]
 8025b90:	e7c1      	b.n	8025b16 <_vfiprintf_r+0x14e>
 8025b92:	fb05 2101 	mla	r1, r5, r1, r2
 8025b96:	2301      	movs	r3, #1
 8025b98:	4680      	mov	r8, r0
 8025b9a:	e7f0      	b.n	8025b7e <_vfiprintf_r+0x1b6>
 8025b9c:	ab03      	add	r3, sp, #12
 8025b9e:	9300      	str	r3, [sp, #0]
 8025ba0:	4622      	mov	r2, r4
 8025ba2:	4b13      	ldr	r3, [pc, #76]	; (8025bf0 <_vfiprintf_r+0x228>)
 8025ba4:	a904      	add	r1, sp, #16
 8025ba6:	4630      	mov	r0, r6
 8025ba8:	f3af 8000 	nop.w
 8025bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025bb0:	4681      	mov	r9, r0
 8025bb2:	d1d5      	bne.n	8025b60 <_vfiprintf_r+0x198>
 8025bb4:	89a3      	ldrh	r3, [r4, #12]
 8025bb6:	065b      	lsls	r3, r3, #25
 8025bb8:	f53f af7e 	bmi.w	8025ab8 <_vfiprintf_r+0xf0>
 8025bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025bbe:	e77d      	b.n	8025abc <_vfiprintf_r+0xf4>
 8025bc0:	ab03      	add	r3, sp, #12
 8025bc2:	9300      	str	r3, [sp, #0]
 8025bc4:	4622      	mov	r2, r4
 8025bc6:	4b0a      	ldr	r3, [pc, #40]	; (8025bf0 <_vfiprintf_r+0x228>)
 8025bc8:	a904      	add	r1, sp, #16
 8025bca:	4630      	mov	r0, r6
 8025bcc:	f000 f888 	bl	8025ce0 <_printf_i>
 8025bd0:	e7ec      	b.n	8025bac <_vfiprintf_r+0x1e4>
 8025bd2:	bf00      	nop
 8025bd4:	0802b94c 	.word	0x0802b94c
 8025bd8:	0802b8f4 	.word	0x0802b8f4
 8025bdc:	0802b96c 	.word	0x0802b96c
 8025be0:	0802b92c 	.word	0x0802b92c
 8025be4:	0802b8fa 	.word	0x0802b8fa
 8025be8:	0802b8fe 	.word	0x0802b8fe
 8025bec:	00000000 	.word	0x00000000
 8025bf0:	080259a3 	.word	0x080259a3

08025bf4 <_printf_common>:
 8025bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025bf8:	4691      	mov	r9, r2
 8025bfa:	461f      	mov	r7, r3
 8025bfc:	688a      	ldr	r2, [r1, #8]
 8025bfe:	690b      	ldr	r3, [r1, #16]
 8025c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025c04:	4293      	cmp	r3, r2
 8025c06:	bfb8      	it	lt
 8025c08:	4613      	movlt	r3, r2
 8025c0a:	f8c9 3000 	str.w	r3, [r9]
 8025c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025c12:	4606      	mov	r6, r0
 8025c14:	460c      	mov	r4, r1
 8025c16:	b112      	cbz	r2, 8025c1e <_printf_common+0x2a>
 8025c18:	3301      	adds	r3, #1
 8025c1a:	f8c9 3000 	str.w	r3, [r9]
 8025c1e:	6823      	ldr	r3, [r4, #0]
 8025c20:	0699      	lsls	r1, r3, #26
 8025c22:	bf42      	ittt	mi
 8025c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025c28:	3302      	addmi	r3, #2
 8025c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8025c2e:	6825      	ldr	r5, [r4, #0]
 8025c30:	f015 0506 	ands.w	r5, r5, #6
 8025c34:	d107      	bne.n	8025c46 <_printf_common+0x52>
 8025c36:	f104 0a19 	add.w	sl, r4, #25
 8025c3a:	68e3      	ldr	r3, [r4, #12]
 8025c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8025c40:	1a9b      	subs	r3, r3, r2
 8025c42:	42ab      	cmp	r3, r5
 8025c44:	dc28      	bgt.n	8025c98 <_printf_common+0xa4>
 8025c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025c4a:	6822      	ldr	r2, [r4, #0]
 8025c4c:	3300      	adds	r3, #0
 8025c4e:	bf18      	it	ne
 8025c50:	2301      	movne	r3, #1
 8025c52:	0692      	lsls	r2, r2, #26
 8025c54:	d42d      	bmi.n	8025cb2 <_printf_common+0xbe>
 8025c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025c5a:	4639      	mov	r1, r7
 8025c5c:	4630      	mov	r0, r6
 8025c5e:	47c0      	blx	r8
 8025c60:	3001      	adds	r0, #1
 8025c62:	d020      	beq.n	8025ca6 <_printf_common+0xb2>
 8025c64:	6823      	ldr	r3, [r4, #0]
 8025c66:	68e5      	ldr	r5, [r4, #12]
 8025c68:	f8d9 2000 	ldr.w	r2, [r9]
 8025c6c:	f003 0306 	and.w	r3, r3, #6
 8025c70:	2b04      	cmp	r3, #4
 8025c72:	bf08      	it	eq
 8025c74:	1aad      	subeq	r5, r5, r2
 8025c76:	68a3      	ldr	r3, [r4, #8]
 8025c78:	6922      	ldr	r2, [r4, #16]
 8025c7a:	bf0c      	ite	eq
 8025c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025c80:	2500      	movne	r5, #0
 8025c82:	4293      	cmp	r3, r2
 8025c84:	bfc4      	itt	gt
 8025c86:	1a9b      	subgt	r3, r3, r2
 8025c88:	18ed      	addgt	r5, r5, r3
 8025c8a:	f04f 0900 	mov.w	r9, #0
 8025c8e:	341a      	adds	r4, #26
 8025c90:	454d      	cmp	r5, r9
 8025c92:	d11a      	bne.n	8025cca <_printf_common+0xd6>
 8025c94:	2000      	movs	r0, #0
 8025c96:	e008      	b.n	8025caa <_printf_common+0xb6>
 8025c98:	2301      	movs	r3, #1
 8025c9a:	4652      	mov	r2, sl
 8025c9c:	4639      	mov	r1, r7
 8025c9e:	4630      	mov	r0, r6
 8025ca0:	47c0      	blx	r8
 8025ca2:	3001      	adds	r0, #1
 8025ca4:	d103      	bne.n	8025cae <_printf_common+0xba>
 8025ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8025caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025cae:	3501      	adds	r5, #1
 8025cb0:	e7c3      	b.n	8025c3a <_printf_common+0x46>
 8025cb2:	18e1      	adds	r1, r4, r3
 8025cb4:	1c5a      	adds	r2, r3, #1
 8025cb6:	2030      	movs	r0, #48	; 0x30
 8025cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025cbc:	4422      	add	r2, r4
 8025cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025cc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025cc6:	3302      	adds	r3, #2
 8025cc8:	e7c5      	b.n	8025c56 <_printf_common+0x62>
 8025cca:	2301      	movs	r3, #1
 8025ccc:	4622      	mov	r2, r4
 8025cce:	4639      	mov	r1, r7
 8025cd0:	4630      	mov	r0, r6
 8025cd2:	47c0      	blx	r8
 8025cd4:	3001      	adds	r0, #1
 8025cd6:	d0e6      	beq.n	8025ca6 <_printf_common+0xb2>
 8025cd8:	f109 0901 	add.w	r9, r9, #1
 8025cdc:	e7d8      	b.n	8025c90 <_printf_common+0x9c>
	...

08025ce0 <_printf_i>:
 8025ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025ce8:	460c      	mov	r4, r1
 8025cea:	7e09      	ldrb	r1, [r1, #24]
 8025cec:	b085      	sub	sp, #20
 8025cee:	296e      	cmp	r1, #110	; 0x6e
 8025cf0:	4617      	mov	r7, r2
 8025cf2:	4606      	mov	r6, r0
 8025cf4:	4698      	mov	r8, r3
 8025cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025cf8:	f000 80b3 	beq.w	8025e62 <_printf_i+0x182>
 8025cfc:	d822      	bhi.n	8025d44 <_printf_i+0x64>
 8025cfe:	2963      	cmp	r1, #99	; 0x63
 8025d00:	d036      	beq.n	8025d70 <_printf_i+0x90>
 8025d02:	d80a      	bhi.n	8025d1a <_printf_i+0x3a>
 8025d04:	2900      	cmp	r1, #0
 8025d06:	f000 80b9 	beq.w	8025e7c <_printf_i+0x19c>
 8025d0a:	2958      	cmp	r1, #88	; 0x58
 8025d0c:	f000 8083 	beq.w	8025e16 <_printf_i+0x136>
 8025d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025d18:	e032      	b.n	8025d80 <_printf_i+0xa0>
 8025d1a:	2964      	cmp	r1, #100	; 0x64
 8025d1c:	d001      	beq.n	8025d22 <_printf_i+0x42>
 8025d1e:	2969      	cmp	r1, #105	; 0x69
 8025d20:	d1f6      	bne.n	8025d10 <_printf_i+0x30>
 8025d22:	6820      	ldr	r0, [r4, #0]
 8025d24:	6813      	ldr	r3, [r2, #0]
 8025d26:	0605      	lsls	r5, r0, #24
 8025d28:	f103 0104 	add.w	r1, r3, #4
 8025d2c:	d52a      	bpl.n	8025d84 <_printf_i+0xa4>
 8025d2e:	681b      	ldr	r3, [r3, #0]
 8025d30:	6011      	str	r1, [r2, #0]
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	da03      	bge.n	8025d3e <_printf_i+0x5e>
 8025d36:	222d      	movs	r2, #45	; 0x2d
 8025d38:	425b      	negs	r3, r3
 8025d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025d3e:	486f      	ldr	r0, [pc, #444]	; (8025efc <_printf_i+0x21c>)
 8025d40:	220a      	movs	r2, #10
 8025d42:	e039      	b.n	8025db8 <_printf_i+0xd8>
 8025d44:	2973      	cmp	r1, #115	; 0x73
 8025d46:	f000 809d 	beq.w	8025e84 <_printf_i+0x1a4>
 8025d4a:	d808      	bhi.n	8025d5e <_printf_i+0x7e>
 8025d4c:	296f      	cmp	r1, #111	; 0x6f
 8025d4e:	d020      	beq.n	8025d92 <_printf_i+0xb2>
 8025d50:	2970      	cmp	r1, #112	; 0x70
 8025d52:	d1dd      	bne.n	8025d10 <_printf_i+0x30>
 8025d54:	6823      	ldr	r3, [r4, #0]
 8025d56:	f043 0320 	orr.w	r3, r3, #32
 8025d5a:	6023      	str	r3, [r4, #0]
 8025d5c:	e003      	b.n	8025d66 <_printf_i+0x86>
 8025d5e:	2975      	cmp	r1, #117	; 0x75
 8025d60:	d017      	beq.n	8025d92 <_printf_i+0xb2>
 8025d62:	2978      	cmp	r1, #120	; 0x78
 8025d64:	d1d4      	bne.n	8025d10 <_printf_i+0x30>
 8025d66:	2378      	movs	r3, #120	; 0x78
 8025d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025d6c:	4864      	ldr	r0, [pc, #400]	; (8025f00 <_printf_i+0x220>)
 8025d6e:	e055      	b.n	8025e1c <_printf_i+0x13c>
 8025d70:	6813      	ldr	r3, [r2, #0]
 8025d72:	1d19      	adds	r1, r3, #4
 8025d74:	681b      	ldr	r3, [r3, #0]
 8025d76:	6011      	str	r1, [r2, #0]
 8025d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025d80:	2301      	movs	r3, #1
 8025d82:	e08c      	b.n	8025e9e <_printf_i+0x1be>
 8025d84:	681b      	ldr	r3, [r3, #0]
 8025d86:	6011      	str	r1, [r2, #0]
 8025d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025d8c:	bf18      	it	ne
 8025d8e:	b21b      	sxthne	r3, r3
 8025d90:	e7cf      	b.n	8025d32 <_printf_i+0x52>
 8025d92:	6813      	ldr	r3, [r2, #0]
 8025d94:	6825      	ldr	r5, [r4, #0]
 8025d96:	1d18      	adds	r0, r3, #4
 8025d98:	6010      	str	r0, [r2, #0]
 8025d9a:	0628      	lsls	r0, r5, #24
 8025d9c:	d501      	bpl.n	8025da2 <_printf_i+0xc2>
 8025d9e:	681b      	ldr	r3, [r3, #0]
 8025da0:	e002      	b.n	8025da8 <_printf_i+0xc8>
 8025da2:	0668      	lsls	r0, r5, #25
 8025da4:	d5fb      	bpl.n	8025d9e <_printf_i+0xbe>
 8025da6:	881b      	ldrh	r3, [r3, #0]
 8025da8:	4854      	ldr	r0, [pc, #336]	; (8025efc <_printf_i+0x21c>)
 8025daa:	296f      	cmp	r1, #111	; 0x6f
 8025dac:	bf14      	ite	ne
 8025dae:	220a      	movne	r2, #10
 8025db0:	2208      	moveq	r2, #8
 8025db2:	2100      	movs	r1, #0
 8025db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025db8:	6865      	ldr	r5, [r4, #4]
 8025dba:	60a5      	str	r5, [r4, #8]
 8025dbc:	2d00      	cmp	r5, #0
 8025dbe:	f2c0 8095 	blt.w	8025eec <_printf_i+0x20c>
 8025dc2:	6821      	ldr	r1, [r4, #0]
 8025dc4:	f021 0104 	bic.w	r1, r1, #4
 8025dc8:	6021      	str	r1, [r4, #0]
 8025dca:	2b00      	cmp	r3, #0
 8025dcc:	d13d      	bne.n	8025e4a <_printf_i+0x16a>
 8025dce:	2d00      	cmp	r5, #0
 8025dd0:	f040 808e 	bne.w	8025ef0 <_printf_i+0x210>
 8025dd4:	4665      	mov	r5, ip
 8025dd6:	2a08      	cmp	r2, #8
 8025dd8:	d10b      	bne.n	8025df2 <_printf_i+0x112>
 8025dda:	6823      	ldr	r3, [r4, #0]
 8025ddc:	07db      	lsls	r3, r3, #31
 8025dde:	d508      	bpl.n	8025df2 <_printf_i+0x112>
 8025de0:	6923      	ldr	r3, [r4, #16]
 8025de2:	6862      	ldr	r2, [r4, #4]
 8025de4:	429a      	cmp	r2, r3
 8025de6:	bfde      	ittt	le
 8025de8:	2330      	movle	r3, #48	; 0x30
 8025dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025df2:	ebac 0305 	sub.w	r3, ip, r5
 8025df6:	6123      	str	r3, [r4, #16]
 8025df8:	f8cd 8000 	str.w	r8, [sp]
 8025dfc:	463b      	mov	r3, r7
 8025dfe:	aa03      	add	r2, sp, #12
 8025e00:	4621      	mov	r1, r4
 8025e02:	4630      	mov	r0, r6
 8025e04:	f7ff fef6 	bl	8025bf4 <_printf_common>
 8025e08:	3001      	adds	r0, #1
 8025e0a:	d14d      	bne.n	8025ea8 <_printf_i+0x1c8>
 8025e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8025e10:	b005      	add	sp, #20
 8025e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025e16:	4839      	ldr	r0, [pc, #228]	; (8025efc <_printf_i+0x21c>)
 8025e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025e1c:	6813      	ldr	r3, [r2, #0]
 8025e1e:	6821      	ldr	r1, [r4, #0]
 8025e20:	1d1d      	adds	r5, r3, #4
 8025e22:	681b      	ldr	r3, [r3, #0]
 8025e24:	6015      	str	r5, [r2, #0]
 8025e26:	060a      	lsls	r2, r1, #24
 8025e28:	d50b      	bpl.n	8025e42 <_printf_i+0x162>
 8025e2a:	07ca      	lsls	r2, r1, #31
 8025e2c:	bf44      	itt	mi
 8025e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8025e32:	6021      	strmi	r1, [r4, #0]
 8025e34:	b91b      	cbnz	r3, 8025e3e <_printf_i+0x15e>
 8025e36:	6822      	ldr	r2, [r4, #0]
 8025e38:	f022 0220 	bic.w	r2, r2, #32
 8025e3c:	6022      	str	r2, [r4, #0]
 8025e3e:	2210      	movs	r2, #16
 8025e40:	e7b7      	b.n	8025db2 <_printf_i+0xd2>
 8025e42:	064d      	lsls	r5, r1, #25
 8025e44:	bf48      	it	mi
 8025e46:	b29b      	uxthmi	r3, r3
 8025e48:	e7ef      	b.n	8025e2a <_printf_i+0x14a>
 8025e4a:	4665      	mov	r5, ip
 8025e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8025e50:	fb02 3311 	mls	r3, r2, r1, r3
 8025e54:	5cc3      	ldrb	r3, [r0, r3]
 8025e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025e5a:	460b      	mov	r3, r1
 8025e5c:	2900      	cmp	r1, #0
 8025e5e:	d1f5      	bne.n	8025e4c <_printf_i+0x16c>
 8025e60:	e7b9      	b.n	8025dd6 <_printf_i+0xf6>
 8025e62:	6813      	ldr	r3, [r2, #0]
 8025e64:	6825      	ldr	r5, [r4, #0]
 8025e66:	6961      	ldr	r1, [r4, #20]
 8025e68:	1d18      	adds	r0, r3, #4
 8025e6a:	6010      	str	r0, [r2, #0]
 8025e6c:	0628      	lsls	r0, r5, #24
 8025e6e:	681b      	ldr	r3, [r3, #0]
 8025e70:	d501      	bpl.n	8025e76 <_printf_i+0x196>
 8025e72:	6019      	str	r1, [r3, #0]
 8025e74:	e002      	b.n	8025e7c <_printf_i+0x19c>
 8025e76:	066a      	lsls	r2, r5, #25
 8025e78:	d5fb      	bpl.n	8025e72 <_printf_i+0x192>
 8025e7a:	8019      	strh	r1, [r3, #0]
 8025e7c:	2300      	movs	r3, #0
 8025e7e:	6123      	str	r3, [r4, #16]
 8025e80:	4665      	mov	r5, ip
 8025e82:	e7b9      	b.n	8025df8 <_printf_i+0x118>
 8025e84:	6813      	ldr	r3, [r2, #0]
 8025e86:	1d19      	adds	r1, r3, #4
 8025e88:	6011      	str	r1, [r2, #0]
 8025e8a:	681d      	ldr	r5, [r3, #0]
 8025e8c:	6862      	ldr	r2, [r4, #4]
 8025e8e:	2100      	movs	r1, #0
 8025e90:	4628      	mov	r0, r5
 8025e92:	f7da f9bd 	bl	8000210 <memchr>
 8025e96:	b108      	cbz	r0, 8025e9c <_printf_i+0x1bc>
 8025e98:	1b40      	subs	r0, r0, r5
 8025e9a:	6060      	str	r0, [r4, #4]
 8025e9c:	6863      	ldr	r3, [r4, #4]
 8025e9e:	6123      	str	r3, [r4, #16]
 8025ea0:	2300      	movs	r3, #0
 8025ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025ea6:	e7a7      	b.n	8025df8 <_printf_i+0x118>
 8025ea8:	6923      	ldr	r3, [r4, #16]
 8025eaa:	462a      	mov	r2, r5
 8025eac:	4639      	mov	r1, r7
 8025eae:	4630      	mov	r0, r6
 8025eb0:	47c0      	blx	r8
 8025eb2:	3001      	adds	r0, #1
 8025eb4:	d0aa      	beq.n	8025e0c <_printf_i+0x12c>
 8025eb6:	6823      	ldr	r3, [r4, #0]
 8025eb8:	079b      	lsls	r3, r3, #30
 8025eba:	d413      	bmi.n	8025ee4 <_printf_i+0x204>
 8025ebc:	68e0      	ldr	r0, [r4, #12]
 8025ebe:	9b03      	ldr	r3, [sp, #12]
 8025ec0:	4298      	cmp	r0, r3
 8025ec2:	bfb8      	it	lt
 8025ec4:	4618      	movlt	r0, r3
 8025ec6:	e7a3      	b.n	8025e10 <_printf_i+0x130>
 8025ec8:	2301      	movs	r3, #1
 8025eca:	464a      	mov	r2, r9
 8025ecc:	4639      	mov	r1, r7
 8025ece:	4630      	mov	r0, r6
 8025ed0:	47c0      	blx	r8
 8025ed2:	3001      	adds	r0, #1
 8025ed4:	d09a      	beq.n	8025e0c <_printf_i+0x12c>
 8025ed6:	3501      	adds	r5, #1
 8025ed8:	68e3      	ldr	r3, [r4, #12]
 8025eda:	9a03      	ldr	r2, [sp, #12]
 8025edc:	1a9b      	subs	r3, r3, r2
 8025ede:	42ab      	cmp	r3, r5
 8025ee0:	dcf2      	bgt.n	8025ec8 <_printf_i+0x1e8>
 8025ee2:	e7eb      	b.n	8025ebc <_printf_i+0x1dc>
 8025ee4:	2500      	movs	r5, #0
 8025ee6:	f104 0919 	add.w	r9, r4, #25
 8025eea:	e7f5      	b.n	8025ed8 <_printf_i+0x1f8>
 8025eec:	2b00      	cmp	r3, #0
 8025eee:	d1ac      	bne.n	8025e4a <_printf_i+0x16a>
 8025ef0:	7803      	ldrb	r3, [r0, #0]
 8025ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025efa:	e76c      	b.n	8025dd6 <_printf_i+0xf6>
 8025efc:	0802b905 	.word	0x0802b905
 8025f00:	0802b916 	.word	0x0802b916

08025f04 <rand>:
 8025f04:	b538      	push	{r3, r4, r5, lr}
 8025f06:	4b13      	ldr	r3, [pc, #76]	; (8025f54 <rand+0x50>)
 8025f08:	681c      	ldr	r4, [r3, #0]
 8025f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025f0c:	b97b      	cbnz	r3, 8025f2e <rand+0x2a>
 8025f0e:	2018      	movs	r0, #24
 8025f10:	f7ff fc64 	bl	80257dc <malloc>
 8025f14:	4a10      	ldr	r2, [pc, #64]	; (8025f58 <rand+0x54>)
 8025f16:	4b11      	ldr	r3, [pc, #68]	; (8025f5c <rand+0x58>)
 8025f18:	63a0      	str	r0, [r4, #56]	; 0x38
 8025f1a:	e9c0 2300 	strd	r2, r3, [r0]
 8025f1e:	4b10      	ldr	r3, [pc, #64]	; (8025f60 <rand+0x5c>)
 8025f20:	6083      	str	r3, [r0, #8]
 8025f22:	230b      	movs	r3, #11
 8025f24:	8183      	strh	r3, [r0, #12]
 8025f26:	2201      	movs	r2, #1
 8025f28:	2300      	movs	r3, #0
 8025f2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025f2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8025f30:	480c      	ldr	r0, [pc, #48]	; (8025f64 <rand+0x60>)
 8025f32:	690a      	ldr	r2, [r1, #16]
 8025f34:	694b      	ldr	r3, [r1, #20]
 8025f36:	4c0c      	ldr	r4, [pc, #48]	; (8025f68 <rand+0x64>)
 8025f38:	4350      	muls	r0, r2
 8025f3a:	fb04 0003 	mla	r0, r4, r3, r0
 8025f3e:	fba2 2304 	umull	r2, r3, r2, r4
 8025f42:	4403      	add	r3, r0
 8025f44:	1c54      	adds	r4, r2, #1
 8025f46:	f143 0500 	adc.w	r5, r3, #0
 8025f4a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8025f4e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8025f52:	bd38      	pop	{r3, r4, r5, pc}
 8025f54:	20000098 	.word	0x20000098
 8025f58:	abcd330e 	.word	0xabcd330e
 8025f5c:	e66d1234 	.word	0xe66d1234
 8025f60:	0005deec 	.word	0x0005deec
 8025f64:	5851f42d 	.word	0x5851f42d
 8025f68:	4c957f2d 	.word	0x4c957f2d

08025f6c <_sbrk_r>:
 8025f6c:	b538      	push	{r3, r4, r5, lr}
 8025f6e:	4c06      	ldr	r4, [pc, #24]	; (8025f88 <_sbrk_r+0x1c>)
 8025f70:	2300      	movs	r3, #0
 8025f72:	4605      	mov	r5, r0
 8025f74:	4608      	mov	r0, r1
 8025f76:	6023      	str	r3, [r4, #0]
 8025f78:	f7dc fce8 	bl	800294c <_sbrk>
 8025f7c:	1c43      	adds	r3, r0, #1
 8025f7e:	d102      	bne.n	8025f86 <_sbrk_r+0x1a>
 8025f80:	6823      	ldr	r3, [r4, #0]
 8025f82:	b103      	cbz	r3, 8025f86 <_sbrk_r+0x1a>
 8025f84:	602b      	str	r3, [r5, #0]
 8025f86:	bd38      	pop	{r3, r4, r5, pc}
 8025f88:	2000bb4c 	.word	0x2000bb4c

08025f8c <_raise_r>:
 8025f8c:	291f      	cmp	r1, #31
 8025f8e:	b538      	push	{r3, r4, r5, lr}
 8025f90:	4604      	mov	r4, r0
 8025f92:	460d      	mov	r5, r1
 8025f94:	d904      	bls.n	8025fa0 <_raise_r+0x14>
 8025f96:	2316      	movs	r3, #22
 8025f98:	6003      	str	r3, [r0, #0]
 8025f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8025f9e:	bd38      	pop	{r3, r4, r5, pc}
 8025fa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025fa2:	b112      	cbz	r2, 8025faa <_raise_r+0x1e>
 8025fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025fa8:	b94b      	cbnz	r3, 8025fbe <_raise_r+0x32>
 8025faa:	4620      	mov	r0, r4
 8025fac:	f000 f830 	bl	8026010 <_getpid_r>
 8025fb0:	462a      	mov	r2, r5
 8025fb2:	4601      	mov	r1, r0
 8025fb4:	4620      	mov	r0, r4
 8025fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025fba:	f000 b817 	b.w	8025fec <_kill_r>
 8025fbe:	2b01      	cmp	r3, #1
 8025fc0:	d00a      	beq.n	8025fd8 <_raise_r+0x4c>
 8025fc2:	1c59      	adds	r1, r3, #1
 8025fc4:	d103      	bne.n	8025fce <_raise_r+0x42>
 8025fc6:	2316      	movs	r3, #22
 8025fc8:	6003      	str	r3, [r0, #0]
 8025fca:	2001      	movs	r0, #1
 8025fcc:	e7e7      	b.n	8025f9e <_raise_r+0x12>
 8025fce:	2400      	movs	r4, #0
 8025fd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025fd4:	4628      	mov	r0, r5
 8025fd6:	4798      	blx	r3
 8025fd8:	2000      	movs	r0, #0
 8025fda:	e7e0      	b.n	8025f9e <_raise_r+0x12>

08025fdc <raise>:
 8025fdc:	4b02      	ldr	r3, [pc, #8]	; (8025fe8 <raise+0xc>)
 8025fde:	4601      	mov	r1, r0
 8025fe0:	6818      	ldr	r0, [r3, #0]
 8025fe2:	f7ff bfd3 	b.w	8025f8c <_raise_r>
 8025fe6:	bf00      	nop
 8025fe8:	20000098 	.word	0x20000098

08025fec <_kill_r>:
 8025fec:	b538      	push	{r3, r4, r5, lr}
 8025fee:	4c07      	ldr	r4, [pc, #28]	; (802600c <_kill_r+0x20>)
 8025ff0:	2300      	movs	r3, #0
 8025ff2:	4605      	mov	r5, r0
 8025ff4:	4608      	mov	r0, r1
 8025ff6:	4611      	mov	r1, r2
 8025ff8:	6023      	str	r3, [r4, #0]
 8025ffa:	f7dc fc1f 	bl	800283c <_kill>
 8025ffe:	1c43      	adds	r3, r0, #1
 8026000:	d102      	bne.n	8026008 <_kill_r+0x1c>
 8026002:	6823      	ldr	r3, [r4, #0]
 8026004:	b103      	cbz	r3, 8026008 <_kill_r+0x1c>
 8026006:	602b      	str	r3, [r5, #0]
 8026008:	bd38      	pop	{r3, r4, r5, pc}
 802600a:	bf00      	nop
 802600c:	2000bb4c 	.word	0x2000bb4c

08026010 <_getpid_r>:
 8026010:	f7dc bc0c 	b.w	800282c <_getpid>

08026014 <__swbuf_r>:
 8026014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026016:	460e      	mov	r6, r1
 8026018:	4614      	mov	r4, r2
 802601a:	4605      	mov	r5, r0
 802601c:	b118      	cbz	r0, 8026026 <__swbuf_r+0x12>
 802601e:	6983      	ldr	r3, [r0, #24]
 8026020:	b90b      	cbnz	r3, 8026026 <__swbuf_r+0x12>
 8026022:	f000 fa0b 	bl	802643c <__sinit>
 8026026:	4b21      	ldr	r3, [pc, #132]	; (80260ac <__swbuf_r+0x98>)
 8026028:	429c      	cmp	r4, r3
 802602a:	d12a      	bne.n	8026082 <__swbuf_r+0x6e>
 802602c:	686c      	ldr	r4, [r5, #4]
 802602e:	69a3      	ldr	r3, [r4, #24]
 8026030:	60a3      	str	r3, [r4, #8]
 8026032:	89a3      	ldrh	r3, [r4, #12]
 8026034:	071a      	lsls	r2, r3, #28
 8026036:	d52e      	bpl.n	8026096 <__swbuf_r+0x82>
 8026038:	6923      	ldr	r3, [r4, #16]
 802603a:	b363      	cbz	r3, 8026096 <__swbuf_r+0x82>
 802603c:	6923      	ldr	r3, [r4, #16]
 802603e:	6820      	ldr	r0, [r4, #0]
 8026040:	1ac0      	subs	r0, r0, r3
 8026042:	6963      	ldr	r3, [r4, #20]
 8026044:	b2f6      	uxtb	r6, r6
 8026046:	4283      	cmp	r3, r0
 8026048:	4637      	mov	r7, r6
 802604a:	dc04      	bgt.n	8026056 <__swbuf_r+0x42>
 802604c:	4621      	mov	r1, r4
 802604e:	4628      	mov	r0, r5
 8026050:	f000 f98a 	bl	8026368 <_fflush_r>
 8026054:	bb28      	cbnz	r0, 80260a2 <__swbuf_r+0x8e>
 8026056:	68a3      	ldr	r3, [r4, #8]
 8026058:	3b01      	subs	r3, #1
 802605a:	60a3      	str	r3, [r4, #8]
 802605c:	6823      	ldr	r3, [r4, #0]
 802605e:	1c5a      	adds	r2, r3, #1
 8026060:	6022      	str	r2, [r4, #0]
 8026062:	701e      	strb	r6, [r3, #0]
 8026064:	6963      	ldr	r3, [r4, #20]
 8026066:	3001      	adds	r0, #1
 8026068:	4283      	cmp	r3, r0
 802606a:	d004      	beq.n	8026076 <__swbuf_r+0x62>
 802606c:	89a3      	ldrh	r3, [r4, #12]
 802606e:	07db      	lsls	r3, r3, #31
 8026070:	d519      	bpl.n	80260a6 <__swbuf_r+0x92>
 8026072:	2e0a      	cmp	r6, #10
 8026074:	d117      	bne.n	80260a6 <__swbuf_r+0x92>
 8026076:	4621      	mov	r1, r4
 8026078:	4628      	mov	r0, r5
 802607a:	f000 f975 	bl	8026368 <_fflush_r>
 802607e:	b190      	cbz	r0, 80260a6 <__swbuf_r+0x92>
 8026080:	e00f      	b.n	80260a2 <__swbuf_r+0x8e>
 8026082:	4b0b      	ldr	r3, [pc, #44]	; (80260b0 <__swbuf_r+0x9c>)
 8026084:	429c      	cmp	r4, r3
 8026086:	d101      	bne.n	802608c <__swbuf_r+0x78>
 8026088:	68ac      	ldr	r4, [r5, #8]
 802608a:	e7d0      	b.n	802602e <__swbuf_r+0x1a>
 802608c:	4b09      	ldr	r3, [pc, #36]	; (80260b4 <__swbuf_r+0xa0>)
 802608e:	429c      	cmp	r4, r3
 8026090:	bf08      	it	eq
 8026092:	68ec      	ldreq	r4, [r5, #12]
 8026094:	e7cb      	b.n	802602e <__swbuf_r+0x1a>
 8026096:	4621      	mov	r1, r4
 8026098:	4628      	mov	r0, r5
 802609a:	f000 f80d 	bl	80260b8 <__swsetup_r>
 802609e:	2800      	cmp	r0, #0
 80260a0:	d0cc      	beq.n	802603c <__swbuf_r+0x28>
 80260a2:	f04f 37ff 	mov.w	r7, #4294967295
 80260a6:	4638      	mov	r0, r7
 80260a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80260aa:	bf00      	nop
 80260ac:	0802b94c 	.word	0x0802b94c
 80260b0:	0802b96c 	.word	0x0802b96c
 80260b4:	0802b92c 	.word	0x0802b92c

080260b8 <__swsetup_r>:
 80260b8:	4b32      	ldr	r3, [pc, #200]	; (8026184 <__swsetup_r+0xcc>)
 80260ba:	b570      	push	{r4, r5, r6, lr}
 80260bc:	681d      	ldr	r5, [r3, #0]
 80260be:	4606      	mov	r6, r0
 80260c0:	460c      	mov	r4, r1
 80260c2:	b125      	cbz	r5, 80260ce <__swsetup_r+0x16>
 80260c4:	69ab      	ldr	r3, [r5, #24]
 80260c6:	b913      	cbnz	r3, 80260ce <__swsetup_r+0x16>
 80260c8:	4628      	mov	r0, r5
 80260ca:	f000 f9b7 	bl	802643c <__sinit>
 80260ce:	4b2e      	ldr	r3, [pc, #184]	; (8026188 <__swsetup_r+0xd0>)
 80260d0:	429c      	cmp	r4, r3
 80260d2:	d10f      	bne.n	80260f4 <__swsetup_r+0x3c>
 80260d4:	686c      	ldr	r4, [r5, #4]
 80260d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260da:	b29a      	uxth	r2, r3
 80260dc:	0715      	lsls	r5, r2, #28
 80260de:	d42c      	bmi.n	802613a <__swsetup_r+0x82>
 80260e0:	06d0      	lsls	r0, r2, #27
 80260e2:	d411      	bmi.n	8026108 <__swsetup_r+0x50>
 80260e4:	2209      	movs	r2, #9
 80260e6:	6032      	str	r2, [r6, #0]
 80260e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80260ec:	81a3      	strh	r3, [r4, #12]
 80260ee:	f04f 30ff 	mov.w	r0, #4294967295
 80260f2:	e03e      	b.n	8026172 <__swsetup_r+0xba>
 80260f4:	4b25      	ldr	r3, [pc, #148]	; (802618c <__swsetup_r+0xd4>)
 80260f6:	429c      	cmp	r4, r3
 80260f8:	d101      	bne.n	80260fe <__swsetup_r+0x46>
 80260fa:	68ac      	ldr	r4, [r5, #8]
 80260fc:	e7eb      	b.n	80260d6 <__swsetup_r+0x1e>
 80260fe:	4b24      	ldr	r3, [pc, #144]	; (8026190 <__swsetup_r+0xd8>)
 8026100:	429c      	cmp	r4, r3
 8026102:	bf08      	it	eq
 8026104:	68ec      	ldreq	r4, [r5, #12]
 8026106:	e7e6      	b.n	80260d6 <__swsetup_r+0x1e>
 8026108:	0751      	lsls	r1, r2, #29
 802610a:	d512      	bpl.n	8026132 <__swsetup_r+0x7a>
 802610c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802610e:	b141      	cbz	r1, 8026122 <__swsetup_r+0x6a>
 8026110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026114:	4299      	cmp	r1, r3
 8026116:	d002      	beq.n	802611e <__swsetup_r+0x66>
 8026118:	4630      	mov	r0, r6
 802611a:	f7ff fb83 	bl	8025824 <_free_r>
 802611e:	2300      	movs	r3, #0
 8026120:	6363      	str	r3, [r4, #52]	; 0x34
 8026122:	89a3      	ldrh	r3, [r4, #12]
 8026124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026128:	81a3      	strh	r3, [r4, #12]
 802612a:	2300      	movs	r3, #0
 802612c:	6063      	str	r3, [r4, #4]
 802612e:	6923      	ldr	r3, [r4, #16]
 8026130:	6023      	str	r3, [r4, #0]
 8026132:	89a3      	ldrh	r3, [r4, #12]
 8026134:	f043 0308 	orr.w	r3, r3, #8
 8026138:	81a3      	strh	r3, [r4, #12]
 802613a:	6923      	ldr	r3, [r4, #16]
 802613c:	b94b      	cbnz	r3, 8026152 <__swsetup_r+0x9a>
 802613e:	89a3      	ldrh	r3, [r4, #12]
 8026140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026148:	d003      	beq.n	8026152 <__swsetup_r+0x9a>
 802614a:	4621      	mov	r1, r4
 802614c:	4630      	mov	r0, r6
 802614e:	f000 fa23 	bl	8026598 <__smakebuf_r>
 8026152:	89a2      	ldrh	r2, [r4, #12]
 8026154:	f012 0301 	ands.w	r3, r2, #1
 8026158:	d00c      	beq.n	8026174 <__swsetup_r+0xbc>
 802615a:	2300      	movs	r3, #0
 802615c:	60a3      	str	r3, [r4, #8]
 802615e:	6963      	ldr	r3, [r4, #20]
 8026160:	425b      	negs	r3, r3
 8026162:	61a3      	str	r3, [r4, #24]
 8026164:	6923      	ldr	r3, [r4, #16]
 8026166:	b953      	cbnz	r3, 802617e <__swsetup_r+0xc6>
 8026168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802616c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8026170:	d1ba      	bne.n	80260e8 <__swsetup_r+0x30>
 8026172:	bd70      	pop	{r4, r5, r6, pc}
 8026174:	0792      	lsls	r2, r2, #30
 8026176:	bf58      	it	pl
 8026178:	6963      	ldrpl	r3, [r4, #20]
 802617a:	60a3      	str	r3, [r4, #8]
 802617c:	e7f2      	b.n	8026164 <__swsetup_r+0xac>
 802617e:	2000      	movs	r0, #0
 8026180:	e7f7      	b.n	8026172 <__swsetup_r+0xba>
 8026182:	bf00      	nop
 8026184:	20000098 	.word	0x20000098
 8026188:	0802b94c 	.word	0x0802b94c
 802618c:	0802b96c 	.word	0x0802b96c
 8026190:	0802b92c 	.word	0x0802b92c

08026194 <__register_exitproc>:
 8026194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026198:	4d2c      	ldr	r5, [pc, #176]	; (802624c <__register_exitproc+0xb8>)
 802619a:	682c      	ldr	r4, [r5, #0]
 802619c:	4607      	mov	r7, r0
 802619e:	460e      	mov	r6, r1
 80261a0:	4691      	mov	r9, r2
 80261a2:	4698      	mov	r8, r3
 80261a4:	b934      	cbnz	r4, 80261b4 <__register_exitproc+0x20>
 80261a6:	4b2a      	ldr	r3, [pc, #168]	; (8026250 <__register_exitproc+0xbc>)
 80261a8:	4c2a      	ldr	r4, [pc, #168]	; (8026254 <__register_exitproc+0xc0>)
 80261aa:	602c      	str	r4, [r5, #0]
 80261ac:	b113      	cbz	r3, 80261b4 <__register_exitproc+0x20>
 80261ae:	681b      	ldr	r3, [r3, #0]
 80261b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80261b4:	6863      	ldr	r3, [r4, #4]
 80261b6:	2b1f      	cmp	r3, #31
 80261b8:	dd3d      	ble.n	8026236 <__register_exitproc+0xa2>
 80261ba:	4b27      	ldr	r3, [pc, #156]	; (8026258 <__register_exitproc+0xc4>)
 80261bc:	b91b      	cbnz	r3, 80261c6 <__register_exitproc+0x32>
 80261be:	f04f 30ff 	mov.w	r0, #4294967295
 80261c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80261c6:	208c      	movs	r0, #140	; 0x8c
 80261c8:	f7ff fb08 	bl	80257dc <malloc>
 80261cc:	4604      	mov	r4, r0
 80261ce:	2800      	cmp	r0, #0
 80261d0:	d0f5      	beq.n	80261be <__register_exitproc+0x2a>
 80261d2:	2300      	movs	r3, #0
 80261d4:	682a      	ldr	r2, [r5, #0]
 80261d6:	6002      	str	r2, [r0, #0]
 80261d8:	6043      	str	r3, [r0, #4]
 80261da:	6028      	str	r0, [r5, #0]
 80261dc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80261e0:	b30f      	cbz	r7, 8026226 <__register_exitproc+0x92>
 80261e2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80261e6:	f7ff faf9 	bl	80257dc <malloc>
 80261ea:	2800      	cmp	r0, #0
 80261ec:	d0e7      	beq.n	80261be <__register_exitproc+0x2a>
 80261ee:	2300      	movs	r3, #0
 80261f0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80261f4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80261f8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80261fc:	6862      	ldr	r2, [r4, #4]
 80261fe:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8026202:	2301      	movs	r3, #1
 8026204:	4093      	lsls	r3, r2
 8026206:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802620a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802620e:	431a      	orrs	r2, r3
 8026210:	2f02      	cmp	r7, #2
 8026212:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8026216:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802621a:	bf02      	ittt	eq
 802621c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8026220:	4313      	orreq	r3, r2
 8026222:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026226:	6863      	ldr	r3, [r4, #4]
 8026228:	1c5a      	adds	r2, r3, #1
 802622a:	3302      	adds	r3, #2
 802622c:	6062      	str	r2, [r4, #4]
 802622e:	2000      	movs	r0, #0
 8026230:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8026234:	e7c5      	b.n	80261c2 <__register_exitproc+0x2e>
 8026236:	2f00      	cmp	r7, #0
 8026238:	d0f5      	beq.n	8026226 <__register_exitproc+0x92>
 802623a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802623e:	2800      	cmp	r0, #0
 8026240:	d1dc      	bne.n	80261fc <__register_exitproc+0x68>
 8026242:	4b05      	ldr	r3, [pc, #20]	; (8026258 <__register_exitproc+0xc4>)
 8026244:	2b00      	cmp	r3, #0
 8026246:	d0ba      	beq.n	80261be <__register_exitproc+0x2a>
 8026248:	e7cb      	b.n	80261e2 <__register_exitproc+0x4e>
 802624a:	bf00      	nop
 802624c:	2000b624 	.word	0x2000b624
 8026250:	0802b928 	.word	0x0802b928
 8026254:	2000b598 	.word	0x2000b598
 8026258:	080257dd 	.word	0x080257dd

0802625c <__sflush_r>:
 802625c:	898a      	ldrh	r2, [r1, #12]
 802625e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026262:	4605      	mov	r5, r0
 8026264:	0710      	lsls	r0, r2, #28
 8026266:	460c      	mov	r4, r1
 8026268:	d458      	bmi.n	802631c <__sflush_r+0xc0>
 802626a:	684b      	ldr	r3, [r1, #4]
 802626c:	2b00      	cmp	r3, #0
 802626e:	dc05      	bgt.n	802627c <__sflush_r+0x20>
 8026270:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026272:	2b00      	cmp	r3, #0
 8026274:	dc02      	bgt.n	802627c <__sflush_r+0x20>
 8026276:	2000      	movs	r0, #0
 8026278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802627c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802627e:	2e00      	cmp	r6, #0
 8026280:	d0f9      	beq.n	8026276 <__sflush_r+0x1a>
 8026282:	2300      	movs	r3, #0
 8026284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026288:	682f      	ldr	r7, [r5, #0]
 802628a:	6a21      	ldr	r1, [r4, #32]
 802628c:	602b      	str	r3, [r5, #0]
 802628e:	d032      	beq.n	80262f6 <__sflush_r+0x9a>
 8026290:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026292:	89a3      	ldrh	r3, [r4, #12]
 8026294:	075a      	lsls	r2, r3, #29
 8026296:	d505      	bpl.n	80262a4 <__sflush_r+0x48>
 8026298:	6863      	ldr	r3, [r4, #4]
 802629a:	1ac0      	subs	r0, r0, r3
 802629c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802629e:	b10b      	cbz	r3, 80262a4 <__sflush_r+0x48>
 80262a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80262a2:	1ac0      	subs	r0, r0, r3
 80262a4:	2300      	movs	r3, #0
 80262a6:	4602      	mov	r2, r0
 80262a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80262aa:	6a21      	ldr	r1, [r4, #32]
 80262ac:	4628      	mov	r0, r5
 80262ae:	47b0      	blx	r6
 80262b0:	1c43      	adds	r3, r0, #1
 80262b2:	89a3      	ldrh	r3, [r4, #12]
 80262b4:	d106      	bne.n	80262c4 <__sflush_r+0x68>
 80262b6:	6829      	ldr	r1, [r5, #0]
 80262b8:	291d      	cmp	r1, #29
 80262ba:	d848      	bhi.n	802634e <__sflush_r+0xf2>
 80262bc:	4a29      	ldr	r2, [pc, #164]	; (8026364 <__sflush_r+0x108>)
 80262be:	40ca      	lsrs	r2, r1
 80262c0:	07d6      	lsls	r6, r2, #31
 80262c2:	d544      	bpl.n	802634e <__sflush_r+0xf2>
 80262c4:	2200      	movs	r2, #0
 80262c6:	6062      	str	r2, [r4, #4]
 80262c8:	04d9      	lsls	r1, r3, #19
 80262ca:	6922      	ldr	r2, [r4, #16]
 80262cc:	6022      	str	r2, [r4, #0]
 80262ce:	d504      	bpl.n	80262da <__sflush_r+0x7e>
 80262d0:	1c42      	adds	r2, r0, #1
 80262d2:	d101      	bne.n	80262d8 <__sflush_r+0x7c>
 80262d4:	682b      	ldr	r3, [r5, #0]
 80262d6:	b903      	cbnz	r3, 80262da <__sflush_r+0x7e>
 80262d8:	6560      	str	r0, [r4, #84]	; 0x54
 80262da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80262dc:	602f      	str	r7, [r5, #0]
 80262de:	2900      	cmp	r1, #0
 80262e0:	d0c9      	beq.n	8026276 <__sflush_r+0x1a>
 80262e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80262e6:	4299      	cmp	r1, r3
 80262e8:	d002      	beq.n	80262f0 <__sflush_r+0x94>
 80262ea:	4628      	mov	r0, r5
 80262ec:	f7ff fa9a 	bl	8025824 <_free_r>
 80262f0:	2000      	movs	r0, #0
 80262f2:	6360      	str	r0, [r4, #52]	; 0x34
 80262f4:	e7c0      	b.n	8026278 <__sflush_r+0x1c>
 80262f6:	2301      	movs	r3, #1
 80262f8:	4628      	mov	r0, r5
 80262fa:	47b0      	blx	r6
 80262fc:	1c41      	adds	r1, r0, #1
 80262fe:	d1c8      	bne.n	8026292 <__sflush_r+0x36>
 8026300:	682b      	ldr	r3, [r5, #0]
 8026302:	2b00      	cmp	r3, #0
 8026304:	d0c5      	beq.n	8026292 <__sflush_r+0x36>
 8026306:	2b1d      	cmp	r3, #29
 8026308:	d001      	beq.n	802630e <__sflush_r+0xb2>
 802630a:	2b16      	cmp	r3, #22
 802630c:	d101      	bne.n	8026312 <__sflush_r+0xb6>
 802630e:	602f      	str	r7, [r5, #0]
 8026310:	e7b1      	b.n	8026276 <__sflush_r+0x1a>
 8026312:	89a3      	ldrh	r3, [r4, #12]
 8026314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026318:	81a3      	strh	r3, [r4, #12]
 802631a:	e7ad      	b.n	8026278 <__sflush_r+0x1c>
 802631c:	690f      	ldr	r7, [r1, #16]
 802631e:	2f00      	cmp	r7, #0
 8026320:	d0a9      	beq.n	8026276 <__sflush_r+0x1a>
 8026322:	0793      	lsls	r3, r2, #30
 8026324:	680e      	ldr	r6, [r1, #0]
 8026326:	bf08      	it	eq
 8026328:	694b      	ldreq	r3, [r1, #20]
 802632a:	600f      	str	r7, [r1, #0]
 802632c:	bf18      	it	ne
 802632e:	2300      	movne	r3, #0
 8026330:	eba6 0807 	sub.w	r8, r6, r7
 8026334:	608b      	str	r3, [r1, #8]
 8026336:	f1b8 0f00 	cmp.w	r8, #0
 802633a:	dd9c      	ble.n	8026276 <__sflush_r+0x1a>
 802633c:	4643      	mov	r3, r8
 802633e:	463a      	mov	r2, r7
 8026340:	6a21      	ldr	r1, [r4, #32]
 8026342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026344:	4628      	mov	r0, r5
 8026346:	47b0      	blx	r6
 8026348:	2800      	cmp	r0, #0
 802634a:	dc06      	bgt.n	802635a <__sflush_r+0xfe>
 802634c:	89a3      	ldrh	r3, [r4, #12]
 802634e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026352:	81a3      	strh	r3, [r4, #12]
 8026354:	f04f 30ff 	mov.w	r0, #4294967295
 8026358:	e78e      	b.n	8026278 <__sflush_r+0x1c>
 802635a:	4407      	add	r7, r0
 802635c:	eba8 0800 	sub.w	r8, r8, r0
 8026360:	e7e9      	b.n	8026336 <__sflush_r+0xda>
 8026362:	bf00      	nop
 8026364:	20400001 	.word	0x20400001

08026368 <_fflush_r>:
 8026368:	b538      	push	{r3, r4, r5, lr}
 802636a:	690b      	ldr	r3, [r1, #16]
 802636c:	4605      	mov	r5, r0
 802636e:	460c      	mov	r4, r1
 8026370:	b1db      	cbz	r3, 80263aa <_fflush_r+0x42>
 8026372:	b118      	cbz	r0, 802637c <_fflush_r+0x14>
 8026374:	6983      	ldr	r3, [r0, #24]
 8026376:	b90b      	cbnz	r3, 802637c <_fflush_r+0x14>
 8026378:	f000 f860 	bl	802643c <__sinit>
 802637c:	4b0c      	ldr	r3, [pc, #48]	; (80263b0 <_fflush_r+0x48>)
 802637e:	429c      	cmp	r4, r3
 8026380:	d109      	bne.n	8026396 <_fflush_r+0x2e>
 8026382:	686c      	ldr	r4, [r5, #4]
 8026384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026388:	b17b      	cbz	r3, 80263aa <_fflush_r+0x42>
 802638a:	4621      	mov	r1, r4
 802638c:	4628      	mov	r0, r5
 802638e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026392:	f7ff bf63 	b.w	802625c <__sflush_r>
 8026396:	4b07      	ldr	r3, [pc, #28]	; (80263b4 <_fflush_r+0x4c>)
 8026398:	429c      	cmp	r4, r3
 802639a:	d101      	bne.n	80263a0 <_fflush_r+0x38>
 802639c:	68ac      	ldr	r4, [r5, #8]
 802639e:	e7f1      	b.n	8026384 <_fflush_r+0x1c>
 80263a0:	4b05      	ldr	r3, [pc, #20]	; (80263b8 <_fflush_r+0x50>)
 80263a2:	429c      	cmp	r4, r3
 80263a4:	bf08      	it	eq
 80263a6:	68ec      	ldreq	r4, [r5, #12]
 80263a8:	e7ec      	b.n	8026384 <_fflush_r+0x1c>
 80263aa:	2000      	movs	r0, #0
 80263ac:	bd38      	pop	{r3, r4, r5, pc}
 80263ae:	bf00      	nop
 80263b0:	0802b94c 	.word	0x0802b94c
 80263b4:	0802b96c 	.word	0x0802b96c
 80263b8:	0802b92c 	.word	0x0802b92c

080263bc <std>:
 80263bc:	2300      	movs	r3, #0
 80263be:	b510      	push	{r4, lr}
 80263c0:	4604      	mov	r4, r0
 80263c2:	e9c0 3300 	strd	r3, r3, [r0]
 80263c6:	6083      	str	r3, [r0, #8]
 80263c8:	8181      	strh	r1, [r0, #12]
 80263ca:	6643      	str	r3, [r0, #100]	; 0x64
 80263cc:	81c2      	strh	r2, [r0, #14]
 80263ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80263d2:	6183      	str	r3, [r0, #24]
 80263d4:	4619      	mov	r1, r3
 80263d6:	2208      	movs	r2, #8
 80263d8:	305c      	adds	r0, #92	; 0x5c
 80263da:	f7ff fa1a 	bl	8025812 <memset>
 80263de:	4b05      	ldr	r3, [pc, #20]	; (80263f4 <std+0x38>)
 80263e0:	6263      	str	r3, [r4, #36]	; 0x24
 80263e2:	4b05      	ldr	r3, [pc, #20]	; (80263f8 <std+0x3c>)
 80263e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80263e6:	4b05      	ldr	r3, [pc, #20]	; (80263fc <std+0x40>)
 80263e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80263ea:	4b05      	ldr	r3, [pc, #20]	; (8026400 <std+0x44>)
 80263ec:	6224      	str	r4, [r4, #32]
 80263ee:	6323      	str	r3, [r4, #48]	; 0x30
 80263f0:	bd10      	pop	{r4, pc}
 80263f2:	bf00      	nop
 80263f4:	0802661d 	.word	0x0802661d
 80263f8:	0802663f 	.word	0x0802663f
 80263fc:	08026677 	.word	0x08026677
 8026400:	0802669b 	.word	0x0802669b

08026404 <_cleanup_r>:
 8026404:	4901      	ldr	r1, [pc, #4]	; (802640c <_cleanup_r+0x8>)
 8026406:	f000 b885 	b.w	8026514 <_fwalk_reent>
 802640a:	bf00      	nop
 802640c:	08026369 	.word	0x08026369

08026410 <__sfmoreglue>:
 8026410:	b570      	push	{r4, r5, r6, lr}
 8026412:	1e4a      	subs	r2, r1, #1
 8026414:	2568      	movs	r5, #104	; 0x68
 8026416:	4355      	muls	r5, r2
 8026418:	460e      	mov	r6, r1
 802641a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802641e:	f7ff fa4f 	bl	80258c0 <_malloc_r>
 8026422:	4604      	mov	r4, r0
 8026424:	b140      	cbz	r0, 8026438 <__sfmoreglue+0x28>
 8026426:	2100      	movs	r1, #0
 8026428:	e9c0 1600 	strd	r1, r6, [r0]
 802642c:	300c      	adds	r0, #12
 802642e:	60a0      	str	r0, [r4, #8]
 8026430:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026434:	f7ff f9ed 	bl	8025812 <memset>
 8026438:	4620      	mov	r0, r4
 802643a:	bd70      	pop	{r4, r5, r6, pc}

0802643c <__sinit>:
 802643c:	6983      	ldr	r3, [r0, #24]
 802643e:	b510      	push	{r4, lr}
 8026440:	4604      	mov	r4, r0
 8026442:	bb33      	cbnz	r3, 8026492 <__sinit+0x56>
 8026444:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8026448:	6503      	str	r3, [r0, #80]	; 0x50
 802644a:	4b12      	ldr	r3, [pc, #72]	; (8026494 <__sinit+0x58>)
 802644c:	4a12      	ldr	r2, [pc, #72]	; (8026498 <__sinit+0x5c>)
 802644e:	681b      	ldr	r3, [r3, #0]
 8026450:	6282      	str	r2, [r0, #40]	; 0x28
 8026452:	4298      	cmp	r0, r3
 8026454:	bf04      	itt	eq
 8026456:	2301      	moveq	r3, #1
 8026458:	6183      	streq	r3, [r0, #24]
 802645a:	f000 f81f 	bl	802649c <__sfp>
 802645e:	6060      	str	r0, [r4, #4]
 8026460:	4620      	mov	r0, r4
 8026462:	f000 f81b 	bl	802649c <__sfp>
 8026466:	60a0      	str	r0, [r4, #8]
 8026468:	4620      	mov	r0, r4
 802646a:	f000 f817 	bl	802649c <__sfp>
 802646e:	2200      	movs	r2, #0
 8026470:	60e0      	str	r0, [r4, #12]
 8026472:	2104      	movs	r1, #4
 8026474:	6860      	ldr	r0, [r4, #4]
 8026476:	f7ff ffa1 	bl	80263bc <std>
 802647a:	2201      	movs	r2, #1
 802647c:	2109      	movs	r1, #9
 802647e:	68a0      	ldr	r0, [r4, #8]
 8026480:	f7ff ff9c 	bl	80263bc <std>
 8026484:	2202      	movs	r2, #2
 8026486:	2112      	movs	r1, #18
 8026488:	68e0      	ldr	r0, [r4, #12]
 802648a:	f7ff ff97 	bl	80263bc <std>
 802648e:	2301      	movs	r3, #1
 8026490:	61a3      	str	r3, [r4, #24]
 8026492:	bd10      	pop	{r4, pc}
 8026494:	0802b8f0 	.word	0x0802b8f0
 8026498:	08026405 	.word	0x08026405

0802649c <__sfp>:
 802649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802649e:	4b1b      	ldr	r3, [pc, #108]	; (802650c <__sfp+0x70>)
 80264a0:	681e      	ldr	r6, [r3, #0]
 80264a2:	69b3      	ldr	r3, [r6, #24]
 80264a4:	4607      	mov	r7, r0
 80264a6:	b913      	cbnz	r3, 80264ae <__sfp+0x12>
 80264a8:	4630      	mov	r0, r6
 80264aa:	f7ff ffc7 	bl	802643c <__sinit>
 80264ae:	3648      	adds	r6, #72	; 0x48
 80264b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80264b4:	3b01      	subs	r3, #1
 80264b6:	d503      	bpl.n	80264c0 <__sfp+0x24>
 80264b8:	6833      	ldr	r3, [r6, #0]
 80264ba:	b133      	cbz	r3, 80264ca <__sfp+0x2e>
 80264bc:	6836      	ldr	r6, [r6, #0]
 80264be:	e7f7      	b.n	80264b0 <__sfp+0x14>
 80264c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80264c4:	b16d      	cbz	r5, 80264e2 <__sfp+0x46>
 80264c6:	3468      	adds	r4, #104	; 0x68
 80264c8:	e7f4      	b.n	80264b4 <__sfp+0x18>
 80264ca:	2104      	movs	r1, #4
 80264cc:	4638      	mov	r0, r7
 80264ce:	f7ff ff9f 	bl	8026410 <__sfmoreglue>
 80264d2:	6030      	str	r0, [r6, #0]
 80264d4:	2800      	cmp	r0, #0
 80264d6:	d1f1      	bne.n	80264bc <__sfp+0x20>
 80264d8:	230c      	movs	r3, #12
 80264da:	603b      	str	r3, [r7, #0]
 80264dc:	4604      	mov	r4, r0
 80264de:	4620      	mov	r0, r4
 80264e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80264e2:	4b0b      	ldr	r3, [pc, #44]	; (8026510 <__sfp+0x74>)
 80264e4:	6665      	str	r5, [r4, #100]	; 0x64
 80264e6:	e9c4 5500 	strd	r5, r5, [r4]
 80264ea:	60a5      	str	r5, [r4, #8]
 80264ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80264f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80264f4:	2208      	movs	r2, #8
 80264f6:	4629      	mov	r1, r5
 80264f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80264fc:	f7ff f989 	bl	8025812 <memset>
 8026500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026508:	e7e9      	b.n	80264de <__sfp+0x42>
 802650a:	bf00      	nop
 802650c:	0802b8f0 	.word	0x0802b8f0
 8026510:	ffff0001 	.word	0xffff0001

08026514 <_fwalk_reent>:
 8026514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026518:	4680      	mov	r8, r0
 802651a:	4689      	mov	r9, r1
 802651c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026520:	2600      	movs	r6, #0
 8026522:	b914      	cbnz	r4, 802652a <_fwalk_reent+0x16>
 8026524:	4630      	mov	r0, r6
 8026526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802652a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802652e:	3f01      	subs	r7, #1
 8026530:	d501      	bpl.n	8026536 <_fwalk_reent+0x22>
 8026532:	6824      	ldr	r4, [r4, #0]
 8026534:	e7f5      	b.n	8026522 <_fwalk_reent+0xe>
 8026536:	89ab      	ldrh	r3, [r5, #12]
 8026538:	2b01      	cmp	r3, #1
 802653a:	d907      	bls.n	802654c <_fwalk_reent+0x38>
 802653c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026540:	3301      	adds	r3, #1
 8026542:	d003      	beq.n	802654c <_fwalk_reent+0x38>
 8026544:	4629      	mov	r1, r5
 8026546:	4640      	mov	r0, r8
 8026548:	47c8      	blx	r9
 802654a:	4306      	orrs	r6, r0
 802654c:	3568      	adds	r5, #104	; 0x68
 802654e:	e7ee      	b.n	802652e <_fwalk_reent+0x1a>

08026550 <__swhatbuf_r>:
 8026550:	b570      	push	{r4, r5, r6, lr}
 8026552:	460e      	mov	r6, r1
 8026554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026558:	2900      	cmp	r1, #0
 802655a:	b096      	sub	sp, #88	; 0x58
 802655c:	4614      	mov	r4, r2
 802655e:	461d      	mov	r5, r3
 8026560:	da07      	bge.n	8026572 <__swhatbuf_r+0x22>
 8026562:	2300      	movs	r3, #0
 8026564:	602b      	str	r3, [r5, #0]
 8026566:	89b3      	ldrh	r3, [r6, #12]
 8026568:	061a      	lsls	r2, r3, #24
 802656a:	d410      	bmi.n	802658e <__swhatbuf_r+0x3e>
 802656c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026570:	e00e      	b.n	8026590 <__swhatbuf_r+0x40>
 8026572:	466a      	mov	r2, sp
 8026574:	f000 f8b8 	bl	80266e8 <_fstat_r>
 8026578:	2800      	cmp	r0, #0
 802657a:	dbf2      	blt.n	8026562 <__swhatbuf_r+0x12>
 802657c:	9a01      	ldr	r2, [sp, #4]
 802657e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026582:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026586:	425a      	negs	r2, r3
 8026588:	415a      	adcs	r2, r3
 802658a:	602a      	str	r2, [r5, #0]
 802658c:	e7ee      	b.n	802656c <__swhatbuf_r+0x1c>
 802658e:	2340      	movs	r3, #64	; 0x40
 8026590:	2000      	movs	r0, #0
 8026592:	6023      	str	r3, [r4, #0]
 8026594:	b016      	add	sp, #88	; 0x58
 8026596:	bd70      	pop	{r4, r5, r6, pc}

08026598 <__smakebuf_r>:
 8026598:	898b      	ldrh	r3, [r1, #12]
 802659a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802659c:	079d      	lsls	r5, r3, #30
 802659e:	4606      	mov	r6, r0
 80265a0:	460c      	mov	r4, r1
 80265a2:	d507      	bpl.n	80265b4 <__smakebuf_r+0x1c>
 80265a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80265a8:	6023      	str	r3, [r4, #0]
 80265aa:	6123      	str	r3, [r4, #16]
 80265ac:	2301      	movs	r3, #1
 80265ae:	6163      	str	r3, [r4, #20]
 80265b0:	b002      	add	sp, #8
 80265b2:	bd70      	pop	{r4, r5, r6, pc}
 80265b4:	ab01      	add	r3, sp, #4
 80265b6:	466a      	mov	r2, sp
 80265b8:	f7ff ffca 	bl	8026550 <__swhatbuf_r>
 80265bc:	9900      	ldr	r1, [sp, #0]
 80265be:	4605      	mov	r5, r0
 80265c0:	4630      	mov	r0, r6
 80265c2:	f7ff f97d 	bl	80258c0 <_malloc_r>
 80265c6:	b948      	cbnz	r0, 80265dc <__smakebuf_r+0x44>
 80265c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80265cc:	059a      	lsls	r2, r3, #22
 80265ce:	d4ef      	bmi.n	80265b0 <__smakebuf_r+0x18>
 80265d0:	f023 0303 	bic.w	r3, r3, #3
 80265d4:	f043 0302 	orr.w	r3, r3, #2
 80265d8:	81a3      	strh	r3, [r4, #12]
 80265da:	e7e3      	b.n	80265a4 <__smakebuf_r+0xc>
 80265dc:	4b0d      	ldr	r3, [pc, #52]	; (8026614 <__smakebuf_r+0x7c>)
 80265de:	62b3      	str	r3, [r6, #40]	; 0x28
 80265e0:	89a3      	ldrh	r3, [r4, #12]
 80265e2:	6020      	str	r0, [r4, #0]
 80265e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80265e8:	81a3      	strh	r3, [r4, #12]
 80265ea:	9b00      	ldr	r3, [sp, #0]
 80265ec:	6163      	str	r3, [r4, #20]
 80265ee:	9b01      	ldr	r3, [sp, #4]
 80265f0:	6120      	str	r0, [r4, #16]
 80265f2:	b15b      	cbz	r3, 802660c <__smakebuf_r+0x74>
 80265f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80265f8:	4630      	mov	r0, r6
 80265fa:	f000 f887 	bl	802670c <_isatty_r>
 80265fe:	b128      	cbz	r0, 802660c <__smakebuf_r+0x74>
 8026600:	89a3      	ldrh	r3, [r4, #12]
 8026602:	f023 0303 	bic.w	r3, r3, #3
 8026606:	f043 0301 	orr.w	r3, r3, #1
 802660a:	81a3      	strh	r3, [r4, #12]
 802660c:	89a3      	ldrh	r3, [r4, #12]
 802660e:	431d      	orrs	r5, r3
 8026610:	81a5      	strh	r5, [r4, #12]
 8026612:	e7cd      	b.n	80265b0 <__smakebuf_r+0x18>
 8026614:	08026405 	.word	0x08026405

08026618 <__malloc_lock>:
 8026618:	4770      	bx	lr

0802661a <__malloc_unlock>:
 802661a:	4770      	bx	lr

0802661c <__sread>:
 802661c:	b510      	push	{r4, lr}
 802661e:	460c      	mov	r4, r1
 8026620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026624:	f000 f894 	bl	8026750 <_read_r>
 8026628:	2800      	cmp	r0, #0
 802662a:	bfab      	itete	ge
 802662c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802662e:	89a3      	ldrhlt	r3, [r4, #12]
 8026630:	181b      	addge	r3, r3, r0
 8026632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026636:	bfac      	ite	ge
 8026638:	6563      	strge	r3, [r4, #84]	; 0x54
 802663a:	81a3      	strhlt	r3, [r4, #12]
 802663c:	bd10      	pop	{r4, pc}

0802663e <__swrite>:
 802663e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026642:	461f      	mov	r7, r3
 8026644:	898b      	ldrh	r3, [r1, #12]
 8026646:	05db      	lsls	r3, r3, #23
 8026648:	4605      	mov	r5, r0
 802664a:	460c      	mov	r4, r1
 802664c:	4616      	mov	r6, r2
 802664e:	d505      	bpl.n	802665c <__swrite+0x1e>
 8026650:	2302      	movs	r3, #2
 8026652:	2200      	movs	r2, #0
 8026654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026658:	f000 f868 	bl	802672c <_lseek_r>
 802665c:	89a3      	ldrh	r3, [r4, #12]
 802665e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026666:	81a3      	strh	r3, [r4, #12]
 8026668:	4632      	mov	r2, r6
 802666a:	463b      	mov	r3, r7
 802666c:	4628      	mov	r0, r5
 802666e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026672:	f000 b817 	b.w	80266a4 <_write_r>

08026676 <__sseek>:
 8026676:	b510      	push	{r4, lr}
 8026678:	460c      	mov	r4, r1
 802667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802667e:	f000 f855 	bl	802672c <_lseek_r>
 8026682:	1c43      	adds	r3, r0, #1
 8026684:	89a3      	ldrh	r3, [r4, #12]
 8026686:	bf15      	itete	ne
 8026688:	6560      	strne	r0, [r4, #84]	; 0x54
 802668a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802668e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026692:	81a3      	strheq	r3, [r4, #12]
 8026694:	bf18      	it	ne
 8026696:	81a3      	strhne	r3, [r4, #12]
 8026698:	bd10      	pop	{r4, pc}

0802669a <__sclose>:
 802669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802669e:	f000 b813 	b.w	80266c8 <_close_r>
	...

080266a4 <_write_r>:
 80266a4:	b538      	push	{r3, r4, r5, lr}
 80266a6:	4c07      	ldr	r4, [pc, #28]	; (80266c4 <_write_r+0x20>)
 80266a8:	4605      	mov	r5, r0
 80266aa:	4608      	mov	r0, r1
 80266ac:	4611      	mov	r1, r2
 80266ae:	2200      	movs	r2, #0
 80266b0:	6022      	str	r2, [r4, #0]
 80266b2:	461a      	mov	r2, r3
 80266b4:	f7dc f8f9 	bl	80028aa <_write>
 80266b8:	1c43      	adds	r3, r0, #1
 80266ba:	d102      	bne.n	80266c2 <_write_r+0x1e>
 80266bc:	6823      	ldr	r3, [r4, #0]
 80266be:	b103      	cbz	r3, 80266c2 <_write_r+0x1e>
 80266c0:	602b      	str	r3, [r5, #0]
 80266c2:	bd38      	pop	{r3, r4, r5, pc}
 80266c4:	2000bb4c 	.word	0x2000bb4c

080266c8 <_close_r>:
 80266c8:	b538      	push	{r3, r4, r5, lr}
 80266ca:	4c06      	ldr	r4, [pc, #24]	; (80266e4 <_close_r+0x1c>)
 80266cc:	2300      	movs	r3, #0
 80266ce:	4605      	mov	r5, r0
 80266d0:	4608      	mov	r0, r1
 80266d2:	6023      	str	r3, [r4, #0]
 80266d4:	f7dc f905 	bl	80028e2 <_close>
 80266d8:	1c43      	adds	r3, r0, #1
 80266da:	d102      	bne.n	80266e2 <_close_r+0x1a>
 80266dc:	6823      	ldr	r3, [r4, #0]
 80266de:	b103      	cbz	r3, 80266e2 <_close_r+0x1a>
 80266e0:	602b      	str	r3, [r5, #0]
 80266e2:	bd38      	pop	{r3, r4, r5, pc}
 80266e4:	2000bb4c 	.word	0x2000bb4c

080266e8 <_fstat_r>:
 80266e8:	b538      	push	{r3, r4, r5, lr}
 80266ea:	4c07      	ldr	r4, [pc, #28]	; (8026708 <_fstat_r+0x20>)
 80266ec:	2300      	movs	r3, #0
 80266ee:	4605      	mov	r5, r0
 80266f0:	4608      	mov	r0, r1
 80266f2:	4611      	mov	r1, r2
 80266f4:	6023      	str	r3, [r4, #0]
 80266f6:	f7dc f900 	bl	80028fa <_fstat>
 80266fa:	1c43      	adds	r3, r0, #1
 80266fc:	d102      	bne.n	8026704 <_fstat_r+0x1c>
 80266fe:	6823      	ldr	r3, [r4, #0]
 8026700:	b103      	cbz	r3, 8026704 <_fstat_r+0x1c>
 8026702:	602b      	str	r3, [r5, #0]
 8026704:	bd38      	pop	{r3, r4, r5, pc}
 8026706:	bf00      	nop
 8026708:	2000bb4c 	.word	0x2000bb4c

0802670c <_isatty_r>:
 802670c:	b538      	push	{r3, r4, r5, lr}
 802670e:	4c06      	ldr	r4, [pc, #24]	; (8026728 <_isatty_r+0x1c>)
 8026710:	2300      	movs	r3, #0
 8026712:	4605      	mov	r5, r0
 8026714:	4608      	mov	r0, r1
 8026716:	6023      	str	r3, [r4, #0]
 8026718:	f7dc f8ff 	bl	800291a <_isatty>
 802671c:	1c43      	adds	r3, r0, #1
 802671e:	d102      	bne.n	8026726 <_isatty_r+0x1a>
 8026720:	6823      	ldr	r3, [r4, #0]
 8026722:	b103      	cbz	r3, 8026726 <_isatty_r+0x1a>
 8026724:	602b      	str	r3, [r5, #0]
 8026726:	bd38      	pop	{r3, r4, r5, pc}
 8026728:	2000bb4c 	.word	0x2000bb4c

0802672c <_lseek_r>:
 802672c:	b538      	push	{r3, r4, r5, lr}
 802672e:	4c07      	ldr	r4, [pc, #28]	; (802674c <_lseek_r+0x20>)
 8026730:	4605      	mov	r5, r0
 8026732:	4608      	mov	r0, r1
 8026734:	4611      	mov	r1, r2
 8026736:	2200      	movs	r2, #0
 8026738:	6022      	str	r2, [r4, #0]
 802673a:	461a      	mov	r2, r3
 802673c:	f7dc f8f8 	bl	8002930 <_lseek>
 8026740:	1c43      	adds	r3, r0, #1
 8026742:	d102      	bne.n	802674a <_lseek_r+0x1e>
 8026744:	6823      	ldr	r3, [r4, #0]
 8026746:	b103      	cbz	r3, 802674a <_lseek_r+0x1e>
 8026748:	602b      	str	r3, [r5, #0]
 802674a:	bd38      	pop	{r3, r4, r5, pc}
 802674c:	2000bb4c 	.word	0x2000bb4c

08026750 <_read_r>:
 8026750:	b538      	push	{r3, r4, r5, lr}
 8026752:	4c07      	ldr	r4, [pc, #28]	; (8026770 <_read_r+0x20>)
 8026754:	4605      	mov	r5, r0
 8026756:	4608      	mov	r0, r1
 8026758:	4611      	mov	r1, r2
 802675a:	2200      	movs	r2, #0
 802675c:	6022      	str	r2, [r4, #0]
 802675e:	461a      	mov	r2, r3
 8026760:	f7dc f886 	bl	8002870 <_read>
 8026764:	1c43      	adds	r3, r0, #1
 8026766:	d102      	bne.n	802676e <_read_r+0x1e>
 8026768:	6823      	ldr	r3, [r4, #0]
 802676a:	b103      	cbz	r3, 802676e <_read_r+0x1e>
 802676c:	602b      	str	r3, [r5, #0]
 802676e:	bd38      	pop	{r3, r4, r5, pc}
 8026770:	2000bb4c 	.word	0x2000bb4c

08026774 <_init>:
 8026774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026776:	bf00      	nop
 8026778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802677a:	bc08      	pop	{r3}
 802677c:	469e      	mov	lr, r3
 802677e:	4770      	bx	lr

08026780 <_fini>:
 8026780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026782:	bf00      	nop
 8026784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026786:	bc08      	pop	{r3}
 8026788:	469e      	mov	lr, r3
 802678a:	4770      	bx	lr
