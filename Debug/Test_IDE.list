
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000266d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005204  080268a8  080268a8  000368a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000052c4  0802baac  0802baac  0003baac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000af630  08030d70  08030d70  00040d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000188  080e03a0  080e03a0  000f03a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080e0528  080e0528  001000fc  2**0
                  CONTENTS
  7 .ARM          00000008  080e0528  080e0528  000f0528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080e0530  080e0530  001000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080e0530  080e0530  000f0530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080e0544  080e0544  000f0544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080e054c  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ba58  200000fc  080e0648  001000fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000bb54  080e0648  0010bb54  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  001000fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000fab9c  00000000  00000000  0010012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00019525  00000000  00000000  001facc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000058a0  00000000  00000000  002141f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005168  00000000  00000000  00219a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003f7ca  00000000  00000000  0021ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000515a0  00000000  00000000  0025e3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013a74e  00000000  00000000  002af962  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003ea0b0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00017e7c  00000000  00000000  003ea1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026890 	.word	0x08026890

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08026890 	.word	0x08026890

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00b fa82 	bl	800bac4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00b fa3d 	bl	800ba88 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00b fa07 	bl	800ba88 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00b f954 	bl	800ba88 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00b f946 	bl	800ba88 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00b f92b 	bl	800ba88 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00b f91d 	bl	800ba88 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00b f8d0 	bl	800ba54 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00b f8bc 	bl	800ba54 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00b f881 	bl	800ba40 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PollingControlMusicInit>:
uint8_t isPlay=0;

//extern osSemaphoreId binarySemControlQHandle;

void PollingControlMusicInit()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	music_msg_q = xQueueGenericCreate(1, 1, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	2001      	movs	r0, #1
 8000972:	f008 fcbc 	bl	80092ee <xQueueGenericCreate>
 8000976:	4602      	mov	r2, r0
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <PollingControlMusicInit+0x48>)
 800097a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <PollingControlMusicInit+0x4c>)
 8000984:	f003 fc80 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <PollingControlMusicInit+0x50>)
 8000990:	f003 fc7a 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <PollingControlMusicInit+0x50>)
 800099c:	f003 fc74 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <PollingControlMusicInit+0x54>)
 80009a6:	f003 fc6f 	bl	8004288 <HAL_GPIO_WritePin>

	//xSemaphoreGive(binarySemControlQHandle);
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000b630 	.word	0x2000b630
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40022000 	.word	0x40022000

080009c0 <signalOut>:

void signalOut(uint8_t controlSignal)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState n2_stat = RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState n1_stat = RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState n0_stat = RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	737b      	strb	r3, [r7, #13]

	switch (controlSignal)
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d82f      	bhi.n	8000a3e <signalOut+0x7e>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <signalOut+0x24>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a01 	.word	0x08000a01
 80009e8:	08000a07 	.word	0x08000a07
 80009ec:	08000a0d 	.word	0x08000a0d
 80009f0:	08000a17 	.word	0x08000a17
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	08000a27 	.word	0x08000a27
 80009fc:	08000a31 	.word	0x08000a31
	{
	case 1:
		n0_stat = SET;
 8000a00:	2301      	movs	r3, #1
 8000a02:	737b      	strb	r3, [r7, #13]
		break;
 8000a04:	e01b      	b.n	8000a3e <signalOut+0x7e>
	case 2:
		n1_stat = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]
		break;
 8000a0a:	e018      	b.n	8000a3e <signalOut+0x7e>
	case 3:
		n0_stat = SET;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73bb      	strb	r3, [r7, #14]
		break;
 8000a14:	e013      	b.n	8000a3e <signalOut+0x7e>
	case 4:
		n2_stat = SET;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
		break;
 8000a1a:	e010      	b.n	8000a3e <signalOut+0x7e>
	case 5:
		n0_stat = SET;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	737b      	strb	r3, [r7, #13]
		n2_stat = SET;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
		break;
 8000a24:	e00b      	b.n	8000a3e <signalOut+0x7e>
	case 6:
		n1_stat = SET;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a2e:	e006      	b.n	8000a3e <signalOut+0x7e>
	case 7:
		n0_stat = SET;
 8000a30:	2301      	movs	r3, #1
 8000a32:	737b      	strb	r3, [r7, #13]
		n1_stat = SET;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73bb      	strb	r3, [r7, #14]
		n2_stat = SET;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8000a3c:	bf00      	nop
	}


	HAL_GPIO_WritePin(N2_GPIO_Port, N2_Pin, n2_stat);
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	461a      	mov	r2, r3
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <signalOut+0xb0>)
 8000a48:	f003 fc1e 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N1_GPIO_Port, N1_Pin, n1_stat);
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <signalOut+0xb0>)
 8000a56:	f003 fc17 	bl	8004288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N0_GPIO_Port, N0_Pin, n0_stat);
 8000a5a:	7b7b      	ldrb	r3, [r7, #13]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <signalOut+0xb4>)
 8000a62:	f003 fc11 	bl	8004288 <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40022000 	.word	0x40022000

08000a78 <PollingControlMusic>:

// PORT LSB->MSB I-A-A-B
void PollingControlMusic()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (xQueueReceive(music_msg_q, &msg, 0) == pdTRUE)
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <PollingControlMusic+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4917      	ldr	r1, [pc, #92]	; (8000ae0 <PollingControlMusic+0x68>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f008 fe95 	bl	80097b4 <xQueueReceive>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d116      	bne.n	8000abe <PollingControlMusic+0x46>
	{
		signalOut(msg);
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <PollingControlMusic+0x68>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff93 	bl	80009c0 <signalOut>
		vTaskDelay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f009 fbca 	bl	800a234 <vTaskDelay>

		// Pulse out
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <PollingControlMusic+0x6c>)
 8000aa8:	f003 fbee 	bl	8004288 <HAL_GPIO_WritePin>
		vTaskDelay(2);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f009 fbc1 	bl	800a234 <vTaskDelay>
		HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <PollingControlMusic+0x6c>)
 8000aba:	f003 fbe5 	bl	8004288 <HAL_GPIO_WritePin>
		//xSemaphoreGive(binarySemControlQHandle);
	}

	isPlay = (GPIOB->IDR >> 14) & 0x01;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <PollingControlMusic+0x6c>)
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	0b9b      	lsrs	r3, r3, #14
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <PollingControlMusic+0x70>)
 8000ace:	701a      	strb	r2, [r3, #0]


	osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f008 f998 	bl	8008e06 <osDelay>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000b630 	.word	0x2000b630
 8000ae0:	2000b62c 	.word	0x2000b62c
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	2000011e 	.word	0x2000011e

08000aec <PollingInit>:
uint8_t uartMsgBuffer[UART_BUFF_SIZE];
uint8_t uartMsgData[2];
uint8_t msgIndex = 0;
uint8_t msgRdyFlag = 0;

void PollingInit(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4903      	ldr	r1, [pc, #12]	; (8000b00 <PollingInit+0x14>)
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <PollingInit+0x18>)
 8000af6:	f007 f90f 	bl	8007d18 <HAL_UART_Receive_IT>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000b634 	.word	0x2000b634
 8000b04:	2000b9c8 	.word	0x2000b9c8

08000b08 <PollingRoutine>:


void PollingRoutine(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	if(msgRdyFlag){
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <PollingRoutine+0x24>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d009      	beq.n	8000b28 <PollingRoutine+0x20>
		xSemaphoreGive(binarySemMsgUartHandle);
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <PollingRoutine+0x28>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f008 fcb5 	bl	800948c <xQueueGenericSend>
		msgRdyFlag = 0;
 8000b22:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <PollingRoutine+0x24>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
	}

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000120 	.word	0x20000120
 8000b30:	2000b9a0 	.word	0x2000b9a0

08000b34 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if(msgIndex == 0){
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x1a>
		memset(&uartMsgBuffer, 0, sizeof(uartMsgBuffer));
 8000b44:	2210      	movs	r2, #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b4a:	f024 fef0 	bl	802592e <memset>
	}

	if(uartMsgData[0] == 13 || msgIndex==15){
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b0d      	cmp	r3, #13
 8000b54:	d003      	beq.n	8000b5e <HAL_UART_RxCpltCallback+0x2a>
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d10c      	bne.n	8000b78 <HAL_UART_RxCpltCallback+0x44>
		uartMsgBuffer[msgIndex] = 0;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	5499      	strb	r1, [r3, r2]
		msgIndex = 0;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

		msgRdyFlag = 1;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_RxCpltCallback+0x78>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e00a      	b.n	8000b8e <HAL_UART_RxCpltCallback+0x5a>
	}else {
		uartMsgBuffer[msgIndex++] = uartMsgData[0];
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	b2d1      	uxtb	r1, r2
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b82:	7011      	strb	r1, [r2, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b88:	7819      	ldrb	r1, [r3, #0]
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b8c:	5499      	strb	r1, [r3, r2]
	}

	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4905      	ldr	r1, [pc, #20]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <HAL_UART_RxCpltCallback+0x7c>)
 8000b94:	f007 f8c0 	bl	8007d18 <HAL_UART_Receive_IT>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000011f 	.word	0x2000011f
 8000ba4:	2000b638 	.word	0x2000b638
 8000ba8:	2000b634 	.word	0x2000b634
 8000bac:	20000120 	.word	0x20000120
 8000bb0:	2000b9c8 	.word	0x2000b9c8

08000bb4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <vApplicationGetIdleTaskMemory+0x30>)
 8000bfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000124 	.word	0x20000124
 8000c18:	2000017c 	.word	0x2000017c

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b098      	sub	sp, #96	; 0x60
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f001 ff16 	bl	8002a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f873 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 fdbf 	bl	80017ac <MX_GPIO_Init>
  MX_ADC3_Init();
 8000c2e:	f000 f927 	bl	8000e80 <MX_ADC3_Init>
  MX_CRC_Init();
 8000c32:	f000 f977 	bl	8000f24 <MX_CRC_Init>
  MX_DCMI_Init();
 8000c36:	f000 f997 	bl	8000f68 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000c3a:	f000 f9c9 	bl	8000fd0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000c3e:	f000 fd09 	bl	8001654 <MX_FMC_Init>
  MX_I2C1_Init();
 8000c42:	f000 f9f7 	bl	8001034 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c46:	f000 fa35 	bl	80010b4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000c4a:	f000 fa73 	bl	8001134 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000c4e:	f000 fb27 	bl	80012a0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000c52:	f000 fb51 	bl	80012f8 <MX_RTC_Init>
  MX_SAI2_Init();
 8000c56:	f000 fbf5 	bl	8001444 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000c5a:	f000 fc9b 	bl	8001594 <MX_SPDIFRX_Init>
  MX_USART6_UART_Init();
 8000c5e:	f000 fcc9 	bl	80015f4 <MX_USART6_UART_Init>
  MX_TouchGFX_Init();
 8000c62:	f00a ff3a 	bl	800bada <MX_TouchGFX_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemMsgUart */
  osSemaphoreDef(binarySemMsgUart);
 8000c66:	2300      	movs	r3, #0
 8000c68:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  binarySemMsgUartHandle = osSemaphoreCreate(osSemaphore(binarySemMsgUart), 1);
 8000c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c72:	2101      	movs	r1, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f008 f8da 	bl	8008e2e <osSemaphoreCreate>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <main+0xd8>)
 8000c7e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <main+0xdc>)
 8000c82:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c86:	461d      	mov	r5, r3
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 f867 	bl	8008d6e <osThreadCreate>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <main+0xe0>)
 8000ca4:	601a      	str	r2, [r3, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 512);
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <main+0xe4>)
 8000ca8:	f107 0420 	add.w	r4, r7, #32
 8000cac:	461d      	mov	r5, r3
 8000cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f008 f854 	bl	8008d6e <osThreadCreate>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <main+0xe8>)
 8000cca:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <main+0xec>)
 8000cce:	1d3c      	adds	r4, r7, #4
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 f843 	bl	8008d6e <osThreadCreate>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <main+0xf0>)
 8000cec:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cee:	f008 f837 	bl	8008d60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0xd6>
 8000cf4:	2000b9a0 	.word	0x2000b9a0
 8000cf8:	080268b4 	.word	0x080268b4
 8000cfc:	2000b6cc 	.word	0x2000b6cc
 8000d00:	080268dc 	.word	0x080268dc
 8000d04:	2000b904 	.word	0x2000b904
 8000d08:	08026904 	.word	0x08026904
 8000d0c:	2000babc 	.word	0x2000babc

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0b4      	sub	sp, #208	; 0xd0
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f024 fe05 	bl	802592e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2284      	movs	r2, #132	; 0x84
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f024 fdf6 	bl	802592e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d42:	f004 fc03 	bl	800554c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <SystemClock_Config+0x164>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <SystemClock_Config+0x164>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <SystemClock_Config+0x164>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <SystemClock_Config+0x168>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <SystemClock_Config+0x168>)
 8000d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <SystemClock_Config+0x168>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d76:	2309      	movs	r3, #9
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d98:	2319      	movs	r3, #25
 8000d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000da2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000dac:	2309      	movs	r3, #9
 8000dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fcea 	bl	8005790 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dc2:	f000 ff47 	bl	8001c54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dc6:	f004 fbd1 	bl	800556c <HAL_PWREx_EnableOverDrive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dd0:	f000 ff40 	bl	8001c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000df6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dfa:	2106      	movs	r1, #6
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 ff6b 	bl	8005cd8 <HAL_RCC_ClockConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000e08:	f000 ff24 	bl	8001c54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <SystemClock_Config+0x16c>)
 8000e0e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e20:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e46:	2300      	movs	r3, #0
 8000e48:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 f940 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8000e66:	f000 fef5 	bl	8001c54 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	37d0      	adds	r7, #208	; 0xd0
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000
 8000e7c:	01114828 	.word	0x01114828

08000e80 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <MX_ADC3_Init+0x9c>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000e9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <MX_ADC3_Init+0xa0>)
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000ee2:	f001 fe05 	bl	8002af0 <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000eec:	f000 feb2 	bl	8001c54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_ADC3_Init+0x98>)
 8000f02:	f001 fe39 	bl	8002b78 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000f0c:	f000 fea2 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000b908 	.word	0x2000b908
 8000f1c:	40012200 	.word	0x40012200
 8000f20:	0f000001 	.word	0x0f000001

08000f24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <MX_CRC_Init+0x40>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <MX_CRC_Init+0x3c>)
 8000f4e:	f002 f969 	bl	8003224 <HAL_CRC_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f58:	f000 fe7c 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000b838 	.word	0x2000b838
 8000f64:	40023000 	.word	0x40023000

08000f68 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <MX_DCMI_Init+0x64>)
 8000f70:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_DCMI_Init+0x60>)
 8000fb6:	f002 fa1f 	bl	80033f8 <HAL_DCMI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000fc0:	f000 fe48 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000b950 	.word	0x2000b950
 8000fcc:	50050000 	.word	0x50050000

08000fd0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <MX_DMA2D_Init+0x60>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_DMA2D_Init+0x5c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_DMA2D_Init+0x5c>)
 8001000:	2200      	movs	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <MX_DMA2D_Init+0x5c>)
 8001006:	f002 fa93 	bl	8003530 <HAL_DMA2D_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001010:	f000 fe20 	bl	8001c54 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001014:	2101      	movs	r1, #1
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_DMA2D_Init+0x5c>)
 8001018:	f002 fd54 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001022:	f000 fe17 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000ba48 	.word	0x2000ba48
 8001030:	4002b000 	.word	0x4002b000

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_I2C1_Init+0x74>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_I2C1_Init+0x78>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <MX_I2C1_Init+0x7c>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_I2C1_Init+0x74>)
 800104c:	2201      	movs	r2, #1
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001070:	f003 f924 	bl	80042bc <HAL_I2C_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800107a:	f000 fdeb 	bl	8001c54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001082:	f003 fe33 	bl	8004cec <HAL_I2CEx_ConfigAnalogFilter>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800108c:	f000 fde2 	bl	8001c54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_I2C1_Init+0x74>)
 8001094:	f003 fe75 	bl	8004d82 <HAL_I2CEx_ConfigDigitalFilter>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 fdd9 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000b7ec 	.word	0x2000b7ec
 80010ac:	40005400 	.word	0x40005400
 80010b0:	00c0eaff 	.word	0x00c0eaff

080010b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_I2C3_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_I2C3_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_I2C3_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_I2C3_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_I2C3_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_I2C3_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_I2C3_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_I2C3_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C3_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C3_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C3_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_I2C3_Init+0x74>)
 80010f0:	f003 f8e4 	bl	80042bc <HAL_I2C_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010fa:	f000 fdab 	bl	8001c54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_I2C3_Init+0x74>)
 8001102:	f003 fdf3 	bl	8004cec <HAL_I2CEx_ConfigAnalogFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 fda2 	bl	8001c54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_I2C3_Init+0x74>)
 8001114:	f003 fe35 	bl	8004d82 <HAL_I2CEx_ConfigDigitalFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 fd99 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000b6d0 	.word	0x2000b6d0
 800112c:	40005c00 	.word	0x40005c00
 8001130:	00c0eaff 	.word	0x00c0eaff

08001134 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09a      	sub	sp, #104	; 0x68
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800113a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800113e:	2234      	movs	r2, #52	; 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f024 fbf3 	bl	802592e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2234      	movs	r2, #52	; 0x34
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f024 fbed 	bl	802592e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001154:	4b50      	ldr	r3, [pc, #320]	; (8001298 <MX_LTDC_Init+0x164>)
 8001156:	4a51      	ldr	r2, [pc, #324]	; (800129c <MX_LTDC_Init+0x168>)
 8001158:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <MX_LTDC_Init+0x164>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001160:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <MX_LTDC_Init+0x164>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001166:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <MX_LTDC_Init+0x164>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <MX_LTDC_Init+0x164>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <MX_LTDC_Init+0x164>)
 8001174:	2228      	movs	r2, #40	; 0x28
 8001176:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <MX_LTDC_Init+0x164>)
 800117a:	2209      	movs	r2, #9
 800117c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <MX_LTDC_Init+0x164>)
 8001180:	2235      	movs	r2, #53	; 0x35
 8001182:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <MX_LTDC_Init+0x164>)
 8001186:	220b      	movs	r2, #11
 8001188:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <MX_LTDC_Init+0x164>)
 800118c:	f240 2215 	movw	r2, #533	; 0x215
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <MX_LTDC_Init+0x164>)
 8001194:	f240 121b 	movw	r2, #283	; 0x11b
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <MX_LTDC_Init+0x164>)
 800119c:	f240 2235 	movw	r2, #565	; 0x235
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <MX_LTDC_Init+0x164>)
 80011a4:	f240 121d 	movw	r2, #285	; 0x11d
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <MX_LTDC_Init+0x164>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <MX_LTDC_Init+0x164>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <MX_LTDC_Init+0x164>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011c2:	4835      	ldr	r0, [pc, #212]	; (8001298 <MX_LTDC_Init+0x164>)
 80011c4:	f003 fe2a 	bl	8004e1c <HAL_LTDC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011ce:	f000 fd41 	bl	8001c54 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80011d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80011e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011e4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80011e6:	2301      	movs	r3, #1
 80011e8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80011ea:	23ff      	movs	r3, #255	; 0xff
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011f8:	2305      	movs	r3, #5
 80011fa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80011fc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001200:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001202:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001206:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001208:	f44f 7388 	mov.w	r3, #272	; 0x110
 800120c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	481b      	ldr	r0, [pc, #108]	; (8001298 <MX_LTDC_Init+0x164>)
 800122a:	f003 ff7f 	bl	800512c <HAL_LTDC_ConfigLayer>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001234:	f000 fd0e 	bl	8001c54 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001254:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001256:	2305      	movs	r3, #5
 8001258:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_LTDC_Init+0x164>)
 8001280:	f003 ff54 	bl	800512c <HAL_LTDC_ConfigLayer>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800128a:	f000 fce3 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3768      	adds	r7, #104	; 0x68
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000b85c 	.word	0x2000b85c
 800129c:	40016800 	.word	0x40016800

080012a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <MX_QUADSPI_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012ac:	22ff      	movs	r2, #255	; 0xff
 80012ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012be:	2201      	movs	r2, #1
 80012c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_QUADSPI_Init+0x50>)
 80012dc:	f004 f996 	bl	800560c <HAL_QSPI_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80012e6:	f000 fcb5 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000bac0 	.word	0x2000bac0
 80012f4:	a0001000 	.word	0xa0001000

080012f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b092      	sub	sp, #72	; 0x48
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	222c      	movs	r2, #44	; 0x2c
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f024 fb07 	bl	802592e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <MX_RTC_Init+0x144>)
 8001322:	4a47      	ldr	r2, [pc, #284]	; (8001440 <MX_RTC_Init+0x148>)
 8001324:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <MX_RTC_Init+0x144>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800132c:	4b43      	ldr	r3, [pc, #268]	; (800143c <MX_RTC_Init+0x144>)
 800132e:	227f      	movs	r2, #127	; 0x7f
 8001330:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001332:	4b42      	ldr	r3, [pc, #264]	; (800143c <MX_RTC_Init+0x144>)
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <MX_RTC_Init+0x144>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <MX_RTC_Init+0x144>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001344:	4b3d      	ldr	r3, [pc, #244]	; (800143c <MX_RTC_Init+0x144>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800134a:	483c      	ldr	r0, [pc, #240]	; (800143c <MX_RTC_Init+0x144>)
 800134c:	f005 fbea 	bl	8006b24 <HAL_RTC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001356:	f000 fc7d 	bl	8001c54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001378:	2201      	movs	r2, #1
 800137a:	4619      	mov	r1, r3
 800137c:	482f      	ldr	r0, [pc, #188]	; (800143c <MX_RTC_Init+0x144>)
 800137e:	f005 fc4d 	bl	8006c1c <HAL_RTC_SetTime>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001388:	f000 fc64 	bl	8001c54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800138c:	2301      	movs	r3, #1
 800138e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001398:	2301      	movs	r3, #1
 800139a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a8:	2201      	movs	r2, #1
 80013aa:	4619      	mov	r1, r3
 80013ac:	4823      	ldr	r0, [pc, #140]	; (800143c <MX_RTC_Init+0x144>)
 80013ae:	f005 fcf3 	bl	8006d98 <HAL_RTC_SetDate>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80013b8:	f000 fc4c 	bl	8001c54 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80013bc:	2300      	movs	r3, #0
 80013be:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2201      	movs	r2, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <MX_RTC_Init+0x144>)
 80013f4:	f005 fd78 	bl	8006ee8 <HAL_RTC_SetAlarm>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80013fe:	f000 fc29 	bl	8001c54 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <MX_RTC_Init+0x144>)
 8001410:	f005 fd6a 	bl	8006ee8 <HAL_RTC_SetAlarm>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800141a:	f000 fc1b 	bl	8001c54 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800141e:	2202      	movs	r2, #2
 8001420:	2100      	movs	r1, #0
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_RTC_Init+0x144>)
 8001424:	f005 feea 	bl	80071fc <HAL_RTCEx_SetTimeStamp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800142e:	f000 fc11 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3748      	adds	r7, #72	; 0x48
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000b9a4 	.word	0x2000b9a4
 8001440:	40002800 	.word	0x40002800

08001444 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <MX_SAI2_Init+0x13c>)
 800144a:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <MX_SAI2_Init+0x140>)
 800144c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800144e:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001450:	2200      	movs	r2, #0
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <MX_SAI2_Init+0x13c>)
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001462:	2200      	movs	r2, #0
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001468:	2200      	movs	r2, #0
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <MX_SAI2_Init+0x13c>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <MX_SAI2_Init+0x13c>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001486:	4a40      	ldr	r2, [pc, #256]	; (8001588 <MX_SAI2_Init+0x144>)
 8001488:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <MX_SAI2_Init+0x13c>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001496:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <MX_SAI2_Init+0x13c>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <MX_SAI2_Init+0x13c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80014d8:	4829      	ldr	r0, [pc, #164]	; (8001580 <MX_SAI2_Init+0x13c>)
 80014da:	f005 fee5 	bl	80072a8 <HAL_SAI_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80014e4:	f000 fbb6 	bl	8001c54 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_SAI2_Init+0x148>)
 80014ea:	4a29      	ldr	r2, [pc, #164]	; (8001590 <MX_SAI2_Init+0x14c>)
 80014ec:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <MX_SAI2_Init+0x148>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_SAI2_Init+0x148>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_SAI2_Init+0x148>)
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_SAI2_Init+0x148>)
 8001502:	2200      	movs	r2, #0
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_SAI2_Init+0x148>)
 8001508:	2200      	movs	r2, #0
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_SAI2_Init+0x148>)
 800150e:	2201      	movs	r2, #1
 8001510:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_SAI2_Init+0x148>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_SAI2_Init+0x148>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_SAI2_Init+0x148>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_SAI2_Init+0x148>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_SAI2_Init+0x148>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_SAI2_Init+0x148>)
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_SAI2_Init+0x148>)
 8001538:	2208      	movs	r2, #8
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_SAI2_Init+0x148>)
 800153e:	2201      	movs	r2, #1
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_SAI2_Init+0x148>)
 8001544:	2200      	movs	r2, #0
 8001546:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_SAI2_Init+0x148>)
 800154a:	2200      	movs	r2, #0
 800154c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_SAI2_Init+0x148>)
 8001550:	2200      	movs	r2, #0
 8001552:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_SAI2_Init+0x148>)
 8001556:	2200      	movs	r2, #0
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_SAI2_Init+0x148>)
 800155c:	2200      	movs	r2, #0
 800155e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_SAI2_Init+0x148>)
 8001562:	2201      	movs	r2, #1
 8001564:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_SAI2_Init+0x148>)
 8001568:	2200      	movs	r2, #0
 800156a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_SAI2_Init+0x148>)
 800156e:	f005 fe9b 	bl	80072a8 <HAL_SAI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001578:	f000 fb6c 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000b768 	.word	0x2000b768
 8001584:	40015c04 	.word	0x40015c04
 8001588:	0002ee00 	.word	0x0002ee00
 800158c:	2000b648 	.word	0x2000b648
 8001590:	40015c24 	.word	0x40015c24

08001594 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 800159a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800159e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015de:	f006 f88b 	bl	80076f8 <HAL_SPDIFRX_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 fb34 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000b71c 	.word	0x2000b71c

080015f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_USART6_UART_Init+0x58>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <MX_USART6_UART_Init+0x5c>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_USART6_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART6_UART_Init+0x58>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART6_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART6_UART_Init+0x58>)
 8001638:	f006 fb20 	bl	8007c7c <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 fb07 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000b9c8 	.word	0x2000b9c8
 8001650:	40011400 	.word	0x40011400

08001654 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <MX_FMC_Init+0x14c>)
 800166e:	4a4d      	ldr	r2, [pc, #308]	; (80017a4 <MX_FMC_Init+0x150>)
 8001670:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <MX_FMC_Init+0x14c>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001680:	2204      	movs	r2, #4
 8001682:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001684:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001686:	2210      	movs	r2, #16
 8001688:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <MX_FMC_Init+0x14c>)
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001692:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001696:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <MX_FMC_Init+0x14c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016b8:	2307      	movs	r3, #7
 80016ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016bc:	2304      	movs	r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016c4:	2303      	movs	r3, #3
 80016c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4832      	ldr	r0, [pc, #200]	; (80017a0 <MX_FMC_Init+0x14c>)
 80016d6:	f005 ff8f 	bl	80075f8 <HAL_SDRAM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016e0:	f000 fab8 	bl	8001c54 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <MX_FMC_Init+0x154>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <MX_FMC_Init+0x154>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <MX_FMC_Init+0x154>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <MX_FMC_Init+0x154>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001704:	4928      	ldr	r1, [pc, #160]	; (80017a8 <MX_FMC_Init+0x154>)
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001708:	f005 ffaa 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f001 f9cd 	bl	8002aac <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <MX_FMC_Init+0x154>)
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_FMC_Init+0x154>)
 800171a:	2210      	movs	r2, #16
 800171c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_FMC_Init+0x154>)
 8001720:	2201      	movs	r2, #1
 8001722:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_FMC_Init+0x154>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800172a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172e:	491e      	ldr	r1, [pc, #120]	; (80017a8 <MX_FMC_Init+0x154>)
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001732:	f005 ff95 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_FMC_Init+0x154>)
 8001738:	2203      	movs	r2, #3
 800173a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_FMC_Init+0x154>)
 800173e:	2210      	movs	r2, #16
 8001740:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_FMC_Init+0x154>)
 8001744:	2208      	movs	r2, #8
 8001746:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_FMC_Init+0x154>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800174e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001752:	4915      	ldr	r1, [pc, #84]	; (80017a8 <MX_FMC_Init+0x154>)
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001756:	f005 ff83 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800175a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800175e:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_FMC_Init+0x154>)
 8001762:	2204      	movs	r2, #4
 8001764:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_FMC_Init+0x154>)
 8001768:	2210      	movs	r2, #16
 800176a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_FMC_Init+0x154>)
 800176e:	2201      	movs	r2, #1
 8001770:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <MX_FMC_Init+0x154>)
 8001776:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177c:	490a      	ldr	r1, [pc, #40]	; (80017a8 <MX_FMC_Init+0x154>)
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_FMC_Init+0x14c>)
 8001780:	f005 ff6e 	bl	8007660 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001784:	f240 712b 	movw	r1, #1835	; 0x72b
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_FMC_Init+0x14c>)
 800178a:	f005 ff94 	bl	80076b6 <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 800178e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001792:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001796:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000ba88 	.word	0x2000ba88
 80017a4:	a0000140 	.word	0xa0000140
 80017a8:	2000037c 	.word	0x2000037c

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c2:	4bb0      	ldr	r3, [pc, #704]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4aaf      	ldr	r2, [pc, #700]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4bad      	ldr	r3, [pc, #692]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4baa      	ldr	r3, [pc, #680]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4aa9      	ldr	r2, [pc, #676]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4ba7      	ldr	r3, [pc, #668]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	4ba4      	ldr	r3, [pc, #656]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4aa3      	ldr	r2, [pc, #652]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4ba1      	ldr	r3, [pc, #644]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b9e      	ldr	r3, [pc, #632]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a9d      	ldr	r2, [pc, #628]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b9b      	ldr	r3, [pc, #620]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001822:	4b98      	ldr	r3, [pc, #608]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a97      	ldr	r2, [pc, #604]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b95      	ldr	r3, [pc, #596]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800183a:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a91      	ldr	r2, [pc, #580]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001852:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a8b      	ldr	r2, [pc, #556]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800186a:	4b86      	ldr	r3, [pc, #536]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a85      	ldr	r2, [pc, #532]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b83      	ldr	r3, [pc, #524]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a7f      	ldr	r2, [pc, #508]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b7d      	ldr	r3, [pc, #500]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189a:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a79      	ldr	r2, [pc, #484]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b77      	ldr	r3, [pc, #476]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a73      	ldr	r2, [pc, #460]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <MX_GPIO_Init+0x2d8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, N1_Pin|N2_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80018d0:	486d      	ldr	r0, [pc, #436]	; (8001a88 <MX_GPIO_Init+0x2dc>)
 80018d2:	f002 fcd9 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2120      	movs	r1, #32
 80018da:	486c      	ldr	r0, [pc, #432]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 80018dc:	f002 fcd4 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|N0_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	210c      	movs	r1, #12
 80018e4:	486a      	ldr	r0, [pc, #424]	; (8001a90 <MX_GPIO_Init+0x2e4>)
 80018e6:	f002 fccf 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2108      	movs	r1, #8
 80018ee:	4869      	ldr	r0, [pc, #420]	; (8001a94 <MX_GPIO_Init+0x2e8>)
 80018f0:	f002 fcca 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fa:	4865      	ldr	r0, [pc, #404]	; (8001a90 <MX_GPIO_Init+0x2e4>)
 80018fc:	f002 fcc4 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	4864      	ldr	r0, [pc, #400]	; (8001a98 <MX_GPIO_Init+0x2ec>)
 8001908:	f002 fcbe 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	21c8      	movs	r1, #200	; 0xc8
 8001910:	4862      	ldr	r0, [pc, #392]	; (8001a9c <MX_GPIO_Init+0x2f0>)
 8001912:	f002 fcb9 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N3_GPIO_Port, N3_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191c:	4860      	ldr	r0, [pc, #384]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 800191e:	f002 fcb3 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001922:	2308      	movs	r3, #8
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	485b      	ldr	r0, [pc, #364]	; (8001aa4 <MX_GPIO_Init+0x2f8>)
 8001936:	f002 f9f3 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800193a:	f643 0323 	movw	r3, #14371	; 0x3823
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800194c:	230a      	movs	r3, #10
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001954:	4619      	mov	r1, r3
 8001956:	4852      	ldr	r0, [pc, #328]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001958:	f002 f9e2 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800195c:	2310      	movs	r3, #16
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800196c:	2302      	movs	r3, #2
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	484a      	ldr	r0, [pc, #296]	; (8001aa0 <MX_GPIO_Init+0x2f4>)
 8001978:	f002 f9d2 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : N1_Pin N2_Pin */
  GPIO_InitStruct.Pin = N1_Pin|N2_Pin;
 800197c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001992:	4619      	mov	r1, r3
 8001994:	483c      	ldr	r0, [pc, #240]	; (8001a88 <MX_GPIO_Init+0x2dc>)
 8001996:	f002 f9c3 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800199a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	483e      	ldr	r0, [pc, #248]	; (8001aa8 <MX_GPIO_Init+0x2fc>)
 80019b0:	f002 f9b6 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <MX_GPIO_Init+0x300>)
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	4831      	ldr	r0, [pc, #196]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 80019c8:	f002 f9aa 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019cc:	2320      	movs	r3, #32
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	482a      	ldr	r0, [pc, #168]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 80019e4:	f002 f99c 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin N0_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|N0_Pin|LCD_DISP_Pin;
 80019e8:	f241 030c 	movw	r3, #4108	; 0x100c
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4823      	ldr	r0, [pc, #140]	; (8001a90 <MX_GPIO_Init+0x2e4>)
 8001a02:	f002 f98d 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4825      	ldr	r0, [pc, #148]	; (8001ab0 <MX_GPIO_Init+0x304>)
 8001a1c:	f002 f980 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a20:	2308      	movs	r3, #8
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a34:	4619      	mov	r1, r3
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <MX_GPIO_Init+0x2e8>)
 8001a38:	f002 f972 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <MX_GPIO_Init+0x2e0>)
 8001a50:	f002 f966 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a54:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a66:	4619      	mov	r1, r3
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <MX_GPIO_Init+0x2ec>)
 8001a6a:	f002 f959 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a80:	e018      	b.n	8001ab4 <MX_GPIO_Init+0x308>
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40022800 	.word	0x40022800
 8001a98:	40021c00 	.word	0x40021c00
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40022400 	.word	0x40022400
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	40020800 	.word	0x40020800
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4845      	ldr	r0, [pc, #276]	; (8001bd0 <MX_GPIO_Init+0x424>)
 8001abc:	f002 f930 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	483e      	ldr	r0, [pc, #248]	; (8001bd4 <MX_GPIO_Init+0x428>)
 8001adc:	f002 f920 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <MX_GPIO_Init+0x42c>)
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af2:	4619      	mov	r1, r3
 8001af4:	4837      	ldr	r0, [pc, #220]	; (8001bd4 <MX_GPIO_Init+0x428>)
 8001af6:	f002 f913 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001afa:	2310      	movs	r3, #16
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	482e      	ldr	r0, [pc, #184]	; (8001bd0 <MX_GPIO_Init+0x424>)
 8001b16:	f002 f903 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001b1a:	23c8      	movs	r3, #200	; 0xc8
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	482a      	ldr	r0, [pc, #168]	; (8001bdc <MX_GPIO_Init+0x430>)
 8001b32:	f002 f8f5 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b36:	2305      	movs	r3, #5
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b46:	230a      	movs	r3, #10
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4823      	ldr	r0, [pc, #140]	; (8001be0 <MX_GPIO_Init+0x434>)
 8001b52:	f002 f8e5 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b56:	2304      	movs	r3, #4
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	4619      	mov	r1, r3
 8001b68:	481c      	ldr	r0, [pc, #112]	; (8001bdc <MX_GPIO_Init+0x430>)
 8001b6a:	f002 f8d9 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b6e:	2328      	movs	r3, #40	; 0x28
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b7e:	230a      	movs	r3, #10
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4816      	ldr	r0, [pc, #88]	; (8001be4 <MX_GPIO_Init+0x438>)
 8001b8a:	f002 f8c9 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Play_IN_Pin */
  GPIO_InitStruct.Pin = Play_IN_Pin;
 8001b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Play_IN_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4811      	ldr	r0, [pc, #68]	; (8001be8 <MX_GPIO_Init+0x43c>)
 8001ba4:	f002 f8bc 	bl	8003d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : N3_Pin */
  GPIO_InitStruct.Pin = N3_Pin;
 8001ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(N3_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <MX_GPIO_Init+0x43c>)
 8001bc2:	f002 f8ad 	bl	8003d20 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	; 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021c00 	.word	0x40021c00
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	10120000 	.word	0x10120000
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400

08001bec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001bf4:	f009 ff77 	bl	800bae6 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f007 f904 	bl	8008e06 <osDelay>
 8001bfe:	e7fb      	b.n	8001bf8 <StartDefaultTask+0xc>

08001c00 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
  /* Infinite loop */

	PollingInit();
 8001c08:	f7fe ff70 	bl	8000aec <PollingInit>
  for(;;)
  {
	PollingRoutine();
 8001c0c:	f7fe ff7c 	bl	8000b08 <PollingRoutine>
    osDelay(1);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f007 f8f8 	bl	8008e06 <osDelay>
	PollingRoutine();
 8001c16:	e7f9      	b.n	8001c0c <StartUartTask+0xc>

08001c18 <StartMusicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
  /* Infinite loop */
	PollingControlMusicInit();
 8001c20:	f7fe fea2 	bl	8000968 <PollingControlMusicInit>
  for(;;)
  {
	  PollingControlMusic();
 8001c24:	f7fe ff28 	bl	8000a78 <PollingControlMusic>
	  osDelay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f007 f8ec 	bl	8008e06 <osDelay>
	  PollingControlMusic();
 8001c2e:	e7f9      	b.n	8001c24 <StartMusicTask+0xc>

08001c30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c42:	f000 ff13 	bl	8002a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40001000 	.word	0x40001000

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	210f      	movs	r1, #15
 8001c9e:	f06f 0001 	mvn.w	r0, #1
 8001ca2:	f001 fa87 	bl	80031b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <HAL_ADC_MspInit+0xa4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d13c      	bne.n	8001d50 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a20      	ldr	r2, [pc, #128]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cf4:	f043 0320 	orr.w	r3, r3, #32
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001d1e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d22:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	480b      	ldr	r0, [pc, #44]	; (8001d60 <HAL_ADC_MspInit+0xac>)
 8001d34:	f001 fff4 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <HAL_ADC_MspInit+0xb0>)
 8001d4c:	f001 ffe8 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40012200 	.word	0x40012200
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40021400 	.word	0x40021400
 8001d64:	40020000 	.word	0x40020000

08001d68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_CRC_MspInit+0x38>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10b      	bne.n	8001d92 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_CRC_MspInit+0x3c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_CRC_MspInit+0x3c>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_CRC_MspInit+0x3c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023000 	.word	0x40023000
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_DCMI_MspInit+0x160>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	f040 809a 	bne.w	8001f00 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6353      	str	r3, [r2, #52]	; 0x34
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de4:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	6313      	str	r3, [r2, #48]	; 0x30
 8001df0:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e14:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a3c      	ldr	r2, [pc, #240]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2c:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	6313      	str	r3, [r2, #48]	; 0x30
 8001e38:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_DCMI_MspInit+0x164>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e6c:	230d      	movs	r3, #13
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4826      	ldr	r0, [pc, #152]	; (8001f10 <HAL_DCMI_MspInit+0x168>)
 8001e78:	f001 ff52 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e8c:	230d      	movs	r3, #13
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	481f      	ldr	r0, [pc, #124]	; (8001f14 <HAL_DCMI_MspInit+0x16c>)
 8001e98:	f001 ff42 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eae:	230d      	movs	r3, #13
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4817      	ldr	r0, [pc, #92]	; (8001f18 <HAL_DCMI_MspInit+0x170>)
 8001eba:	f001 ff31 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ebe:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4810      	ldr	r0, [pc, #64]	; (8001f1c <HAL_DCMI_MspInit+0x174>)
 8001edc:	f001 ff20 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ee0:	2350      	movs	r3, #80	; 0x50
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ef0:	230d      	movs	r3, #13
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <HAL_DCMI_MspInit+0x178>)
 8001efc:	f001 ff10 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3738      	adds	r7, #56	; 0x38
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	50050000 	.word	0x50050000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021800 	.word	0x40021800
 8001f1c:	40021c00 	.word	0x40021c00
 8001f20:	40020000 	.word	0x40020000

08001f24 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_DMA2D_MspInit+0x44>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d113      	bne.n	8001f5e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_DMA2D_MspInit+0x48>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_DMA2D_MspInit+0x48>)
 8001f3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_DMA2D_MspInit+0x48>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	205a      	movs	r0, #90	; 0x5a
 8001f54:	f001 f92e 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f58:	205a      	movs	r0, #90	; 0x5a
 8001f5a:	f001 f947 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	4002b000 	.word	0x4002b000
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_DMA2D_MspDeInit+0x2c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_DMA2D_MspDeInit+0x30>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_DMA2D_MspDeInit+0x30>)
 8001f88:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001f8e:	205a      	movs	r0, #90	; 0x5a
 8001f90:	f001 f93a 	bl	8003208 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	4002b000 	.word	0x4002b000
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <HAL_I2C_MspInit+0xdc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d129      	bne.n	800201a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a2e      	ldr	r2, [pc, #184]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4823      	ldr	r0, [pc, #140]	; (8002088 <HAL_I2C_MspInit+0xe4>)
 8001ffc:	f001 fe90 	bl	8003d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002018:	e02d      	b.n	8002076 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_I2C_MspInit+0xe8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d128      	bne.n	8002076 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 800202a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202e:	6313      	str	r3, [r2, #48]	; 0x30
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800203c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800204e:	2304      	movs	r3, #4
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <HAL_I2C_MspInit+0xec>)
 800205a:	f001 fe61 	bl	8003d20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 8002064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_I2C_MspInit+0xe0>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
}
 8002076:	bf00      	nop
 8002078:	3730      	adds	r7, #48	; 0x30
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005400 	.word	0x40005400
 8002084:	40023800 	.word	0x40023800
 8002088:	40020400 	.word	0x40020400
 800208c:	40005c00 	.word	0x40005c00
 8002090:	40021c00 	.word	0x40021c00

08002094 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_I2C_MspDeInit+0x64>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d110      	bne.n	80020c8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80020b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b6:	4812      	ldr	r0, [pc, #72]	; (8002100 <HAL_I2C_MspDeInit+0x6c>)
 80020b8:	f001 ffdc 	bl	8004074 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80020bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c0:	480f      	ldr	r0, [pc, #60]	; (8002100 <HAL_I2C_MspDeInit+0x6c>)
 80020c2:	f001 ffd7 	bl	8004074 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80020c6:	e013      	b.n	80020f0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <HAL_I2C_MspDeInit+0x70>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10e      	bne.n	80020f0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_I2C_MspDeInit+0x68>)
 80020d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <HAL_I2C_MspDeInit+0x74>)
 80020e2:	f001 ffc7 	bl	8004074 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80020e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ea:	4807      	ldr	r0, [pc, #28]	; (8002108 <HAL_I2C_MspDeInit+0x74>)
 80020ec:	f001 ffc2 	bl	8004074 <HAL_GPIO_DeInit>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40005400 	.word	0x40005400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400
 8002104:	40005c00 	.word	0x40005c00
 8002108:	40021c00 	.word	0x40021c00

0800210c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_LTDC_MspInit+0x174>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 80a3 	bne.w	8002276 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002130:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	4a53      	ldr	r2, [pc, #332]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800213a:	6453      	str	r3, [r2, #68]	; 0x44
 800213c:	4b51      	ldr	r3, [pc, #324]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002148:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6313      	str	r3, [r2, #48]	; 0x30
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b45      	ldr	r3, [pc, #276]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002178:	4b42      	ldr	r3, [pc, #264]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a41      	ldr	r2, [pc, #260]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002190:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 8002196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4a35      	ldr	r2, [pc, #212]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_LTDC_MspInit+0x178>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80021c0:	2310      	movs	r3, #16
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d0:	230e      	movs	r3, #14
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	4619      	mov	r1, r3
 80021da:	482b      	ldr	r0, [pc, #172]	; (8002288 <HAL_LTDC_MspInit+0x17c>)
 80021dc:	f001 fda0 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80021e0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f2:	230e      	movs	r3, #14
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	4823      	ldr	r0, [pc, #140]	; (800228c <HAL_LTDC_MspInit+0x180>)
 80021fe:	f001 fd8f 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002202:	23f7      	movs	r3, #247	; 0xf7
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002212:	230e      	movs	r3, #14
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	481c      	ldr	r0, [pc, #112]	; (8002290 <HAL_LTDC_MspInit+0x184>)
 800221e:	f001 fd7f 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002234:	2309      	movs	r3, #9
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	4815      	ldr	r0, [pc, #84]	; (8002294 <HAL_LTDC_MspInit+0x188>)
 8002240:	f001 fd6e 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002244:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002256:	230e      	movs	r3, #14
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	4619      	mov	r1, r3
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <HAL_LTDC_MspInit+0x18c>)
 8002262:	f001 fd5d 	bl	8003d20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2058      	movs	r0, #88	; 0x58
 800226c:	f000 ffa2 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002270:	2058      	movs	r0, #88	; 0x58
 8002272:	f000 ffbb 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3738      	adds	r7, #56	; 0x38
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40016800 	.word	0x40016800
 8002284:	40023800 	.word	0x40023800
 8002288:	40021000 	.word	0x40021000
 800228c:	40022400 	.word	0x40022400
 8002290:	40022800 	.word	0x40022800
 8002294:	40021800 	.word	0x40021800
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <HAL_QSPI_MspInit+0x10c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d170      	bne.n	80023a0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6393      	str	r3, [r2, #56]	; 0x38
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a34      	ldr	r2, [pc, #208]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a2e      	ldr	r2, [pc, #184]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a28      	ldr	r2, [pc, #160]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_QSPI_MspInit+0x110>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800231e:	2304      	movs	r3, #4
 8002320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800232e:	2309      	movs	r3, #9
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	4619      	mov	r1, r3
 8002338:	481d      	ldr	r0, [pc, #116]	; (80023b0 <HAL_QSPI_MspInit+0x114>)
 800233a:	f001 fcf1 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800233e:	2340      	movs	r3, #64	; 0x40
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800234e:	230a      	movs	r3, #10
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4816      	ldr	r0, [pc, #88]	; (80023b4 <HAL_QSPI_MspInit+0x118>)
 800235a:	f001 fce1 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800235e:	2304      	movs	r3, #4
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800236e:	2309      	movs	r3, #9
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	480e      	ldr	r0, [pc, #56]	; (80023b4 <HAL_QSPI_MspInit+0x118>)
 800237a:	f001 fcd1 	bl	8003d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800237e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002390:	2309      	movs	r3, #9
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4807      	ldr	r0, [pc, #28]	; (80023b8 <HAL_QSPI_MspInit+0x11c>)
 800239c:	f001 fcc0 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	; 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	a0001000 	.word	0xa0001000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020c00 	.word	0x40020c00

080023bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_RTC_MspInit+0x2c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d105      	bne.n	80023da <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RTC_MspInit+0x30>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_RTC_MspInit+0x30>)
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40002800 	.word	0x40002800
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002410:	d127      	bne.n	8002462 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_SPDIFRX_MspInit+0x7c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002452:	2308      	movs	r3, #8
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <HAL_SPDIFRX_MspInit+0x80>)
 800245e:	f001 fc5f 	bl	8003d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40020c00 	.word	0x40020c00

08002474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_UART_MspInit+0x8c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12f      	bne.n	80024f6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_UART_MspInit+0x90>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_UART_MspInit+0x90>)
 800249c:	f043 0320 	orr.w	r3, r3, #32
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_UART_MspInit+0x90>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80024c6:	23c0      	movs	r3, #192	; 0xc0
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024d6:	2308      	movs	r3, #8
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	4809      	ldr	r0, [pc, #36]	; (8002508 <HAL_UART_MspInit+0x94>)
 80024e2:	f001 fc1d 	bl	8003d20 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2047      	movs	r0, #71	; 0x47
 80024ec:	f000 fe62 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024f0:	2047      	movs	r0, #71	; 0x47
 80024f2:	f000 fe7b 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40011400 	.word	0x40011400
 8002504:	40023800 	.word	0x40023800
 8002508:	40020800 	.word	0x40020800

0800250c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_FMC_MspInit+0x100>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d16d      	bne.n	8002604 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_FMC_MspInit+0x100>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800252e:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_FMC_MspInit+0x104>)
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	4a37      	ldr	r2, [pc, #220]	; (8002610 <HAL_FMC_MspInit+0x104>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6393      	str	r3, [r2, #56]	; 0x38
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_FMC_MspInit+0x104>)
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002546:	f64f 7383 	movw	r3, #65411	; 0xff83
 800254a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002558:	230c      	movs	r3, #12
 800255a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	482c      	ldr	r0, [pc, #176]	; (8002614 <HAL_FMC_MspInit+0x108>)
 8002562:	f001 fbdd 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002566:	f248 1333 	movw	r3, #33075	; 0x8133
 800256a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002578:	230c      	movs	r3, #12
 800257a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4825      	ldr	r0, [pc, #148]	; (8002618 <HAL_FMC_MspInit+0x10c>)
 8002582:	f001 fbcd 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002586:	f24c 7303 	movw	r3, #50947	; 0xc703
 800258a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002598:	230c      	movs	r3, #12
 800259a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	481e      	ldr	r0, [pc, #120]	; (800261c <HAL_FMC_MspInit+0x110>)
 80025a2:	f001 fbbd 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80025a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025aa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025b8:	230c      	movs	r3, #12
 80025ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4817      	ldr	r0, [pc, #92]	; (8002620 <HAL_FMC_MspInit+0x114>)
 80025c2:	f001 fbad 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80025c6:	2328      	movs	r3, #40	; 0x28
 80025c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025d6:	230c      	movs	r3, #12
 80025d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4811      	ldr	r0, [pc, #68]	; (8002624 <HAL_FMC_MspInit+0x118>)
 80025e0:	f001 fb9e 	bl	8003d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80025e4:	2308      	movs	r3, #8
 80025e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025f4:	230c      	movs	r3, #12
 80025f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	480a      	ldr	r0, [pc, #40]	; (8002628 <HAL_FMC_MspInit+0x11c>)
 80025fe:	f001 fb8f 	bl	8003d20 <HAL_GPIO_Init>
 8002602:	e000      	b.n	8002606 <HAL_FMC_MspInit+0xfa>
    return;
 8002604:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000038c 	.word	0x2000038c
 8002610:	40023800 	.word	0x40023800
 8002614:	40021000 	.word	0x40021000
 8002618:	40021800 	.word	0x40021800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021400 	.word	0x40021400
 8002624:	40021c00 	.word	0x40021c00
 8002628:	40020800 	.word	0x40020800

0800262c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002634:	f7ff ff6a 	bl	800250c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_SAI_MspInit+0xbc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d124      	bne.n	800269c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10b      	bne.n	8002672 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 8002660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002672:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 800267a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800267c:	23f0      	movs	r3, #240	; 0xf0
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800268c:	230a      	movs	r3, #10
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	481c      	ldr	r0, [pc, #112]	; (8002708 <HAL_SAI_MspInit+0xc8>)
 8002698:	f001 fb42 	bl	8003d20 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_SAI_MspInit+0xcc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d125      	bne.n	80026f2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 80026b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_SAI_MspInit+0xc4>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_SAI_MspInit+0xc0>)
 80026ce:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80026d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026e2:	230a      	movs	r3, #10
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <HAL_SAI_MspInit+0xd0>)
 80026ee:	f001 fb17 	bl	8003d20 <HAL_GPIO_Init>

    }
}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40015c04 	.word	0x40015c04
 8002700:	20000390 	.word	0x20000390
 8002704:	40023800 	.word	0x40023800
 8002708:	40022000 	.word	0x40022000
 800270c:	40015c24 	.word	0x40015c24
 8002710:	40021800 	.word	0x40021800

08002714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	2036      	movs	r0, #54	; 0x36
 800272a:	f000 fd43 	bl	80031b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800272e:	2036      	movs	r0, #54	; 0x36
 8002730:	f000 fd5c 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_InitTick+0xa0>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_InitTick+0xa0>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	6413      	str	r3, [r2, #64]	; 0x40
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_InitTick+0xa0>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800274c:	f107 0210 	add.w	r2, r7, #16
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fc90 	bl	800607c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800275c:	f003 fc66 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8002760:	4603      	mov	r3, r0
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_InitTick+0xa4>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	3b01      	subs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_InitTick+0xa8>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <HAL_InitTick+0xac>)
 8002778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_InitTick+0xa8>)
 800277c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_InitTick+0xa8>)
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_InitTick+0xa8>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_InitTick+0xa8>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_InitTick+0xa8>)
 8002796:	f005 f80b 	bl	80077b0 <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027a0:	4806      	ldr	r0, [pc, #24]	; (80027bc <HAL_InitTick+0xa8>)
 80027a2:	f005 f83b 	bl	800781c <HAL_TIM_Base_Start_IT>
 80027a6:	4603      	mov	r3, r0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3730      	adds	r7, #48	; 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	2000bb0c 	.word	0x2000bb0c
 80027c0:	40001000 	.word	0x40001000

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <HardFault_Handler+0x4>

080027d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <MemManage_Handler+0x4>

080027de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <BusFault_Handler+0x4>

080027e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <UsageFault_Handler+0x4>

080027ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <TIM6_DAC_IRQHandler+0x10>)
 80027fe:	f005 f837 	bl	8007870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000bb0c 	.word	0x2000bb0c

0800280c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <USART6_IRQHandler+0x10>)
 8002812:	f005 fb23 	bl	8007e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000b9c8 	.word	0x2000b9c8

08002820 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <LTDC_IRQHandler+0x10>)
 8002826:	f002 fbc9 	bl	8004fbc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000b85c 	.word	0x2000b85c

08002834 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <DMA2D_IRQHandler+0x10>)
 800283a:	f001 f832 	bl	80038a2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000ba48 	.word	0x2000ba48

08002848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
	return 1;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_kill>:

int _kill(int pid, int sig)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002862:	f023 f80d 	bl	8025880 <__errno>
 8002866:	4602      	mov	r2, r0
 8002868:	2316      	movs	r3, #22
 800286a:	6013      	str	r3, [r2, #0]
	return -1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_exit>:

void _exit (int status)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ffe7 	bl	8002858 <_kill>
	while (1) {}		/* Make sure we hang here */
 800288a:	e7fe      	b.n	800288a <_exit+0x12>

0800288c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e00a      	b.n	80028b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800289e:	f3af 8000 	nop.w
 80028a2:	4601      	mov	r1, r0
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	60ba      	str	r2, [r7, #8]
 80028aa:	b2ca      	uxtb	r2, r1
 80028ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dbf0      	blt.n	800289e <_read+0x12>
	}

return len;
 80028bc:	687b      	ldr	r3, [r7, #4]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e009      	b.n	80028ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	60ba      	str	r2, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	dbf1      	blt.n	80028d8 <_write+0x12>
	}
	return len;
 80028f4:	687b      	ldr	r3, [r7, #4]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_close>:

int _close(int file)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
	return -1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002926:	605a      	str	r2, [r3, #4]
	return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_isatty>:

int _isatty(int file)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	return 1;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
	return 0;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <_sbrk+0x5c>)
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <_sbrk+0x60>)
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <_sbrk+0x64>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <_sbrk+0x68>)
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d207      	bcs.n	80029a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002998:	f022 ff72 	bl	8025880 <__errno>
 800299c:	4602      	mov	r2, r0
 800299e:	230c      	movs	r3, #12
 80029a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	e009      	b.n	80029bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <_sbrk+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <_sbrk+0x64>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <_sbrk+0x64>)
 80029b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20050000 	.word	0x20050000
 80029c8:	00000400 	.word	0x00000400
 80029cc:	20000394 	.word	0x20000394
 80029d0:	2000bb58 	.word	0x2000bb58

080029d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <SystemInit+0x28>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <SystemInit+0x28>)
 80029e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SystemInit+0x28>)
 80029ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ee:	609a      	str	r2, [r3, #8]
#endif
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a06:	e003      	b.n	8002a10 <LoopCopyDataInit>

08002a08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a0e:	3104      	adds	r1, #4

08002a10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a10:	480b      	ldr	r0, [pc, #44]	; (8002a40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a18:	d3f6      	bcc.n	8002a08 <CopyDataInit>
  ldr  r2, =_sbss
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a1c:	e002      	b.n	8002a24 <LoopFillZerobss>

08002a1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a20:	f842 3b04 	str.w	r3, [r2], #4

08002a24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a28:	d3f9      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a2a:	f7ff ffd3 	bl	80029d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2e:	f022 ff3f 	bl	80258b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a32:	f7fe f8f3 	bl	8000c1c <main>
  bx  lr    
 8002a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a3c:	080e054c 	.word	0x080e054c
  ldr  r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a44:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002a48:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002a4c:	2000bb54 	.word	0x2000bb54

08002a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a50:	e7fe      	b.n	8002a50 <ADC_IRQHandler>

08002a52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a56:	2003      	movs	r0, #3
 8002a58:	f000 fba1 	bl	800319e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff fe59 	bl	8002714 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a62:	f7ff f8ff 	bl	8001c64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000034 	.word	0x20000034
 8002a90:	2000bb4c 	.word	0x2000bb4c

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000bb4c 	.word	0x2000bb4c

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_Delay+0x40>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000034 	.word	0x20000034

08002af0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e031      	b.n	8002b6a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff f8d0 	bl	8001cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_ADC_Init+0x84>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f964 	bl	8002e0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5a:	e001      	b.n	8002b60 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	ffffeefd 	.word	0xffffeefd

08002b78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x1c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e12a      	b.n	8002dea <HAL_ADC_ConfigChannel+0x272>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d93a      	bls.n	8002c1a <HAL_ADC_ConfigChannel+0xa2>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bac:	d035      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68d9      	ldr	r1, [r3, #12]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a87      	ldr	r2, [pc, #540]	; (8002df8 <HAL_ADC_ConfigChannel+0x280>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	061a      	lsls	r2, r3, #24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf2:	e035      	b.n	8002c60 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4403      	add	r3, r0
 8002c0c:	3b1e      	subs	r3, #30
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c18:	e022      	b.n	8002c60 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6919      	ldr	r1, [r3, #16]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	2207      	movs	r2, #7
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43da      	mvns	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6919      	ldr	r1, [r3, #16]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4603      	mov	r3, r0
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4403      	add	r3, r0
 8002c56:	409a      	lsls	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d824      	bhi.n	8002cb2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	3b05      	subs	r3, #5
 8002c7a:	221f      	movs	r2, #31
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43da      	mvns	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	400a      	ands	r2, r1
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b05      	subs	r3, #5
 8002ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb0:	e04c      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d824      	bhi.n	8002d04 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b23      	subs	r3, #35	; 0x23
 8002ccc:	221f      	movs	r2, #31
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	400a      	ands	r2, r1
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b23      	subs	r3, #35	; 0x23
 8002cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
 8002d02:	e023      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b41      	subs	r3, #65	; 0x41
 8002d16:	221f      	movs	r2, #31
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	400a      	ands	r2, r1
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b41      	subs	r3, #65	; 0x41
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_ADC_ConfigChannel+0x284>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1f4>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d5e:	d105      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d6a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a22      	ldr	r2, [pc, #136]	; (8002dfc <HAL_ADC_ConfigChannel+0x284>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d109      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x212>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b12      	cmp	r3, #18
 8002d7c:	d105      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_ADC_ConfigChannel+0x284>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d125      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x268>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_ADC_ConfigChannel+0x280>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x22e>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b11      	cmp	r3, #17
 8002da4:	d11c      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <HAL_ADC_ConfigChannel+0x288>)
 8002dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002db0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_ADC_ConfigChannel+0x280>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d111      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_ADC_ConfigChannel+0x28c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_ADC_ConfigChannel+0x290>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9a      	lsrs	r2, r3, #18
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dd2:	e002      	b.n	8002dda <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f9      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	10000012 	.word	0x10000012
 8002dfc:	40012000 	.word	0x40012000
 8002e00:	40012300 	.word	0x40012300
 8002e04:	2000002c 	.word	0x2000002c
 8002e08:	431bde83 	.word	0x431bde83

08002e0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e14:	4b78      	ldr	r3, [pc, #480]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a77      	ldr	r2, [pc, #476]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e1e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e20:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4973      	ldr	r1, [pc, #460]	; (8002ff8 <ADC_Init+0x1ec>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <ADC_Init+0x1f0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	e00f      	b.n	8002f06 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0202 	bic.w	r2, r2, #2
 8002f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6899      	ldr	r1, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	005a      	lsls	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01b      	beq.n	8002f6c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	035a      	lsls	r2, r3, #13
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e007      	b.n	8002f7c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	051a      	lsls	r2, r3, #20
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fbe:	025a      	lsls	r2, r3, #9
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	029a      	lsls	r2, r3, #10
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012300 	.word	0x40012300
 8002ffc:	0f000001 	.word	0x0f000001

08003000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <__NVIC_SetPriorityGrouping+0x40>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	4313      	orrs	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x40>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00
 8003044:	05fa0000 	.word	0x05fa0000

08003048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <__NVIC_GetPriorityGrouping+0x18>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0307 	and.w	r3, r3, #7
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db0b      	blt.n	800308e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4907      	ldr	r1, [pc, #28]	; (800309c <__NVIC_EnableIRQ+0x38>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2001      	movs	r0, #1
 8003086:	fa00 f202 	lsl.w	r2, r0, r2
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db10      	blt.n	80030d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4909      	ldr	r1, [pc, #36]	; (80030e0 <__NVIC_DisableIRQ+0x40>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	3320      	adds	r3, #32
 80030c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	490c      	ldr	r1, [pc, #48]	; (8003130 <__NVIC_SetPriority+0x4c>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	440b      	add	r3, r1
 8003108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800310c:	e00a      	b.n	8003124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <__NVIC_SetPriority+0x50>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3b04      	subs	r3, #4
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	440b      	add	r3, r1
 8003122:	761a      	strb	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b04      	cmp	r3, #4
 8003154:	bf28      	it	cs
 8003156:	2304      	movcs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3304      	adds	r3, #4
 800315e:	2b06      	cmp	r3, #6
 8003160:	d902      	bls.n	8003168 <NVIC_EncodePriority+0x30>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3b03      	subs	r3, #3
 8003166:	e000      	b.n	800316a <NVIC_EncodePriority+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	401a      	ands	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43d9      	mvns	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	4313      	orrs	r3, r2
         );
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	; 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff2a 	bl	8003000 <__NVIC_SetPriorityGrouping>
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c6:	f7ff ff3f 	bl	8003048 <__NVIC_GetPriorityGrouping>
 80031ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	6978      	ldr	r0, [r7, #20]
 80031d2:	f7ff ffb1 	bl	8003138 <NVIC_EncodePriority>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff80 	bl	80030e4 <__NVIC_SetPriority>
}
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff32 	bl	8003064 <__NVIC_EnableIRQ>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff42 	bl	80030a0 <__NVIC_DisableIRQ>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e054      	b.n	80032e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f5b      	ldrb	r3, [r3, #29]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fd8e 	bl	8001d68 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	791b      	ldrb	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_CRC_Init+0xc4>)
 8003260:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0218 	bic.w	r2, r2, #24
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e00c      	b.n	800328e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	461a      	mov	r2, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f834 	bl	80032ec <HAL_CRCEx_Polynomial_Set>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e028      	b.n	80032e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	795b      	ldrb	r3, [r3, #5]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	611a      	str	r2, [r3, #16]
 80032a0:	e004      	b.n	80032ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6912      	ldr	r2, [r2, #16]
 80032aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	04c11db7 	.word	0x04c11db7

080032ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032fc:	231f      	movs	r3, #31
 80032fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003300:	bf00      	nop
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	613a      	str	r2, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_CRCEx_Polynomial_Set+0x34>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b18      	cmp	r3, #24
 8003324:	d846      	bhi.n	80033b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	080033bb 	.word	0x080033bb
 8003330:	080033b5 	.word	0x080033b5
 8003334:	080033b5 	.word	0x080033b5
 8003338:	080033b5 	.word	0x080033b5
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	080033b5 	.word	0x080033b5
 800334c:	080033a9 	.word	0x080033a9
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	080033b5 	.word	0x080033b5
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033b5 	.word	0x080033b5
 800336c:	0800339d 	.word	0x0800339d
 8003370:	080033b5 	.word	0x080033b5
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033b5 	.word	0x080033b5
 800337c:	080033b5 	.word	0x080033b5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033b5 	.word	0x080033b5
 8003388:	080033b5 	.word	0x080033b5
 800338c:	08003391 	.word	0x08003391
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d913      	bls.n	80033be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800339a:	e010      	b.n	80033be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	d90f      	bls.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80033a6:	e00c      	b.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d90b      	bls.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80033b2:	e008      	b.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
      break;
 80033b8:	e006      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80033c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 0118 	bic.w	r1, r3, #24
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e069      	b.n	80034de <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fcc6 	bl	8001da8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_DCMI_Init+0xf0>)
 800343e:	400b      	ands	r3, r1
 8003440:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003456:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003462:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800346e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800347a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003486:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b10      	cmp	r3, #16
 8003496:	d112      	bne.n	80034be <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7f1b      	ldrb	r3, [r3, #28]
 800349c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7f5b      	ldrb	r3, [r3, #29]
 80034a2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80034a4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7f9b      	ldrb	r3, [r3, #30]
 80034aa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80034ac:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7fdb      	ldrb	r3, [r3, #31]
 80034b4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80034ba:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80034bc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 021e 	orr.w	r2, r2, #30
 80034cc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	ffe0f007 	.word	0xffe0f007

080034ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00c      	b.n	8003524 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2205      	movs	r2, #5
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e039      	b.n	80035b6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fce4 	bl	8001f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	f023 0107 	bic.w	r1, r3, #7
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_DMA2D_Init+0x90>)
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d1      	ldr	r1, [r2, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	ffffc000 	.word	0xffffc000

080035c4 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e05f      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_DMA2D_DeInit+0xdc>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d02e      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8c1 	bl	8003778 <HAL_DMA2D_Abort>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d021      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e04a      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d108      	bne.n	8003620 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800360e:	2100      	movs	r1, #0
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8f7 	bl	8003804 <HAL_DMA2D_CLUTLoading_Abort>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e03a      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b20      	cmp	r3, #32
 800362c:	d108      	bne.n	8003640 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800362e:	2101      	movs	r1, #1
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8e7 	bl	8003804 <HAL_DMA2D_CLUTLoading_Abort>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e02a      	b.n	8003696 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2200      	movs	r2, #0
 8003666:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fe fc79 	bl	8001f70 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_DMA2D_Start_IT+0x1c>
 80036bc:	2302      	movs	r3, #2
 80036be:	e020      	b.n	8003702 <HAL_DMA2D_Start_IT+0x5e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa84 	bl	8003be8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80036ee:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af02      	add	r7, sp, #8
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003722:	2302      	movs	r3, #2
 8003724:	e024      	b.n	8003770 <HAL_DMA2D_BlendingStart_IT+0x66>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa4d 	bl	8003be8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800375c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0205 	bic.w	r2, r3, #5
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0204 	orr.w	r2, r2, #4
 8003792:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003794:	f7ff f97e 	bl	8002a94 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800379a:	e017      	b.n	80037cc <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800379c:	f7ff f97a 	bl	8002a94 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037aa:	d90f      	bls.n	80037cc <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2203      	movs	r2, #3
 80037bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e017      	b.n	80037fc <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e0      	bne.n	800379c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80037e8:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0204 	orr.w	r2, r2, #4
 8003824:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d103      	bne.n	8003834 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	331c      	adds	r3, #28
 8003832:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003834:	f7ff f92e 	bl	8002a94 <HAL_GetTick>
 8003838:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800383a:	e017      	b.n	800386c <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800383c:	f7ff f92a 	bl	8002a94 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800384a:	d90f      	bls.n	800386c <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2203      	movs	r2, #3
 800385c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e016      	b.n	800389a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e1      	bne.n	800383c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003886:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d026      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d021      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d026      	beq.n	800396a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d021      	beq.n	800396a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003934:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2220      	movs	r2, #32
 800393c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d026      	beq.n	80039c2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397a:	2b00      	cmp	r3, #0
 800397c:	d021      	beq.n	80039c2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2208      	movs	r2, #8
 8003994:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	f043 0204 	orr.w	r2, r3, #4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2204      	movs	r2, #4
 80039ec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f853 	bl	8003a9a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d024      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01f      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01f      	beq.n	8003a92 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01a      	beq.n	8003a92 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2210      	movs	r2, #16
 8003a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f80e 	bl	8003aae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_DMA2D_ConfigLayer+0x20>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e079      	b.n	8003bd8 <HAL_DMA2D_ConfigLayer+0x114>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	3318      	adds	r3, #24
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	041b      	lsls	r3, r3, #16
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b0e:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b10:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b0a      	cmp	r3, #10
 8003b18:	d003      	beq.n	8003b22 <HAL_DMA2D_ConfigLayer+0x5e>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	d107      	bne.n	8003b32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e005      	b.n	8003b3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d120      	bne.n	8003b86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	ea02 0103 	and.w	r1, r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d003      	beq.n	8003b76 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b09      	cmp	r3, #9
 8003b74:	d127      	bne.n	8003bc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
 8003b84:	e01f      	b.n	8003bc6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	ea02 0103 	and.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b0a      	cmp	r3, #10
 8003bae:	d003      	beq.n	8003bb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d106      	bne.n	8003bc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bc4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	ff03000f 	.word	0xff03000f

08003be8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b08b      	sub	sp, #44	; 0x2c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	041a      	lsls	r2, r3, #16
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c20:	d174      	bne.n	8003d0c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c28:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c30:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c38:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d108      	bne.n	8003c5a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	e053      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d106      	bne.n	8003c70 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e048      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d111      	bne.n	8003c9c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	0cdb      	lsrs	r3, r3, #19
 8003c7c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	0a9b      	lsrs	r3, r3, #10
 8003c82:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	02db      	lsls	r3, r3, #11
 8003c92:	4313      	orrs	r3, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e032      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d117      	bne.n	8003cd4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	0fdb      	lsrs	r3, r3, #31
 8003ca8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	0cdb      	lsrs	r3, r3, #19
 8003cae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	0adb      	lsrs	r3, r3, #11
 8003cb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	03db      	lsls	r3, r3, #15
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	e016      	b.n	8003d02 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	0f1b      	lsrs	r3, r3, #28
 8003cd8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	0d1b      	lsrs	r3, r3, #20
 8003cde:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	0b1b      	lsrs	r3, r3, #12
 8003ce4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	011a      	lsls	r2, r3, #4
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	031b      	lsls	r3, r3, #12
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d0a:	e003      	b.n	8003d14 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	60da      	str	r2, [r3, #12]
}
 8003d14:	bf00      	nop
 8003d16:	372c      	adds	r7, #44	; 0x2c
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e175      	b.n	800402c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8164 	bne.w	8004026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d00b      	beq.n	8003d7e <HAL_GPIO_Init+0x5e>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d007      	beq.n	8003d7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d72:	2b11      	cmp	r3, #17
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b12      	cmp	r3, #18
 8003d7c:	d130      	bne.n	8003de0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	2203      	movs	r2, #3
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db4:	2201      	movs	r2, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 0201 	and.w	r2, r3, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x100>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b12      	cmp	r3, #18
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80be 	beq.w	8004026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	4b65      	ldr	r3, [pc, #404]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	4a64      	ldr	r2, [pc, #400]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb6:	4b62      	ldr	r3, [pc, #392]	; (8004040 <HAL_GPIO_Init+0x320>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ec2:	4a60      	ldr	r2, [pc, #384]	; (8004044 <HAL_GPIO_Init+0x324>)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	3302      	adds	r3, #2
 8003eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	220f      	movs	r2, #15
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_GPIO_Init+0x328>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d037      	beq.n	8003f5e <HAL_GPIO_Init+0x23e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_GPIO_Init+0x32c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_GPIO_Init+0x23a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a55      	ldr	r2, [pc, #340]	; (8004050 <HAL_GPIO_Init+0x330>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d02b      	beq.n	8003f56 <HAL_GPIO_Init+0x236>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a54      	ldr	r2, [pc, #336]	; (8004054 <HAL_GPIO_Init+0x334>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d025      	beq.n	8003f52 <HAL_GPIO_Init+0x232>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a53      	ldr	r2, [pc, #332]	; (8004058 <HAL_GPIO_Init+0x338>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01f      	beq.n	8003f4e <HAL_GPIO_Init+0x22e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_GPIO_Init+0x33c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d019      	beq.n	8003f4a <HAL_GPIO_Init+0x22a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a51      	ldr	r2, [pc, #324]	; (8004060 <HAL_GPIO_Init+0x340>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_GPIO_Init+0x226>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a50      	ldr	r2, [pc, #320]	; (8004064 <HAL_GPIO_Init+0x344>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_GPIO_Init+0x222>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4f      	ldr	r2, [pc, #316]	; (8004068 <HAL_GPIO_Init+0x348>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <HAL_GPIO_Init+0x21e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4e      	ldr	r2, [pc, #312]	; (800406c <HAL_GPIO_Init+0x34c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_GPIO_Init+0x21a>
 8003f36:	2309      	movs	r3, #9
 8003f38:	e012      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	e010      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	e00e      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f42:	2307      	movs	r3, #7
 8003f44:	e00c      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f46:	2306      	movs	r3, #6
 8003f48:	e00a      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f4a:	2305      	movs	r3, #5
 8003f4c:	e008      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f4e:	2304      	movs	r3, #4
 8003f50:	e006      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e004      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e002      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_GPIO_Init+0x240>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	f002 0203 	and.w	r2, r2, #3
 8003f66:	0092      	lsls	r2, r2, #2
 8003f68:	4093      	lsls	r3, r2
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f70:	4934      	ldr	r1, [pc, #208]	; (8004044 <HAL_GPIO_Init+0x324>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f7e:	4b3c      	ldr	r3, [pc, #240]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa2:	4a33      	ldr	r2, [pc, #204]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fa8:	4b31      	ldr	r3, [pc, #196]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fcc:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fd2:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_GPIO_Init+0x350>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_GPIO_Init+0x350>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3301      	adds	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	f67f ae86 	bls.w	8003d40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004034:	bf00      	nop
 8004036:	3724      	adds	r7, #36	; 0x24
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40023800 	.word	0x40023800
 8004044:	40013800 	.word	0x40013800
 8004048:	40020000 	.word	0x40020000
 800404c:	40020400 	.word	0x40020400
 8004050:	40020800 	.word	0x40020800
 8004054:	40020c00 	.word	0x40020c00
 8004058:	40021000 	.word	0x40021000
 800405c:	40021400 	.word	0x40021400
 8004060:	40021800 	.word	0x40021800
 8004064:	40021c00 	.word	0x40021c00
 8004068:	40022000 	.word	0x40022000
 800406c:	40022400 	.word	0x40022400
 8004070:	40013c00 	.word	0x40013c00

08004074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e0d9      	b.n	8004244 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004090:	2201      	movs	r2, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	f040 80c9 	bne.w	800423e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80040ac:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_GPIO_DeInit+0x1e4>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a62      	ldr	r2, [pc, #392]	; (800425c <HAL_GPIO_DeInit+0x1e8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d037      	beq.n	8004146 <HAL_GPIO_DeInit+0xd2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a61      	ldr	r2, [pc, #388]	; (8004260 <HAL_GPIO_DeInit+0x1ec>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <HAL_GPIO_DeInit+0xce>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a60      	ldr	r2, [pc, #384]	; (8004264 <HAL_GPIO_DeInit+0x1f0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02b      	beq.n	800413e <HAL_GPIO_DeInit+0xca>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a5f      	ldr	r2, [pc, #380]	; (8004268 <HAL_GPIO_DeInit+0x1f4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d025      	beq.n	800413a <HAL_GPIO_DeInit+0xc6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_GPIO_DeInit+0x1f8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01f      	beq.n	8004136 <HAL_GPIO_DeInit+0xc2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a5d      	ldr	r2, [pc, #372]	; (8004270 <HAL_GPIO_DeInit+0x1fc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d019      	beq.n	8004132 <HAL_GPIO_DeInit+0xbe>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a5c      	ldr	r2, [pc, #368]	; (8004274 <HAL_GPIO_DeInit+0x200>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_GPIO_DeInit+0xba>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a5b      	ldr	r2, [pc, #364]	; (8004278 <HAL_GPIO_DeInit+0x204>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00d      	beq.n	800412a <HAL_GPIO_DeInit+0xb6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a5a      	ldr	r2, [pc, #360]	; (800427c <HAL_GPIO_DeInit+0x208>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <HAL_GPIO_DeInit+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a59      	ldr	r2, [pc, #356]	; (8004280 <HAL_GPIO_DeInit+0x20c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_GPIO_DeInit+0xae>
 800411e:	2309      	movs	r3, #9
 8004120:	e012      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004122:	230a      	movs	r3, #10
 8004124:	e010      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004126:	2308      	movs	r3, #8
 8004128:	e00e      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800412a:	2307      	movs	r3, #7
 800412c:	e00c      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800412e:	2306      	movs	r3, #6
 8004130:	e00a      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004132:	2305      	movs	r3, #5
 8004134:	e008      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004136:	2304      	movs	r3, #4
 8004138:	e006      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800413a:	2303      	movs	r3, #3
 800413c:	e004      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800413e:	2302      	movs	r3, #2
 8004140:	e002      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004146:	2300      	movs	r3, #0
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	f002 0203 	and.w	r2, r2, #3
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	4093      	lsls	r3, r2
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d132      	bne.n	80041be <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004158:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	4948      	ldr	r1, [pc, #288]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004162:	4013      	ands	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	43db      	mvns	r3, r3
 800416e:	4945      	ldr	r1, [pc, #276]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004170:	4013      	ands	r3, r2
 8004172:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	4941      	ldr	r1, [pc, #260]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 800417e:	4013      	ands	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	493e      	ldr	r1, [pc, #248]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 800418c:	4013      	ands	r3, r2
 800418e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	220f      	movs	r2, #15
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80041a0:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <HAL_GPIO_DeInit+0x1e4>)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	3302      	adds	r3, #2
 80041a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	4829      	ldr	r0, [pc, #164]	; (8004258 <HAL_GPIO_DeInit+0x1e4>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	400a      	ands	r2, r1
 80041b8:	3302      	adds	r3, #2
 80041ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2103      	movs	r1, #3
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	220f      	movs	r2, #15
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	08d2      	lsrs	r2, r2, #3
 80041f4:	4019      	ands	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3208      	adds	r2, #8
 80041fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2103      	movs	r1, #3
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	2101      	movs	r1, #1
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	401a      	ands	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2103      	movs	r1, #3
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	401a      	ands	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	3301      	adds	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	f67f af22 	bls.w	8004090 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40013800 	.word	0x40013800
 800425c:	40020000 	.word	0x40020000
 8004260:	40020400 	.word	0x40020400
 8004264:	40020800 	.word	0x40020800
 8004268:	40020c00 	.word	0x40020c00
 800426c:	40021000 	.word	0x40021000
 8004270:	40021400 	.word	0x40021400
 8004274:	40021800 	.word	0x40021800
 8004278:	40021c00 	.word	0x40021c00
 800427c:	40022000 	.word	0x40022000
 8004280:	40022400 	.word	0x40022400
 8004284:	40013c00 	.word	0x40013c00

08004288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
 8004294:	4613      	mov	r3, r2
 8004296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004298:	787b      	ldrb	r3, [r7, #1]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042a4:	e003      	b.n	80042ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	041a      	lsls	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07f      	b.n	80043ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd fe5e 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800430c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d107      	bne.n	8004336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	e006      	b.n	8004344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d104      	bne.n	8004356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_I2C_Init+0x11c>)
 8004362:	430b      	orrs	r3, r1
 8004364:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004374:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	ea42 0103 	orr.w	r1, r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69d9      	ldr	r1, [r3, #28]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	02008000 	.word	0x02008000

080043dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e021      	b.n	8004432 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2224      	movs	r2, #36	; 0x24
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fe44 	bl	8002094 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	4608      	mov	r0, r1
 8004446:	4611      	mov	r1, r2
 8004448:	461a      	mov	r2, r3
 800444a:	4603      	mov	r3, r0
 800444c:	817b      	strh	r3, [r7, #10]
 800444e:	460b      	mov	r3, r1
 8004450:	813b      	strh	r3, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	f040 80f9 	bne.w	8004656 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_I2C_Mem_Write+0x34>
 800446a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0ed      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_I2C_Mem_Write+0x4e>
 8004486:	2302      	movs	r3, #2
 8004488:	e0e6      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004492:	f7fe faff 	bl	8002a94 <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2319      	movs	r3, #25
 800449e:	2201      	movs	r2, #1
 80044a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fad1 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0d1      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2221      	movs	r2, #33	; 0x21
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044dc:	88f8      	ldrh	r0, [r7, #6]
 80044de:	893a      	ldrh	r2, [r7, #8]
 80044e0:	8979      	ldrh	r1, [r7, #10]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	4603      	mov	r3, r0
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f9e1 	bl	80048b4 <I2C_RequestMemoryWrite>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0a9      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2bff      	cmp	r3, #255	; 0xff
 800450c:	d90e      	bls.n	800452c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	22ff      	movs	r2, #255	; 0xff
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	8979      	ldrh	r1, [r7, #10]
 800451c:	2300      	movs	r3, #0
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fbb3 	bl	8004c90 <I2C_TransferConfig>
 800452a:	e00f      	b.n	800454c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453a:	b2da      	uxtb	r2, r3
 800453c:	8979      	ldrh	r1, [r7, #10]
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fba2 	bl	8004c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fabb 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e07b      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d034      	beq.n	8004604 <HAL_I2C_Mem_Write+0x1c8>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d130      	bne.n	8004604 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fa4d 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e04d      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2bff      	cmp	r3, #255	; 0xff
 80045c4:	d90e      	bls.n	80045e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	22ff      	movs	r2, #255	; 0xff
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	8979      	ldrh	r1, [r7, #10]
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fb57 	bl	8004c90 <I2C_TransferConfig>
 80045e2:	e00f      	b.n	8004604 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fb46 	bl	8004c90 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d19e      	bne.n	800454c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fa9a 	bl	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e01a      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2220      	movs	r2, #32
 8004628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_I2C_Mem_Write+0x224>)
 8004636:	400b      	ands	r3, r1
 8004638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	fe00e800 	.word	0xfe00e800

08004664 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	461a      	mov	r2, r3
 8004672:	4603      	mov	r3, r0
 8004674:	817b      	strh	r3, [r7, #10]
 8004676:	460b      	mov	r3, r1
 8004678:	813b      	strh	r3, [r7, #8]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b20      	cmp	r3, #32
 8004688:	f040 80fd 	bne.w	8004886 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_I2C_Mem_Read+0x34>
 8004692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0f1      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_Mem_Read+0x4e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0ea      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ba:	f7fe f9eb 	bl	8002a94 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2319      	movs	r3, #25
 80046c6:	2201      	movs	r2, #1
 80046c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f9bd 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0d5      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2222      	movs	r2, #34	; 0x22
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004704:	88f8      	ldrh	r0, [r7, #6]
 8004706:	893a      	ldrh	r2, [r7, #8]
 8004708:	8979      	ldrh	r1, [r7, #10]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	4603      	mov	r3, r0
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f921 	bl	800495c <I2C_RequestMemoryRead>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0ad      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2bff      	cmp	r3, #255	; 0xff
 8004734:	d90e      	bls.n	8004754 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	b2da      	uxtb	r2, r3
 8004742:	8979      	ldrh	r1, [r7, #10]
 8004744:	4b52      	ldr	r3, [pc, #328]	; (8004890 <HAL_I2C_Mem_Read+0x22c>)
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fa9f 	bl	8004c90 <I2C_TransferConfig>
 8004752:	e00f      	b.n	8004774 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004762:	b2da      	uxtb	r2, r3
 8004764:	8979      	ldrh	r1, [r7, #10]
 8004766:	4b4a      	ldr	r3, [pc, #296]	; (8004890 <HAL_I2C_Mem_Read+0x22c>)
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa8e 	bl	8004c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2200      	movs	r2, #0
 800477c:	2104      	movs	r1, #4
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f964 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07c      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d034      	beq.n	8004834 <HAL_I2C_Mem_Read+0x1d0>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d130      	bne.n	8004834 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	2200      	movs	r2, #0
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f935 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e04d      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2bff      	cmp	r3, #255	; 0xff
 80047f4:	d90e      	bls.n	8004814 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	22ff      	movs	r2, #255	; 0xff
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	b2da      	uxtb	r2, r3
 8004802:	8979      	ldrh	r1, [r7, #10]
 8004804:	2300      	movs	r3, #0
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fa3f 	bl	8004c90 <I2C_TransferConfig>
 8004812:	e00f      	b.n	8004834 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	b2da      	uxtb	r2, r3
 8004824:	8979      	ldrh	r1, [r7, #10]
 8004826:	2300      	movs	r3, #0
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fa2e 	bl	8004c90 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d19a      	bne.n	8004774 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f982 	bl	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01a      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2220      	movs	r2, #32
 8004858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_I2C_Mem_Read+0x230>)
 8004866:	400b      	ands	r3, r1
 8004868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	80002400 	.word	0x80002400
 8004894:	fe00e800 	.word	0xfe00e800

08004898 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a6:	b2db      	uxtb	r3, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	4608      	mov	r0, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	817b      	strh	r3, [r7, #10]
 80048c6:	460b      	mov	r3, r1
 80048c8:	813b      	strh	r3, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <I2C_RequestMemoryWrite+0xa4>)
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f9d7 	bl	8004c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	69b9      	ldr	r1, [r7, #24]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f8f0 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e02c      	b.n	8004950 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048fc:	893b      	ldrh	r3, [r7, #8]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
 8004906:	e015      	b.n	8004934 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004908:	893b      	ldrh	r3, [r7, #8]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	b29b      	uxth	r3, r3
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f8d6 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e012      	b.n	8004950 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800492a:	893b      	ldrh	r3, [r7, #8]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2200      	movs	r2, #0
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f884 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	80002000 	.word	0x80002000

0800495c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	8979      	ldrh	r1, [r7, #10]
 800497c:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <I2C_RequestMemoryRead+0xa4>)
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2300      	movs	r3, #0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f984 	bl	8004c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	69b9      	ldr	r1, [r7, #24]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f89d 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e02c      	b.n	80049f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d105      	bne.n	80049ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
 80049ac:	e015      	b.n	80049da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ae:	893b      	ldrh	r3, [r7, #8]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	69b9      	ldr	r1, [r7, #24]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f883 	bl	8004acc <I2C_WaitOnTXISFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e012      	b.n	80049f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049d0:	893b      	ldrh	r3, [r7, #8]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2140      	movs	r1, #64	; 0x40
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f831 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	80002000 	.word	0x80002000

08004a04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d007      	beq.n	8004a40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	619a      	str	r2, [r3, #24]
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5c:	e022      	b.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d01e      	beq.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fe f815 	bl	8002a94 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d113      	bne.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e00f      	b.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d0cd      	beq.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ad8:	e02c      	b.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f870 	bl	8004bc4 <I2C_IsAcknowledgeFailed>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e02a      	b.n	8004b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d01e      	beq.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af6:	f7fd ffcd 	bl	8002a94 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d113      	bne.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e007      	b.n	8004b44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d1cb      	bne.n	8004ada <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b58:	e028      	b.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f830 	bl	8004bc4 <I2C_IsAcknowledgeFailed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e026      	b.n	8004bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fd ff91 	bl	8002a94 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d113      	bne.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e007      	b.n	8004bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d1cf      	bne.n	8004b5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d151      	bne.n	8004c82 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bde:	e022      	b.n	8004c26 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d01e      	beq.n	8004c26 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fd ff54 	bl	8002a94 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_IsAcknowledgeFailed+0x3a>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e02e      	b.n	8004c84 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d1d5      	bne.n	8004be0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2210      	movs	r2, #16
 8004c3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2220      	movs	r2, #32
 8004c42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff fedd 	bl	8004a04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <I2C_IsAcknowledgeFailed+0xc8>)
 8004c56:	400b      	ands	r3, r1
 8004c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	fe00e800 	.word	0xfe00e800

08004c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	0d5b      	lsrs	r3, r3, #21
 8004cac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <I2C_TransferConfig+0x58>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	ea02 0103 	and.w	r1, r2, r3
 8004cba:	897b      	ldrh	r3, [r7, #10]
 8004cbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cc0:	7a7b      	ldrb	r3, [r7, #9]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	03ff63ff 	.word	0x03ff63ff

08004cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d138      	bne.n	8004d74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e032      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	; 0x24
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d139      	bne.n	8004e0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e033      	b.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2224      	movs	r2, #36	; 0x24
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0bf      	b.n	8004fae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fd f962 	bl	800210c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b4a      	ldr	r3, [pc, #296]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004e90:	400b      	ands	r3, r1
 8004e92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6899      	ldr	r1, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68d9      	ldr	r1, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b3e      	ldr	r3, [pc, #248]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68d9      	ldr	r1, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6919      	ldr	r1, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b33      	ldr	r3, [pc, #204]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004eec:	400b      	ands	r3, r1
 8004eee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6919      	ldr	r1, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6959      	ldr	r1, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <HAL_LTDC_Init+0x19c>)
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6959      	ldr	r1, [r3, #20]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0206 	orr.w	r2, r2, #6
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	f000f800 	.word	0xf000f800

08004fbc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d023      	beq.n	8005026 <HAL_LTDC_IRQHandler+0x6a>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01e      	beq.n	8005026 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0204 	bic.w	r2, r2, #4
 8004ff6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2204      	movs	r2, #4
 8005014:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f86f 	bl	8005104 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d023      	beq.n	8005078 <HAL_LTDC_IRQHandler+0xbc>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01e      	beq.n	8005078 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0202 	bic.w	r2, r2, #2
 8005048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005058:	f043 0202 	orr.w	r2, r3, #2
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2204      	movs	r2, #4
 8005066:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f846 	bl	8005104 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01b      	beq.n	80050ba <HAL_LTDC_IRQHandler+0xfe>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d016      	beq.n	80050ba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2201      	movs	r2, #1
 80050a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f010 fbad 	bl	8015814 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01b      	beq.n	80050fc <HAL_LTDC_IRQHandler+0x140>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0208 	bic.w	r2, r2, #8
 80050dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2208      	movs	r2, #8
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f80e 	bl	8005118 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_LTDC_ConfigLayer+0x1a>
 8005142:	2302      	movs	r3, #2
 8005144:	e02c      	b.n	80051a0 <HAL_LTDC_ConfigLayer+0x74>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2134      	movs	r1, #52	; 0x34
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4614      	mov	r4, r2
 800516a:	461d      	mov	r5, r3
 800516c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800516e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f849 	bl	8005218 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bdb0      	pop	{r4, r5, r7, pc}

080051a8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_LTDC_ProgramLineEvent+0x18>
 80051bc:	2302      	movs	r3, #2
 80051be:	e023      	b.n	8005208 <HAL_LTDC_ProgramLineEvent+0x60>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80051e0:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40016800 	.word	0x40016800

08005218 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005234:	4413      	add	r3, r2
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	01db      	lsls	r3, r3, #7
 8005244:	4413      	add	r3, r2
 8005246:	3384      	adds	r3, #132	; 0x84
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	4611      	mov	r1, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	01d2      	lsls	r2, r2, #7
 8005254:	440a      	add	r2, r1
 8005256:	3284      	adds	r2, #132	; 0x84
 8005258:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800525c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526e:	4413      	add	r3, r2
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	01db      	lsls	r3, r3, #7
 800527c:	440b      	add	r3, r1
 800527e:	3384      	adds	r3, #132	; 0x84
 8005280:	4619      	mov	r1, r3
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005296:	4413      	add	r3, r2
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	01db      	lsls	r3, r3, #7
 80052a6:	4413      	add	r3, r2
 80052a8:	3384      	adds	r3, #132	; 0x84
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	4611      	mov	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	01d2      	lsls	r2, r2, #7
 80052b6:	440a      	add	r2, r1
 80052b8:	3284      	adds	r2, #132	; 0x84
 80052ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ce:	4413      	add	r3, r2
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	01db      	lsls	r3, r3, #7
 80052dc:	440b      	add	r3, r1
 80052de:	3384      	adds	r3, #132	; 0x84
 80052e0:	4619      	mov	r1, r3
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	01db      	lsls	r3, r3, #7
 80052f2:	4413      	add	r3, r2
 80052f4:	3384      	adds	r3, #132	; 0x84
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	4611      	mov	r1, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	01d2      	lsls	r2, r2, #7
 8005302:	440a      	add	r2, r1
 8005304:	3284      	adds	r2, #132	; 0x84
 8005306:	f023 0307 	bic.w	r3, r3, #7
 800530a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	4413      	add	r3, r2
 8005318:	3384      	adds	r3, #132	; 0x84
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	01db      	lsls	r3, r3, #7
 8005348:	4413      	add	r3, r2
 800534a:	3384      	adds	r3, #132	; 0x84
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	01db      	lsls	r3, r3, #7
 8005358:	4413      	add	r3, r2
 800535a:	3384      	adds	r3, #132	; 0x84
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005368:	461a      	mov	r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	431a      	orrs	r2, r3
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4619      	mov	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	440b      	add	r3, r1
 800537e:	3384      	adds	r3, #132	; 0x84
 8005380:	4619      	mov	r1, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	01db      	lsls	r3, r3, #7
 8005392:	4413      	add	r3, r2
 8005394:	3384      	adds	r3, #132	; 0x84
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	4611      	mov	r1, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	01d2      	lsls	r2, r2, #7
 80053a2:	440a      	add	r2, r1
 80053a4:	3284      	adds	r2, #132	; 0x84
 80053a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	01db      	lsls	r3, r3, #7
 80053b6:	4413      	add	r3, r2
 80053b8:	3384      	adds	r3, #132	; 0x84
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	01db      	lsls	r3, r3, #7
 80053cc:	4413      	add	r3, r2
 80053ce:	3384      	adds	r3, #132	; 0x84
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	01db      	lsls	r3, r3, #7
 80053dc:	440b      	add	r3, r1
 80053de:	3384      	adds	r3, #132	; 0x84
 80053e0:	4619      	mov	r1, r3
 80053e2:	4b58      	ldr	r3, [pc, #352]	; (8005544 <LTDC_SetConfig+0x32c>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	6809      	ldr	r1, [r1, #0]
 80053f4:	4608      	mov	r0, r1
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	01c9      	lsls	r1, r1, #7
 80053fa:	4401      	add	r1, r0
 80053fc:	3184      	adds	r1, #132	; 0x84
 80053fe:	4313      	orrs	r3, r2
 8005400:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	01db      	lsls	r3, r3, #7
 800540c:	4413      	add	r3, r2
 800540e:	3384      	adds	r3, #132	; 0x84
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	01db      	lsls	r3, r3, #7
 800541c:	4413      	add	r3, r2
 800541e:	3384      	adds	r3, #132	; 0x84
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	01db      	lsls	r3, r3, #7
 8005430:	4413      	add	r3, r2
 8005432:	3384      	adds	r3, #132	; 0x84
 8005434:	461a      	mov	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005444:	2304      	movs	r3, #4
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e01b      	b.n	8005482 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d102      	bne.n	8005458 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005452:	2303      	movs	r3, #3
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	e014      	b.n	8005482 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d00b      	beq.n	8005478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005464:	2b02      	cmp	r3, #2
 8005466:	d007      	beq.n	8005478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800546c:	2b03      	cmp	r3, #3
 800546e:	d003      	beq.n	8005478 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005474:	2b07      	cmp	r3, #7
 8005476:	d102      	bne.n	800547e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005478:	2302      	movs	r3, #2
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	e001      	b.n	8005482 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	01db      	lsls	r3, r3, #7
 800548c:	4413      	add	r3, r2
 800548e:	3384      	adds	r3, #132	; 0x84
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	4611      	mov	r1, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	01d2      	lsls	r2, r2, #7
 800549c:	440a      	add	r2, r1
 800549e:	3284      	adds	r2, #132	; 0x84
 80054a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	041a      	lsls	r2, r3, #16
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1acb      	subs	r3, r1, r3
 80054bc:	69f9      	ldr	r1, [r7, #28]
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	3303      	adds	r3, #3
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	6809      	ldr	r1, [r1, #0]
 80054c8:	4608      	mov	r0, r1
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	01c9      	lsls	r1, r1, #7
 80054ce:	4401      	add	r1, r0
 80054d0:	3184      	adds	r1, #132	; 0x84
 80054d2:	4313      	orrs	r3, r2
 80054d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	4413      	add	r3, r2
 80054e2:	3384      	adds	r3, #132	; 0x84
 80054e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	01db      	lsls	r3, r3, #7
 80054f0:	440b      	add	r3, r1
 80054f2:	3384      	adds	r3, #132	; 0x84
 80054f4:	4619      	mov	r1, r3
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <LTDC_SetConfig+0x330>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	01db      	lsls	r3, r3, #7
 8005506:	4413      	add	r3, r2
 8005508:	3384      	adds	r3, #132	; 0x84
 800550a:	461a      	mov	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	01db      	lsls	r3, r3, #7
 800551c:	4413      	add	r3, r2
 800551e:	3384      	adds	r3, #132	; 0x84
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	4611      	mov	r1, r2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	01d2      	lsls	r2, r2, #7
 800552c:	440a      	add	r2, r1
 800552e:	3284      	adds	r2, #132	; 0x84
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	3724      	adds	r7, #36	; 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	fffff8f8 	.word	0xfffff8f8
 8005548:	fffff800 	.word	0xfffff800

0800554c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40007000 	.word	0x40007000

0800556c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005576:	4b23      	ldr	r3, [pc, #140]	; (8005604 <HAL_PWREx_EnableOverDrive+0x98>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	4a22      	ldr	r2, [pc, #136]	; (8005604 <HAL_PWREx_EnableOverDrive+0x98>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005580:	6413      	str	r3, [r2, #64]	; 0x40
 8005582:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_PWREx_EnableOverDrive+0x98>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800558e:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005598:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800559a:	f7fd fa7b 	bl	8002a94 <HAL_GetTick>
 800559e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055a0:	e009      	b.n	80055b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055a2:	f7fd fa77 	bl	8002a94 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055b0:	d901      	bls.n	80055b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e022      	b.n	80055fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c2:	d1ee      	bne.n	80055a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055c4:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d0:	f7fd fa60 	bl	8002a94 <HAL_GetTick>
 80055d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055d6:	e009      	b.n	80055ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055d8:	f7fd fa5c 	bl	8002a94 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055e6:	d901      	bls.n	80055ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e007      	b.n	80055fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f8:	d1ee      	bne.n	80055d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40023800 	.word	0x40023800
 8005608:	40007000 	.word	0x40007000

0800560c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005614:	f7fd fa3e 	bl	8002a94 <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e067      	b.n	80056f4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fc fe2f 	bl	800229c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800563e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f85e 	bl	8005704 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	2120      	movs	r1, #32
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f856 	bl	8005720 <QSPI_WaitFlagStateUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d135      	bne.n	80056ea <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <HAL_QSPI_Init+0xf0>)
 8005686:	4013      	ands	r3, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6852      	ldr	r2, [r2, #4]
 800568c:	0611      	lsls	r1, r2, #24
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68d2      	ldr	r2, [r2, #12]
 8005692:	4311      	orrs	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	69d2      	ldr	r2, [r2, #28]
 8005698:	4311      	orrs	r1, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6a12      	ldr	r2, [r2, #32]
 800569e:	4311      	orrs	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <HAL_QSPI_Init+0xf4>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6912      	ldr	r2, [r2, #16]
 80056b6:	0411      	lsls	r1, r2, #16
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6952      	ldr	r2, [r2, #20]
 80056bc:	4311      	orrs	r1, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6992      	ldr	r2, [r2, #24]
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80056f2:	7afb      	ldrb	r3, [r7, #11]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	00ffff2f 	.word	0x00ffff2f
 8005700:	ffe0f8fe 	.word	0xffe0f8fe

08005704 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005730:	e01a      	b.n	8005768 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d016      	beq.n	8005768 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fd f9ab 	bl	8002a94 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2204      	movs	r2, #4
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575c:	f043 0201 	orr.w	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e00e      	b.n	8005786 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d1d6      	bne.n	8005732 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005798:	2300      	movs	r3, #0
 800579a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e291      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8087 	beq.w	80058c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057b4:	4b96      	ldr	r3, [pc, #600]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d00c      	beq.n	80057da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057c0:	4b93      	ldr	r3, [pc, #588]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d112      	bne.n	80057f2 <HAL_RCC_OscConfig+0x62>
 80057cc:	4b90      	ldr	r3, [pc, #576]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d10b      	bne.n	80057f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057da:	4b8d      	ldr	r3, [pc, #564]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d06c      	beq.n	80058c0 <HAL_RCC_OscConfig+0x130>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d168      	bne.n	80058c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e26b      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0x7a>
 80057fc:	4b84      	ldr	r3, [pc, #528]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a83      	ldr	r2, [pc, #524]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e02e      	b.n	8005868 <HAL_RCC_OscConfig+0xd8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0x9c>
 8005812:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a7e      	ldr	r2, [pc, #504]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b7c      	ldr	r3, [pc, #496]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7b      	ldr	r2, [pc, #492]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e01d      	b.n	8005868 <HAL_RCC_OscConfig+0xd8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005834:	d10c      	bne.n	8005850 <HAL_RCC_OscConfig+0xc0>
 8005836:	4b76      	ldr	r3, [pc, #472]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a75      	ldr	r2, [pc, #468]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800583c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4b73      	ldr	r3, [pc, #460]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a72      	ldr	r2, [pc, #456]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00b      	b.n	8005868 <HAL_RCC_OscConfig+0xd8>
 8005850:	4b6f      	ldr	r3, [pc, #444]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a6e      	ldr	r2, [pc, #440]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b6c      	ldr	r3, [pc, #432]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a6b      	ldr	r2, [pc, #428]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fd f910 	bl	8002a94 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fd f90c 	bl	8002a94 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e21f      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588a:	4b61      	ldr	r3, [pc, #388]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0xe8>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd f8fc 	bl	8002a94 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd f8f8 	bl	8002a94 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e20b      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b2:	4b57      	ldr	r3, [pc, #348]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x110>
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d069      	beq.n	80059a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ce:	4b50      	ldr	r3, [pc, #320]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058da:	4b4d      	ldr	r3, [pc, #308]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d11c      	bne.n	8005920 <HAL_RCC_OscConfig+0x190>
 80058e6:	4b4a      	ldr	r3, [pc, #296]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d116      	bne.n	8005920 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f2:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <HAL_RCC_OscConfig+0x17a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d001      	beq.n	800590a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e1df      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590a:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	493d      	ldr	r1, [pc, #244]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591e:	e040      	b.n	80059a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d023      	beq.n	8005970 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005928:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a38      	ldr	r2, [pc, #224]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fd f8ae 	bl	8002a94 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593c:	f7fd f8aa 	bl	8002a94 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e1bd      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594e:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595a:	4b2d      	ldr	r3, [pc, #180]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4929      	ldr	r1, [pc, #164]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
 800596e:	e018      	b.n	80059a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005970:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd f88a 	bl	8002a94 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005984:	f7fd f886 	bl	8002a94 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e199      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d038      	beq.n	8005a20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d019      	beq.n	80059ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059b6:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fd f867 	bl	8002a94 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ca:	f7fd f863 	bl	8002a94 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e176      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x23a>
 80059e8:	e01a      	b.n	8005a20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <HAL_RCC_OscConfig+0x280>)
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f6:	f7fd f84d 	bl	8002a94 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fe:	f7fd f849 	bl	8002a94 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d903      	bls.n	8005a14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e15c      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
 8005a10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a14:	4b91      	ldr	r3, [pc, #580]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ee      	bne.n	80059fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80a4 	beq.w	8005b76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a2e:	4b8b      	ldr	r3, [pc, #556]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a3a:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	4a87      	ldr	r2, [pc, #540]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a44:	6413      	str	r3, [r2, #64]	; 0x40
 8005a46:	4b85      	ldr	r3, [pc, #532]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a52:	2301      	movs	r3, #1
 8005a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a56:	4b82      	ldr	r3, [pc, #520]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d118      	bne.n	8005a94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a62:	4b7f      	ldr	r3, [pc, #508]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a7e      	ldr	r2, [pc, #504]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd f811 	bl	8002a94 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a76:	f7fd f80d 	bl	8002a94 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b64      	cmp	r3, #100	; 0x64
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e120      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a88:	4b75      	ldr	r3, [pc, #468]	; (8005c60 <HAL_RCC_OscConfig+0x4d0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCC_OscConfig+0x31a>
 8005a9c:	4b6f      	ldr	r3, [pc, #444]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a6e      	ldr	r2, [pc, #440]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa8:	e02d      	b.n	8005b06 <HAL_RCC_OscConfig+0x376>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0x33c>
 8005ab2:	4b6a      	ldr	r3, [pc, #424]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4a69      	ldr	r2, [pc, #420]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70
 8005abe:	4b67      	ldr	r3, [pc, #412]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4a66      	ldr	r2, [pc, #408]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aca:	e01c      	b.n	8005b06 <HAL_RCC_OscConfig+0x376>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	d10c      	bne.n	8005aee <HAL_RCC_OscConfig+0x35e>
 8005ad4:	4b61      	ldr	r3, [pc, #388]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	4a60      	ldr	r2, [pc, #384]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ada:	f043 0304 	orr.w	r3, r3, #4
 8005ade:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae0:	4b5e      	ldr	r3, [pc, #376]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	4a5d      	ldr	r2, [pc, #372]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	6713      	str	r3, [r2, #112]	; 0x70
 8005aec:	e00b      	b.n	8005b06 <HAL_RCC_OscConfig+0x376>
 8005aee:	4b5b      	ldr	r3, [pc, #364]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a5a      	ldr	r2, [pc, #360]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
 8005afa:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	4a57      	ldr	r2, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b00:	f023 0304 	bic.w	r3, r3, #4
 8005b04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d015      	beq.n	8005b3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fc ffc1 	bl	8002a94 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fc ffbd 	bl	8002a94 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e0ce      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b2c:	4b4b      	ldr	r3, [pc, #300]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0ee      	beq.n	8005b16 <HAL_RCC_OscConfig+0x386>
 8005b38:	e014      	b.n	8005b64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fc ffab 	bl	8002a94 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fc ffa7 	bl	8002a94 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e0b8      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b58:	4b40      	ldr	r3, [pc, #256]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1ee      	bne.n	8005b42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6a:	4b3c      	ldr	r3, [pc, #240]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80a4 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b80:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 030c 	and.w	r3, r3, #12
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d06b      	beq.n	8005c64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d149      	bne.n	8005c28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b94:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a30      	ldr	r2, [pc, #192]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fc ff78 	bl	8002a94 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fc ff74 	bl	8002a94 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e087      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bba:	4b28      	ldr	r3, [pc, #160]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	3b01      	subs	r3, #1
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	061b      	lsls	r3, r3, #24
 8005bea:	4313      	orrs	r3, r2
 8005bec:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bf2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fc ff48 	bl	8002a94 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fc ff44 	bl	8002a94 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e057      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f0      	beq.n	8005c08 <HAL_RCC_OscConfig+0x478>
 8005c26:	e04f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fc ff2e 	bl	8002a94 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fc ff2a 	bl	8002a94 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e03d      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c4e:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_RCC_OscConfig+0x4cc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x4ac>
 8005c5a:	e035      	b.n	8005cc8 <HAL_RCC_OscConfig+0x538>
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <HAL_RCC_OscConfig+0x544>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d028      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d121      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d11a      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c94:	4013      	ands	r3, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d111      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	3b01      	subs	r3, #1
 8005cae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40023800 	.word	0x40023800

08005cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0d0      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b6a      	ldr	r3, [pc, #424]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d910      	bls.n	8005d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b67      	ldr	r3, [pc, #412]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 020f 	bic.w	r2, r3, #15
 8005d06:	4965      	ldr	r1, [pc, #404]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b63      	ldr	r3, [pc, #396]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0b8      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d38:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d50:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a52      	ldr	r2, [pc, #328]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d5c:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	494d      	ldr	r1, [pc, #308]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d040      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d82:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d115      	bne.n	8005dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07f      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	4b41      	ldr	r3, [pc, #260]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e073      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e06b      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4936      	ldr	r1, [pc, #216]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fc fe62 	bl	8002a94 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fc fe5e 	bl	8002a94 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e053      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d210      	bcs.n	8005e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 020f 	bic.w	r2, r3, #15
 8005e12:	4922      	ldr	r1, [pc, #136]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e032      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e38:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4916      	ldr	r1, [pc, #88]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	490e      	ldr	r1, [pc, #56]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e6a:	f000 f821 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8005e6e:	4601      	mov	r1, r0
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8005e7c:	5cd3      	ldrb	r3, [r2, r3]
 8005e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005e82:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8005e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_RCC_ClockConfig+0x1d4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fc fc42 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40023c00 	.word	0x40023c00
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	08027398 	.word	0x08027398
 8005ea8:	2000002c 	.word	0x2000002c
 8005eac:	20000030 	.word	0x20000030

08005eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec6:	4b50      	ldr	r3, [pc, #320]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d007      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x32>
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d008      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x38>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 808d 	bne.w	8005ff6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b4b      	ldr	r3, [pc, #300]	; (800600c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ede:	60bb      	str	r3, [r7, #8]
      break;
 8005ee0:	e08c      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee2:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ee4:	60bb      	str	r3, [r7, #8]
      break;
 8005ee6:	e089      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee8:	4b47      	ldr	r3, [pc, #284]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ef2:	4b45      	ldr	r3, [pc, #276]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d023      	beq.n	8005f46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b42      	ldr	r3, [pc, #264]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	f04f 0400 	mov.w	r4, #0
 8005f08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	ea03 0501 	and.w	r5, r3, r1
 8005f14:	ea04 0602 	and.w	r6, r4, r2
 8005f18:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f1a:	fb02 f106 	mul.w	r1, r2, r6
 8005f1e:	2200      	movs	r2, #0
 8005f20:	fb02 f205 	mul.w	r2, r2, r5
 8005f24:	440a      	add	r2, r1
 8005f26:	493a      	ldr	r1, [pc, #232]	; (8006010 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f28:	fba5 0101 	umull	r0, r1, r5, r1
 8005f2c:	1853      	adds	r3, r2, r1
 8005f2e:	4619      	mov	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f04f 0400 	mov.w	r4, #0
 8005f36:	461a      	mov	r2, r3
 8005f38:	4623      	mov	r3, r4
 8005f3a:	f7fa f9b9 	bl	80002b0 <__aeabi_uldivmod>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	460c      	mov	r4, r1
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e049      	b.n	8005fda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f46:	4b30      	ldr	r3, [pc, #192]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	f04f 0400 	mov.w	r4, #0
 8005f50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	ea03 0501 	and.w	r5, r3, r1
 8005f5c:	ea04 0602 	and.w	r6, r4, r2
 8005f60:	4629      	mov	r1, r5
 8005f62:	4632      	mov	r2, r6
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	f04f 0400 	mov.w	r4, #0
 8005f6c:	0154      	lsls	r4, r2, #5
 8005f6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f72:	014b      	lsls	r3, r1, #5
 8005f74:	4619      	mov	r1, r3
 8005f76:	4622      	mov	r2, r4
 8005f78:	1b49      	subs	r1, r1, r5
 8005f7a:	eb62 0206 	sbc.w	r2, r2, r6
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	f04f 0400 	mov.w	r4, #0
 8005f86:	0194      	lsls	r4, r2, #6
 8005f88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f8c:	018b      	lsls	r3, r1, #6
 8005f8e:	1a5b      	subs	r3, r3, r1
 8005f90:	eb64 0402 	sbc.w	r4, r4, r2
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	00e2      	lsls	r2, r4, #3
 8005f9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fa2:	00d9      	lsls	r1, r3, #3
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	195b      	adds	r3, r3, r5
 8005faa:	eb44 0406 	adc.w	r4, r4, r6
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	02a2      	lsls	r2, r4, #10
 8005fb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fbc:	0299      	lsls	r1, r3, #10
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f04f 0400 	mov.w	r4, #0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	f7fa f96e 	bl	80002b0 <__aeabi_uldivmod>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	60bb      	str	r3, [r7, #8]
      break;
 8005ff4:	e002      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ff8:	60bb      	str	r3, [r7, #8]
      break;
 8005ffa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	00f42400 	.word	0x00f42400
 8006010:	017d7840 	.word	0x017d7840

08006014 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006018:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_RCC_GetHCLKFreq+0x14>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	2000002c 	.word	0x2000002c

0800602c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006030:	f7ff fff0 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8006034:	4601      	mov	r1, r0
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	0a9b      	lsrs	r3, r3, #10
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4a03      	ldr	r2, [pc, #12]	; (8006050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40023800 	.word	0x40023800
 8006050:	080273a8 	.word	0x080273a8

08006054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006058:	f7ff ffdc 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 800605c:	4601      	mov	r1, r0
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	0b5b      	lsrs	r3, r3, #13
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4a03      	ldr	r2, [pc, #12]	; (8006078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40023800 	.word	0x40023800
 8006078:	080273a8 	.word	0x080273a8

0800607c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	220f      	movs	r2, #15
 800608a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0203 	and.w	r2, r3, #3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80060b0:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <HAL_RCC_GetClockConfig+0x60>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40023800 	.word	0x40023800
 80060dc:	40023c00 	.word	0x40023c00

080060e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d012      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006108:	4b69      	ldr	r3, [pc, #420]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a68      	ldr	r2, [pc, #416]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006112:	6093      	str	r3, [r2, #8]
 8006114:	4b66      	ldr	r3, [pc, #408]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	4964      	ldr	r1, [pc, #400]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d017      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800613a:	4b5d      	ldr	r3, [pc, #372]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006148:	4959      	ldr	r1, [pc, #356]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006158:	d101      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006166:	2301      	movs	r3, #1
 8006168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d017      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006176:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	494a      	ldr	r1, [pc, #296]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006194:	d101      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061b2:	2301      	movs	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 808b 	beq.w	80062da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061c4:	4b3a      	ldr	r3, [pc, #232]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	4a39      	ldr	r2, [pc, #228]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	6413      	str	r3, [r2, #64]	; 0x40
 80061d0:	4b37      	ldr	r3, [pc, #220]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061dc:	4b35      	ldr	r3, [pc, #212]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a34      	ldr	r2, [pc, #208]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e8:	f7fc fc54 	bl	8002a94 <HAL_GetTick>
 80061ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f0:	f7fc fc50 	bl	8002a94 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b64      	cmp	r3, #100	; 0x64
 80061fc:	d901      	bls.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e355      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006202:	4b2c      	ldr	r3, [pc, #176]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800620e:	4b28      	ldr	r3, [pc, #160]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d035      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	429a      	cmp	r2, r3
 800622a:	d02e      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006234:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006236:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006242:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a1a      	ldr	r2, [pc, #104]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006254:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b01      	cmp	r3, #1
 800625e:	d114      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fc fc18 	bl	8002a94 <HAL_GetTick>
 8006264:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006266:	e00a      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fc fc14 	bl	8002a94 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	; 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e317      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800627e:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0ee      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006296:	d111      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006298:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062a4:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062a6:	400b      	ands	r3, r1
 80062a8:	4901      	ldr	r1, [pc, #4]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
 80062ae:	e00b      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40007000 	.word	0x40007000
 80062b8:	0ffffcff 	.word	0x0ffffcff
 80062bc:	4bb0      	ldr	r3, [pc, #704]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4aaf      	ldr	r2, [pc, #700]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062c6:	6093      	str	r3, [r2, #8]
 80062c8:	4bad      	ldr	r3, [pc, #692]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d4:	49aa      	ldr	r1, [pc, #680]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d010      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062e6:	4ba6      	ldr	r3, [pc, #664]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ec:	4aa4      	ldr	r2, [pc, #656]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062f6:	4ba2      	ldr	r3, [pc, #648]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	499f      	ldr	r1, [pc, #636]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006314:	4b9a      	ldr	r3, [pc, #616]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006322:	4997      	ldr	r1, [pc, #604]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006336:	4b92      	ldr	r3, [pc, #584]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006344:	498e      	ldr	r1, [pc, #568]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006358:	4b89      	ldr	r3, [pc, #548]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006366:	4986      	ldr	r1, [pc, #536]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800637a:	4b81      	ldr	r3, [pc, #516]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	497d      	ldr	r1, [pc, #500]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800639c:	4b78      	ldr	r3, [pc, #480]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f023 0203 	bic.w	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	4975      	ldr	r1, [pc, #468]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063be:	4b70      	ldr	r3, [pc, #448]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c4:	f023 020c 	bic.w	r2, r3, #12
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063cc:	496c      	ldr	r1, [pc, #432]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063e0:	4b67      	ldr	r3, [pc, #412]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	4964      	ldr	r1, [pc, #400]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006402:	4b5f      	ldr	r3, [pc, #380]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006408:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	495b      	ldr	r1, [pc, #364]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006424:	4b56      	ldr	r3, [pc, #344]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006432:	4953      	ldr	r1, [pc, #332]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006446:	4b4e      	ldr	r3, [pc, #312]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	494a      	ldr	r1, [pc, #296]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006468:	4b45      	ldr	r3, [pc, #276]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	4942      	ldr	r1, [pc, #264]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800648a:	4b3d      	ldr	r3, [pc, #244]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	4939      	ldr	r1, [pc, #228]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064ac:	4b34      	ldr	r3, [pc, #208]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ba:	4931      	ldr	r1, [pc, #196]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d011      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064ce:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064dc:	4928      	ldr	r1, [pc, #160]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ec:	d101      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064fe:	2301      	movs	r3, #1
 8006500:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800650e:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651c:	4918      	ldr	r1, [pc, #96]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006540:	490f      	ldr	r1, [pc, #60]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d005      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006556:	f040 80d8 	bne.w	800670a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a08      	ldr	r2, [pc, #32]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006566:	f7fc fa95 	bl	8002a94 <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800656c:	e00a      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800656e:	f7fc fa91 	bl	8002a94 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b64      	cmp	r3, #100	; 0x64
 800657a:	d903      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e196      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006580:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006584:	4b6c      	ldr	r3, [pc, #432]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ee      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d021      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11d      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065a4:	4b64      	ldr	r3, [pc, #400]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065b2:	4b61      	ldr	r3, [pc, #388]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b8:	0e1b      	lsrs	r3, r3, #24
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	019a      	lsls	r2, r3, #6
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	071b      	lsls	r3, r3, #28
 80065d8:	4957      	ldr	r1, [pc, #348]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f4:	d00a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02e      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800660a:	d129      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800660c:	4b4a      	ldr	r3, [pc, #296]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800660e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800661a:	4b47      	ldr	r3, [pc, #284]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800661c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006620:	0f1b      	lsrs	r3, r3, #28
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	019a      	lsls	r2, r3, #6
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	061b      	lsls	r3, r3, #24
 800663a:	431a      	orrs	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	071b      	lsls	r3, r3, #28
 8006640:	493d      	ldr	r1, [pc, #244]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006648:	4b3b      	ldr	r3, [pc, #236]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800664a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664e:	f023 021f 	bic.w	r2, r3, #31
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	3b01      	subs	r3, #1
 8006658:	4937      	ldr	r1, [pc, #220]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800666c:	4b32      	ldr	r3, [pc, #200]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800666e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006672:	0e1b      	lsrs	r3, r3, #24
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800667a:	4b2f      	ldr	r3, [pc, #188]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800667c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006680:	0f1b      	lsrs	r3, r3, #28
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	019a      	lsls	r2, r3, #6
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	431a      	orrs	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	071b      	lsls	r3, r3, #28
 80066a0:	4925      	ldr	r1, [pc, #148]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	019a      	lsls	r2, r3, #6
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	061b      	lsls	r3, r3, #24
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	071b      	lsls	r3, r3, #28
 80066d0:	4919      	ldr	r1, [pc, #100]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066d8:	4b17      	ldr	r3, [pc, #92]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e4:	f7fc f9d6 	bl	8002a94 <HAL_GetTick>
 80066e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066ec:	f7fc f9d2 	bl	8002a94 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	; 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0d7      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066fe:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b01      	cmp	r3, #1
 800670e:	f040 80cd 	bne.w	80068ac <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a08      	ldr	r2, [pc, #32]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671e:	f7fc f9b9 	bl	8002a94 <HAL_GetTick>
 8006722:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006726:	f7fc f9b5 	bl	8002a94 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b64      	cmp	r3, #100	; 0x64
 8006732:	d903      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e0ba      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006738:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800673c:	4b5e      	ldr	r3, [pc, #376]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006748:	d0ed      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d009      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006766:	2b00      	cmp	r3, #0
 8006768:	d02e      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d12a      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006772:	4b51      	ldr	r3, [pc, #324]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006780:	4b4d      	ldr	r3, [pc, #308]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	0f1b      	lsrs	r3, r3, #28
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	019a      	lsls	r2, r3, #6
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	061b      	lsls	r3, r3, #24
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	071b      	lsls	r3, r3, #28
 80067a6:	4944      	ldr	r1, [pc, #272]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ae:	4b42      	ldr	r3, [pc, #264]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	3b01      	subs	r3, #1
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	493d      	ldr	r1, [pc, #244]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d022      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067dc:	d11d      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067de:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	0e1b      	lsrs	r3, r3, #24
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	0f1b      	lsrs	r3, r3, #28
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	019a      	lsls	r2, r3, #6
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	431a      	orrs	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	431a      	orrs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	071b      	lsls	r3, r3, #28
 8006812:	4929      	ldr	r1, [pc, #164]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d028      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682c:	0e1b      	lsrs	r3, r3, #24
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006834:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	0c1b      	lsrs	r3, r3, #16
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	019a      	lsls	r2, r3, #6
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	431a      	orrs	r2, r3
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	061b      	lsls	r3, r3, #24
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	071b      	lsls	r3, r3, #28
 800685a:	4917      	ldr	r1, [pc, #92]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4911      	ldr	r1, [pc, #68]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a0e      	ldr	r2, [pc, #56]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800687e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006884:	f7fc f906 	bl	8002a94 <HAL_GetTick>
 8006888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800688a:	e008      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800688c:	f7fc f902 	bl	8002a94 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b64      	cmp	r3, #100	; 0x64
 8006898:	d901      	bls.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e007      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068aa:	d1ef      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800

080068bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068da:	f040 8086 	bne.w	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80068de:	4b8d      	ldr	r3, [pc, #564]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80068e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f4:	d03e      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80068f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068fa:	d073      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d000      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006900:	e074      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006902:	4b84      	ldr	r3, [pc, #528]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d108      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800690e:	4b81      	ldr	r3, [pc, #516]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006916:	4a80      	ldr	r2, [pc, #512]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006918:	fbb2 f3f3 	udiv	r3, r2, r3
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	e007      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006920:	4b7c      	ldr	r3, [pc, #496]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006928:	4a7c      	ldr	r2, [pc, #496]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800692a:	fbb2 f3f3 	udiv	r3, r2, r3
 800692e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006930:	4b78      	ldr	r3, [pc, #480]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006936:	0e1b      	lsrs	r3, r3, #24
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800693e:	4b75      	ldr	r3, [pc, #468]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	fb02 f203 	mul.w	r2, r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006958:	4b6e      	ldr	r3, [pc, #440]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800695a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]
        break;
 8006972:	e03b      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006974:	4b67      	ldr	r3, [pc, #412]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d108      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006980:	4b64      	ldr	r3, [pc, #400]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006988:	4a63      	ldr	r2, [pc, #396]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e007      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006992:	4b60      	ldr	r3, [pc, #384]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699a:	4a60      	ldr	r2, [pc, #384]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80069a2:	4b5c      	ldr	r3, [pc, #368]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a8:	0e1b      	lsrs	r3, r3, #24
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80069b0:	4b58      	ldr	r3, [pc, #352]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b6:	099b      	lsrs	r3, r3, #6
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	fb02 f203 	mul.w	r2, r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80069ca:	4b52      	ldr	r3, [pc, #328]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]
        break;
 80069e2:	e003      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80069e4:	4b4e      	ldr	r3, [pc, #312]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80069e6:	617b      	str	r3, [r7, #20]
        break;
 80069e8:	e000      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80069ea:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f2:	f040 8086 	bne.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80069f6:	4b47      	ldr	r3, [pc, #284]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006a04:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a0c:	d03e      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a12:	d073      	beq.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d000      	beq.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006a18:	e074      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a1a:	4b3e      	ldr	r3, [pc, #248]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d108      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a26:	4b3b      	ldr	r3, [pc, #236]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a2e:	4a3a      	ldr	r2, [pc, #232]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e007      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006a38:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a40:	4a36      	ldr	r2, [pc, #216]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	0e1b      	lsrs	r3, r3, #24
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006a56:	4b2f      	ldr	r3, [pc, #188]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5c:	099b      	lsrs	r3, r3, #6
 8006a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	fb02 f203 	mul.w	r2, r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006a70:	4b28      	ldr	r3, [pc, #160]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]
        break;
 8006a8a:	e03b      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a8c:	4b21      	ldr	r3, [pc, #132]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d108      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a98:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	e007      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab2:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ac8:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ace:	099b      	lsrs	r3, r3, #6
 8006ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	fb02 f203 	mul.w	r2, r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
        break;
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006afe:	617b      	str	r3, [r7, #20]
        break;
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006b02:	bf00      	nop

  return frequency;
 8006b04:	697b      	ldr	r3, [r7, #20]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40023800 	.word	0x40023800
 8006b18:	00f42400 	.word	0x00f42400
 8006b1c:	017d7840 	.word	0x017d7840
 8006b20:	00bb8000 	.word	0x00bb8000

08006b24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e06b      	b.n	8006c0e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7f5b      	ldrb	r3, [r3, #29]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d105      	bne.n	8006b4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fb fc38 	bl	80023bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	22ca      	movs	r2, #202	; 0xca
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2253      	movs	r2, #83	; 0x53
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fb00 	bl	8007168 <RTC_EnterInitMode>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	22ff      	movs	r2, #255	; 0xff
 8006b74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e046      	b.n	8006c0e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6899      	ldr	r1, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b23      	ldr	r3, [pc, #140]	; (8006c18 <HAL_RTC_Init+0xf4>)
 8006b8c:	400b      	ands	r3, r1
 8006b8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6899      	ldr	r1, [r3, #8]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68d2      	ldr	r2, [r2, #12]
 8006bb6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6919      	ldr	r1, [r3, #16]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	041a      	lsls	r2, r3, #16
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bda:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0208 	bic.w	r2, r2, #8
 8006bea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	ff8fffbf 	.word	0xff8fffbf

08006c1c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	7f1b      	ldrb	r3, [r3, #28]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_RTC_SetTime+0x1c>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e0a8      	b.n	8006d8a <HAL_RTC_SetTime+0x16e>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d126      	bne.n	8006c98 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 faac 	bl	80071c0 <RTC_ByteToBcd2>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 faa5 	bl	80071c0 <RTC_ByteToBcd2>
 8006c76:	4603      	mov	r3, r0
 8006c78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	789b      	ldrb	r3, [r3, #2]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fa9d 	bl	80071c0 <RTC_ByteToBcd2>
 8006c86:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006c88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e018      	b.n	8006cca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cb8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006cbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	7b1b      	ldrb	r3, [r3, #12]
 8006cc4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	22ca      	movs	r2, #202	; 0xca
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2253      	movs	r2, #83	; 0x53
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fa44 	bl	8007168 <RTC_EnterInitMode>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	22ff      	movs	r2, #255	; 0xff
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e045      	b.n	8006d8a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_RTC_SetTime+0x178>)
 8006d06:	400b      	ands	r3, r1
 8006d08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6899      	ldr	r1, [r3, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d111      	bne.n	8006d74 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f9e1 	bl	8007118 <HAL_RTC_WaitForSynchro>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2204      	movs	r2, #4
 8006d68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e00a      	b.n	8006d8a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	22ff      	movs	r2, #255	; 0xff
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006d88:	2300      	movs	r3, #0
  }
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd90      	pop	{r4, r7, pc}
 8006d92:	bf00      	nop
 8006d94:	007f7f7f 	.word	0x007f7f7f

08006d98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d98:	b590      	push	{r4, r7, lr}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	7f1b      	ldrb	r3, [r3, #28]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_RTC_SetDate+0x1c>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e092      	b.n	8006eda <HAL_RTC_SetDate+0x142>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10e      	bne.n	8006de4 <HAL_RTC_SetDate+0x4c>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	f023 0310 	bic.w	r3, r3, #16
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	330a      	adds	r3, #10
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d11c      	bne.n	8006e24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	78db      	ldrb	r3, [r3, #3]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f9e6 	bl	80071c0 <RTC_ByteToBcd2>
 8006df4:	4603      	mov	r3, r0
 8006df6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 f9df 	bl	80071c0 <RTC_ByteToBcd2>
 8006e02:	4603      	mov	r3, r0
 8006e04:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006e06:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	789b      	ldrb	r3, [r3, #2]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f9d7 	bl	80071c0 <RTC_ByteToBcd2>
 8006e12:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006e14:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	e00e      	b.n	8006e42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	78db      	ldrb	r3, [r3, #3]
 8006e28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e30:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006e36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	22ca      	movs	r2, #202	; 0xca
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2253      	movs	r2, #83	; 0x53
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f988 	bl	8007168 <RTC_EnterInitMode>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	22ff      	movs	r2, #255	; 0xff
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e031      	b.n	8006eda <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	6979      	ldr	r1, [r7, #20]
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <HAL_RTC_SetDate+0x14c>)
 8006e7e:	400b      	ands	r3, r1
 8006e80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d111      	bne.n	8006ec4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f939 	bl	8007118 <HAL_RTC_WaitForSynchro>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	22ff      	movs	r2, #255	; 0xff
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e00a      	b.n	8006eda <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
  }
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd90      	pop	{r4, r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	00ffff3f 	.word	0x00ffff3f

08006ee8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b089      	sub	sp, #36	; 0x24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	7f1b      	ldrb	r3, [r3, #28]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_RTC_SetAlarm+0x24>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e101      	b.n	8007110 <HAL_RTC_SetAlarm+0x228>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2202      	movs	r2, #2
 8006f16:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d137      	bne.n	8006f8e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f942 	bl	80071c0 <RTC_ByteToBcd2>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 f93b 	bl	80071c0 <RTC_ByteToBcd2>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f4e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	789b      	ldrb	r3, [r3, #2]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f933 	bl	80071c0 <RTC_ByteToBcd2>
 8006f5a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006f5c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	7b1b      	ldrb	r3, [r3, #12]
 8006f64:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006f66:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 f925 	bl	80071c0 <RTC_ByteToBcd2>
 8006f76:	4603      	mov	r3, r0
 8006f78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006f7a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006f82:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	e023      	b.n	8006fd6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006fb4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	7b1b      	ldrb	r3, [r3, #12]
 8006fba:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006fbc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fc4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006fc6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006fcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	22ca      	movs	r2, #202	; 0xca
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2253      	movs	r2, #83	; 0x53
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffa:	d13f      	bne.n	800707c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800700a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800701a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800701c:	f7fb fd3a 	bl	8002a94 <HAL_GetTick>
 8007020:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007022:	e013      	b.n	800704c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007024:	f7fb fd36 	bl	8002a94 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007032:	d90b      	bls.n	800704c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2203      	movs	r2, #3
 8007040:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e061      	b.n	8007110 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0e4      	beq.n	8007024 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007078:	609a      	str	r2, [r3, #8]
 800707a:	e03e      	b.n	80070fa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800708a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800709a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800709c:	f7fb fcfa 	bl	8002a94 <HAL_GetTick>
 80070a0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80070a2:	e013      	b.n	80070cc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070a4:	f7fb fcf6 	bl	8002a94 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070b2:	d90b      	bls.n	80070cc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2203      	movs	r2, #3
 80070c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e021      	b.n	8007110 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0e4      	beq.n	80070a4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	22ff      	movs	r2, #255	; 0xff
 8007100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3724      	adds	r7, #36	; 0x24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd90      	pop	{r4, r7, pc}

08007118 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007132:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007134:	f7fb fcae 	bl	8002a94 <HAL_GetTick>
 8007138:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800713a:	e009      	b.n	8007150 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800713c:	f7fb fcaa 	bl	8002a94 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800714a:	d901      	bls.n	8007150 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e007      	b.n	8007160 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0ee      	beq.n	800713c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d119      	bne.n	80071b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800718c:	f7fb fc82 	bl	8002a94 <HAL_GetTick>
 8007190:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007192:	e009      	b.n	80071a8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007194:	f7fb fc7e 	bl	8002a94 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071a2:	d901      	bls.n	80071a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e007      	b.n	80071b8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0ee      	beq.n	8007194 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80071ce:	e005      	b.n	80071dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	3b0a      	subs	r3, #10
 80071da:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b09      	cmp	r3, #9
 80071e0:	d8f6      	bhi.n	80071d0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b2db      	uxtb	r3, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	7f1b      	ldrb	r3, [r3, #28]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007214:	2302      	movs	r3, #2
 8007216:	e03e      	b.n	8007296 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2202      	movs	r2, #2
 8007222:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800722c:	4013      	ands	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	22ca      	movs	r2, #202	; 0xca
 800723e:	625a      	str	r2, [r3, #36]	; 0x24
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2253      	movs	r2, #83	; 0x53
 8007246:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0206 	bic.w	r2, r2, #6
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	430a      	orrs	r2, r1
 8007266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	22ff      	movs	r2, #255	; 0xff
 8007286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	fffff7f7 	.word	0xfffff7f7

080072a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e149      	b.n	800755a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fb f9b0 	bl	8002640 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f94f 	bl	800758c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d007      	beq.n	8007306 <HAL_SAI_Init+0x5e>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d302      	bcc.n	8007300 <HAL_SAI_Init+0x58>
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d006      	beq.n	800730c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80072fe:	e008      	b.n	8007312 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
      break;
 8007304:	e005      	b.n	8007312 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007306:	2310      	movs	r3, #16
 8007308:	61fb      	str	r3, [r7, #28]
      break;
 800730a:	e002      	b.n	8007312 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800730c:	2320      	movs	r3, #32
 800730e:	61fb      	str	r3, [r7, #28]
      break;
 8007310:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d81d      	bhi.n	8007356 <HAL_SAI_Init+0xae>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <HAL_SAI_Init+0x78>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007331 	.word	0x08007331
 8007324:	08007337 	.word	0x08007337
 8007328:	0800733f 	.word	0x0800733f
 800732c:	08007347 	.word	0x08007347
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
      }
      break;
 8007334:	e010      	b.n	8007358 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733a:	617b      	str	r3, [r7, #20]
      }
      break;
 800733c:	e00c      	b.n	8007358 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800733e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007342:	617b      	str	r3, [r7, #20]
      }
      break;
 8007344:	e008      	b.n	8007358 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800734a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007354:	e000      	b.n	8007358 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007356:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a81      	ldr	r2, [pc, #516]	; (8007564 <HAL_SAI_Init+0x2bc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_SAI_Init+0xc4>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a80      	ldr	r2, [pc, #512]	; (8007568 <HAL_SAI_Init+0x2c0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d103      	bne.n	8007374 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800736c:	4a7f      	ldr	r2, [pc, #508]	; (800756c <HAL_SAI_Init+0x2c4>)
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e002      	b.n	800737a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007374:	4a7e      	ldr	r2, [pc, #504]	; (8007570 <HAL_SAI_Init+0x2c8>)
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d043      	beq.n	800740a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a76      	ldr	r2, [pc, #472]	; (8007564 <HAL_SAI_Init+0x2bc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_SAI_Init+0xf2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a74      	ldr	r2, [pc, #464]	; (8007568 <HAL_SAI_Init+0x2c0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d104      	bne.n	80073a4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800739a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800739e:	f7ff fa8d 	bl	80068bc <HAL_RCCEx_GetPeriphCLKFreq>
 80073a2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a72      	ldr	r2, [pc, #456]	; (8007574 <HAL_SAI_Init+0x2cc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_SAI_Init+0x110>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a71      	ldr	r2, [pc, #452]	; (8007578 <HAL_SAI_Init+0x2d0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d104      	bne.n	80073c2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80073b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073bc:	f7ff fa7e 	bl	80068bc <HAL_RCCEx_GetPeriphCLKFreq>
 80073c0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	461a      	mov	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a67      	ldr	r2, [pc, #412]	; (800757c <HAL_SAI_Init+0x2d4>)
 80073de:	fba2 2303 	umull	r2, r3, r2, r3
 80073e2:	08da      	lsrs	r2, r3, #3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80073e8:	68f9      	ldr	r1, [r7, #12]
 80073ea:	4b64      	ldr	r3, [pc, #400]	; (800757c <HAL_SAI_Init+0x2d4>)
 80073ec:	fba3 2301 	umull	r2, r3, r3, r1
 80073f0:	08da      	lsrs	r2, r3, #3
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	1aca      	subs	r2, r1, r3
 80073fc:	2a08      	cmp	r2, #8
 80073fe:	d904      	bls.n	800740a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_SAI_Init+0x172>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d109      	bne.n	800742e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_SAI_Init+0x17e>
 8007422:	2300      	movs	r3, #0
 8007424:	e001      	b.n	800742a <HAL_SAI_Init+0x182>
 8007426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	e008      	b.n	8007440 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007432:	2b01      	cmp	r3, #1
 8007434:	d102      	bne.n	800743c <HAL_SAI_Init+0x194>
 8007436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743a:	e000      	b.n	800743e <HAL_SAI_Init+0x196>
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b4d      	ldr	r3, [pc, #308]	; (8007580 <HAL_SAI_Init+0x2d8>)
 800744c:	400b      	ands	r3, r1
 800744e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6819      	ldr	r1, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007464:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	431a      	orrs	r2, r3
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007478:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007484:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	051b      	lsls	r3, r3, #20
 800748c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6859      	ldr	r1, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b38      	ldr	r3, [pc, #224]	; (8007584 <HAL_SAI_Init+0x2dc>)
 80074a2:	400b      	ands	r3, r1
 80074a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6859      	ldr	r1, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6899      	ldr	r1, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <HAL_SAI_Init+0x2e0>)
 80074d0:	400b      	ands	r3, r1
 80074d2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6899      	ldr	r1, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074e4:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80074ea:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80074f0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f6:	3b01      	subs	r3, #1
 80074f8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80074fa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68d9      	ldr	r1, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007512:	400b      	ands	r3, r1
 8007514:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68d9      	ldr	r1, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007532:	3b01      	subs	r3, #1
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40015804 	.word	0x40015804
 8007568:	40015824 	.word	0x40015824
 800756c:	40015800 	.word	0x40015800
 8007570:	40015c00 	.word	0x40015c00
 8007574:	40015c04 	.word	0x40015c04
 8007578:	40015c24 	.word	0x40015c24
 800757c:	cccccccd 	.word	0xcccccccd
 8007580:	ff05c010 	.word	0xff05c010
 8007584:	ffff1ff0 	.word	0xffff1ff0
 8007588:	fff88000 	.word	0xfff88000

0800758c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800758c:	b490      	push	{r4, r7}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007594:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <SAI_Disable+0x64>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a16      	ldr	r2, [pc, #88]	; (80075f4 <SAI_Disable+0x68>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	0b1b      	lsrs	r3, r3, #12
 80075a0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075b4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80075b6:	4623      	mov	r3, r4
 80075b8:	1e5c      	subs	r4, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	73fb      	strb	r3, [r7, #15]
      break;
 80075d2:	e006      	b.n	80075e2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e9      	bne.n	80075b6 <SAI_Disable+0x2a>

  return status;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc90      	pop	{r4, r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	2000002c 	.word	0x2000002c
 80075f4:	95cbec1b 	.word	0x95cbec1b

080075f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e025      	b.n	8007658 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fb f803 	bl	800262c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f001 fa41 	bl	8008ac0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	461a      	mov	r2, r3
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	f001 faab 	bl	8008ba4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d101      	bne.n	800767c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
 800767a:	e018      	b.n	80076ae <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fb09 	bl	8008ca4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d104      	bne.n	80076a4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2205      	movs	r2, #5
 800769e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80076a2:	e003      	b.n	80076ac <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d101      	bne.n	80076d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80076cc:	2302      	movs	r3, #2
 80076ce:	e00e      	b.n	80076ee <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fb01 	bl	8008ce6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e04c      	b.n	80077a4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fa fe66 	bl	80023f0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0203 	bic.w	r2, r2, #3
 800773a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4b19      	ldr	r3, [pc, #100]	; (80077ac <HAL_SPDIFRX_Init+0xb4>)
 8007748:	4013      	ands	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007754:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800775a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007760:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007766:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800776c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007772:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007778:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800777e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8007784:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	fff88407 	.word	0xfff88407

080077b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e01d      	b.n	80077fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f815 	bl	8007806 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4619      	mov	r1, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	f000 f986 	bl	8007b00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <HAL_TIM_Base_Start_IT+0x50>)
 800783c:	4013      	ands	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b06      	cmp	r3, #6
 8007844:	d00b      	beq.n	800785e <HAL_TIM_Base_Start_IT+0x42>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784c:	d007      	beq.n	800785e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0201 	orr.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	00010007 	.word	0x00010007

08007870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b02      	cmp	r3, #2
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0202 	mvn.w	r2, #2
 800789c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f905 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8f7 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f908 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0204 	mvn.w	r2, #4
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2202      	movs	r2, #2
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f8db 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f8cd 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f8de 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b08      	cmp	r3, #8
 800792c:	d122      	bne.n	8007974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d11b      	bne.n	8007974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0208 	mvn.w	r2, #8
 8007944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2204      	movs	r2, #4
 800794a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8b1 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8a3 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f8b4 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b10      	cmp	r3, #16
 8007980:	d122      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d11b      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0210 	mvn.w	r2, #16
 8007998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2208      	movs	r2, #8
 800799e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f887 	bl	8007ac2 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e005      	b.n	80079c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f879 	bl	8007aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f88a 	bl	8007ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10e      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d107      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0201 	mvn.w	r2, #1
 80079ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fa f91e 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d10e      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0c:	2b80      	cmp	r3, #128	; 0x80
 8007a0e:	d107      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f91a 	bl	8007c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2e:	d10e      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d107      	bne.n	8007a4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f90d 	bl	8007c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d10e      	bne.n	8007a7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a66:	2b40      	cmp	r3, #64	; 0x40
 8007a68:	d107      	bne.n	8007a7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f838 	bl	8007aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d10e      	bne.n	8007aa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d107      	bne.n	8007aa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f06f 0220 	mvn.w	r2, #32
 8007a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f8cd 	bl	8007c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a40      	ldr	r2, [pc, #256]	; (8007c14 <TIM_Base_SetConfig+0x114>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1e:	d00f      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a3d      	ldr	r2, [pc, #244]	; (8007c18 <TIM_Base_SetConfig+0x118>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00b      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a3c      	ldr	r2, [pc, #240]	; (8007c1c <TIM_Base_SetConfig+0x11c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d007      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a3b      	ldr	r2, [pc, #236]	; (8007c20 <TIM_Base_SetConfig+0x120>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a3a      	ldr	r2, [pc, #232]	; (8007c24 <TIM_Base_SetConfig+0x124>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d108      	bne.n	8007b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a2f      	ldr	r2, [pc, #188]	; (8007c14 <TIM_Base_SetConfig+0x114>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d02b      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b60:	d027      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a2c      	ldr	r2, [pc, #176]	; (8007c18 <TIM_Base_SetConfig+0x118>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d023      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a2b      	ldr	r2, [pc, #172]	; (8007c1c <TIM_Base_SetConfig+0x11c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d01f      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a2a      	ldr	r2, [pc, #168]	; (8007c20 <TIM_Base_SetConfig+0x120>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d01b      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <TIM_Base_SetConfig+0x124>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d017      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a28      	ldr	r2, [pc, #160]	; (8007c28 <TIM_Base_SetConfig+0x128>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a27      	ldr	r2, [pc, #156]	; (8007c2c <TIM_Base_SetConfig+0x12c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00f      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a26      	ldr	r2, [pc, #152]	; (8007c30 <TIM_Base_SetConfig+0x130>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00b      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <TIM_Base_SetConfig+0x134>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d007      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <TIM_Base_SetConfig+0x138>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d003      	beq.n	8007bb2 <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a23      	ldr	r2, [pc, #140]	; (8007c3c <TIM_Base_SetConfig+0x13c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d108      	bne.n	8007bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a0a      	ldr	r2, [pc, #40]	; (8007c14 <TIM_Base_SetConfig+0x114>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_Base_SetConfig+0xf8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a0c      	ldr	r2, [pc, #48]	; (8007c24 <TIM_Base_SetConfig+0x124>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d103      	bne.n	8007c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	615a      	str	r2, [r3, #20]
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40010000 	.word	0x40010000
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800
 8007c34:	40001800 	.word	0x40001800
 8007c38:	40001c00 	.word	0x40001c00
 8007c3c:	40002000 	.word	0x40002000

08007c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e040      	b.n	8007d10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fa fbe8 	bl	8002474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2224      	movs	r2, #36	; 0x24
 8007ca8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0201 	bic.w	r2, r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa14 	bl	80080e8 <UART_SetConfig>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e022      	b.n	8007d10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fcb2 	bl	800863c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fd39 	bl	8008780 <UART_CheckIdleState>
 8007d0e:	4603      	mov	r3, r0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	f040 808a 	bne.w	8007e44 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <HAL_UART_Receive_IT+0x24>
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e082      	b.n	8007e46 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Receive_IT+0x36>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e07b      	b.n	8007e46 <HAL_UART_Receive_IT+0x12e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	d10e      	bne.n	8007d9a <HAL_UART_Receive_IT+0x82>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <HAL_UART_Receive_IT+0x78>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d8e:	e02d      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	22ff      	movs	r2, #255	; 0xff
 8007d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d98:	e028      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10d      	bne.n	8007dbe <HAL_UART_Receive_IT+0xa6>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <HAL_UART_Receive_IT+0x9c>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	22ff      	movs	r2, #255	; 0xff
 8007dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007db2:	e01b      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	227f      	movs	r2, #127	; 0x7f
 8007db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dbc:	e016      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dc6:	d10d      	bne.n	8007de4 <HAL_UART_Receive_IT+0xcc>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <HAL_UART_Receive_IT+0xc2>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	227f      	movs	r2, #127	; 0x7f
 8007dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dd8:	e008      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	223f      	movs	r2, #63	; 0x3f
 8007dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007de2:	e003      	b.n	8007dec <HAL_UART_Receive_IT+0xd4>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2222      	movs	r2, #34	; 0x22
 8007df6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e10:	d107      	bne.n	8007e22 <HAL_UART_Receive_IT+0x10a>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a0d      	ldr	r2, [pc, #52]	; (8007e54 <HAL_UART_Receive_IT+0x13c>)
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60
 8007e20:	e002      	b.n	8007e28 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <HAL_UART_Receive_IT+0x140>)
 8007e26:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007e3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e000      	b.n	8007e46 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	08008a19 	.word	0x08008a19
 8007e58:	08008973 	.word	0x08008973

08007e5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e82:	4013      	ands	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d113      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00e      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8100 	beq.w	80080aa <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
      }
      return;
 8007eb2:	e0fa      	b.n	80080aa <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80d5 	beq.w	8008066 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d105      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80ca 	beq.w	8008066 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <HAL_UART_IRQHandler+0x9e>
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef2:	f043 0201 	orr.w	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00e      	beq.n	8007f22 <HAL_UART_IRQHandler+0xc6>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2202      	movs	r2, #2
 8007f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	f043 0204 	orr.w	r2, r3, #4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00e      	beq.n	8007f4a <HAL_UART_IRQHandler+0xee>
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f42:	f043 0202 	orr.w	r2, r3, #2
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	f003 0308 	and.w	r3, r3, #8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d013      	beq.n	8007f7c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f74:	f043 0208 	orr.w	r2, r3, #8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x14a>
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9e:	f043 0220 	orr.w	r2, r3, #32
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d07f      	beq.n	80080ae <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00c      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d004      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d031      	beq.n	8008054 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc6f 	bl	80088d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d123      	bne.n	800804c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008012:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d013      	beq.n	8008044 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008020:	4a26      	ldr	r2, [pc, #152]	; (80080bc <HAL_UART_IRQHandler+0x260>)
 8008022:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008028:	4618      	mov	r0, r3
 800802a:	f7fb fa5f 	bl	80034ec <HAL_DMA_Abort_IT>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d016      	beq.n	8008062 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800803e:	4610      	mov	r0, r2
 8008040:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008042:	e00e      	b.n	8008062 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f845 	bl	80080d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804a:	e00a      	b.n	8008062 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f841 	bl	80080d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008052:	e006      	b.n	8008062 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f83d 	bl	80080d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008060:	e025      	b.n	80080ae <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008062:	bf00      	nop
    return;
 8008064:	e023      	b.n	80080ae <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00d      	beq.n	800808c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d008      	beq.n	800808c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807e:	2b00      	cmp	r3, #0
 8008080:	d017      	beq.n	80080b2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
    }
    return;
 800808a:	e012      	b.n	80080b2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <HAL_UART_IRQHandler+0x258>
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fc4d 	bl	8008940 <UART_EndTransmit_IT>
    return;
 80080a6:	bf00      	nop
 80080a8:	e004      	b.n	80080b4 <HAL_UART_IRQHandler+0x258>
      return;
 80080aa:	bf00      	nop
 80080ac:	e002      	b.n	80080b4 <HAL_UART_IRQHandler+0x258>
    return;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <HAL_UART_IRQHandler+0x258>
    return;
 80080b2:	bf00      	nop
  }

}
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	08008915 	.word	0x08008915

080080c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4bb1      	ldr	r3, [pc, #708]	; (80083dc <UART_SetConfig+0x2f4>)
 8008118:	4013      	ands	r3, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	6939      	ldr	r1, [r7, #16]
 8008120:	430b      	orrs	r3, r1
 8008122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	430a      	orrs	r2, r1
 800815c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a9f      	ldr	r2, [pc, #636]	; (80083e0 <UART_SetConfig+0x2f8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d121      	bne.n	80081ac <UART_SetConfig+0xc4>
 8008168:	4b9e      	ldr	r3, [pc, #632]	; (80083e4 <UART_SetConfig+0x2fc>)
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b03      	cmp	r3, #3
 8008174:	d816      	bhi.n	80081a4 <UART_SetConfig+0xbc>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x94>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	0800818d 	.word	0x0800818d
 8008180:	08008199 	.word	0x08008199
 8008184:	08008193 	.word	0x08008193
 8008188:	0800819f 	.word	0x0800819f
 800818c:	2301      	movs	r3, #1
 800818e:	77fb      	strb	r3, [r7, #31]
 8008190:	e151      	b.n	8008436 <UART_SetConfig+0x34e>
 8008192:	2302      	movs	r3, #2
 8008194:	77fb      	strb	r3, [r7, #31]
 8008196:	e14e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008198:	2304      	movs	r3, #4
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e14b      	b.n	8008436 <UART_SetConfig+0x34e>
 800819e:	2308      	movs	r3, #8
 80081a0:	77fb      	strb	r3, [r7, #31]
 80081a2:	e148      	b.n	8008436 <UART_SetConfig+0x34e>
 80081a4:	2310      	movs	r3, #16
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	bf00      	nop
 80081aa:	e144      	b.n	8008436 <UART_SetConfig+0x34e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a8d      	ldr	r2, [pc, #564]	; (80083e8 <UART_SetConfig+0x300>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d134      	bne.n	8008220 <UART_SetConfig+0x138>
 80081b6:	4b8b      	ldr	r3, [pc, #556]	; (80083e4 <UART_SetConfig+0x2fc>)
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081bc:	f003 030c 	and.w	r3, r3, #12
 80081c0:	2b0c      	cmp	r3, #12
 80081c2:	d829      	bhi.n	8008218 <UART_SetConfig+0x130>
 80081c4:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <UART_SetConfig+0xe4>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	08008201 	.word	0x08008201
 80081d0:	08008219 	.word	0x08008219
 80081d4:	08008219 	.word	0x08008219
 80081d8:	08008219 	.word	0x08008219
 80081dc:	0800820d 	.word	0x0800820d
 80081e0:	08008219 	.word	0x08008219
 80081e4:	08008219 	.word	0x08008219
 80081e8:	08008219 	.word	0x08008219
 80081ec:	08008207 	.word	0x08008207
 80081f0:	08008219 	.word	0x08008219
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008219 	.word	0x08008219
 80081fc:	08008213 	.word	0x08008213
 8008200:	2300      	movs	r3, #0
 8008202:	77fb      	strb	r3, [r7, #31]
 8008204:	e117      	b.n	8008436 <UART_SetConfig+0x34e>
 8008206:	2302      	movs	r3, #2
 8008208:	77fb      	strb	r3, [r7, #31]
 800820a:	e114      	b.n	8008436 <UART_SetConfig+0x34e>
 800820c:	2304      	movs	r3, #4
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e111      	b.n	8008436 <UART_SetConfig+0x34e>
 8008212:	2308      	movs	r3, #8
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e10e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008218:	2310      	movs	r3, #16
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	bf00      	nop
 800821e:	e10a      	b.n	8008436 <UART_SetConfig+0x34e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a71      	ldr	r2, [pc, #452]	; (80083ec <UART_SetConfig+0x304>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d120      	bne.n	800826c <UART_SetConfig+0x184>
 800822a:	4b6e      	ldr	r3, [pc, #440]	; (80083e4 <UART_SetConfig+0x2fc>)
 800822c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008234:	2b10      	cmp	r3, #16
 8008236:	d00f      	beq.n	8008258 <UART_SetConfig+0x170>
 8008238:	2b10      	cmp	r3, #16
 800823a:	d802      	bhi.n	8008242 <UART_SetConfig+0x15a>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <UART_SetConfig+0x164>
 8008240:	e010      	b.n	8008264 <UART_SetConfig+0x17c>
 8008242:	2b20      	cmp	r3, #32
 8008244:	d005      	beq.n	8008252 <UART_SetConfig+0x16a>
 8008246:	2b30      	cmp	r3, #48	; 0x30
 8008248:	d009      	beq.n	800825e <UART_SetConfig+0x176>
 800824a:	e00b      	b.n	8008264 <UART_SetConfig+0x17c>
 800824c:	2300      	movs	r3, #0
 800824e:	77fb      	strb	r3, [r7, #31]
 8008250:	e0f1      	b.n	8008436 <UART_SetConfig+0x34e>
 8008252:	2302      	movs	r3, #2
 8008254:	77fb      	strb	r3, [r7, #31]
 8008256:	e0ee      	b.n	8008436 <UART_SetConfig+0x34e>
 8008258:	2304      	movs	r3, #4
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e0eb      	b.n	8008436 <UART_SetConfig+0x34e>
 800825e:	2308      	movs	r3, #8
 8008260:	77fb      	strb	r3, [r7, #31]
 8008262:	e0e8      	b.n	8008436 <UART_SetConfig+0x34e>
 8008264:	2310      	movs	r3, #16
 8008266:	77fb      	strb	r3, [r7, #31]
 8008268:	bf00      	nop
 800826a:	e0e4      	b.n	8008436 <UART_SetConfig+0x34e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a5f      	ldr	r2, [pc, #380]	; (80083f0 <UART_SetConfig+0x308>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d120      	bne.n	80082b8 <UART_SetConfig+0x1d0>
 8008276:	4b5b      	ldr	r3, [pc, #364]	; (80083e4 <UART_SetConfig+0x2fc>)
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008280:	2b40      	cmp	r3, #64	; 0x40
 8008282:	d00f      	beq.n	80082a4 <UART_SetConfig+0x1bc>
 8008284:	2b40      	cmp	r3, #64	; 0x40
 8008286:	d802      	bhi.n	800828e <UART_SetConfig+0x1a6>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <UART_SetConfig+0x1b0>
 800828c:	e010      	b.n	80082b0 <UART_SetConfig+0x1c8>
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d005      	beq.n	800829e <UART_SetConfig+0x1b6>
 8008292:	2bc0      	cmp	r3, #192	; 0xc0
 8008294:	d009      	beq.n	80082aa <UART_SetConfig+0x1c2>
 8008296:	e00b      	b.n	80082b0 <UART_SetConfig+0x1c8>
 8008298:	2300      	movs	r3, #0
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e0cb      	b.n	8008436 <UART_SetConfig+0x34e>
 800829e:	2302      	movs	r3, #2
 80082a0:	77fb      	strb	r3, [r7, #31]
 80082a2:	e0c8      	b.n	8008436 <UART_SetConfig+0x34e>
 80082a4:	2304      	movs	r3, #4
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e0c5      	b.n	8008436 <UART_SetConfig+0x34e>
 80082aa:	2308      	movs	r3, #8
 80082ac:	77fb      	strb	r3, [r7, #31]
 80082ae:	e0c2      	b.n	8008436 <UART_SetConfig+0x34e>
 80082b0:	2310      	movs	r3, #16
 80082b2:	77fb      	strb	r3, [r7, #31]
 80082b4:	bf00      	nop
 80082b6:	e0be      	b.n	8008436 <UART_SetConfig+0x34e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a4d      	ldr	r2, [pc, #308]	; (80083f4 <UART_SetConfig+0x30c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d124      	bne.n	800830c <UART_SetConfig+0x224>
 80082c2:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <UART_SetConfig+0x2fc>)
 80082c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d0:	d012      	beq.n	80082f8 <UART_SetConfig+0x210>
 80082d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d6:	d802      	bhi.n	80082de <UART_SetConfig+0x1f6>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <UART_SetConfig+0x204>
 80082dc:	e012      	b.n	8008304 <UART_SetConfig+0x21c>
 80082de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e2:	d006      	beq.n	80082f2 <UART_SetConfig+0x20a>
 80082e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e8:	d009      	beq.n	80082fe <UART_SetConfig+0x216>
 80082ea:	e00b      	b.n	8008304 <UART_SetConfig+0x21c>
 80082ec:	2300      	movs	r3, #0
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e0a1      	b.n	8008436 <UART_SetConfig+0x34e>
 80082f2:	2302      	movs	r3, #2
 80082f4:	77fb      	strb	r3, [r7, #31]
 80082f6:	e09e      	b.n	8008436 <UART_SetConfig+0x34e>
 80082f8:	2304      	movs	r3, #4
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e09b      	b.n	8008436 <UART_SetConfig+0x34e>
 80082fe:	2308      	movs	r3, #8
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e098      	b.n	8008436 <UART_SetConfig+0x34e>
 8008304:	2310      	movs	r3, #16
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	bf00      	nop
 800830a:	e094      	b.n	8008436 <UART_SetConfig+0x34e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a39      	ldr	r2, [pc, #228]	; (80083f8 <UART_SetConfig+0x310>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d124      	bne.n	8008360 <UART_SetConfig+0x278>
 8008316:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <UART_SetConfig+0x2fc>)
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008324:	d012      	beq.n	800834c <UART_SetConfig+0x264>
 8008326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800832a:	d802      	bhi.n	8008332 <UART_SetConfig+0x24a>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d007      	beq.n	8008340 <UART_SetConfig+0x258>
 8008330:	e012      	b.n	8008358 <UART_SetConfig+0x270>
 8008332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008336:	d006      	beq.n	8008346 <UART_SetConfig+0x25e>
 8008338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800833c:	d009      	beq.n	8008352 <UART_SetConfig+0x26a>
 800833e:	e00b      	b.n	8008358 <UART_SetConfig+0x270>
 8008340:	2301      	movs	r3, #1
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e077      	b.n	8008436 <UART_SetConfig+0x34e>
 8008346:	2302      	movs	r3, #2
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e074      	b.n	8008436 <UART_SetConfig+0x34e>
 800834c:	2304      	movs	r3, #4
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e071      	b.n	8008436 <UART_SetConfig+0x34e>
 8008352:	2308      	movs	r3, #8
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e06e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008358:	2310      	movs	r3, #16
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	bf00      	nop
 800835e:	e06a      	b.n	8008436 <UART_SetConfig+0x34e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a25      	ldr	r2, [pc, #148]	; (80083fc <UART_SetConfig+0x314>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d124      	bne.n	80083b4 <UART_SetConfig+0x2cc>
 800836a:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <UART_SetConfig+0x2fc>)
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008378:	d012      	beq.n	80083a0 <UART_SetConfig+0x2b8>
 800837a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837e:	d802      	bhi.n	8008386 <UART_SetConfig+0x29e>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <UART_SetConfig+0x2ac>
 8008384:	e012      	b.n	80083ac <UART_SetConfig+0x2c4>
 8008386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800838a:	d006      	beq.n	800839a <UART_SetConfig+0x2b2>
 800838c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008390:	d009      	beq.n	80083a6 <UART_SetConfig+0x2be>
 8008392:	e00b      	b.n	80083ac <UART_SetConfig+0x2c4>
 8008394:	2300      	movs	r3, #0
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e04d      	b.n	8008436 <UART_SetConfig+0x34e>
 800839a:	2302      	movs	r3, #2
 800839c:	77fb      	strb	r3, [r7, #31]
 800839e:	e04a      	b.n	8008436 <UART_SetConfig+0x34e>
 80083a0:	2304      	movs	r3, #4
 80083a2:	77fb      	strb	r3, [r7, #31]
 80083a4:	e047      	b.n	8008436 <UART_SetConfig+0x34e>
 80083a6:	2308      	movs	r3, #8
 80083a8:	77fb      	strb	r3, [r7, #31]
 80083aa:	e044      	b.n	8008436 <UART_SetConfig+0x34e>
 80083ac:	2310      	movs	r3, #16
 80083ae:	77fb      	strb	r3, [r7, #31]
 80083b0:	bf00      	nop
 80083b2:	e040      	b.n	8008436 <UART_SetConfig+0x34e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a11      	ldr	r2, [pc, #68]	; (8008400 <UART_SetConfig+0x318>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d139      	bne.n	8008432 <UART_SetConfig+0x34a>
 80083be:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <UART_SetConfig+0x2fc>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083cc:	d027      	beq.n	800841e <UART_SetConfig+0x336>
 80083ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d2:	d817      	bhi.n	8008404 <UART_SetConfig+0x31c>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01c      	beq.n	8008412 <UART_SetConfig+0x32a>
 80083d8:	e027      	b.n	800842a <UART_SetConfig+0x342>
 80083da:	bf00      	nop
 80083dc:	efff69f3 	.word	0xefff69f3
 80083e0:	40011000 	.word	0x40011000
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40004400 	.word	0x40004400
 80083ec:	40004800 	.word	0x40004800
 80083f0:	40004c00 	.word	0x40004c00
 80083f4:	40005000 	.word	0x40005000
 80083f8:	40011400 	.word	0x40011400
 80083fc:	40007800 	.word	0x40007800
 8008400:	40007c00 	.word	0x40007c00
 8008404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008408:	d006      	beq.n	8008418 <UART_SetConfig+0x330>
 800840a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800840e:	d009      	beq.n	8008424 <UART_SetConfig+0x33c>
 8008410:	e00b      	b.n	800842a <UART_SetConfig+0x342>
 8008412:	2300      	movs	r3, #0
 8008414:	77fb      	strb	r3, [r7, #31]
 8008416:	e00e      	b.n	8008436 <UART_SetConfig+0x34e>
 8008418:	2302      	movs	r3, #2
 800841a:	77fb      	strb	r3, [r7, #31]
 800841c:	e00b      	b.n	8008436 <UART_SetConfig+0x34e>
 800841e:	2304      	movs	r3, #4
 8008420:	77fb      	strb	r3, [r7, #31]
 8008422:	e008      	b.n	8008436 <UART_SetConfig+0x34e>
 8008424:	2308      	movs	r3, #8
 8008426:	77fb      	strb	r3, [r7, #31]
 8008428:	e005      	b.n	8008436 <UART_SetConfig+0x34e>
 800842a:	2310      	movs	r3, #16
 800842c:	77fb      	strb	r3, [r7, #31]
 800842e:	bf00      	nop
 8008430:	e001      	b.n	8008436 <UART_SetConfig+0x34e>
 8008432:	2310      	movs	r3, #16
 8008434:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800843e:	d17f      	bne.n	8008540 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008440:	7ffb      	ldrb	r3, [r7, #31]
 8008442:	2b08      	cmp	r3, #8
 8008444:	d85c      	bhi.n	8008500 <UART_SetConfig+0x418>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <UART_SetConfig+0x364>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	08008471 	.word	0x08008471
 8008450:	08008491 	.word	0x08008491
 8008454:	080084b1 	.word	0x080084b1
 8008458:	08008501 	.word	0x08008501
 800845c:	080084c9 	.word	0x080084c9
 8008460:	08008501 	.word	0x08008501
 8008464:	08008501 	.word	0x08008501
 8008468:	08008501 	.word	0x08008501
 800846c:	080084e9 	.word	0x080084e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008470:	f7fd fddc 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	005a      	lsls	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	441a      	add	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	b29b      	uxth	r3, r3
 800848c:	61bb      	str	r3, [r7, #24]
        break;
 800848e:	e03a      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008490:	f7fd fde0 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008494:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	005a      	lsls	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	441a      	add	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	61bb      	str	r3, [r7, #24]
        break;
 80084ae:	e02a      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	085a      	lsrs	r2, r3, #1
 80084b6:	4b5f      	ldr	r3, [pc, #380]	; (8008634 <UART_SetConfig+0x54c>)
 80084b8:	4413      	add	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6852      	ldr	r2, [r2, #4]
 80084be:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	61bb      	str	r3, [r7, #24]
        break;
 80084c6:	e01e      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084c8:	f7fd fcf2 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80084cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	005a      	lsls	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	441a      	add	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	61bb      	str	r3, [r7, #24]
        break;
 80084e6:	e00e      	b.n	8008506 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	61bb      	str	r3, [r7, #24]
        break;
 80084fe:	e002      	b.n	8008506 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	75fb      	strb	r3, [r7, #23]
        break;
 8008504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	2b0f      	cmp	r3, #15
 800850a:	d916      	bls.n	800853a <UART_SetConfig+0x452>
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008512:	d212      	bcs.n	800853a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f023 030f 	bic.w	r3, r3, #15
 800851c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	085b      	lsrs	r3, r3, #1
 8008522:	b29b      	uxth	r3, r3
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	b29a      	uxth	r2, r3
 800852a:	897b      	ldrh	r3, [r7, #10]
 800852c:	4313      	orrs	r3, r2
 800852e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	897a      	ldrh	r2, [r7, #10]
 8008536:	60da      	str	r2, [r3, #12]
 8008538:	e070      	b.n	800861c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e06d      	b.n	800861c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008540:	7ffb      	ldrb	r3, [r7, #31]
 8008542:	2b08      	cmp	r3, #8
 8008544:	d859      	bhi.n	80085fa <UART_SetConfig+0x512>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0x464>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	08008571 	.word	0x08008571
 8008550:	0800858f 	.word	0x0800858f
 8008554:	080085ad 	.word	0x080085ad
 8008558:	080085fb 	.word	0x080085fb
 800855c:	080085c5 	.word	0x080085c5
 8008560:	080085fb 	.word	0x080085fb
 8008564:	080085fb 	.word	0x080085fb
 8008568:	080085fb 	.word	0x080085fb
 800856c:	080085e3 	.word	0x080085e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008570:	f7fd fd5c 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008574:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	085a      	lsrs	r2, r3, #1
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	441a      	add	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	b29b      	uxth	r3, r3
 800858a:	61bb      	str	r3, [r7, #24]
        break;
 800858c:	e038      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858e:	f7fd fd61 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008592:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	085a      	lsrs	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	441a      	add	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	61bb      	str	r3, [r7, #24]
        break;
 80085aa:	e029      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	085a      	lsrs	r2, r3, #1
 80085b2:	4b21      	ldr	r3, [pc, #132]	; (8008638 <UART_SetConfig+0x550>)
 80085b4:	4413      	add	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6852      	ldr	r2, [r2, #4]
 80085ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80085be:	b29b      	uxth	r3, r3
 80085c0:	61bb      	str	r3, [r7, #24]
        break;
 80085c2:	e01d      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c4:	f7fd fc74 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80085c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	085a      	lsrs	r2, r3, #1
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	441a      	add	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085dc:	b29b      	uxth	r3, r3
 80085de:	61bb      	str	r3, [r7, #24]
        break;
 80085e0:	e00e      	b.n	8008600 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	085b      	lsrs	r3, r3, #1
 80085e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	61bb      	str	r3, [r7, #24]
        break;
 80085f8:	e002      	b.n	8008600 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
        break;
 80085fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	2b0f      	cmp	r3, #15
 8008604:	d908      	bls.n	8008618 <UART_SetConfig+0x530>
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800860c:	d204      	bcs.n	8008618 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	e001      	b.n	800861c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008628:	7dfb      	ldrb	r3, [r7, #23]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	01e84800 	.word	0x01e84800
 8008638:	00f42400 	.word	0x00f42400

0800863c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01a      	beq.n	8008752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873a:	d10a      	bne.n	8008752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800878e:	f7fa f981 	bl	8002a94 <HAL_GetTick>
 8008792:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d10e      	bne.n	80087c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f814 	bl	80087de <UART_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e00a      	b.n	80087d6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ee:	e05d      	b.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d059      	beq.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f8:	f7fa f94c 	bl	8002a94 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <UART_WaitOnFlagUntilTimeout+0x30>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d11b      	bne.n	8008846 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800881c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0201 	bic.w	r2, r2, #1
 800882c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2220      	movs	r2, #32
 8008838:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e042      	b.n	80088cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d02b      	beq.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800885e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008862:	d123      	bne.n	80088ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800886c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800887c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e00f      	b.n	80088cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69da      	ldr	r2, [r3, #28]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4013      	ands	r3, r2
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	bf0c      	ite	eq
 80088bc:	2301      	moveq	r3, #1
 80088be:	2300      	movne	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d092      	beq.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0201 	bic.w	r2, r2, #1
 80088fa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fbce 	bl	80080d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008956:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2220      	movs	r2, #32
 800895c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fbab 	bl	80080c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008980:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008986:	2b22      	cmp	r3, #34	; 0x22
 8008988:	d13a      	bne.n	8008a00 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008992:	89bb      	ldrh	r3, [r7, #12]
 8008994:	b2d9      	uxtb	r1, r3
 8008996:	89fb      	ldrh	r3, [r7, #14]
 8008998:	b2da      	uxtb	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899e:	400a      	ands	r2, r1
 80089a0:	b2d2      	uxtb	r2, r2
 80089a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d121      	bne.n	8008a10 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0201 	bic.w	r2, r2, #1
 80089ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7f8 f89b 	bl	8000b34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089fe:	e007      	b.n	8008a10 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0208 	orr.w	r2, r2, #8
 8008a0e:	619a      	str	r2, [r3, #24]
}
 8008a10:	bf00      	nop
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a2c:	2b22      	cmp	r3, #34	; 0x22
 8008a2e:	d13a      	bne.n	8008aa6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a3e:	89ba      	ldrh	r2, [r7, #12]
 8008a40:	89fb      	ldrh	r3, [r7, #14]
 8008a42:	4013      	ands	r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4e:	1c9a      	adds	r2, r3, #2
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d121      	bne.n	8008ab6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a80:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0201 	bic.w	r2, r2, #1
 8008a90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7f8 f848 	bl	8000b34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aa4:	e007      	b.n	8008ab6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	699a      	ldr	r2, [r3, #24]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f042 0208 	orr.w	r2, r2, #8
 8008ab4:	619a      	str	r2, [r3, #24]
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d027      	beq.n	8008b2a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <FMC_SDRAM_Init+0xe0>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008af0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008af6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008afc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008b02:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008b08:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008b0e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008b14:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b1a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e032      	b.n	8008b90 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b36:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b40:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <FMC_SDRAM_Init+0xe0>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b64:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008b6a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008b70:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008b76:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008b7c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	ffff8000 	.word	0xffff8000

08008ba4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d02e      	beq.n	8008c1c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008bca:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bda:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008be4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008bee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008bf8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008c02:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	609a      	str	r2, [r3, #8]
 8008c1a:	e039      	b.n	8008c90 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4b1e      	ldr	r3, [pc, #120]	; (8008ca0 <FMC_SDRAM_Timing_Init+0xfc>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c4e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c5e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008c68:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008c72:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	ff0f0fff 	.word	0xff0f0fff

08008ca4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008cbc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008cc6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d1e:	2b84      	cmp	r3, #132	; 0x84
 8008d20:	d005      	beq.n	8008d2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	3303      	adds	r3, #3
 8008d2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d42:	f3ef 8305 	mrs	r3, IPSR
 8008d46:	607b      	str	r3, [r7, #4]
  return(result);
 8008d48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bf14      	ite	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	2300      	moveq	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d64:	f001 fa9c 	bl	800a2a0 <vTaskStartScheduler>
  
  return osOK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d70:	b089      	sub	sp, #36	; 0x24
 8008d72:	af04      	add	r7, sp, #16
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d020      	beq.n	8008dc2 <osThreadCreate+0x54>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01c      	beq.n	8008dc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685c      	ldr	r4, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681d      	ldr	r5, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691e      	ldr	r6, [r3, #16]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff ffb6 	bl	8008d0c <makeFreeRtosPriority>
 8008da0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008daa:	9202      	str	r2, [sp, #8]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	9100      	str	r1, [sp, #0]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	4632      	mov	r2, r6
 8008db4:	4629      	mov	r1, r5
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 f899 	bl	8009eee <xTaskCreateStatic>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e01c      	b.n	8008dfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685c      	ldr	r4, [r3, #4]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dce:	b29e      	uxth	r6, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff ff98 	bl	8008d0c <makeFreeRtosPriority>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f107 030c 	add.w	r3, r7, #12
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	9200      	str	r2, [sp, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	4632      	mov	r2, r6
 8008dea:	4629      	mov	r1, r5
 8008dec:	4620      	mov	r0, r4
 8008dee:	f001 f8de 	bl	8009fae <xTaskCreate>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d001      	beq.n	8008dfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e000      	b.n	8008dfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <osDelay+0x16>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	e000      	b.n	8008e1e <osDelay+0x18>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f001 fa08 	bl	800a234 <vTaskDelay>
  
  return osOK;
 8008e24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b086      	sub	sp, #24
 8008e32:	af02      	add	r7, sp, #8
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d017      	beq.n	8008e70 <osSemaphoreCreate+0x42>
    if (count == 1) {
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d10b      	bne.n	8008e5e <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	2200      	movs	r2, #0
 8008e52:	2100      	movs	r1, #0
 8008e54:	2001      	movs	r0, #1
 8008e56:	f000 f9cd 	bl	80091f4 <xQueueGenericCreateStatic>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	e023      	b.n	8008ea6 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8008e5e:	6838      	ldr	r0, [r7, #0]
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f000 faa1 	bl	80093ae <xQueueCreateCountingSemaphoreStatic>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	e01a      	b.n	8008ea6 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d110      	bne.n	8008e98 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 8008e76:	2203      	movs	r2, #3
 8008e78:	2100      	movs	r1, #0
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f000 fa37 	bl	80092ee <xQueueGenericCreate>
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <osSemaphoreCreate+0x66>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fafc 	bl	800948c <xQueueGenericSend>
      return sema;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	e006      	b.n	8008ea6 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fabe 	bl	8009420 <xQueueCreateCountingSemaphore>
 8008ea4:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008ec4:	2380      	movs	r3, #128	; 0x80
 8008ec6:	e03a      	b.n	8008f3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d103      	bne.n	8008edc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	e009      	b.n	8008ef0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d006      	beq.n	8008ef0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <osSemaphoreWait+0x40>
      ticks = 1;
 8008eec:	2301      	movs	r3, #1
 8008eee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008ef0:	f7ff ff24 	bl	8008d3c <inHandlerMode>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d017      	beq.n	8008f2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	461a      	mov	r2, r3
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fe48 	bl	8009b98 <xQueueReceiveFromISR>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d001      	beq.n	8008f12 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008f0e:	23ff      	movs	r3, #255	; 0xff
 8008f10:	e015      	b.n	8008f3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d011      	beq.n	8008f3c <osSemaphoreWait+0x8c>
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <osSemaphoreWait+0x98>)
 8008f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	e008      	b.n	8008f3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fd23 	bl	8009978 <xQueueSemaphoreTake>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d001      	beq.n	8008f3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f38:	23ff      	movs	r3, #255	; 0xff
 8008f3a:	e000      	b.n	8008f3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f5c:	f7ff feee 	bl	8008d3c <inHandlerMode>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d016      	beq.n	8008f94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fb8f 	bl	8009690 <xQueueGiveFromISR>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d001      	beq.n	8008f7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f78:	23ff      	movs	r3, #255	; 0xff
 8008f7a:	e017      	b.n	8008fac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d013      	beq.n	8008faa <osSemaphoreRelease+0x5e>
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <osSemaphoreRelease+0x68>)
 8008f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	e00a      	b.n	8008faa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008f94:	2300      	movs	r3, #0
 8008f96:	2200      	movs	r2, #0
 8008f98:	2100      	movs	r1, #0
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa76 	bl	800948c <xQueueGenericSend>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d001      	beq.n	8008faa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008fa6:	23ff      	movs	r3, #255	; 0xff
 8008fa8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008faa:	68fb      	ldr	r3, [r7, #12]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	e000ed04 	.word	0xe000ed04

08008fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f103 0208 	add.w	r2, r3, #8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f103 0208 	add.w	r2, r3, #8
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f103 0208 	add.w	r2, r3, #8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	601a      	str	r2, [r3, #0]
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009070:	d103      	bne.n	800907a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e00c      	b.n	8009094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3308      	adds	r3, #8
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e002      	b.n	8009088 <vListInsert+0x2e>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	429a      	cmp	r2, r3
 8009092:	d2f6      	bcs.n	8009082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
}
 80090c0:	bf00      	nop
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	6892      	ldr	r2, [r2, #8]
 80090e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6852      	ldr	r2, [r2, #4]
 80090ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d103      	bne.n	8009100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1e5a      	subs	r2, r3, #1
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	b672      	cpsid	i
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	b662      	cpsie	i
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	e7fe      	b.n	800914a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800914c:	f002 f81c 	bl	800b188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009158:	68f9      	ldr	r1, [r7, #12]
 800915a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800915c:	fb01 f303 	mul.w	r3, r1, r3
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917c:	3b01      	subs	r3, #1
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009182:	fb01 f303 	mul.w	r3, r1, r3
 8009186:	441a      	add	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	22ff      	movs	r2, #255	; 0xff
 8009190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	22ff      	movs	r2, #255	; 0xff
 8009198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d114      	bne.n	80091cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01a      	beq.n	80091e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3310      	adds	r3, #16
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 fae6 	bl	800a780 <xTaskRemoveFromEventList>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d012      	beq.n	80091e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091ba:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <xQueueGenericReset+0xd0>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	e009      	b.n	80091e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3310      	adds	r3, #16
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff fef1 	bl	8008fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff feec 	bl	8008fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091e0:	f002 f804 	bl	800b1ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091e4:	2301      	movs	r3, #1
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08e      	sub	sp, #56	; 0x38
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <xQueueGenericCreateStatic+0x2c>
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	b672      	cpsid	i
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	b662      	cpsie	i
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
 800921e:	e7fe      	b.n	800921e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10b      	bne.n	800923e <xQueueGenericCreateStatic+0x4a>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	b672      	cpsid	i
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	b662      	cpsie	i
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
 800923c:	e7fe      	b.n	800923c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <xQueueGenericCreateStatic+0x56>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <xQueueGenericCreateStatic+0x5a>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericCreateStatic+0x5c>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <xQueueGenericCreateStatic+0x78>
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	b672      	cpsid	i
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	b662      	cpsie	i
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	e7fe      	b.n	800926a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <xQueueGenericCreateStatic+0x84>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <xQueueGenericCreateStatic+0x88>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <xQueueGenericCreateStatic+0x8a>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10b      	bne.n	800929a <xQueueGenericCreateStatic+0xa6>
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	b672      	cpsid	i
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	b662      	cpsie	i
 8009296:	61fb      	str	r3, [r7, #28]
 8009298:	e7fe      	b.n	8009298 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800929a:	2348      	movs	r3, #72	; 0x48
 800929c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b48      	cmp	r3, #72	; 0x48
 80092a2:	d00b      	beq.n	80092bc <xQueueGenericCreateStatic+0xc8>
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	b672      	cpsid	i
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	b662      	cpsie	i
 80092b8:	61bb      	str	r3, [r7, #24]
 80092ba:	e7fe      	b.n	80092ba <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00d      	beq.n	80092e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4613      	mov	r3, r2
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f846 	bl	8009370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3730      	adds	r7, #48	; 0x30
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b08a      	sub	sp, #40	; 0x28
 80092f2:	af02      	add	r7, sp, #8
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	4613      	mov	r3, r2
 80092fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <xQueueGenericCreate+0x2c>
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	e7fe      	b.n	8009318 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009320:	2300      	movs	r3, #0
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	e004      	b.n	8009330 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	fb02 f303 	mul.w	r3, r2, r3
 800932e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3348      	adds	r3, #72	; 0x48
 8009334:	4618      	mov	r0, r3
 8009336:	f002 f849 	bl	800b3cc <pvPortMalloc>
 800933a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	3348      	adds	r3, #72	; 0x48
 800934a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009354:	79fa      	ldrb	r2, [r7, #7]
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	4613      	mov	r3, r2
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f805 	bl	8009370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009366:	69bb      	ldr	r3, [r7, #24]
	}
 8009368:	4618      	mov	r0, r3
 800936a:	3720      	adds	r7, #32
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d103      	bne.n	800938c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	e002      	b.n	8009392 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800939e:	2101      	movs	r1, #1
 80093a0:	69b8      	ldr	r0, [r7, #24]
 80093a2:	f7ff febd 	bl	8009120 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b08a      	sub	sp, #40	; 0x28
 80093b2:	af02      	add	r7, sp, #8
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	b672      	cpsid	i
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	b662      	cpsie	i
 80093d4:	61bb      	str	r3, [r7, #24]
 80093d6:	e7fe      	b.n	80093d6 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d90b      	bls.n	80093f8 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	b672      	cpsid	i
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	b662      	cpsie	i
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	e7fe      	b.n	80093f6 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093f8:	2302      	movs	r3, #2
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	2100      	movs	r1, #0
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff fef6 	bl	80091f4 <xQueueGenericCreateStatic>
 8009408:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009416:	69fb      	ldr	r3, [r7, #28]
	}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10b      	bne.n	8009448 <xQueueCreateCountingSemaphore+0x28>
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	b672      	cpsid	i
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	b662      	cpsie	i
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	e7fe      	b.n	8009446 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	d90b      	bls.n	8009468 <xQueueCreateCountingSemaphore+0x48>
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	b672      	cpsid	i
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	b662      	cpsie	i
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e7fe      	b.n	8009466 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009468:	2202      	movs	r2, #2
 800946a:	2100      	movs	r1, #0
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff ff3e 	bl	80092ee <xQueueGenericCreate>
 8009472:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009480:	697b      	ldr	r3, [r7, #20]
	}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08e      	sub	sp, #56	; 0x38
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10b      	bne.n	80094c0 <xQueueGenericSend+0x34>
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80094be:	e7fe      	b.n	80094be <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <xQueueGenericSend+0x42>
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <xQueueGenericSend+0x46>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <xQueueGenericSend+0x48>
 80094d2:	2300      	movs	r3, #0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10b      	bne.n	80094f0 <xQueueGenericSend+0x64>
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	b672      	cpsid	i
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	b662      	cpsie	i
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
 80094ee:	e7fe      	b.n	80094ee <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d103      	bne.n	80094fe <xQueueGenericSend+0x72>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <xQueueGenericSend+0x76>
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <xQueueGenericSend+0x78>
 8009502:	2300      	movs	r3, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10b      	bne.n	8009520 <xQueueGenericSend+0x94>
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	b672      	cpsid	i
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	b662      	cpsie	i
 800951c:	623b      	str	r3, [r7, #32]
 800951e:	e7fe      	b.n	800951e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009520:	f001 faee 	bl	800ab00 <xTaskGetSchedulerState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <xQueueGenericSend+0xa4>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <xQueueGenericSend+0xa8>
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <xQueueGenericSend+0xaa>
 8009534:	2300      	movs	r3, #0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <xQueueGenericSend+0xc6>
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	b672      	cpsid	i
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	b662      	cpsie	i
 800954e:	61fb      	str	r3, [r7, #28]
 8009550:	e7fe      	b.n	8009550 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009552:	f001 fe19 	bl	800b188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	429a      	cmp	r2, r3
 8009560:	d302      	bcc.n	8009568 <xQueueGenericSend+0xdc>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d129      	bne.n	80095bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800956e:	f000 fbae 	bl	8009cce <prvCopyDataToQueue>
 8009572:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	2b00      	cmp	r3, #0
 800957a:	d010      	beq.n	800959e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	3324      	adds	r3, #36	; 0x24
 8009580:	4618      	mov	r0, r3
 8009582:	f001 f8fd 	bl	800a780 <xTaskRemoveFromEventList>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d013      	beq.n	80095b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800958c:	4b3f      	ldr	r3, [pc, #252]	; (800968c <xQueueGenericSend+0x200>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	e00a      	b.n	80095b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095a4:	4b39      	ldr	r3, [pc, #228]	; (800968c <xQueueGenericSend+0x200>)
 80095a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095b4:	f001 fe1a 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e063      	b.n	8009684 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d103      	bne.n	80095ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095c2:	f001 fe13 	bl	800b1ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e05c      	b.n	8009684 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d106      	bne.n	80095de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d0:	f107 0314 	add.w	r3, r7, #20
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 f937 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095da:	2301      	movs	r3, #1
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095de:	f001 fe05 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095e2:	f000 febf 	bl	800a364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095e6:	f001 fdcf 	bl	800b188 <vPortEnterCritical>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f6:	d103      	bne.n	8009600 <xQueueGenericSend+0x174>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009606:	b25b      	sxtb	r3, r3
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d103      	bne.n	8009616 <xQueueGenericSend+0x18a>
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009616:	f001 fde9 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800961a:	1d3a      	adds	r2, r7, #4
 800961c:	f107 0314 	add.w	r3, r7, #20
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 f926 	bl	800a874 <xTaskCheckForTimeOut>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d124      	bne.n	8009678 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800962e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009630:	f000 fc45 	bl	8009ebe <prvIsQueueFull>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d018      	beq.n	800966c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	3310      	adds	r3, #16
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f001 f876 	bl	800a734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964a:	f000 fbd0 	bl	8009dee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800964e:	f000 fe97 	bl	800a380 <xTaskResumeAll>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	f47f af7c 	bne.w	8009552 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800965a:	4b0c      	ldr	r3, [pc, #48]	; (800968c <xQueueGenericSend+0x200>)
 800965c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	e772      	b.n	8009552 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800966c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800966e:	f000 fbbe 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009672:	f000 fe85 	bl	800a380 <xTaskResumeAll>
 8009676:	e76c      	b.n	8009552 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800967a:	f000 fbb8 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800967e:	f000 fe7f 	bl	800a380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009684:	4618      	mov	r0, r3
 8009686:	3738      	adds	r7, #56	; 0x38
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	e000ed04 	.word	0xe000ed04

08009690 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08e      	sub	sp, #56	; 0x38
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <xQueueGiveFromISR+0x2c>
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	b672      	cpsid	i
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	b662      	cpsie	i
 80096b8:	623b      	str	r3, [r7, #32]
 80096ba:	e7fe      	b.n	80096ba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <xQueueGiveFromISR+0x4c>
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	b672      	cpsid	i
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	b662      	cpsie	i
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	e7fe      	b.n	80096da <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <xQueueGiveFromISR+0x5c>
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <xQueueGiveFromISR+0x60>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <xQueueGiveFromISR+0x62>
 80096f0:	2300      	movs	r3, #0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10b      	bne.n	800970e <xQueueGiveFromISR+0x7e>
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	b672      	cpsid	i
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	b662      	cpsie	i
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	e7fe      	b.n	800970c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800970e:	f001 fe1b 	bl	800b348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009712:	f3ef 8211 	mrs	r2, BASEPRI
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	617a      	str	r2, [r7, #20]
 800972c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800972e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800973e:	429a      	cmp	r2, r3
 8009740:	d22b      	bcs.n	800979a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975c:	d112      	bne.n	8009784 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d016      	beq.n	8009794 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	3324      	adds	r3, #36	; 0x24
 800976a:	4618      	mov	r0, r3
 800976c:	f001 f808 	bl	800a780 <xTaskRemoveFromEventList>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00e      	beq.n	8009794 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2201      	movs	r2, #1
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e007      	b.n	8009794 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009788:	3301      	adds	r3, #1
 800978a:	b2db      	uxtb	r3, r3
 800978c:	b25a      	sxtb	r2, r3
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009794:	2301      	movs	r3, #1
 8009796:	637b      	str	r3, [r7, #52]	; 0x34
 8009798:	e001      	b.n	800979e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800979a:	2300      	movs	r3, #0
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3738      	adds	r7, #56	; 0x38
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08c      	sub	sp, #48	; 0x30
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097c0:	2300      	movs	r3, #0
 80097c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <xQueueReceive+0x32>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	b672      	cpsid	i
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	b662      	cpsie	i
 80097e2:	623b      	str	r3, [r7, #32]
 80097e4:	e7fe      	b.n	80097e4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <xQueueReceive+0x40>
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <xQueueReceive+0x44>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e000      	b.n	80097fa <xQueueReceive+0x46>
 80097f8:	2300      	movs	r3, #0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <xQueueReceive+0x62>
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	b672      	cpsid	i
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	b662      	cpsie	i
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	e7fe      	b.n	8009814 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009816:	f001 f973 	bl	800ab00 <xTaskGetSchedulerState>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <xQueueReceive+0x72>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <xQueueReceive+0x76>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueReceive+0x78>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10b      	bne.n	8009848 <xQueueReceive+0x94>
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	b672      	cpsid	i
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	b662      	cpsie	i
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e7fe      	b.n	8009846 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009848:	f001 fc9e 	bl	800b188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01f      	beq.n	8009898 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985c:	f000 faa1 	bl	8009da2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	1e5a      	subs	r2, r3, #1
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00f      	beq.n	8009890 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	3310      	adds	r3, #16
 8009874:	4618      	mov	r0, r3
 8009876:	f000 ff83 	bl	800a780 <xTaskRemoveFromEventList>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d007      	beq.n	8009890 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009880:	4b3c      	ldr	r3, [pc, #240]	; (8009974 <xQueueReceive+0x1c0>)
 8009882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009890:	f001 fcac 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 8009894:	2301      	movs	r3, #1
 8009896:	e069      	b.n	800996c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d103      	bne.n	80098a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800989e:	f001 fca5 	bl	800b1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098a2:	2300      	movs	r3, #0
 80098a4:	e062      	b.n	800996c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098ac:	f107 0310 	add.w	r3, r7, #16
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 ffc9 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098b6:	2301      	movs	r3, #1
 80098b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098ba:	f001 fc97 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098be:	f000 fd51 	bl	800a364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098c2:	f001 fc61 	bl	800b188 <vPortEnterCritical>
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098cc:	b25b      	sxtb	r3, r3
 80098ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d2:	d103      	bne.n	80098dc <xQueueReceive+0x128>
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098e2:	b25b      	sxtb	r3, r3
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d103      	bne.n	80098f2 <xQueueReceive+0x13e>
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f2:	f001 fc7b 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098f6:	1d3a      	adds	r2, r7, #4
 80098f8:	f107 0310 	add.w	r3, r7, #16
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 ffb8 	bl	800a874 <xTaskCheckForTimeOut>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d123      	bne.n	8009952 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800990a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990c:	f000 fac1 	bl	8009e92 <prvIsQueueEmpty>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d017      	beq.n	8009946 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	3324      	adds	r3, #36	; 0x24
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f000 ff08 	bl	800a734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009926:	f000 fa62 	bl	8009dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800992a:	f000 fd29 	bl	800a380 <xTaskResumeAll>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d189      	bne.n	8009848 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <xQueueReceive+0x1c0>)
 8009936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	e780      	b.n	8009848 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009948:	f000 fa51 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800994c:	f000 fd18 	bl	800a380 <xTaskResumeAll>
 8009950:	e77a      	b.n	8009848 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009954:	f000 fa4b 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009958:	f000 fd12 	bl	800a380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800995c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995e:	f000 fa98 	bl	8009e92 <prvIsQueueEmpty>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	f43f af6f 	beq.w	8009848 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800996a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800996c:	4618      	mov	r0, r3
 800996e:	3730      	adds	r7, #48	; 0x30
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b08e      	sub	sp, #56	; 0x38
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10b      	bne.n	80099ac <xQueueSemaphoreTake+0x34>
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	b672      	cpsid	i
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	b662      	cpsie	i
 80099a8:	623b      	str	r3, [r7, #32]
 80099aa:	e7fe      	b.n	80099aa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <xQueueSemaphoreTake+0x54>
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	b672      	cpsid	i
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	b662      	cpsie	i
 80099c8:	61fb      	str	r3, [r7, #28]
 80099ca:	e7fe      	b.n	80099ca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099cc:	f001 f898 	bl	800ab00 <xTaskGetSchedulerState>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <xQueueSemaphoreTake+0x64>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <xQueueSemaphoreTake+0x68>
 80099dc:	2301      	movs	r3, #1
 80099de:	e000      	b.n	80099e2 <xQueueSemaphoreTake+0x6a>
 80099e0:	2300      	movs	r3, #0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10b      	bne.n	80099fe <xQueueSemaphoreTake+0x86>
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	b672      	cpsid	i
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	b662      	cpsie	i
 80099fa:	61bb      	str	r3, [r7, #24]
 80099fc:	e7fe      	b.n	80099fc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099fe:	f001 fbc3 	bl	800b188 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d024      	beq.n	8009a58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	1e5a      	subs	r2, r3, #1
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a1e:	f001 fa31 	bl	800ae84 <pvTaskIncrementMutexHeldCount>
 8009a22:	4602      	mov	r2, r0
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00f      	beq.n	8009a50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	3310      	adds	r3, #16
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fea3 	bl	800a780 <xTaskRemoveFromEventList>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a40:	4b54      	ldr	r3, [pc, #336]	; (8009b94 <xQueueSemaphoreTake+0x21c>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a50:	f001 fbcc 	bl	800b1ec <vPortExitCritical>
				return pdPASS;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e098      	b.n	8009b8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d112      	bne.n	8009a84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <xQueueSemaphoreTake+0x104>
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	b672      	cpsid	i
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	b662      	cpsie	i
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	e7fe      	b.n	8009a7a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a7c:	f001 fbb6 	bl	800b1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e082      	b.n	8009b8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 feda 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a98:	f001 fba8 	bl	800b1ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a9c:	f000 fc62 	bl	800a364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa0:	f001 fb72 	bl	800b188 <vPortEnterCritical>
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aaa:	b25b      	sxtb	r3, r3
 8009aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab0:	d103      	bne.n	8009aba <xQueueSemaphoreTake+0x142>
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac0:	b25b      	sxtb	r3, r3
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d103      	bne.n	8009ad0 <xQueueSemaphoreTake+0x158>
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad0:	f001 fb8c 	bl	800b1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	f107 030c 	add.w	r3, r7, #12
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 fec9 	bl	800a874 <xTaskCheckForTimeOut>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d132      	bne.n	8009b4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009aea:	f000 f9d2 	bl	8009e92 <prvIsQueueEmpty>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d026      	beq.n	8009b42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009afc:	f001 fb44 	bl	800b188 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 f819 	bl	800ab3c <xTaskPriorityInherit>
 8009b0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009b0c:	f001 fb6e 	bl	800b1ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	3324      	adds	r3, #36	; 0x24
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	4611      	mov	r1, r2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 fe0b 	bl	800a734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b20:	f000 f965 	bl	8009dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b24:	f000 fc2c 	bl	800a380 <xTaskResumeAll>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f47f af67 	bne.w	80099fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009b30:	4b18      	ldr	r3, [pc, #96]	; (8009b94 <xQueueSemaphoreTake+0x21c>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	e75d      	b.n	80099fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b44:	f000 f953 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b48:	f000 fc1a 	bl	800a380 <xTaskResumeAll>
 8009b4c:	e757      	b.n	80099fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b50:	f000 f94d 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b54:	f000 fc14 	bl	800a380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b5a:	f000 f99a 	bl	8009e92 <prvIsQueueEmpty>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f43f af4c 	beq.w	80099fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00d      	beq.n	8009b88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009b6c:	f001 fb0c 	bl	800b188 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b72:	f000 f894 	bl	8009c9e <prvGetDisinheritPriorityAfterTimeout>
 8009b76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 f8e4 	bl	800ad4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b84:	f001 fb32 	bl	800b1ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3738      	adds	r7, #56	; 0x38
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08e      	sub	sp, #56	; 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10b      	bne.n	8009bc6 <xQueueReceiveFromISR+0x2e>
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	b672      	cpsid	i
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	b662      	cpsie	i
 8009bc2:	623b      	str	r3, [r7, #32]
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d103      	bne.n	8009bd4 <xQueueReceiveFromISR+0x3c>
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <xQueueReceiveFromISR+0x40>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e000      	b.n	8009bda <xQueueReceiveFromISR+0x42>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <xQueueReceiveFromISR+0x5e>
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	b672      	cpsid	i
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	b662      	cpsie	i
 8009bf2:	61fb      	str	r3, [r7, #28]
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bf6:	f001 fba7 	bl	800b348 <vPortValidateInterruptPriority>
	__asm volatile
 8009bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	b672      	cpsid	i
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	b662      	cpsie	i
 8009c12:	61ba      	str	r2, [r7, #24]
 8009c14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d02f      	beq.n	8009c86 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c30:	68b9      	ldr	r1, [r7, #8]
 8009c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c34:	f000 f8b5 	bl	8009da2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	1e5a      	subs	r2, r3, #1
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c48:	d112      	bne.n	8009c70 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	3310      	adds	r3, #16
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fd92 	bl	800a780 <xTaskRemoveFromEventList>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00e      	beq.n	8009c80 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	e007      	b.n	8009c80 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c74:	3301      	adds	r3, #1
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	b25a      	sxtb	r2, r3
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c80:	2301      	movs	r3, #1
 8009c82:	637b      	str	r3, [r7, #52]	; 0x34
 8009c84:	e001      	b.n	8009c8a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	637b      	str	r3, [r7, #52]	; 0x34
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3738      	adds	r7, #56	; 0x38
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f1c3 0307 	rsb	r3, r3, #7
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e001      	b.n	8009cc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
	}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10d      	bne.n	8009d08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d14d      	bne.n	8009d90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 ff9f 	bl	800ac3c <xTaskPriorityDisinherit>
 8009cfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	609a      	str	r2, [r3, #8]
 8009d06:	e043      	b.n	8009d90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d119      	bne.n	8009d42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6858      	ldr	r0, [r3, #4]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d16:	461a      	mov	r2, r3
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	f01b fdfd 	bl	8025918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	441a      	add	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d32b      	bcc.n	8009d90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	605a      	str	r2, [r3, #4]
 8009d40:	e026      	b.n	8009d90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	68d8      	ldr	r0, [r3, #12]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	f01b fde3 	bl	8025918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	425b      	negs	r3, r3
 8009d5c:	441a      	add	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d207      	bcs.n	8009d7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	425b      	negs	r3, r3
 8009d78:	441a      	add	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d105      	bne.n	8009d90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d98:	697b      	ldr	r3, [r7, #20]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b082      	sub	sp, #8
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d018      	beq.n	8009de6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	441a      	add	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d303      	bcc.n	8009dd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68d9      	ldr	r1, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	461a      	mov	r2, r3
 8009de0:	6838      	ldr	r0, [r7, #0]
 8009de2:	f01b fd99 	bl	8025918 <memcpy>
	}
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df6:	f001 f9c7 	bl	800b188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e02:	e011      	b.n	8009e28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d012      	beq.n	8009e32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3324      	adds	r3, #36	; 0x24
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 fcb5 	bl	800a780 <xTaskRemoveFromEventList>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e1c:	f000 fd8e 	bl	800a93c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dce9      	bgt.n	8009e04 <prvUnlockQueue+0x16>
 8009e30:	e000      	b.n	8009e34 <prvUnlockQueue+0x46>
					break;
 8009e32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	22ff      	movs	r2, #255	; 0xff
 8009e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e3c:	f001 f9d6 	bl	800b1ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e40:	f001 f9a2 	bl	800b188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e4c:	e011      	b.n	8009e72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d012      	beq.n	8009e7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3310      	adds	r3, #16
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fc90 	bl	800a780 <xTaskRemoveFromEventList>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e66:	f000 fd69 	bl	800a93c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dce9      	bgt.n	8009e4e <prvUnlockQueue+0x60>
 8009e7a:	e000      	b.n	8009e7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	22ff      	movs	r2, #255	; 0xff
 8009e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e86:	f001 f9b1 	bl	800b1ec <vPortExitCritical>
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e9a:	f001 f975 	bl	800b188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	e001      	b.n	8009eb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eb0:	f001 f99c 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec6:	f001 f95f 	bl	800b188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d102      	bne.n	8009edc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e001      	b.n	8009ee0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee0:	f001 f984 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b08e      	sub	sp, #56	; 0x38
 8009ef2:	af04      	add	r7, sp, #16
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
 8009efa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10b      	bne.n	8009f1a <xTaskCreateStatic+0x2c>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	b672      	cpsid	i
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	b662      	cpsie	i
 8009f16:	623b      	str	r3, [r7, #32]
 8009f18:	e7fe      	b.n	8009f18 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10b      	bne.n	8009f38 <xTaskCreateStatic+0x4a>
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	b672      	cpsid	i
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	b662      	cpsie	i
 8009f34:	61fb      	str	r3, [r7, #28]
 8009f36:	e7fe      	b.n	8009f36 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f38:	2358      	movs	r3, #88	; 0x58
 8009f3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b58      	cmp	r3, #88	; 0x58
 8009f40:	d00b      	beq.n	8009f5a <xTaskCreateStatic+0x6c>
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	b672      	cpsid	i
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	b662      	cpsie	i
 8009f56:	61bb      	str	r3, [r7, #24]
 8009f58:	e7fe      	b.n	8009f58 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d01e      	beq.n	8009fa0 <xTaskCreateStatic+0xb2>
 8009f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01b      	beq.n	8009fa0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	2202      	movs	r2, #2
 8009f76:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	9302      	str	r3, [sp, #8]
 8009f82:	f107 0314 	add.w	r3, r7, #20
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	68b9      	ldr	r1, [r7, #8]
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 f850 	bl	800a038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f9a:	f000 f8e1 	bl	800a160 <prvAddNewTaskToReadyList>
 8009f9e:	e001      	b.n	8009fa4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009fa4:	697b      	ldr	r3, [r7, #20]
	}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3728      	adds	r7, #40	; 0x28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b08c      	sub	sp, #48	; 0x30
 8009fb2:	af04      	add	r7, sp, #16
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fbe:	88fb      	ldrh	r3, [r7, #6]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fa02 	bl	800b3cc <pvPortMalloc>
 8009fc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00e      	beq.n	8009fee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fd0:	2058      	movs	r0, #88	; 0x58
 8009fd2:	f001 f9fb 	bl	800b3cc <pvPortMalloc>
 8009fd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8009fe4:	e005      	b.n	8009ff2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fe6:	6978      	ldr	r0, [r7, #20]
 8009fe8:	f001 fabc 	bl	800b564 <vPortFree>
 8009fec:	e001      	b.n	8009ff2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d017      	beq.n	800a028 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a000:	88fa      	ldrh	r2, [r7, #6]
 800a002:	2300      	movs	r3, #0
 800a004:	9303      	str	r3, [sp, #12]
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	9302      	str	r3, [sp, #8]
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f80e 	bl	800a038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a01c:	69f8      	ldr	r0, [r7, #28]
 800a01e:	f000 f89f 	bl	800a160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a022:	2301      	movs	r3, #1
 800a024:	61bb      	str	r3, [r7, #24]
 800a026:	e002      	b.n	800a02e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a02e:	69bb      	ldr	r3, [r7, #24]
	}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	461a      	mov	r2, r3
 800a050:	21a5      	movs	r1, #165	; 0xa5
 800a052:	f01b fc6c 	bl	802592e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a060:	440b      	add	r3, r1
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	f023 0307 	bic.w	r3, r3, #7
 800a06e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00b      	beq.n	800a092 <prvInitialiseNewTask+0x5a>
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	b672      	cpsid	i
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	b662      	cpsie	i
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e7fe      	b.n	800a090 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01f      	beq.n	800a0d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a098:	2300      	movs	r3, #0
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	e012      	b.n	800a0c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	7819      	ldrb	r1, [r3, #0]
 800a0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3334      	adds	r3, #52	; 0x34
 800a0ae:	460a      	mov	r2, r1
 800a0b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d006      	beq.n	800a0cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	2b0f      	cmp	r3, #15
 800a0c8:	d9e9      	bls.n	800a09e <prvInitialiseNewTask+0x66>
 800a0ca:	e000      	b.n	800a0ce <prvInitialiseNewTask+0x96>
			{
				break;
 800a0cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0d6:	e003      	b.n	800a0e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2b06      	cmp	r3, #6
 800a0e4:	d901      	bls.n	800a0ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0e6:	2306      	movs	r3, #6
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	3304      	adds	r3, #4
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe ff79 	bl	8008ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	3318      	adds	r3, #24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe ff74 	bl	8008ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a114:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	f1c3 0207 	rsb	r2, r3, #7
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a124:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2200      	movs	r2, #0
 800a12a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	2200      	movs	r2, #0
 800a130:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	69b8      	ldr	r0, [r7, #24]
 800a140:	f000 ff1a 	bl	800af78 <pxPortInitialiseStack>
 800a144:	4602      	mov	r2, r0
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a156:	bf00      	nop
 800a158:	3720      	adds	r7, #32
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a168:	f001 f80e 	bl	800b188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a16c:	4b2a      	ldr	r3, [pc, #168]	; (800a218 <prvAddNewTaskToReadyList+0xb8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	4a29      	ldr	r2, [pc, #164]	; (800a218 <prvAddNewTaskToReadyList+0xb8>)
 800a174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a176:	4b29      	ldr	r3, [pc, #164]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a17e:	4a27      	ldr	r2, [pc, #156]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a184:	4b24      	ldr	r3, [pc, #144]	; (800a218 <prvAddNewTaskToReadyList+0xb8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d110      	bne.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a18c:	f000 fbfc 	bl	800a988 <prvInitialiseTaskLists>
 800a190:	e00d      	b.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a192:	4b23      	ldr	r3, [pc, #140]	; (800a220 <prvAddNewTaskToReadyList+0xc0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d109      	bne.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a19a:	4b20      	ldr	r3, [pc, #128]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d802      	bhi.n	800a1ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1a8:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1ae:	4b1d      	ldr	r3, [pc, #116]	; (800a224 <prvAddNewTaskToReadyList+0xc4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	4a1b      	ldr	r2, [pc, #108]	; (800a224 <prvAddNewTaskToReadyList+0xc4>)
 800a1b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	2201      	movs	r2, #1
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	4b19      	ldr	r3, [pc, #100]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	4a18      	ldr	r2, [pc, #96]	; (800a228 <prvAddNewTaskToReadyList+0xc8>)
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4a15      	ldr	r2, [pc, #84]	; (800a22c <prvAddNewTaskToReadyList+0xcc>)
 800a1d8:	441a      	add	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fe ff16 	bl	8009012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1e6:	f001 f801 	bl	800b1ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <prvAddNewTaskToReadyList+0xc0>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00e      	beq.n	800a210 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1f2:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <prvAddNewTaskToReadyList+0xbc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d207      	bcs.n	800a210 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a200:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <prvAddNewTaskToReadyList+0xd0>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000498 	.word	0x20000498
 800a21c:	20000398 	.word	0x20000398
 800a220:	200004a4 	.word	0x200004a4
 800a224:	200004b4 	.word	0x200004b4
 800a228:	200004a0 	.word	0x200004a0
 800a22c:	2000039c 	.word	0x2000039c
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a23c:	2300      	movs	r3, #0
 800a23e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d018      	beq.n	800a278 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a246:	4b14      	ldr	r3, [pc, #80]	; (800a298 <vTaskDelay+0x64>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00b      	beq.n	800a266 <vTaskDelay+0x32>
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	b672      	cpsid	i
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	b662      	cpsie	i
 800a262:	60bb      	str	r3, [r7, #8]
 800a264:	e7fe      	b.n	800a264 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a266:	f000 f87d 	bl	800a364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a26a:	2100      	movs	r1, #0
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fe1d 	bl	800aeac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a272:	f000 f885 	bl	800a380 <xTaskResumeAll>
 800a276:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d107      	bne.n	800a28e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a27e:	4b07      	ldr	r3, [pc, #28]	; (800a29c <vTaskDelay+0x68>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	200004c0 	.word	0x200004c0
 800a29c:	e000ed04 	.word	0xe000ed04

0800a2a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08a      	sub	sp, #40	; 0x28
 800a2a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	1d39      	adds	r1, r7, #4
 800a2b2:	f107 0308 	add.w	r3, r7, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f6 fc96 	bl	8000be8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	9202      	str	r2, [sp, #8]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	460a      	mov	r2, r1
 800a2ce:	491f      	ldr	r1, [pc, #124]	; (800a34c <vTaskStartScheduler+0xac>)
 800a2d0:	481f      	ldr	r0, [pc, #124]	; (800a350 <vTaskStartScheduler+0xb0>)
 800a2d2:	f7ff fe0c 	bl	8009eee <xTaskCreateStatic>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	4b1e      	ldr	r3, [pc, #120]	; (800a354 <vTaskStartScheduler+0xb4>)
 800a2da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2dc:	4b1d      	ldr	r3, [pc, #116]	; (800a354 <vTaskStartScheduler+0xb4>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	e001      	b.n	800a2ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d117      	bne.n	800a324 <vTaskStartScheduler+0x84>
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a30a:	4b13      	ldr	r3, [pc, #76]	; (800a358 <vTaskStartScheduler+0xb8>)
 800a30c:	f04f 32ff 	mov.w	r2, #4294967295
 800a310:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <vTaskStartScheduler+0xbc>)
 800a314:	2201      	movs	r2, #1
 800a316:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a318:	4b11      	ldr	r3, [pc, #68]	; (800a360 <vTaskStartScheduler+0xc0>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a31e:	f000 feb7 	bl	800b090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a322:	e00f      	b.n	800a344 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d10b      	bne.n	800a344 <vTaskStartScheduler+0xa4>
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	b672      	cpsid	i
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	b662      	cpsie	i
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	e7fe      	b.n	800a342 <vTaskStartScheduler+0xa2>
}
 800a344:	bf00      	nop
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	08026920 	.word	0x08026920
 800a350:	0800a955 	.word	0x0800a955
 800a354:	200004bc 	.word	0x200004bc
 800a358:	200004b8 	.word	0x200004b8
 800a35c:	200004a4 	.word	0x200004a4
 800a360:	2000049c 	.word	0x2000049c

0800a364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a364:	b480      	push	{r7}
 800a366:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a368:	4b04      	ldr	r3, [pc, #16]	; (800a37c <vTaskSuspendAll+0x18>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3301      	adds	r3, #1
 800a36e:	4a03      	ldr	r2, [pc, #12]	; (800a37c <vTaskSuspendAll+0x18>)
 800a370:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a372:	bf00      	nop
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	200004c0 	.word	0x200004c0

0800a380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a38e:	4b42      	ldr	r3, [pc, #264]	; (800a498 <xTaskResumeAll+0x118>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <xTaskResumeAll+0x2e>
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	b672      	cpsid	i
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	b662      	cpsie	i
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	e7fe      	b.n	800a3ac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3ae:	f000 feeb 	bl	800b188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3b2:	4b39      	ldr	r3, [pc, #228]	; (800a498 <xTaskResumeAll+0x118>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	4a37      	ldr	r2, [pc, #220]	; (800a498 <xTaskResumeAll+0x118>)
 800a3ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3bc:	4b36      	ldr	r3, [pc, #216]	; (800a498 <xTaskResumeAll+0x118>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d161      	bne.n	800a488 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3c4:	4b35      	ldr	r3, [pc, #212]	; (800a49c <xTaskResumeAll+0x11c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d05d      	beq.n	800a488 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3cc:	e02e      	b.n	800a42c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ce:	4b34      	ldr	r3, [pc, #208]	; (800a4a0 <xTaskResumeAll+0x120>)
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3318      	adds	r3, #24
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fe76 	bl	80090cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fe71 	bl	80090cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	409a      	lsls	r2, r3
 800a3f2:	4b2c      	ldr	r3, [pc, #176]	; (800a4a4 <xTaskResumeAll+0x124>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	4a2a      	ldr	r2, [pc, #168]	; (800a4a4 <xTaskResumeAll+0x124>)
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4a27      	ldr	r2, [pc, #156]	; (800a4a8 <xTaskResumeAll+0x128>)
 800a40a:	441a      	add	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3304      	adds	r3, #4
 800a410:	4619      	mov	r1, r3
 800a412:	4610      	mov	r0, r2
 800a414:	f7fe fdfd 	bl	8009012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41c:	4b23      	ldr	r3, [pc, #140]	; (800a4ac <xTaskResumeAll+0x12c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	429a      	cmp	r2, r3
 800a424:	d302      	bcc.n	800a42c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a426:	4b22      	ldr	r3, [pc, #136]	; (800a4b0 <xTaskResumeAll+0x130>)
 800a428:	2201      	movs	r2, #1
 800a42a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a42c:	4b1c      	ldr	r3, [pc, #112]	; (800a4a0 <xTaskResumeAll+0x120>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1cc      	bne.n	800a3ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a43a:	f000 fb41 	bl	800aac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a43e:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <xTaskResumeAll+0x134>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d010      	beq.n	800a46c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a44a:	f000 f837 	bl	800a4bc <xTaskIncrementTick>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a454:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <xTaskResumeAll+0x130>)
 800a456:	2201      	movs	r2, #1
 800a458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1f1      	bne.n	800a44a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a466:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <xTaskResumeAll+0x134>)
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a46c:	4b10      	ldr	r3, [pc, #64]	; (800a4b0 <xTaskResumeAll+0x130>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d009      	beq.n	800a488 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a474:	2301      	movs	r3, #1
 800a476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <xTaskResumeAll+0x138>)
 800a47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a488:	f000 feb0 	bl	800b1ec <vPortExitCritical>

	return xAlreadyYielded;
 800a48c:	68bb      	ldr	r3, [r7, #8]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200004c0 	.word	0x200004c0
 800a49c:	20000498 	.word	0x20000498
 800a4a0:	20000458 	.word	0x20000458
 800a4a4:	200004a0 	.word	0x200004a0
 800a4a8:	2000039c 	.word	0x2000039c
 800a4ac:	20000398 	.word	0x20000398
 800a4b0:	200004ac 	.word	0x200004ac
 800a4b4:	200004a8 	.word	0x200004a8
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c6:	4b4f      	ldr	r3, [pc, #316]	; (800a604 <xTaskIncrementTick+0x148>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f040 8089 	bne.w	800a5e2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4d0:	4b4d      	ldr	r3, [pc, #308]	; (800a608 <xTaskIncrementTick+0x14c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4d8:	4a4b      	ldr	r2, [pc, #300]	; (800a608 <xTaskIncrementTick+0x14c>)
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d121      	bne.n	800a528 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4e4:	4b49      	ldr	r3, [pc, #292]	; (800a60c <xTaskIncrementTick+0x150>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00b      	beq.n	800a506 <xTaskIncrementTick+0x4a>
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	b672      	cpsid	i
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	b662      	cpsie	i
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	e7fe      	b.n	800a504 <xTaskIncrementTick+0x48>
 800a506:	4b41      	ldr	r3, [pc, #260]	; (800a60c <xTaskIncrementTick+0x150>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	4b40      	ldr	r3, [pc, #256]	; (800a610 <xTaskIncrementTick+0x154>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a3e      	ldr	r2, [pc, #248]	; (800a60c <xTaskIncrementTick+0x150>)
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	4a3e      	ldr	r2, [pc, #248]	; (800a610 <xTaskIncrementTick+0x154>)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	4b3e      	ldr	r3, [pc, #248]	; (800a614 <xTaskIncrementTick+0x158>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3301      	adds	r3, #1
 800a520:	4a3c      	ldr	r2, [pc, #240]	; (800a614 <xTaskIncrementTick+0x158>)
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	f000 facc 	bl	800aac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a528:	4b3b      	ldr	r3, [pc, #236]	; (800a618 <xTaskIncrementTick+0x15c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d348      	bcc.n	800a5c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a532:	4b36      	ldr	r3, [pc, #216]	; (800a60c <xTaskIncrementTick+0x150>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d104      	bne.n	800a546 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a53c:	4b36      	ldr	r3, [pc, #216]	; (800a618 <xTaskIncrementTick+0x15c>)
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295
 800a542:	601a      	str	r2, [r3, #0]
					break;
 800a544:	e03e      	b.n	800a5c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a546:	4b31      	ldr	r3, [pc, #196]	; (800a60c <xTaskIncrementTick+0x150>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d203      	bcs.n	800a566 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a55e:	4a2e      	ldr	r2, [pc, #184]	; (800a618 <xTaskIncrementTick+0x15c>)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a564:	e02e      	b.n	800a5c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	3304      	adds	r3, #4
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fdae 	bl	80090cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3318      	adds	r3, #24
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe fda5 	bl	80090cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	2201      	movs	r2, #1
 800a588:	409a      	lsls	r2, r3
 800a58a:	4b24      	ldr	r3, [pc, #144]	; (800a61c <xTaskIncrementTick+0x160>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4313      	orrs	r3, r2
 800a590:	4a22      	ldr	r2, [pc, #136]	; (800a61c <xTaskIncrementTick+0x160>)
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	4613      	mov	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4a1f      	ldr	r2, [pc, #124]	; (800a620 <xTaskIncrementTick+0x164>)
 800a5a2:	441a      	add	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f7fe fd31 	bl	8009012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b4:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <xTaskIncrementTick+0x168>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d3b9      	bcc.n	800a532 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5c2:	e7b6      	b.n	800a532 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5c4:	4b17      	ldr	r3, [pc, #92]	; (800a624 <xTaskIncrementTick+0x168>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ca:	4915      	ldr	r1, [pc, #84]	; (800a620 <xTaskIncrementTick+0x164>)
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	440b      	add	r3, r1
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d907      	bls.n	800a5ec <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e004      	b.n	800a5ec <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5e2:	4b11      	ldr	r3, [pc, #68]	; (800a628 <xTaskIncrementTick+0x16c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	4a0f      	ldr	r2, [pc, #60]	; (800a628 <xTaskIncrementTick+0x16c>)
 800a5ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5ec:	4b0f      	ldr	r3, [pc, #60]	; (800a62c <xTaskIncrementTick+0x170>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5f8:	697b      	ldr	r3, [r7, #20]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200004c0 	.word	0x200004c0
 800a608:	2000049c 	.word	0x2000049c
 800a60c:	20000450 	.word	0x20000450
 800a610:	20000454 	.word	0x20000454
 800a614:	200004b0 	.word	0x200004b0
 800a618:	200004b8 	.word	0x200004b8
 800a61c:	200004a0 	.word	0x200004a0
 800a620:	2000039c 	.word	0x2000039c
 800a624:	20000398 	.word	0x20000398
 800a628:	200004a8 	.word	0x200004a8
 800a62c:	200004ac 	.word	0x200004ac

0800a630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b088      	sub	sp, #32
 800a634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a636:	4b3a      	ldr	r3, [pc, #232]	; (800a720 <vTaskSwitchContext+0xf0>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a63e:	4b39      	ldr	r3, [pc, #228]	; (800a724 <vTaskSwitchContext+0xf4>)
 800a640:	2201      	movs	r2, #1
 800a642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a644:	e067      	b.n	800a716 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800a646:	4b37      	ldr	r3, [pc, #220]	; (800a724 <vTaskSwitchContext+0xf4>)
 800a648:	2200      	movs	r2, #0
 800a64a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a64c:	4b36      	ldr	r3, [pc, #216]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	429a      	cmp	r2, r3
 800a662:	d111      	bne.n	800a688 <vTaskSwitchContext+0x58>
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	3304      	adds	r3, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d10b      	bne.n	800a688 <vTaskSwitchContext+0x58>
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	3308      	adds	r3, #8
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d105      	bne.n	800a688 <vTaskSwitchContext+0x58>
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	330c      	adds	r3, #12
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	429a      	cmp	r2, r3
 800a686:	d008      	beq.n	800a69a <vTaskSwitchContext+0x6a>
 800a688:	4b27      	ldr	r3, [pc, #156]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	4b26      	ldr	r3, [pc, #152]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3334      	adds	r3, #52	; 0x34
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7f6 fa94 	bl	8000bc2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a69a:	4b24      	ldr	r3, [pc, #144]	; (800a72c <vTaskSwitchContext+0xfc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	fab3 f383 	clz	r3, r3
 800a6a6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	f1c3 031f 	rsb	r3, r3, #31
 800a6ae:	617b      	str	r3, [r7, #20]
 800a6b0:	491f      	ldr	r1, [pc, #124]	; (800a730 <vTaskSwitchContext+0x100>)
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <vTaskSwitchContext+0xac>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	b672      	cpsid	i
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	b662      	cpsie	i
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	e7fe      	b.n	800a6da <vTaskSwitchContext+0xaa>
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4a12      	ldr	r2, [pc, #72]	; (800a730 <vTaskSwitchContext+0x100>)
 800a6e8:	4413      	add	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	605a      	str	r2, [r3, #4]
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d104      	bne.n	800a70c <vTaskSwitchContext+0xdc>
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	605a      	str	r2, [r3, #4]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	4a05      	ldr	r2, [pc, #20]	; (800a728 <vTaskSwitchContext+0xf8>)
 800a714:	6013      	str	r3, [r2, #0]
}
 800a716:	bf00      	nop
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	200004c0 	.word	0x200004c0
 800a724:	200004ac 	.word	0x200004ac
 800a728:	20000398 	.word	0x20000398
 800a72c:	200004a0 	.word	0x200004a0
 800a730:	2000039c 	.word	0x2000039c

0800a734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <vTaskPlaceOnEventList+0x28>
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	b672      	cpsid	i
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	b662      	cpsie	i
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	e7fe      	b.n	800a75a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <vTaskPlaceOnEventList+0x48>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3318      	adds	r3, #24
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7fe fc78 	bl	800905a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a76a:	2101      	movs	r1, #1
 800a76c:	6838      	ldr	r0, [r7, #0]
 800a76e:	f000 fb9d 	bl	800aeac <prvAddCurrentTaskToDelayedList>
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000398 	.word	0x20000398

0800a780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <xTaskRemoveFromEventList+0x2e>
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	b672      	cpsid	i
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	b662      	cpsie	i
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e7fe      	b.n	800a7ac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fc8a 	bl	80090cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <xTaskRemoveFromEventList+0xb0>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d11c      	bne.n	800a7fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fc81 	bl	80090cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	409a      	lsls	r2, r3
 800a7d2:	4b18      	ldr	r3, [pc, #96]	; (800a834 <xTaskRemoveFromEventList+0xb4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	4a16      	ldr	r2, [pc, #88]	; (800a834 <xTaskRemoveFromEventList+0xb4>)
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4a13      	ldr	r2, [pc, #76]	; (800a838 <xTaskRemoveFromEventList+0xb8>)
 800a7ea:	441a      	add	r2, r3
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe fc0d 	bl	8009012 <vListInsertEnd>
 800a7f8:	e005      	b.n	800a806 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	4619      	mov	r1, r3
 800a800:	480e      	ldr	r0, [pc, #56]	; (800a83c <xTaskRemoveFromEventList+0xbc>)
 800a802:	f7fe fc06 	bl	8009012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <xTaskRemoveFromEventList+0xc0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	429a      	cmp	r2, r3
 800a812:	d905      	bls.n	800a820 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <xTaskRemoveFromEventList+0xc4>)
 800a81a:	2201      	movs	r2, #1
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	e001      	b.n	800a824 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a824:	697b      	ldr	r3, [r7, #20]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	200004c0 	.word	0x200004c0
 800a834:	200004a0 	.word	0x200004a0
 800a838:	2000039c 	.word	0x2000039c
 800a83c:	20000458 	.word	0x20000458
 800a840:	20000398 	.word	0x20000398
 800a844:	200004ac 	.word	0x200004ac

0800a848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a850:	4b06      	ldr	r3, [pc, #24]	; (800a86c <vTaskInternalSetTimeOutState+0x24>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <vTaskInternalSetTimeOutState+0x28>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	605a      	str	r2, [r3, #4]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	200004b0 	.word	0x200004b0
 800a870:	2000049c 	.word	0x2000049c

0800a874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10b      	bne.n	800a89c <xTaskCheckForTimeOut+0x28>
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	b672      	cpsid	i
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	b662      	cpsie	i
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	e7fe      	b.n	800a89a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <xTaskCheckForTimeOut+0x46>
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	b672      	cpsid	i
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	b662      	cpsie	i
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e7fe      	b.n	800a8b8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800a8ba:	f000 fc65 	bl	800b188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8be:	4b1d      	ldr	r3, [pc, #116]	; (800a934 <xTaskCheckForTimeOut+0xc0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d6:	d102      	bne.n	800a8de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	61fb      	str	r3, [r7, #28]
 800a8dc:	e023      	b.n	800a926 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	4b15      	ldr	r3, [pc, #84]	; (800a938 <xTaskCheckForTimeOut+0xc4>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d007      	beq.n	800a8fa <xTaskCheckForTimeOut+0x86>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d302      	bcc.n	800a8fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	e015      	b.n	800a926 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	429a      	cmp	r2, r3
 800a902:	d20b      	bcs.n	800a91c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff99 	bl	800a848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	e004      	b.n	800a926 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a922:	2301      	movs	r3, #1
 800a924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a926:	f000 fc61 	bl	800b1ec <vPortExitCritical>

	return xReturn;
 800a92a:	69fb      	ldr	r3, [r7, #28]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3720      	adds	r7, #32
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	2000049c 	.word	0x2000049c
 800a938:	200004b0 	.word	0x200004b0

0800a93c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <vTaskMissedYield+0x14>)
 800a942:	2201      	movs	r2, #1
 800a944:	601a      	str	r2, [r3, #0]
}
 800a946:	bf00      	nop
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	200004ac 	.word	0x200004ac

0800a954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a95c:	f000 f854 	bl	800aa08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <prvIdleTask+0x2c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d907      	bls.n	800a978 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <prvIdleTask+0x30>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a978:	f7f6 f91c 	bl	8000bb4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a97c:	e7ee      	b.n	800a95c <prvIdleTask+0x8>
 800a97e:	bf00      	nop
 800a980:	2000039c 	.word	0x2000039c
 800a984:	e000ed04 	.word	0xe000ed04

0800a988 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a98e:	2300      	movs	r3, #0
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	e00c      	b.n	800a9ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	4613      	mov	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4a12      	ldr	r2, [pc, #72]	; (800a9e8 <prvInitialiseTaskLists+0x60>)
 800a9a0:	4413      	add	r3, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fe fb08 	bl	8008fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b06      	cmp	r3, #6
 800a9b2:	d9ef      	bls.n	800a994 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9b4:	480d      	ldr	r0, [pc, #52]	; (800a9ec <prvInitialiseTaskLists+0x64>)
 800a9b6:	f7fe faff 	bl	8008fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9ba:	480d      	ldr	r0, [pc, #52]	; (800a9f0 <prvInitialiseTaskLists+0x68>)
 800a9bc:	f7fe fafc 	bl	8008fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9c0:	480c      	ldr	r0, [pc, #48]	; (800a9f4 <prvInitialiseTaskLists+0x6c>)
 800a9c2:	f7fe faf9 	bl	8008fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9c6:	480c      	ldr	r0, [pc, #48]	; (800a9f8 <prvInitialiseTaskLists+0x70>)
 800a9c8:	f7fe faf6 	bl	8008fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9cc:	480b      	ldr	r0, [pc, #44]	; (800a9fc <prvInitialiseTaskLists+0x74>)
 800a9ce:	f7fe faf3 	bl	8008fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <prvInitialiseTaskLists+0x78>)
 800a9d4:	4a05      	ldr	r2, [pc, #20]	; (800a9ec <prvInitialiseTaskLists+0x64>)
 800a9d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <prvInitialiseTaskLists+0x7c>)
 800a9da:	4a05      	ldr	r2, [pc, #20]	; (800a9f0 <prvInitialiseTaskLists+0x68>)
 800a9dc:	601a      	str	r2, [r3, #0]
}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	2000039c 	.word	0x2000039c
 800a9ec:	20000428 	.word	0x20000428
 800a9f0:	2000043c 	.word	0x2000043c
 800a9f4:	20000458 	.word	0x20000458
 800a9f8:	2000046c 	.word	0x2000046c
 800a9fc:	20000484 	.word	0x20000484
 800aa00:	20000450 	.word	0x20000450
 800aa04:	20000454 	.word	0x20000454

0800aa08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa0e:	e019      	b.n	800aa44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa10:	f000 fbba 	bl	800b188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <prvCheckTasksWaitingTermination+0x4c>)
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fb53 	bl	80090cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa26:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <prvCheckTasksWaitingTermination+0x50>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	4a0a      	ldr	r2, [pc, #40]	; (800aa58 <prvCheckTasksWaitingTermination+0x50>)
 800aa2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa30:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <prvCheckTasksWaitingTermination+0x54>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <prvCheckTasksWaitingTermination+0x54>)
 800aa38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa3a:	f000 fbd7 	bl	800b1ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f80e 	bl	800aa60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa44:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <prvCheckTasksWaitingTermination+0x54>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e1      	bne.n	800aa10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	2000046c 	.word	0x2000046c
 800aa58:	20000498 	.word	0x20000498
 800aa5c:	20000480 	.word	0x20000480

0800aa60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d108      	bne.n	800aa84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fd74 	bl	800b564 <vPortFree>
				vPortFree( pxTCB );
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fd71 	bl	800b564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa82:	e019      	b.n	800aab8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d103      	bne.n	800aa96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fd68 	bl	800b564 <vPortFree>
	}
 800aa94:	e010      	b.n	800aab8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d00b      	beq.n	800aab8 <prvDeleteTCB+0x58>
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	b672      	cpsid	i
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	b662      	cpsie	i
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e7fe      	b.n	800aab6 <prvDeleteTCB+0x56>
	}
 800aab8:	bf00      	nop
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvResetNextTaskUnblockTime+0x38>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d104      	bne.n	800aada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <prvResetNextTaskUnblockTime+0x3c>)
 800aad2:	f04f 32ff 	mov.w	r2, #4294967295
 800aad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aad8:	e008      	b.n	800aaec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aada:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <prvResetNextTaskUnblockTime+0x38>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4a04      	ldr	r2, [pc, #16]	; (800aafc <prvResetNextTaskUnblockTime+0x3c>)
 800aaea:	6013      	str	r3, [r2, #0]
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	20000450 	.word	0x20000450
 800aafc:	200004b8 	.word	0x200004b8

0800ab00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <xTaskGetSchedulerState+0x34>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	607b      	str	r3, [r7, #4]
 800ab12:	e008      	b.n	800ab26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab14:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <xTaskGetSchedulerState+0x38>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	e001      	b.n	800ab26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab22:	2300      	movs	r3, #0
 800ab24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab26:	687b      	ldr	r3, [r7, #4]
	}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	200004a4 	.word	0x200004a4
 800ab38:	200004c0 	.word	0x200004c0

0800ab3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d069      	beq.n	800ac26 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d259      	bcs.n	800ac14 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	db06      	blt.n	800ab76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab68:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	f1c3 0207 	rsb	r2, r3, #7
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	6959      	ldr	r1, [r3, #20]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4a2b      	ldr	r2, [pc, #172]	; (800ac34 <xTaskPriorityInherit+0xf8>)
 800ab88:	4413      	add	r3, r2
 800ab8a:	4299      	cmp	r1, r3
 800ab8c:	d13a      	bne.n	800ac04 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	3304      	adds	r3, #4
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fa9a 	bl	80090cc <uxListRemove>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d115      	bne.n	800abca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba2:	4924      	ldr	r1, [pc, #144]	; (800ac34 <xTaskPriorityInherit+0xf8>)
 800aba4:	4613      	mov	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	440b      	add	r3, r1
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xTaskPriorityInherit+0x8e>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb8:	2201      	movs	r2, #1
 800abba:	fa02 f303 	lsl.w	r3, r2, r3
 800abbe:	43da      	mvns	r2, r3
 800abc0:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4013      	ands	r3, r2
 800abc6:	4a1c      	ldr	r2, [pc, #112]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abc8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abca:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	2201      	movs	r2, #1
 800abda:	409a      	lsls	r2, r3
 800abdc:	4b16      	ldr	r3, [pc, #88]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <xTaskPriorityInherit+0xfc>)
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <xTaskPriorityInherit+0xf8>)
 800abf4:	441a      	add	r2, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	3304      	adds	r3, #4
 800abfa:	4619      	mov	r1, r3
 800abfc:	4610      	mov	r0, r2
 800abfe:	f7fe fa08 	bl	8009012 <vListInsertEnd>
 800ac02:	e004      	b.n	800ac0e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	e008      	b.n	800ac26 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac18:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <xTaskPriorityInherit+0xf4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d201      	bcs.n	800ac26 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac22:	2301      	movs	r3, #1
 800ac24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac26:	68fb      	ldr	r3, [r7, #12]
	}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20000398 	.word	0x20000398
 800ac34:	2000039c 	.word	0x2000039c
 800ac38:	200004a0 	.word	0x200004a0

0800ac3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d070      	beq.n	800ad34 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac52:	4b3b      	ldr	r3, [pc, #236]	; (800ad40 <xTaskPriorityDisinherit+0x104>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d00b      	beq.n	800ac74 <xTaskPriorityDisinherit+0x38>
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	b672      	cpsid	i
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	b662      	cpsie	i
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	e7fe      	b.n	800ac72 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <xTaskPriorityDisinherit+0x58>
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	b672      	cpsid	i
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	b662      	cpsie	i
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	e7fe      	b.n	800ac92 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac98:	1e5a      	subs	r2, r3, #1
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d044      	beq.n	800ad34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d140      	bne.n	800ad34 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	3304      	adds	r3, #4
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fa08 	bl	80090cc <uxListRemove>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d115      	bne.n	800acee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc6:	491f      	ldr	r1, [pc, #124]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <xTaskPriorityDisinherit+0xb2>
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	2201      	movs	r2, #1
 800acde:	fa02 f303 	lsl.w	r3, r2, r3
 800ace2:	43da      	mvns	r2, r3
 800ace4:	4b18      	ldr	r3, [pc, #96]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4013      	ands	r3, r2
 800acea:	4a17      	ldr	r2, [pc, #92]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800acec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	f1c3 0207 	rsb	r2, r3, #7
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad06:	2201      	movs	r2, #1
 800ad08:	409a      	lsls	r2, r3
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	4a0d      	ldr	r2, [pc, #52]	; (800ad48 <xTaskPriorityDisinherit+0x10c>)
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4a08      	ldr	r2, [pc, #32]	; (800ad44 <xTaskPriorityDisinherit+0x108>)
 800ad22:	441a      	add	r2, r3
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	3304      	adds	r3, #4
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	f7fe f971 	bl	8009012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad30:	2301      	movs	r3, #1
 800ad32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad34:	697b      	ldr	r3, [r7, #20]
	}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20000398 	.word	0x20000398
 800ad44:	2000039c 	.word	0x2000039c
 800ad48:	200004a0 	.word	0x200004a0

0800ad4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 8085 	beq.w	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	b672      	cpsid	i
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	b662      	cpsie	i
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	e7fe      	b.n	800ad84 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d902      	bls.n	800ad96 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	e002      	b.n	800ad9c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d064      	beq.n	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	429a      	cmp	r2, r3
 800adae:	d15f      	bne.n	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800adb0:	4b31      	ldr	r3, [pc, #196]	; (800ae78 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d10b      	bne.n	800add2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	b672      	cpsid	i
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	b662      	cpsie	i
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	e7fe      	b.n	800add0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	69fa      	ldr	r2, [r7, #28]
 800addc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	db04      	blt.n	800adf0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	f1c3 0207 	rsb	r2, r3, #7
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	6959      	ldr	r1, [r3, #20]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4a1f      	ldr	r2, [pc, #124]	; (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae00:	4413      	add	r3, r2
 800ae02:	4299      	cmp	r1, r3
 800ae04:	d134      	bne.n	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe f95e 	bl	80090cc <uxListRemove>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d115      	bne.n	800ae42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1a:	4918      	ldr	r1, [pc, #96]	; (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	440b      	add	r3, r1
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10a      	bne.n	800ae42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	2201      	movs	r2, #1
 800ae32:	fa02 f303 	lsl.w	r3, r2, r3
 800ae36:	43da      	mvns	r2, r3
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	4a10      	ldr	r2, [pc, #64]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	2201      	movs	r2, #1
 800ae48:	409a      	lsls	r2, r3
 800ae4a:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	4a0b      	ldr	r2, [pc, #44]	; (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae58:	4613      	mov	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4a06      	ldr	r2, [pc, #24]	; (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae62:	441a      	add	r2, r3
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	3304      	adds	r3, #4
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f7fe f8d1 	bl	8009012 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae70:	bf00      	nop
 800ae72:	3720      	adds	r7, #32
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20000398 	.word	0x20000398
 800ae7c:	2000039c 	.word	0x2000039c
 800ae80:	200004a0 	.word	0x200004a0

0800ae84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae84:	b480      	push	{r7}
 800ae86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae88:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d004      	beq.n	800ae9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae96:	3201      	adds	r2, #1
 800ae98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae9a:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
	}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20000398 	.word	0x20000398

0800aeac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aeb6:	4b29      	ldr	r3, [pc, #164]	; (800af5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aebc:	4b28      	ldr	r3, [pc, #160]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe f902 	bl	80090cc <uxListRemove>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10b      	bne.n	800aee6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aece:	4b24      	ldr	r3, [pc, #144]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	2201      	movs	r2, #1
 800aed6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeda:	43da      	mvns	r2, r3
 800aedc:	4b21      	ldr	r3, [pc, #132]	; (800af64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4013      	ands	r3, r2
 800aee2:	4a20      	ldr	r2, [pc, #128]	; (800af64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aee4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeec:	d10a      	bne.n	800af04 <prvAddCurrentTaskToDelayedList+0x58>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aef4:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3304      	adds	r3, #4
 800aefa:	4619      	mov	r1, r3
 800aefc:	481a      	ldr	r0, [pc, #104]	; (800af68 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aefe:	f7fe f888 	bl	8009012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af02:	e026      	b.n	800af52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4413      	add	r3, r2
 800af0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af0c:	4b14      	ldr	r3, [pc, #80]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d209      	bcs.n	800af30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af1c:	4b13      	ldr	r3, [pc, #76]	; (800af6c <prvAddCurrentTaskToDelayedList+0xc0>)
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3304      	adds	r3, #4
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	f7fe f896 	bl	800905a <vListInsert>
}
 800af2e:	e010      	b.n	800af52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af30:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <prvAddCurrentTaskToDelayedList+0xc4>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3304      	adds	r3, #4
 800af3a:	4619      	mov	r1, r3
 800af3c:	4610      	mov	r0, r2
 800af3e:	f7fe f88c 	bl	800905a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af42:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d202      	bcs.n	800af52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800af4c:	4a09      	ldr	r2, [pc, #36]	; (800af74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	6013      	str	r3, [r2, #0]
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	2000049c 	.word	0x2000049c
 800af60:	20000398 	.word	0x20000398
 800af64:	200004a0 	.word	0x200004a0
 800af68:	20000484 	.word	0x20000484
 800af6c:	20000454 	.word	0x20000454
 800af70:	20000450 	.word	0x20000450
 800af74:	200004b8 	.word	0x200004b8

0800af78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	3b04      	subs	r3, #4
 800af88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3b04      	subs	r3, #4
 800af96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	f023 0201 	bic.w	r2, r3, #1
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3b04      	subs	r3, #4
 800afa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afa8:	4a0c      	ldr	r2, [pc, #48]	; (800afdc <pxPortInitialiseStack+0x64>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3b14      	subs	r3, #20
 800afb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3b04      	subs	r3, #4
 800afbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f06f 0202 	mvn.w	r2, #2
 800afc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3b20      	subs	r3, #32
 800afcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afce:	68fb      	ldr	r3, [r7, #12]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	0800afe1 	.word	0x0800afe1

0800afe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <prvTaskExitError+0x58>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff2:	d00b      	beq.n	800b00c <prvTaskExitError+0x2c>
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	b672      	cpsid	i
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	b662      	cpsie	i
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	e7fe      	b.n	800b00a <prvTaskExitError+0x2a>
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	b672      	cpsid	i
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	b662      	cpsie	i
 800b020:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b022:	bf00      	nop
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0fc      	beq.n	800b024 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b02a:	bf00      	nop
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	20000038 	.word	0x20000038
 800b03c:	00000000 	.word	0x00000000

0800b040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <pxCurrentTCBConst2>)
 800b042:	6819      	ldr	r1, [r3, #0]
 800b044:	6808      	ldr	r0, [r1, #0]
 800b046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	f380 8809 	msr	PSP, r0
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f04f 0000 	mov.w	r0, #0
 800b056:	f380 8811 	msr	BASEPRI, r0
 800b05a:	4770      	bx	lr
 800b05c:	f3af 8000 	nop.w

0800b060 <pxCurrentTCBConst2>:
 800b060:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop

0800b068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b068:	4808      	ldr	r0, [pc, #32]	; (800b08c <prvPortStartFirstTask+0x24>)
 800b06a:	6800      	ldr	r0, [r0, #0]
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f380 8808 	msr	MSP, r0
 800b072:	f04f 0000 	mov.w	r0, #0
 800b076:	f380 8814 	msr	CONTROL, r0
 800b07a:	b662      	cpsie	i
 800b07c:	b661      	cpsie	f
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	df00      	svc	0
 800b088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b08a:	bf00      	nop
 800b08c:	e000ed08 	.word	0xe000ed08

0800b090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b096:	4b36      	ldr	r3, [pc, #216]	; (800b170 <xPortStartScheduler+0xe0>)
 800b098:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	22ff      	movs	r2, #255	; 0xff
 800b0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0b0:	78fb      	ldrb	r3, [r7, #3]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	4b2e      	ldr	r3, [pc, #184]	; (800b174 <xPortStartScheduler+0xe4>)
 800b0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0be:	4b2e      	ldr	r3, [pc, #184]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0c4:	e009      	b.n	800b0da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b0c6:	4b2c      	ldr	r3, [pc, #176]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	4a2a      	ldr	r2, [pc, #168]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0da:	78fb      	ldrb	r3, [r7, #3]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0e2:	2b80      	cmp	r3, #128	; 0x80
 800b0e4:	d0ef      	beq.n	800b0c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0e6:	4b24      	ldr	r3, [pc, #144]	; (800b178 <xPortStartScheduler+0xe8>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f1c3 0307 	rsb	r3, r3, #7
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d00b      	beq.n	800b10a <xPortStartScheduler+0x7a>
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	b672      	cpsid	i
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	b662      	cpsie	i
 800b106:	60bb      	str	r3, [r7, #8]
 800b108:	e7fe      	b.n	800b108 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b10a:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <xPortStartScheduler+0xe8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	4a19      	ldr	r2, [pc, #100]	; (800b178 <xPortStartScheduler+0xe8>)
 800b112:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b114:	4b18      	ldr	r3, [pc, #96]	; (800b178 <xPortStartScheduler+0xe8>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b11c:	4a16      	ldr	r2, [pc, #88]	; (800b178 <xPortStartScheduler+0xe8>)
 800b11e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	b2da      	uxtb	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b128:	4b14      	ldr	r3, [pc, #80]	; (800b17c <xPortStartScheduler+0xec>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a13      	ldr	r2, [pc, #76]	; (800b17c <xPortStartScheduler+0xec>)
 800b12e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b132:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b134:	4b11      	ldr	r3, [pc, #68]	; (800b17c <xPortStartScheduler+0xec>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a10      	ldr	r2, [pc, #64]	; (800b17c <xPortStartScheduler+0xec>)
 800b13a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b13e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b140:	f000 f8d4 	bl	800b2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b144:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <xPortStartScheduler+0xf0>)
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b14a:	f000 f8f3 	bl	800b334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b14e:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <xPortStartScheduler+0xf4>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a0c      	ldr	r2, [pc, #48]	; (800b184 <xPortStartScheduler+0xf4>)
 800b154:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b158:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b15a:	f7ff ff85 	bl	800b068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b15e:	f7ff fa67 	bl	800a630 <vTaskSwitchContext>
	prvTaskExitError();
 800b162:	f7ff ff3d 	bl	800afe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	e000e400 	.word	0xe000e400
 800b174:	200004c4 	.word	0x200004c4
 800b178:	200004c8 	.word	0x200004c8
 800b17c:	e000ed20 	.word	0xe000ed20
 800b180:	20000038 	.word	0x20000038
 800b184:	e000ef34 	.word	0xe000ef34

0800b188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	b672      	cpsid	i
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	b662      	cpsie	i
 800b1a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1a4:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <vPortEnterCritical+0x5c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	4a0e      	ldr	r2, [pc, #56]	; (800b1e4 <vPortEnterCritical+0x5c>)
 800b1ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <vPortEnterCritical+0x5c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d110      	bne.n	800b1d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1b6:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <vPortEnterCritical+0x60>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <vPortEnterCritical+0x50>
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	b672      	cpsid	i
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	b662      	cpsie	i
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	e7fe      	b.n	800b1d6 <vPortEnterCritical+0x4e>
	}
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	20000038 	.word	0x20000038
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1f2:	4b12      	ldr	r3, [pc, #72]	; (800b23c <vPortExitCritical+0x50>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10b      	bne.n	800b212 <vPortExitCritical+0x26>
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	b672      	cpsid	i
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	b662      	cpsie	i
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	e7fe      	b.n	800b210 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <vPortExitCritical+0x50>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3b01      	subs	r3, #1
 800b218:	4a08      	ldr	r2, [pc, #32]	; (800b23c <vPortExitCritical+0x50>)
 800b21a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b21c:	4b07      	ldr	r3, [pc, #28]	; (800b23c <vPortExitCritical+0x50>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d104      	bne.n	800b22e <vPortExitCritical+0x42>
 800b224:	2300      	movs	r3, #0
 800b226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	20000038 	.word	0x20000038

0800b240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b240:	f3ef 8009 	mrs	r0, PSP
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <pxCurrentTCBConst>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	f01e 0f10 	tst.w	lr, #16
 800b250:	bf08      	it	eq
 800b252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	6010      	str	r0, [r2, #0]
 800b25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b260:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b264:	b672      	cpsid	i
 800b266:	f380 8811 	msr	BASEPRI, r0
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	b662      	cpsie	i
 800b274:	f7ff f9dc 	bl	800a630 <vTaskSwitchContext>
 800b278:	f04f 0000 	mov.w	r0, #0
 800b27c:	f380 8811 	msr	BASEPRI, r0
 800b280:	bc09      	pop	{r0, r3}
 800b282:	6819      	ldr	r1, [r3, #0]
 800b284:	6808      	ldr	r0, [r1, #0]
 800b286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28a:	f01e 0f10 	tst.w	lr, #16
 800b28e:	bf08      	it	eq
 800b290:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b294:	f380 8809 	msr	PSP, r0
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop

0800b2a0 <pxCurrentTCBConst>:
 800b2a0:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop

0800b2a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	b672      	cpsid	i
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	b662      	cpsie	i
 800b2c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2c4:	f7ff f8fa 	bl	800a4bc <xTaskIncrementTick>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2ce:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <SysTick_Handler+0x40>)
 800b2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <vPortSetupTimerInterrupt+0x38>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <vPortSetupTimerInterrupt+0x3c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0a      	ldr	r2, [pc, #40]	; (800b32c <vPortSetupTimerInterrupt+0x40>)
 800b302:	fba2 2303 	umull	r2, r3, r2, r3
 800b306:	099b      	lsrs	r3, r3, #6
 800b308:	4a09      	ldr	r2, [pc, #36]	; (800b330 <vPortSetupTimerInterrupt+0x44>)
 800b30a:	3b01      	subs	r3, #1
 800b30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <vPortSetupTimerInterrupt+0x34>)
 800b310:	2207      	movs	r2, #7
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	e000e010 	.word	0xe000e010
 800b324:	e000e018 	.word	0xe000e018
 800b328:	2000002c 	.word	0x2000002c
 800b32c:	10624dd3 	.word	0x10624dd3
 800b330:	e000e014 	.word	0xe000e014

0800b334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b344 <vPortEnableVFP+0x10>
 800b338:	6801      	ldr	r1, [r0, #0]
 800b33a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b33e:	6001      	str	r1, [r0, #0]
 800b340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b342:	bf00      	nop
 800b344:	e000ed88 	.word	0xe000ed88

0800b348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b34e:	f3ef 8305 	mrs	r3, IPSR
 800b352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b0f      	cmp	r3, #15
 800b358:	d915      	bls.n	800b386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b35a:	4a18      	ldr	r2, [pc, #96]	; (800b3bc <vPortValidateInterruptPriority+0x74>)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b364:	4b16      	ldr	r3, [pc, #88]	; (800b3c0 <vPortValidateInterruptPriority+0x78>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	7afa      	ldrb	r2, [r7, #11]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d20b      	bcs.n	800b386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	b672      	cpsid	i
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	b662      	cpsie	i
 800b382:	607b      	str	r3, [r7, #4]
 800b384:	e7fe      	b.n	800b384 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <vPortValidateInterruptPriority+0x7c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b38e:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <vPortValidateInterruptPriority+0x80>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d90b      	bls.n	800b3ae <vPortValidateInterruptPriority+0x66>
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	b672      	cpsid	i
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	b662      	cpsie	i
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	e7fe      	b.n	800b3ac <vPortValidateInterruptPriority+0x64>
	}
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	e000e3f0 	.word	0xe000e3f0
 800b3c0:	200004c4 	.word	0x200004c4
 800b3c4:	e000ed0c 	.word	0xe000ed0c
 800b3c8:	200004c8 	.word	0x200004c8

0800b3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08a      	sub	sp, #40	; 0x28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3d8:	f7fe ffc4 	bl	800a364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3dc:	4b5c      	ldr	r3, [pc, #368]	; (800b550 <pvPortMalloc+0x184>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3e4:	f000 f91a 	bl	800b61c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3e8:	4b5a      	ldr	r3, [pc, #360]	; (800b554 <pvPortMalloc+0x188>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f040 8090 	bne.w	800b516 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d01e      	beq.n	800b43a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4413      	add	r3, r2
 800b402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d015      	beq.n	800b43a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f023 0307 	bic.w	r3, r3, #7
 800b414:	3308      	adds	r3, #8
 800b416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f003 0307 	and.w	r3, r3, #7
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00b      	beq.n	800b43a <pvPortMalloc+0x6e>
 800b422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b426:	b672      	cpsid	i
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	b662      	cpsie	i
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	e7fe      	b.n	800b438 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d06a      	beq.n	800b516 <pvPortMalloc+0x14a>
 800b440:	4b45      	ldr	r3, [pc, #276]	; (800b558 <pvPortMalloc+0x18c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d865      	bhi.n	800b516 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b44a:	4b44      	ldr	r3, [pc, #272]	; (800b55c <pvPortMalloc+0x190>)
 800b44c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b44e:	4b43      	ldr	r3, [pc, #268]	; (800b55c <pvPortMalloc+0x190>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b454:	e004      	b.n	800b460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d903      	bls.n	800b472 <pvPortMalloc+0xa6>
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1f1      	bne.n	800b456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b472:	4b37      	ldr	r3, [pc, #220]	; (800b550 <pvPortMalloc+0x184>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b478:	429a      	cmp	r2, r3
 800b47a:	d04c      	beq.n	800b516 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2208      	movs	r2, #8
 800b482:	4413      	add	r3, r2
 800b484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	1ad2      	subs	r2, r2, r3
 800b496:	2308      	movs	r3, #8
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d920      	bls.n	800b4e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00b      	beq.n	800b4c8 <pvPortMalloc+0xfc>
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	b672      	cpsid	i
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	b662      	cpsie	i
 800b4c4:	613b      	str	r3, [r7, #16]
 800b4c6:	e7fe      	b.n	800b4c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4da:	69b8      	ldr	r0, [r7, #24]
 800b4dc:	f000 f900 	bl	800b6e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4e0:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <pvPortMalloc+0x18c>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	4a1b      	ldr	r2, [pc, #108]	; (800b558 <pvPortMalloc+0x18c>)
 800b4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <pvPortMalloc+0x18c>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4b1b      	ldr	r3, [pc, #108]	; (800b560 <pvPortMalloc+0x194>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d203      	bcs.n	800b502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4fa:	4b17      	ldr	r3, [pc, #92]	; (800b558 <pvPortMalloc+0x18c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a18      	ldr	r2, [pc, #96]	; (800b560 <pvPortMalloc+0x194>)
 800b500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	4b13      	ldr	r3, [pc, #76]	; (800b554 <pvPortMalloc+0x188>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b516:	f7fe ff33 	bl	800a380 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b520:	f7f5 fb5a 	bl	8000bd8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00b      	beq.n	800b546 <pvPortMalloc+0x17a>
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	b672      	cpsid	i
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	b662      	cpsie	i
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	e7fe      	b.n	800b544 <pvPortMalloc+0x178>
	return pvReturn;
 800b546:	69fb      	ldr	r3, [r7, #28]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3728      	adds	r7, #40	; 0x28
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	200084d4 	.word	0x200084d4
 800b554:	200084e0 	.word	0x200084e0
 800b558:	200084d8 	.word	0x200084d8
 800b55c:	200084cc 	.word	0x200084cc
 800b560:	200084dc 	.word	0x200084dc

0800b564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d04a      	beq.n	800b60c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b576:	2308      	movs	r3, #8
 800b578:	425b      	negs	r3, r3
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	4413      	add	r3, r2
 800b57e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	4b22      	ldr	r3, [pc, #136]	; (800b614 <vPortFree+0xb0>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4013      	ands	r3, r2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10b      	bne.n	800b5aa <vPortFree+0x46>
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	b672      	cpsid	i
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	b662      	cpsie	i
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	e7fe      	b.n	800b5a8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00b      	beq.n	800b5ca <vPortFree+0x66>
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	b672      	cpsid	i
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	b662      	cpsie	i
 800b5c6:	60bb      	str	r3, [r7, #8]
 800b5c8:	e7fe      	b.n	800b5c8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	4b11      	ldr	r3, [pc, #68]	; (800b614 <vPortFree+0xb0>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d019      	beq.n	800b60c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d115      	bne.n	800b60c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <vPortFree+0xb0>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	401a      	ands	r2, r3
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5f0:	f7fe feb8 	bl	800a364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	4b07      	ldr	r3, [pc, #28]	; (800b618 <vPortFree+0xb4>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	4a06      	ldr	r2, [pc, #24]	; (800b618 <vPortFree+0xb4>)
 800b600:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b602:	6938      	ldr	r0, [r7, #16]
 800b604:	f000 f86c 	bl	800b6e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b608:	f7fe feba 	bl	800a380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b60c:	bf00      	nop
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200084e0 	.word	0x200084e0
 800b618:	200084d8 	.word	0x200084d8

0800b61c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b628:	4b27      	ldr	r3, [pc, #156]	; (800b6c8 <prvHeapInit+0xac>)
 800b62a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00c      	beq.n	800b650 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3307      	adds	r3, #7
 800b63a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	4a1f      	ldr	r2, [pc, #124]	; (800b6c8 <prvHeapInit+0xac>)
 800b64c:	4413      	add	r3, r2
 800b64e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b654:	4a1d      	ldr	r2, [pc, #116]	; (800b6cc <prvHeapInit+0xb0>)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b65a:	4b1c      	ldr	r3, [pc, #112]	; (800b6cc <prvHeapInit+0xb0>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	4413      	add	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b668:	2208      	movs	r2, #8
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	1a9b      	subs	r3, r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0307 	bic.w	r3, r3, #7
 800b676:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4a15      	ldr	r2, [pc, #84]	; (800b6d0 <prvHeapInit+0xb4>)
 800b67c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b67e:	4b14      	ldr	r3, [pc, #80]	; (800b6d0 <prvHeapInit+0xb4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b686:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <prvHeapInit+0xb4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2200      	movs	r2, #0
 800b68c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b69c:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <prvHeapInit+0xb4>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	4a0a      	ldr	r2, [pc, #40]	; (800b6d4 <prvHeapInit+0xb8>)
 800b6aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <prvHeapInit+0xbc>)
 800b6b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6b4:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <prvHeapInit+0xc0>)
 800b6b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6ba:	601a      	str	r2, [r3, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	200004cc 	.word	0x200004cc
 800b6cc:	200084cc 	.word	0x200084cc
 800b6d0:	200084d4 	.word	0x200084d4
 800b6d4:	200084dc 	.word	0x200084dc
 800b6d8:	200084d8 	.word	0x200084d8
 800b6dc:	200084e0 	.word	0x200084e0

0800b6e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6e8:	4b28      	ldr	r3, [pc, #160]	; (800b78c <prvInsertBlockIntoFreeList+0xac>)
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	e002      	b.n	800b6f4 <prvInsertBlockIntoFreeList+0x14>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d8f7      	bhi.n	800b6ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	4413      	add	r3, r2
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d108      	bne.n	800b722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	441a      	add	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	441a      	add	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d118      	bne.n	800b768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b15      	ldr	r3, [pc, #84]	; (800b790 <prvInsertBlockIntoFreeList+0xb0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d00d      	beq.n	800b75e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	441a      	add	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e008      	b.n	800b770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <prvInsertBlockIntoFreeList+0xb0>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	e003      	b.n	800b770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d002      	beq.n	800b77e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b77e:	bf00      	nop
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	200084cc 	.word	0x200084cc
 800b790:	200084d4 	.word	0x200084d4

0800b794 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08c      	sub	sp, #48	; 0x30
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a51      	ldr	r2, [pc, #324]	; (800b8e4 <I2Cx_MspInit+0x150>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d14d      	bne.n	800b840 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b7a4:	4b50      	ldr	r3, [pc, #320]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a8:	4a4f      	ldr	r2, [pc, #316]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ae:	6313      	str	r3, [r2, #48]	; 0x30
 800b7b0:	4b4d      	ldr	r3, [pc, #308]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7b8:	61bb      	str	r3, [r7, #24]
 800b7ba:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800b7bc:	2380      	movs	r3, #128	; 0x80
 800b7be:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b7c0:	2312      	movs	r3, #18
 800b7c2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800b7cc:	2304      	movs	r3, #4
 800b7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7d0:	f107 031c 	add.w	r3, r7, #28
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4845      	ldr	r0, [pc, #276]	; (800b8ec <I2Cx_MspInit+0x158>)
 800b7d8:	f7f8 faa2 	bl	8003d20 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800b7dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b7e2:	f107 031c 	add.w	r3, r7, #28
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4840      	ldr	r0, [pc, #256]	; (800b8ec <I2Cx_MspInit+0x158>)
 800b7ea:	f7f8 fa99 	bl	8003d20 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800b7ee:	4b3e      	ldr	r3, [pc, #248]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f2:	4a3d      	ldr	r2, [pc, #244]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7f8:	6413      	str	r3, [r2, #64]	; 0x40
 800b7fa:	4b3b      	ldr	r3, [pc, #236]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b802:	617b      	str	r3, [r7, #20]
 800b804:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800b806:	4b38      	ldr	r3, [pc, #224]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	4a37      	ldr	r2, [pc, #220]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b80c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b810:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800b812:	4b35      	ldr	r3, [pc, #212]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	4a34      	ldr	r2, [pc, #208]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b818:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b81c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800b81e:	2200      	movs	r2, #0
 800b820:	210f      	movs	r1, #15
 800b822:	2048      	movs	r0, #72	; 0x48
 800b824:	f7f7 fcc6 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800b828:	2048      	movs	r0, #72	; 0x48
 800b82a:	f7f7 fcdf 	bl	80031ec <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800b82e:	2200      	movs	r2, #0
 800b830:	210f      	movs	r1, #15
 800b832:	2049      	movs	r0, #73	; 0x49
 800b834:	f7f7 fcbe 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800b838:	2049      	movs	r0, #73	; 0x49
 800b83a:	f7f7 fcd7 	bl	80031ec <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800b83e:	e04d      	b.n	800b8dc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b840:	4b29      	ldr	r3, [pc, #164]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b844:	4a28      	ldr	r2, [pc, #160]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b846:	f043 0302 	orr.w	r3, r3, #2
 800b84a:	6313      	str	r3, [r2, #48]	; 0x30
 800b84c:	4b26      	ldr	r3, [pc, #152]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b850:	f003 0302 	and.w	r3, r3, #2
 800b854:	613b      	str	r3, [r7, #16]
 800b856:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800b858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b85c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b85e:	2312      	movs	r3, #18
 800b860:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b862:	2300      	movs	r3, #0
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b866:	2302      	movs	r3, #2
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800b86a:	2304      	movs	r3, #4
 800b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b86e:	f107 031c 	add.w	r3, r7, #28
 800b872:	4619      	mov	r1, r3
 800b874:	481e      	ldr	r0, [pc, #120]	; (800b8f0 <I2Cx_MspInit+0x15c>)
 800b876:	f7f8 fa53 	bl	8003d20 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800b87a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b87e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b880:	f107 031c 	add.w	r3, r7, #28
 800b884:	4619      	mov	r1, r3
 800b886:	481a      	ldr	r0, [pc, #104]	; (800b8f0 <I2Cx_MspInit+0x15c>)
 800b888:	f7f8 fa4a 	bl	8003d20 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800b88c:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b890:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b896:	6413      	str	r3, [r2, #64]	; 0x40
 800b898:	4b13      	ldr	r3, [pc, #76]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800b8a4:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	4a0f      	ldr	r2, [pc, #60]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8ae:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800b8b0:	4b0d      	ldr	r3, [pc, #52]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	4a0c      	ldr	r2, [pc, #48]	; (800b8e8 <I2Cx_MspInit+0x154>)
 800b8b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8ba:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800b8bc:	2200      	movs	r2, #0
 800b8be:	210f      	movs	r1, #15
 800b8c0:	201f      	movs	r0, #31
 800b8c2:	f7f7 fc77 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800b8c6:	201f      	movs	r0, #31
 800b8c8:	f7f7 fc90 	bl	80031ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	210f      	movs	r1, #15
 800b8d0:	2020      	movs	r0, #32
 800b8d2:	f7f7 fc6f 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800b8d6:	2020      	movs	r0, #32
 800b8d8:	f7f7 fc88 	bl	80031ec <HAL_NVIC_EnableIRQ>
}
 800b8dc:	bf00      	nop
 800b8de:	3730      	adds	r7, #48	; 0x30
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	200084e4 	.word	0x200084e4
 800b8e8:	40023800 	.word	0x40023800
 800b8ec:	40021c00 	.word	0x40021c00
 800b8f0:	40020400 	.word	0x40020400

0800b8f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7f8 ffcb 	bl	8004898 <HAL_I2C_GetState>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d125      	bne.n	800b954 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a14      	ldr	r2, [pc, #80]	; (800b95c <I2Cx_Init+0x68>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d103      	bne.n	800b918 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a13      	ldr	r2, [pc, #76]	; (800b960 <I2Cx_Init+0x6c>)
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	e002      	b.n	800b91e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a12      	ldr	r2, [pc, #72]	; (800b964 <I2Cx_Init+0x70>)
 800b91c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a11      	ldr	r2, [pc, #68]	; (800b968 <I2Cx_Init+0x74>)
 800b922:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff ff23 	bl	800b794 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7f8 fcb4 	bl	80042bc <HAL_I2C_Init>
  }
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	200084e4 	.word	0x200084e4
 800b960:	40005c00 	.word	0x40005c00
 800b964:	40005400 	.word	0x40005400
 800b968:	40912732 	.word	0x40912732

0800b96c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08a      	sub	sp, #40	; 0x28
 800b970:	af04      	add	r7, sp, #16
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	461a      	mov	r2, r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	72fb      	strb	r3, [r7, #11]
 800b97e:	460b      	mov	r3, r1
 800b980:	813b      	strh	r3, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b98a:	7afb      	ldrb	r3, [r7, #11]
 800b98c:	b299      	uxth	r1, r3
 800b98e:	88f8      	ldrh	r0, [r7, #6]
 800b990:	893a      	ldrh	r2, [r7, #8]
 800b992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b996:	9302      	str	r3, [sp, #8]
 800b998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7f8 fe5e 	bl	8004664 <HAL_I2C_Mem_Read>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d004      	beq.n	800b9bc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800b9b2:	7afb      	ldrb	r3, [r7, #11]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 f832 	bl	800ba20 <I2Cx_Error>
  }
  return status;    
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b08a      	sub	sp, #40	; 0x28
 800b9ca:	af04      	add	r7, sp, #16
 800b9cc:	60f8      	str	r0, [r7, #12]
 800b9ce:	4608      	mov	r0, r1
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	72fb      	strb	r3, [r7, #11]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	813b      	strh	r3, [r7, #8]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	b299      	uxth	r1, r3
 800b9e8:	88f8      	ldrh	r0, [r7, #6]
 800b9ea:	893a      	ldrh	r2, [r7, #8]
 800b9ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9f0:	9302      	str	r3, [sp, #8]
 800b9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f7f8 fd1d 	bl	800443c <HAL_I2C_Mem_Write>
 800ba02:	4603      	mov	r3, r0
 800ba04:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800ba0c:	7afb      	ldrb	r3, [r7, #11]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f805 	bl	800ba20 <I2Cx_Error>
  }
  return status;
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7f8 fcd5 	bl	80043dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff ff5e 	bl	800b8f4 <I2Cx_Init>
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ba44:	4802      	ldr	r0, [pc, #8]	; (800ba50 <TS_IO_Init+0x10>)
 800ba46:	f7ff ff55 	bl	800b8f4 <I2Cx_Init>
}
 800ba4a:	bf00      	nop
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200084e4 	.word	0x200084e4

0800ba54 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	71fb      	strb	r3, [r7, #7]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	71bb      	strb	r3, [r7, #6]
 800ba62:	4613      	mov	r3, r2
 800ba64:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800ba66:	79bb      	ldrb	r3, [r7, #6]
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	79f9      	ldrb	r1, [r7, #7]
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	9301      	str	r3, [sp, #4]
 800ba70:	1d7b      	adds	r3, r7, #5
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	2301      	movs	r3, #1
 800ba76:	4803      	ldr	r0, [pc, #12]	; (800ba84 <TS_IO_Write+0x30>)
 800ba78:	f7ff ffa5 	bl	800b9c6 <I2Cx_WriteMultiple>
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200084e4 	.word	0x200084e4

0800ba88 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af02      	add	r7, sp, #8
 800ba8e:	4603      	mov	r3, r0
 800ba90:	460a      	mov	r2, r1
 800ba92:	71fb      	strb	r3, [r7, #7]
 800ba94:	4613      	mov	r3, r2
 800ba96:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ba9c:	79bb      	ldrb	r3, [r7, #6]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	79f9      	ldrb	r1, [r7, #7]
 800baa2:	2301      	movs	r3, #1
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	f107 030f 	add.w	r3, r7, #15
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	2301      	movs	r3, #1
 800baae:	4804      	ldr	r0, [pc, #16]	; (800bac0 <TS_IO_Read+0x38>)
 800bab0:	f7ff ff5c 	bl	800b96c <I2Cx_ReadMultiple>

  return read_value;
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	200084e4 	.word	0x200084e4

0800bac4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7f6 ffed 	bl	8002aac <HAL_Delay>
}
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800bade:	f009 fac3 	bl	8015068 <touchgfx_init>
}
 800bae2:	bf00      	nop
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800baea:	f009 fae7 	bl	80150bc <touchgfx_taskEntry>
}
 800baee:	bf00      	nop
 800baf0:	bd80      	pop	{r7, pc}
	...

0800baf4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
    {
 800bafc:	4a04      	ldr	r2, [pc, #16]	; (800bb10 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	601a      	str	r2, [r3, #0]
    }
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	080273cc 	.word	0x080273cc

0800bb14 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    }
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ffe9 	bl	800baf4 <_ZN8touchgfx12FontProviderD1Ev>
 800bb22:	2104      	movs	r1, #4
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f019 fe4d 	bl	80257c4 <_ZdlPvj>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800bb40:	887b      	ldrh	r3, [r7, #2]
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d825      	bhi.n	800bb92 <_ZN23ApplicationFontProvider7getFontEt+0x5e>
 800bb46:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800bb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4c:	0800bb61 	.word	0x0800bb61
 800bb50:	0800bb6b 	.word	0x0800bb6b
 800bb54:	0800bb75 	.word	0x0800bb75
 800bb58:	0800bb7f 	.word	0x0800bb7f
 800bb5c:	0800bb89 	.word	0x0800bb89
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800bb60:	f006 fee8 	bl	8012934 <_ZN17TypedTextDatabase8getFontsEv>
 800bb64:	4603      	mov	r3, r0
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	e014      	b.n	800bb94 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800bb6a:	f006 fee3 	bl	8012934 <_ZN17TypedTextDatabase8getFontsEv>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	e00f      	b.n	800bb94 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::SMALL:
        // verdana_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bb74:	f006 fede 	bl	8012934 <_ZN17TypedTextDatabase8getFontsEv>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	e00a      	b.n	800bb94 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_00:
        // verdana_27_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800bb7e:	f006 fed9 	bl	8012934 <_ZN17TypedTextDatabase8getFontsEv>
 800bb82:	4603      	mov	r3, r0
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	e005      	b.n	800bb94 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_01:
        // verdana_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800bb88:	f006 fed4 	bl	8012934 <_ZN17TypedTextDatabase8getFontsEv>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	e000      	b.n	800bb94 <_ZN23ApplicationFontProvider7getFontEt+0x60>
    default:
        return 0;
 800bb92:	2300      	movs	r3, #0
    }
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_27_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdana_24_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	4a05      	ldr	r2, [pc, #20]	; (800bbbc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff ffa1 	bl	800baf4 <_ZN8touchgfx12FontProviderD1Ev>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	080273b8 	.word	0x080273b8

0800bbc0 <_ZN23ApplicationFontProviderD0Ev>:
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff ffe7 	bl	800bb9c <_ZN23ApplicationFontProviderD1Ev>
 800bbce:	2104      	movs	r1, #4
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f019 fdf7 	bl	80257c4 <_ZdlPvj>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
    {
 800bbe8:	4a04      	ldr	r2, [pc, #16]	; (800bbfc <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	601a      	str	r2, [r3, #0]
    }
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	08028564 	.word	0x08028564

0800bc00 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
    }
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff ffe9 	bl	800bbe0 <_ZN8touchgfx4FontD1Ev>
 800bc0e:	2110      	movs	r1, #16
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f019 fdd7 	bl	80257c4 <_ZdlPvj>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bc20:	b590      	push	{r4, r7, lr}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800bc2c:	887b      	ldrh	r3, [r7, #2]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e010      	b.n	800bc58 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3308      	adds	r3, #8
 800bc44:	681c      	ldr	r4, [r3, #0]
 800bc46:	f107 030f 	add.w	r3, r7, #15
 800bc4a:	f107 0210 	add.w	r2, r7, #16
 800bc4e:	8879      	ldrh	r1, [r7, #2]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	47a0      	blx	r4
 800bc54:	6178      	str	r0, [r7, #20]
        return glyph;
 800bc56:	697b      	ldr	r3, [r7, #20]
    }
 800bc58:	4618      	mov	r0, r3
 800bc5a:	371c      	adds	r7, #28
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd90      	pop	{r4, r7, pc}

0800bc60 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	895b      	ldrh	r3, [r3, #10]
    }
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	899b      	ldrh	r3, [r3, #12]
    }
 800bc84:	4618      	mov	r0, r3
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	889b      	ldrh	r3, [r3, #4]
    }
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	889a      	ldrh	r2, [r3, #4]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	799b      	ldrb	r3, [r3, #6]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	4413      	add	r3, r2
 800bcbc:	b29b      	uxth	r3, r3
    }
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	79db      	ldrb	r3, [r3, #7]
 800bcd6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800bcda:	b2db      	uxtb	r3, r3
    }
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	79db      	ldrb	r3, [r3, #7]
 800bcf4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bcf8:	b2db      	uxtb	r3, r3
    }
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
	...

0800bd08 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	4a05      	ldr	r2, [pc, #20]	; (800bd28 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff ff61 	bl	800bbe0 <_ZN8touchgfx4FontD1Ev>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	0802a524 	.word	0x0802a524

0800bd2c <_ZN8touchgfx9ConstFontD0Ev>:
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff ffe7 	bl	800bd08 <_ZN8touchgfx9ConstFontD1Ev>
 800bd3a:	2118      	movs	r1, #24
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f019 fd41 	bl	80257c4 <_ZdlPvj>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	4a05      	ldr	r2, [pc, #20]	; (800bd6c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7ff ffd3 	bl	800bd08 <_ZN8touchgfx9ConstFontD1Ev>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4618      	mov	r0, r3
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	080273f0 	.word	0x080273f0

0800bd70 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff ffe7 	bl	800bd4c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bd7e:	2124      	movs	r1, #36	; 0x24
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f019 fd1f 	bl	80257c4 <_ZdlPvj>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
    {
 800bd98:	4a04      	ldr	r2, [pc, #16]	; (800bdac <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	601a      	str	r2, [r3, #0]
    }
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4618      	mov	r0, r3
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	080273e0 	.word	0x080273e0

0800bdb0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
    }
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff ffe9 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
 800bdbe:	2108      	movs	r1, #8
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f019 fcff 	bl	80257c4 <_ZdlPvj>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a1b      	ldr	r3, [r3, #32]
    }
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08c      	sub	sp, #48	; 0x30
 800bdec:	af08      	add	r7, sp, #32
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	80fb      	strh	r3, [r7, #6]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	88b9      	ldrh	r1, [r7, #4]
 800be02:	88fa      	ldrh	r2, [r7, #6]
 800be04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800be06:	9306      	str	r3, [sp, #24]
 800be08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800be0a:	9305      	str	r3, [sp, #20]
 800be0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be16:	9303      	str	r3, [sp, #12]
 800be18:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be1c:	9302      	str	r3, [sp, #8]
 800be1e:	7f3b      	ldrb	r3, [r7, #28]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	7e3b      	ldrb	r3, [r7, #24]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	460b      	mov	r3, r1
 800be28:	68b9      	ldr	r1, [r7, #8]
 800be2a:	f00e f855 	bl	8019ed8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800be2e:	4a08      	ldr	r2, [pc, #32]	; (800be50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be38:	619a      	str	r2, [r3, #24]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be3e:	61da      	str	r2, [r3, #28]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be44:	621a      	str	r2, [r3, #32]
{
}
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	080273f0 	.word	0x080273f0

0800be54 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	889b      	ldrh	r3, [r3, #4]
 800be68:	0adb      	lsrs	r3, r3, #11
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4413      	add	r3, r2
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800be86:	b480      	push	{r7}
 800be88:	b089      	sub	sp, #36	; 0x24
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	60f8      	str	r0, [r7, #12]
 800be8e:	460b      	mov	r3, r1
 800be90:	607a      	str	r2, [r7, #4]
 800be92:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	7b1b      	ldrb	r3, [r3, #12]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	e030      	b.n	800bf08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	69da      	ldr	r2, [r3, #28]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	7b5b      	ldrb	r3, [r3, #13]
 800beb2:	021b      	lsls	r3, r3, #8
 800beb4:	b21b      	sxth	r3, r3
 800beb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beba:	b219      	sxth	r1, r3
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	7adb      	ldrb	r3, [r3, #11]
 800bec0:	b21b      	sxth	r3, r3
 800bec2:	430b      	orrs	r3, r1
 800bec4:	b21b      	sxth	r3, r3
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7b1b      	ldrb	r3, [r3, #12]
 800bed2:	837b      	strh	r3, [r7, #26]
 800bed4:	8b7b      	ldrh	r3, [r7, #26]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d015      	beq.n	800bf06 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	897a      	ldrh	r2, [r7, #10]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d103      	bne.n	800beec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800beea:	e00d      	b.n	800bf08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	897a      	ldrh	r2, [r7, #10]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d306      	bcc.n	800bf04 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800bef6:	8b7b      	ldrh	r3, [r7, #26]
 800bef8:	3b01      	subs	r3, #1
 800befa:	837b      	strh	r3, [r7, #26]
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	3304      	adds	r3, #4
 800bf00:	61fb      	str	r3, [r7, #28]
 800bf02:	e7e7      	b.n	800bed4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800bf04:	bf00      	nop
        }
    }
    return 0;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3724      	adds	r7, #36	; 0x24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_18_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	4801      	ldr	r0, [pc, #4]	; (800bf20 <__tcf_0+0xc>)
 800bf1a:	f7ff ff17 	bl	800bd4c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20008530 	.word	0x20008530

0800bf24 <_Z23getFont_verdana_18_4bppv>:
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08a      	sub	sp, #40	; 0x28
 800bf28:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 6, 18, 0, 4, 1, 0, 0, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0);
 800bf2a:	4b15      	ldr	r3, [pc, #84]	; (800bf80 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d11f      	bne.n	800bf76 <_Z23getFont_verdana_18_4bppv+0x52>
 800bf36:	2300      	movs	r3, #0
 800bf38:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9308      	str	r3, [sp, #32]
 800bf3e:	233f      	movs	r3, #63	; 0x3f
 800bf40:	9307      	str	r3, [sp, #28]
 800bf42:	4b10      	ldr	r3, [pc, #64]	; (800bf84 <_Z23getFont_verdana_18_4bppv+0x60>)
 800bf44:	9306      	str	r3, [sp, #24]
 800bf46:	4b10      	ldr	r3, [pc, #64]	; (800bf88 <_Z23getFont_verdana_18_4bppv+0x64>)
 800bf48:	9305      	str	r3, [sp, #20]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	9304      	str	r3, [sp, #16]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	9303      	str	r3, [sp, #12]
 800bf52:	2301      	movs	r3, #1
 800bf54:	9302      	str	r3, [sp, #8]
 800bf56:	2304      	movs	r3, #4
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	2312      	movs	r3, #18
 800bf60:	2206      	movs	r2, #6
 800bf62:	490a      	ldr	r1, [pc, #40]	; (800bf8c <_Z23getFont_verdana_18_4bppv+0x68>)
 800bf64:	480a      	ldr	r0, [pc, #40]	; (800bf90 <_Z23getFont_verdana_18_4bppv+0x6c>)
 800bf66:	f7ff ff3f 	bl	800bde8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bf6a:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <_Z23getFont_verdana_18_4bppv+0x5c>)
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	4808      	ldr	r0, [pc, #32]	; (800bf94 <_Z23getFont_verdana_18_4bppv+0x70>)
 800bf72:	f019 fc71 	bl	8025858 <atexit>
    return verdana_18_4bpp;
 800bf76:	4b06      	ldr	r3, [pc, #24]	; (800bf90 <_Z23getFont_verdana_18_4bppv+0x6c>)
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20008554 	.word	0x20008554
 800bf84:	08030150 	.word	0x08030150
 800bf88:	0802743c 	.word	0x0802743c
 800bf8c:	08030480 	.word	0x08030480
 800bf90:	20008530 	.word	0x20008530
 800bf94:	0800bf15 	.word	0x0800bf15

0800bf98 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 43, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	4801      	ldr	r0, [pc, #4]	; (800bfa4 <__tcf_0+0xc>)
 800bf9e:	f7ff fed5 	bl	800bd4c <_ZN8touchgfx13GeneratedFontD1Ev>
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20008558 	.word	0x20008558

0800bfa8 <_Z23getFont_verdana_20_4bppv>:
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	; 0x28
 800bfac:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 43, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800bfae:	4b15      	ldr	r3, [pc, #84]	; (800c004 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d11f      	bne.n	800bffa <_Z23getFont_verdana_20_4bppv+0x52>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9308      	str	r3, [sp, #32]
 800bfc2:	233f      	movs	r3, #63	; 0x3f
 800bfc4:	9307      	str	r3, [sp, #28]
 800bfc6:	4b10      	ldr	r3, [pc, #64]	; (800c008 <_Z23getFont_verdana_20_4bppv+0x60>)
 800bfc8:	9306      	str	r3, [sp, #24]
 800bfca:	4b10      	ldr	r3, [pc, #64]	; (800c00c <_Z23getFont_verdana_20_4bppv+0x64>)
 800bfcc:	9305      	str	r3, [sp, #20]
 800bfce:	2301      	movs	r3, #1
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	9302      	str	r3, [sp, #8]
 800bfda:	2304      	movs	r3, #4
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	2304      	movs	r3, #4
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	2314      	movs	r3, #20
 800bfe4:	222b      	movs	r2, #43	; 0x2b
 800bfe6:	490a      	ldr	r1, [pc, #40]	; (800c010 <_Z23getFont_verdana_20_4bppv+0x68>)
 800bfe8:	480a      	ldr	r0, [pc, #40]	; (800c014 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800bfea:	f7ff fefd 	bl	800bde8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800bfee:	4b05      	ldr	r3, [pc, #20]	; (800c004 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800bff0:	2201      	movs	r2, #1
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	4808      	ldr	r0, [pc, #32]	; (800c018 <_Z23getFont_verdana_20_4bppv+0x70>)
 800bff6:	f019 fc2f 	bl	8025858 <atexit>
    return verdana_20_4bpp;
 800bffa:	4b06      	ldr	r3, [pc, #24]	; (800c014 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	2000857c 	.word	0x2000857c
 800c008:	08030154 	.word	0x08030154
 800c00c:	08027440 	.word	0x08027440
 800c010:	080304d4 	.word	0x080304d4
 800c014:	20008558 	.word	0x20008558
 800c018:	0800bf99 	.word	0x0800bf99

0800c01c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_24_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_24_4bpp();

touchgfx::GeneratedFont& getFont_verdana_24_4bpp()
{
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800c01c:	b580      	push	{r7, lr}
 800c01e:	af00      	add	r7, sp, #0
 800c020:	4801      	ldr	r0, [pc, #4]	; (800c028 <__tcf_0+0xc>)
 800c022:	f7ff fe93 	bl	800bd4c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20008580 	.word	0x20008580

0800c02c <_Z23getFont_verdana_24_4bppv>:
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08a      	sub	sp, #40	; 0x28
 800c030:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_24_4bpp(glyphs_verdana_24_4bpp, 95, 24, 5, 4, 1, 1, 2, unicodes_verdana_24_4bpp, kerning_verdana_24_4bpp, 63, 0, 0);
 800c032:	4b15      	ldr	r3, [pc, #84]	; (800c088 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d11f      	bne.n	800c07e <_Z23getFont_verdana_24_4bppv+0x52>
 800c03e:	2300      	movs	r3, #0
 800c040:	9309      	str	r3, [sp, #36]	; 0x24
 800c042:	2300      	movs	r3, #0
 800c044:	9308      	str	r3, [sp, #32]
 800c046:	233f      	movs	r3, #63	; 0x3f
 800c048:	9307      	str	r3, [sp, #28]
 800c04a:	4b10      	ldr	r3, [pc, #64]	; (800c08c <_Z23getFont_verdana_24_4bppv+0x60>)
 800c04c:	9306      	str	r3, [sp, #24]
 800c04e:	4b10      	ldr	r3, [pc, #64]	; (800c090 <_Z23getFont_verdana_24_4bppv+0x64>)
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	2302      	movs	r3, #2
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	2301      	movs	r3, #1
 800c058:	9303      	str	r3, [sp, #12]
 800c05a:	2301      	movs	r3, #1
 800c05c:	9302      	str	r3, [sp, #8]
 800c05e:	2304      	movs	r3, #4
 800c060:	9301      	str	r3, [sp, #4]
 800c062:	2305      	movs	r3, #5
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	2318      	movs	r3, #24
 800c068:	225f      	movs	r2, #95	; 0x5f
 800c06a:	490a      	ldr	r1, [pc, #40]	; (800c094 <_Z23getFont_verdana_24_4bppv+0x68>)
 800c06c:	480a      	ldr	r0, [pc, #40]	; (800c098 <_Z23getFont_verdana_24_4bppv+0x6c>)
 800c06e:	f7ff febb 	bl	800bde8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c072:	4b05      	ldr	r3, [pc, #20]	; (800c088 <_Z23getFont_verdana_24_4bppv+0x5c>)
 800c074:	2201      	movs	r2, #1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	4808      	ldr	r0, [pc, #32]	; (800c09c <_Z23getFont_verdana_24_4bppv+0x70>)
 800c07a:	f019 fbed 	bl	8025858 <atexit>
    return verdana_24_4bpp;
 800c07e:	4b06      	ldr	r3, [pc, #24]	; (800c098 <_Z23getFont_verdana_24_4bppv+0x6c>)
}
 800c080:	4618      	mov	r0, r3
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	200085a4 	.word	0x200085a4
 800c08c:	080301c8 	.word	0x080301c8
 800c090:	08027444 	.word	0x08027444
 800c094:	08030730 	.word	0x08030730
 800c098:	20008580 	.word	0x20008580
 800c09c:	0800c01d 	.word	0x0800c01d

0800c0a0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_27_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_27_4bpp();

touchgfx::GeneratedFont& getFont_verdana_27_4bpp()
{
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	4801      	ldr	r0, [pc, #4]	; (800c0ac <__tcf_0+0xc>)
 800c0a6:	f7ff fe51 	bl	800bd4c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	200085a8 	.word	0x200085a8

0800c0b0 <_Z23getFont_verdana_27_4bppv>:
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b08a      	sub	sp, #40	; 0x28
 800c0b4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_27_4bpp(glyphs_verdana_27_4bpp, 1, 27, 0, 4, 1, 0, 0, unicodes_verdana_27_4bpp, kerning_verdana_27_4bpp, 63, 0, 0);
 800c0b6:	4b15      	ldr	r3, [pc, #84]	; (800c10c <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d11f      	bne.n	800c102 <_Z23getFont_verdana_27_4bppv+0x52>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9308      	str	r3, [sp, #32]
 800c0ca:	233f      	movs	r3, #63	; 0x3f
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	4b10      	ldr	r3, [pc, #64]	; (800c110 <_Z23getFont_verdana_27_4bppv+0x60>)
 800c0d0:	9306      	str	r3, [sp, #24]
 800c0d2:	4b10      	ldr	r3, [pc, #64]	; (800c114 <_Z23getFont_verdana_27_4bppv+0x64>)
 800c0d4:	9305      	str	r3, [sp, #20]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9304      	str	r3, [sp, #16]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9303      	str	r3, [sp, #12]
 800c0de:	2301      	movs	r3, #1
 800c0e0:	9302      	str	r3, [sp, #8]
 800c0e2:	2304      	movs	r3, #4
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	9300      	str	r3, [sp, #0]
 800c0ea:	231b      	movs	r3, #27
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	490a      	ldr	r1, [pc, #40]	; (800c118 <_Z23getFont_verdana_27_4bppv+0x68>)
 800c0f0:	480a      	ldr	r0, [pc, #40]	; (800c11c <_Z23getFont_verdana_27_4bppv+0x6c>)
 800c0f2:	f7ff fe79 	bl	800bde8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c0f6:	4b05      	ldr	r3, [pc, #20]	; (800c10c <_Z23getFont_verdana_27_4bppv+0x5c>)
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	4808      	ldr	r0, [pc, #32]	; (800c120 <_Z23getFont_verdana_27_4bppv+0x70>)
 800c0fe:	f019 fbab 	bl	8025858 <atexit>
    return verdana_27_4bpp;
 800c102:	4b06      	ldr	r3, [pc, #24]	; (800c11c <_Z23getFont_verdana_27_4bppv+0x6c>)
}
 800c104:	4618      	mov	r0, r3
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200085cc 	.word	0x200085cc
 800c110:	0803043c 	.word	0x0803043c
 800c114:	08027448 	.word	0x08027448
 800c118:	08030c64 	.word	0x08030c64
 800c11c:	200085a8 	.word	0x200085a8
 800c120:	0800c0a1 	.word	0x0800c0a1

0800c124 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <__tcf_0+0xc>)
 800c12a:	f7ff fe0f 	bl	800bd4c <_ZN8touchgfx13GeneratedFontD1Ev>
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	200085d0 	.word	0x200085d0

0800c134 <_Z23getFont_verdana_40_4bppv>:
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08a      	sub	sp, #40	; 0x28
 800c138:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c13a:	4b15      	ldr	r3, [pc, #84]	; (800c190 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	2b00      	cmp	r3, #0
 800c144:	d11f      	bne.n	800c186 <_Z23getFont_verdana_40_4bppv+0x52>
 800c146:	2300      	movs	r3, #0
 800c148:	9309      	str	r3, [sp, #36]	; 0x24
 800c14a:	2300      	movs	r3, #0
 800c14c:	9308      	str	r3, [sp, #32]
 800c14e:	233f      	movs	r3, #63	; 0x3f
 800c150:	9307      	str	r3, [sp, #28]
 800c152:	4b10      	ldr	r3, [pc, #64]	; (800c194 <_Z23getFont_verdana_40_4bppv+0x60>)
 800c154:	9306      	str	r3, [sp, #24]
 800c156:	4b10      	ldr	r3, [pc, #64]	; (800c198 <_Z23getFont_verdana_40_4bppv+0x64>)
 800c158:	9305      	str	r3, [sp, #20]
 800c15a:	2301      	movs	r3, #1
 800c15c:	9304      	str	r3, [sp, #16]
 800c15e:	2300      	movs	r3, #0
 800c160:	9303      	str	r3, [sp, #12]
 800c162:	2301      	movs	r3, #1
 800c164:	9302      	str	r3, [sp, #8]
 800c166:	2304      	movs	r3, #4
 800c168:	9301      	str	r3, [sp, #4]
 800c16a:	2308      	movs	r3, #8
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	2328      	movs	r3, #40	; 0x28
 800c170:	2212      	movs	r2, #18
 800c172:	490a      	ldr	r1, [pc, #40]	; (800c19c <_Z23getFont_verdana_40_4bppv+0x68>)
 800c174:	480a      	ldr	r0, [pc, #40]	; (800c1a0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800c176:	f7ff fe37 	bl	800bde8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c17c:	2201      	movs	r2, #1
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	4808      	ldr	r0, [pc, #32]	; (800c1a4 <_Z23getFont_verdana_40_4bppv+0x70>)
 800c182:	f019 fb69 	bl	8025858 <atexit>
    return verdana_40_4bpp;
 800c186:	4b06      	ldr	r3, [pc, #24]	; (800c1a0 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800c188:	4618      	mov	r0, r3
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	200085f4 	.word	0x200085f4
 800c194:	08030440 	.word	0x08030440
 800c198:	0802744c 	.word	0x0802744c
 800c19c:	08030c74 	.word	0x08030c74
 800c1a0:	200085d0 	.word	0x200085d0
 800c1a4:	0800c125 	.word	0x0800c125

0800c1a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	80da      	strh	r2, [r3, #6]
    }
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800c1ee:	b480      	push	{r7}
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	817b      	strh	r3, [r7, #10]
 800c200:	460b      	mov	r3, r1
 800c202:	813b      	strh	r3, [r7, #8]
 800c204:	4613      	mov	r3, r2
 800c206:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	897a      	ldrh	r2, [r7, #10]
 800c20c:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	893a      	ldrh	r2, [r7, #8]
 800c212:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	88fa      	ldrh	r2, [r7, #6]
 800c218:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8b3a      	ldrh	r2, [r7, #24]
 800c21e:	80da      	strh	r2, [r3, #6]
    }
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4618      	mov	r0, r3
 800c224:	3714      	adds	r7, #20
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
 800c236:	6039      	str	r1, [r7, #0]
    {
    }
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
    {
    }
 800c24e:	bf00      	nop
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c25a:	b480      	push	{r7}
 800c25c:	b083      	sub	sp, #12
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	6039      	str	r1, [r7, #0]
    {
    }
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
    {
    }
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
    {
    }
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
    {
 800c2b8:	4a04      	ldr	r2, [pc, #16]	; (800c2cc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	601a      	str	r2, [r3, #0]
    }
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	080276b8 	.word	0x080276b8

0800c2d0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
    }
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff ffe9 	bl	800c2b0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c2de:	2104      	movs	r1, #4
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f019 fa6f 	bl	80257c4 <_ZdlPvj>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c2f8:	4a07      	ldr	r2, [pc, #28]	; (800c318 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	601a      	str	r2, [r3, #0]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	605a      	str	r2, [r3, #4]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	721a      	strb	r2, [r3, #8]
    {
    }
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4618      	mov	r0, r3
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	08027698 	.word	0x08027698

0800c31c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
    {
 800c324:	4a04      	ldr	r2, [pc, #16]	; (800c338 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	601a      	str	r2, [r3, #0]
    }
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	08027698 	.word	0x08027698

0800c33c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
    }
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff ffe9 	bl	800c31c <_ZN8touchgfx10TransitionD1Ev>
 800c34a:	210c      	movs	r1, #12
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f019 fa39 	bl	80257c4 <_ZdlPvj>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
    {
    }
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
    {
    }
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
    {
    }
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	605a      	str	r2, [r3, #4]
    }
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800c3de:	6810      	ldr	r0, [r2, #0]
 800c3e0:	6851      	ldr	r1, [r2, #4]
 800c3e2:	c303      	stmia	r3!, {r0, r1}
    };
 800c3e4:	bf00      	nop
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
    {
 800c3f8:	4a04      	ldr	r2, [pc, #16]	; (800c40c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	601a      	str	r2, [r3, #0]
    }
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	08027680 	.word	0x08027680

0800c410 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
    }
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff ffe9 	bl	800c3f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c41e:	2104      	movs	r1, #4
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f019 f9cf 	bl	80257c4 <_ZdlPvj>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af02      	add	r7, sp, #8
 800c436:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800c438:	4a13      	ldr	r2, [pc, #76]	; (800c488 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	1d18      	adds	r0, r3, #4
 800c442:	2300      	movs	r3, #0
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	2300      	movs	r3, #0
 800c448:	2200      	movs	r2, #0
 800c44a:	2100      	movs	r1, #0
 800c44c:	f7ff fecf 	bl	800c1ee <_ZN8touchgfx4RectC1Essss>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	330c      	adds	r3, #12
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff feb3 	bl	800c1c0 <_ZN8touchgfx4RectC1Ev>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	615a      	str	r2, [r3, #20]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	619a      	str	r2, [r3, #24]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	61da      	str	r2, [r3, #28]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	0802a4bc 	.word	0x0802a4bc

0800c48c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
    {
 800c494:	4a04      	ldr	r2, [pc, #16]	; (800c4a8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	601a      	str	r2, [r3, #0]
    }
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4618      	mov	r0, r3
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr
 800c4a8:	0802a4bc 	.word	0x0802a4bc

0800c4ac <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
    }
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff ffe9 	bl	800c48c <_ZN8touchgfx8DrawableD1Ev>
 800c4ba:	2128      	movs	r1, #40	; 0x28
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f019 f981 	bl	80257c4 <_ZdlPvj>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	461a      	mov	r2, r3
 800c4da:	4603      	mov	r3, r0
 800c4dc:	817b      	strh	r3, [r7, #10]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	813b      	strh	r3, [r7, #8]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3334      	adds	r3, #52	; 0x34
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c4f2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	4798      	blx	r3
        setWidth(width);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3338      	adds	r3, #56	; 0x38
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c506:	4611      	mov	r1, r2
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	4798      	blx	r3
        setHeight(height);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	333c      	adds	r3, #60	; 0x3c
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c518:	4611      	mov	r1, r2
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	4798      	blx	r3
    }
 800c51e:	bf00      	nop
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c526:	b480      	push	{r7}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800c54e:	4618      	mov	r0, r3
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c55a:	b480      	push	{r7}
 800c55c:	b083      	sub	sp, #12
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	460b      	mov	r3, r1
 800c564:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	887a      	ldrh	r2, [r7, #2]
 800c56a:	809a      	strh	r2, [r3, #4]
    }
 800c56c:	bf00      	nop
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	887a      	ldrh	r2, [r7, #2]
 800c588:	80da      	strh	r2, [r3, #6]
    }
 800c58a:	bf00      	nop
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c596:	b580      	push	{r7, lr}
 800c598:	b082      	sub	sp, #8
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	460b      	mov	r3, r1
 800c5a0:	807b      	strh	r3, [r7, #2]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	332c      	adds	r3, #44	; 0x2c
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	4798      	blx	r3
        setY(y);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3330      	adds	r3, #48	; 0x30
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	4798      	blx	r3
    }
 800c5ca:	bf00      	nop
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800c5d2:	b480      	push	{r7}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	887a      	ldrh	r2, [r7, #2]
 800c5e2:	811a      	strh	r2, [r3, #8]
    }
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	887a      	ldrh	r2, [r7, #2]
 800c600:	815a      	strh	r2, [r3, #10]
    }
 800c602:	bf00      	nop
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
    {
    }
 800c616:	bf00      	nop
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800c622:	b480      	push	{r7}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
    {
    }
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
    {
    }
 800c642:	bf00      	nop
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
    {
    }
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
    {
    }
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800c686:	4618      	mov	r0, r3
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	807b      	strh	r3, [r7, #2]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3354      	adds	r3, #84	; 0x54
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	8879      	ldrh	r1, [r7, #2]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c6cc:	b292      	uxth	r2, r2
 800c6ce:	1a8a      	subs	r2, r1, r2
 800c6d0:	b292      	uxth	r2, r2
 800c6d2:	b210      	sxth	r0, r2
 800c6d4:	8839      	ldrh	r1, [r7, #0]
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c6dc:	b292      	uxth	r2, r2
 800c6de:	1a8a      	subs	r2, r1, r2
 800c6e0:	b292      	uxth	r2, r2
 800c6e2:	b212      	sxth	r2, r2
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	4798      	blx	r3
    }
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c6f2:	b480      	push	{r7}
 800c6f4:	b083      	sub	sp, #12
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c700:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c708:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c710:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800c712:	bf00      	nop
 800c714:	370c      	adds	r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f7ff ffe1 	bl	800c6f2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	601a      	str	r2, [r3, #0]
    }
 800c73e:	bf00      	nop
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
	...

0800c748 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
    {
        return instance;
 800c74c:	4b03      	ldr	r3, [pc, #12]	; (800c75c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c74e:	681b      	ldr	r3, [r3, #0]
    }
 800c750:	4618      	mov	r0, r3
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	2000b370 	.word	0x2000b370

0800c760 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c760:	b480      	push	{r7}
 800c762:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c764:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d008      	beq.n	800c782 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c770:	4b08      	ldr	r3, [pc, #32]	; (800c794 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c77a:	4b06      	ldr	r3, [pc, #24]	; (800c794 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c780:	e002      	b.n	800c788 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800c782:	4b04      	ldr	r3, [pc, #16]	; (800c794 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
        }
    }
 800c788:	4618      	mov	r0, r3
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	2000b370 	.word	0x2000b370

0800c798 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	4a05      	ldr	r2, [pc, #20]	; (800c7b8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	601a      	str	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff fd81 	bl	800c2b0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	0802a3cc 	.word	0x0802a3cc

0800c7bc <_ZN8touchgfx11ApplicationD0Ev>:
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff ffe7 	bl	800c798 <_ZN8touchgfx11ApplicationD1Ev>
 800c7ca:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f018 fff8 	bl	80257c4 <_ZdlPvj>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f00c fece 	bl	801958c <_ZN8touchgfx11ApplicationC1Ev>
 800c7f0:	4a09      	ldr	r2, [pc, #36]	; (800c818 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a04      	ldr	r2, [pc, #16]	; (800c81c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c80a:	6013      	str	r3, [r2, #0]
    }
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	0802763c 	.word	0x0802763c
 800c81c:	2000b3fc 	.word	0x2000b3fc

0800c820 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f804 	bl	800c836 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c836:	b580      	push	{r7, lr}
 800c838:	b082      	sub	sp, #8
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00f      	beq.n	800c868 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	330c      	adds	r3, #12
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4610      	mov	r0, r2
 800c85c:	4798      	blx	r3
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c864:	2301      	movs	r3, #1
 800c866:	e000      	b.n	800c86a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c868:	2300      	movs	r3, #0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00e      	beq.n	800c88c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3308      	adds	r3, #8
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	683a      	ldr	r2, [r7, #0]
 800c8a2:	601a      	str	r2, [r3, #0]
    }
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	4a05      	ldr	r2, [pc, #20]	; (800c8d0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7ff ff69 	bl	800c798 <_ZN8touchgfx11ApplicationD1Ev>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	0802763c 	.word	0x0802763c

0800c8d4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff ffe7 	bl	800c8b0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c8e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f018 ff6c 	bl	80257c4 <_ZdlPvj>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
	...

0800c8f8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	4a08      	ldr	r2, [pc, #32]	; (800c924 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c90c:	4618      	mov	r0, r3
 800c90e:	f002 f921 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff ffcb 	bl	800c8b0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	080275e0 	.word	0x080275e0

0800c928 <_ZN23FrontendApplicationBaseD0Ev>:
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff ffe1 	bl	800c8f8 <_ZN23FrontendApplicationBaseD1Ev>
 800c936:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f018 ff42 	bl	80257c4 <_ZdlPvj>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800c94a:	b480      	push	{r7}
 800c94c:	b083      	sub	sp, #12
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	721a      	strb	r2, [r3, #8]
    }
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	607b      	str	r3, [r7, #4]
 800c96e:	460b      	mov	r3, r1
 800c970:	817b      	strh	r3, [r7, #10]
 800c972:	4613      	mov	r3, r2
 800c974:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4618      	mov	r0, r3
 800c97a:	f7ff fe7d 	bl	800c678 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d008      	beq.n	800c996 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fe83 	bl	800c692 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d001      	beq.n	800c996 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c992:	2301      	movs	r3, #1
 800c994:	e000      	b.n	800c998 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800c996:	2300      	movs	r3, #0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	601a      	str	r2, [r3, #0]
        }
    }
 800c9a2:	bf00      	nop
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800c9aa:	b480      	push	{r7}
 800c9ac:	b083      	sub	sp, #12
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	605a      	str	r2, [r3, #4]
    }
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7ff fd2c 	bl	800c430 <_ZN8touchgfx8DrawableC1Ev>
 800c9d8:	4a03      	ldr	r2, [pc, #12]	; (800c9e8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	08027558 	.word	0x08027558

0800c9ec <_ZN8touchgfx6WidgetD1Ev>:
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	4a05      	ldr	r2, [pc, #20]	; (800ca0c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7ff fd45 	bl	800c48c <_ZN8touchgfx8DrawableD1Ev>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4618      	mov	r0, r3
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	08027558 	.word	0x08027558

0800ca10 <_ZN8touchgfx6WidgetD0Ev>:
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7ff ffe7 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 800ca1e:	2128      	movs	r1, #40	; 0x28
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f018 fecf 	bl	80257c4 <_ZdlPvj>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7ff fece 	bl	800c7e0 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ca44:	4a13      	ldr	r2, [pc, #76]	; (800ca94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 fa89 	bl	800cf68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ca66:	f7ff fe6f 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	6813      	ldr	r3, [r2, #0]
 800ca6e:	3308      	adds	r3, #8
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2100      	movs	r1, #0
 800ca74:	4610      	mov	r0, r2
 800ca76:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800ca78:	2000      	movs	r0, #0
 800ca7a:	f005 fee3 	bl	8012844 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ca7e:	f7ff fe6f 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 800ca82:	4603      	mov	r3, r0
 800ca84:	4618      	mov	r0, r3
 800ca86:	f012 fba2 	bl	801f1ce <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	080275e0 	.word	0x080275e0

0800ca98 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4618      	mov	r0, r3
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	4611      	mov	r1, r2
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff ffe9 	bl	800ca98 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	605a      	str	r2, [r3, #4]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	3308      	adds	r3, #8
 800cad4:	3208      	adds	r2, #8
 800cad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cada:	e883 0003 	stmia.w	r3, {r0, r1}
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800cae8:	b590      	push	{r4, r7, lr}
 800caea:	b089      	sub	sp, #36	; 0x24
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800caf6:	4b10      	ldr	r3, [pc, #64]	; (800cb38 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800caf8:	61bb      	str	r3, [r7, #24]
 800cafa:	2300      	movs	r3, #0
 800cafc:	61fb      	str	r3, [r7, #28]
 800cafe:	f107 0008 	add.w	r0, r7, #8
 800cb02:	f107 0318 	add.w	r3, r7, #24
 800cb06:	cb0c      	ldmia	r3, {r2, r3}
 800cb08:	6879      	ldr	r1, [r7, #4]
 800cb0a:	f000 fa49 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cb0e:	f107 0308 	add.w	r3, r7, #8
 800cb12:	4619      	mov	r1, r3
 800cb14:	4620      	mov	r0, r4
 800cb16:	f7ff ffcb 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cb1a:	f107 0308 	add.w	r3, r7, #8
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f002 f818 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cb30:	bf00      	nop
 800cb32:	3724      	adds	r7, #36	; 0x24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd90      	pop	{r4, r7, pc}
 800cb38:	0800cb3d 	.word	0x0800cb3d

0800cb3c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af02      	add	r7, sp, #8
 800cb42:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cb50:	461a      	mov	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	4b04      	ldr	r3, [pc, #16]	; (800cb6c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800cb5c:	4804      	ldr	r0, [pc, #16]	; (800cb70 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800cb5e:	f000 fa51 	bl	800d004 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	2000b3f0 	.word	0x2000b3f0
 800cb70:	2000b3ec 	.word	0x2000b3ec

0800cb74 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEast()
{
 800cb74:	b590      	push	{r4, r7, lr}
 800cb76:	b089      	sub	sp, #36	; 0x24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenSlideTransitionEastImpl);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cb82:	4b10      	ldr	r3, [pc, #64]	; (800cbc4 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv+0x50>)
 800cb84:	61bb      	str	r3, [r7, #24]
 800cb86:	2300      	movs	r3, #0
 800cb88:	61fb      	str	r3, [r7, #28]
 800cb8a:	f107 0008 	add.w	r0, r7, #8
 800cb8e:	f107 0318 	add.w	r3, r7, #24
 800cb92:	cb0c      	ldmia	r3, {r2, r3}
 800cb94:	6879      	ldr	r1, [r7, #4]
 800cb96:	f000 fa03 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cb9a:	f107 0308 	add.w	r3, r7, #8
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4620      	mov	r0, r4
 800cba2:	f7ff ff85 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cba6:	f107 0308 	add.w	r3, r7, #8
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f001 ffd2 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cbbc:	bf00      	nop
 800cbbe:	3724      	adds	r7, #36	; 0x24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd90      	pop	{r4, r7, pc}
 800cbc4:	0800cbc9 	.word	0x0800cbc9

0800cbc8 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEastImpl()
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af02      	add	r7, sp, #8
 800cbce:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cbdc:	461a      	mov	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x30>)
 800cbe8:	4804      	ldr	r0, [pc, #16]	; (800cbfc <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x34>)
 800cbea:	f000 fb37 	bl	800d25c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cbee:	bf00      	nop
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	2000b3f0 	.word	0x2000b3f0
 800cbfc:	2000b3ec 	.word	0x2000b3ec

0800cc00 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEast()
{
 800cc00:	b590      	push	{r4, r7, lr}
 800cc02:	b089      	sub	sp, #36	; 0x24
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenCoverTransitionEastImpl);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cc0e:	4b10      	ldr	r3, [pc, #64]	; (800cc50 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv+0x50>)
 800cc10:	61bb      	str	r3, [r7, #24]
 800cc12:	2300      	movs	r3, #0
 800cc14:	61fb      	str	r3, [r7, #28]
 800cc16:	f107 0008 	add.w	r0, r7, #8
 800cc1a:	f107 0318 	add.w	r3, r7, #24
 800cc1e:	cb0c      	ldmia	r3, {r2, r3}
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	f000 f9bd 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cc26:	f107 0308 	add.w	r3, r7, #8
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7ff ff3f 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	4618      	mov	r0, r3
 800cc38:	f001 ff8c 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cc48:	bf00      	nop
 800cc4a:	3724      	adds	r7, #36	; 0x24
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd90      	pop	{r4, r7, pc}
 800cc50:	0800cc55 	.word	0x0800cc55

0800cc54 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenCoverTransitionEastImpl()
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cc68:	461a      	mov	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	4b04      	ldr	r3, [pc, #16]	; (800cc84 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x30>)
 800cc74:	4804      	ldr	r0, [pc, #16]	; (800cc88 <_ZN23FrontendApplicationBase39gotoscreenScreenCoverTransitionEastImplEv+0x34>)
 800cc76:	f000 fc1d 	bl	800d4b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cc7a:	bf00      	nop
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	2000b3f0 	.word	0x2000b3f0
 800cc88:	2000b3ec 	.word	0x2000b3ec

0800cc8c <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>:

// Music

void FrontendApplicationBase::gotoMusicScreenNoTransition()
{
 800cc8c:	b590      	push	{r4, r7, lr}
 800cc8e:	b089      	sub	sp, #36	; 0x24
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMusicScreenNoTransitionImpl);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cc9a:	4b10      	ldr	r3, [pc, #64]	; (800ccdc <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv+0x50>)
 800cc9c:	61bb      	str	r3, [r7, #24]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	61fb      	str	r3, [r7, #28]
 800cca2:	f107 0008 	add.w	r0, r7, #8
 800cca6:	f107 0318 	add.w	r3, r7, #24
 800ccaa:	cb0c      	ldmia	r3, {r2, r3}
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	f000 f977 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ccb2:	f107 0308 	add.w	r3, r7, #8
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f7ff fef9 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ccbe:	f107 0308 	add.w	r3, r7, #8
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f001 ff46 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ccd4:	bf00      	nop
 800ccd6:	3724      	adds	r7, #36	; 0x24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd90      	pop	{r4, r7, pc}
 800ccdc:	0800cce1 	.word	0x0800cce1

0800cce0 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMusicScreenNoTransitionImpl()
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af02      	add	r7, sp, #8
 800cce6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MusicView, MusicPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	4b04      	ldr	r3, [pc, #16]	; (800cd10 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x30>)
 800cd00:	4804      	ldr	r0, [pc, #16]	; (800cd14 <_ZN23FrontendApplicationBase31gotoMusicScreenNoTransitionImplEv+0x34>)
 800cd02:	f000 fd03 	bl	800d70c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cd06:	bf00      	nop
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	2000b3f0 	.word	0x2000b3f0
 800cd14:	2000b3ec 	.word	0x2000b3ec

0800cd18 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>:

// gameover

void FrontendApplicationBase::gotogameoverScreenNoTransition()
{
 800cd18:	b590      	push	{r4, r7, lr}
 800cd1a:	b089      	sub	sp, #36	; 0x24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogameoverScreenNoTransitionImpl);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cd26:	4b10      	ldr	r3, [pc, #64]	; (800cd68 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv+0x50>)
 800cd28:	61bb      	str	r3, [r7, #24]
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	61fb      	str	r3, [r7, #28]
 800cd2e:	f107 0008 	add.w	r0, r7, #8
 800cd32:	f107 0318 	add.w	r3, r7, #24
 800cd36:	cb0c      	ldmia	r3, {r2, r3}
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	f000 f931 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cd3e:	f107 0308 	add.w	r3, r7, #8
 800cd42:	4619      	mov	r1, r3
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7ff feb3 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f001 ff00 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cd60:	bf00      	nop
 800cd62:	3724      	adds	r7, #36	; 0x24
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd90      	pop	{r4, r7, pc}
 800cd68:	0800cd6d 	.word	0x0800cd6d

0800cd6c <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotogameoverScreenNoTransitionImpl()
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<gameoverView, gameoverPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cd80:	461a      	mov	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	4b04      	ldr	r3, [pc, #16]	; (800cd9c <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x30>)
 800cd8c:	4804      	ldr	r0, [pc, #16]	; (800cda0 <_ZN23FrontendApplicationBase34gotogameoverScreenNoTransitionImplEv+0x34>)
 800cd8e:	f000 fde9 	bl	800d964 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cd92:	bf00      	nop
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	2000b3f0 	.word	0x2000b3f0
 800cda0:	2000b3ec 	.word	0x2000b3ec

0800cda4 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>:

// Pong

void FrontendApplicationBase::gotoPongScreenCoverTransitionEast()
{
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b089      	sub	sp, #36	; 0x24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenCoverTransitionEastImpl);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cdb2:	4b10      	ldr	r3, [pc, #64]	; (800cdf4 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv+0x50>)
 800cdb4:	61bb      	str	r3, [r7, #24]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	61fb      	str	r3, [r7, #28]
 800cdba:	f107 0008 	add.w	r0, r7, #8
 800cdbe:	f107 0318 	add.w	r3, r7, #24
 800cdc2:	cb0c      	ldmia	r3, {r2, r3}
 800cdc4:	6879      	ldr	r1, [r7, #4]
 800cdc6:	f000 f8eb 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cdca:	f107 0308 	add.w	r3, r7, #8
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f7ff fe6d 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cdd6:	f107 0308 	add.w	r3, r7, #8
 800cdda:	4618      	mov	r0, r3
 800cddc:	f001 feba 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cdec:	bf00      	nop
 800cdee:	3724      	adds	r7, #36	; 0x24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd90      	pop	{r4, r7, pc}
 800cdf4:	0800cdf9 	.word	0x0800cdf9

0800cdf8 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoPongScreenCoverTransitionEastImpl()
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af02      	add	r7, sp, #8
 800cdfe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4b04      	ldr	r3, [pc, #16]	; (800ce28 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x30>)
 800ce18:	4804      	ldr	r0, [pc, #16]	; (800ce2c <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x34>)
 800ce1a:	f000 fecf 	bl	800dbbc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ce1e:	bf00      	nop
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	2000b3f0 	.word	0x2000b3f0
 800ce2c:	2000b3ec 	.word	0x2000b3ec

0800ce30 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>:

void FrontendApplicationBase::gotoPongScreenNoTransition()
{
 800ce30:	b590      	push	{r4, r7, lr}
 800ce32:	b089      	sub	sp, #36	; 0x24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenNoTransitionImpl);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce3e:	4b10      	ldr	r3, [pc, #64]	; (800ce80 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv+0x50>)
 800ce40:	61bb      	str	r3, [r7, #24]
 800ce42:	2300      	movs	r3, #0
 800ce44:	61fb      	str	r3, [r7, #28]
 800ce46:	f107 0008 	add.w	r0, r7, #8
 800ce4a:	f107 0318 	add.w	r3, r7, #24
 800ce4e:	cb0c      	ldmia	r3, {r2, r3}
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	f000 f8a5 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce56:	f107 0308 	add.w	r3, r7, #8
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f7ff fe27 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce62:	f107 0308 	add.w	r3, r7, #8
 800ce66:	4618      	mov	r0, r3
 800ce68:	f001 fe74 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ce78:	bf00      	nop
 800ce7a:	3724      	adds	r7, #36	; 0x24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd90      	pop	{r4, r7, pc}
 800ce80:	0800ce85 	.word	0x0800ce85

0800ce84 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoPongScreenNoTransitionImpl()
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af02      	add	r7, sp, #8
 800ce8a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ce98:	461a      	mov	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x30>)
 800cea4:	4804      	ldr	r0, [pc, #16]	; (800ceb8 <_ZN23FrontendApplicationBase30gotoPongScreenNoTransitionImplEv+0x34>)
 800cea6:	f000 ffb7 	bl	800de18 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ceaa:	bf00      	nop
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	2000b3f0 	.word	0x2000b3f0
 800ceb8:	2000b3ec 	.word	0x2000b3ec

0800cebc <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>:

// gallery

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEast()
{
 800cebc:	b590      	push	{r4, r7, lr}
 800cebe:	b089      	sub	sp, #36	; 0x24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotogalleryScreenCoverTransitionEastImpl);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ceca:	4b10      	ldr	r3, [pc, #64]	; (800cf0c <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv+0x50>)
 800cecc:	61bb      	str	r3, [r7, #24]
 800cece:	2300      	movs	r3, #0
 800ced0:	61fb      	str	r3, [r7, #28]
 800ced2:	f107 0008 	add.w	r0, r7, #8
 800ced6:	f107 0318 	add.w	r3, r7, #24
 800ceda:	cb0c      	ldmia	r3, {r2, r3}
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	f000 f85f 	bl	800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cee2:	f107 0308 	add.w	r3, r7, #8
 800cee6:	4619      	mov	r1, r3
 800cee8:	4620      	mov	r0, r4
 800ceea:	f7ff fde1 	bl	800cab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f001 fe2e 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf04:	bf00      	nop
 800cf06:	3724      	adds	r7, #36	; 0x24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd90      	pop	{r4, r7, pc}
 800cf0c:	0800cf11 	.word	0x0800cf11

0800cf10 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotogalleryScreenCoverTransitionEastImpl()
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af02      	add	r7, sp, #8
 800cf16:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<galleryView, galleryPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cf24:	461a      	mov	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x30>)
 800cf30:	4804      	ldr	r0, [pc, #16]	; (800cf44 <_ZN23FrontendApplicationBase40gotogalleryScreenCoverTransitionEastImplEv+0x34>)
 800cf32:	f001 f89d 	bl	800e070 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cf36:	bf00      	nop
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	2000b3f0 	.word	0x2000b3f0
 800cf44:	2000b3ec 	.word	0x2000b3ec

0800cf48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	4a04      	ldr	r2, [pc, #16]	; (800cf64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr
 800cf64:	08027680 	.word	0x08027680

0800cf68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7ff ffe8 	bl	800cf48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf78:	4a08      	ldr	r2, [pc, #32]	; (800cf9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	605a      	str	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	609a      	str	r2, [r3, #8]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	60da      	str	r2, [r3, #12]
    {
    }
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	08027624 	.word	0x08027624

0800cfa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	4639      	mov	r1, r7
 800cfac:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7ff ffc8 	bl	800cf48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cfb8:	4a08      	ldr	r2, [pc, #32]	; (800cfdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3308      	adds	r3, #8
 800cfc8:	463a      	mov	r2, r7
 800cfca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	08027624 	.word	0x08027624

0800cfe0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff f980 	bl	800c2f0 <_ZN8touchgfx10TransitionC1Ev>
 800cff0:	4a03      	ldr	r2, [pc, #12]	; (800d000 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	080275c0 	.word	0x080275c0

0800d004 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d004:	b590      	push	{r4, r7, lr}
 800d006:	b08f      	sub	sp, #60	; 0x3c
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	689a      	ldr	r2, [r3, #8]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3320      	adds	r3, #32
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4610      	mov	r0, r2
 800d022:	4798      	blx	r3
 800d024:	4603      	mov	r3, r0
 800d026:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d02a:	d205      	bcs.n	800d038 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d02c:	4b86      	ldr	r3, [pc, #536]	; (800d248 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d02e:	4a87      	ldr	r2, [pc, #540]	; (800d24c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d030:	21a7      	movs	r1, #167	; 0xa7
 800d032:	4887      	ldr	r0, [pc, #540]	; (800d250 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d034:	f018 fbf2 	bl	802581c <__assert_func>
 800d038:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	3320      	adds	r3, #32
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4610      	mov	r0, r2
 800d04a:	4798      	blx	r3
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b0f      	cmp	r3, #15
 800d050:	d805      	bhi.n	800d05e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d052:	4b80      	ldr	r3, [pc, #512]	; (800d254 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d054:	4a7d      	ldr	r2, [pc, #500]	; (800d24c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d056:	21a8      	movs	r1, #168	; 0xa8
 800d058:	487d      	ldr	r0, [pc, #500]	; (800d250 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d05a:	f018 fbdf 	bl	802581c <__assert_func>
 800d05e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68da      	ldr	r2, [r3, #12]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3320      	adds	r3, #32
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4610      	mov	r0, r2
 800d070:	4798      	blx	r3
 800d072:	4603      	mov	r3, r0
 800d074:	2b0b      	cmp	r3, #11
 800d076:	d805      	bhi.n	800d084 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d078:	4b77      	ldr	r3, [pc, #476]	; (800d258 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d07a:	4a74      	ldr	r2, [pc, #464]	; (800d24c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d07c:	21a9      	movs	r1, #169	; 0xa9
 800d07e:	4874      	ldr	r0, [pc, #464]	; (800d250 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d080:	f018 fbcc 	bl	802581c <__assert_func>
 800d084:	bf00      	nop
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	62bb      	str	r3, [r7, #40]	; 0x28
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	627b      	str	r3, [r7, #36]	; 0x24
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d092:	f00c fa43 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d096:	4603      	mov	r3, r0
 800d098:	4618      	mov	r0, r3
 800d09a:	f00c fa5b 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d008      	beq.n	800d0b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	330c      	adds	r3, #12
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
    if (*currentTrans)
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d007      	beq.n	800d0d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4610      	mov	r0, r2
 800d0ce:	4798      	blx	r3
    if (*currentScreen)
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d008      	beq.n	800d0ea <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3314      	adds	r3, #20
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	4798      	blx	r3
    if (*currentPresenter)
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d008      	beq.n	800d104 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4610      	mov	r0, r2
 800d102:	4798      	blx	r3
    if (*currentScreen)
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d007      	beq.n	800d11c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4610      	mov	r0, r2
 800d11a:	4798      	blx	r3
    if (*currentPresenter)
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d008      	beq.n	800d136 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	3308      	adds	r3, #8
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4610      	mov	r0, r2
 800d134:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	2100      	movs	r1, #0
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 f8c3 	bl	800e2c8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d142:	4603      	mov	r3, r0
 800d144:	4619      	mov	r1, r3
 800d146:	200c      	movs	r0, #12
 800d148:	f7ff f82e 	bl	800c1a8 <_ZnwjPv>
 800d14c:	4604      	mov	r4, r0
 800d14e:	2c00      	cmp	r4, #0
 800d150:	d004      	beq.n	800d15c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d152:	4620      	mov	r0, r4
 800d154:	f7ff ff44 	bl	800cfe0 <_ZN8touchgfx12NoTransitionC1Ev>
 800d158:	4623      	mov	r3, r4
 800d15a:	e000      	b.n	800d15e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d15c:	4623      	mov	r3, r4
 800d15e:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	2100      	movs	r1, #0
 800d166:	4618      	mov	r0, r3
 800d168:	f001 f8c1 	bl	800e2ee <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d16c:	4603      	mov	r3, r0
 800d16e:	4619      	mov	r1, r3
 800d170:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d174:	f7ff f818 	bl	800c1a8 <_ZnwjPv>
 800d178:	4604      	mov	r4, r0
 800d17a:	2c00      	cmp	r4, #0
 800d17c:	d004      	beq.n	800d188 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d17e:	4620      	mov	r0, r4
 800d180:	f006 fcbc 	bl	8013afc <_ZN10screenViewC1Ev>
 800d184:	4623      	mov	r3, r4
 800d186:	e000      	b.n	800d18a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d188:	4623      	mov	r3, r4
 800d18a:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f001 f8be 	bl	800e314 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d198:	4603      	mov	r3, r0
 800d19a:	4619      	mov	r1, r3
 800d19c:	2010      	movs	r0, #16
 800d19e:	f7ff f803 	bl	800c1a8 <_ZnwjPv>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	2c00      	cmp	r4, #0
 800d1a6:	d005      	beq.n	800d1b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d1a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f006 fc4e 	bl	8013a4c <_ZN15screenPresenterC1ER10screenView>
 800d1b0:	4623      	mov	r3, r4
 800d1b2:	e000      	b.n	800d1b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d1b4:	4623      	mov	r3, r4
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1bc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1c2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1c8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	e000      	b.n	800d1d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d1dc:	f7ff fb5a 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff fbdf 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f001 f8a2 	bl	800e33a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	61fb      	str	r3, [r7, #28]
 800d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fc:	61bb      	str	r3, [r7, #24]
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	330c      	adds	r3, #12
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	69f8      	ldr	r0, [r7, #28]
 800d20c:	4798      	blx	r3
    newPresenter->activate();
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	69b8      	ldr	r0, [r7, #24]
 800d216:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d218:	6979      	ldr	r1, [r7, #20]
 800d21a:	69f8      	ldr	r0, [r7, #28]
 800d21c:	f00d fab0 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3310      	adds	r3, #16
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6978      	ldr	r0, [r7, #20]
 800d22a:	4798      	blx	r3
    Application::getInstance()->draw();
 800d22c:	f00c f976 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d230:	4602      	mov	r2, r0
 800d232:	6813      	ldr	r3, [r2, #0]
 800d234:	3330      	adds	r3, #48	; 0x30
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4610      	mov	r0, r2
 800d23a:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d23e:	4618      	mov	r0, r3
 800d240:	373c      	adds	r7, #60	; 0x3c
 800d242:	46bd      	mov	sp, r7
 800d244:	bd90      	pop	{r4, r7, pc}
 800d246:	bf00      	nop
 800d248:	08026928 	.word	0x08026928
 800d24c:	080276d8 	.word	0x080276d8
 800d250:	080269b8 	.word	0x080269b8
 800d254:	080269fc 	.word	0x080269fc
 800d258:	08026aa0 	.word	0x08026aa0

0800d25c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d25c:	b590      	push	{r4, r7, lr}
 800d25e:	b08f      	sub	sp, #60	; 0x3c
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	689a      	ldr	r2, [r3, #8]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3320      	adds	r3, #32
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4610      	mov	r0, r2
 800d27a:	4798      	blx	r3
 800d27c:	4603      	mov	r3, r0
 800d27e:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d282:	d205      	bcs.n	800d290 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d284:	4b86      	ldr	r3, [pc, #536]	; (800d4a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d286:	4a87      	ldr	r2, [pc, #540]	; (800d4a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d288:	21a7      	movs	r1, #167	; 0xa7
 800d28a:	4887      	ldr	r0, [pc, #540]	; (800d4a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d28c:	f018 fac6 	bl	802581c <__assert_func>
 800d290:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3320      	adds	r3, #32
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	4798      	blx	r3
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b0f      	cmp	r3, #15
 800d2a8:	d805      	bhi.n	800d2b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d2aa:	4b80      	ldr	r3, [pc, #512]	; (800d4ac <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d2ac:	4a7d      	ldr	r2, [pc, #500]	; (800d4a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d2ae:	21a8      	movs	r1, #168	; 0xa8
 800d2b0:	487d      	ldr	r0, [pc, #500]	; (800d4a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d2b2:	f018 fab3 	bl	802581c <__assert_func>
 800d2b6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3320      	adds	r3, #32
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	4798      	blx	r3
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b53      	cmp	r3, #83	; 0x53
 800d2ce:	d805      	bhi.n	800d2dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d2d0:	4b77      	ldr	r3, [pc, #476]	; (800d4b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d2d2:	4a74      	ldr	r2, [pc, #464]	; (800d4a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d2d4:	21a9      	movs	r1, #169	; 0xa9
 800d2d6:	4874      	ldr	r0, [pc, #464]	; (800d4a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d2d8:	f018 faa0 	bl	802581c <__assert_func>
 800d2dc:	bf00      	nop
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d2ea:	f00c f917 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f00c f92f 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d008      	beq.n	800d310 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d2fe:	6a3b      	ldr	r3, [r7, #32]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	330c      	adds	r3, #12
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4610      	mov	r0, r2
 800d30e:	4798      	blx	r3
    if (*currentTrans)
 800d310:	6a3b      	ldr	r3, [r7, #32]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d007      	beq.n	800d328 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4610      	mov	r0, r2
 800d326:	4798      	blx	r3
    if (*currentScreen)
 800d328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d008      	beq.n	800d342 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3314      	adds	r3, #20
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4610      	mov	r0, r2
 800d340:	4798      	blx	r3
    if (*currentPresenter)
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d008      	beq.n	800d35c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3304      	adds	r3, #4
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4610      	mov	r0, r2
 800d35a:	4798      	blx	r3
    if (*currentScreen)
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d007      	beq.n	800d374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4610      	mov	r0, r2
 800d372:	4798      	blx	r3
    if (*currentPresenter)
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d008      	beq.n	800d38e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3308      	adds	r3, #8
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4610      	mov	r0, r2
 800d38c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	2100      	movs	r1, #0
 800d394:	4618      	mov	r0, r3
 800d396:	f000 ffde 	bl	800e356 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4619      	mov	r1, r3
 800d39e:	2054      	movs	r0, #84	; 0x54
 800d3a0:	f7fe ff02 	bl	800c1a8 <_ZnwjPv>
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	2c00      	cmp	r4, #0
 800d3a8:	d005      	beq.n	800d3b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d3aa:	2114      	movs	r1, #20
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f001 f829 	bl	800e404 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d3b2:	4623      	mov	r3, r4
 800d3b4:	e000      	b.n	800d3b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d3b6:	4623      	mov	r3, r4
 800d3b8:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	2100      	movs	r1, #0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 ff94 	bl	800e2ee <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d3ce:	f7fe feeb 	bl	800c1a8 <_ZnwjPv>
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	2c00      	cmp	r4, #0
 800d3d6:	d004      	beq.n	800d3e2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f006 fb8f 	bl	8013afc <_ZN10screenViewC1Ev>
 800d3de:	4623      	mov	r3, r4
 800d3e0:	e000      	b.n	800d3e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d3e2:	4623      	mov	r3, r4
 800d3e4:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 ff91 	bl	800e314 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	2010      	movs	r0, #16
 800d3f8:	f7fe fed6 	bl	800c1a8 <_ZnwjPv>
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	2c00      	cmp	r4, #0
 800d400:	d005      	beq.n	800d40e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d404:	4620      	mov	r0, r4
 800d406:	f006 fb21 	bl	8013a4c <_ZN15screenPresenterC1ER10screenView>
 800d40a:	4623      	mov	r3, r4
 800d40c:	e000      	b.n	800d410 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d40e:	4623      	mov	r3, r4
 800d410:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d416:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d41c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d422:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d002      	beq.n	800d430 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42c:	3304      	adds	r3, #4
 800d42e:	e000      	b.n	800d432 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d430:	2300      	movs	r3, #0
 800d432:	4619      	mov	r1, r3
 800d434:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d436:	f7ff fa2d 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	3304      	adds	r3, #4
 800d43e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff fab2 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 ff75 	bl	800e33a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	61fb      	str	r3, [r7, #28]
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	61bb      	str	r3, [r7, #24]
 800d458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	330c      	adds	r3, #12
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	69f8      	ldr	r0, [r7, #28]
 800d466:	4798      	blx	r3
    newPresenter->activate();
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	69b8      	ldr	r0, [r7, #24]
 800d470:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d472:	6979      	ldr	r1, [r7, #20]
 800d474:	69f8      	ldr	r0, [r7, #28]
 800d476:	f00d f983 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	3310      	adds	r3, #16
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	6978      	ldr	r0, [r7, #20]
 800d484:	4798      	blx	r3
    Application::getInstance()->draw();
 800d486:	f00c f849 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d48a:	4602      	mov	r2, r0
 800d48c:	6813      	ldr	r3, [r2, #0]
 800d48e:	3330      	adds	r3, #48	; 0x30
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4610      	mov	r0, r2
 800d494:	4798      	blx	r3
    return newPresenter;
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d498:	4618      	mov	r0, r3
 800d49a:	373c      	adds	r7, #60	; 0x3c
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd90      	pop	{r4, r7, pc}
 800d4a0:	08026928 	.word	0x08026928
 800d4a4:	080277dc 	.word	0x080277dc
 800d4a8:	080269b8 	.word	0x080269b8
 800d4ac:	080269fc 	.word	0x080269fc
 800d4b0:	08026aa0 	.word	0x08026aa0

0800d4b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d4b4:	b590      	push	{r4, r7, lr}
 800d4b6:	b08f      	sub	sp, #60	; 0x3c
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
 800d4c0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	689a      	ldr	r2, [r3, #8]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3320      	adds	r3, #32
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	4798      	blx	r3
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800d4da:	d205      	bcs.n	800d4e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d4dc:	4b86      	ldr	r3, [pc, #536]	; (800d6f8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d4de:	4a87      	ldr	r2, [pc, #540]	; (800d6fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d4e0:	21a7      	movs	r1, #167	; 0xa7
 800d4e2:	4887      	ldr	r0, [pc, #540]	; (800d700 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d4e4:	f018 f99a 	bl	802581c <__assert_func>
 800d4e8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685a      	ldr	r2, [r3, #4]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3320      	adds	r3, #32
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	4798      	blx	r3
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b0f      	cmp	r3, #15
 800d500:	d805      	bhi.n	800d50e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d502:	4b80      	ldr	r3, [pc, #512]	; (800d704 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d504:	4a7d      	ldr	r2, [pc, #500]	; (800d6fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d506:	21a8      	movs	r1, #168	; 0xa8
 800d508:	487d      	ldr	r0, [pc, #500]	; (800d700 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d50a:	f018 f987 	bl	802581c <__assert_func>
 800d50e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	68da      	ldr	r2, [r3, #12]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3320      	adds	r3, #32
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4610      	mov	r0, r2
 800d520:	4798      	blx	r3
 800d522:	4603      	mov	r3, r0
 800d524:	2b4f      	cmp	r3, #79	; 0x4f
 800d526:	d805      	bhi.n	800d534 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d528:	4b77      	ldr	r3, [pc, #476]	; (800d708 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d52a:	4a74      	ldr	r2, [pc, #464]	; (800d6fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d52c:	21a9      	movs	r1, #169	; 0xa9
 800d52e:	4874      	ldr	r0, [pc, #464]	; (800d700 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d530:	f018 f974 	bl	802581c <__assert_func>
 800d534:	bf00      	nop
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	62bb      	str	r3, [r7, #40]	; 0x28
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	627b      	str	r3, [r7, #36]	; 0x24
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d542:	f00b ffeb 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d546:	4603      	mov	r3, r0
 800d548:	4618      	mov	r0, r3
 800d54a:	f00c f803 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d008      	beq.n	800d568 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d556:	6a3b      	ldr	r3, [r7, #32]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	330c      	adds	r3, #12
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4610      	mov	r0, r2
 800d566:	4798      	blx	r3
    if (*currentTrans)
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d007      	beq.n	800d580 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4610      	mov	r0, r2
 800d57e:	4798      	blx	r3
    if (*currentScreen)
 800d580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d008      	beq.n	800d59a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	3314      	adds	r3, #20
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4610      	mov	r0, r2
 800d598:	4798      	blx	r3
    if (*currentPresenter)
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d008      	beq.n	800d5b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	4798      	blx	r3
    if (*currentScreen)
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d007      	beq.n	800d5cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	4798      	blx	r3
    if (*currentPresenter)
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d008      	beq.n	800d5e6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	3308      	adds	r3, #8
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 ff9d 	bl	800e52c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	2050      	movs	r0, #80	; 0x50
 800d5f8:	f7fe fdd6 	bl	800c1a8 <_ZnwjPv>
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	2c00      	cmp	r4, #0
 800d600:	d005      	beq.n	800d60e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d602:	2114      	movs	r1, #20
 800d604:	4620      	mov	r0, r4
 800d606:	f000 fffb 	bl	800e600 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800d60a:	4623      	mov	r3, r4
 800d60c:	e000      	b.n	800d610 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800d60e:	4623      	mov	r3, r4
 800d610:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	2100      	movs	r1, #0
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 fe68 	bl	800e2ee <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d61e:	4603      	mov	r3, r0
 800d620:	4619      	mov	r1, r3
 800d622:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800d626:	f7fe fdbf 	bl	800c1a8 <_ZnwjPv>
 800d62a:	4604      	mov	r4, r0
 800d62c:	2c00      	cmp	r4, #0
 800d62e:	d004      	beq.n	800d63a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d630:	4620      	mov	r0, r4
 800d632:	f006 fa63 	bl	8013afc <_ZN10screenViewC1Ev>
 800d636:	4623      	mov	r3, r4
 800d638:	e000      	b.n	800d63c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800d63a:	4623      	mov	r3, r4
 800d63c:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	2100      	movs	r1, #0
 800d644:	4618      	mov	r0, r3
 800d646:	f000 fe65 	bl	800e314 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d64a:	4603      	mov	r3, r0
 800d64c:	4619      	mov	r1, r3
 800d64e:	2010      	movs	r0, #16
 800d650:	f7fe fdaa 	bl	800c1a8 <_ZnwjPv>
 800d654:	4604      	mov	r4, r0
 800d656:	2c00      	cmp	r4, #0
 800d658:	d005      	beq.n	800d666 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d65a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d65c:	4620      	mov	r0, r4
 800d65e:	f006 f9f5 	bl	8013a4c <_ZN15screenPresenterC1ER10screenView>
 800d662:	4623      	mov	r3, r4
 800d664:	e000      	b.n	800d668 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d666:	4623      	mov	r3, r4
 800d668:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d66e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d674:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d67a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d684:	3304      	adds	r3, #4
 800d686:	e000      	b.n	800d68a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800d688:	2300      	movs	r3, #0
 800d68a:	4619      	mov	r1, r3
 800d68c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d68e:	f7ff f901 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d694:	3304      	adds	r3, #4
 800d696:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff f986 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 fe49 	bl	800e33a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6aa:	61fb      	str	r3, [r7, #28]
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	61bb      	str	r3, [r7, #24]
 800d6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	330c      	adds	r3, #12
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	69f8      	ldr	r0, [r7, #28]
 800d6be:	4798      	blx	r3
    newPresenter->activate();
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	69b8      	ldr	r0, [r7, #24]
 800d6c8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d6ca:	6979      	ldr	r1, [r7, #20]
 800d6cc:	69f8      	ldr	r0, [r7, #28]
 800d6ce:	f00d f857 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3310      	adds	r3, #16
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6978      	ldr	r0, [r7, #20]
 800d6dc:	4798      	blx	r3
    Application::getInstance()->draw();
 800d6de:	f00b ff1d 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	6813      	ldr	r3, [r2, #0]
 800d6e6:	3330      	adds	r3, #48	; 0x30
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	4798      	blx	r3
    return newPresenter;
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	373c      	adds	r7, #60	; 0x3c
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd90      	pop	{r4, r7, pc}
 800d6f8:	08026928 	.word	0x08026928
 800d6fc:	080278fc 	.word	0x080278fc
 800d700:	080269b8 	.word	0x080269b8
 800d704:	080269fc 	.word	0x080269fc
 800d708:	08026aa0 	.word	0x08026aa0

0800d70c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d70c:	b590      	push	{r4, r7, lr}
 800d70e:	b08f      	sub	sp, #60	; 0x3c
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	689a      	ldr	r2, [r3, #8]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3320      	adds	r3, #32
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4610      	mov	r0, r2
 800d72a:	4798      	blx	r3
 800d72c:	4603      	mov	r3, r0
 800d72e:	f5b3 7f46 	cmp.w	r3, #792	; 0x318
 800d732:	d205      	bcs.n	800d740 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d734:	4b86      	ldr	r3, [pc, #536]	; (800d950 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d736:	4a87      	ldr	r2, [pc, #540]	; (800d954 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d738:	21a7      	movs	r1, #167	; 0xa7
 800d73a:	4887      	ldr	r0, [pc, #540]	; (800d958 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d73c:	f018 f86e 	bl	802581c <__assert_func>
 800d740:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	3320      	adds	r3, #32
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4610      	mov	r0, r2
 800d752:	4798      	blx	r3
 800d754:	4603      	mov	r3, r0
 800d756:	2b0f      	cmp	r3, #15
 800d758:	d805      	bhi.n	800d766 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d75a:	4b80      	ldr	r3, [pc, #512]	; (800d95c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d75c:	4a7d      	ldr	r2, [pc, #500]	; (800d954 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d75e:	21a8      	movs	r1, #168	; 0xa8
 800d760:	487d      	ldr	r0, [pc, #500]	; (800d958 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d762:	f018 f85b 	bl	802581c <__assert_func>
 800d766:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68da      	ldr	r2, [r3, #12]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3320      	adds	r3, #32
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4610      	mov	r0, r2
 800d778:	4798      	blx	r3
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b0b      	cmp	r3, #11
 800d77e:	d805      	bhi.n	800d78c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d780:	4b77      	ldr	r3, [pc, #476]	; (800d960 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d782:	4a74      	ldr	r2, [pc, #464]	; (800d954 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d784:	21a9      	movs	r1, #169	; 0xa9
 800d786:	4874      	ldr	r0, [pc, #464]	; (800d958 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d788:	f018 f848 	bl	802581c <__assert_func>
 800d78c:	bf00      	nop
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	62bb      	str	r3, [r7, #40]	; 0x28
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	627b      	str	r3, [r7, #36]	; 0x24
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d79a:	f00b febf 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f00b fed7 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d008      	beq.n	800d7c0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d7ae:	6a3b      	ldr	r3, [r7, #32]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	330c      	adds	r3, #12
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4798      	blx	r3
    if (*currentTrans)
 800d7c0:	6a3b      	ldr	r3, [r7, #32]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d007      	beq.n	800d7d8 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	6a3b      	ldr	r3, [r7, #32]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	4798      	blx	r3
    if (*currentScreen)
 800d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d008      	beq.n	800d7f2 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3314      	adds	r3, #20
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	4798      	blx	r3
    if (*currentPresenter)
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d008      	beq.n	800d80c <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	3304      	adds	r3, #4
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
    if (*currentScreen)
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d007      	beq.n	800d824 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
    if (*currentPresenter)
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d008      	beq.n	800d83e <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3308      	adds	r3, #8
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4610      	mov	r0, r2
 800d83c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	2100      	movs	r1, #0
 800d844:	4618      	mov	r0, r3
 800d846:	f000 fd3f 	bl	800e2c8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d84a:	4603      	mov	r3, r0
 800d84c:	4619      	mov	r1, r3
 800d84e:	200c      	movs	r0, #12
 800d850:	f7fe fcaa 	bl	800c1a8 <_ZnwjPv>
 800d854:	4604      	mov	r4, r0
 800d856:	2c00      	cmp	r4, #0
 800d858:	d004      	beq.n	800d864 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800d85a:	4620      	mov	r0, r4
 800d85c:	f7ff fbc0 	bl	800cfe0 <_ZN8touchgfx12NoTransitionC1Ev>
 800d860:	4623      	mov	r3, r4
 800d862:	e000      	b.n	800d866 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800d864:	4623      	mov	r3, r4
 800d866:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	2100      	movs	r1, #0
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 ff4a 	bl	800e708 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>
 800d874:	4603      	mov	r3, r0
 800d876:	4619      	mov	r1, r3
 800d878:	f44f 7046 	mov.w	r0, #792	; 0x318
 800d87c:	f7fe fc94 	bl	800c1a8 <_ZnwjPv>
 800d880:	4604      	mov	r4, r0
 800d882:	2c00      	cmp	r4, #0
 800d884:	d004      	beq.n	800d890 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800d886:	4620      	mov	r0, r4
 800d888:	f005 fb84 	bl	8012f94 <_ZN9MusicViewC1Ev>
 800d88c:	4623      	mov	r3, r4
 800d88e:	e000      	b.n	800d892 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800d890:	4623      	mov	r3, r4
 800d892:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 ff47 	bl	800e72e <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	2010      	movs	r0, #16
 800d8a6:	f7fe fc7f 	bl	800c1a8 <_ZnwjPv>
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	2c00      	cmp	r4, #0
 800d8ae:	d005      	beq.n	800d8bc <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d8b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f005 fb0e 	bl	8012ed4 <_ZN14MusicPresenterC1ER9MusicView>
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	e000      	b.n	800d8be <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d8bc:	4623      	mov	r3, r4
 800d8be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8c4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8ca:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8d0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	3304      	adds	r3, #4
 800d8dc:	e000      	b.n	800d8e0 <_ZN8touchgfx14makeTransitionI9MusicView14MusicPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d8e4:	f7fe ffd6 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7ff f85b 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 ff2b 	bl	800e754 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	61fb      	str	r3, [r7, #28]
 800d902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d904:	61bb      	str	r3, [r7, #24]
 800d906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d908:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	330c      	adds	r3, #12
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	69f8      	ldr	r0, [r7, #28]
 800d914:	4798      	blx	r3
    newPresenter->activate();
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	69b8      	ldr	r0, [r7, #24]
 800d91e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d920:	6979      	ldr	r1, [r7, #20]
 800d922:	69f8      	ldr	r0, [r7, #28]
 800d924:	f00c ff2c 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3310      	adds	r3, #16
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6978      	ldr	r0, [r7, #20]
 800d932:	4798      	blx	r3
    Application::getInstance()->draw();
 800d934:	f00b fdf2 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d938:	4602      	mov	r2, r0
 800d93a:	6813      	ldr	r3, [r2, #0]
 800d93c:	3330      	adds	r3, #48	; 0x30
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4610      	mov	r0, r2
 800d942:	4798      	blx	r3
    return newPresenter;
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d946:	4618      	mov	r0, r3
 800d948:	373c      	adds	r7, #60	; 0x3c
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd90      	pop	{r4, r7, pc}
 800d94e:	bf00      	nop
 800d950:	08026928 	.word	0x08026928
 800d954:	08027a1c 	.word	0x08027a1c
 800d958:	080269b8 	.word	0x080269b8
 800d95c:	080269fc 	.word	0x080269fc
 800d960:	08026aa0 	.word	0x08026aa0

0800d964 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d964:	b590      	push	{r4, r7, lr}
 800d966:	b08f      	sub	sp, #60	; 0x3c
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	689a      	ldr	r2, [r3, #8]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3320      	adds	r3, #32
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4610      	mov	r0, r2
 800d982:	4798      	blx	r3
 800d984:	4603      	mov	r3, r0
 800d986:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800d98a:	d205      	bcs.n	800d998 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d98c:	4b86      	ldr	r3, [pc, #536]	; (800dba8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800d98e:	4a87      	ldr	r2, [pc, #540]	; (800dbac <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d990:	21a7      	movs	r1, #167	; 0xa7
 800d992:	4887      	ldr	r0, [pc, #540]	; (800dbb0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d994:	f017 ff42 	bl	802581c <__assert_func>
 800d998:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3320      	adds	r3, #32
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4610      	mov	r0, r2
 800d9aa:	4798      	blx	r3
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b0f      	cmp	r3, #15
 800d9b0:	d805      	bhi.n	800d9be <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d9b2:	4b80      	ldr	r3, [pc, #512]	; (800dbb4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800d9b4:	4a7d      	ldr	r2, [pc, #500]	; (800dbac <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d9b6:	21a8      	movs	r1, #168	; 0xa8
 800d9b8:	487d      	ldr	r0, [pc, #500]	; (800dbb0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d9ba:	f017 ff2f 	bl	802581c <__assert_func>
 800d9be:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68da      	ldr	r2, [r3, #12]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3320      	adds	r3, #32
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	4798      	blx	r3
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b0b      	cmp	r3, #11
 800d9d6:	d805      	bhi.n	800d9e4 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d9d8:	4b77      	ldr	r3, [pc, #476]	; (800dbb8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800d9da:	4a74      	ldr	r2, [pc, #464]	; (800dbac <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800d9dc:	21a9      	movs	r1, #169	; 0xa9
 800d9de:	4874      	ldr	r0, [pc, #464]	; (800dbb0 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800d9e0:	f017 ff1c 	bl	802581c <__assert_func>
 800d9e4:	bf00      	nop
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d9f2:	f00b fd93 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f00b fdab 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800da06:	6a3b      	ldr	r3, [r7, #32]
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	6a3b      	ldr	r3, [r7, #32]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	330c      	adds	r3, #12
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4610      	mov	r0, r2
 800da16:	4798      	blx	r3
    if (*currentTrans)
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4610      	mov	r0, r2
 800da2e:	4798      	blx	r3
    if (*currentScreen)
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d008      	beq.n	800da4a <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	3314      	adds	r3, #20
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4610      	mov	r0, r2
 800da48:	4798      	blx	r3
    if (*currentPresenter)
 800da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d008      	beq.n	800da64 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3304      	adds	r3, #4
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4610      	mov	r0, r2
 800da62:	4798      	blx	r3
    if (*currentScreen)
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d007      	beq.n	800da7c <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4610      	mov	r0, r2
 800da7a:	4798      	blx	r3
    if (*currentPresenter)
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d008      	beq.n	800da96 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	3308      	adds	r3, #8
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4610      	mov	r0, r2
 800da94:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	2100      	movs	r1, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 fc13 	bl	800e2c8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800daa2:	4603      	mov	r3, r0
 800daa4:	4619      	mov	r1, r3
 800daa6:	200c      	movs	r0, #12
 800daa8:	f7fe fb7e 	bl	800c1a8 <_ZnwjPv>
 800daac:	4604      	mov	r4, r0
 800daae:	2c00      	cmp	r4, #0
 800dab0:	d004      	beq.n	800dabc <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800dab2:	4620      	mov	r0, r4
 800dab4:	f7ff fa94 	bl	800cfe0 <_ZN8touchgfx12NoTransitionC1Ev>
 800dab8:	4623      	mov	r3, r4
 800daba:	e000      	b.n	800dabe <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800dabc:	4623      	mov	r3, r4
 800dabe:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	2100      	movs	r1, #0
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 fe52 	bl	800e770 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>
 800dacc:	4603      	mov	r3, r0
 800dace:	4619      	mov	r1, r3
 800dad0:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800dad4:	f7fe fb68 	bl	800c1a8 <_ZnwjPv>
 800dad8:	4604      	mov	r4, r0
 800dada:	2c00      	cmp	r4, #0
 800dadc:	d004      	beq.n	800dae8 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800dade:	4620      	mov	r0, r4
 800dae0:	f005 f96c 	bl	8012dbc <_ZN12gameoverViewC1Ev>
 800dae4:	4623      	mov	r3, r4
 800dae6:	e000      	b.n	800daea <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800dae8:	4623      	mov	r3, r4
 800daea:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	2100      	movs	r1, #0
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 fe4f 	bl	800e796 <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>
 800daf8:	4603      	mov	r3, r0
 800dafa:	4619      	mov	r1, r3
 800dafc:	2010      	movs	r0, #16
 800dafe:	f7fe fb53 	bl	800c1a8 <_ZnwjPv>
 800db02:	4604      	mov	r4, r0
 800db04:	2c00      	cmp	r4, #0
 800db06:	d005      	beq.n	800db14 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800db08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db0a:	4620      	mov	r0, r4
 800db0c:	f005 f8fe 	bl	8012d0c <_ZN17gameoverPresenterC1ER12gameoverView>
 800db10:	4623      	mov	r3, r4
 800db12:	e000      	b.n	800db16 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800db14:	4623      	mov	r3, r4
 800db16:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db1c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db22:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db28:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db32:	3304      	adds	r3, #4
 800db34:	e000      	b.n	800db38 <_ZN8touchgfx14makeTransitionI12gameoverView17gameoverPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800db36:	2300      	movs	r3, #0
 800db38:	4619      	mov	r1, r3
 800db3a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800db3c:	f7fe feaa 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db42:	3304      	adds	r3, #4
 800db44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800db46:	4618      	mov	r0, r3
 800db48:	f7fe ff2f 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db50:	4618      	mov	r0, r3
 800db52:	f000 fe33 	bl	800e7bc <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	61fb      	str	r3, [r7, #28]
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db60:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	330c      	adds	r3, #12
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	69f8      	ldr	r0, [r7, #28]
 800db6c:	4798      	blx	r3
    newPresenter->activate();
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	69b8      	ldr	r0, [r7, #24]
 800db76:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800db78:	6979      	ldr	r1, [r7, #20]
 800db7a:	69f8      	ldr	r0, [r7, #28]
 800db7c:	f00c fe00 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3310      	adds	r3, #16
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6978      	ldr	r0, [r7, #20]
 800db8a:	4798      	blx	r3
    Application::getInstance()->draw();
 800db8c:	f00b fcc6 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800db90:	4602      	mov	r2, r0
 800db92:	6813      	ldr	r3, [r2, #0]
 800db94:	3330      	adds	r3, #48	; 0x30
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4610      	mov	r0, r2
 800db9a:	4798      	blx	r3
    return newPresenter;
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	373c      	adds	r7, #60	; 0x3c
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd90      	pop	{r4, r7, pc}
 800dba6:	bf00      	nop
 800dba8:	08026928 	.word	0x08026928
 800dbac:	08027b1c 	.word	0x08027b1c
 800dbb0:	080269b8 	.word	0x080269b8
 800dbb4:	080269fc 	.word	0x080269fc
 800dbb8:	08026aa0 	.word	0x08026aa0

0800dbbc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800dbbc:	b590      	push	{r4, r7, lr}
 800dbbe:	b08f      	sub	sp, #60	; 0x3c
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689a      	ldr	r2, [r3, #8]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3320      	adds	r3, #32
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4610      	mov	r0, r2
 800dbda:	4798      	blx	r3
 800dbdc:	4602      	mov	r2, r0
 800dbde:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d805      	bhi.n	800dbf2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800dbe6:	4b87      	ldr	r3, [pc, #540]	; (800de04 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800dbe8:	4a87      	ldr	r2, [pc, #540]	; (800de08 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dbea:	21a7      	movs	r1, #167	; 0xa7
 800dbec:	4887      	ldr	r0, [pc, #540]	; (800de0c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dbee:	f017 fe15 	bl	802581c <__assert_func>
 800dbf2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	3320      	adds	r3, #32
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4610      	mov	r0, r2
 800dc04:	4798      	blx	r3
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b0f      	cmp	r3, #15
 800dc0a:	d805      	bhi.n	800dc18 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800dc0c:	4b80      	ldr	r3, [pc, #512]	; (800de10 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800dc0e:	4a7e      	ldr	r2, [pc, #504]	; (800de08 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dc10:	21a8      	movs	r1, #168	; 0xa8
 800dc12:	487e      	ldr	r0, [pc, #504]	; (800de0c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dc14:	f017 fe02 	bl	802581c <__assert_func>
 800dc18:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	68da      	ldr	r2, [r3, #12]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3320      	adds	r3, #32
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4610      	mov	r0, r2
 800dc2a:	4798      	blx	r3
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b4f      	cmp	r3, #79	; 0x4f
 800dc30:	d805      	bhi.n	800dc3e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800dc32:	4b78      	ldr	r3, [pc, #480]	; (800de14 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 800dc34:	4a74      	ldr	r2, [pc, #464]	; (800de08 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800dc36:	21a9      	movs	r1, #169	; 0xa9
 800dc38:	4874      	ldr	r0, [pc, #464]	; (800de0c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800dc3a:	f017 fdef 	bl	802581c <__assert_func>
 800dc3e:	bf00      	nop
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	627b      	str	r3, [r7, #36]	; 0x24
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dc4c:	f00b fc66 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800dc50:	4603      	mov	r3, r0
 800dc52:	4618      	mov	r0, r3
 800dc54:	f00b fc7e 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dc58:	6a3b      	ldr	r3, [r7, #32]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d008      	beq.n	800dc72 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	330c      	adds	r3, #12
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4610      	mov	r0, r2
 800dc70:	4798      	blx	r3
    if (*currentTrans)
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d007      	beq.n	800dc8a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800dc7a:	6a3b      	ldr	r3, [r7, #32]
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	6a3b      	ldr	r3, [r7, #32]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4610      	mov	r0, r2
 800dc88:	4798      	blx	r3
    if (*currentScreen)
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d008      	beq.n	800dca4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800dc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3314      	adds	r3, #20
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4610      	mov	r0, r2
 800dca2:	4798      	blx	r3
    if (*currentPresenter)
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d008      	beq.n	800dcbe <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4610      	mov	r0, r2
 800dcbc:	4798      	blx	r3
    if (*currentScreen)
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d007      	beq.n	800dcd6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4610      	mov	r0, r2
 800dcd4:	4798      	blx	r3
    if (*currentPresenter)
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d008      	beq.n	800dcf0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3308      	adds	r3, #8
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4610      	mov	r0, r2
 800dcee:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 fc18 	bl	800e52c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	4619      	mov	r1, r3
 800dd00:	2050      	movs	r0, #80	; 0x50
 800dd02:	f7fe fa51 	bl	800c1a8 <_ZnwjPv>
 800dd06:	4604      	mov	r4, r0
 800dd08:	2c00      	cmp	r4, #0
 800dd0a:	d005      	beq.n	800dd18 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800dd0c:	2114      	movs	r1, #20
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f000 fc76 	bl	800e600 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800dd14:	4623      	mov	r3, r4
 800dd16:	e000      	b.n	800dd1a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 800dd18:	4623      	mov	r3, r4
 800dd1a:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	2100      	movs	r1, #0
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 fd58 	bl	800e7d8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	f641 6050 	movw	r0, #7760	; 0x1e50
 800dd30:	f7fe fa3a 	bl	800c1a8 <_ZnwjPv>
 800dd34:	4604      	mov	r4, r0
 800dd36:	2c00      	cmp	r4, #0
 800dd38:	d004      	beq.n	800dd44 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f005 faf8 	bl	8013330 <_ZN8PongViewC1Ev>
 800dd40:	4623      	mov	r3, r4
 800dd42:	e000      	b.n	800dd46 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 800dd44:	4623      	mov	r3, r4
 800dd46:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 fd55 	bl	800e7fe <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800dd54:	4603      	mov	r3, r0
 800dd56:	4619      	mov	r1, r3
 800dd58:	2010      	movs	r0, #16
 800dd5a:	f7fe fa25 	bl	800c1a8 <_ZnwjPv>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	2c00      	cmp	r4, #0
 800dd62:	d005      	beq.n	800dd70 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800dd64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd66:	4620      	mov	r0, r4
 800dd68:	f005 fa70 	bl	801324c <_ZN13PongPresenterC1ER8PongView>
 800dd6c:	4623      	mov	r3, r4
 800dd6e:	e000      	b.n	800dd72 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800dd70:	4623      	mov	r3, r4
 800dd72:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd78:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd7e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd84:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d002      	beq.n	800dd92 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	3304      	adds	r3, #4
 800dd90:	e000      	b.n	800dd94 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 800dd92:	2300      	movs	r3, #0
 800dd94:	4619      	mov	r1, r3
 800dd96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dd98:	f7fe fd7c 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	3304      	adds	r3, #4
 800dda0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fe fe01 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fd39 	bl	800e824 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	61fb      	str	r3, [r7, #28]
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	61bb      	str	r3, [r7, #24]
 800ddba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddbc:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	330c      	adds	r3, #12
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	69f8      	ldr	r0, [r7, #28]
 800ddc8:	4798      	blx	r3
    newPresenter->activate();
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	69b8      	ldr	r0, [r7, #24]
 800ddd2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ddd4:	6979      	ldr	r1, [r7, #20]
 800ddd6:	69f8      	ldr	r0, [r7, #28]
 800ddd8:	f00c fcd2 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3310      	adds	r3, #16
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	6978      	ldr	r0, [r7, #20]
 800dde6:	4798      	blx	r3
    Application::getInstance()->draw();
 800dde8:	f00b fb98 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800ddec:	4602      	mov	r2, r0
 800ddee:	6813      	ldr	r3, [r2, #0]
 800ddf0:	3330      	adds	r3, #48	; 0x30
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4798      	blx	r3
    return newPresenter;
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	373c      	adds	r7, #60	; 0x3c
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd90      	pop	{r4, r7, pc}
 800de02:	bf00      	nop
 800de04:	08026928 	.word	0x08026928
 800de08:	08027c24 	.word	0x08027c24
 800de0c:	080269b8 	.word	0x080269b8
 800de10:	080269fc 	.word	0x080269fc
 800de14:	08026aa0 	.word	0x08026aa0

0800de18 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800de18:	b590      	push	{r4, r7, lr}
 800de1a:	b08f      	sub	sp, #60	; 0x3c
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
 800de24:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	689a      	ldr	r2, [r3, #8]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3320      	adds	r3, #32
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4610      	mov	r0, r2
 800de36:	4798      	blx	r3
 800de38:	4602      	mov	r2, r0
 800de3a:	f641 634f 	movw	r3, #7759	; 0x1e4f
 800de3e:	429a      	cmp	r2, r3
 800de40:	d805      	bhi.n	800de4e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800de42:	4b86      	ldr	r3, [pc, #536]	; (800e05c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800de44:	4a86      	ldr	r2, [pc, #536]	; (800e060 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de46:	21a7      	movs	r1, #167	; 0xa7
 800de48:	4886      	ldr	r0, [pc, #536]	; (800e064 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de4a:	f017 fce7 	bl	802581c <__assert_func>
 800de4e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	3320      	adds	r3, #32
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4610      	mov	r0, r2
 800de60:	4798      	blx	r3
 800de62:	4603      	mov	r3, r0
 800de64:	2b0f      	cmp	r3, #15
 800de66:	d805      	bhi.n	800de74 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800de68:	4b7f      	ldr	r3, [pc, #508]	; (800e068 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800de6a:	4a7d      	ldr	r2, [pc, #500]	; (800e060 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de6c:	21a8      	movs	r1, #168	; 0xa8
 800de6e:	487d      	ldr	r0, [pc, #500]	; (800e064 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de70:	f017 fcd4 	bl	802581c <__assert_func>
 800de74:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68da      	ldr	r2, [r3, #12]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	3320      	adds	r3, #32
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4610      	mov	r0, r2
 800de86:	4798      	blx	r3
 800de88:	4603      	mov	r3, r0
 800de8a:	2b0b      	cmp	r3, #11
 800de8c:	d805      	bhi.n	800de9a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800de8e:	4b77      	ldr	r3, [pc, #476]	; (800e06c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800de90:	4a73      	ldr	r2, [pc, #460]	; (800e060 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800de92:	21a9      	movs	r1, #169	; 0xa9
 800de94:	4873      	ldr	r0, [pc, #460]	; (800e064 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800de96:	f017 fcc1 	bl	802581c <__assert_func>
 800de9a:	bf00      	nop
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	627b      	str	r3, [r7, #36]	; 0x24
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dea8:	f00b fb38 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800deac:	4603      	mov	r3, r0
 800deae:	4618      	mov	r0, r3
 800deb0:	f00b fb50 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d008      	beq.n	800dece <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	330c      	adds	r3, #12
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4610      	mov	r0, r2
 800decc:	4798      	blx	r3
    if (*currentTrans)
 800dece:	6a3b      	ldr	r3, [r7, #32]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d007      	beq.n	800dee6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	6a3b      	ldr	r3, [r7, #32]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4610      	mov	r0, r2
 800dee4:	4798      	blx	r3
    if (*currentScreen)
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d008      	beq.n	800df00 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	3314      	adds	r3, #20
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4610      	mov	r0, r2
 800defe:	4798      	blx	r3
    if (*currentPresenter)
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d008      	beq.n	800df1a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3304      	adds	r3, #4
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4610      	mov	r0, r2
 800df18:	4798      	blx	r3
    if (*currentScreen)
 800df1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d007      	beq.n	800df32 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4610      	mov	r0, r2
 800df30:	4798      	blx	r3
    if (*currentPresenter)
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d008      	beq.n	800df4c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3308      	adds	r3, #8
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4610      	mov	r0, r2
 800df4a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	2100      	movs	r1, #0
 800df52:	4618      	mov	r0, r3
 800df54:	f000 f9b8 	bl	800e2c8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800df58:	4603      	mov	r3, r0
 800df5a:	4619      	mov	r1, r3
 800df5c:	200c      	movs	r0, #12
 800df5e:	f7fe f923 	bl	800c1a8 <_ZnwjPv>
 800df62:	4604      	mov	r4, r0
 800df64:	2c00      	cmp	r4, #0
 800df66:	d004      	beq.n	800df72 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800df68:	4620      	mov	r0, r4
 800df6a:	f7ff f839 	bl	800cfe0 <_ZN8touchgfx12NoTransitionC1Ev>
 800df6e:	4623      	mov	r3, r4
 800df70:	e000      	b.n	800df74 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800df72:	4623      	mov	r3, r4
 800df74:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	2100      	movs	r1, #0
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 fc2b 	bl	800e7d8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 800df82:	4603      	mov	r3, r0
 800df84:	4619      	mov	r1, r3
 800df86:	f641 6050 	movw	r0, #7760	; 0x1e50
 800df8a:	f7fe f90d 	bl	800c1a8 <_ZnwjPv>
 800df8e:	4604      	mov	r4, r0
 800df90:	2c00      	cmp	r4, #0
 800df92:	d004      	beq.n	800df9e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800df94:	4620      	mov	r0, r4
 800df96:	f005 f9cb 	bl	8013330 <_ZN8PongViewC1Ev>
 800df9a:	4623      	mov	r3, r4
 800df9c:	e000      	b.n	800dfa0 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800df9e:	4623      	mov	r3, r4
 800dfa0:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	2100      	movs	r1, #0
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f000 fc28 	bl	800e7fe <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	2010      	movs	r0, #16
 800dfb4:	f7fe f8f8 	bl	800c1a8 <_ZnwjPv>
 800dfb8:	4604      	mov	r4, r0
 800dfba:	2c00      	cmp	r4, #0
 800dfbc:	d005      	beq.n	800dfca <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800dfbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f005 f943 	bl	801324c <_ZN13PongPresenterC1ER8PongView>
 800dfc6:	4623      	mov	r3, r4
 800dfc8:	e000      	b.n	800dfcc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800dfca:	4623      	mov	r3, r4
 800dfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfd2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfd8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfde:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d002      	beq.n	800dfec <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800dfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe8:	3304      	adds	r3, #4
 800dfea:	e000      	b.n	800dfee <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800dfec:	2300      	movs	r3, #0
 800dfee:	4619      	mov	r1, r3
 800dff0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dff2:	f7fe fc4f 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	3304      	adds	r3, #4
 800dffa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fcd4 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fc0c 	bl	800e824 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 800e00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00e:	61fb      	str	r3, [r7, #28]
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	61bb      	str	r3, [r7, #24]
 800e014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e016:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	330c      	adds	r3, #12
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	69f8      	ldr	r0, [r7, #28]
 800e022:	4798      	blx	r3
    newPresenter->activate();
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	69b8      	ldr	r0, [r7, #24]
 800e02c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e02e:	6979      	ldr	r1, [r7, #20]
 800e030:	69f8      	ldr	r0, [r7, #28]
 800e032:	f00c fba5 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3310      	adds	r3, #16
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	6978      	ldr	r0, [r7, #20]
 800e040:	4798      	blx	r3
    Application::getInstance()->draw();
 800e042:	f00b fa6b 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800e046:	4602      	mov	r2, r0
 800e048:	6813      	ldr	r3, [r2, #0]
 800e04a:	3330      	adds	r3, #48	; 0x30
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4610      	mov	r0, r2
 800e050:	4798      	blx	r3
    return newPresenter;
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e054:	4618      	mov	r0, r3
 800e056:	373c      	adds	r7, #60	; 0x3c
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd90      	pop	{r4, r7, pc}
 800e05c:	08026928 	.word	0x08026928
 800e060:	08027d40 	.word	0x08027d40
 800e064:	080269b8 	.word	0x080269b8
 800e068:	080269fc 	.word	0x080269fc
 800e06c:	08026aa0 	.word	0x08026aa0

0800e070 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e070:	b590      	push	{r4, r7, lr}
 800e072:	b08f      	sub	sp, #60	; 0x3c
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
 800e07c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	689a      	ldr	r2, [r3, #8]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3320      	adds	r3, #32
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4610      	mov	r0, r2
 800e08e:	4798      	blx	r3
 800e090:	4603      	mov	r3, r0
 800e092:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 800e096:	d205      	bcs.n	800e0a4 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800e098:	4b86      	ldr	r3, [pc, #536]	; (800e2b4 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800e09a:	4a87      	ldr	r2, [pc, #540]	; (800e2b8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e09c:	21a7      	movs	r1, #167	; 0xa7
 800e09e:	4887      	ldr	r0, [pc, #540]	; (800e2bc <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e0a0:	f017 fbbc 	bl	802581c <__assert_func>
 800e0a4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	685a      	ldr	r2, [r3, #4]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3320      	adds	r3, #32
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	4798      	blx	r3
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b0f      	cmp	r3, #15
 800e0bc:	d805      	bhi.n	800e0ca <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800e0be:	4b80      	ldr	r3, [pc, #512]	; (800e2c0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800e0c0:	4a7d      	ldr	r2, [pc, #500]	; (800e2b8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e0c2:	21a8      	movs	r1, #168	; 0xa8
 800e0c4:	487d      	ldr	r0, [pc, #500]	; (800e2bc <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e0c6:	f017 fba9 	bl	802581c <__assert_func>
 800e0ca:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	68da      	ldr	r2, [r3, #12]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	3320      	adds	r3, #32
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4610      	mov	r0, r2
 800e0dc:	4798      	blx	r3
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b4f      	cmp	r3, #79	; 0x4f
 800e0e2:	d805      	bhi.n	800e0f0 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800e0e4:	4b77      	ldr	r3, [pc, #476]	; (800e2c4 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800e0e6:	4a74      	ldr	r2, [pc, #464]	; (800e2b8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800e0e8:	21a9      	movs	r1, #169	; 0xa9
 800e0ea:	4874      	ldr	r0, [pc, #464]	; (800e2bc <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800e0ec:	f017 fb96 	bl	802581c <__assert_func>
 800e0f0:	bf00      	nop
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e0fe:	f00b fa0d 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800e102:	4603      	mov	r3, r0
 800e104:	4618      	mov	r0, r3
 800e106:	f00b fa25 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d008      	beq.n	800e124 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	330c      	adds	r3, #12
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
    if (*currentTrans)
 800e124:	6a3b      	ldr	r3, [r7, #32]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d007      	beq.n	800e13c <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800e12c:	6a3b      	ldr	r3, [r7, #32]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4610      	mov	r0, r2
 800e13a:	4798      	blx	r3
    if (*currentScreen)
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d008      	beq.n	800e156 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	3314      	adds	r3, #20
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4610      	mov	r0, r2
 800e154:	4798      	blx	r3
    if (*currentPresenter)
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d008      	beq.n	800e170 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	3304      	adds	r3, #4
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
    if (*currentScreen)
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d007      	beq.n	800e188 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4610      	mov	r0, r2
 800e186:	4798      	blx	r3
    if (*currentPresenter)
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d008      	beq.n	800e1a2 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800e190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3308      	adds	r3, #8
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4610      	mov	r0, r2
 800e1a0:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f000 f9bf 	bl	800e52c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	2050      	movs	r0, #80	; 0x50
 800e1b4:	f7fd fff8 	bl	800c1a8 <_ZnwjPv>
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	2c00      	cmp	r4, #0
 800e1bc:	d005      	beq.n	800e1ca <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800e1be:	2114      	movs	r1, #20
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 fa1d 	bl	800e600 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800e1c6:	4623      	mov	r3, r4
 800e1c8:	e000      	b.n	800e1cc <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 800e1ca:	4623      	mov	r3, r4
 800e1cc:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 fb33 	bl	800e840 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	4619      	mov	r1, r3
 800e1de:	f44f 7092 	mov.w	r0, #292	; 0x124
 800e1e2:	f7fd ffe1 	bl	800c1a8 <_ZnwjPv>
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	2c00      	cmp	r4, #0
 800e1ea:	d004      	beq.n	800e1f6 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	f004 fd2f 	bl	8012c50 <_ZN11galleryViewC1Ev>
 800e1f2:	4623      	mov	r3, r4
 800e1f4:	e000      	b.n	800e1f8 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 800e1f6:	4623      	mov	r3, r4
 800e1f8:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	2100      	movs	r1, #0
 800e200:	4618      	mov	r0, r3
 800e202:	f000 fb30 	bl	800e866 <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>
 800e206:	4603      	mov	r3, r0
 800e208:	4619      	mov	r1, r3
 800e20a:	2010      	movs	r0, #16
 800e20c:	f7fd ffcc 	bl	800c1a8 <_ZnwjPv>
 800e210:	4604      	mov	r4, r0
 800e212:	2c00      	cmp	r4, #0
 800e214:	d005      	beq.n	800e222 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e218:	4620      	mov	r0, r4
 800e21a:	f004 fcc1 	bl	8012ba0 <_ZN16galleryPresenterC1ER11galleryView>
 800e21e:	4623      	mov	r3, r4
 800e220:	e000      	b.n	800e224 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e222:	4623      	mov	r3, r4
 800e224:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e22a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e230:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e236:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800e23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e240:	3304      	adds	r3, #4
 800e242:	e000      	b.n	800e246 <_ZN8touchgfx14makeTransitionI11galleryView16galleryPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 800e244:	2300      	movs	r3, #0
 800e246:	4619      	mov	r1, r3
 800e248:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e24a:	f7fe fb23 	bl	800c894 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	3304      	adds	r3, #4
 800e252:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e254:	4618      	mov	r0, r3
 800e256:	f7fe fba8 	bl	800c9aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 fb14 	bl	800e88c <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>
 800e264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e266:	61fb      	str	r3, [r7, #28]
 800e268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26a:	61bb      	str	r3, [r7, #24]
 800e26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	330c      	adds	r3, #12
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	69f8      	ldr	r0, [r7, #28]
 800e27a:	4798      	blx	r3
    newPresenter->activate();
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	69b8      	ldr	r0, [r7, #24]
 800e284:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e286:	6979      	ldr	r1, [r7, #20]
 800e288:	69f8      	ldr	r0, [r7, #28]
 800e28a:	f00c fa79 	bl	801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3310      	adds	r3, #16
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	6978      	ldr	r0, [r7, #20]
 800e298:	4798      	blx	r3
    Application::getInstance()->draw();
 800e29a:	f00b f93f 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	6813      	ldr	r3, [r2, #0]
 800e2a2:	3330      	adds	r3, #48	; 0x30
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	4798      	blx	r3
    return newPresenter;
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	373c      	adds	r7, #60	; 0x3c
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd90      	pop	{r4, r7, pc}
 800e2b4:	08026928 	.word	0x08026928
 800e2b8:	08027e40 	.word	0x08027e40
 800e2bc:	080269b8 	.word	0x080269b8
 800e2c0:	080269fc 	.word	0x080269fc
 800e2c4:	08026aa0 	.word	0x08026aa0

0800e2c8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	3324      	adds	r3, #36	; 0x24
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	887a      	ldrh	r2, [r7, #2]
 800e2de:	4611      	mov	r1, r2
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	4798      	blx	r3
 800e2e4:	4603      	mov	r3, r0
    }
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3324      	adds	r3, #36	; 0x24
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	887a      	ldrh	r2, [r7, #2]
 800e304:	4611      	mov	r1, r2
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	4798      	blx	r3
 800e30a:	4603      	mov	r3, r0
    }
 800e30c:	4618      	mov	r0, r3
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	460b      	mov	r3, r1
 800e31e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3324      	adds	r3, #36	; 0x24
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	887a      	ldrh	r2, [r7, #2]
 800e32a:	4611      	mov	r1, r2
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	4798      	blx	r3
 800e330:	4603      	mov	r3, r0
    }
 800e332:	4618      	mov	r0, r3
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800e33a:	b480      	push	{r7}
 800e33c:	b083      	sub	sp, #12
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
 800e342:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	683a      	ldr	r2, [r7, #0]
 800e348:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e34a:	bf00      	nop
 800e34c:	370c      	adds	r7, #12
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e356:	b580      	push	{r7, lr}
 800e358:	b082      	sub	sp, #8
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	460b      	mov	r3, r1
 800e360:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3324      	adds	r3, #36	; 0x24
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	887a      	ldrh	r2, [r7, #2]
 800e36c:	4611      	mov	r1, r2
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	4798      	blx	r3
 800e372:	4603      	mov	r3, r0
    }
 800e374:	4618      	mov	r0, r3
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	4a05      	ldr	r2, [pc, #20]	; (800e39c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	601a      	str	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe fb2d 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4618      	mov	r0, r3
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	08029c34 	.word	0x08029c34

0800e3a0 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff ffe7 	bl	800e37c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800e3ae:	212c      	movs	r1, #44	; 0x2c
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f017 fa07 	bl	80257c4 <_ZdlPvj>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	4a05      	ldr	r2, [pc, #20]	; (800e3e0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 fad3 	bl	800e97c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	08027480 	.word	0x08027480

0800e3e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff ffe7 	bl	800e3c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e3f2:	2110      	movs	r1, #16
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f017 f9e5 	bl	80257c4 <_ZdlPvj>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b087      	sub	sp, #28
 800e408:	af02      	add	r7, sp, #8
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4618      	mov	r0, r3
 800e414:	f7fd ff6c 	bl	800c2f0 <_ZN8touchgfx10TransitionC1Ev>
 800e418:	4a3f      	ldr	r2, [pc, #252]	; (800e518 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	330c      	adds	r3, #12
 800e422:	4618      	mov	r0, r3
 800e424:	f009 f9d8 	bl	80177d8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f103 020c 	add.w	r2, r3, #12
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	639a      	str	r2, [r3, #56]	; 0x38
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800e438:	4a38      	ldr	r2, [pc, #224]	; (800e51c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800e43a:	f107 0308 	add.w	r3, r7, #8
 800e43e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e442:	e883 0003 	stmia.w	r3, {r0, r1}
 800e446:	f107 0308 	add.w	r3, r7, #8
 800e44a:	cb0c      	ldmia	r3, {r2, r3}
 800e44c:	6879      	ldr	r1, [r7, #4]
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 fa74 	bl	800e93c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2202      	movs	r2, #2
 800e458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	78fa      	ldrb	r2, [r7, #3]
 800e460:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800e474:	4b2a      	ldr	r3, [pc, #168]	; (800e520 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d047      	beq.n	800e50c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f103 000c 	add.w	r0, r3, #12
 800e482:	4b28      	ldr	r3, [pc, #160]	; (800e524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	b21a      	sxth	r2, r3
 800e488:	4b27      	ldr	r3, [pc, #156]	; (800e528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e48a:	881b      	ldrh	r3, [r3, #0]
 800e48c:	b21b      	sxth	r3, r3
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	4613      	mov	r3, r2
 800e492:	2200      	movs	r2, #0
 800e494:	2100      	movs	r1, #0
 800e496:	f7fe f819 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	330c      	adds	r3, #12
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f009 f91d 	bl	80176de <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e4aa:	2b03      	cmp	r3, #3
 800e4ac:	d82a      	bhi.n	800e504 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800e4ae:	a201      	add	r2, pc, #4	; (adr r2, 800e4b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800e4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b4:	0800e4e5 	.word	0x0800e4e5
 800e4b8:	0800e4f3 	.word	0x0800e4f3
 800e4bc:	0800e4c5 	.word	0x0800e4c5
 800e4c0:	0800e4d7 	.word	0x0800e4d7
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800e4c4:	4b17      	ldr	r3, [pc, #92]	; (800e524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	425b      	negs	r3, r3
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	b21a      	sxth	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4d4:	e01a      	b.n	800e50c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800e4d6:	4b13      	ldr	r3, [pc, #76]	; (800e524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	b21a      	sxth	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4e2:	e013      	b.n	800e50c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800e4e4:	4b10      	ldr	r3, [pc, #64]	; (800e528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	b21a      	sxth	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e4f0:	e00c      	b.n	800e50c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800e4f2:	4b0d      	ldr	r3, [pc, #52]	; (800e528 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	425b      	negs	r3, r3
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	b21a      	sxth	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800e502:	e003      	b.n	800e50c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800e50a:	bf00      	nop
            }
        }
    }
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	bd90      	pop	{r4, r7, pc}
 800e516:	bf00      	nop
 800e518:	08027458 	.word	0x08027458
 800e51c:	08026b44 	.word	0x08026b44
 800e520:	2000b36f 	.word	0x2000b36f
 800e524:	2000b364 	.word	0x2000b364
 800e528:	2000b366 	.word	0x2000b366

0800e52c <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	3324      	adds	r3, #36	; 0x24
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	887a      	ldrh	r2, [r7, #2]
 800e542:	4611      	mov	r1, r2
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	4798      	blx	r3
 800e548:	4603      	mov	r3, r0
    }
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
	...

0800e554 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	4a05      	ldr	r2, [pc, #20]	; (800e574 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	f000 fa09 	bl	800e97c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	08027528 	.word	0x08027528

0800e578 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ffe7 	bl	800e554 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800e586:	2110      	movs	r1, #16
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f017 f91b 	bl	80257c4 <_ZdlPvj>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fe fa10 	bl	800c9c8 <_ZN8touchgfx6WidgetC1Ev>
 800e5a8:	4a03      	ldr	r2, [pc, #12]	; (800e5b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	080274c0 	.word	0x080274c0

0800e5bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	4a05      	ldr	r2, [pc, #20]	; (800e5dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	601a      	str	r2, [r3, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fe fa0d 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	080274c0 	.word	0x080274c0

0800e5e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ffe7 	bl	800e5bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800e5ee:	2128      	movs	r1, #40	; 0x28
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f017 f8e7 	bl	80257c4 <_ZdlPvj>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800e600:	b590      	push	{r4, r7, lr}
 800e602:	b087      	sub	sp, #28
 800e604:	af02      	add	r7, sp, #8
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fd fe6e 	bl	800c2f0 <_ZN8touchgfx10TransitionC1Ev>
 800e614:	4a38      	ldr	r2, [pc, #224]	; (800e6f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f103 040c 	add.w	r4, r3, #12
 800e620:	4a36      	ldr	r2, [pc, #216]	; (800e6fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 800e622:	f107 0308 	add.w	r3, r7, #8
 800e626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e62a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e62e:	f107 0308 	add.w	r3, r7, #8
 800e632:	cb0c      	ldmia	r3, {r2, r3}
 800e634:	6879      	ldr	r1, [r7, #4]
 800e636:	4620      	mov	r0, r4
 800e638:	f000 f9f2 	bl	800ea20 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2202      	movs	r2, #2
 800e640:	771a      	strb	r2, [r3, #28]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	78fa      	ldrb	r2, [r7, #3]
 800e646:	775a      	strb	r2, [r3, #29]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	779a      	strb	r2, [r3, #30]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	845a      	strh	r2, [r3, #34]	; 0x22
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	849a      	strh	r2, [r3, #36]	; 0x24
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	3328      	adds	r3, #40	; 0x28
 800e65e:	2228      	movs	r2, #40	; 0x28
 800e660:	2100      	movs	r1, #0
 800e662:	4618      	mov	r0, r3
 800e664:	f017 f963 	bl	802592e <memset>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3328      	adds	r3, #40	; 0x28
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7ff ff93 	bl	800e598 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	7f1b      	ldrb	r3, [r3, #28]
 800e676:	2b03      	cmp	r3, #3
 800e678:	d826      	bhi.n	800e6c8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 800e67a:	a201      	add	r2, pc, #4	; (adr r2, 800e680 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800e67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e680:	0800e6ad 	.word	0x0800e6ad
 800e684:	0800e6b9 	.word	0x0800e6b9
 800e688:	0800e691 	.word	0x0800e691
 800e68c:	0800e6a1 	.word	0x0800e6a1
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800e690:	4b1b      	ldr	r3, [pc, #108]	; (800e700 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	425b      	negs	r3, r3
 800e696:	b29b      	uxth	r3, r3
 800e698:	b21a      	sxth	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	841a      	strh	r2, [r3, #32]
            break;
 800e69e:	e017      	b.n	800e6d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800e6a0:	4b17      	ldr	r3, [pc, #92]	; (800e700 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	b21a      	sxth	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	841a      	strh	r2, [r3, #32]
            break;
 800e6aa:	e011      	b.n	800e6d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800e6ac:	4b15      	ldr	r3, [pc, #84]	; (800e704 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e6ae:	881b      	ldrh	r3, [r3, #0]
 800e6b0:	b21a      	sxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	841a      	strh	r2, [r3, #32]
            break;
 800e6b6:	e00b      	b.n	800e6d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 800e6b8:	4b12      	ldr	r3, [pc, #72]	; (800e704 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	425b      	negs	r3, r3
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	b21a      	sxth	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	841a      	strh	r2, [r3, #32]
            break;
 800e6c6:	e003      	b.n	800e6d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 800e6ce:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800e6d6:	4b0a      	ldr	r3, [pc, #40]	; (800e700 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	b21a      	sxth	r2, r3
 800e6dc:	4b09      	ldr	r3, [pc, #36]	; (800e704 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 800e6de:	881b      	ldrh	r3, [r3, #0]
 800e6e0:	b21b      	sxth	r3, r3
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	f7fd feef 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd90      	pop	{r4, r7, pc}
 800e6f8:	08027498 	.word	0x08027498
 800e6fc:	08026b4c 	.word	0x08026b4c
 800e700:	2000b364 	.word	0x2000b364
 800e704:	2000b366 	.word	0x2000b366

0800e708 <_ZN8touchgfx17AbstractPartition2atI9MusicViewEERT_t>:
    T& at(const uint16_t index)
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	460b      	mov	r3, r1
 800e712:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3324      	adds	r3, #36	; 0x24
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	887a      	ldrh	r2, [r7, #2]
 800e71e:	4611      	mov	r1, r2
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	4798      	blx	r3
 800e724:	4603      	mov	r3, r0
    }
 800e726:	4618      	mov	r0, r3
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <_ZN8touchgfx17AbstractPartition2atI14MusicPresenterEERT_t>:
    T& at(const uint16_t index)
 800e72e:	b580      	push	{r7, lr}
 800e730:	b082      	sub	sp, #8
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	460b      	mov	r3, r1
 800e738:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	3324      	adds	r3, #36	; 0x24
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	887a      	ldrh	r2, [r7, #2]
 800e744:	4611      	mov	r1, r2
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	4798      	blx	r3
 800e74a:	4603      	mov	r3, r0
    }
 800e74c:	4618      	mov	r0, r3
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <_ZN8touchgfx4ViewI14MusicPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	683a      	ldr	r2, [r7, #0]
 800e762:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <_ZN8touchgfx17AbstractPartition2atI12gameoverViewEERT_t>:
    T& at(const uint16_t index)
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	460b      	mov	r3, r1
 800e77a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3324      	adds	r3, #36	; 0x24
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	887a      	ldrh	r2, [r7, #2]
 800e786:	4611      	mov	r1, r2
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	4798      	blx	r3
 800e78c:	4603      	mov	r3, r0
    }
 800e78e:	4618      	mov	r0, r3
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <_ZN8touchgfx17AbstractPartition2atI17gameoverPresenterEERT_t>:
    T& at(const uint16_t index)
 800e796:	b580      	push	{r7, lr}
 800e798:	b082      	sub	sp, #8
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	460b      	mov	r3, r1
 800e7a0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3324      	adds	r3, #36	; 0x24
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	887a      	ldrh	r2, [r7, #2]
 800e7ac:	4611      	mov	r1, r2
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	4798      	blx	r3
 800e7b2:	4603      	mov	r3, r0
    }
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <_ZN8touchgfx4ViewI17gameoverPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e7cc:	bf00      	nop
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>:
    T& at(const uint16_t index)
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3324      	adds	r3, #36	; 0x24
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	887a      	ldrh	r2, [r7, #2]
 800e7ee:	4611      	mov	r1, r2
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	4798      	blx	r3
 800e7f4:	4603      	mov	r3, r0
    }
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>:
    T& at(const uint16_t index)
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b082      	sub	sp, #8
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	460b      	mov	r3, r1
 800e808:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	3324      	adds	r3, #36	; 0x24
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	887a      	ldrh	r2, [r7, #2]
 800e814:	4611      	mov	r1, r2
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	4798      	blx	r3
 800e81a:	4603      	mov	r3, r0
    }
 800e81c:	4618      	mov	r0, r3
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e834:	bf00      	nop
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <_ZN8touchgfx17AbstractPartition2atI11galleryViewEERT_t>:
    T& at(const uint16_t index)
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	3324      	adds	r3, #36	; 0x24
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	887a      	ldrh	r2, [r7, #2]
 800e856:	4611      	mov	r1, r2
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	4798      	blx	r3
 800e85c:	4603      	mov	r3, r0
    }
 800e85e:	4618      	mov	r0, r3
 800e860:	3708      	adds	r7, #8
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <_ZN8touchgfx17AbstractPartition2atI16galleryPresenterEERT_t>:
    T& at(const uint16_t index)
 800e866:	b580      	push	{r7, lr}
 800e868:	b082      	sub	sp, #8
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	460b      	mov	r3, r1
 800e870:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	3324      	adds	r3, #36	; 0x24
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	887a      	ldrh	r2, [r7, #2]
 800e87c:	4611      	mov	r1, r2
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	4798      	blx	r3
 800e882:	4603      	mov	r3, r0
    }
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <_ZN8touchgfx4ViewI16galleryPresenterE4bindERS1_>:
    void bind(T& presenter)
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b6:	683a      	ldr	r2, [r7, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d02a      	beq.n	800e912 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d820      	bhi.n	800e908 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800e8c6:	a201      	add	r2, pc, #4	; (adr r2, 800e8cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8cc:	0800e8f3 	.word	0x0800e8f3
 800e8d0:	0800e8f3 	.word	0x0800e8f3
 800e8d4:	0800e8dd 	.word	0x0800e8dd
 800e8d8:	0800e8dd 	.word	0x0800e8dd
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3354      	adds	r3, #84	; 0x54
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	6838      	ldr	r0, [r7, #0]
 800e8ee:	4798      	blx	r3
            break;
 800e8f0:	e010      	b.n	800e914 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	3354      	adds	r3, #84	; 0x54
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800e900:	2100      	movs	r1, #0
 800e902:	6838      	ldr	r0, [r7, #0]
 800e904:	4798      	blx	r3
            break;
 800e906:	e005      	b.n	800e914 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	721a      	strb	r2, [r3, #8]
            break;
 800e90e:	bf00      	nop
 800e910:	e000      	b.n	800e914 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800e912:	bf00      	nop
        }
    }
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop

0800e91c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	4a04      	ldr	r2, [pc, #16]	; (800e938 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	08027540 	.word	0x08027540

0800e93c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	4639      	mov	r1, r7
 800e948:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	4618      	mov	r0, r3
 800e950:	f7ff ffe4 	bl	800e91c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800e954:	4a08      	ldr	r2, [pc, #32]	; (800e978 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	3308      	adds	r3, #8
 800e964:	463a      	mov	r2, r7
 800e966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e96a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	08027480 	.word	0x08027480

0800e97c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
    }
 800e984:	4a04      	ldr	r2, [pc, #16]	; (800e998 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr
 800e998:	08027540 	.word	0x08027540

0800e99c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
    }
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ffe9 	bl	800e97c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800e9aa:	2104      	movs	r1, #4
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f016 ff09 	bl	80257c4 <_ZdlPvj>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	7f1b      	ldrb	r3, [r3, #28]
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	d820      	bhi.n	800ea10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 800e9ce:	a201      	add	r2, pc, #4	; (adr r2, 800e9d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 800e9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d4:	0800e9fb 	.word	0x0800e9fb
 800e9d8:	0800e9fb 	.word	0x0800e9fb
 800e9dc:	0800e9e5 	.word	0x0800e9e5
 800e9e0:	0800e9e5 	.word	0x0800e9e5
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3354      	adds	r3, #84	; 0x54
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	6838      	ldr	r0, [r7, #0]
 800e9f6:	4798      	blx	r3
            break;
 800e9f8:	e00e      	b.n	800ea18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3354      	adds	r3, #84	; 0x54
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800ea08:	2100      	movs	r1, #0
 800ea0a:	6838      	ldr	r0, [r7, #0]
 800ea0c:	4798      	blx	r3
            break;
 800ea0e:	e003      	b.n	800ea18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	721a      	strb	r2, [r3, #8]
            break;
 800ea16:	bf00      	nop
        }
    }
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	4639      	mov	r1, r7
 800ea2c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7ff ff72 	bl	800e91c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800ea38:	4a08      	ldr	r2, [pc, #32]	; (800ea5c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	3308      	adds	r3, #8
 800ea48:	463a      	mov	r2, r7
 800ea4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea4e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	4618      	mov	r0, r3
 800ea56:	3710      	adds	r7, #16
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	08027528 	.word	0x08027528

0800ea60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	4a0a      	ldr	r2, [pc, #40]	; (800ea94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	333c      	adds	r3, #60	; 0x3c
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff fca4 	bl	800e3c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	330c      	adds	r3, #12
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7ff fc7d 	bl	800e37c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fd fc49 	bl	800c31c <_ZN8touchgfx10TransitionD1Ev>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	08027458 	.word	0x08027458

0800ea98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7ff ffdd 	bl	800ea60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800eaa6:	2154      	movs	r1, #84	; 0x54
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f016 fe8b 	bl	80257c4 <_ZdlPvj>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4618      	mov	r0, r3
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	4a0a      	ldr	r2, [pc, #40]	; (800eaec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3328      	adds	r3, #40	; 0x28
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7ff fd76 	bl	800e5bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	330c      	adds	r3, #12
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff fd3d 	bl	800e554 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fd fc1d 	bl	800c31c <_ZN8touchgfx10TransitionD1Ev>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	08027498 	.word	0x08027498

0800eaf0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7ff ffdd 	bl	800eab8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800eafe:	2150      	movs	r1, #80	; 0x50
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f016 fe5f 	bl	80257c4 <_ZdlPvj>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <_ZN8touchgfx12NoTransitionD1Ev>:
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	4a05      	ldr	r2, [pc, #20]	; (800eb30 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	601a      	str	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fd fbfb 	bl	800c31c <_ZN8touchgfx10TransitionD1Ev>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	080275c0 	.word	0x080275c0

0800eb34 <_ZN8touchgfx12NoTransitionD0Ev>:
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7ff ffe7 	bl	800eb10 <_ZN8touchgfx12NoTransitionD1Ev>
 800eb42:	210c      	movs	r1, #12
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f016 fe3d 	bl	80257c4 <_ZdlPvj>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	4a05      	ldr	r2, [pc, #20]	; (800eb74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fd fc43 	bl	800c3f0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	08027624 	.word	0x08027624

0800eb78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff ffe7 	bl	800eb54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800eb86:	2110      	movs	r1, #16
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f016 fe1b 	bl	80257c4 <_ZdlPvj>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4618      	mov	r0, r3
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800eba0:	4b59      	ldr	r3, [pc, #356]	; (800ed08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	f083 0301 	eor.w	r3, r3, #1
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d003      	beq.n	800ebb6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	721a      	strb	r2, [r3, #8]
            return;
 800ebb4:	e0a5      	b.n	800ed02 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fd fbcf 	bl	800c35c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	b2da      	uxtb	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d82f      	bhi.n	800ec3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ebe4:	b298      	uxth	r0, r3
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	f00b fdc9 	bl	801a78c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	f003 0301 	and.w	r3, r3, #1
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d01b      	beq.n	800ec4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800ec24:	2a00      	cmp	r2, #0
 800ec26:	dd01      	ble.n	800ec2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800ec28:	2201      	movs	r2, #1
 800ec2a:	e001      	b.n	800ec30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800ec2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec30:	4413      	add	r3, r2
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	b21a      	sxth	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800ec3c:	e007      	b.n	800ec4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2201      	movs	r2, #1
 800ec42:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800ec4c:	e059      	b.n	800ed02 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	d845      	bhi.n	800ece4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800ec58:	a201      	add	r2, pc, #4	; (adr r2, 800ec60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800ec5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5e:	bf00      	nop
 800ec60:	0800ecab 	.word	0x0800ecab
 800ec64:	0800ecab 	.word	0x0800ecab
 800ec68:	0800ec71 	.word	0x0800ec71
 800ec6c:	0800ec71 	.word	0x0800ec71
            calculatedValue -= snapshot.getX();
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	330c      	adds	r3, #12
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd fc56 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	b28b      	uxth	r3, r1
 800ec88:	1ad3      	subs	r3, r2, r3
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	b21a      	sxth	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f103 000c 	add.w	r0, r3, #12
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800eca0:	2200      	movs	r2, #0
 800eca2:	4619      	mov	r1, r3
 800eca4:	f00b f88c 	bl	8019dc0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800eca8:	e020      	b.n	800ecec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	330c      	adds	r3, #12
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fd fc46 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	b28b      	uxth	r3, r1
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	b21a      	sxth	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f103 000c 	add.w	r0, r3, #12
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ecda:	461a      	mov	r2, r3
 800ecdc:	2100      	movs	r1, #0
 800ecde:	f00b f86f 	bl	8019dc0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800ece2:	e003      	b.n	800ecec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	721a      	strb	r2, [r3, #8]
            break;
 800ecea:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6858      	ldr	r0, [r3, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	3378      	adds	r3, #120	; 0x78
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	323c      	adds	r2, #60	; 0x3c
 800ecfe:	4611      	mov	r1, r2
 800ed00:	4798      	blx	r3
    }
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	2000b36f 	.word	0x2000b36f

0800ed0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800ed14:	4b0b      	ldr	r3, [pc, #44]	; (800ed44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00e      	beq.n	800ed3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d00a      	beq.n	800ed3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6858      	ldr	r0, [r3, #4]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3364      	adds	r3, #100	; 0x64
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	320c      	adds	r2, #12
 800ed36:	4611      	mov	r1, r2
 800ed38:	4798      	blx	r3
    }
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	2000b36f 	.word	0x2000b36f

0800ed48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b088      	sub	sp, #32
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800ed50:	4b1a      	ldr	r3, [pc, #104]	; (800edbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d02d      	beq.n	800edb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fd fb12 	bl	800c384 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800ed60:	4a17      	ldr	r2, [pc, #92]	; (800edc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800ed62:	f107 0318 	add.w	r3, r7, #24
 800ed66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed6a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed6e:	f107 0008 	add.w	r0, r7, #8
 800ed72:	f107 0318 	add.w	r3, r7, #24
 800ed76:	cb0c      	ldmia	r3, {r2, r3}
 800ed78:	6879      	ldr	r1, [r7, #4]
 800ed7a:	f7ff fddf 	bl	800e93c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3378      	adds	r3, #120	; 0x78
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f107 0108 	add.w	r1, r7, #8
 800ed90:	4610      	mov	r0, r2
 800ed92:	4798      	blx	r3
            screenContainer->add(snapshot);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6858      	ldr	r0, [r3, #4]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	3360      	adds	r3, #96	; 0x60
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	320c      	adds	r2, #12
 800eda6:	4611      	mov	r1, r2
 800eda8:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800edaa:	f107 0308 	add.w	r3, r7, #8
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff fb06 	bl	800e3c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800edb4:	bf00      	nop
 800edb6:	3720      	adds	r7, #32
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	2000b36f 	.word	0x2000b36f
 800edc0:	08026b54 	.word	0x08026b54

0800edc4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
        switch (direction)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d83b      	bhi.n	800ee50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800edd8:	a201      	add	r2, pc, #4	; (adr r2, 800ede0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800edda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edde:	bf00      	nop
 800ede0:	0800ee21 	.word	0x0800ee21
 800ede4:	0800ee3b 	.word	0x0800ee3b
 800ede8:	0800edf1 	.word	0x0800edf1
 800edec:	0800ee07 	.word	0x0800ee07
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3354      	adds	r3, #84	; 0x54
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a18      	ldr	r2, [pc, #96]	; (800ee5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800edfa:	8812      	ldrh	r2, [r2, #0]
 800edfc:	b211      	sxth	r1, r2
 800edfe:	2200      	movs	r2, #0
 800ee00:	6838      	ldr	r0, [r7, #0]
 800ee02:	4798      	blx	r3
            break;
 800ee04:	e025      	b.n	800ee52 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	3354      	adds	r3, #84	; 0x54
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a13      	ldr	r2, [pc, #76]	; (800ee5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800ee10:	8812      	ldrh	r2, [r2, #0]
 800ee12:	4252      	negs	r2, r2
 800ee14:	b292      	uxth	r2, r2
 800ee16:	b211      	sxth	r1, r2
 800ee18:	2200      	movs	r2, #0
 800ee1a:	6838      	ldr	r0, [r7, #0]
 800ee1c:	4798      	blx	r3
            break;
 800ee1e:	e018      	b.n	800ee52 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3354      	adds	r3, #84	; 0x54
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a0d      	ldr	r2, [pc, #52]	; (800ee60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800ee2a:	8812      	ldrh	r2, [r2, #0]
 800ee2c:	4252      	negs	r2, r2
 800ee2e:	b292      	uxth	r2, r2
 800ee30:	b212      	sxth	r2, r2
 800ee32:	2100      	movs	r1, #0
 800ee34:	6838      	ldr	r0, [r7, #0]
 800ee36:	4798      	blx	r3
            break;
 800ee38:	e00b      	b.n	800ee52 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	3354      	adds	r3, #84	; 0x54
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	4a07      	ldr	r2, [pc, #28]	; (800ee60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800ee44:	8812      	ldrh	r2, [r2, #0]
 800ee46:	b212      	sxth	r2, r2
 800ee48:	2100      	movs	r1, #0
 800ee4a:	6838      	ldr	r0, [r7, #0]
 800ee4c:	4798      	blx	r3
            break;
 800ee4e:	e000      	b.n	800ee52 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800ee50:	bf00      	nop
    }
 800ee52:	bf00      	nop
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	2000b364 	.word	0x2000b364
 800ee60:	2000b366 	.word	0x2000b366

0800ee64 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	68d2      	ldr	r2, [r2, #12]
 800ee76:	1052      	asrs	r2, r2, #1
 800ee78:	1898      	adds	r0, r3, r2
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	f003 0301 	and.w	r3, r3, #1
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d102      	bne.n	800ee8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	e00a      	b.n	800eea2 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	68d2      	ldr	r2, [r2, #12]
 800ee94:	1052      	asrs	r2, r2, #1
 800ee96:	4413      	add	r3, r2
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	6892      	ldr	r2, [r2, #8]
 800ee9e:	4413      	add	r3, r2
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	6839      	ldr	r1, [r7, #0]
 800eea4:	4798      	blx	r3
    }
 800eea6:	bf00      	nop
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800eeae:	b480      	push	{r7}
 800eeb0:	b083      	sub	sp, #12
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d010      	beq.n	800eee0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d107      	bne.n	800eed6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	f003 0301 	and.w	r3, r3, #1
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d101      	bne.n	800eed6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e000      	b.n	800eed8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800eed6:	2300      	movs	r3, #0
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d001      	beq.n	800eee0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800eedc:	2301      	movs	r3, #1
 800eede:	e000      	b.n	800eee2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800eee0:	2300      	movs	r3, #0
    }
 800eee2:	4618      	mov	r0, r3
 800eee4:	370c      	adds	r7, #12
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr
	...

0800eef0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800eef0:	b590      	push	{r4, r7, lr}
 800eef2:	b08b      	sub	sp, #44	; 0x2c
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fd fa2e 	bl	800c35c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	7f9b      	ldrb	r3, [r3, #30]
 800ef04:	3301      	adds	r3, #1
 800ef06:	b2da      	uxtb	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	7f9a      	ldrb	r2, [r3, #30]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	7f5b      	ldrb	r3, [r3, #29]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d82b      	bhi.n	800ef70 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	7f9b      	ldrb	r3, [r3, #30]
 800ef1c:	b298      	uxth	r0, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	7f5b      	ldrb	r3, [r3, #29]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	f00b fc2e 	bl	801a78c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800ef30:	4603      	mov	r3, r0
 800ef32:	461a      	mov	r2, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d019      	beq.n	800ef7e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 800ef58:	2a00      	cmp	r2, #0
 800ef5a:	dd01      	ble.n	800ef60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	e001      	b.n	800ef64 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800ef60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef64:	4413      	add	r3, r2
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	b21a      	sxth	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	845a      	strh	r2, [r3, #34]	; 0x22
 800ef6e:	e006      	b.n	800ef7e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2201      	movs	r2, #1
 800ef74:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	779a      	strb	r2, [r3, #30]
            return;
 800ef7c:	e0c0      	b.n	800f100 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	b21a      	sxth	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	4413      	add	r3, r2
 800efaa:	b29b      	uxth	r3, r3
 800efac:	b21a      	sxth	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	7f9b      	ldrb	r3, [r3, #30]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	f040 8097 	bne.w	800f0ea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 800efbc:	4b52      	ldr	r3, [pc, #328]	; (800f108 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f000 8092 	beq.w	800f0ea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 800efc6:	f107 0314 	add.w	r3, r7, #20
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fd f8f8 	bl	800c1c0 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7f1b      	ldrb	r3, [r3, #28]
 800efd4:	2b03      	cmp	r3, #3
 800efd6:	d85b      	bhi.n	800f090 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 800efd8:	a201      	add	r2, pc, #4	; (adr r2, 800efe0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 800efda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efde:	bf00      	nop
 800efe0:	0800f041 	.word	0x0800f041
 800efe4:	0800f06b 	.word	0x0800f06b
 800efe8:	0800eff1 	.word	0x0800eff1
 800efec:	0800f017 	.word	0x0800f017
                rect.x = 0;
 800eff0:	2300      	movs	r3, #0
 800eff2:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800effe:	b29a      	uxth	r2, r3
 800f000:	4b42      	ldr	r3, [pc, #264]	; (800f10c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	4413      	add	r3, r2
 800f006:	b29b      	uxth	r3, r3
 800f008:	b21b      	sxth	r3, r3
 800f00a:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800f00c:	4b40      	ldr	r3, [pc, #256]	; (800f110 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	b21b      	sxth	r3, r3
 800f012:	837b      	strh	r3, [r7, #26]
                break;
 800f014:	e03d      	b.n	800f092 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f01c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 800f022:	4b3a      	ldr	r3, [pc, #232]	; (800f10c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f024:	881a      	ldrh	r2, [r3, #0]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	1ad3      	subs	r3, r2, r3
 800f030:	b29b      	uxth	r3, r3
 800f032:	b21b      	sxth	r3, r3
 800f034:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 800f036:	4b36      	ldr	r3, [pc, #216]	; (800f110 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	b21b      	sxth	r3, r3
 800f03c:	837b      	strh	r3, [r7, #26]
                break;
 800f03e:	e028      	b.n	800f092 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f040:	2300      	movs	r3, #0
 800f042:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f04a:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f04c:	4b2f      	ldr	r3, [pc, #188]	; (800f10c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f04e:	881b      	ldrh	r3, [r3, #0]
 800f050:	b21b      	sxth	r3, r3
 800f052:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 800f054:	4b2e      	ldr	r3, [pc, #184]	; (800f110 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f056:	881a      	ldrh	r2, [r3, #0]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f05e:	b29b      	uxth	r3, r3
 800f060:	1ad3      	subs	r3, r2, r3
 800f062:	b29b      	uxth	r3, r3
 800f064:	b21b      	sxth	r3, r3
 800f066:	837b      	strh	r3, [r7, #26]
                break;
 800f068:	e013      	b.n	800f092 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 800f072:	4b26      	ldr	r3, [pc, #152]	; (800f10c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	b21b      	sxth	r3, r3
 800f078:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f080:	b29a      	uxth	r2, r3
 800f082:	4b23      	ldr	r3, [pc, #140]	; (800f110 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f084:	881b      	ldrh	r3, [r3, #0]
 800f086:	4413      	add	r3, r2
 800f088:	b29b      	uxth	r3, r3
 800f08a:	b21b      	sxth	r3, r3
 800f08c:	837b      	strh	r3, [r7, #26]
                break;
 800f08e:	e000      	b.n	800f092 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 800f090:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800f092:	f7fd fb59 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 800f096:	4602      	mov	r2, r0
 800f098:	6813      	ldr	r3, [r2, #0]
 800f09a:	3328      	adds	r3, #40	; 0x28
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4610      	mov	r0, r2
 800f0a0:	4798      	blx	r3
 800f0a2:	61f8      	str	r0, [r7, #28]
            Rect source;
 800f0a4:	f107 030c 	add.w	r3, r7, #12
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fd f889 	bl	800c1c0 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 800f0b6:	4b15      	ldr	r3, [pc, #84]	; (800f10c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	b21b      	sxth	r3, r3
 800f0bc:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 800f0be:	4b14      	ldr	r3, [pc, #80]	; (800f110 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	b21b      	sxth	r3, r3
 800f0c4:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800f0c6:	f7fd fb3f 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 800f0ca:	f7fd fb49 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 800f0ce:	6803      	ldr	r3, [r0, #0]
 800f0d0:	330c      	adds	r3, #12
 800f0d2:	681c      	ldr	r4, [r3, #0]
 800f0d4:	f107 0114 	add.w	r1, r7, #20
 800f0d8:	f107 020c 	add.w	r2, r7, #12
 800f0dc:	2300      	movs	r3, #0
 800f0de:	9301      	str	r3, [sp, #4]
 800f0e0:	23ff      	movs	r3, #255	; 0xff
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	69f9      	ldr	r1, [r7, #28]
 800f0e8:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6858      	ldr	r0, [r3, #4]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	3378      	adds	r3, #120	; 0x78
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	320c      	adds	r2, #12
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	4798      	blx	r3
    }
 800f100:	3724      	adds	r7, #36	; 0x24
 800f102:	46bd      	mov	sp, r7
 800f104:	bd90      	pop	{r4, r7, pc}
 800f106:	bf00      	nop
 800f108:	2000b36e 	.word	0x2000b36e
 800f10c:	2000b364 	.word	0x2000b364
 800f110:	2000b366 	.word	0x2000b366

0800f114 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6858      	ldr	r0, [r3, #4]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3364      	adds	r3, #100	; 0x64
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	3228      	adds	r2, #40	; 0x28
 800f12e:	4611      	mov	r1, r2
 800f130:	4798      	blx	r3
    }
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
	...

0800f13c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b088      	sub	sp, #32
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
        Transition::init();
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4618      	mov	r0, r3
 800f148:	f7fd f91c 	bl	800c384 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f14c:	4a16      	ldr	r2, [pc, #88]	; (800f1a8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 800f14e:	f107 0318 	add.w	r3, r7, #24
 800f152:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f156:	e883 0003 	stmia.w	r3, {r0, r1}
 800f15a:	f107 0008 	add.w	r0, r7, #8
 800f15e:	f107 0318 	add.w	r3, r7, #24
 800f162:	cb0c      	ldmia	r3, {r2, r3}
 800f164:	6879      	ldr	r1, [r7, #4]
 800f166:	f7ff fc5b 	bl	800ea20 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	685a      	ldr	r2, [r3, #4]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3378      	adds	r3, #120	; 0x78
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f107 0108 	add.w	r1, r7, #8
 800f17c:	4610      	mov	r0, r2
 800f17e:	4798      	blx	r3
        screenContainer->add(solid);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6858      	ldr	r0, [r3, #4]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3360      	adds	r3, #96	; 0x60
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	3228      	adds	r2, #40	; 0x28
 800f192:	4611      	mov	r1, r2
 800f194:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 800f196:	f107 0308 	add.w	r3, r7, #8
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff f9da 	bl	800e554 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800f1a0:	bf00      	nop
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	08026b5c 	.word	0x08026b5c

0800f1ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
        switch (direction)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7f1b      	ldrb	r3, [r3, #28]
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d83a      	bhi.n	800f234 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 800f1be:	a201      	add	r2, pc, #4	; (adr r2, 800f1c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 800f1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c4:	0800f205 	.word	0x0800f205
 800f1c8:	0800f21f 	.word	0x0800f21f
 800f1cc:	0800f1d5 	.word	0x0800f1d5
 800f1d0:	0800f1eb 	.word	0x0800f1eb
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	3354      	adds	r3, #84	; 0x54
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a18      	ldr	r2, [pc, #96]	; (800f240 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f1de:	8812      	ldrh	r2, [r2, #0]
 800f1e0:	b211      	sxth	r1, r2
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	6838      	ldr	r0, [r7, #0]
 800f1e6:	4798      	blx	r3
            break;
 800f1e8:	e025      	b.n	800f236 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	3354      	adds	r3, #84	; 0x54
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4a13      	ldr	r2, [pc, #76]	; (800f240 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 800f1f4:	8812      	ldrh	r2, [r2, #0]
 800f1f6:	4252      	negs	r2, r2
 800f1f8:	b292      	uxth	r2, r2
 800f1fa:	b211      	sxth	r1, r2
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	6838      	ldr	r0, [r7, #0]
 800f200:	4798      	blx	r3
            break;
 800f202:	e018      	b.n	800f236 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	3354      	adds	r3, #84	; 0x54
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4a0d      	ldr	r2, [pc, #52]	; (800f244 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f20e:	8812      	ldrh	r2, [r2, #0]
 800f210:	4252      	negs	r2, r2
 800f212:	b292      	uxth	r2, r2
 800f214:	b212      	sxth	r2, r2
 800f216:	2100      	movs	r1, #0
 800f218:	6838      	ldr	r0, [r7, #0]
 800f21a:	4798      	blx	r3
            break;
 800f21c:	e00b      	b.n	800f236 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3354      	adds	r3, #84	; 0x54
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a07      	ldr	r2, [pc, #28]	; (800f244 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800f228:	8812      	ldrh	r2, [r2, #0]
 800f22a:	b212      	sxth	r2, r2
 800f22c:	2100      	movs	r1, #0
 800f22e:	6838      	ldr	r0, [r7, #0]
 800f230:	4798      	blx	r3
            break;
 800f232:	e000      	b.n	800f236 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 800f234:	bf00      	nop
    }
 800f236:	bf00      	nop
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	2000b364 	.word	0x2000b364
 800f244:	2000b366 	.word	0x2000b366

0800f248 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
        }
 800f252:	bf00      	nop
 800f254:	370c      	adds	r7, #12
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr
	...

0800f260 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af02      	add	r7, sp, #8
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f26a:	4b08      	ldr	r3, [pc, #32]	; (800f28c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 800f26c:	881b      	ldrh	r3, [r3, #0]
 800f26e:	b21a      	sxth	r2, r3
 800f270:	4b07      	ldr	r3, [pc, #28]	; (800f290 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 800f272:	881b      	ldrh	r3, [r3, #0]
 800f274:	b21b      	sxth	r3, r3
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	4613      	mov	r3, r2
 800f27a:	2200      	movs	r2, #0
 800f27c:	2100      	movs	r1, #0
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7fc ffb5 	bl	800c1ee <_ZN8touchgfx4RectC1Essss>
        }
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	2000b364 	.word	0x2000b364
 800f290:	2000b366 	.word	0x2000b366

0800f294 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	68d2      	ldr	r2, [r2, #12]
 800f2a6:	1052      	asrs	r2, r2, #1
 800f2a8:	1898      	adds	r0, r3, r2
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d102      	bne.n	800f2bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	e00a      	b.n	800f2d2 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	68d2      	ldr	r2, [r2, #12]
 800f2c4:	1052      	asrs	r2, r2, #1
 800f2c6:	4413      	add	r3, r2
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	6892      	ldr	r2, [r2, #8]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	6839      	ldr	r1, [r7, #0]
 800f2d4:	4798      	blx	r3
    }
 800f2d6:	bf00      	nop
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800f2de:	b480      	push	{r7}
 800f2e0:	b083      	sub	sp, #12
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d010      	beq.n	800f310 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	689b      	ldr	r3, [r3, #8]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d107      	bne.n	800f306 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	f003 0301 	and.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d101      	bne.n	800f306 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f302:	2301      	movs	r3, #1
 800f304:	e000      	b.n	800f308 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800f306:	2300      	movs	r3, #0
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d001      	beq.n	800f310 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e000      	b.n	800f312 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800f310:	2300      	movs	r3, #0
    }
 800f312:	4618      	mov	r0, r3
 800f314:	370c      	adds	r7, #12
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr

0800f31e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f31e:	b580      	push	{r7, lr}
 800f320:	b082      	sub	sp, #8
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	68d2      	ldr	r2, [r2, #12]
 800f32e:	1052      	asrs	r2, r2, #1
 800f330:	1899      	adds	r1, r3, r2
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	f003 0301 	and.w	r3, r3, #1
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d102      	bne.n	800f344 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	e00a      	b.n	800f35a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	68d2      	ldr	r2, [r2, #12]
 800f34c:	1052      	asrs	r2, r2, #1
 800f34e:	4413      	add	r3, r2
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	6892      	ldr	r2, [r2, #8]
 800f356:	4413      	add	r3, r2
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4608      	mov	r0, r1
 800f35c:	4798      	blx	r3
    }
 800f35e:	bf00      	nop
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f366:	b480      	push	{r7}
 800f368:	b083      	sub	sp, #12
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d010      	beq.n	800f398 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d107      	bne.n	800f38e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	d101      	bne.n	800f38e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f38a:	2301      	movs	r3, #1
 800f38c:	e000      	b.n	800f390 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f38e:	2300      	movs	r3, #0
 800f390:	2b01      	cmp	r3, #1
 800f392:	d001      	beq.n	800f398 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f394:	2301      	movs	r3, #1
 800f396:	e000      	b.n	800f39a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f398:	2300      	movs	r3, #0
    }
 800f39a:	4618      	mov	r0, r3
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f3a6:	b480      	push	{r7}
 800f3a8:	b083      	sub	sp, #12
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
 800f3ae:	6039      	str	r1, [r7, #0]
        color = col;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	601a      	str	r2, [r3, #0]
    }
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	887a      	ldrh	r2, [r7, #2]
 800f3d4:	801a      	strh	r2, [r3, #0]
    {
    }
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	370c      	adds	r7, #12
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
    {
 800f3ec:	4a06      	ldr	r2, [pc, #24]	; (800f408 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	3304      	adds	r3, #4
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 fbaa 	bl	800fb50 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	0802a5b4 	.word	0x0802a5b4

0800f40c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    }
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7ff ffe5 	bl	800f3e4 <_ZN8touchgfx6ScreenD1Ev>
 800f41a:	213c      	movs	r1, #60	; 0x3c
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f016 f9d1 	bl	80257c4 <_ZdlPvj>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4618      	mov	r0, r3
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
    {
    }
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
    {
    }
 800f448:	bf00      	nop
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
    {
    }
 800f45c:	bf00      	nop
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
    {
    }
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f006 fb1b 	bl	8015ae0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f4aa:	bf00      	nop
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800f4b2:	b480      	push	{r7}
 800f4b4:	b083      	sub	sp, #12
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f4c2:	bf00      	nop
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr
	...

0800f4d0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	4a05      	ldr	r2, [pc, #20]	; (800f4f0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	601a      	str	r2, [r3, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fd fa83 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	08029bc8 	.word	0x08029bc8

0800f4f4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7ff ffe7 	bl	800f4d0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f502:	2130      	movs	r1, #48	; 0x30
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f016 f95d 	bl	80257c4 <_ZdlPvj>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4618      	mov	r0, r3
 800f520:	2326      	movs	r3, #38	; 0x26
 800f522:	461a      	mov	r2, r3
 800f524:	2100      	movs	r1, #0
 800f526:	f016 fa02 	bl	802592e <memset>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7fd fa4b 	bl	800c9c8 <_ZN8touchgfx6WidgetC1Ev>
 800f532:	4a0b      	ldr	r2, [pc, #44]	; (800f560 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	22ff      	movs	r2, #255	; 0xff
 800f53c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3328      	adds	r3, #40	; 0x28
 800f544:	2100      	movs	r1, #0
 800f546:	4618      	mov	r0, r3
 800f548:	f7ff ff2d 	bl	800f3a6 <_ZN8touchgfx9colortypeC1Em>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4618      	mov	r0, r3
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	08029e10 	.word	0x08029e10

0800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	460b      	mov	r3, r1
 800f58a:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	887a      	ldrh	r2, [r7, #2]
 800f590:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800f592:	bf00      	nop
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800f59e:	b480      	push	{r7}
 800f5a0:	b083      	sub	sp, #12
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	887a      	ldrh	r2, [r7, #2]
 800f5ae:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	807b      	strh	r3, [r7, #2]
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800f5cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7ff ffd4 	bl	800f580 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800f5d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7ff ffdd 	bl	800f59e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800f5e4:	bf00      	nop
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	2326      	movs	r3, #38	; 0x26
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	2100      	movs	r1, #0
 800f600:	f016 f995 	bl	802592e <memset>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4618      	mov	r0, r3
 800f608:	f7fd f9de 	bl	800c9c8 <_ZN8touchgfx6WidgetC1Ev>
 800f60c:	4a0b      	ldr	r2, [pc, #44]	; (800f63c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3326      	adds	r3, #38	; 0x26
 800f616:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff fed2 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	22ff      	movs	r2, #255	; 0xff
 800f624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f008 fd86 	bl	801813c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4618      	mov	r0, r3
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	0802a0d4 	.word	0x0802a0d4

0800f640 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f64c:	4a06      	ldr	r2, [pc, #24]	; (800f668 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	887a      	ldrh	r2, [r7, #2]
 800f656:	809a      	strh	r2, [r3, #4]
    }
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4618      	mov	r0, r3
 800f65c:	370c      	adds	r7, #12
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	080273e0 	.word	0x080273e0

0800f66c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4618      	mov	r0, r3
 800f678:	2326      	movs	r3, #38	; 0x26
 800f67a:	461a      	mov	r2, r3
 800f67c:	2100      	movs	r1, #0
 800f67e:	f016 f956 	bl	802592e <memset>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	f7fd f99f 	bl	800c9c8 <_ZN8touchgfx6WidgetC1Ev>
 800f68a:	4a14      	ldr	r2, [pc, #80]	; (800f6dc <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	601a      	str	r2, [r3, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	3328      	adds	r3, #40	; 0x28
 800f694:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f698:	4618      	mov	r0, r3
 800f69a:	f7ff ffd1 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3330      	adds	r3, #48	; 0x30
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7ff fe7e 	bl	800f3a6 <_ZN8touchgfx9colortypeC1Em>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	869a      	strh	r2, [r3, #52]	; 0x34
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	22ff      	movs	r2, #255	; 0xff
 800f6b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	08029d64 	.word	0x08029d64

0800f6e0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>:
class View : public Screen
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	4a05      	ldr	r2, [pc, #20]	; (800f700 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev+0x20>)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	601a      	str	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7ff fe77 	bl	800f3e4 <_ZN8touchgfx6ScreenD1Ev>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	08027fb4 	.word	0x08027fb4

0800f704 <_ZN8touchgfx4ViewI16galleryPresenterED0Ev>:
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7ff ffe7 	bl	800f6e0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f712:	2140      	movs	r1, #64	; 0x40
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f016 f855 	bl	80257c4 <_ZdlPvj>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4618      	mov	r0, r3
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <_ZN15galleryViewBaseD1Ev>:

class galleryViewBase : public touchgfx::View<galleryPresenter>
{
public:
    galleryViewBase();
    virtual ~galleryViewBase() {}
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	4a12      	ldr	r2, [pc, #72]	; (800f778 <_ZN15galleryViewBaseD1Ev+0x54>)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 f9e7 	bl	800fb0c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	33d8      	adds	r3, #216	; 0xd8
 800f742:	4618      	mov	r0, r3
 800f744:	f000 faae 	bl	800fca4 <_ZN8touchgfx8TextAreaD1Ev>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	33ac      	adds	r3, #172	; 0xac
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 fa87 	bl	800fc60 <_ZN8touchgfx5ImageD1Ev>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	3370      	adds	r3, #112	; 0x70
 800f756:	4618      	mov	r0, r3
 800f758:	f000 fa60 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	3340      	adds	r3, #64	; 0x40
 800f760:	4618      	mov	r0, r3
 800f762:	f000 fa17 	bl	800fb94 <_ZN8touchgfx3BoxD1Ev>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff ffb9 	bl	800f6e0 <_ZN8touchgfx4ViewI16galleryPresenterED1Ev>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	08027f68 	.word	0x08027f68

0800f77c <_ZN15galleryViewBaseD0Ev>:
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7ff ffcd 	bl	800f724 <_ZN15galleryViewBaseD1Ev>
 800f78a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f016 f818 	bl	80257c4 <_ZdlPvj>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4618      	mov	r0, r3
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <_ZN15galleryViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b082      	sub	sp, #8
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f7a6:	f009 feb9 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 800f7aa:	4603      	mov	r3, r0
    }
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	71fb      	strb	r3, [r7, #7]
 800f7be:	460b      	mov	r3, r1
 800f7c0:	71bb      	strb	r3, [r7, #6]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800f7c6:	f7fc ffbf 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d105      	bne.n	800f7dc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800f7d0:	4b0a      	ldr	r3, [pc, #40]	; (800f7fc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800f7d2:	4a0b      	ldr	r2, [pc, #44]	; (800f800 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800f7d4:	2135      	movs	r1, #53	; 0x35
 800f7d6:	480b      	ldr	r0, [pc, #44]	; (800f804 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800f7d8:	f016 f820 	bl	802581c <__assert_func>
 800f7dc:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800f7de:	f7fc ffbf 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 800f7e2:	6803      	ldr	r3, [r0, #0]
 800f7e4:	3328      	adds	r3, #40	; 0x28
 800f7e6:	681c      	ldr	r4, [r3, #0]
 800f7e8:	797b      	ldrb	r3, [r7, #5]
 800f7ea:	79ba      	ldrb	r2, [r7, #6]
 800f7ec:	79f9      	ldrb	r1, [r7, #7]
 800f7ee:	47a0      	blx	r4
 800f7f0:	4603      	mov	r3, r0
    }
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	370c      	adds	r7, #12
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd90      	pop	{r4, r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08026b64 	.word	0x08026b64
 800f800:	08027ff8 	.word	0x08027ff8
 800f804:	08026ba8 	.word	0x08026ba8

0800f808 <_ZN15galleryViewBaseC1Ev>:
#include <gui_generated/gallery_screen/galleryViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

galleryViewBase::galleryViewBase() :
 800f808:	b590      	push	{r4, r7, lr}
 800f80a:	b093      	sub	sp, #76	; 0x4c
 800f80c:	af02      	add	r7, sp, #8
 800f80e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &galleryViewBase::buttonCallbackHandler)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4618      	mov	r0, r3
 800f814:	f000 f914 	bl	800fa40 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>
 800f818:	4a77      	ldr	r2, [pc, #476]	; (800f9f8 <_ZN15galleryViewBaseC1Ev+0x1f0>)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	601a      	str	r2, [r3, #0]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	3340      	adds	r3, #64	; 0x40
 800f822:	4618      	mov	r0, r3
 800f824:	f7ff fe76 	bl	800f514 <_ZN8touchgfx3BoxC1Ev>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	3370      	adds	r3, #112	; 0x70
 800f82c:	4618      	mov	r0, r3
 800f82e:	f008 fc61 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800f838:	f107 030c 	add.w	r3, r7, #12
 800f83c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f840:	4618      	mov	r0, r3
 800f842:	f7ff fdbf 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800f846:	f107 030c 	add.w	r3, r7, #12
 800f84a:	4619      	mov	r1, r3
 800f84c:	4620      	mov	r0, r4
 800f84e:	f7ff fecd 	bl	800f5ec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	33d8      	adds	r3, #216	; 0xd8
 800f856:	4618      	mov	r0, r3
 800f858:	f7ff ff08 	bl	800f66c <_ZN8touchgfx8TextAreaC1Ev>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f503 708a 	add.w	r0, r3, #276	; 0x114
 800f862:	4b66      	ldr	r3, [pc, #408]	; (800f9fc <_ZN15galleryViewBaseC1Ev+0x1f4>)
 800f864:	613b      	str	r3, [r7, #16]
 800f866:	2300      	movs	r3, #0
 800f868:	617b      	str	r3, [r7, #20]
 800f86a:	f107 0310 	add.w	r3, r7, #16
 800f86e:	cb0c      	ldmia	r3, {r2, r3}
 800f870:	6879      	ldr	r1, [r7, #4]
 800f872:	f000 f90b 	bl	800fa8c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f87c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f886:	2200      	movs	r2, #0
 800f888:	2100      	movs	r1, #0
 800f88a:	f7fc fe1f 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(74, 94, 92));
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f894:	225c      	movs	r2, #92	; 0x5c
 800f896:	215e      	movs	r1, #94	; 0x5e
 800f898:	204a      	movs	r0, #74	; 0x4a
 800f89a:	f7ff ff8b 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f7ff fe5e 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Back_Button.setXY(0, 0);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3370      	adds	r3, #112	; 0x70
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	2100      	movs	r1, #0
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7fc fe70 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f8bc:	f107 0318 	add.w	r3, r7, #24
 800f8c0:	2102      	movs	r1, #2
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7ff fd7e 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800f8c8:	f107 031c 	add.w	r3, r7, #28
 800f8cc:	2103      	movs	r1, #3
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7ff fd78 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800f8d4:	f107 0320 	add.w	r3, r7, #32
 800f8d8:	2108      	movs	r1, #8
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7ff fd72 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800f8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8e4:	2108      	movs	r1, #8
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7ff fd6c 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800f8ec:	f107 0020 	add.w	r0, r7, #32
 800f8f0:	f107 021c 	add.w	r2, r7, #28
 800f8f4:	f107 0118 	add.w	r1, r7, #24
 800f8f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	4603      	mov	r3, r0
 800f900:	4620      	mov	r0, r4
 800f902:	f008 fb53 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	3370      	adds	r3, #112	; 0x70
 800f90a:	220f      	movs	r2, #15
 800f90c:	2113      	movs	r1, #19
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff fe54 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f920:	4619      	mov	r1, r3
 800f922:	4610      	mov	r0, r2
 800f924:	f7ff fdc5 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image1.setXY(90, 52);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	33ac      	adds	r3, #172	; 0xac
 800f92c:	2234      	movs	r2, #52	; 0x34
 800f92e:	215a      	movs	r1, #90	; 0x5a
 800f930:	4618      	mov	r0, r3
 800f932:	f7fc fe30 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_COOLTEAM_ID));
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 800f93c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f940:	2107      	movs	r1, #7
 800f942:	4618      	mov	r0, r3
 800f944:	f7ff fd3e 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800f948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f94c:	4619      	mov	r1, r3
 800f94e:	4620      	mov	r0, r4
 800f950:	f008 fbf4 	bl	801813c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(188, 18);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	33d8      	adds	r3, #216	; 0xd8
 800f958:	2212      	movs	r2, #18
 800f95a:	21bc      	movs	r1, #188	; 0xbc
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fc fe1a 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(14, 255, 120));
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800f968:	2278      	movs	r2, #120	; 0x78
 800f96a:	21ff      	movs	r1, #255	; 0xff
 800f96c:	200e      	movs	r0, #14
 800f96e:	f7ff ff21 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f972:	4603      	mov	r3, r0
 800f974:	637c      	str	r4, [r7, #52]	; 0x34
 800f976:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800f978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	33d8      	adds	r3, #216	; 0xd8
 800f982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f984:	2300      	movs	r3, #0
 800f986:	877b      	strh	r3, [r7, #58]	; 0x3a
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800f988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f98c:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800f994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f998:	2115      	movs	r1, #21
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff fe50 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 800f9a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f008 f91a 	bl	8017be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800f9ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7fc f9ed 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>

    add(bg);
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	3340      	adds	r3, #64	; 0x40
 800f9bc:	4619      	mov	r1, r3
 800f9be:	4610      	mov	r0, r2
 800f9c0:	f7ff fd68 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	3370      	adds	r3, #112	; 0x70
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	f7ff fd61 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	33ac      	adds	r3, #172	; 0xac
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7ff fd5a 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	33d8      	adds	r3, #216	; 0xd8
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	f7ff fd53 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3744      	adds	r7, #68	; 0x44
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd90      	pop	{r4, r7, pc}
 800f9f8:	08027f68 	.word	0x08027f68
 800f9fc:	0800fa15 	.word	0x0800fa15

0800fa00 <_ZN15galleryViewBase11setupScreenEv>:

void galleryViewBase::setupScreen()
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]

}
 800fa08:	bf00      	nop
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void galleryViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	3370      	adds	r3, #112	; 0x70
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d106      	bne.n	800fa36 <_ZN15galleryViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //back
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenCoverTransitionEast();
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7ff feb8 	bl	800f79e <_ZN15galleryViewBase11applicationEv>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7fd f8e5 	bl	800cc00 <_ZN23FrontendApplicationBase35gotoscreenScreenCoverTransitionEastEv>
    }
}
 800fa36:	bf00      	nop
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
	...

0800fa40 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev>:
    View()
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f00a fd1c 	bl	801a488 <_ZN8touchgfx6ScreenC1Ev>
 800fa50:	4a05      	ldr	r2, [pc, #20]	; (800fa68 <_ZN8touchgfx4ViewI16galleryPresenterEC1Ev+0x28>)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	601a      	str	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	08027fb4 	.word	0x08027fb4

0800fa6c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	4a04      	ldr	r2, [pc, #16]	; (800fa88 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	601a      	str	r2, [r3, #0]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	08027fe8 	.word	0x08027fe8

0800fa8c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	4639      	mov	r1, r7
 800fa98:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7ff ffe4 	bl	800fa6c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800faa4:	4a08      	ldr	r2, [pc, #32]	; (800fac8 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	3308      	adds	r3, #8
 800fab4:	463a      	mov	r2, r7
 800fab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800faba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	4618      	mov	r0, r3
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	08027f9c 	.word	0x08027f9c

0800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    }
 800fad4:	4a04      	ldr	r2, [pc, #16]	; (800fae8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4618      	mov	r0, r3
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr
 800fae8:	08027fe8 	.word	0x08027fe8

0800faec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    }
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f7ff ffe9 	bl	800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fafa:	2104      	movs	r1, #4
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f015 fe61 	bl	80257c4 <_ZdlPvj>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	4a05      	ldr	r2, [pc, #20]	; (800fb2c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	601a      	str	r2, [r3, #0]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7ff ffd5 	bl	800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4618      	mov	r0, r3
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	08027f9c 	.word	0x08027f9c

0800fb30 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7ff ffe7 	bl	800fb0c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fb3e:	2110      	movs	r1, #16
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f015 fe3f 	bl	80257c4 <_ZdlPvj>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	4a05      	ldr	r2, [pc, #20]	; (800fb70 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fc fc93 	bl	800c48c <_ZN8touchgfx8DrawableD1Ev>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	080290fc 	.word	0x080290fc

0800fb74 <_ZN8touchgfx9ContainerD0Ev>:
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7ff ffe7 	bl	800fb50 <_ZN8touchgfx9ContainerD1Ev>
 800fb82:	212c      	movs	r1, #44	; 0x2c
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f015 fe1d 	bl	80257c4 <_ZdlPvj>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	4a05      	ldr	r2, [pc, #20]	; (800fbb4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	601a      	str	r2, [r3, #0]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fc ff21 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	08029e10 	.word	0x08029e10

0800fbb8 <_ZN8touchgfx3BoxD0Ev>:
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7ff ffe7 	bl	800fb94 <_ZN8touchgfx3BoxD1Ev>
 800fbc6:	2130      	movs	r1, #48	; 0x30
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f015 fdfb 	bl	80257c4 <_ZdlPvj>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	4a05      	ldr	r2, [pc, #20]	; (800fbf8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	601a      	str	r2, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7ff fc71 	bl	800f4d0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	08029edc 	.word	0x08029edc

0800fbfc <_ZN8touchgfx6ButtonD0Ev>:
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b082      	sub	sp, #8
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f7ff ffe7 	bl	800fbd8 <_ZN8touchgfx6ButtonD1Ev>
 800fc0a:	2134      	movs	r1, #52	; 0x34
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f015 fdd9 	bl	80257c4 <_ZdlPvj>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	4a05      	ldr	r2, [pc, #20]	; (800fc3c <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff ffd3 	bl	800fbd8 <_ZN8touchgfx6ButtonD1Ev>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	0802a02c 	.word	0x0802a02c

0800fc40 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7ff ffe7 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800fc4e:	213c      	movs	r1, #60	; 0x3c
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f015 fdb7 	bl	80257c4 <_ZdlPvj>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	4a05      	ldr	r2, [pc, #20]	; (800fc80 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	601a      	str	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7fc febb 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	0802a0d4 	.word	0x0802a0d4

0800fc84 <_ZN8touchgfx5ImageD0Ev>:
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f7ff ffe7 	bl	800fc60 <_ZN8touchgfx5ImageD1Ev>
 800fc92:	212c      	movs	r1, #44	; 0x2c
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f015 fd95 	bl	80257c4 <_ZdlPvj>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	4a08      	ldr	r2, [pc, #32]	; (800fcd0 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3328      	adds	r3, #40	; 0x28
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fc f86a 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7fc fe94 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3708      	adds	r7, #8
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	08029d64 	.word	0x08029d64

0800fcd4 <_ZN8touchgfx8TextAreaD0Ev>:
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7ff ffe1 	bl	800fca4 <_ZN8touchgfx8TextAreaD1Ev>
 800fce2:	213c      	movs	r1, #60	; 0x3c
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f015 fd6d 	bl	80257c4 <_ZdlPvj>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	68d2      	ldr	r2, [r2, #12]
 800fd06:	1052      	asrs	r2, r2, #1
 800fd08:	1898      	adds	r0, r3, r2
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	f003 0301 	and.w	r3, r3, #1
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d102      	bne.n	800fd1c <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	e00a      	b.n	800fd32 <_ZN8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	68d2      	ldr	r2, [r2, #12]
 800fd24:	1052      	asrs	r2, r2, #1
 800fd26:	4413      	add	r3, r2
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	6892      	ldr	r2, [r2, #8]
 800fd2e:	4413      	add	r3, r2
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	6839      	ldr	r1, [r7, #0]
 800fd34:	4798      	blx	r3
    }
 800fd36:	bf00      	nop
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800fd3e:	b480      	push	{r7}
 800fd40:	b083      	sub	sp, #12
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d010      	beq.n	800fd70 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d107      	bne.n	800fd66 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	f003 0301 	and.w	r3, r3, #1
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d101      	bne.n	800fd66 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800fd62:	2301      	movs	r3, #1
 800fd64:	e000      	b.n	800fd68 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800fd66:	2300      	movs	r3, #0
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d001      	beq.n	800fd70 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e000      	b.n	800fd72 <_ZNK8touchgfx8CallbackI15galleryViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800fd70:	2300      	movs	r3, #0
    }
 800fd72:	4618      	mov	r0, r3
 800fd74:	370c      	adds	r7, #12
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr

0800fd7e <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800fd7e:	b480      	push	{r7}
 800fd80:	b083      	sub	sp, #12
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	460b      	mov	r3, r1
 800fd88:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	78fa      	ldrb	r2, [r7, #3]
 800fd8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800fd92:	bf00      	nop
 800fd94:	370c      	adds	r7, #12
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr
	...

0800fda0 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	2326      	movs	r3, #38	; 0x26
 800fdae:	461a      	mov	r2, r3
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	f015 fdbc 	bl	802592e <memset>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fc fe05 	bl	800c9c8 <_ZN8touchgfx6WidgetC1Ev>
 800fdbe:	4a0a      	ldr	r2, [pc, #40]	; (800fde8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	601a      	str	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	629a      	str	r2, [r3, #40]	; 0x28
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2101      	movs	r1, #1
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7ff ffd1 	bl	800fd7e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	4618      	mov	r0, r3
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	08029bc8 	.word	0x08029bc8

0800fdec <_ZN8touchgfx6ButtonC1Ev>:
{
public:
    Button()
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff ffd2 	bl	800fda0 <_ZN8touchgfx14AbstractButtonC1Ev>
 800fdfc:	4a0c      	ldr	r2, [pc, #48]	; (800fe30 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	332e      	adds	r3, #46	; 0x2e
 800fe06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7ff fada 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	3330      	adds	r3, #48	; 0x30
 800fe14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7ff fad3 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	22ff      	movs	r2, #255	; 0xff
 800fe22:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	08029edc 	.word	0x08029edc

0800fe34 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	889a      	ldrh	r2, [r3, #4]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	809a      	strh	r2, [r3, #4]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	3334      	adds	r3, #52	; 0x34
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7ff ffe5 	bl	800fe34 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 f820 	bl	800feb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	683a      	ldr	r2, [r7, #0]
 800fe86:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	683a      	ldr	r2, [r7, #0]
 800fea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800feb0:	b590      	push	{r4, r7, lr}
 800feb2:	b08b      	sub	sp, #44	; 0x2c
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	3334      	adds	r3, #52	; 0x34
 800febc:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	889b      	ldrh	r3, [r3, #4]
 800fec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fec6:	4293      	cmp	r3, r2
 800fec8:	bf14      	ite	ne
 800feca:	2301      	movne	r3, #1
 800fecc:	2300      	moveq	r3, #0
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d06f      	beq.n	800ffb4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	3334      	adds	r3, #52	; 0x34
 800fed8:	613b      	str	r3, [r7, #16]
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fede:	4b39      	ldr	r3, [pc, #228]	; (800ffc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d105      	bne.n	800fef2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 800fee6:	4b38      	ldr	r3, [pc, #224]	; (800ffc8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800fee8:	4a38      	ldr	r2, [pc, #224]	; (800ffcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800feea:	21b1      	movs	r1, #177	; 0xb1
 800feec:	4838      	ldr	r0, [pc, #224]	; (800ffd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800feee:	f015 fc95 	bl	802581c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	889a      	ldrh	r2, [r3, #4]
 800fef6:	4b37      	ldr	r3, [pc, #220]	; (800ffd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d305      	bcc.n	800ff0a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 800fefe:	4b36      	ldr	r3, [pc, #216]	; (800ffd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800ff00:	4a32      	ldr	r2, [pc, #200]	; (800ffcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800ff02:	21b2      	movs	r1, #178	; 0xb2
 800ff04:	4832      	ldr	r0, [pc, #200]	; (800ffd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800ff06:	f015 fc89 	bl	802581c <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800ff0a:	4b34      	ldr	r3, [pc, #208]	; (800ffdc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	4b2d      	ldr	r3, [pc, #180]	; (800ffc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800ff10:	6819      	ldr	r1, [r3, #0]
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	889b      	ldrh	r3, [r3, #4]
 800ff16:	005b      	lsls	r3, r3, #1
 800ff18:	440b      	add	r3, r1
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	4413      	add	r3, r2
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	3334      	adds	r3, #52	; 0x34
 800ff28:	61bb      	str	r3, [r7, #24]
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ff2e:	4b25      	ldr	r3, [pc, #148]	; (800ffc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d105      	bne.n	800ff42 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 800ff36:	4b24      	ldr	r3, [pc, #144]	; (800ffc8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 800ff38:	4a24      	ldr	r2, [pc, #144]	; (800ffcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800ff3a:	21b1      	movs	r1, #177	; 0xb1
 800ff3c:	4824      	ldr	r0, [pc, #144]	; (800ffd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800ff3e:	f015 fc6d 	bl	802581c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	889a      	ldrh	r2, [r3, #4]
 800ff46:	4b23      	ldr	r3, [pc, #140]	; (800ffd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d305      	bcc.n	800ff5a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 800ff4e:	4b22      	ldr	r3, [pc, #136]	; (800ffd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800ff50:	4a1e      	ldr	r2, [pc, #120]	; (800ffcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800ff52:	21b2      	movs	r1, #178	; 0xb2
 800ff54:	481e      	ldr	r0, [pc, #120]	; (800ffd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 800ff56:	f015 fc61 	bl	802581c <__assert_func>
        return texts->getText(typedTextId);
 800ff5a:	4b21      	ldr	r3, [pc, #132]	; (800ffe0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	889b      	ldrh	r3, [r3, #4]
 800ff62:	4619      	mov	r1, r3
 800ff64:	4610      	mov	r0, r2
 800ff66:	f002 fcc3 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800ff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	3328      	adds	r3, #40	; 0x28
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6a39      	ldr	r1, [r7, #32]
 800ff78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff7a:	4798      	blx	r3
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	b2dc      	uxtb	r4, r3
 800ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	3340      	adds	r3, #64	; 0x40
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	6a39      	ldr	r1, [r7, #32]
 800ff8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff8c:	4798      	blx	r3
 800ff8e:	4603      	mov	r3, r0
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	fb14 f303 	smulbb	r3, r4, r3
 800ff96:	b2dc      	uxtb	r4, r3
 800ff98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	3324      	adds	r3, #36	; 0x24
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	6a39      	ldr	r1, [r7, #32]
 800ffa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffa4:	4798      	blx	r3
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	4423      	add	r3, r4
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800ffb2:	e003      	b.n	800ffbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 800ffbc:	bf00      	nop
 800ffbe:	372c      	adds	r7, #44	; 0x2c
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd90      	pop	{r4, r7, pc}
 800ffc4:	2000b400 	.word	0x2000b400
 800ffc8:	08026be8 	.word	0x08026be8
 800ffcc:	080280d4 	.word	0x080280d4
 800ffd0:	08026c2c 	.word	0x08026c2c
 800ffd4:	2000b404 	.word	0x2000b404
 800ffd8:	08026c70 	.word	0x08026c70
 800ffdc:	2000b408 	.word	0x2000b408
 800ffe0:	2000b40c 	.word	0x2000b40c

0800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff fb3c 	bl	800f66c <_ZN8touchgfx8TextAreaC1Ev>
 800fff4:	4a05      	ldr	r2, [pc, #20]	; (801000c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	601a      	str	r2, [r3, #0]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4618      	mov	r0, r3
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	08029f80 	.word	0x08029f80

08010010 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	683a      	ldr	r2, [r7, #0]
 801001e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010020:	bf00      	nop
 8010022:	370c      	adds	r7, #12
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>:
class View : public Screen
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	4a05      	ldr	r2, [pc, #20]	; (801004c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev+0x20>)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4618      	mov	r0, r3
 801003e:	f7ff f9d1 	bl	800f3e4 <_ZN8touchgfx6ScreenD1Ev>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4618      	mov	r0, r3
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	080280a8 	.word	0x080280a8

08010050 <_ZN8touchgfx4ViewI17gameoverPresenterED0Ev>:
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7ff ffe7 	bl	801002c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 801005e:	2140      	movs	r1, #64	; 0x40
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f015 fbaf 	bl	80257c4 <_ZdlPvj>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <_ZN16gameoverViewBaseD1Ev>:

class gameoverViewBase : public touchgfx::View<gameoverPresenter>
{
public:
    gameoverViewBase();
    virtual ~gameoverViewBase() {}
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	4a15      	ldr	r2, [pc, #84]	; (80100d0 <_ZN16gameoverViewBaseD1Ev+0x60>)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010084:	4618      	mov	r0, r3
 8010086:	f000 fa3f 	bl	8010508 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010090:	4618      	mov	r0, r3
 8010092:	f7ff fda1 	bl	800fbd8 <_ZN8touchgfx6ButtonD1Ev>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	33f4      	adds	r3, #244	; 0xf4
 801009a:	4618      	mov	r0, r3
 801009c:	f000 fa7e 	bl	801059c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	33b8      	adds	r3, #184	; 0xb8
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff fdfd 	bl	800fca4 <_ZN8touchgfx8TextAreaD1Ev>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	3370      	adds	r3, #112	; 0x70
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 fa4c 	bl	801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	3340      	adds	r3, #64	; 0x40
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7ff fd6b 	bl	800fb94 <_ZN8touchgfx3BoxD1Ev>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff ffb3 	bl	801002c <_ZN8touchgfx4ViewI17gameoverPresenterED1Ev>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	0802805c 	.word	0x0802805c

080100d4 <_ZN16gameoverViewBaseD0Ev>:
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f7ff ffc7 	bl	8010070 <_ZN16gameoverViewBaseD1Ev>
 80100e2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f015 fb6c 	bl	80257c4 <_ZdlPvj>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <_ZN16gameoverViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b082      	sub	sp, #8
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80100fe:	f009 fa0d 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8010102:	4603      	mov	r3, r0
    }
 8010104:	4618      	mov	r0, r3
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <_ZN16gameoverViewBaseC1Ev>:
#include <gui_generated/gameover_screen/gameoverViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

gameoverViewBase::gameoverViewBase() :
 801010c:	b590      	push	{r4, r7, lr}
 801010e:	b09d      	sub	sp, #116	; 0x74
 8010110:	af02      	add	r7, sp, #8
 8010112:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &gameoverViewBase::buttonCallbackHandler)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4618      	mov	r0, r3
 8010118:	f000 f9c0 	bl	801049c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>
 801011c:	4ac5      	ldr	r2, [pc, #788]	; (8010434 <_ZN16gameoverViewBaseC1Ev+0x328>)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	601a      	str	r2, [r3, #0]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	3340      	adds	r3, #64	; 0x40
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff f9f4 	bl	800f514 <_ZN8touchgfx3BoxC1Ev>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	3370      	adds	r3, #112	; 0x70
 8010130:	4618      	mov	r0, r3
 8010132:	f008 f93f 	bl	80183b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	33b8      	adds	r3, #184	; 0xb8
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff fa96 	bl	800f66c <_ZN8touchgfx8TextAreaC1Ev>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	33f4      	adds	r3, #244	; 0xf4
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff ff4d 	bl	800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010150:	4618      	mov	r0, r3
 8010152:	f7ff fe4b 	bl	800fdec <_ZN8touchgfx6ButtonC1Ev>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 801015c:	4bb6      	ldr	r3, [pc, #728]	; (8010438 <_ZN16gameoverViewBaseC1Ev+0x32c>)
 801015e:	617b      	str	r3, [r7, #20]
 8010160:	2300      	movs	r3, #0
 8010162:	61bb      	str	r3, [r7, #24]
 8010164:	f107 0314 	add.w	r3, r7, #20
 8010168:	cb0c      	ldmia	r3, {r2, r3}
 801016a:	6879      	ldr	r1, [r7, #4]
 801016c:	f000 f9ac 	bl	80104c8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    bg.setPosition(0, 0, 480, 272);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010176:	f44f 7388 	mov.w	r3, #272	; 0x110
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010180:	2200      	movs	r2, #0
 8010182:	2100      	movs	r1, #0
 8010184:	f7fc f9a2 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801018e:	22ff      	movs	r2, #255	; 0xff
 8010190:	21ff      	movs	r1, #255	; 0xff
 8010192:	20ff      	movs	r0, #255	; 0xff
 8010194:	f7ff fb0e 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010198:	4603      	mov	r3, r0
 801019a:	4619      	mov	r1, r3
 801019c:	4620      	mov	r0, r4
 801019e:	f7ff f9e1 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	3370      	adds	r3, #112	; 0x70
 80101a6:	2200      	movs	r2, #0
 80101a8:	2100      	movs	r1, #0
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fc f9f3 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80101b6:	f107 031c 	add.w	r3, r7, #28
 80101ba:	2102      	movs	r1, #2
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff f901 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80101c2:	f107 0320 	add.w	r3, r7, #32
 80101c6:	2103      	movs	r1, #3
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff f8fb 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80101ce:	f107 0220 	add.w	r2, r7, #32
 80101d2:	f107 031c 	add.w	r3, r7, #28
 80101d6:	4619      	mov	r1, r3
 80101d8:	4620      	mov	r0, r4
 80101da:	f007 fd3b 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80101e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101e8:	210b      	movs	r1, #11
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7ff fa28 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 80101f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101f4:	4619      	mov	r1, r3
 80101f6:	4620      	mov	r0, r4
 80101f8:	f7ff fe2c 	bl	800fe54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80101fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010200:	4618      	mov	r0, r3
 8010202:	f7fb fdc5 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801020c:	22ff      	movs	r2, #255	; 0xff
 801020e:	21ff      	movs	r1, #255	; 0xff
 8010210:	20ff      	movs	r0, #255	; 0xff
 8010212:	f7ff facf 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010216:	4603      	mov	r3, r0
 8010218:	4619      	mov	r1, r3
 801021a:	4620      	mov	r0, r4
 801021c:	f7ff fe2c 	bl	800fe78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010226:	22ff      	movs	r2, #255	; 0xff
 8010228:	21ff      	movs	r1, #255	; 0xff
 801022a:	20ff      	movs	r0, #255	; 0xff
 801022c:	f7ff fac2 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010230:	4603      	mov	r3, r0
 8010232:	4619      	mov	r1, r3
 8010234:	4620      	mov	r0, r4
 8010236:	f7ff fe2d 	bl	800fe94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010246:	4619      	mov	r1, r3
 8010248:	4610      	mov	r0, r2
 801024a:	f7ff f932 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    gameover_text.setXY(179, 124);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	33b8      	adds	r3, #184	; 0xb8
 8010252:	227c      	movs	r2, #124	; 0x7c
 8010254:	21b3      	movs	r1, #179	; 0xb3
 8010256:	4618      	mov	r0, r3
 8010258:	f7fc f99d 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    gameover_text.setColor(touchgfx::Color::getColorFrom24BitRGB(235, 0, 0));
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010262:	2200      	movs	r2, #0
 8010264:	2100      	movs	r1, #0
 8010266:	20eb      	movs	r0, #235	; 0xeb
 8010268:	f7ff faa4 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801026c:	4603      	mov	r3, r0
 801026e:	64fc      	str	r4, [r7, #76]	; 0x4c
 8010270:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010274:	693a      	ldr	r2, [r7, #16]
 8010276:	631a      	str	r2, [r3, #48]	; 0x30
    gameover_text.setLinespacing(0);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	33b8      	adds	r3, #184	; 0xb8
 801027c:	657b      	str	r3, [r7, #84]	; 0x54
 801027e:	2300      	movs	r3, #0
 8010280:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 8010284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010286:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801028a:	869a      	strh	r2, [r3, #52]	; 0x34
    gameover_text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8010292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010296:	2112      	movs	r1, #18
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff f9d1 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 801029e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80102a2:	4619      	mov	r1, r3
 80102a4:	4620      	mov	r0, r4
 80102a6:	f007 fc9b 	bl	8017be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80102aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fb fd6e 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>

    score.setXY(166, 149);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	33f4      	adds	r3, #244	; 0xf4
 80102b8:	2295      	movs	r2, #149	; 0x95
 80102ba:	21a6      	movs	r1, #166	; 0xa6
 80102bc:	4618      	mov	r0, r3
 80102be:	f7fc f96a 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 173, 173));
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 80102c8:	22ad      	movs	r2, #173	; 0xad
 80102ca:	21ad      	movs	r1, #173	; 0xad
 80102cc:	2000      	movs	r0, #0
 80102ce:	f7ff fa71 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80102d2:	4603      	mov	r3, r0
 80102d4:	65bc      	str	r4, [r7, #88]	; 0x58
 80102d6:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80102d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	33f4      	adds	r3, #244	; 0xf4
 80102e2:	663b      	str	r3, [r7, #96]	; 0x60
 80102e4:	2300      	movs	r3, #0
 80102e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        linespace = space;
 80102ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102ec:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80102f0:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID35).getText());
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80102f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80102fc:	2114      	movs	r1, #20
 80102fe:	4618      	mov	r0, r3
 8010300:	f7ff f99e 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 8010304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010308:	667b      	str	r3, [r7, #100]	; 0x64
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801030a:	4b4c      	ldr	r3, [pc, #304]	; (801043c <_ZN16gameoverViewBaseC1Ev+0x330>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d105      	bne.n	801031e <_ZN16gameoverViewBaseC1Ev+0x212>
 8010312:	4b4b      	ldr	r3, [pc, #300]	; (8010440 <_ZN16gameoverViewBaseC1Ev+0x334>)
 8010314:	4a4b      	ldr	r2, [pc, #300]	; (8010444 <_ZN16gameoverViewBaseC1Ev+0x338>)
 8010316:	21b1      	movs	r1, #177	; 0xb1
 8010318:	484b      	ldr	r0, [pc, #300]	; (8010448 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 801031a:	f015 fa7f 	bl	802581c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801031e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010320:	889a      	ldrh	r2, [r3, #4]
 8010322:	4b4a      	ldr	r3, [pc, #296]	; (801044c <_ZN16gameoverViewBaseC1Ev+0x340>)
 8010324:	881b      	ldrh	r3, [r3, #0]
 8010326:	429a      	cmp	r2, r3
 8010328:	d305      	bcc.n	8010336 <_ZN16gameoverViewBaseC1Ev+0x22a>
 801032a:	4b49      	ldr	r3, [pc, #292]	; (8010450 <_ZN16gameoverViewBaseC1Ev+0x344>)
 801032c:	4a45      	ldr	r2, [pc, #276]	; (8010444 <_ZN16gameoverViewBaseC1Ev+0x338>)
 801032e:	21b2      	movs	r1, #178	; 0xb2
 8010330:	4845      	ldr	r0, [pc, #276]	; (8010448 <_ZN16gameoverViewBaseC1Ev+0x33c>)
 8010332:	f015 fa73 	bl	802581c <__assert_func>
        return texts->getText(typedTextId);
 8010336:	4b47      	ldr	r3, [pc, #284]	; (8010454 <_ZN16gameoverViewBaseC1Ev+0x348>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801033c:	4611      	mov	r1, r2
 801033e:	4618      	mov	r0, r3
 8010340:	f002 fad6 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8010344:	4603      	mov	r3, r0
 8010346:	4a44      	ldr	r2, [pc, #272]	; (8010458 <_ZN16gameoverViewBaseC1Ev+0x34c>)
 8010348:	2114      	movs	r1, #20
 801034a:	4620      	mov	r0, r4
 801034c:	f00b fb40 	bl	801b9d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010354:	4618      	mov	r0, r3
 8010356:	f7fb fd1b 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010366:	4619      	mov	r1, r3
 8010368:	4610      	mov	r0, r2
 801036a:	f7ff fe51 	bl	8010010 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	33f4      	adds	r3, #244	; 0xf4
 8010372:	4618      	mov	r0, r3
 8010374:	f007 fc0a 	bl	8017b8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 801037e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010382:	2113      	movs	r1, #19
 8010384:	4618      	mov	r0, r3
 8010386:	f7ff f95b 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 801038a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801038e:	4619      	mov	r1, r3
 8010390:	4620      	mov	r0, r4
 8010392:	f007 fc25 	bl	8017be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801039a:	4618      	mov	r0, r3
 801039c:	f7fb fcf8 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>

    button1.setXY(569, -60);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80103a6:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80103aa:	f240 2139 	movw	r1, #569	; 0x239
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fc f8f1 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f503 749a 	add.w	r4, r3, #308	; 0x134
 80103ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80103be:	2100      	movs	r1, #0
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fe ffff 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80103c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80103ca:	2101      	movs	r1, #1
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fe fff9 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80103d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80103d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80103da:	4619      	mov	r1, r3
 80103dc:	4620      	mov	r0, r4
 80103de:	f007 fc39 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    add(bg);
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	3340      	adds	r3, #64	; 0x40
 80103e8:	4619      	mov	r1, r3
 80103ea:	4610      	mov	r0, r2
 80103ec:	f7ff f852 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	3370      	adds	r3, #112	; 0x70
 80103f6:	4619      	mov	r1, r3
 80103f8:	4610      	mov	r0, r2
 80103fa:	f7ff f84b 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gameover_text);
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	33b8      	adds	r3, #184	; 0xb8
 8010404:	4619      	mov	r1, r3
 8010406:	4610      	mov	r0, r2
 8010408:	f7ff f844 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	33f4      	adds	r3, #244	; 0xf4
 8010412:	4619      	mov	r1, r3
 8010414:	4610      	mov	r0, r2
 8010416:	f7ff f83d 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8010422:	4619      	mov	r1, r3
 8010424:	4610      	mov	r0, r2
 8010426:	f7ff f835 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	4618      	mov	r0, r3
 801042e:	376c      	adds	r7, #108	; 0x6c
 8010430:	46bd      	mov	sp, r7
 8010432:	bd90      	pop	{r4, r7, pc}
 8010434:	0802805c 	.word	0x0802805c
 8010438:	08010471 	.word	0x08010471
 801043c:	2000b400 	.word	0x2000b400
 8010440:	08026be8 	.word	0x08026be8
 8010444:	080280d4 	.word	0x080280d4
 8010448:	08026c2c 	.word	0x08026c2c
 801044c:	2000b404 	.word	0x2000b404
 8010450:	08026c70 	.word	0x08026c70
 8010454:	2000b40c 	.word	0x2000b40c
 8010458:	08026d48 	.word	0x08026d48

0801045c <_ZN16gameoverViewBase11setupScreenEv>:

void gameoverViewBase::setupScreen()
{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]

}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void gameoverViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	3370      	adds	r3, #112	; 0x70
 801047e:	683a      	ldr	r2, [r7, #0]
 8010480:	429a      	cmp	r2, r3
 8010482:	d106      	bne.n	8010492 <_ZN16gameoverViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with no screen transition
        application().gotoPongScreenNoTransition();
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7ff fe36 	bl	80100f6 <_ZN16gameoverViewBase11applicationEv>
 801048a:	4603      	mov	r3, r0
 801048c:	4618      	mov	r0, r3
 801048e:	f7fc fccf 	bl	800ce30 <_ZN23FrontendApplicationBase26gotoPongScreenNoTransitionEv>
    }
}
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
	...

0801049c <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev>:
    View()
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f009 ffee 	bl	801a488 <_ZN8touchgfx6ScreenC1Ev>
 80104ac:	4a05      	ldr	r2, [pc, #20]	; (80104c4 <_ZN8touchgfx4ViewI17gameoverPresenterEC1Ev+0x28>)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2200      	movs	r2, #0
 80104b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4618      	mov	r0, r3
 80104bc:	3708      	adds	r7, #8
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop
 80104c4:	080280a8 	.word	0x080280a8

080104c8 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	4639      	mov	r1, r7
 80104d4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff fac6 	bl	800fa6c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80104e0:	4a08      	ldr	r2, [pc, #32]	; (8010504 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3308      	adds	r3, #8
 80104f0:	463a      	mov	r2, r7
 80104f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104f6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	08028090 	.word	0x08028090

08010508 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	4a05      	ldr	r2, [pc, #20]	; (8010528 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	601a      	str	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4618      	mov	r0, r3
 801051a:	f7ff fad7 	bl	800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4618      	mov	r0, r3
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	08028090 	.word	0x08028090

0801052c <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff ffe7 	bl	8010508 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801053a:	2110      	movs	r1, #16
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f015 f941 	bl	80257c4 <_ZdlPvj>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	4618      	mov	r0, r3
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	4a08      	ldr	r2, [pc, #32]	; (8010578 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	601a      	str	r2, [r3, #0]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	3334      	adds	r3, #52	; 0x34
 801055e:	4618      	mov	r0, r3
 8010560:	f7fb fc16 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4618      	mov	r0, r3
 8010568:	f7ff fb36 	bl	800fbd8 <_ZN8touchgfx6ButtonD1Ev>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4618      	mov	r0, r3
 8010570:	3708      	adds	r7, #8
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	0802a140 	.word	0x0802a140

0801057c <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7ff ffe1 	bl	801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801058a:	2148      	movs	r1, #72	; 0x48
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f015 f919 	bl	80257c4 <_ZdlPvj>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	4a05      	ldr	r2, [pc, #20]	; (80105bc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	601a      	str	r2, [r3, #0]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7ff fb79 	bl	800fca4 <_ZN8touchgfx8TextAreaD1Ev>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	4618      	mov	r0, r3
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	08029f80 	.word	0x08029f80

080105c0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7ff ffe7 	bl	801059c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80105ce:	2140      	movs	r1, #64	; 0x40
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f015 f8f7 	bl	80257c4 <_ZdlPvj>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4618      	mov	r0, r3
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	68d2      	ldr	r2, [r2, #12]
 80105f2:	1052      	asrs	r2, r2, #1
 80105f4:	1898      	adds	r0, r3, r2
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	f003 0301 	and.w	r3, r3, #1
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d102      	bne.n	8010608 <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	689b      	ldr	r3, [r3, #8]
 8010606:	e00a      	b.n	801061e <_ZN8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	68d2      	ldr	r2, [r2, #12]
 8010610:	1052      	asrs	r2, r2, #1
 8010612:	4413      	add	r3, r2
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	6892      	ldr	r2, [r2, #8]
 801061a:	4413      	add	r3, r2
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	6839      	ldr	r1, [r7, #0]
 8010620:	4798      	blx	r3
    }
 8010622:	bf00      	nop
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801062a:	b480      	push	{r7}
 801062c:	b083      	sub	sp, #12
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d010      	beq.n	801065c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d107      	bne.n	8010652 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	f003 0301 	and.w	r3, r3, #1
 801064a:	2b00      	cmp	r3, #0
 801064c:	d101      	bne.n	8010652 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801064e:	2301      	movs	r3, #1
 8010650:	e000      	b.n	8010654 <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010652:	2300      	movs	r3, #0
 8010654:	2b01      	cmp	r3, #1
 8010656:	d001      	beq.n	801065c <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010658:	2301      	movs	r3, #1
 801065a:	e000      	b.n	801065e <_ZNK8touchgfx8CallbackI16gameoverViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801065c:	2300      	movs	r3, #0
    }
 801065e:	4618      	mov	r0, r3
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 801066a:	b480      	push	{r7}
 801066c:	b083      	sub	sp, #12
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
 8010672:	460b      	mov	r3, r1
 8010674:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	78fa      	ldrb	r2, [r7, #3]
 801067a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801067e:	bf00      	nop
 8010680:	370c      	adds	r7, #12
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr
	...

0801068c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>:
class View : public Screen
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	4a05      	ldr	r2, [pc, #20]	; (80106ac <_ZN8touchgfx4ViewI14MusicPresenterED1Ev+0x20>)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	601a      	str	r2, [r3, #0]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4618      	mov	r0, r3
 801069e:	f7fe fea1 	bl	800f3e4 <_ZN8touchgfx6ScreenD1Ev>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4618      	mov	r0, r3
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	08028170 	.word	0x08028170

080106b0 <_ZN8touchgfx4ViewI14MusicPresenterED0Ev>:
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff ffe7 	bl	801068c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 80106be:	2140      	movs	r1, #64	; 0x40
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f015 f87f 	bl	80257c4 <_ZdlPvj>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <_ZN13MusicViewBaseD1Ev>:

class MusicViewBase : public touchgfx::View<MusicPresenter>
{
public:
    MusicViewBase();
    virtual ~MusicViewBase() {}
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	4a27      	ldr	r2, [pc, #156]	; (8010778 <_ZN13MusicViewBaseD1Ev+0xa8>)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	601a      	str	r2, [r3, #0]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80106e4:	4618      	mov	r0, r3
 80106e6:	f000 fd23 	bl	8011130 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff fa93 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7ff ff25 	bl	801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010708:	4618      	mov	r0, r3
 801070a:	f7ff ff1f 	bl	801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010714:	4618      	mov	r0, r3
 8010716:	f7ff fa81 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010720:	4618      	mov	r0, r3
 8010722:	f7ff fa7b 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff fa75 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010738:	4618      	mov	r0, r3
 801073a:	f7ff fa6f 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	33e8      	adds	r3, #232	; 0xe8
 8010742:	4618      	mov	r0, r3
 8010744:	f7ff ff2a 	bl	801059c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	33ac      	adds	r3, #172	; 0xac
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff fa65 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	3370      	adds	r3, #112	; 0x70
 8010756:	4618      	mov	r0, r3
 8010758:	f7ff faa4 	bl	800fca4 <_ZN8touchgfx8TextAreaD1Ev>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	3340      	adds	r3, #64	; 0x40
 8010760:	4618      	mov	r0, r3
 8010762:	f7ff fa17 	bl	800fb94 <_ZN8touchgfx3BoxD1Ev>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff ff8f 	bl	801068c <_ZN8touchgfx4ViewI14MusicPresenterED1Ev>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	0802810c 	.word	0x0802810c

0801077c <_ZN13MusicViewBaseD0Ev>:
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff ffa3 	bl	80106d0 <_ZN13MusicViewBaseD1Ev>
 801078a:	f44f 7146 	mov.w	r1, #792	; 0x318
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f015 f818 	bl	80257c4 <_ZdlPvj>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <_ZN13MusicViewBase11controlPlayEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void controlPlay()
 801079e:	b480      	push	{r7}
 80107a0:	b083      	sub	sp, #12
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107a6:	bf00      	nop
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <_ZN13MusicViewBase11controlStopEv>:

    virtual void controlStop()
 80107b2:	b480      	push	{r7}
 80107b4:	b083      	sub	sp, #12
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107ba:	bf00      	nop
 80107bc:	370c      	adds	r7, #12
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <_ZN13MusicViewBase11controlPrevEv>:

    virtual void controlPrev()
 80107c6:	b480      	push	{r7}
 80107c8:	b083      	sub	sp, #12
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107ce:	bf00      	nop
 80107d0:	370c      	adds	r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <_ZN13MusicViewBase11controlNextEv>:

    virtual void controlNext()
 80107da:	b480      	push	{r7}
 80107dc:	b083      	sub	sp, #12
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107e2:	bf00      	nop
 80107e4:	370c      	adds	r7, #12
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <_ZN13MusicViewBase17controlVolumeDownEv>:

    virtual void controlVolumeDown()
 80107ee:	b480      	push	{r7}
 80107f0:	b083      	sub	sp, #12
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 80107f6:	bf00      	nop
 80107f8:	370c      	adds	r7, #12
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr

08010802 <_ZN13MusicViewBase15controlVolumeUpEv>:

    virtual void controlVolumeUp()
 8010802:	b480      	push	{r7}
 8010804:	b083      	sub	sp, #12
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Music
    }
 801080a:	bf00      	nop
 801080c:	370c      	adds	r7, #12
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr

08010816 <_ZN13MusicViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8010816:	b580      	push	{r7, lr}
 8010818:	b082      	sub	sp, #8
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801081e:	f008 fe7d 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8010822:	4603      	mov	r3, r0
    }
 8010824:	4618      	mov	r0, r3
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <_ZN13MusicViewBaseC1Ev>:
#include <gui_generated/music_screen/MusicViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MusicViewBase::MusicViewBase() :
 801082c:	b590      	push	{r4, r7, lr}
 801082e:	b0b7      	sub	sp, #220	; 0xdc
 8010830:	af02      	add	r7, sp, #8
 8010832:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MusicViewBase::buttonCallbackHandler)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	4618      	mov	r0, r3
 8010838:	f000 fc44 	bl	80110c4 <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>
 801083c:	4a94      	ldr	r2, [pc, #592]	; (8010a90 <_ZN13MusicViewBaseC1Ev+0x264>)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	601a      	str	r2, [r3, #0]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	3340      	adds	r3, #64	; 0x40
 8010846:	4618      	mov	r0, r3
 8010848:	f7fe fe64 	bl	800f514 <_ZN8touchgfx3BoxC1Ev>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	3370      	adds	r3, #112	; 0x70
 8010850:	4618      	mov	r0, r3
 8010852:	f7fe ff0b 	bl	800f66c <_ZN8touchgfx8TextAreaC1Ev>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	33ac      	adds	r3, #172	; 0xac
 801085a:	4618      	mov	r0, r3
 801085c:	f007 fc4a 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	33e8      	adds	r3, #232	; 0xe8
 8010864:	4618      	mov	r0, r3
 8010866:	f7ff fbbd 	bl	800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010870:	4618      	mov	r0, r3
 8010872:	f007 fc3f 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801087c:	4618      	mov	r0, r3
 801087e:	f007 fc39 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010888:	4618      	mov	r0, r3
 801088a:	f007 fc33 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010894:	4618      	mov	r0, r3
 8010896:	f007 fc2d 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80108a0:	4618      	mov	r0, r3
 80108a2:	f007 fd87 	bl	80183b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80108ac:	4618      	mov	r0, r3
 80108ae:	f007 fd81 	bl	80183b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80108b8:	4618      	mov	r0, r3
 80108ba:	f007 fc1b 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80108c4:	4b73      	ldr	r3, [pc, #460]	; (8010a94 <_ZN13MusicViewBaseC1Ev+0x268>)
 80108c6:	617b      	str	r3, [r7, #20]
 80108c8:	2300      	movs	r3, #0
 80108ca:	61bb      	str	r3, [r7, #24]
 80108cc:	f107 0314 	add.w	r3, r7, #20
 80108d0:	cb0c      	ldmia	r3, {r2, r3}
 80108d2:	6879      	ldr	r1, [r7, #4]
 80108d4:	f000 fc0c 	bl	80110f0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80108de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80108e8:	2200      	movs	r2, #0
 80108ea:	2100      	movs	r1, #0
 80108ec:	f7fb fdee 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80108f6:	22ff      	movs	r2, #255	; 0xff
 80108f8:	21ff      	movs	r1, #255	; 0xff
 80108fa:	20ff      	movs	r0, #255	; 0xff
 80108fc:	f7fe ff5a 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010900:	4603      	mov	r3, r0
 8010902:	4619      	mov	r1, r3
 8010904:	4620      	mov	r0, r4
 8010906:	f7fe fe2d 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(116, 0);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	3370      	adds	r3, #112	; 0x70
 801090e:	2200      	movs	r2, #0
 8010910:	2174      	movs	r1, #116	; 0x74
 8010912:	4618      	mov	r0, r3
 8010914:	f7fb fe3f 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801091e:	2200      	movs	r2, #0
 8010920:	2100      	movs	r1, #0
 8010922:	2000      	movs	r0, #0
 8010924:	f7fe ff46 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010928:	4603      	mov	r3, r0
 801092a:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 801092e:	613b      	str	r3, [r7, #16]
        this->color = color;
 8010930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010934:	693a      	ldr	r2, [r7, #16]
 8010936:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	3370      	adds	r3, #112	; 0x70
 801093c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010940:	2300      	movs	r3, #0
 8010942:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8010946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801094a:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 801094e:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010956:	f107 031c 	add.w	r3, r7, #28
 801095a:	2108      	movs	r1, #8
 801095c:	4618      	mov	r0, r3
 801095e:	f7fe fe6f 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 8010962:	f107 031c 	add.w	r3, r7, #28
 8010966:	4619      	mov	r1, r3
 8010968:	4620      	mov	r0, r4
 801096a:	f007 f939 	bl	8017be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 801096e:	f107 031c 	add.w	r3, r7, #28
 8010972:	4618      	mov	r0, r3
 8010974:	f7fb fa0c 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>

    Play_Button.setXY(48, 212);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	33ac      	adds	r3, #172	; 0xac
 801097c:	22d4      	movs	r2, #212	; 0xd4
 801097e:	2130      	movs	r1, #48	; 0x30
 8010980:	4618      	mov	r0, r3
 8010982:	f7fb fe08 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Play_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 801098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010990:	2104      	movs	r1, #4
 8010992:	4618      	mov	r0, r3
 8010994:	f7fe fd16 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801099c:	2105      	movs	r1, #5
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fe fd10 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80109a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80109a8:	210c      	movs	r1, #12
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fe fd0a 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80109b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80109b4:	210c      	movs	r1, #12
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fe fd04 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80109bc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80109c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109c4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80109c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	4603      	mov	r3, r0
 80109d0:	4620      	mov	r0, r4
 80109d2:	f007 faeb 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Play_Button.setIconXY(19, 14);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	33ac      	adds	r3, #172	; 0xac
 80109da:	220e      	movs	r2, #14
 80109dc:	2113      	movs	r1, #19
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fe fdec 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Play_Button.setAction(buttonCallback);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80109f0:	4619      	mov	r1, r3
 80109f2:	4610      	mov	r0, r2
 80109f4:	f7fe fd5d 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    MusicTextArea.setPosition(60, 109, 379, 54);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80109fe:	2336      	movs	r3, #54	; 0x36
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	f240 137b 	movw	r3, #379	; 0x17b
 8010a06:	226d      	movs	r2, #109	; 0x6d
 8010a08:	213c      	movs	r1, #60	; 0x3c
 8010a0a:	f7fb fd5f 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    MusicTextArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8010a14:	2200      	movs	r2, #0
 8010a16:	2100      	movs	r1, #0
 8010a18:	2000      	movs	r0, #0
 8010a1a:	f7fe fecb 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8010a24:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8010a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010a2a:	68fa      	ldr	r2, [r7, #12]
 8010a2c:	631a      	str	r2, [r3, #48]	; 0x30
    MusicTextArea.setLinespacing(0);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	33e8      	adds	r3, #232	; 0xe8
 8010a32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a36:	2300      	movs	r3, #0
 8010a38:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        linespace = space;
 8010a3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a40:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8010a44:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(MusicTextAreaBuffer, MUSICTEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 8010a4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a50:	2116      	movs	r1, #22
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fe fdf4 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 8010a58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010a60:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <_ZN13MusicViewBaseC1Ev+0x26c>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d105      	bne.n	8010a74 <_ZN13MusicViewBaseC1Ev+0x248>
 8010a68:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <_ZN13MusicViewBaseC1Ev+0x270>)
 8010a6a:	4a0d      	ldr	r2, [pc, #52]	; (8010aa0 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010a6c:	21b1      	movs	r1, #177	; 0xb1
 8010a6e:	480d      	ldr	r0, [pc, #52]	; (8010aa4 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010a70:	f014 fed4 	bl	802581c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a78:	889a      	ldrh	r2, [r3, #4]
 8010a7a:	4b0b      	ldr	r3, [pc, #44]	; (8010aa8 <_ZN13MusicViewBaseC1Ev+0x27c>)
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d316      	bcc.n	8010ab0 <_ZN13MusicViewBaseC1Ev+0x284>
 8010a82:	4b0a      	ldr	r3, [pc, #40]	; (8010aac <_ZN13MusicViewBaseC1Ev+0x280>)
 8010a84:	4a06      	ldr	r2, [pc, #24]	; (8010aa0 <_ZN13MusicViewBaseC1Ev+0x274>)
 8010a86:	21b2      	movs	r1, #178	; 0xb2
 8010a88:	4806      	ldr	r0, [pc, #24]	; (8010aa4 <_ZN13MusicViewBaseC1Ev+0x278>)
 8010a8a:	f014 fec7 	bl	802581c <__assert_func>
 8010a8e:	bf00      	nop
 8010a90:	0802810c 	.word	0x0802810c
 8010a94:	08010fe5 	.word	0x08010fe5
 8010a98:	2000b400 	.word	0x2000b400
 8010a9c:	08026d4c 	.word	0x08026d4c
 8010aa0:	0802819c 	.word	0x0802819c
 8010aa4:	08026d90 	.word	0x08026d90
 8010aa8:	2000b404 	.word	0x2000b404
 8010aac:	08026dd4 	.word	0x08026dd4
        return texts->getText(typedTextId);
 8010ab0:	4be8      	ldr	r3, [pc, #928]	; (8010e54 <_ZN13MusicViewBaseC1Ev+0x628>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f001 ff19 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	4ae5      	ldr	r2, [pc, #916]	; (8010e58 <_ZN13MusicViewBaseC1Ev+0x62c>)
 8010ac2:	2111      	movs	r1, #17
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f00a ff83 	bl	801b9d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fb f95e 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    MusicTextArea.setWildcard(MusicTextAreaBuffer);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	f7ff fa94 	bl	8010010 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MusicTextArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8010aee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010af2:	210f      	movs	r1, #15
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7fe fda3 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 8010afa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010afe:	4619      	mov	r1, r3
 8010b00:	4620      	mov	r0, r4
 8010b02:	f007 f86d 	bl	8017be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8010b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fb f940 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>

    Pause_Button.setXY(48, 212);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010b16:	22d4      	movs	r2, #212	; 0xd4
 8010b18:	2130      	movs	r1, #48	; 0x30
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fb fd3b 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Pause_Button.setVisible(false);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010b26:	2100      	movs	r1, #0
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7ff fd9e 	bl	801066a <_ZN8touchgfx8Drawable10setVisibleEb>
    Pause_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_PAUSE_32_ID));
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f503 7494 	add.w	r4, r3, #296	; 0x128
 8010b34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b38:	2104      	movs	r1, #4
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fe fc42 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b44:	2105      	movs	r1, #5
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fe fc3c 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010b4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010b50:	210b      	movs	r1, #11
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fe fc36 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010b58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b5c:	210b      	movs	r1, #11
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe fc30 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010b64:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010b68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010b6c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8010b70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	4603      	mov	r3, r0
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f007 fa17 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Pause_Button.setIconXY(17, 14);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010b84:	220e      	movs	r2, #14
 8010b86:	2111      	movs	r1, #17
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7fe fd17 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Pause_Button.setAction(buttonCallback);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	f7fe fc88 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Stop_Button.setXY(116, 212);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010ba8:	22d4      	movs	r2, #212	; 0xd4
 8010baa:	2174      	movs	r1, #116	; 0x74
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fb fcf2 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Stop_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_STOP_32_ID));
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8010bb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010bbc:	2104      	movs	r1, #4
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fe fc00 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010bc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010bc8:	2105      	movs	r1, #5
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fe fbfa 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010bd4:	2106      	movs	r1, #6
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fe fbf4 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010bdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010be0:	2106      	movs	r1, #6
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fe fbee 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010be8:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8010bec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010bf0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010bf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010bf8:	9300      	str	r3, [sp, #0]
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f007 f9d5 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Stop_Button.setIconXY(15, 15);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010c08:	220f      	movs	r2, #15
 8010c0a:	210f      	movs	r1, #15
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fe fcd5 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Stop_Button.setAction(buttonCallback);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010c1e:	4619      	mov	r1, r3
 8010c20:	4610      	mov	r0, r2
 8010c22:	f7fe fc46 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Prev_Button.setXY(188, 212);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010c2c:	22d4      	movs	r2, #212	; 0xd4
 8010c2e:	21bc      	movs	r1, #188	; 0xbc
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fb fcb0 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Prev_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID));
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8010c3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010c40:	2104      	movs	r1, #4
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fe fbbe 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010c48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c4c:	2105      	movs	r1, #5
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fe fbb8 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010c54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010c58:	2109      	movs	r1, #9
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe fbb2 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010c60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010c64:	2109      	movs	r1, #9
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fe fbac 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010c6c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010c70:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8010c74:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010c78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010c7c:	9300      	str	r3, [sp, #0]
 8010c7e:	4603      	mov	r3, r0
 8010c80:	4620      	mov	r0, r4
 8010c82:	f007 f993 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Prev_Button.setIconXY(14, 15);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010c8c:	220f      	movs	r2, #15
 8010c8e:	210e      	movs	r1, #14
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7fe fc93 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Prev_Button.setAction(buttonCallback);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	4610      	mov	r0, r2
 8010ca6:	f7fe fc04 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Next_Button.setXY(256, 212);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010cb0:	22d4      	movs	r2, #212	; 0xd4
 8010cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fb fc6d 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Next_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID));
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8010cc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010cc6:	2104      	movs	r1, #4
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe fb7b 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010cce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010cd2:	2105      	movs	r1, #5
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7fe fb75 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010cda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010cde:	210a      	movs	r1, #10
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fe fb6f 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010ce6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010cea:	210a      	movs	r1, #10
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fe fb69 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010cf2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8010cf6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010cfa:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8010cfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	4603      	mov	r3, r0
 8010d06:	4620      	mov	r0, r4
 8010d08:	f007 f950 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Next_Button.setIconXY(14, 15);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010d12:	220f      	movs	r2, #15
 8010d14:	210e      	movs	r1, #14
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fe fc50 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Next_Button.setAction(buttonCallback);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010d28:	4619      	mov	r1, r3
 8010d2a:	4610      	mov	r0, r2
 8010d2c:	f7fe fbc1 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolUp_Button.setXY(390, 212);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010d36:	22d4      	movs	r2, #212	; 0xd4
 8010d38:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fb fc2a 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    VolUp_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010d4c:	2104      	movs	r1, #4
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fe fb38 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010d54:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010d58:	2105      	movs	r1, #5
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7fe fb32 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010d60:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8010d64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010d68:	4619      	mov	r1, r3
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f006 ff72 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolUp_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID31));
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d76:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d7a:	2110      	movs	r1, #16
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fe fc5f 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 8010d82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d86:	4619      	mov	r1, r3
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f7ff f863 	bl	800fe54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010d8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fa fffc 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    VolUp_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010d9e:	22ff      	movs	r2, #255	; 0xff
 8010da0:	21ff      	movs	r1, #255	; 0xff
 8010da2:	20ff      	movs	r0, #255	; 0xff
 8010da4:	f7fe fd06 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010da8:	4603      	mov	r3, r0
 8010daa:	4619      	mov	r1, r3
 8010dac:	4620      	mov	r0, r4
 8010dae:	f7ff f863 	bl	800fe78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolUp_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010db8:	22ff      	movs	r2, #255	; 0xff
 8010dba:	21ff      	movs	r1, #255	; 0xff
 8010dbc:	20ff      	movs	r0, #255	; 0xff
 8010dbe:	f7fe fcf9 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f7ff f864 	bl	800fe94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolUp_Button.setAction(buttonCallback);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010dd8:	4619      	mov	r1, r3
 8010dda:	4610      	mov	r0, r2
 8010ddc:	f7fe fb69 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VolDown_Button.setXY(323, 212);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010de6:	22d4      	movs	r2, #212	; 0xd4
 8010de8:	f240 1143 	movw	r1, #323	; 0x143
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fb fbd2 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    VolDown_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID));
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010df8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010dfc:	2104      	movs	r1, #4
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fe fae0 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010e04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010e08:	2105      	movs	r1, #5
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7fe fada 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010e10:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8010e14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010e18:	4619      	mov	r1, r3
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f006 ff1a 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    VolDown_Button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID32));
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010e26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010e2a:	2111      	movs	r1, #17
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7fe fc07 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 8010e32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010e36:	4619      	mov	r1, r3
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f7ff f80b 	bl	800fe54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8010e3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fa ffa4 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    VolDown_Button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010e4e:	22ff      	movs	r2, #255	; 0xff
 8010e50:	21ff      	movs	r1, #255	; 0xff
 8010e52:	e003      	b.n	8010e5c <_ZN13MusicViewBaseC1Ev+0x630>
 8010e54:	2000b40c 	.word	0x2000b40c
 8010e58:	08026eac 	.word	0x08026eac
 8010e5c:	20ff      	movs	r0, #255	; 0xff
 8010e5e:	f7fe fca9 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e62:	4603      	mov	r3, r0
 8010e64:	4619      	mov	r1, r3
 8010e66:	4620      	mov	r0, r4
 8010e68:	f7ff f806 	bl	800fe78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    VolDown_Button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8010e72:	22ff      	movs	r2, #255	; 0xff
 8010e74:	21ff      	movs	r1, #255	; 0xff
 8010e76:	20ff      	movs	r0, #255	; 0xff
 8010e78:	f7fe fc9c 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	4619      	mov	r1, r3
 8010e80:	4620      	mov	r0, r4
 8010e82:	f7ff f807 	bl	800fe94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    VolDown_Button.setAction(buttonCallback);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010e92:	4619      	mov	r1, r3
 8010e94:	4610      	mov	r0, r2
 8010e96:	f7fe fb0c 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Back_Button.setXY(0, 0);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	2100      	movs	r1, #0
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fb fb76 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f503 742a 	add.w	r4, r3, #680	; 0x2a8
 8010eb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010eb4:	2102      	movs	r1, #2
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fe fa84 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010ebc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010ec0:	2103      	movs	r1, #3
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fe fa7e 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010ec8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010ecc:	2108      	movs	r1, #8
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe fa78 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010ed4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010ed8:	2108      	movs	r1, #8
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fe fa72 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8010ee0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8010ee4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8010ee8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8010eec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f007 f859 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010f00:	220f      	movs	r2, #15
 8010f02:	2113      	movs	r1, #19
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fe fb59 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f503 722a 	add.w	r2, r3, #680	; 0x2a8
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8010f16:	4619      	mov	r1, r3
 8010f18:	4610      	mov	r0, r2
 8010f1a:	f7fe faca 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	3340      	adds	r3, #64	; 0x40
 8010f24:	4619      	mov	r1, r3
 8010f26:	4610      	mov	r0, r2
 8010f28:	f7fe fab4 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	3370      	adds	r3, #112	; 0x70
 8010f32:	4619      	mov	r1, r3
 8010f34:	4610      	mov	r0, r2
 8010f36:	f7fe faad 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Play_Button);
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	33ac      	adds	r3, #172	; 0xac
 8010f40:	4619      	mov	r1, r3
 8010f42:	4610      	mov	r0, r2
 8010f44:	f7fe faa6 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MusicTextArea);
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	33e8      	adds	r3, #232	; 0xe8
 8010f4e:	4619      	mov	r1, r3
 8010f50:	4610      	mov	r0, r2
 8010f52:	f7fe fa9f 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pause_Button);
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010f5e:	4619      	mov	r1, r3
 8010f60:	4610      	mov	r0, r2
 8010f62:	f7fe fa97 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Stop_Button);
 8010f66:	687a      	ldr	r2, [r7, #4]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010f6e:	4619      	mov	r1, r3
 8010f70:	4610      	mov	r0, r2
 8010f72:	f7fe fa8f 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Prev_Button);
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010f7e:	4619      	mov	r1, r3
 8010f80:	4610      	mov	r0, r2
 8010f82:	f7fe fa87 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Next_Button);
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010f8e:	4619      	mov	r1, r3
 8010f90:	4610      	mov	r0, r2
 8010f92:	f7fe fa7f 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolUp_Button);
 8010f96:	687a      	ldr	r2, [r7, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	4610      	mov	r0, r2
 8010fa2:	f7fe fa77 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VolDown_Button);
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	f7fe fa6f 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	4610      	mov	r0, r2
 8010fc2:	f7fe fa67 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	4618      	mov	r0, r3
 8010fca:	37d4      	adds	r7, #212	; 0xd4
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd90      	pop	{r4, r7, pc}

08010fd0 <_ZN13MusicViewBase11setupScreenEv>:

void MusicViewBase::setupScreen()
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]

}
 8010fd8:	bf00      	nop
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MusicViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
    if (&src == &Play_Button)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	33ac      	adds	r3, #172	; 0xac
 8010ff2:	683a      	ldr	r2, [r7, #0]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d106      	bne.n	8011006 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //control_play
        //When Play_Button clicked call virtual function
        //Call controlPlay
        controlPlay();
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	332c      	adds	r3, #44	; 0x2c
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	4798      	blx	r3
        //back_to_menu
        //When Back_Button clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
    }
}
 8011004:	e05a      	b.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Pause_Button)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801100c:	683a      	ldr	r2, [r7, #0]
 801100e:	429a      	cmp	r2, r3
 8011010:	d106      	bne.n	8011020 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        controlPlay();
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	332c      	adds	r3, #44	; 0x2c
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	4798      	blx	r3
}
 801101e:	e04d      	b.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Stop_Button)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d106      	bne.n	801103a <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
        controlStop();
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	3330      	adds	r3, #48	; 0x30
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	4798      	blx	r3
}
 8011038:	e040      	b.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Prev_Button)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011040:	683a      	ldr	r2, [r7, #0]
 8011042:	429a      	cmp	r2, r3
 8011044:	d106      	bne.n	8011054 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x70>
        controlPrev();
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	3334      	adds	r3, #52	; 0x34
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	4798      	blx	r3
}
 8011052:	e033      	b.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Next_Button)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801105a:	683a      	ldr	r2, [r7, #0]
 801105c:	429a      	cmp	r2, r3
 801105e:	d106      	bne.n	801106e <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
        controlNext();
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	3338      	adds	r3, #56	; 0x38
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	4798      	blx	r3
}
 801106c:	e026      	b.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &VolUp_Button)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011074:	683a      	ldr	r2, [r7, #0]
 8011076:	429a      	cmp	r2, r3
 8011078:	d106      	bne.n	8011088 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa4>
        controlVolumeUp();
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	3340      	adds	r3, #64	; 0x40
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	4798      	blx	r3
}
 8011086:	e019      	b.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &VolDown_Button)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801108e:	683a      	ldr	r2, [r7, #0]
 8011090:	429a      	cmp	r2, r3
 8011092:	d106      	bne.n	80110a2 <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbe>
        controlVolumeDown();
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	333c      	adds	r3, #60	; 0x3c
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	4798      	blx	r3
}
 80110a0:	e00c      	b.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
    else if (&src == &Back_Button)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80110a8:	683a      	ldr	r2, [r7, #0]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d106      	bne.n	80110bc <_ZN13MusicViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
        application().gotoscreenScreenNoTransition();
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f7ff fbb1 	bl	8010816 <_ZN13MusicViewBase11applicationEv>
 80110b4:	4603      	mov	r3, r0
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fb fd16 	bl	800cae8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
}
 80110bc:	bf00      	nop
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev>:
    View()
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	4618      	mov	r0, r3
 80110d0:	f009 f9da 	bl	801a488 <_ZN8touchgfx6ScreenC1Ev>
 80110d4:	4a05      	ldr	r2, [pc, #20]	; (80110ec <_ZN8touchgfx4ViewI14MusicPresenterEC1Ev+0x28>)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	601a      	str	r2, [r3, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2200      	movs	r2, #0
 80110de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	4618      	mov	r0, r3
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	08028170 	.word	0x08028170

080110f0 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	4639      	mov	r1, r7
 80110fc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4618      	mov	r0, r3
 8011104:	f7fe fcb2 	bl	800fa6c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011108:	4a08      	ldr	r2, [pc, #32]	; (801112c <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	68ba      	ldr	r2, [r7, #8]
 8011112:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3308      	adds	r3, #8
 8011118:	463a      	mov	r2, r7
 801111a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801111e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	4618      	mov	r0, r3
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}
 801112c:	08028158 	.word	0x08028158

08011130 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	4a05      	ldr	r2, [pc, #20]	; (8011150 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	601a      	str	r2, [r3, #0]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	4618      	mov	r0, r3
 8011142:	f7fe fcc3 	bl	800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	4618      	mov	r0, r3
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	08028158 	.word	0x08028158

08011154 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7ff ffe7 	bl	8011130 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011162:	2110      	movs	r1, #16
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f014 fb2d 	bl	80257c4 <_ZdlPvj>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4618      	mov	r0, r3
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	68d2      	ldr	r2, [r2, #12]
 8011186:	1052      	asrs	r2, r2, #1
 8011188:	1898      	adds	r0, r3, r2
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	2b00      	cmp	r3, #0
 8011194:	d102      	bne.n	801119c <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	689b      	ldr	r3, [r3, #8]
 801119a:	e00a      	b.n	80111b2 <_ZN8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	68d2      	ldr	r2, [r2, #12]
 80111a4:	1052      	asrs	r2, r2, #1
 80111a6:	4413      	add	r3, r2
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	6892      	ldr	r2, [r2, #8]
 80111ae:	4413      	add	r3, r2
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	6839      	ldr	r1, [r7, #0]
 80111b4:	4798      	blx	r3
    }
 80111b6:	bf00      	nop
 80111b8:	3708      	adds	r7, #8
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80111be:	b480      	push	{r7}
 80111c0:	b083      	sub	sp, #12
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d010      	beq.n	80111f0 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	689b      	ldr	r3, [r3, #8]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d107      	bne.n	80111e6 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	f003 0301 	and.w	r3, r3, #1
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d101      	bne.n	80111e6 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80111e2:	2301      	movs	r3, #1
 80111e4:	e000      	b.n	80111e8 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80111e6:	2300      	movs	r3, #0
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d001      	beq.n	80111f0 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80111ec:	2301      	movs	r3, #1
 80111ee:	e000      	b.n	80111f2 <_ZNK8touchgfx8CallbackI13MusicViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80111f0:	2300      	movs	r3, #0
    }
 80111f2:	4618      	mov	r0, r3
 80111f4:	370c      	adds	r7, #12
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr

080111fe <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 80111fe:	b480      	push	{r7}
 8011200:	b083      	sub	sp, #12
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801120c:	b29a      	uxth	r2, r3
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011214:	b29b      	uxth	r3, r3
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	b29b      	uxth	r3, r3
 801121a:	b21b      	sxth	r3, r3
    }
 801121c:	4618      	mov	r0, r3
 801121e:	370c      	adds	r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 8011228:	b480      	push	{r7}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011236:	b29a      	uxth	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801123e:	b29b      	uxth	r3, r3
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	b29b      	uxth	r3, r3
 8011244:	b21b      	sxth	r3, r3
    }
 8011246:	4618      	mov	r0, r3
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr
	...

0801126c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 8011274:	4a0a      	ldr	r2, [pc, #40]	; (80112a0 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	601a      	str	r2, [r3, #0]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2200      	movs	r2, #0
 801127e:	809a      	strh	r2, [r3, #4]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	80da      	strh	r2, [r3, #6]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	22ff      	movs	r2, #255	; 0xff
 801128a:	721a      	strb	r2, [r3, #8]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	22ff      	movs	r2, #255	; 0xff
 8011290:	725a      	strb	r2, [r3, #9]
    {
    }
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	4618      	mov	r0, r3
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	08028344 	.word	0x08028344

080112a4 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80112a4:	b480      	push	{r7}
 80112a6:	b083      	sub	sp, #12
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
    {
 80112ac:	4a04      	ldr	r2, [pc, #16]	; (80112c0 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	601a      	str	r2, [r3, #0]
    }
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	4618      	mov	r0, r3
 80112b6:	370c      	adds	r7, #12
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	08028344 	.word	0x08028344

080112c4 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
    }
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff ffe9 	bl	80112a4 <_ZN8touchgfx15AbstractPainterD1Ev>
 80112d2:	210c      	movs	r1, #12
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f014 fa75 	bl	80257c4 <_ZdlPvj>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	460b      	mov	r3, r1
 80112ee:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	78fa      	ldrb	r2, [r7, #3]
 80112f4:	725a      	strb	r2, [r3, #9]
    }
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr

08011302 <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 8011302:	b480      	push	{r7}
 8011304:	b083      	sub	sp, #12
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	7a5b      	ldrb	r3, [r3, #9]
    }
 801130e:	4618      	mov	r0, r3
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 801131a:	b480      	push	{r7}
 801131c:	b083      	sub	sp, #12
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
 8011322:	6039      	str	r1, [r7, #0]
            : v(i)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	683a      	ldr	r2, [r7, #0]
 8011328:	601a      	str	r2, [r3, #0]
        {
        }
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	4618      	mov	r0, r3
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr

08011338 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	460b      	mov	r3, r1
 8011342:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	78fa      	ldrb	r2, [r7, #3]
 8011348:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 801134c:	bf00      	nop
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 8011366:	4618      	mov	r0, r3
 8011368:	370c      	adds	r7, #12
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
	...

08011374 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff ff74 	bl	801126c <_ZN8touchgfx15AbstractPainterC1Ev>
 8011384:	4a27      	ldr	r2, [pc, #156]	; (8011424 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	601a      	str	r2, [r3, #0]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2200      	movs	r2, #0
 801138e:	60da      	str	r2, [r3, #12]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	611a      	str	r2, [r3, #16]
 8011396:	2301      	movs	r3, #1
 8011398:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801139a:	f7fb f9e1 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 801139e:	4602      	mov	r2, r0
 80113a0:	6813      	ldr	r3, [r2, #0]
 80113a2:	3320      	adds	r3, #32
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4610      	mov	r0, r2
 80113a8:	4798      	blx	r3
 80113aa:	4603      	mov	r3, r0
 80113ac:	461a      	mov	r2, r3
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	4293      	cmp	r3, r2
 80113b2:	bf0c      	ite	eq
 80113b4:	2301      	moveq	r3, #1
 80113b6:	2300      	movne	r3, #0
 80113b8:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80113ba:	f7fb f9c5 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 80113be:	4603      	mov	r3, r0
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7ff ff46 	bl	8011252 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	bf14      	ite	ne
 80113cc:	2301      	movne	r3, #1
 80113ce:	2300      	moveq	r3, #0
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d016      	beq.n	8011404 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80113d6:	f7fb f9b7 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 80113da:	4603      	mov	r3, r0
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff ff38 	bl	8011252 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80113e2:	4602      	mov	r2, r0
 80113e4:	6813      	ldr	r3, [r2, #0]
 80113e6:	3320      	adds	r3, #32
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4610      	mov	r0, r2
 80113ec:	4798      	blx	r3
 80113ee:	4603      	mov	r3, r0
 80113f0:	461a      	mov	r2, r3
 80113f2:	7bfb      	ldrb	r3, [r7, #15]
 80113f4:	4293      	cmp	r3, r2
 80113f6:	bf0c      	ite	eq
 80113f8:	2301      	moveq	r3, #1
 80113fa:	2300      	movne	r3, #0
 80113fc:	b2da      	uxtb	r2, r3
 80113fe:	7bbb      	ldrb	r3, [r7, #14]
 8011400:	4313      	orrs	r3, r2
 8011402:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8011404:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8011406:	2b00      	cmp	r3, #0
 8011408:	d105      	bne.n	8011416 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 801140a:	4b07      	ldr	r3, [pc, #28]	; (8011428 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 801140c:	4a07      	ldr	r2, [pc, #28]	; (801142c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 801140e:	212b      	movs	r1, #43	; 0x2b
 8011410:	4807      	ldr	r0, [pc, #28]	; (8011430 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8011412:	f014 fa03 	bl	802581c <__assert_func>
 8011416:	bf00      	nop
    }
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	0802990c 	.word	0x0802990c
 8011428:	08026f34 	.word	0x08026f34
 801142c:	08028358 	.word	0x08028358
 8011430:	08026f94 	.word	0x08026f94

08011434 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	4a05      	ldr	r2, [pc, #20]	; (8011454 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	601a      	str	r2, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4618      	mov	r0, r3
 8011446:	f7ff ff2d 	bl	80112a4 <_ZN8touchgfx15AbstractPainterD1Ev>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	0802990c 	.word	0x0802990c

08011458 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff ffe7 	bl	8011434 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011466:	2114      	movs	r1, #20
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f014 f9ab 	bl	80257c4 <_ZdlPvj>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4618      	mov	r0, r3
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	4613      	mov	r3, r2
 8011484:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff ff73 	bl	8011374 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 801148e:	4a09      	ldr	r2, [pc, #36]	; (80114b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 8011494:	68b9      	ldr	r1, [r7, #8]
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f000 f80e 	bl	80114b8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	79fa      	ldrb	r2, [r7, #7]
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff ff1e 	bl	80112e4 <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	08029a6c 	.word	0x08029a6c

080114b8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 80114c6:	f7fb f94b 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80114ca:	4602      	mov	r2, r0
 80114cc:	6813      	ldr	r3, [r2, #0]
 80114ce:	332c      	adds	r3, #44	; 0x2c
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	6979      	ldr	r1, [r7, #20]
 80114d4:	4610      	mov	r0, r2
 80114d6:	4798      	blx	r3
 80114d8:	4603      	mov	r3, r0
 80114da:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	751a      	strb	r2, [r3, #20]
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 80114e4:	f7fb f93c 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80114e8:	4602      	mov	r2, r0
 80114ea:	6813      	ldr	r3, [r2, #0]
 80114ec:	3330      	adds	r3, #48	; 0x30
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6939      	ldr	r1, [r7, #16]
 80114f2:	4610      	mov	r0, r2
 80114f4:	4798      	blx	r3
 80114f6:	4603      	mov	r3, r0
 80114f8:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	755a      	strb	r2, [r3, #21]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 8011502:	f7fb f92d 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8011506:	4602      	mov	r2, r0
 8011508:	6813      	ldr	r3, [r2, #0]
 801150a:	3334      	adds	r3, #52	; 0x34
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	68f9      	ldr	r1, [r7, #12]
 8011510:	4610      	mov	r0, r2
 8011512:	4798      	blx	r3
 8011514:	4603      	mov	r3, r0
 8011516:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	759a      	strb	r2, [r3, #22]
    }
 801151c:	bf00      	nop
 801151e:	3718      	adds	r7, #24
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>:
class View : public Screen
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	4a05      	ldr	r2, [pc, #20]	; (8011544 <_ZN8touchgfx4ViewI13PongPresenterED1Ev+0x20>)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	601a      	str	r2, [r3, #0]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	f7fd ff55 	bl	800f3e4 <_ZN8touchgfx6ScreenD1Ev>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4618      	mov	r0, r3
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	08028310 	.word	0x08028310

08011548 <_ZN8touchgfx4ViewI13PongPresenterED0Ev>:
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7ff ffe7 	bl	8011524 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 8011556:	2140      	movs	r1, #64	; 0x40
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f014 f933 	bl	80257c4 <_ZdlPvj>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4618      	mov	r0, r3
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <_ZN12PongViewBaseD1Ev>:

class PongViewBase : public touchgfx::View<PongPresenter>
{
public:
    PongViewBase();
    virtual ~PongViewBase() {}
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	4a1b      	ldr	r2, [pc, #108]	; (80115e0 <_ZN12PongViewBaseD1Ev+0x78>)
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	601a      	str	r2, [r3, #0]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801157c:	4618      	mov	r0, r3
 801157e:	f000 fb99 	bl	8011cb4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011588:	4618      	mov	r0, r3
 801158a:	f7fe fb25 	bl	800fbd8 <_ZN8touchgfx6ButtonD1Ev>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011594:	4618      	mov	r0, r3
 8011596:	f7fe fb41 	bl	800fc1c <_ZN8touchgfx14ButtonWithIconD1Ev>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fe fffb 	bl	801059c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	33ec      	adds	r3, #236	; 0xec
 80115aa:	4618      	mov	r0, r3
 80115ac:	f000 fba4 	bl	8011cf8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	33d4      	adds	r3, #212	; 0xd4
 80115b4:	4618      	mov	r0, r3
 80115b6:	f000 fbe3 	bl	8011d80 <_ZN8touchgfx13PainterRGB888D1Ev>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	336c      	adds	r3, #108	; 0x6c
 80115be:	4618      	mov	r0, r3
 80115c0:	f000 fbbc 	bl	8011d3c <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	3340      	adds	r3, #64	; 0x40
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fe fb49 	bl	800fc60 <_ZN8touchgfx5ImageD1Ev>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7ff ffa7 	bl	8011524 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4618      	mov	r0, r3
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	080281d4 	.word	0x080281d4

080115e4 <_ZN12PongViewBaseD0Ev>:
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7ff ffbb 	bl	8011568 <_ZN12PongViewBaseD1Ev>
 80115f2:	f641 6124 	movw	r1, #7716	; 0x1e24
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f014 f8e4 	bl	80257c4 <_ZdlPvj>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	4618      	mov	r0, r3
 8011600:	3708      	adds	r7, #8
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}

08011606 <_ZN12PongViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8011606:	b580      	push	{r7, lr}
 8011608:	b082      	sub	sp, #8
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801160e:	f007 ff85 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8011612:	4603      	mov	r3, r0
    }
 8011614:	4618      	mov	r0, r3
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <_ZN12PongViewBaseC1Ev>:
#include <gui_generated/pong_screen/PongViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

PongViewBase::PongViewBase() :
 801161c:	b590      	push	{r4, r7, lr}
 801161e:	b099      	sub	sp, #100	; 0x64
 8011620:	af02      	add	r7, sp, #8
 8011622:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &PongViewBase::buttonCallbackHandler)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4618      	mov	r0, r3
 8011628:	f000 fa62 	bl	8011af0 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>
 801162c:	4a7e      	ldr	r2, [pc, #504]	; (8011828 <_ZN12PongViewBaseC1Ev+0x20c>)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	601a      	str	r2, [r3, #0]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011638:	f107 030c 	add.w	r3, r7, #12
 801163c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011640:	4618      	mov	r0, r3
 8011642:	f7fd febf 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8011646:	f107 030c 	add.w	r3, r7, #12
 801164a:	4619      	mov	r1, r3
 801164c:	4620      	mov	r0, r4
 801164e:	f7fd ffcd 	bl	800f5ec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	336c      	adds	r3, #108	; 0x6c
 8011656:	4618      	mov	r0, r3
 8011658:	f000 faa4 	bl	8011ba4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 8011662:	f107 0310 	add.w	r3, r7, #16
 8011666:	2100      	movs	r1, #0
 8011668:	4618      	mov	r0, r3
 801166a:	f7fd fe9c 	bl	800f3a6 <_ZN8touchgfx9colortypeC1Em>
 801166e:	22ff      	movs	r2, #255	; 0xff
 8011670:	6939      	ldr	r1, [r7, #16]
 8011672:	4620      	mov	r0, r4
 8011674:	f7ff ff00 	bl	8011478 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	33ec      	adds	r3, #236	; 0xec
 801167c:	4618      	mov	r0, r3
 801167e:	f000 fab3 	bl	8011be8 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011688:	4618      	mov	r0, r3
 801168a:	f7fe fcab 	bl	800ffe4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011694:	4618      	mov	r0, r3
 8011696:	f006 fd2d 	bl	80180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fe fba3 	bl	800fdec <_ZN8touchgfx6ButtonC1Ev>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 80116ac:	4b5f      	ldr	r3, [pc, #380]	; (801182c <_ZN12PongViewBaseC1Ev+0x210>)
 80116ae:	617b      	str	r3, [r7, #20]
 80116b0:	2300      	movs	r3, #0
 80116b2:	61bb      	str	r3, [r7, #24]
 80116b4:	f107 0314 	add.w	r3, r7, #20
 80116b8:	cb0c      	ldmia	r3, {r2, r3}
 80116ba:	6879      	ldr	r1, [r7, #4]
 80116bc:	f000 faac 	bl	8011c18 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80116c6:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80116ca:	4618      	mov	r0, r3
 80116cc:	f006 fe9e 	bl	801840c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    image1.setXY(0, 0);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	3340      	adds	r3, #64	; 0x40
 80116d4:	2200      	movs	r2, #0
 80116d6:	2100      	movs	r1, #0
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fa ff5c 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_S_ID));
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80116e4:	f107 031c 	add.w	r3, r7, #28
 80116e8:	210d      	movs	r1, #13
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7fd fe6a 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80116f0:	f107 031c 	add.w	r3, r7, #28
 80116f4:	4619      	mov	r1, r3
 80116f6:	4620      	mov	r0, r4
 80116f8:	f006 fd20 	bl	801813c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    ball.setPosition(200, 85, 80, 80);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8011702:	2350      	movs	r3, #80	; 0x50
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	2350      	movs	r3, #80	; 0x50
 8011708:	2255      	movs	r2, #85	; 0x55
 801170a:	21c8      	movs	r1, #200	; 0xc8
 801170c:	f7fa fede 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    ball.setCenter(40, 40);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	336c      	adds	r3, #108	; 0x6c
 8011714:	2228      	movs	r2, #40	; 0x28
 8011716:	2128      	movs	r1, #40	; 0x28
 8011718:	4618      	mov	r0, r3
 801171a:	f000 f99d 	bl	8011a58 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    ball.setRadius(20);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	336c      	adds	r3, #108	; 0x6c
 8011722:	2114      	movs	r1, #20
 8011724:	4618      	mov	r0, r3
 8011726:	f000 fa97 	bl	8011c58 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    ball.setLineWidth(0);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	336c      	adds	r3, #108	; 0x6c
 801172e:	2100      	movs	r1, #0
 8011730:	4618      	mov	r0, r3
 8011732:	f000 faa8 	bl	8011c86 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    ball.setArc(0, 360);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	336c      	adds	r3, #108	; 0x6c
 801173a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801173e:	2100      	movs	r1, #0
 8011740:	4618      	mov	r0, r3
 8011742:	f000 f9af 	bl	8011aa4 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    ballPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 255, 141));
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801174c:	228d      	movs	r2, #141	; 0x8d
 801174e:	21ff      	movs	r1, #255	; 0xff
 8011750:	2006      	movs	r0, #6
 8011752:	f7fe f82f 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011756:	4603      	mov	r3, r0
 8011758:	4619      	mov	r1, r3
 801175a:	4620      	mov	r0, r4
 801175c:	f7ff feac 	bl	80114b8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    ball.setPainter(ballPainter);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	33d4      	adds	r3, #212	; 0xd4
 801176a:	4619      	mov	r1, r3
 801176c:	4610      	mov	r0, r2
 801176e:	f005 feaf 	bl	80174d0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    paddle1.setPosition(66, 212, 134, 29);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8011778:	231d      	movs	r3, #29
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	2386      	movs	r3, #134	; 0x86
 801177e:	22d4      	movs	r2, #212	; 0xd4
 8011780:	2142      	movs	r1, #66	; 0x42
 8011782:	f7fa fea3 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    paddle1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 171, 6));
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801178c:	2206      	movs	r2, #6
 801178e:	21ab      	movs	r1, #171	; 0xab
 8011790:	20ff      	movs	r0, #255	; 0xff
 8011792:	f7fe f80f 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011796:	4603      	mov	r3, r0
 8011798:	4619      	mov	r1, r3
 801179a:	4620      	mov	r0, r4
 801179c:	f7fd fee2 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    score.setXY(363, 0);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80117a6:	2200      	movs	r2, #0
 80117a8:	f240 116b 	movw	r1, #363	; 0x16b
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7fa fef2 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(18, 252, 62));
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80117b8:	223e      	movs	r2, #62	; 0x3e
 80117ba:	21fc      	movs	r1, #252	; 0xfc
 80117bc:	2012      	movs	r0, #18
 80117be:	f7fd fff9 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117c2:	4603      	mov	r3, r0
 80117c4:	64bc      	str	r4, [r7, #72]	; 0x48
 80117c6:	60bb      	str	r3, [r7, #8]
        this->color = color;
 80117c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80117d4:	653b      	str	r3, [r7, #80]	; 0x50
 80117d6:	2300      	movs	r3, #0
 80117d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        linespace = space;
 80117dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80117e2:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80117ea:	f107 0320 	add.w	r3, r7, #32
 80117ee:	210e      	movs	r1, #14
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7fd ff25 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 80117f6:	f107 0320 	add.w	r3, r7, #32
 80117fa:	657b      	str	r3, [r7, #84]	; 0x54
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80117fc:	4b0c      	ldr	r3, [pc, #48]	; (8011830 <_ZN12PongViewBaseC1Ev+0x214>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d105      	bne.n	8011810 <_ZN12PongViewBaseC1Ev+0x1f4>
 8011804:	4b0b      	ldr	r3, [pc, #44]	; (8011834 <_ZN12PongViewBaseC1Ev+0x218>)
 8011806:	4a0c      	ldr	r2, [pc, #48]	; (8011838 <_ZN12PongViewBaseC1Ev+0x21c>)
 8011808:	21b1      	movs	r1, #177	; 0xb1
 801180a:	480c      	ldr	r0, [pc, #48]	; (801183c <_ZN12PongViewBaseC1Ev+0x220>)
 801180c:	f014 f806 	bl	802581c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011812:	889a      	ldrh	r2, [r3, #4]
 8011814:	4b0a      	ldr	r3, [pc, #40]	; (8011840 <_ZN12PongViewBaseC1Ev+0x224>)
 8011816:	881b      	ldrh	r3, [r3, #0]
 8011818:	429a      	cmp	r2, r3
 801181a:	d315      	bcc.n	8011848 <_ZN12PongViewBaseC1Ev+0x22c>
 801181c:	4b09      	ldr	r3, [pc, #36]	; (8011844 <_ZN12PongViewBaseC1Ev+0x228>)
 801181e:	4a06      	ldr	r2, [pc, #24]	; (8011838 <_ZN12PongViewBaseC1Ev+0x21c>)
 8011820:	21b2      	movs	r1, #178	; 0xb2
 8011822:	4806      	ldr	r0, [pc, #24]	; (801183c <_ZN12PongViewBaseC1Ev+0x220>)
 8011824:	f013 fffa 	bl	802581c <__assert_func>
 8011828:	080281d4 	.word	0x080281d4
 801182c:	08011a11 	.word	0x08011a11
 8011830:	2000b400 	.word	0x2000b400
 8011834:	08026ff4 	.word	0x08026ff4
 8011838:	08028394 	.word	0x08028394
 801183c:	08027038 	.word	0x08027038
 8011840:	2000b404 	.word	0x2000b404
 8011844:	0802707c 	.word	0x0802707c
        return texts->getText(typedTextId);
 8011848:	4b6a      	ldr	r3, [pc, #424]	; (80119f4 <_ZN12PongViewBaseC1Ev+0x3d8>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801184e:	4611      	mov	r1, r2
 8011850:	4618      	mov	r0, r3
 8011852:	f001 f84d 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8011856:	4603      	mov	r3, r0
 8011858:	4a67      	ldr	r2, [pc, #412]	; (80119f8 <_ZN12PongViewBaseC1Ev+0x3dc>)
 801185a:	2114      	movs	r1, #20
 801185c:	4620      	mov	r0, r4
 801185e:	f00a f8b7 	bl	801b9d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011862:	f107 0320 	add.w	r3, r7, #32
 8011866:	4618      	mov	r0, r3
 8011868:	f7fa fa92 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011878:	4619      	mov	r1, r3
 801187a:	4610      	mov	r0, r2
 801187c:	f7fe fbc8 	bl	8010010 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011886:	4618      	mov	r0, r3
 8011888:	f006 f980 	bl	8017b8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8011892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011896:	210d      	movs	r1, #13
 8011898:	4618      	mov	r0, r3
 801189a:	f7fd fed1 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 801189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80118a2:	4619      	mov	r1, r3
 80118a4:	4620      	mov	r0, r4
 80118a6:	f006 f99b 	bl	8017be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80118aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7fa fa6e 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>

    Back_Button.setXY(0, 0);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80118ba:	2200      	movs	r2, #0
 80118bc:	2100      	movs	r1, #0
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fa fe69 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    Back_Button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_32_ID));
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 80118ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80118ce:	2102      	movs	r1, #2
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7fd fd77 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80118d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80118da:	2103      	movs	r1, #3
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fd fd71 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80118e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80118e6:	2108      	movs	r1, #8
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7fd fd6b 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80118ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118f2:	2108      	movs	r1, #8
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fd fd65 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80118fa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80118fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011902:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011906:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	4603      	mov	r3, r0
 801190e:	4620      	mov	r0, r4
 8011910:	f006 fb4c 	bl	8017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Back_Button.setIconXY(19, 15);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801191a:	220f      	movs	r2, #15
 801191c:	2113      	movs	r1, #19
 801191e:	4618      	mov	r0, r3
 8011920:	f7fd fe4c 	bl	800f5bc <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Back_Button.setAction(buttonCallback);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011930:	4619      	mov	r1, r3
 8011932:	4610      	mov	r0, r2
 8011934:	f7fd fdbd 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    button1.setXY(636, -35);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 801193e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8011942:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8011946:	4618      	mov	r0, r3
 8011948:	f7fa fe25 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 8011952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011956:	2100      	movs	r1, #0
 8011958:	4618      	mov	r0, r3
 801195a:	f7fd fd33 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 801195e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011962:	2101      	movs	r1, #1
 8011964:	4618      	mov	r0, r3
 8011966:	f7fd fd2d 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 801196a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801196e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011972:	4619      	mov	r1, r3
 8011974:	4620      	mov	r0, r4
 8011976:	f006 f96d 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f7fd fd92 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(image1);
 801198e:	687a      	ldr	r2, [r7, #4]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	3340      	adds	r3, #64	; 0x40
 8011994:	4619      	mov	r1, r3
 8011996:	4610      	mov	r0, r2
 8011998:	f7fd fd7c 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ball);
 801199c:	687a      	ldr	r2, [r7, #4]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	336c      	adds	r3, #108	; 0x6c
 80119a2:	4619      	mov	r1, r3
 80119a4:	4610      	mov	r0, r2
 80119a6:	f7fd fd75 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(paddle1);
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	33ec      	adds	r3, #236	; 0xec
 80119b0:	4619      	mov	r1, r3
 80119b2:	4610      	mov	r0, r2
 80119b4:	f7fd fd6e 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80119c0:	4619      	mov	r1, r3
 80119c2:	4610      	mov	r0, r2
 80119c4:	f7fd fd66 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Back_Button);
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80119d0:	4619      	mov	r1, r3
 80119d2:	4610      	mov	r0, r2
 80119d4:	f7fd fd5e 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80119e0:	4619      	mov	r1, r3
 80119e2:	4610      	mov	r0, r2
 80119e4:	f7fd fd56 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	4618      	mov	r0, r3
 80119ec:	375c      	adds	r7, #92	; 0x5c
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd90      	pop	{r4, r7, pc}
 80119f2:	bf00      	nop
 80119f4:	2000b40c 	.word	0x2000b40c
 80119f8:	080270d0 	.word	0x080270d0

080119fc <_ZN12PongViewBase11setupScreenEv>:

void PongViewBase::setupScreen()
{
 80119fc:	b480      	push	{r7}
 80119fe:	b083      	sub	sp, #12
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]

}
 8011a04:	bf00      	nop
 8011a06:	370c      	adds	r7, #12
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr

08011a10 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void PongViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
    if (&src == &Back_Button)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011a20:	683a      	ldr	r2, [r7, #0]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d107      	bne.n	8011a36 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //back_to_main_screen
        //When Back_Button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenSlideTransitionEast();
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7ff fded 	bl	8011606 <_ZN12PongViewBase11applicationEv>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7fb f8a0 	bl	800cb74 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>
        //over
        //When button1 clicked change screen to gameover
        //Go to gameover with no screen transition
        application().gotogameoverScreenNoTransition();
    }
}
 8011a34:	e00c      	b.n	8011a50 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
    else if (&src == &button1)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8011a3c:	683a      	ldr	r2, [r7, #0]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d106      	bne.n	8011a50 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x40>
        application().gotogameoverScreenNoTransition();
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7ff fddf 	bl	8011606 <_ZN12PongViewBase11applicationEv>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fb f964 	bl	800cd18 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b088      	sub	sp, #32
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	015a      	lsls	r2, r3, #5
 8011a6c:	f107 0314 	add.w	r3, r7, #20
 8011a70:	4611      	mov	r1, r2
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7ff fc51 	bl	801131a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	61fb      	str	r3, [r7, #28]
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	015a      	lsls	r2, r3, #5
 8011a88:	f107 0310 	add.w	r3, r7, #16
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7ff fc43 	bl	801131a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8011a9c:	bf00      	nop
 8011a9e:	3720      	adds	r7, #32
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b088      	sub	sp, #32
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	61bb      	str	r3, [r7, #24]
 8011ab4:	69bb      	ldr	r3, [r7, #24]
 8011ab6:	015a      	lsls	r2, r3, #5
 8011ab8:	f107 0314 	add.w	r3, r7, #20
 8011abc:	4611      	mov	r1, r2
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7ff fc2b 	bl	801131a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	61fb      	str	r3, [r7, #28]
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	015a      	lsls	r2, r3, #5
 8011ad4:	f107 0310 	add.w	r3, r7, #16
 8011ad8:	4611      	mov	r1, r2
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7ff fc1d 	bl	801131a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8011ae8:	bf00      	nop
 8011aea:	3720      	adds	r7, #32
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>:
    View()
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f008 fcc4 	bl	801a488 <_ZN8touchgfx6ScreenC1Ev>
 8011b00:	4a05      	ldr	r2, [pc, #20]	; (8011b18 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev+0x28>)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	601a      	str	r2, [r3, #0]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3708      	adds	r7, #8
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	08028310 	.word	0x08028310

08011b1c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	4a05      	ldr	r2, [pc, #20]	; (8011b3c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	601a      	str	r2, [r3, #0]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fa ff5d 	bl	800c9ec <_ZN8touchgfx6WidgetD1Ev>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	4618      	mov	r0, r3
 8011b36:	3708      	adds	r7, #8
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	08029af8 	.word	0x08029af8

08011b40 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7ff ffe7 	bl	8011b1c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011b4e:	2130      	movs	r1, #48	; 0x30
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f013 fe37 	bl	80257c4 <_ZdlPvj>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}

08011b60 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	4a05      	ldr	r2, [pc, #20]	; (8011b80 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	601a      	str	r2, [r3, #0]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7ff ffd3 	bl	8011b1c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	080299ec 	.word	0x080299ec

08011b84 <_ZN8touchgfx6CircleD0Ev>:
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f7ff ffe7 	bl	8011b60 <_ZN8touchgfx6CircleD1Ev>
 8011b92:	214c      	movs	r1, #76	; 0x4c
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f013 fe15 	bl	80257c4 <_ZdlPvj>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f005 f868 	bl	8016c84 <_ZN8touchgfx6CircleC1Ev>
 8011bb4:	4a0b      	ldr	r2, [pc, #44]	; (8011be4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3708      	adds	r7, #8
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	08028288 	.word	0x08028288

08011be8 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
        : T()
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fd fc8e 	bl	800f514 <_ZN8touchgfx3BoxC1Ev>
 8011bf8:	4a06      	ldr	r2, [pc, #24]	; (8011c14 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev+0x2c>)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2101      	movs	r1, #1
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fe f8bb 	bl	800fd7e <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	08028220 	.word	0x08028220

08011c18 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	4639      	mov	r1, r7
 8011c24:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fd ff1e 	bl	800fa6c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011c30:	4a08      	ldr	r2, [pc, #32]	; (8011c54 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	68ba      	ldr	r2, [r7, #8]
 8011c3a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	3308      	adds	r3, #8
 8011c40:	463a      	mov	r2, r7
 8011c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c46:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	08028208 	.word	0x08028208

08011c58 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	60fb      	str	r3, [r7, #12]
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	015a      	lsls	r2, r3, #5
 8011c6a:	f107 0308 	add.w	r3, r7, #8
 8011c6e:	4611      	mov	r1, r2
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7ff fb52 	bl	801131a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8011c7e:	bf00      	nop
 8011c80:	3710      	adds	r7, #16
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b084      	sub	sp, #16
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
 8011c8e:	6039      	str	r1, [r7, #0]
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	60fb      	str	r3, [r7, #12]
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	015a      	lsls	r2, r3, #5
 8011c98:	f107 0308 	add.w	r3, r7, #8
 8011c9c:	4611      	mov	r1, r2
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7ff fb3b 	bl	801131a <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8011cac:	bf00      	nop
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	4a05      	ldr	r2, [pc, #20]	; (8011cd4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fd ff01 	bl	800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	08028208 	.word	0x08028208

08011cd8 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7ff ffe7 	bl	8011cb4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011ce6:	2110      	movs	r1, #16
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f013 fd6b 	bl	80257c4 <_ZdlPvj>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>:
class Draggable : public T
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	4a05      	ldr	r2, [pc, #20]	; (8011d18 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev+0x20>)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fd ff43 	bl	800fb94 <_ZN8touchgfx3BoxD1Ev>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	08028220 	.word	0x08028220

08011d1c <_ZN8touchgfx9DraggableINS_3BoxEED0Ev>:
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff ffe7 	bl	8011cf8 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8011d2a:	2130      	movs	r1, #48	; 0x30
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f013 fd49 	bl	80257c4 <_ZdlPvj>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	4618      	mov	r0, r3
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
class MoveAnimator : public T
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	4a05      	ldr	r2, [pc, #20]	; (8011d5c <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	601a      	str	r2, [r3, #0]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7ff ff07 	bl	8011b60 <_ZN8touchgfx6CircleD1Ev>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	4618      	mov	r0, r3
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	08028288 	.word	0x08028288

08011d60 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7ff ffe7 	bl	8011d3c <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8011d6e:	2168      	movs	r1, #104	; 0x68
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f013 fd27 	bl	80257c4 <_ZdlPvj>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	4a05      	ldr	r2, [pc, #20]	; (8011da0 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	601a      	str	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7ff fb4f 	bl	8011434 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3708      	adds	r7, #8
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	08029a6c 	.word	0x08029a6c

08011da4 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7ff ffe7 	bl	8011d80 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011db2:	2118      	movs	r1, #24
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f013 fd05 	bl	80257c4 <_ZdlPvj>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3708      	adds	r7, #8
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	68d2      	ldr	r2, [r2, #12]
 8011dd6:	1052      	asrs	r2, r2, #1
 8011dd8:	1898      	adds	r0, r3, r2
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	f003 0301 	and.w	r3, r3, #1
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d102      	bne.n	8011dec <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	689b      	ldr	r3, [r3, #8]
 8011dea:	e00a      	b.n	8011e02 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	68d2      	ldr	r2, [r2, #12]
 8011df4:	1052      	asrs	r2, r2, #1
 8011df6:	4413      	add	r3, r2
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	687a      	ldr	r2, [r7, #4]
 8011dfc:	6892      	ldr	r2, [r2, #8]
 8011dfe:	4413      	add	r3, r2
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	6839      	ldr	r1, [r7, #0]
 8011e04:	4798      	blx	r3
    }
 8011e06:	bf00      	nop
 8011e08:	3708      	adds	r7, #8
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011e0e:	b480      	push	{r7}
 8011e10:	b083      	sub	sp, #12
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d010      	beq.n	8011e40 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d107      	bne.n	8011e36 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	f003 0301 	and.w	r3, r3, #1
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d101      	bne.n	8011e36 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011e32:	2301      	movs	r3, #1
 8011e34:	e000      	b.n	8011e38 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011e36:	2300      	movs	r3, #0
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d001      	beq.n	8011e40 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e000      	b.n	8011e42 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011e40:	2300      	movs	r3, #0
    }
 8011e42:	4618      	mov	r0, r3
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <_ZN8touchgfx9DraggableINS_3BoxEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  evt The drag event.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8011e4e:	b5b0      	push	{r4, r5, r7, lr}
 8011e50:	b082      	sub	sp, #8
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(evt);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6839      	ldr	r1, [r7, #0]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7fa fbf6 	bl	800c64e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(evt.getDeltaX(), evt.getDeltaY());
 8011e62:	687c      	ldr	r4, [r7, #4]
 8011e64:	6838      	ldr	r0, [r7, #0]
 8011e66:	f7ff f9ca 	bl	80111fe <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	461d      	mov	r5, r3
 8011e6e:	6838      	ldr	r0, [r7, #0]
 8011e70:	f7ff f9da 	bl	8011228 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 8011e74:	4603      	mov	r3, r0
 8011e76:	461a      	mov	r2, r3
 8011e78:	4629      	mov	r1, r5
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f007 ffa0 	bl	8019dc0 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 8011e80:	bf00      	nop
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bdb0      	pop	{r4, r5, r7, pc}

08011e88 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
        }
    }

protected:
    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fa fbe6 	bl	800c664 <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f000 f821 	bl	8011ee0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 8011e9e:	bf00      	nop
 8011ea0:	3708      	adds	r7, #8
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}

08011ea6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 8011ea6:	b480      	push	{r7}
 8011ea8:	b083      	sub	sp, #12
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
 8011eae:	460b      	mov	r3, r1
 8011eb0:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	887a      	ldrh	r2, [r7, #2]
 8011eb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 8011eba:	bf00      	nop
 8011ebc:	370c      	adds	r7, #12
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr

08011ec6 <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 8011ec6:	b480      	push	{r7}
 8011ec8:	b083      	sub	sp, #12
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	370c      	adds	r7, #12
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr

08011ee0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:

    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 8011ee0:	b590      	push	{r4, r7, lr}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f000 80ad 	beq.w	801204e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d208      	bcs.n	8011f16 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 8011f14:	e09b      	b.n	801204e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f24:	4619      	mov	r1, r3
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f2c:	440b      	add	r3, r1
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d850      	bhi.n	8011fd4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011f38:	461a      	mov	r2, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f40:	1ad3      	subs	r3, r2, r3
 8011f42:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	b298      	uxth	r0, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	b21a      	sxth	r2, r3
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f68:	2100      	movs	r1, #0
 8011f6a:	47a0      	blx	r4
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	b298      	uxth	r0, r3
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	1ad3      	subs	r3, r2, r3
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	b21a      	sxth	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f94:	2100      	movs	r1, #0
 8011f96:	47a0      	blx	r4
 8011f98:	4603      	mov	r3, r0
 8011f9a:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	897b      	ldrh	r3, [r7, #10]
 8011fa8:	4413      	add	r3, r2
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	b219      	sxth	r1, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8011fb4:	b29a      	uxth	r2, r3
 8011fb6:	893b      	ldrh	r3, [r7, #8]
 8011fb8:	4413      	add	r3, r2
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	b21b      	sxth	r3, r3
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	f7fa fb74 	bl	800c6ac <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011fca:	3301      	adds	r3, #1
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011fda:	461a      	mov	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011fea:	440b      	add	r3, r1
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d92e      	bls.n	801204e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 8012000:	f007 fa8c 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8012004:	4602      	mov	r2, r0
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	4619      	mov	r1, r3
 801200a:	4610      	mov	r0, r2
 801200c:	f007 fa8c 	bl	8019528 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00d      	beq.n	8012034 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	330c      	adds	r3, #12
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	4610      	mov	r0, r2
 8012028:	4798      	blx	r3
 801202a:	4603      	mov	r3, r0
 801202c:	2b00      	cmp	r3, #0
 801202e:	d001      	beq.n	8012034 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8012030:	2301      	movs	r3, #1
 8012032:	e000      	b.n	8012036 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 8012034:	2300      	movs	r3, #0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d009      	beq.n	801204e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	3308      	adds	r3, #8
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	6879      	ldr	r1, [r7, #4]
 801204a:	4610      	mov	r0, r2
 801204c:	4798      	blx	r3
    }
 801204e:	bf00      	nop
 8012050:	3714      	adds	r7, #20
 8012052:	46bd      	mov	sp, r7
 8012054:	bd90      	pop	{r4, r7, pc}
	...

08012058 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	4a05      	ldr	r2, [pc, #20]	; (8012078 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	4618      	mov	r0, r3
 801206a:	f7fd f9bb 	bl	800f3e4 <_ZN8touchgfx6ScreenD1Ev>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	4618      	mov	r0, r3
 8012072:	3708      	adds	r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	08028418 	.word	0x08028418

0801207c <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 801207c:	b580      	push	{r7, lr}
 801207e:	b082      	sub	sp, #8
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7ff ffe7 	bl	8012058 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801208a:	2140      	movs	r1, #64	; 0x40
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f013 fb99 	bl	80257c4 <_ZdlPvj>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	4618      	mov	r0, r3
 8012096:	3708      	adds	r7, #8
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	4a13      	ldr	r2, [pc, #76]	; (80120f4 <_ZN14screenViewBaseD1Ev+0x58>)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	601a      	str	r2, [r3, #0]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80120b0:	4618      	mov	r0, r3
 80120b2:	f000 fa1d 	bl	80124f0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80120bc:	4618      	mov	r0, r3
 80120be:	f7fe fa45 	bl	801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	33b8      	adds	r3, #184	; 0xb8
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fe fa40 	bl	801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	3370      	adds	r3, #112	; 0x70
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7fe fa3b 	bl	801054c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	3340      	adds	r3, #64	; 0x40
 80120da:	4618      	mov	r0, r3
 80120dc:	f7fd fd5a 	bl	800fb94 <_ZN8touchgfx3BoxD1Ev>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7ff ffb8 	bl	8012058 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	4618      	mov	r0, r3
 80120ec:	3708      	adds	r7, #8
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	080283cc 	.word	0x080283cc

080120f8 <_ZN14screenViewBaseD0Ev>:
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff ffcb 	bl	801209c <_ZN14screenViewBaseD1Ev>
 8012106:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f013 fb5a 	bl	80257c4 <_ZdlPvj>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	3708      	adds	r7, #8
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801211a:	b580      	push	{r7, lr}
 801211c:	b082      	sub	sp, #8
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8012122:	f007 f9fb 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8012126:	4603      	mov	r3, r0
    }
 8012128:	4618      	mov	r0, r3
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 8012130:	b590      	push	{r4, r7, lr}
 8012132:	b093      	sub	sp, #76	; 0x4c
 8012134:	af02      	add	r7, sp, #8
 8012136:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	4618      	mov	r0, r3
 801213c:	f000 f9a2 	bl	8012484 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8012140:	4ab1      	ldr	r2, [pc, #708]	; (8012408 <_ZN14screenViewBaseC1Ev+0x2d8>)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	601a      	str	r2, [r3, #0]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	3340      	adds	r3, #64	; 0x40
 801214a:	4618      	mov	r0, r3
 801214c:	f7fd f9e2 	bl	800f514 <_ZN8touchgfx3BoxC1Ev>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	3370      	adds	r3, #112	; 0x70
 8012154:	4618      	mov	r0, r3
 8012156:	f006 f92d 	bl	80183b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	33b8      	adds	r3, #184	; 0xb8
 801215e:	4618      	mov	r0, r3
 8012160:	f006 f928 	bl	80183b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801216a:	4618      	mov	r0, r3
 801216c:	f006 f922 	bl	80183b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 8012176:	4ba5      	ldr	r3, [pc, #660]	; (801240c <_ZN14screenViewBaseC1Ev+0x2dc>)
 8012178:	60bb      	str	r3, [r7, #8]
 801217a:	2300      	movs	r3, #0
 801217c:	60fb      	str	r3, [r7, #12]
 801217e:	f107 0308 	add.w	r3, r7, #8
 8012182:	cb0c      	ldmia	r3, {r2, r3}
 8012184:	6879      	ldr	r1, [r7, #4]
 8012186:	f000 f993 	bl	80124b0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012190:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012194:	9300      	str	r3, [sp, #0]
 8012196:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801219a:	2200      	movs	r2, #0
 801219c:	2100      	movs	r1, #0
 801219e:	f7fa f995 	bl	800c4cc <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80121a8:	22ff      	movs	r2, #255	; 0xff
 80121aa:	21ff      	movs	r1, #255	; 0xff
 80121ac:	20ff      	movs	r0, #255	; 0xff
 80121ae:	f7fd fb01 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80121b2:	4603      	mov	r3, r0
 80121b4:	4619      	mov	r1, r3
 80121b6:	4620      	mov	r0, r4
 80121b8:	f7fd f9d4 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 18);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	3370      	adds	r3, #112	; 0x70
 80121c0:	2212      	movs	r2, #18
 80121c2:	219b      	movs	r1, #155	; 0x9b
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7fa f9e6 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121d0:	f107 0310 	add.w	r3, r7, #16
 80121d4:	2100      	movs	r1, #0
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7fd f8f4 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80121dc:	f107 0314 	add.w	r3, r7, #20
 80121e0:	2101      	movs	r1, #1
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7fd f8ee 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 80121e8:	f107 0214 	add.w	r2, r7, #20
 80121ec:	f107 0310 	add.w	r3, r7, #16
 80121f0:	4619      	mov	r1, r3
 80121f2:	4620      	mov	r0, r4
 80121f4:	f005 fd2e 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80121fe:	f107 0318 	add.w	r3, r7, #24
 8012202:	2100      	movs	r1, #0
 8012204:	4618      	mov	r0, r3
 8012206:	f7fd fa1b 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 801220a:	f107 0318 	add.w	r3, r7, #24
 801220e:	4619      	mov	r1, r3
 8012210:	4620      	mov	r0, r4
 8012212:	f7fd fe1f 	bl	800fe54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8012216:	f107 0318 	add.w	r3, r7, #24
 801221a:	4618      	mov	r0, r3
 801221c:	f7f9 fdb8 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012226:	22ff      	movs	r2, #255	; 0xff
 8012228:	21ff      	movs	r1, #255	; 0xff
 801222a:	20ff      	movs	r0, #255	; 0xff
 801222c:	f7fd fac2 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012230:	4603      	mov	r3, r0
 8012232:	4619      	mov	r1, r3
 8012234:	4620      	mov	r0, r4
 8012236:	f7fd fe1f 	bl	800fe78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012240:	22ff      	movs	r2, #255	; 0xff
 8012242:	21ff      	movs	r1, #255	; 0xff
 8012244:	20ff      	movs	r0, #255	; 0xff
 8012246:	f7fd fab5 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801224a:	4603      	mov	r3, r0
 801224c:	4619      	mov	r1, r3
 801224e:	4620      	mov	r0, r4
 8012250:	f7fd fe20 	bl	800fe94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012260:	4619      	mov	r1, r3
 8012262:	4610      	mov	r0, r2
 8012264:	f7fd f925 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 106);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	33b8      	adds	r3, #184	; 0xb8
 801226c:	226a      	movs	r2, #106	; 0x6a
 801226e:	219b      	movs	r1, #155	; 0x9b
 8012270:	4618      	mov	r0, r3
 8012272:	f7fa f990 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801227c:	f107 0320 	add.w	r3, r7, #32
 8012280:	2100      	movs	r1, #0
 8012282:	4618      	mov	r0, r3
 8012284:	f7fd f89e 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8012288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801228c:	2101      	movs	r1, #1
 801228e:	4618      	mov	r0, r3
 8012290:	f7fd f898 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8012294:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012298:	f107 0320 	add.w	r3, r7, #32
 801229c:	4619      	mov	r1, r3
 801229e:	4620      	mov	r0, r4
 80122a0:	f005 fcd8 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80122aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122ae:	2101      	movs	r1, #1
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fd f9c5 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 80122b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122ba:	4619      	mov	r1, r3
 80122bc:	4620      	mov	r0, r4
 80122be:	f7fd fdc9 	bl	800fe54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80122c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7f9 fd62 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80122d2:	22ff      	movs	r2, #255	; 0xff
 80122d4:	21ff      	movs	r1, #255	; 0xff
 80122d6:	20ff      	movs	r0, #255	; 0xff
 80122d8:	f7fd fa6c 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122dc:	4603      	mov	r3, r0
 80122de:	4619      	mov	r1, r3
 80122e0:	4620      	mov	r0, r4
 80122e2:	f7fd fdc9 	bl	800fe78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80122ec:	22ff      	movs	r2, #255	; 0xff
 80122ee:	21ff      	movs	r1, #255	; 0xff
 80122f0:	20ff      	movs	r0, #255	; 0xff
 80122f2:	f7fd fa5f 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122f6:	4603      	mov	r3, r0
 80122f8:	4619      	mov	r1, r3
 80122fa:	4620      	mov	r0, r4
 80122fc:	f7fd fdca 	bl	800fe94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801230c:	4619      	mov	r1, r3
 801230e:	4610      	mov	r0, r2
 8012310:	f7fd f8cf 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 197);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801231a:	22c5      	movs	r2, #197	; 0xc5
 801231c:	219b      	movs	r1, #155	; 0x9b
 801231e:	4618      	mov	r0, r3
 8012320:	f7fa f939 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f503 7480 	add.w	r4, r3, #256	; 0x100
 801232a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801232e:	2100      	movs	r1, #0
 8012330:	4618      	mov	r0, r3
 8012332:	f7fd f847 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8012336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801233a:	2101      	movs	r1, #1
 801233c:	4618      	mov	r0, r3
 801233e:	f7fd f841 	bl	800f3c4 <_ZN8touchgfx6BitmapC1Et>
 8012342:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801234a:	4619      	mov	r1, r3
 801234c:	4620      	mov	r0, r4
 801234e:	f005 fc81 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012358:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801235c:	2102      	movs	r1, #2
 801235e:	4618      	mov	r0, r3
 8012360:	f7fd f96e 	bl	800f640 <_ZN8touchgfx9TypedTextC1Et>
 8012364:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012368:	4619      	mov	r1, r3
 801236a:	4620      	mov	r0, r4
 801236c:	f7fd fd72 	bl	800fe54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8012370:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012374:	4618      	mov	r0, r3
 8012376:	f7f9 fd0b 	bl	800bd90 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8012380:	22ff      	movs	r2, #255	; 0xff
 8012382:	21ff      	movs	r1, #255	; 0xff
 8012384:	20ff      	movs	r0, #255	; 0xff
 8012386:	f7fd fa15 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801238a:	4603      	mov	r3, r0
 801238c:	4619      	mov	r1, r3
 801238e:	4620      	mov	r0, r4
 8012390:	f7fd fd72 	bl	800fe78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f503 7480 	add.w	r4, r3, #256	; 0x100
 801239a:	22ff      	movs	r2, #255	; 0xff
 801239c:	21ff      	movs	r1, #255	; 0xff
 801239e:	20ff      	movs	r0, #255	; 0xff
 80123a0:	f7fd fa08 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80123a4:	4603      	mov	r3, r0
 80123a6:	4619      	mov	r1, r3
 80123a8:	4620      	mov	r0, r4
 80123aa:	f7fd fd73 	bl	800fe94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80123ba:	4619      	mov	r1, r3
 80123bc:	4610      	mov	r0, r2
 80123be:	f7fd f878 	bl	800f4b2 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	3340      	adds	r3, #64	; 0x40
 80123c8:	4619      	mov	r1, r3
 80123ca:	4610      	mov	r0, r2
 80123cc:	f7fd f862 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	3370      	adds	r3, #112	; 0x70
 80123d6:	4619      	mov	r1, r3
 80123d8:	4610      	mov	r0, r2
 80123da:	f7fd f85b 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	33b8      	adds	r3, #184	; 0xb8
 80123e4:	4619      	mov	r1, r3
 80123e6:	4610      	mov	r0, r2
 80123e8:	f7fd f854 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80123f4:	4619      	mov	r1, r3
 80123f6:	4610      	mov	r0, r2
 80123f8:	f7fd f84c 	bl	800f494 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	4618      	mov	r0, r3
 8012400:	3744      	adds	r7, #68	; 0x44
 8012402:	46bd      	mov	sp, r7
 8012404:	bd90      	pop	{r4, r7, pc}
 8012406:	bf00      	nop
 8012408:	080283cc 	.word	0x080283cc
 801240c:	08012425 	.word	0x08012425

08012410 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]

}
 8012418:	bf00      	nop
 801241a:	370c      	adds	r7, #12
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	3370      	adds	r3, #112	; 0x70
 8012432:	683a      	ldr	r2, [r7, #0]
 8012434:	429a      	cmp	r2, r3
 8012436:	d107      	bne.n	8012448 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with screen transition towards East
        application().gotoPongScreenCoverTransitionEast();
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff fe6e 	bl	801211a <_ZN14screenViewBase11applicationEv>
 801243e:	4603      	mov	r3, r0
 8012440:	4618      	mov	r0, r3
 8012442:	f7fa fcaf 	bl	800cda4 <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to gallery
        //Go to gallery with screen transition towards East
        application().gotogalleryScreenCoverTransitionEast();
    }
}
 8012446:	e019      	b.n	801247c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	33b8      	adds	r3, #184	; 0xb8
 801244c:	683a      	ldr	r2, [r7, #0]
 801244e:	429a      	cmp	r2, r3
 8012450:	d107      	bne.n	8012462 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoMusicScreenNoTransition();
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f7ff fe61 	bl	801211a <_ZN14screenViewBase11applicationEv>
 8012458:	4603      	mov	r3, r0
 801245a:	4618      	mov	r0, r3
 801245c:	f7fa fc16 	bl	800cc8c <_ZN23FrontendApplicationBase27gotoMusicScreenNoTransitionEv>
}
 8012460:	e00c      	b.n	801247c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	429a      	cmp	r2, r3
 801246c:	d106      	bne.n	801247c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotogalleryScreenCoverTransitionEast();
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7ff fe53 	bl	801211a <_ZN14screenViewBase11applicationEv>
 8012474:	4603      	mov	r3, r0
 8012476:	4618      	mov	r0, r3
 8012478:	f7fa fd20 	bl	800cebc <_ZN23FrontendApplicationBase36gotogalleryScreenCoverTransitionEastEv>
}
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	f007 fffa 	bl	801a488 <_ZN8touchgfx6ScreenC1Ev>
 8012494:	4a05      	ldr	r2, [pc, #20]	; (80124ac <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	601a      	str	r2, [r3, #0]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2200      	movs	r2, #0
 801249e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	4618      	mov	r0, r3
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	08028418 	.word	0x08028418

080124b0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	4639      	mov	r1, r7
 80124bc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fd fad2 	bl	800fa6c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80124c8:	4a08      	ldr	r2, [pc, #32]	; (80124ec <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	68ba      	ldr	r2, [r7, #8]
 80124d2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	3308      	adds	r3, #8
 80124d8:	463a      	mov	r2, r7
 80124da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	4618      	mov	r0, r3
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	08028400 	.word	0x08028400

080124f0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	4a05      	ldr	r2, [pc, #20]	; (8012510 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	601a      	str	r2, [r3, #0]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	4618      	mov	r0, r3
 8012502:	f7fd fae3 	bl	800facc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4618      	mov	r0, r3
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	08028400 	.word	0x08028400

08012514 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7ff ffe7 	bl	80124f0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012522:	2110      	movs	r1, #16
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f013 f94d 	bl	80257c4 <_ZdlPvj>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	4618      	mov	r0, r3
 801252e:	3708      	adds	r7, #8
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	68d2      	ldr	r2, [r2, #12]
 8012546:	1052      	asrs	r2, r2, #1
 8012548:	1898      	adds	r0, r3, r2
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	f003 0301 	and.w	r3, r3, #1
 8012552:	2b00      	cmp	r3, #0
 8012554:	d102      	bne.n	801255c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	689b      	ldr	r3, [r3, #8]
 801255a:	e00a      	b.n	8012572 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	68d2      	ldr	r2, [r2, #12]
 8012564:	1052      	asrs	r2, r2, #1
 8012566:	4413      	add	r3, r2
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	6892      	ldr	r2, [r2, #8]
 801256e:	4413      	add	r3, r2
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	6839      	ldr	r1, [r7, #0]
 8012574:	4798      	blx	r3
    }
 8012576:	bf00      	nop
 8012578:	3708      	adds	r7, #8
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801257e:	b480      	push	{r7}
 8012580:	b083      	sub	sp, #12
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d010      	beq.n	80125b0 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	689b      	ldr	r3, [r3, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d107      	bne.n	80125a6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	f003 0301 	and.w	r3, r3, #1
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d101      	bne.n	80125a6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80125a2:	2301      	movs	r3, #1
 80125a4:	e000      	b.n	80125a8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80125a6:	2300      	movs	r3, #0
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d001      	beq.n	80125b0 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80125ac:	2301      	movs	r3, #1
 80125ae:	e000      	b.n	80125b2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80125b0:	2300      	movs	r3, #0
    }
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr
	...

080125c0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80125c0:	b480      	push	{r7}
 80125c2:	af00      	add	r7, sp, #0
    return bitmap_database;
 80125c4:	4b02      	ldr	r3, [pc, #8]	; (80125d0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr
 80125d0:	08028444 	.word	0x08028444

080125d4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80125d4:	b480      	push	{r7}
 80125d6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80125d8:	230e      	movs	r3, #14
}
 80125da:	4618      	mov	r0, r3
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80125e4:	b480      	push	{r7}
 80125e6:	b085      	sub	sp, #20
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	460b      	mov	r3, r1
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80125f2:	2300      	movs	r3, #0
    }
 80125f4:	4618      	mov	r0, r3
 80125f6:	3714      	adds	r7, #20
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr

08012600 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012608:	2300      	movs	r3, #0
    }
 801260a:	4618      	mov	r0, r3
 801260c:	370c      	adds	r7, #12
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr
	...

08012618 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	4613      	mov	r3, r2
 8012624:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012626:	4a07      	ldr	r2, [pc, #28]	; (8012644 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801262c:	4a06      	ldr	r2, [pc, #24]	; (8012648 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012632:	4a06      	ldr	r2, [pc, #24]	; (801264c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012634:	88fb      	ldrh	r3, [r7, #6]
 8012636:	8013      	strh	r3, [r2, #0]
    }
 8012638:	bf00      	nop
 801263a:	3714      	adds	r7, #20
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	2000b400 	.word	0x2000b400
 8012648:	2000b408 	.word	0x2000b408
 801264c:	2000b404 	.word	0x2000b404

08012650 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012650:	b40e      	push	{r1, r2, r3}
 8012652:	b580      	push	{r7, lr}
 8012654:	b085      	sub	sp, #20
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801265a:	f107 0320 	add.w	r3, r7, #32
 801265e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	69fa      	ldr	r2, [r7, #28]
 8012664:	2100      	movs	r1, #0
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f007 fa70 	bl	8019b4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 801266c:	4603      	mov	r3, r0
 801266e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012670:	89fb      	ldrh	r3, [r7, #14]
}
 8012672:	4618      	mov	r0, r3
 8012674:	3714      	adds	r7, #20
 8012676:	46bd      	mov	sp, r7
 8012678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801267c:	b003      	add	sp, #12
 801267e:	4770      	bx	lr

08012680 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012680:	b40c      	push	{r2, r3}
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
 801268a:	460b      	mov	r3, r1
 801268c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801268e:	f107 031c 	add.w	r3, r7, #28
 8012692:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8012694:	78f9      	ldrb	r1, [r7, #3]
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	69ba      	ldr	r2, [r7, #24]
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f007 fa56 	bl	8019b4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80126a0:	4603      	mov	r3, r0
 80126a2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80126a4:	89fb      	ldrh	r3, [r7, #14]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80126b0:	b002      	add	sp, #8
 80126b2:	4770      	bx	lr

080126b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b08a      	sub	sp, #40	; 0x28
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	460b      	mov	r3, r1
 80126be:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d016      	beq.n	80126f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	331a      	adds	r3, #26
 80126cc:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	8adb      	ldrh	r3, [r3, #22]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d105      	bne.n	80126e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80126d6:	4b42      	ldr	r3, [pc, #264]	; (80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 80126d8:	4a42      	ldr	r2, [pc, #264]	; (80127e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80126da:	21c0      	movs	r1, #192	; 0xc0
 80126dc:	4842      	ldr	r0, [pc, #264]	; (80127e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80126de:	f013 f89d 	bl	802581c <__assert_func>
            return buffer[pos];
 80126e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e4:	8a9b      	ldrh	r3, [r3, #20]
 80126e6:	461a      	mov	r2, r3
 80126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d001      	beq.n	80126f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80126f2:	2301      	movs	r3, #1
 80126f4:	e000      	b.n	80126f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80126f6:	2300      	movs	r3, #0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d068      	beq.n	80127ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f008 fdc7 	bl	801b290 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	331a      	adds	r3, #26
 8012706:	623b      	str	r3, [r7, #32]
 8012708:	2301      	movs	r3, #1
 801270a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 801270c:	6a3b      	ldr	r3, [r7, #32]
 801270e:	8adb      	ldrh	r3, [r3, #22]
 8012710:	8bfa      	ldrh	r2, [r7, #30]
 8012712:	429a      	cmp	r2, r3
 8012714:	d305      	bcc.n	8012722 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8012716:	4b35      	ldr	r3, [pc, #212]	; (80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012718:	4a35      	ldr	r2, [pc, #212]	; (80127f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801271a:	21c5      	movs	r1, #197	; 0xc5
 801271c:	4832      	ldr	r0, [pc, #200]	; (80127e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801271e:	f013 f87d 	bl	802581c <__assert_func>
            const uint16_t index = pos + offset;
 8012722:	6a3b      	ldr	r3, [r7, #32]
 8012724:	8a9a      	ldrh	r2, [r3, #20]
 8012726:	8bfb      	ldrh	r3, [r7, #30]
 8012728:	4413      	add	r3, r2
 801272a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 801272c:	8bbb      	ldrh	r3, [r7, #28]
 801272e:	2b09      	cmp	r3, #9
 8012730:	d801      	bhi.n	8012736 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8012732:	8bbb      	ldrh	r3, [r7, #28]
 8012734:	e001      	b.n	801273a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8012736:	8bbb      	ldrh	r3, [r7, #28]
 8012738:	3b0a      	subs	r3, #10
 801273a:	6a3a      	ldr	r2, [r7, #32]
 801273c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012740:	f640 123f 	movw	r2, #2367	; 0x93f
 8012744:	4293      	cmp	r3, r2
 8012746:	bf0c      	ite	eq
 8012748:	2301      	moveq	r3, #1
 801274a:	2300      	movne	r3, #0
 801274c:	b2db      	uxtb	r3, r3
 801274e:	2b00      	cmp	r3, #0
 8012750:	d03d      	beq.n	80127ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	331a      	adds	r3, #26
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	321a      	adds	r2, #26
 801275a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	8ad2      	ldrh	r2, [r2, #22]
 8012760:	2a00      	cmp	r2, #0
 8012762:	d105      	bne.n	8012770 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8012764:	4b1e      	ldr	r3, [pc, #120]	; (80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8012766:	4a1f      	ldr	r2, [pc, #124]	; (80127e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012768:	21c0      	movs	r1, #192	; 0xc0
 801276a:	481f      	ldr	r0, [pc, #124]	; (80127e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801276c:	f013 f856 	bl	802581c <__assert_func>
            return buffer[pos];
 8012770:	68ba      	ldr	r2, [r7, #8]
 8012772:	8a92      	ldrh	r2, [r2, #20]
 8012774:	4611      	mov	r1, r2
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801277c:	613b      	str	r3, [r7, #16]
 801277e:	4613      	mov	r3, r2
 8012780:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	8adb      	ldrh	r3, [r3, #22]
 8012786:	2b01      	cmp	r3, #1
 8012788:	d806      	bhi.n	8012798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801278a:	4b1a      	ldr	r3, [pc, #104]	; (80127f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801278c:	4a1a      	ldr	r2, [pc, #104]	; (80127f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 801278e:	f240 110d 	movw	r1, #269	; 0x10d
 8012792:	4815      	ldr	r0, [pc, #84]	; (80127e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012794:	f013 f842 	bl	802581c <__assert_func>
            const uint16_t index = pos + 1;
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	8a9b      	ldrh	r3, [r3, #20]
 801279c:	3301      	adds	r3, #1
 801279e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80127a0:	89bb      	ldrh	r3, [r7, #12]
 80127a2:	2b09      	cmp	r3, #9
 80127a4:	d801      	bhi.n	80127aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80127a6:	89bb      	ldrh	r3, [r7, #12]
 80127a8:	e000      	b.n	80127ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80127aa:	2300      	movs	r3, #0
 80127ac:	693a      	ldr	r2, [r7, #16]
 80127ae:	89f9      	ldrh	r1, [r7, #14]
 80127b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	331a      	adds	r3, #26
 80127b8:	61bb      	str	r3, [r7, #24]
 80127ba:	f640 133f 	movw	r3, #2367	; 0x93f
 80127be:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	8a9b      	ldrh	r3, [r3, #20]
 80127c4:	4619      	mov	r1, r3
 80127c6:	69bb      	ldr	r3, [r7, #24]
 80127c8:	8afa      	ldrh	r2, [r7, #22]
 80127ca:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f008 fc42 	bl	801b058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80127d4:	4603      	mov	r3, r0
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3728      	adds	r7, #40	; 0x28
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	080270d4 	.word	0x080270d4
 80127e4:	08028680 	.word	0x08028680
 80127e8:	080270e0 	.word	0x080270e0
 80127ec:	08027128 	.word	0x08027128
 80127f0:	080285ac 	.word	0x080285ac
 80127f4:	08027138 	.word	0x08027138
 80127f8:	0802872c 	.word	0x0802872c

080127fc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f008 fbe1 	bl	801afcc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801280a:	bf00      	nop
 801280c:	3708      	adds	r7, #8
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8012812:	b580      	push	{r7, lr}
 8012814:	b088      	sub	sp, #32
 8012816:	af02      	add	r7, sp, #8
 8012818:	60f8      	str	r0, [r7, #12]
 801281a:	1d38      	adds	r0, r7, #4
 801281c:	e880 0006 	stmia.w	r0, {r1, r2}
 8012820:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8012822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012826:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8012828:	1d39      	adds	r1, r7, #4
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	9301      	str	r3, [sp, #4]
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	6a3b      	ldr	r3, [r7, #32]
 8012834:	683a      	ldr	r2, [r7, #0]
 8012836:	68f8      	ldr	r0, [r7, #12]
 8012838:	f006 fa8b 	bl	8018d52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 801283c:	bf00      	nop
 801283e:	3718      	adds	r7, #24
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012844:	b590      	push	{r4, r7, lr}
 8012846:	b085      	sub	sp, #20
 8012848:	af00      	add	r7, sp, #0
 801284a:	4603      	mov	r3, r0
 801284c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801284e:	2300      	movs	r3, #0
 8012850:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012852:	88fb      	ldrh	r3, [r7, #6]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d127      	bne.n	80128a8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012858:	88fb      	ldrh	r3, [r7, #6]
 801285a:	4a1e      	ldr	r2, [pc, #120]	; (80128d4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d016      	beq.n	8012892 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012864:	88fb      	ldrh	r3, [r7, #6]
 8012866:	4a1b      	ldr	r2, [pc, #108]	; (80128d4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801286c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	68ba      	ldr	r2, [r7, #8]
 8012874:	4413      	add	r3, r2
 8012876:	4a18      	ldr	r2, [pc, #96]	; (80128d8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012878:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	4413      	add	r3, r2
 8012882:	4a16      	ldr	r2, [pc, #88]	; (80128dc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012884:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	68ba      	ldr	r2, [r7, #8]
 801288c:	4413      	add	r3, r2
 801288e:	60fb      	str	r3, [r7, #12]
 8012890:	e00a      	b.n	80128a8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012892:	4b11      	ldr	r3, [pc, #68]	; (80128d8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012894:	4a12      	ldr	r2, [pc, #72]	; (80128e0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8012896:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012898:	4a12      	ldr	r2, [pc, #72]	; (80128e4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801289a:	4b10      	ldr	r3, [pc, #64]	; (80128dc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801289c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801289e:	88fb      	ldrh	r3, [r7, #6]
 80128a0:	4a11      	ldr	r2, [pc, #68]	; (80128e8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80128a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128a6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d00d      	beq.n	80128ca <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80128ae:	4a0f      	ldr	r2, [pc, #60]	; (80128ec <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80128b0:	88fb      	ldrh	r3, [r7, #6]
 80128b2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80128b4:	f000 f83e 	bl	8012934 <_ZN17TypedTextDatabase8getFontsEv>
 80128b8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80128ba:	f000 f833 	bl	8012924 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80128be:	4603      	mov	r3, r0
 80128c0:	461a      	mov	r2, r3
 80128c2:	4621      	mov	r1, r4
 80128c4:	68f8      	ldr	r0, [r7, #12]
 80128c6:	f7ff fea7 	bl	8012618 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80128ca:	bf00      	nop
 80128cc:	3714      	adds	r7, #20
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd90      	pop	{r4, r7, pc}
 80128d2:	bf00      	nop
 80128d4:	200085f8 	.word	0x200085f8
 80128d8:	20008600 	.word	0x20008600
 80128dc:	20008604 	.word	0x20008604
 80128e0:	080e03fc 	.word	0x080e03fc
 80128e4:	080e03a0 	.word	0x080e03a0
 80128e8:	080e0524 	.word	0x080e0524
 80128ec:	200085fc 	.word	0x200085fc

080128f0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80128f0:	b480      	push	{r7}
 80128f2:	b083      	sub	sp, #12
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	460b      	mov	r3, r1
 80128fa:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80128fc:	4b07      	ldr	r3, [pc, #28]	; (801291c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80128fe:	681a      	ldr	r2, [r3, #0]
 8012900:	4b07      	ldr	r3, [pc, #28]	; (8012920 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012902:	6819      	ldr	r1, [r3, #0]
 8012904:	887b      	ldrh	r3, [r7, #2]
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	440b      	add	r3, r1
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	005b      	lsls	r3, r3, #1
 801290e:	4413      	add	r3, r2
}
 8012910:	4618      	mov	r0, r3
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr
 801291c:	20008600 	.word	0x20008600
 8012920:	20008604 	.word	0x20008604

08012924 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012924:	b480      	push	{r7}
 8012926:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012928:	2317      	movs	r3, #23
}
 801292a:	4618      	mov	r0, r3
 801292c:	46bd      	mov	sp, r7
 801292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012932:	4770      	bx	lr

08012934 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012934:	b480      	push	{r7}
 8012936:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8012938:	4b02      	ldr	r3, [pc, #8]	; (8012944 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801293a:	4618      	mov	r0, r3
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr
 8012944:	20008608 	.word	0x20008608

08012948 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_24_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b01      	cmp	r3, #1
 8012956:	d11d      	bne.n	8012994 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801295e:	4293      	cmp	r3, r2
 8012960:	d118      	bne.n	8012994 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 8012962:	f7f9 fb21 	bl	800bfa8 <_Z23getFont_verdana_20_4bppv>
 8012966:	4602      	mov	r2, r0
};
 8012968:	4b0c      	ldr	r3, [pc, #48]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801296a:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 801296c:	f7f9 fbe2 	bl	800c134 <_Z23getFont_verdana_40_4bppv>
 8012970:	4602      	mov	r2, r0
};
 8012972:	4b0a      	ldr	r3, [pc, #40]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012974:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_18_4bpp()),
 8012976:	f7f9 fad5 	bl	800bf24 <_Z23getFont_verdana_18_4bppv>
 801297a:	4602      	mov	r2, r0
};
 801297c:	4b07      	ldr	r3, [pc, #28]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801297e:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_27_4bpp()),
 8012980:	f7f9 fb96 	bl	800c0b0 <_Z23getFont_verdana_27_4bppv>
 8012984:	4602      	mov	r2, r0
};
 8012986:	4b05      	ldr	r3, [pc, #20]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012988:	60da      	str	r2, [r3, #12]
    &(getFont_verdana_24_4bpp())
 801298a:	f7f9 fb4f 	bl	800c02c <_Z23getFont_verdana_24_4bppv>
 801298e:	4602      	mov	r2, r0
};
 8012990:	4b02      	ldr	r3, [pc, #8]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8012992:	611a      	str	r2, [r3, #16]
}  // namespace TypedTextDatabase
 8012994:	bf00      	nop
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}
 801299c:	20008608 	.word	0x20008608

080129a0 <_GLOBAL__sub_I_touchgfx_fonts>:
 80129a0:	b580      	push	{r7, lr}
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80129a8:	2001      	movs	r0, #1
 80129aa:	f7ff ffcd 	bl	8012948 <_Z41__static_initialization_and_destruction_0ii>
 80129ae:	bd80      	pop	{r7, pc}

080129b0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	4a05      	ldr	r2, [pc, #20]	; (80129d0 <_ZN19FrontendApplicationD1Ev+0x20>)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	601a      	str	r2, [r3, #0]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7f9 ff99 	bl	800c8f8 <_ZN23FrontendApplicationBaseD1Ev>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	4618      	mov	r0, r3
 80129ca:	3708      	adds	r7, #8
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	080287e8 	.word	0x080287e8

080129d4 <_ZN19FrontendApplicationD0Ev>:
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7ff ffe7 	bl	80129b0 <_ZN19FrontendApplicationD1Ev>
 80129e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f012 feec 	bl	80257c4 <_ZdlPvj>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b082      	sub	sp, #8
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012a04:	4618      	mov	r0, r3
 8012a06:	f000 fa27 	bl	8012e58 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f006 fc67 	bl	80192e0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012a12:	bf00      	nop
 8012a14:	3708      	adds	r7, #8
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
	...

08012a1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	60b9      	str	r1, [r7, #8]
 8012a26:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	68b9      	ldr	r1, [r7, #8]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7f9 fffe 	bl	800ca30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012a34:	4a03      	ldr	r2, [pc, #12]	; (8012a44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	601a      	str	r2, [r3, #0]
{

}
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3710      	adds	r7, #16
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	080287e8 	.word	0x080287e8

08012a48 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
    {
    }
 8012a50:	bf00      	nop
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
    {
    }
 8012a64:	bf00      	nop
 8012a66:	370c      	adds	r7, #12
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr

08012a70 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012a70:	b480      	push	{r7}
 8012a72:	b083      	sub	sp, #12
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
    {
 8012a78:	4a04      	ldr	r2, [pc, #16]	; (8012a8c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	601a      	str	r2, [r3, #0]
    }
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	4618      	mov	r0, r3
 8012a82:	370c      	adds	r7, #12
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr
 8012a8c:	08028864 	.word	0x08028864

08012a90 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
    }
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7ff ffe9 	bl	8012a70 <_ZN8touchgfx9PresenterD1Ev>
 8012a9e:	2104      	movs	r1, #4
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f012 fe8f 	bl	80257c4 <_ZdlPvj>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3708      	adds	r7, #8
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
    {
 8012ab8:	4a04      	ldr	r2, [pc, #16]	; (8012acc <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	601a      	str	r2, [r3, #0]
    }
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	08028864 	.word	0x08028864

08012ad0 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012ad0:	b480      	push	{r7}
 8012ad2:	b083      	sub	sp, #12
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	4a06      	ldr	r2, [pc, #24]	; (8012af4 <_ZN13ModelListenerC1Ev+0x24>)
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	605a      	str	r2, [r3, #4]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	370c      	adds	r7, #12
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr
 8012af2:	bf00      	nop
 8012af4:	08028854 	.word	0x08028854

08012af8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	4a04      	ldr	r2, [pc, #16]	; (8012b14 <_ZN13ModelListenerD1Ev+0x1c>)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	370c      	adds	r7, #12
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b12:	4770      	bx	lr
 8012b14:	08028854 	.word	0x08028854

08012b18 <_ZN13ModelListenerD0Ev>:
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ff ffe9 	bl	8012af8 <_ZN13ModelListenerD1Ev>
 8012b26:	2108      	movs	r1, #8
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f012 fe4b 	bl	80257c4 <_ZdlPvj>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <_ZN16galleryPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~galleryPresenter() {};
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	4a09      	ldr	r2, [pc, #36]	; (8012b68 <_ZN16galleryPresenterD1Ev+0x30>)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	4a09      	ldr	r2, [pc, #36]	; (8012b6c <_ZN16galleryPresenterD1Ev+0x34>)
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	605a      	str	r2, [r3, #4]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	3304      	adds	r3, #4
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ff ffd1 	bl	8012af8 <_ZN13ModelListenerD1Ev>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7ff ff89 	bl	8012a70 <_ZN8touchgfx9PresenterD1Ev>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4618      	mov	r0, r3
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	0802882c 	.word	0x0802882c
 8012b6c:	08028844 	.word	0x08028844

08012b70 <_ZThn4_N16galleryPresenterD1Ev>:
 8012b70:	f1a0 0004 	sub.w	r0, r0, #4
 8012b74:	e7e0      	b.n	8012b38 <_ZN16galleryPresenterD1Ev>
 8012b76:	bf00      	nop

08012b78 <_ZN16galleryPresenterD0Ev>:
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f7ff ffd9 	bl	8012b38 <_ZN16galleryPresenterD1Ev>
 8012b86:	2110      	movs	r1, #16
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f012 fe1b 	bl	80257c4 <_ZdlPvj>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	4618      	mov	r0, r3
 8012b92:	3708      	adds	r7, #8
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <_ZThn4_N16galleryPresenterD0Ev>:
 8012b98:	f1a0 0004 	sub.w	r0, r0, #4
 8012b9c:	e7ec      	b.n	8012b78 <_ZN16galleryPresenterD0Ev>
	...

08012ba0 <_ZN16galleryPresenterC1ER11galleryView>:
#include <gui/gallery_screen/galleryView.hpp>
#include <gui/gallery_screen/galleryPresenter.hpp>

galleryPresenter::galleryPresenter(galleryView& v)
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
    : view(v)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ff ff7f 	bl	8012ab0 <_ZN8touchgfx9PresenterC1Ev>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	3304      	adds	r3, #4
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff ff8a 	bl	8012ad0 <_ZN13ModelListenerC1Ev>
 8012bbc:	4a06      	ldr	r2, [pc, #24]	; (8012bd8 <_ZN16galleryPresenterC1ER11galleryView+0x38>)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	601a      	str	r2, [r3, #0]
 8012bc2:	4a06      	ldr	r2, [pc, #24]	; (8012bdc <_ZN16galleryPresenterC1ER11galleryView+0x3c>)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	605a      	str	r2, [r3, #4]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	683a      	ldr	r2, [r7, #0]
 8012bcc:	60da      	str	r2, [r3, #12]
{

}
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	0802882c 	.word	0x0802882c
 8012bdc:	08028844 	.word	0x08028844

08012be0 <_ZN16galleryPresenter8activateEv>:

void galleryPresenter::activate()
{
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]

}
 8012be8:	bf00      	nop
 8012bea:	370c      	adds	r7, #12
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <_ZN16galleryPresenter10deactivateEv>:

void galleryPresenter::deactivate()
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b083      	sub	sp, #12
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]

}
 8012bfc:	bf00      	nop
 8012bfe:	370c      	adds	r7, #12
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <_ZN11galleryViewD1Ev>:

class galleryView : public galleryViewBase
{
public:
    galleryView();
    virtual ~galleryView() {}
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	4a05      	ldr	r2, [pc, #20]	; (8012c28 <_ZN11galleryViewD1Ev+0x20>)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	601a      	str	r2, [r3, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fc fd83 	bl	800f724 <_ZN15galleryViewBaseD1Ev>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	4618      	mov	r0, r3
 8012c22:	3708      	adds	r7, #8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	0802887c 	.word	0x0802887c

08012c2c <_ZN11galleryViewD0Ev>:
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f7ff ffe7 	bl	8012c08 <_ZN11galleryViewD1Ev>
 8012c3a:	f44f 7192 	mov.w	r1, #292	; 0x124
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f012 fdc0 	bl	80257c4 <_ZdlPvj>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	4618      	mov	r0, r3
 8012c48:	3708      	adds	r7, #8
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
	...

08012c50 <_ZN11galleryViewC1Ev>:
#include <gui/gallery_screen/galleryView.hpp>

galleryView::galleryView()
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fc fdd4 	bl	800f808 <_ZN15galleryViewBaseC1Ev>
 8012c60:	4a03      	ldr	r2, [pc, #12]	; (8012c70 <_ZN11galleryViewC1Ev+0x20>)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	601a      	str	r2, [r3, #0]
{

}
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3708      	adds	r7, #8
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	0802887c 	.word	0x0802887c

08012c74 <_ZN11galleryView11setupScreenEv>:

void galleryView::setupScreen()
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
    galleryViewBase::setupScreen();
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7fc febe 	bl	800fa00 <_ZN15galleryViewBase11setupScreenEv>
}
 8012c84:	bf00      	nop
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <_ZN11galleryView14tearDownScreenEv>:

void galleryView::tearDownScreen()
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
    galleryViewBase::tearDownScreen();
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7fc fbdc 	bl	800f454 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012c9c:	bf00      	nop
 8012c9e:	3708      	adds	r7, #8
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <_ZN17gameoverPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~gameoverPresenter() {};
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	4a09      	ldr	r2, [pc, #36]	; (8012cd4 <_ZN17gameoverPresenterD1Ev+0x30>)
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	601a      	str	r2, [r3, #0]
 8012cb2:	4a09      	ldr	r2, [pc, #36]	; (8012cd8 <_ZN17gameoverPresenterD1Ev+0x34>)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	605a      	str	r2, [r3, #4]
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	3304      	adds	r3, #4
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff ff1b 	bl	8012af8 <_ZN13ModelListenerD1Ev>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7ff fed3 	bl	8012a70 <_ZN8touchgfx9PresenterD1Ev>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	080288b0 	.word	0x080288b0
 8012cd8:	080288c8 	.word	0x080288c8

08012cdc <_ZThn4_N17gameoverPresenterD1Ev>:
 8012cdc:	f1a0 0004 	sub.w	r0, r0, #4
 8012ce0:	e7e0      	b.n	8012ca4 <_ZN17gameoverPresenterD1Ev>
 8012ce2:	bf00      	nop

08012ce4 <_ZN17gameoverPresenterD0Ev>:
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f7ff ffd9 	bl	8012ca4 <_ZN17gameoverPresenterD1Ev>
 8012cf2:	2110      	movs	r1, #16
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f012 fd65 	bl	80257c4 <_ZdlPvj>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3708      	adds	r7, #8
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <_ZThn4_N17gameoverPresenterD0Ev>:
 8012d04:	f1a0 0004 	sub.w	r0, r0, #4
 8012d08:	e7ec      	b.n	8012ce4 <_ZN17gameoverPresenterD0Ev>
	...

08012d0c <_ZN17gameoverPresenterC1ER12gameoverView>:
#include <gui/gameover_screen/gameoverView.hpp>
#include <gui/gameover_screen/gameoverPresenter.hpp>

gameoverPresenter::gameoverPresenter(gameoverView& v)
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	6039      	str	r1, [r7, #0]
    : view(v)
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7ff fec9 	bl	8012ab0 <_ZN8touchgfx9PresenterC1Ev>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	3304      	adds	r3, #4
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff fed4 	bl	8012ad0 <_ZN13ModelListenerC1Ev>
 8012d28:	4a06      	ldr	r2, [pc, #24]	; (8012d44 <_ZN17gameoverPresenterC1ER12gameoverView+0x38>)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	601a      	str	r2, [r3, #0]
 8012d2e:	4a06      	ldr	r2, [pc, #24]	; (8012d48 <_ZN17gameoverPresenterC1ER12gameoverView+0x3c>)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	605a      	str	r2, [r3, #4]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	683a      	ldr	r2, [r7, #0]
 8012d38:	60da      	str	r2, [r3, #12]
{

}
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	080288b0 	.word	0x080288b0
 8012d48:	080288c8 	.word	0x080288c8

08012d4c <_ZN17gameoverPresenter8activateEv>:

void gameoverPresenter::activate()
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]

}
 8012d54:	bf00      	nop
 8012d56:	370c      	adds	r7, #12
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr

08012d60 <_ZN17gameoverPresenter10deactivateEv>:

void gameoverPresenter::deactivate()
{
 8012d60:	b480      	push	{r7}
 8012d62:	b083      	sub	sp, #12
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]

}
 8012d68:	bf00      	nop
 8012d6a:	370c      	adds	r7, #12
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr

08012d74 <_ZN12gameoverViewD1Ev>:

class gameoverView : public gameoverViewBase
{
public:
    gameoverView();
    virtual ~gameoverView() {}
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	4a05      	ldr	r2, [pc, #20]	; (8012d94 <_ZN12gameoverViewD1Ev+0x20>)
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	601a      	str	r2, [r3, #0]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fd f973 	bl	8010070 <_ZN16gameoverViewBaseD1Ev>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	080288d8 	.word	0x080288d8

08012d98 <_ZN12gameoverViewD0Ev>:
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7ff ffe7 	bl	8012d74 <_ZN12gameoverViewD1Ev>
 8012da6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f012 fd0a 	bl	80257c4 <_ZdlPvj>
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	4618      	mov	r0, r3
 8012db4:	3708      	adds	r7, #8
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
	...

08012dbc <_ZN12gameoverViewC1Ev>:
#include <gui/gameover_screen/gameoverView.hpp>

gameoverView::gameoverView()
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7fd f9a0 	bl	801010c <_ZN16gameoverViewBaseC1Ev>
 8012dcc:	4a03      	ldr	r2, [pc, #12]	; (8012ddc <_ZN12gameoverViewC1Ev+0x20>)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	601a      	str	r2, [r3, #0]
{

}
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	080288d8 	.word	0x080288d8

08012de0 <_ZN12gameoverView11setupScreenEv>:

void gameoverView::setupScreen()
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
    gameoverViewBase::setupScreen();
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fd fb36 	bl	801045c <_ZN16gameoverViewBase11setupScreenEv>
	Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", 10*pong_score);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8012df6:	4b09      	ldr	r3, [pc, #36]	; (8012e1c <_ZN12gameoverView11setupScreenEv+0x3c>)
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	4413      	add	r3, r2
 8012e00:	005b      	lsls	r3, r3, #1
 8012e02:	4a07      	ldr	r2, [pc, #28]	; (8012e20 <_ZN12gameoverView11setupScreenEv+0x40>)
 8012e04:	2114      	movs	r1, #20
 8012e06:	f008 fde3 	bl	801b9d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	score.invalidate();
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	33f4      	adds	r3, #244	; 0xf4
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f006 ffa6 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012e14:	bf00      	nop
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	2000b9c4 	.word	0x2000b9c4
 8012e20:	08027144 	.word	0x08027144

08012e24 <_ZN12gameoverView14tearDownScreenEv>:

void gameoverView::tearDownScreen()
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
    gameoverViewBase::tearDownScreen();
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7fc fb10 	bl	800f454 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012e34:	bf00      	nop
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	601a      	str	r2, [r3, #0]
{

}
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	370c      	adds	r7, #12
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]

}
 8012e60:	bf00      	nop
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <_ZN14MusicPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MusicPresenter() {};
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	4a09      	ldr	r2, [pc, #36]	; (8012e9c <_ZN14MusicPresenterD1Ev+0x30>)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	601a      	str	r2, [r3, #0]
 8012e7a:	4a09      	ldr	r2, [pc, #36]	; (8012ea0 <_ZN14MusicPresenterD1Ev+0x34>)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	605a      	str	r2, [r3, #4]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	3304      	adds	r3, #4
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff fe37 	bl	8012af8 <_ZN13ModelListenerD1Ev>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7ff fdef 	bl	8012a70 <_ZN8touchgfx9PresenterD1Ev>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	4618      	mov	r0, r3
 8012e96:	3708      	adds	r7, #8
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	0802890c 	.word	0x0802890c
 8012ea0:	08028924 	.word	0x08028924

08012ea4 <_ZThn4_N14MusicPresenterD1Ev>:
 8012ea4:	f1a0 0004 	sub.w	r0, r0, #4
 8012ea8:	e7e0      	b.n	8012e6c <_ZN14MusicPresenterD1Ev>
 8012eaa:	bf00      	nop

08012eac <_ZN14MusicPresenterD0Ev>:
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f7ff ffd9 	bl	8012e6c <_ZN14MusicPresenterD1Ev>
 8012eba:	2110      	movs	r1, #16
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f012 fc81 	bl	80257c4 <_ZdlPvj>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <_ZThn4_N14MusicPresenterD0Ev>:
 8012ecc:	f1a0 0004 	sub.w	r0, r0, #4
 8012ed0:	e7ec      	b.n	8012eac <_ZN14MusicPresenterD0Ev>
	...

08012ed4 <_ZN14MusicPresenterC1ER9MusicView>:
#include <gui/music_screen/MusicView.hpp>
#include <gui/music_screen/MusicPresenter.hpp>

MusicPresenter::MusicPresenter(MusicView& v)
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
    : view(v)
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7ff fde5 	bl	8012ab0 <_ZN8touchgfx9PresenterC1Ev>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	3304      	adds	r3, #4
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff fdf0 	bl	8012ad0 <_ZN13ModelListenerC1Ev>
 8012ef0:	4a06      	ldr	r2, [pc, #24]	; (8012f0c <_ZN14MusicPresenterC1ER9MusicView+0x38>)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	601a      	str	r2, [r3, #0]
 8012ef6:	4a06      	ldr	r2, [pc, #24]	; (8012f10 <_ZN14MusicPresenterC1ER9MusicView+0x3c>)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	605a      	str	r2, [r3, #4]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	683a      	ldr	r2, [r7, #0]
 8012f00:	60da      	str	r2, [r3, #12]
{

}
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4618      	mov	r0, r3
 8012f06:	3708      	adds	r7, #8
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	0802890c 	.word	0x0802890c
 8012f10:	08028924 	.word	0x08028924

08012f14 <_ZN14MusicPresenter8activateEv>:

void MusicPresenter::activate()
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
	view.updateFileName();
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	68da      	ldr	r2, [r3, #12]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	3344      	adds	r3, #68	; 0x44
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	4610      	mov	r0, r2
 8012f2c:	4798      	blx	r3
}
 8012f2e:	bf00      	nop
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}

08012f36 <_ZN14MusicPresenter10deactivateEv>:

void MusicPresenter::deactivate()
{
 8012f36:	b480      	push	{r7}
 8012f38:	b083      	sub	sp, #12
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]

}
 8012f3e:	bf00      	nop
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr
	...

08012f4c <_ZN9MusicViewD1Ev>:

class MusicView : public MusicViewBase
{
public:
    MusicView();
    virtual ~MusicView() {}
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	4a05      	ldr	r2, [pc, #20]	; (8012f6c <_ZN9MusicViewD1Ev+0x20>)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	601a      	str	r2, [r3, #0]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fd fbb7 	bl	80106d0 <_ZN13MusicViewBaseD1Ev>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	4618      	mov	r0, r3
 8012f66:	3708      	adds	r7, #8
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	08028934 	.word	0x08028934

08012f70 <_ZN9MusicViewD0Ev>:
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f7ff ffe7 	bl	8012f4c <_ZN9MusicViewD1Ev>
 8012f7e:	f44f 7146 	mov.w	r1, #792	; 0x318
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f012 fc1e 	bl	80257c4 <_ZdlPvj>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <_ZN9MusicViewC1Ev>:
extern uint8_t isPlay;

//----------------------------------------------


MusicView::MusicView()
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7fd fc44 	bl	801082c <_ZN13MusicViewBaseC1Ev>
 8012fa4:	4a03      	ldr	r2, [pc, #12]	; (8012fb4 <_ZN9MusicViewC1Ev+0x20>)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	601a      	str	r2, [r3, #0]
{

}
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	4618      	mov	r0, r3
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	08028934 	.word	0x08028934

08012fb8 <_ZN9MusicView11setupScreenEv>:

void MusicView::setupScreen()
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
    MusicViewBase::setupScreen();
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fe f804 	bl	8010fd0 <_ZN13MusicViewBase11setupScreenEv>
}
 8012fc8:	bf00      	nop
 8012fca:	3708      	adds	r7, #8
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}

08012fd0 <_ZN9MusicView14tearDownScreenEv>:

void MusicView::tearDownScreen()
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
    MusicViewBase::tearDownScreen();
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fc fa3a 	bl	800f454 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012fe0:	bf00      	nop
 8012fe2:	3708      	adds	r7, #8
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <_ZN9MusicView11controlPlayEv>:


//------------- Custom function ------------
void MusicView::controlPlay()
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
	sendControlQ(2);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	3348      	adds	r3, #72	; 0x48
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	2102      	movs	r1, #2
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	4798      	blx	r3
}
 8012ffe:	bf00      	nop
 8013000:	3708      	adds	r7, #8
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}

08013006 <_ZN9MusicView11controlStopEv>:

void MusicView::controlStop()
{
 8013006:	b580      	push	{r7, lr}
 8013008:	b082      	sub	sp, #8
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
	sendControlQ(3);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	3348      	adds	r3, #72	; 0x48
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	2103      	movs	r1, #3
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	4798      	blx	r3
}
 801301c:	bf00      	nop
 801301e:	3708      	adds	r7, #8
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <_ZN9MusicView11controlPrevEv>:
void MusicView::controlPrev()
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
	sendControlQ(4);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	3348      	adds	r3, #72	; 0x48
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2104      	movs	r1, #4
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	4798      	blx	r3
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <_ZN9MusicView11controlNextEv>:
void MusicView::controlNext()
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b082      	sub	sp, #8
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
	sendControlQ(5);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	3348      	adds	r3, #72	; 0x48
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2105      	movs	r1, #5
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	4798      	blx	r3
}
 8013058:	bf00      	nop
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}

08013060 <_ZN9MusicView17controlVolumeDownEv>:
void MusicView::controlVolumeDown()
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
	sendControlQ(6);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	3348      	adds	r3, #72	; 0x48
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	2106      	movs	r1, #6
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	4798      	blx	r3
}
 8013076:	bf00      	nop
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <_ZN9MusicView15controlVolumeUpEv>:
void MusicView::controlVolumeUp()
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b082      	sub	sp, #8
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
	sendControlQ(7);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	3348      	adds	r3, #72	; 0x48
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	2107      	movs	r1, #7
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	4798      	blx	r3
}
 8013094:	bf00      	nop
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <_ZN9MusicView12sendControlQEh>:

void MusicView::sendControlQ(uint8_t signal){
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	460b      	mov	r3, r1
 80130a6:	70fb      	strb	r3, [r7, #3]
	xQueueSend(music_msg_q, &signal, 0);
 80130a8:	4b05      	ldr	r3, [pc, #20]	; (80130c0 <_ZN9MusicView12sendControlQEh+0x24>)
 80130aa:	6818      	ldr	r0, [r3, #0]
 80130ac:	1cf9      	adds	r1, r7, #3
 80130ae:	2300      	movs	r3, #0
 80130b0:	2200      	movs	r2, #0
 80130b2:	f7f6 f9eb 	bl	800948c <xQueueGenericSend>

}
 80130b6:	bf00      	nop
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	2000b630 	.word	0x2000b630

080130c4 <_ZN9MusicView14updateFileNameEv>:

void MusicView::updateFileName(){
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
	if (uartMsgBuffer[0] == 0)
 80130cc:	4b10      	ldr	r3, [pc, #64]	; (8013110 <_ZN9MusicView14updateFileNameEv+0x4c>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d019      	beq.n	8013108 <_ZN9MusicView14updateFileNameEv+0x44>
		return; // array empty so return

	memset(&MusicTextAreaBuffer, 0, MUSICTEXTAREA_SIZE);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80130da:	2211      	movs	r2, #17
 80130dc:	2100      	movs	r1, #0
 80130de:	4618      	mov	r0, r3
 80130e0:	f012 fc25 	bl	802592e <memset>

	Unicode::strncpy(MusicTextAreaBuffer, (char *)uartMsgBuffer, MUSICTEXTAREA_SIZE - 1);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80130ea:	2210      	movs	r2, #16
 80130ec:	4908      	ldr	r1, [pc, #32]	; (8013110 <_ZN9MusicView14updateFileNameEv+0x4c>)
 80130ee:	4618      	mov	r0, r3
 80130f0:	f008 f909 	bl	801b306 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	MusicTextAreaBuffer[16] = '\0'; // last index must be NULL
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	MusicTextArea.invalidate();
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	33e8      	adds	r3, #232	; 0xe8
 8013100:	4618      	mov	r0, r3
 8013102:	f006 fe2d 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013106:	e000      	b.n	801310a <_ZN9MusicView14updateFileNameEv+0x46>
		return; // array empty so return
 8013108:	bf00      	nop
}
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	2000b638 	.word	0x2000b638

08013114 <_ZN9MusicView16updatePlayButtonEv>:

void MusicView::updatePlayButton(){
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
	if(isPlay==0){
 801311c:	4b1c      	ldr	r3, [pc, #112]	; (8013190 <_ZN9MusicView16updatePlayButtonEv+0x7c>)
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d118      	bne.n	8013156 <_ZN9MusicView16updatePlayButtonEv+0x42>
		Pause_Button.setVisible(false);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f503 7394 	add.w	r3, r3, #296	; 0x128
 801312a:	2100      	movs	r1, #0
 801312c:	4618      	mov	r0, r3
 801312e:	f7fd fa9c 	bl	801066a <_ZN8touchgfx8Drawable10setVisibleEb>
		Pause_Button.invalidate();
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8013138:	4618      	mov	r0, r3
 801313a:	f006 fe11 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>

		Play_Button.setVisible(true);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	33ac      	adds	r3, #172	; 0xac
 8013142:	2101      	movs	r1, #1
 8013144:	4618      	mov	r0, r3
 8013146:	f7fd fa90 	bl	801066a <_ZN8touchgfx8Drawable10setVisibleEb>
		Play_Button.invalidate();
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	33ac      	adds	r3, #172	; 0xac
 801314e:	4618      	mov	r0, r3
 8013150:	f006 fe06 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>
		Play_Button.invalidate();

		Pause_Button.setVisible(true);
		Pause_Button.invalidate();
	}
}
 8013154:	e017      	b.n	8013186 <_ZN9MusicView16updatePlayButtonEv+0x72>
		Play_Button.setVisible(false);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	33ac      	adds	r3, #172	; 0xac
 801315a:	2100      	movs	r1, #0
 801315c:	4618      	mov	r0, r3
 801315e:	f7fd fa84 	bl	801066a <_ZN8touchgfx8Drawable10setVisibleEb>
		Play_Button.invalidate();
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	33ac      	adds	r3, #172	; 0xac
 8013166:	4618      	mov	r0, r3
 8013168:	f006 fdfa 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>
		Pause_Button.setVisible(true);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8013172:	2101      	movs	r1, #1
 8013174:	4618      	mov	r0, r3
 8013176:	f7fd fa78 	bl	801066a <_ZN8touchgfx8Drawable10setVisibleEb>
		Pause_Button.invalidate();
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8013180:	4618      	mov	r0, r3
 8013182:	f006 fded 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8013186:	bf00      	nop
 8013188:	3708      	adds	r7, #8
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
 801318e:	bf00      	nop
 8013190:	2000011e 	.word	0x2000011e

08013194 <_ZN9MusicView15handleTickEventEv>:

// ------------ Tick ---------------
void MusicView::handleTickEvent(){
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
	if (binarySemMsgUartHandle != NULL)
 801319c:	4b10      	ldr	r3, [pc, #64]	; (80131e0 <_ZN9MusicView15handleTickEventEv+0x4c>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d013      	beq.n	80131cc <_ZN9MusicView15handleTickEventEv+0x38>
		{
			if (xSemaphoreTake(binarySemMsgUartHandle, (TickType_t)10) == pdTRUE)
 80131a4:	4b0e      	ldr	r3, [pc, #56]	; (80131e0 <_ZN9MusicView15handleTickEventEv+0x4c>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	210a      	movs	r1, #10
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7f6 fbe4 	bl	8009978 <xQueueSemaphoreTake>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	bf0c      	ite	eq
 80131b6:	2301      	moveq	r3, #1
 80131b8:	2300      	movne	r3, #0
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d005      	beq.n	80131cc <_ZN9MusicView15handleTickEventEv+0x38>
			{
				updateFileName();
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	3344      	adds	r3, #68	; 0x44
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	4798      	blx	r3
			}
		}
	updatePlayButton();
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	334c      	adds	r3, #76	; 0x4c
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	4798      	blx	r3
}
 80131d8:	bf00      	nop
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	2000b9a0 	.word	0x2000b9a0

080131e4 <_ZN13PongPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~PongPresenter() {};
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	4a09      	ldr	r2, [pc, #36]	; (8013214 <_ZN13PongPresenterD1Ev+0x30>)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	601a      	str	r2, [r3, #0]
 80131f2:	4a09      	ldr	r2, [pc, #36]	; (8013218 <_ZN13PongPresenterD1Ev+0x34>)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	605a      	str	r2, [r3, #4]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	3304      	adds	r3, #4
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7ff fc7b 	bl	8012af8 <_ZN13ModelListenerD1Ev>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	4618      	mov	r0, r3
 8013206:	f7ff fc33 	bl	8012a70 <_ZN8touchgfx9PresenterD1Ev>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	4618      	mov	r0, r3
 801320e:	3708      	adds	r7, #8
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	0802898c 	.word	0x0802898c
 8013218:	080289a4 	.word	0x080289a4

0801321c <_ZThn4_N13PongPresenterD1Ev>:
 801321c:	f1a0 0004 	sub.w	r0, r0, #4
 8013220:	e7e0      	b.n	80131e4 <_ZN13PongPresenterD1Ev>
 8013222:	bf00      	nop

08013224 <_ZN13PongPresenterD0Ev>:
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f7ff ffd9 	bl	80131e4 <_ZN13PongPresenterD1Ev>
 8013232:	2110      	movs	r1, #16
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f012 fac5 	bl	80257c4 <_ZdlPvj>
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	4618      	mov	r0, r3
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <_ZThn4_N13PongPresenterD0Ev>:
 8013244:	f1a0 0004 	sub.w	r0, r0, #4
 8013248:	e7ec      	b.n	8013224 <_ZN13PongPresenterD0Ev>
	...

0801324c <_ZN13PongPresenterC1ER8PongView>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

PongPresenter::PongPresenter(PongView& v)
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6039      	str	r1, [r7, #0]
    : view(v)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	f7ff fc29 	bl	8012ab0 <_ZN8touchgfx9PresenterC1Ev>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	3304      	adds	r3, #4
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff fc34 	bl	8012ad0 <_ZN13ModelListenerC1Ev>
 8013268:	4a06      	ldr	r2, [pc, #24]	; (8013284 <_ZN13PongPresenterC1ER8PongView+0x38>)
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	601a      	str	r2, [r3, #0]
 801326e:	4a06      	ldr	r2, [pc, #24]	; (8013288 <_ZN13PongPresenterC1ER8PongView+0x3c>)
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	605a      	str	r2, [r3, #4]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	683a      	ldr	r2, [r7, #0]
 8013278:	60da      	str	r2, [r3, #12]
{

}
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}
 8013284:	0802898c 	.word	0x0802898c
 8013288:	080289a4 	.word	0x080289a4

0801328c <_ZN13PongPresenter8activateEv>:

void PongPresenter::activate()
{
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]

}
 8013294:	bf00      	nop
 8013296:	370c      	adds	r7, #12
 8013298:	46bd      	mov	sp, r7
 801329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329e:	4770      	bx	lr

080132a0 <_ZN13PongPresenter10deactivateEv>:

void PongPresenter::deactivate()
{
 80132a0:	b480      	push	{r7}
 80132a2:	b083      	sub	sp, #12
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]

}
 80132a8:	bf00      	nop
 80132aa:	370c      	adds	r7, #12
 80132ac:	46bd      	mov	sp, r7
 80132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b2:	4770      	bx	lr

080132b4 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80132b4:	b480      	push	{r7}
 80132b6:	b083      	sub	sp, #12
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
        return rect.width;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80132c2:	4618      	mov	r0, r3
 80132c4:	370c      	adds	r7, #12
 80132c6:	46bd      	mov	sp, r7
 80132c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132cc:	4770      	bx	lr

080132ce <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80132ce:	b480      	push	{r7}
 80132d0:	b083      	sub	sp, #12
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	6078      	str	r0, [r7, #4]
        return rect.height;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80132dc:	4618      	mov	r0, r3
 80132de:	370c      	adds	r7, #12
 80132e0:	46bd      	mov	sp, r7
 80132e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e6:	4770      	bx	lr

080132e8 <_ZN8PongViewD1Ev>:

class PongView : public PongViewBase
{
public:
    PongView();
    virtual ~PongView() {}
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	4a05      	ldr	r2, [pc, #20]	; (8013308 <_ZN8PongViewD1Ev+0x20>)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	601a      	str	r2, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7fe f935 	bl	8011568 <_ZN12PongViewBaseD1Ev>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	4618      	mov	r0, r3
 8013302:	3708      	adds	r7, #8
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}
 8013308:	080289b4 	.word	0x080289b4

0801330c <_ZN8PongViewD0Ev>:
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f7ff ffe7 	bl	80132e8 <_ZN8PongViewD1Ev>
 801331a:	f641 6150 	movw	r1, #7760	; 0x1e50
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f012 fa50 	bl	80257c4 <_ZdlPvj>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	4618      	mov	r0, r3
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
	...

08013330 <_ZN8PongViewC1Ev>:
#include <gui/pong_screen/PongView.hpp>

#include <touchgfx/lcd/LCD.hpp>

PongView::PongView()
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	4618      	mov	r0, r3
 801333c:	f7fe f96e 	bl	801161c <_ZN12PongViewBaseC1Ev>
 8013340:	4a18      	ldr	r2, [pc, #96]	; (80133a4 <_ZN8PongViewC1Ev+0x74>)
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	601a      	str	r2, [r3, #0]
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	f641 6324 	movw	r3, #7716	; 0x1e24
 801334c:	4413      	add	r3, r2
 801334e:	2201      	movs	r2, #1
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013358:	4413      	add	r3, r2
 801335a:	2201      	movs	r2, #1
 801335c:	601a      	str	r2, [r3, #0]
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8013364:	4413      	add	r3, r2
 8013366:	2204      	movs	r2, #4
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013370:	4413      	add	r3, r2
 8013372:	2228      	movs	r2, #40	; 0x28
 8013374:	601a      	str	r2, [r3, #0]
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	f641 6334 	movw	r3, #7732	; 0x1e34
 801337c:	4413      	add	r3, r2
 801337e:	2200      	movs	r2, #0
 8013380:	601a      	str	r2, [r3, #0]
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8013388:	4413      	add	r3, r2
 801338a:	2200      	movs	r2, #0
 801338c:	601a      	str	r2, [r3, #0]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8013394:	2200      	movs	r2, #0
 8013396:	601a      	str	r2, [r3, #0]
{

}
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	4618      	mov	r0, r3
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	080289b4 	.word	0x080289b4

080133a8 <_ZN8PongView11setupScreenEv>:

void PongView::setupScreen()
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
    PongViewBase::setupScreen();
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fe fb22 	bl	80119fc <_ZN12PongViewBase11setupScreenEv>
    color[0] = 6;
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	f641 6344 	movw	r3, #7748	; 0x1e44
 80133be:	4413      	add	r3, r2
 80133c0:	2206      	movs	r2, #6
 80133c2:	601a      	str	r2, [r3, #0]
    color[1] = 255;
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	f641 6348 	movw	r3, #7752	; 0x1e48
 80133ca:	4413      	add	r3, r2
 80133cc:	22ff      	movs	r2, #255	; 0xff
 80133ce:	601a      	str	r2, [r3, #0]
    color[2] = 141;
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	f641 634c 	movw	r3, #7756	; 0x1e4c
 80133d6:	4413      	add	r3, r2
 80133d8:	228d      	movs	r2, #141	; 0x8d
 80133da:	601a      	str	r2, [r3, #0]
}
 80133dc:	bf00      	nop
 80133de:	3708      	adds	r7, #8
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}

080133e4 <_ZN8PongView14tearDownScreenEv>:

void PongView::tearDownScreen()
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
    PongViewBase::tearDownScreen();
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fc f830 	bl	800f454 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80133f4:	bf00      	nop
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <_ZN8PongView9move_leftEv>:

void PongView::move_left(){
 80133fc:	b590      	push	{r4, r7, lr}
 80133fe:	b083      	sub	sp, #12
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801340a:	22ff      	movs	r2, #255	; 0xff
 801340c:	21ff      	movs	r1, #255	; 0xff
 801340e:	20ff      	movs	r0, #255	; 0xff
 8013410:	f7fc f9d0 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013414:	4603      	mov	r3, r0
 8013416:	4619      	mov	r1, r3
 8013418:	4620      	mov	r0, r4
 801341a:	f7fc f8a3 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	33ec      	adds	r3, #236	; 0xec
 8013422:	4618      	mov	r0, r3
 8013424:	f006 fc9c 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()-20);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	33ec      	adds	r3, #236	; 0xec
 8013432:	4618      	mov	r0, r3
 8013434:	f7f9 f877 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 8013438:	4603      	mov	r3, r0
 801343a:	b29b      	uxth	r3, r3
 801343c:	3b14      	subs	r3, #20
 801343e:	b29b      	uxth	r3, r3
 8013440:	b21b      	sxth	r3, r3
 8013442:	4619      	mov	r1, r3
 8013444:	4620      	mov	r0, r4
 8013446:	f7f9 f888 	bl	800c55a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013450:	22ff      	movs	r2, #255	; 0xff
 8013452:	2180      	movs	r1, #128	; 0x80
 8013454:	2006      	movs	r0, #6
 8013456:	f7fc f9ad 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801345a:	4603      	mov	r3, r0
 801345c:	4619      	mov	r1, r3
 801345e:	4620      	mov	r0, r4
 8013460:	f7fc f880 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	33ec      	adds	r3, #236	; 0xec
 8013468:	4618      	mov	r0, r3
 801346a:	f006 fc79 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801346e:	bf00      	nop
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	bd90      	pop	{r4, r7, pc}

08013476 <_ZN8PongView10move_rightEv>:

void PongView::move_right(){
 8013476:	b590      	push	{r4, r7, lr}
 8013478:	b083      	sub	sp, #12
 801347a:	af00      	add	r7, sp, #0
 801347c:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 8013484:	22ff      	movs	r2, #255	; 0xff
 8013486:	21ff      	movs	r1, #255	; 0xff
 8013488:	20ff      	movs	r0, #255	; 0xff
 801348a:	f7fc f993 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801348e:	4603      	mov	r3, r0
 8013490:	4619      	mov	r1, r3
 8013492:	4620      	mov	r0, r4
 8013494:	f7fc f866 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	33ec      	adds	r3, #236	; 0xec
 801349c:	4618      	mov	r0, r3
 801349e:	f006 fc5f 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()+20);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	33ec      	adds	r3, #236	; 0xec
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7f9 f83a 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 80134b2:	4603      	mov	r3, r0
 80134b4:	b29b      	uxth	r3, r3
 80134b6:	3314      	adds	r3, #20
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	b21b      	sxth	r3, r3
 80134bc:	4619      	mov	r1, r3
 80134be:	4620      	mov	r0, r4
 80134c0:	f7f9 f84b 	bl	800c55a <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80134ca:	22ff      	movs	r2, #255	; 0xff
 80134cc:	2180      	movs	r1, #128	; 0x80
 80134ce:	2006      	movs	r0, #6
 80134d0:	f7fc f970 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134d4:	4603      	mov	r3, r0
 80134d6:	4619      	mov	r1, r3
 80134d8:	4620      	mov	r0, r4
 80134da:	f7fc f843 	bl	800f564 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	33ec      	adds	r3, #236	; 0xec
 80134e2:	4618      	mov	r0, r3
 80134e4:	f006 fc3c 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80134e8:	bf00      	nop
 80134ea:	370c      	adds	r7, #12
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd90      	pop	{r4, r7, pc}

080134f0 <_ZN8PongView15handleTickEventEv>:

void PongView::handleTickEvent(){
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
	tick ++;
 80134f8:	687a      	ldr	r2, [r7, #4]
 80134fa:	f641 6334 	movw	r3, #7732	; 0x1e34
 80134fe:	4413      	add	r3, r2
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	1c5a      	adds	r2, r3, #1
 8013504:	6879      	ldr	r1, [r7, #4]
 8013506:	f641 6334 	movw	r3, #7732	; 0x1e34
 801350a:	440b      	add	r3, r1
 801350c:	601a      	str	r2, [r3, #0]
	move_ball();
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f000 f804 	bl	801351c <_ZN8PongView9move_ballEv>

}
 8013514:	bf00      	nop
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <_ZN8PongView9move_ballEv>:

void PongView::move_ball(){\
 801351c:	b590      	push	{r4, r7, lr}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]

	// move ball
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 801352a:	22ff      	movs	r2, #255	; 0xff
 801352c:	21ff      	movs	r1, #255	; 0xff
 801352e:	20ff      	movs	r0, #255	; 0xff
 8013530:	f7fc f940 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013534:	4603      	mov	r3, r0
 8013536:	4619      	mov	r1, r3
 8013538:	4620      	mov	r0, r4
 801353a:	f7fd ffbd 	bl	80114b8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	336c      	adds	r3, #108	; 0x6c
 8013542:	4618      	mov	r0, r3
 8013544:	f003 ffc6 	bl	80174d4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	ball.setY(ball.getY() +  ball_vertical_direction*ball_speed);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	336c      	adds	r3, #108	; 0x6c
 8013552:	4618      	mov	r0, r3
 8013554:	f7f8 fff4 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 8013558:	4603      	mov	r3, r0
 801355a:	b29a      	uxth	r2, r3
 801355c:	6879      	ldr	r1, [r7, #4]
 801355e:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013562:	440b      	add	r3, r1
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	b299      	uxth	r1, r3
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f641 632c 	movw	r3, #7724	; 0x1e2c
 801356e:	4403      	add	r3, r0
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	b29b      	uxth	r3, r3
 8013574:	fb11 f303 	smulbb	r3, r1, r3
 8013578:	b29b      	uxth	r3, r3
 801357a:	4413      	add	r3, r2
 801357c:	b29b      	uxth	r3, r3
 801357e:	b21b      	sxth	r3, r3
 8013580:	4619      	mov	r1, r3
 8013582:	4620      	mov	r0, r4
 8013584:	f7f8 fff8 	bl	800c578 <_ZN8touchgfx8Drawable4setYEs>
	ball.setX(ball.getX() +  ball_horizontal_direction*ball_speed);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	336c      	adds	r3, #108	; 0x6c
 8013592:	4618      	mov	r0, r3
 8013594:	f7f8 ffc7 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 8013598:	4603      	mov	r3, r0
 801359a:	b29a      	uxth	r2, r3
 801359c:	6879      	ldr	r1, [r7, #4]
 801359e:	f641 6328 	movw	r3, #7720	; 0x1e28
 80135a2:	440b      	add	r3, r1
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	b299      	uxth	r1, r3
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80135ae:	4403      	add	r3, r0
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	fb11 f303 	smulbb	r3, r1, r3
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	4413      	add	r3, r2
 80135bc:	b29b      	uxth	r3, r3
 80135be:	b21b      	sxth	r3, r3
 80135c0:	4619      	mov	r1, r3
 80135c2:	4620      	mov	r0, r4
 80135c4:	f7f8 ffc9 	bl	800c55a <_ZN8touchgfx8Drawable4setXEs>
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(color[0], color[1], color[2]));
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	f641 6344 	movw	r3, #7748	; 0x1e44
 80135d4:	4413      	add	r3, r2
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	b2d8      	uxtb	r0, r3
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	f641 6348 	movw	r3, #7752	; 0x1e48
 80135e0:	4413      	add	r3, r2
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	b2d9      	uxtb	r1, r3
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	f641 634c 	movw	r3, #7756	; 0x1e4c
 80135ec:	4413      	add	r3, r2
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	461a      	mov	r2, r3
 80135f4:	f7fc f8de 	bl	800f7b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80135f8:	4603      	mov	r3, r0
 80135fa:	4619      	mov	r1, r3
 80135fc:	4620      	mov	r0, r4
 80135fe:	f7fd ff5b 	bl	80114b8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	336c      	adds	r3, #108	; 0x6c
 8013606:	4618      	mov	r0, r3
 8013608:	f003 ff64 	bl	80174d4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>


	if(check_collision()==1){
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f000 f8f1 	bl	80137f4 <_ZN8PongView15check_collisionEv>
 8013612:	4603      	mov	r3, r0
 8013614:	2b01      	cmp	r3, #1
 8013616:	bf0c      	ite	eq
 8013618:	2301      	moveq	r3, #1
 801361a:	2300      	movne	r3, #0
 801361c:	b2db      	uxtb	r3, r3
 801361e:	2b00      	cmp	r3, #0
 8013620:	f000 808c 	beq.w	801373c <_ZN8PongView9move_ballEv+0x220>
		ball_vertical_direction = -1;
 8013624:	687a      	ldr	r2, [r7, #4]
 8013626:	f641 6324 	movw	r3, #7716	; 0x1e24
 801362a:	4413      	add	r3, r2
 801362c:	f04f 32ff 	mov.w	r2, #4294967295
 8013630:	601a      	str	r2, [r3, #0]

		if(collide_count % 20 == 0){
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8013638:	6819      	ldr	r1, [r3, #0]
 801363a:	4b6b      	ldr	r3, [pc, #428]	; (80137e8 <_ZN8PongView9move_ballEv+0x2cc>)
 801363c:	fb83 2301 	smull	r2, r3, r3, r1
 8013640:	10da      	asrs	r2, r3, #3
 8013642:	17cb      	asrs	r3, r1, #31
 8013644:	1ad2      	subs	r2, r2, r3
 8013646:	4613      	mov	r3, r2
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	4413      	add	r3, r2
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	1aca      	subs	r2, r1, r3
 8013650:	2a00      	cmp	r2, #0
 8013652:	d14e      	bne.n	80136f2 <_ZN8PongView9move_ballEv+0x1d6>
			ball_speed = ball_speed  + 1;
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	f641 632c 	movw	r3, #7724	; 0x1e2c
 801365a:	4413      	add	r3, r2
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	1c5a      	adds	r2, r3, #1
 8013660:	6879      	ldr	r1, [r7, #4]
 8013662:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8013666:	440b      	add	r3, r1
 8013668:	601a      	str	r2, [r3, #0]
			sc = sc+1;
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	f641 633c 	movw	r3, #7740	; 0x1e3c
 8013670:	4413      	add	r3, r2
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	1c5a      	adds	r2, r3, #1
 8013676:	6879      	ldr	r1, [r7, #4]
 8013678:	f641 633c 	movw	r3, #7740	; 0x1e3c
 801367c:	440b      	add	r3, r1
 801367e:	601a      	str	r2, [r3, #0]
			Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", sc);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f503 70e6 	add.w	r0, r3, #460	; 0x1cc
 8013686:	687a      	ldr	r2, [r7, #4]
 8013688:	f641 633c 	movw	r3, #7740	; 0x1e3c
 801368c:	4413      	add	r3, r2
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4a56      	ldr	r2, [pc, #344]	; (80137ec <_ZN8PongView9move_ballEv+0x2d0>)
 8013692:	2114      	movs	r1, #20
 8013694:	f008 f99c 	bl	801b9d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			score.invalidate();
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801369e:	4618      	mov	r0, r3
 80136a0:	f006 fb5e 	bl	8019d60 <_ZNK8touchgfx8Drawable10invalidateEv>

		    color[0] =  ( std::rand() % ( 255 + 1 ) );
 80136a4:	f012 fcbc 	bl	8026020 <rand>
 80136a8:	4603      	mov	r3, r0
 80136aa:	425a      	negs	r2, r3
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	b2d2      	uxtb	r2, r2
 80136b0:	bf58      	it	pl
 80136b2:	4253      	negpl	r3, r2
 80136b4:	6879      	ldr	r1, [r7, #4]
 80136b6:	f641 6244 	movw	r2, #7748	; 0x1e44
 80136ba:	440a      	add	r2, r1
 80136bc:	6013      	str	r3, [r2, #0]
		    color[1] =  ( std::rand() % ( 255 + 1 ) );
 80136be:	f012 fcaf 	bl	8026020 <rand>
 80136c2:	4603      	mov	r3, r0
 80136c4:	425a      	negs	r2, r3
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	b2d2      	uxtb	r2, r2
 80136ca:	bf58      	it	pl
 80136cc:	4253      	negpl	r3, r2
 80136ce:	6879      	ldr	r1, [r7, #4]
 80136d0:	f641 6248 	movw	r2, #7752	; 0x1e48
 80136d4:	440a      	add	r2, r1
 80136d6:	6013      	str	r3, [r2, #0]
		    color[2] =  ( std::rand() % ( 255 + 1 ) );
 80136d8:	f012 fca2 	bl	8026020 <rand>
 80136dc:	4603      	mov	r3, r0
 80136de:	425a      	negs	r2, r3
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	b2d2      	uxtb	r2, r2
 80136e4:	bf58      	it	pl
 80136e6:	4253      	negpl	r3, r2
 80136e8:	6879      	ldr	r1, [r7, #4]
 80136ea:	f641 624c 	movw	r2, #7756	; 0x1e4c
 80136ee:	440a      	add	r2, r1
 80136f0:	6013      	str	r3, [r2, #0]
		}
		collide_count ++;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	1c5a      	adds	r2, r3, #1
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f503 53f2 	add.w	r3, r3, #7744	; 0x1e40
 8013702:	601a      	str	r2, [r3, #0]

		if(ball_horizontal_direction==1){
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	f641 6328 	movw	r3, #7720	; 0x1e28
 801370a:	4413      	add	r3, r2
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2b01      	cmp	r3, #1
 8013710:	d106      	bne.n	8013720 <_ZN8PongView9move_ballEv+0x204>
			ball_horizontal_direction = 2;
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013718:	4413      	add	r3, r2
 801371a:	2202      	movs	r2, #2
 801371c:	601a      	str	r2, [r3, #0]
	else if(check_collision()==5){
		pong_score = sc;
		application().gotogameoverScreenNoTransition();
	}

}
 801371e:	e05e      	b.n	80137de <_ZN8PongView9move_ballEv+0x2c2>
		else if (ball_horizontal_direction==2){
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013726:	4413      	add	r3, r2
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b02      	cmp	r3, #2
 801372c:	d157      	bne.n	80137de <_ZN8PongView9move_ballEv+0x2c2>
			ball_horizontal_direction = 1;
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	f641 6328 	movw	r3, #7720	; 0x1e28
 8013734:	4413      	add	r3, r2
 8013736:	2201      	movs	r2, #1
 8013738:	601a      	str	r2, [r3, #0]
}
 801373a:	e050      	b.n	80137de <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==2){
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f000 f859 	bl	80137f4 <_ZN8PongView15check_collisionEv>
 8013742:	4603      	mov	r3, r0
 8013744:	2b02      	cmp	r3, #2
 8013746:	bf0c      	ite	eq
 8013748:	2301      	moveq	r3, #1
 801374a:	2300      	movne	r3, #0
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d006      	beq.n	8013760 <_ZN8PongView9move_ballEv+0x244>
		ball_vertical_direction = 1;
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013758:	4413      	add	r3, r2
 801375a:	2201      	movs	r2, #1
 801375c:	601a      	str	r2, [r3, #0]
}
 801375e:	e03e      	b.n	80137de <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==3){
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 f847 	bl	80137f4 <_ZN8PongView15check_collisionEv>
 8013766:	4603      	mov	r3, r0
 8013768:	2b03      	cmp	r3, #3
 801376a:	bf0c      	ite	eq
 801376c:	2301      	moveq	r3, #1
 801376e:	2300      	movne	r3, #0
 8013770:	b2db      	uxtb	r3, r3
 8013772:	2b00      	cmp	r3, #0
 8013774:	d006      	beq.n	8013784 <_ZN8PongView9move_ballEv+0x268>
		ball_horizontal_direction = 1;
 8013776:	687a      	ldr	r2, [r7, #4]
 8013778:	f641 6328 	movw	r3, #7720	; 0x1e28
 801377c:	4413      	add	r3, r2
 801377e:	2201      	movs	r2, #1
 8013780:	601a      	str	r2, [r3, #0]
}
 8013782:	e02c      	b.n	80137de <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==4){
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f000 f835 	bl	80137f4 <_ZN8PongView15check_collisionEv>
 801378a:	4603      	mov	r3, r0
 801378c:	2b04      	cmp	r3, #4
 801378e:	bf0c      	ite	eq
 8013790:	2301      	moveq	r3, #1
 8013792:	2300      	movne	r3, #0
 8013794:	b2db      	uxtb	r3, r3
 8013796:	2b00      	cmp	r3, #0
 8013798:	d007      	beq.n	80137aa <_ZN8PongView9move_ballEv+0x28e>
		ball_horizontal_direction = -1;
 801379a:	687a      	ldr	r2, [r7, #4]
 801379c:	f641 6328 	movw	r3, #7720	; 0x1e28
 80137a0:	4413      	add	r3, r2
 80137a2:	f04f 32ff 	mov.w	r2, #4294967295
 80137a6:	601a      	str	r2, [r3, #0]
}
 80137a8:	e019      	b.n	80137de <_ZN8PongView9move_ballEv+0x2c2>
	else if(check_collision()==5){
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 f822 	bl	80137f4 <_ZN8PongView15check_collisionEv>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2b05      	cmp	r3, #5
 80137b4:	bf0c      	ite	eq
 80137b6:	2301      	moveq	r3, #1
 80137b8:	2300      	movne	r3, #0
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d00e      	beq.n	80137de <_ZN8PongView9move_ballEv+0x2c2>
		pong_score = sc;
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	f641 633c 	movw	r3, #7740	; 0x1e3c
 80137c6:	4413      	add	r3, r2
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4a09      	ldr	r2, [pc, #36]	; (80137f0 <_ZN8PongView9move_ballEv+0x2d4>)
 80137cc:	6013      	str	r3, [r2, #0]
		application().gotogameoverScreenNoTransition();
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fd ff18 	bl	8011606 <_ZN12PongViewBase11applicationEv>
 80137d6:	4603      	mov	r3, r0
 80137d8:	4618      	mov	r0, r3
 80137da:	f7f9 fa9d 	bl	800cd18 <_ZN23FrontendApplicationBase30gotogameoverScreenNoTransitionEv>
}
 80137de:	bf00      	nop
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd90      	pop	{r4, r7, pc}
 80137e6:	bf00      	nop
 80137e8:	66666667 	.word	0x66666667
 80137ec:	080271cc 	.word	0x080271cc
 80137f0:	2000b9c4 	.word	0x2000b9c4

080137f4 <_ZN8PongView15check_collisionEv>:

int PongView::check_collision(){
 80137f4:	b5b0      	push	{r4, r5, r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
	// collide with paddle
	if( ball.getY()+ball.getHeight()-margin<=paddle1.getY()+paddle1.getHeight() && ball.getY()+ball.getHeight()-margin>=paddle1.getY()-paddle1.getHeight() && ball.getX() + margin - 110 >= paddle1.getX() - paddle1.getWidth() && ball.getX() + margin <= paddle1.getX() + paddle1.getWidth()){
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	336c      	adds	r3, #108	; 0x6c
 8013800:	4618      	mov	r0, r3
 8013802:	f7f8 fe9d 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 8013806:	4603      	mov	r3, r0
 8013808:	461c      	mov	r4, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	336c      	adds	r3, #108	; 0x6c
 801380e:	4618      	mov	r0, r3
 8013810:	f7ff fd5d 	bl	80132ce <_ZNK8touchgfx8Drawable9getHeightEv>
 8013814:	4603      	mov	r3, r0
 8013816:	18e2      	adds	r2, r4, r3
 8013818:	6879      	ldr	r1, [r7, #4]
 801381a:	f641 6330 	movw	r3, #7728	; 0x1e30
 801381e:	440b      	add	r3, r1
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	1ad4      	subs	r4, r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	33ec      	adds	r3, #236	; 0xec
 8013828:	4618      	mov	r0, r3
 801382a:	f7f8 fe89 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 801382e:	4603      	mov	r3, r0
 8013830:	461d      	mov	r5, r3
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	33ec      	adds	r3, #236	; 0xec
 8013836:	4618      	mov	r0, r3
 8013838:	f7ff fd49 	bl	80132ce <_ZNK8touchgfx8Drawable9getHeightEv>
 801383c:	4603      	mov	r3, r0
 801383e:	442b      	add	r3, r5
 8013840:	429c      	cmp	r4, r3
 8013842:	dc61      	bgt.n	8013908 <_ZN8PongView15check_collisionEv+0x114>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	336c      	adds	r3, #108	; 0x6c
 8013848:	4618      	mov	r0, r3
 801384a:	f7f8 fe79 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 801384e:	4603      	mov	r3, r0
 8013850:	461c      	mov	r4, r3
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	336c      	adds	r3, #108	; 0x6c
 8013856:	4618      	mov	r0, r3
 8013858:	f7ff fd39 	bl	80132ce <_ZNK8touchgfx8Drawable9getHeightEv>
 801385c:	4603      	mov	r3, r0
 801385e:	18e2      	adds	r2, r4, r3
 8013860:	6879      	ldr	r1, [r7, #4]
 8013862:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013866:	440b      	add	r3, r1
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	1ad4      	subs	r4, r2, r3
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	33ec      	adds	r3, #236	; 0xec
 8013870:	4618      	mov	r0, r3
 8013872:	f7f8 fe65 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 8013876:	4603      	mov	r3, r0
 8013878:	461d      	mov	r5, r3
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	33ec      	adds	r3, #236	; 0xec
 801387e:	4618      	mov	r0, r3
 8013880:	f7ff fd25 	bl	80132ce <_ZNK8touchgfx8Drawable9getHeightEv>
 8013884:	4603      	mov	r3, r0
 8013886:	1aeb      	subs	r3, r5, r3
 8013888:	429c      	cmp	r4, r3
 801388a:	db3d      	blt.n	8013908 <_ZN8PongView15check_collisionEv+0x114>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	336c      	adds	r3, #108	; 0x6c
 8013890:	4618      	mov	r0, r3
 8013892:	f7f8 fe48 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 8013896:	4603      	mov	r3, r0
 8013898:	4619      	mov	r1, r3
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	f641 6330 	movw	r3, #7728	; 0x1e30
 80138a0:	4413      	add	r3, r2
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	440b      	add	r3, r1
 80138a6:	f1a3 046e 	sub.w	r4, r3, #110	; 0x6e
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	33ec      	adds	r3, #236	; 0xec
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7f8 fe39 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 80138b4:	4603      	mov	r3, r0
 80138b6:	461d      	mov	r5, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	33ec      	adds	r3, #236	; 0xec
 80138bc:	4618      	mov	r0, r3
 80138be:	f7ff fcf9 	bl	80132b4 <_ZNK8touchgfx8Drawable8getWidthEv>
 80138c2:	4603      	mov	r3, r0
 80138c4:	1aeb      	subs	r3, r5, r3
 80138c6:	429c      	cmp	r4, r3
 80138c8:	db1e      	blt.n	8013908 <_ZN8PongView15check_collisionEv+0x114>
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	336c      	adds	r3, #108	; 0x6c
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7f8 fe29 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 80138d4:	4603      	mov	r3, r0
 80138d6:	4619      	mov	r1, r3
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	f641 6330 	movw	r3, #7728	; 0x1e30
 80138de:	4413      	add	r3, r2
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	18cc      	adds	r4, r1, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	33ec      	adds	r3, #236	; 0xec
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7f8 fe1c 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 80138ee:	4603      	mov	r3, r0
 80138f0:	461d      	mov	r5, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	33ec      	adds	r3, #236	; 0xec
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7ff fcdc 	bl	80132b4 <_ZNK8touchgfx8Drawable8getWidthEv>
 80138fc:	4603      	mov	r3, r0
 80138fe:	442b      	add	r3, r5
 8013900:	429c      	cmp	r4, r3
 8013902:	dc01      	bgt.n	8013908 <_ZN8PongView15check_collisionEv+0x114>
 8013904:	2301      	movs	r3, #1
 8013906:	e000      	b.n	801390a <_ZN8PongView15check_collisionEv+0x116>
 8013908:	2300      	movs	r3, #0
 801390a:	2b00      	cmp	r3, #0
 801390c:	d001      	beq.n	8013912 <_ZN8PongView15check_collisionEv+0x11e>
		return 1;
 801390e:	2301      	movs	r3, #1
 8013910:	e064      	b.n	80139dc <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with wall
	if(ball.getY()+ball.getHeight()-margin-20<=0){
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	336c      	adds	r3, #108	; 0x6c
 8013916:	4618      	mov	r0, r3
 8013918:	f7f8 fe12 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 801391c:	4603      	mov	r3, r0
 801391e:	461c      	mov	r4, r3
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	336c      	adds	r3, #108	; 0x6c
 8013924:	4618      	mov	r0, r3
 8013926:	f7ff fcd2 	bl	80132ce <_ZNK8touchgfx8Drawable9getHeightEv>
 801392a:	4603      	mov	r3, r0
 801392c:	18e2      	adds	r2, r4, r3
 801392e:	6879      	ldr	r1, [r7, #4]
 8013930:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013934:	440b      	add	r3, r1
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	1ad3      	subs	r3, r2, r3
 801393a:	3b14      	subs	r3, #20
 801393c:	2b00      	cmp	r3, #0
 801393e:	bfd4      	ite	le
 8013940:	2301      	movle	r3, #1
 8013942:	2300      	movgt	r3, #0
 8013944:	b2db      	uxtb	r3, r3
 8013946:	2b00      	cmp	r3, #0
 8013948:	d001      	beq.n	801394e <_ZN8PongView15check_collisionEv+0x15a>
		return 2;
 801394a:	2302      	movs	r3, #2
 801394c:	e046      	b.n	80139dc <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with left wall
	if(ball.getX()+ball.getWidth()-margin-20<=0){
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	336c      	adds	r3, #108	; 0x6c
 8013952:	4618      	mov	r0, r3
 8013954:	f7f8 fde7 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 8013958:	4603      	mov	r3, r0
 801395a:	461c      	mov	r4, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	336c      	adds	r3, #108	; 0x6c
 8013960:	4618      	mov	r0, r3
 8013962:	f7ff fca7 	bl	80132b4 <_ZNK8touchgfx8Drawable8getWidthEv>
 8013966:	4603      	mov	r3, r0
 8013968:	18e2      	adds	r2, r4, r3
 801396a:	6879      	ldr	r1, [r7, #4]
 801396c:	f641 6330 	movw	r3, #7728	; 0x1e30
 8013970:	440b      	add	r3, r1
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	1ad3      	subs	r3, r2, r3
 8013976:	3b14      	subs	r3, #20
 8013978:	2b00      	cmp	r3, #0
 801397a:	bfd4      	ite	le
 801397c:	2301      	movle	r3, #1
 801397e:	2300      	movgt	r3, #0
 8013980:	b2db      	uxtb	r3, r3
 8013982:	2b00      	cmp	r3, #0
 8013984:	d001      	beq.n	801398a <_ZN8PongView15check_collisionEv+0x196>
		return 3;
 8013986:	2303      	movs	r3, #3
 8013988:	e028      	b.n	80139dc <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with right wall
	if(ball.getX()+ball.getWidth() >= 480){
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	336c      	adds	r3, #108	; 0x6c
 801398e:	4618      	mov	r0, r3
 8013990:	f7f8 fdc9 	bl	800c526 <_ZNK8touchgfx8Drawable4getXEv>
 8013994:	4603      	mov	r3, r0
 8013996:	461c      	mov	r4, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	336c      	adds	r3, #108	; 0x6c
 801399c:	4618      	mov	r0, r3
 801399e:	f7ff fc89 	bl	80132b4 <_ZNK8touchgfx8Drawable8getWidthEv>
 80139a2:	4603      	mov	r3, r0
 80139a4:	4423      	add	r3, r4
 80139a6:	f240 12df 	movw	r2, #479	; 0x1df
 80139aa:	4293      	cmp	r3, r2
 80139ac:	bfcc      	ite	gt
 80139ae:	2301      	movgt	r3, #1
 80139b0:	2300      	movle	r3, #0
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d001      	beq.n	80139bc <_ZN8PongView15check_collisionEv+0x1c8>
		return 4;
 80139b8:	2304      	movs	r3, #4
 80139ba:	e00f      	b.n	80139dc <_ZN8PongView15check_collisionEv+0x1e8>
	}

	// collide with bottom
	if(ball.getY() >= 250){
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	336c      	adds	r3, #108	; 0x6c
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7f8 fdbd 	bl	800c540 <_ZNK8touchgfx8Drawable4getYEv>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2bf9      	cmp	r3, #249	; 0xf9
 80139ca:	bfcc      	ite	gt
 80139cc:	2301      	movgt	r3, #1
 80139ce:	2300      	movle	r3, #0
 80139d0:	b2db      	uxtb	r3, r3
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d001      	beq.n	80139da <_ZN8PongView15check_collisionEv+0x1e6>
		return 5;
 80139d6:	2305      	movs	r3, #5
 80139d8:	e000      	b.n	80139dc <_ZN8PongView15check_collisionEv+0x1e8>
	}

	return 0;
 80139da:	2300      	movs	r3, #0
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3708      	adds	r7, #8
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bdb0      	pop	{r4, r5, r7, pc}

080139e4 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	4a09      	ldr	r2, [pc, #36]	; (8013a14 <_ZN15screenPresenterD1Ev+0x30>)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	601a      	str	r2, [r3, #0]
 80139f2:	4a09      	ldr	r2, [pc, #36]	; (8013a18 <_ZN15screenPresenterD1Ev+0x34>)
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	605a      	str	r2, [r3, #4]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	3304      	adds	r3, #4
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff f87b 	bl	8012af8 <_ZN13ModelListenerD1Ev>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7ff f833 	bl	8012a70 <_ZN8touchgfx9PresenterD1Ev>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3708      	adds	r7, #8
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}
 8013a14:	080289f0 	.word	0x080289f0
 8013a18:	08028a08 	.word	0x08028a08

08013a1c <_ZThn4_N15screenPresenterD1Ev>:
 8013a1c:	f1a0 0004 	sub.w	r0, r0, #4
 8013a20:	e7e0      	b.n	80139e4 <_ZN15screenPresenterD1Ev>
 8013a22:	bf00      	nop

08013a24 <_ZN15screenPresenterD0Ev>:
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b082      	sub	sp, #8
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7ff ffd9 	bl	80139e4 <_ZN15screenPresenterD1Ev>
 8013a32:	2110      	movs	r1, #16
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f011 fec5 	bl	80257c4 <_ZdlPvj>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3708      	adds	r7, #8
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <_ZThn4_N15screenPresenterD0Ev>:
 8013a44:	f1a0 0004 	sub.w	r0, r0, #4
 8013a48:	e7ec      	b.n	8013a24 <_ZN15screenPresenterD0Ev>
	...

08013a4c <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6039      	str	r1, [r7, #0]
    : view(v)
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7ff f829 	bl	8012ab0 <_ZN8touchgfx9PresenterC1Ev>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	3304      	adds	r3, #4
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7ff f834 	bl	8012ad0 <_ZN13ModelListenerC1Ev>
 8013a68:	4a06      	ldr	r2, [pc, #24]	; (8013a84 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	601a      	str	r2, [r3, #0]
 8013a6e:	4a06      	ldr	r2, [pc, #24]	; (8013a88 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	605a      	str	r2, [r3, #4]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	683a      	ldr	r2, [r7, #0]
 8013a78:	60da      	str	r2, [r3, #12]
{

}
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3708      	adds	r7, #8
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	080289f0 	.word	0x080289f0
 8013a88:	08028a08 	.word	0x08028a08

08013a8c <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]

}
 8013a94:	bf00      	nop
 8013a96:	370c      	adds	r7, #12
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr

08013aa0 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]

}
 8013aa8:	bf00      	nop
 8013aaa:	370c      	adds	r7, #12
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	4a05      	ldr	r2, [pc, #20]	; (8013ad4 <_ZN10screenViewD1Ev+0x20>)
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	601a      	str	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7fe fae9 	bl	801209c <_ZN14screenViewBaseD1Ev>
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	4618      	mov	r0, r3
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	08028a18 	.word	0x08028a18

08013ad8 <_ZN10screenViewD0Ev>:
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7ff ffe7 	bl	8013ab4 <_ZN10screenViewD1Ev>
 8013ae6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f011 fe6a 	bl	80257c4 <_ZdlPvj>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4618      	mov	r0, r3
 8013af4:	3708      	adds	r7, #8
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}
	...

08013afc <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fe fb12 	bl	8012130 <_ZN14screenViewBaseC1Ev>
 8013b0c:	4a03      	ldr	r2, [pc, #12]	; (8013b1c <_ZN10screenViewC1Ev+0x20>)
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	601a      	str	r2, [r3, #0]
{

}
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	4618      	mov	r0, r3
 8013b16:	3708      	adds	r7, #8
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}
 8013b1c:	08028a18 	.word	0x08028a18

08013b20 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fe fc70 	bl	8012410 <_ZN14screenViewBase11setupScreenEv>

}
 8013b30:	bf00      	nop
 8013b32:	3708      	adds	r7, #8
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7fb fc86 	bl	800f454 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013b48:	bf00      	nop
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013b50:	b480      	push	{r7}
 8013b52:	b083      	sub	sp, #12
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
    {
 8013b58:	4a04      	ldr	r2, [pc, #16]	; (8013b6c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	601a      	str	r2, [r3, #0]
    }
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	4618      	mov	r0, r3
 8013b62:	370c      	adds	r7, #12
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr
 8013b6c:	08028a64 	.word	0x08028a64

08013b70 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b082      	sub	sp, #8
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
    }
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff ffe9 	bl	8013b50 <_ZN8touchgfx15TouchControllerD1Ev>
 8013b7e:	2104      	movs	r1, #4
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f011 fe1f 	bl	80257c4 <_ZdlPvj>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3708      	adds	r7, #8
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}

08013b90 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 8013b98:	4b05      	ldr	r3, [pc, #20]	; (8013bb0 <_ZN20STM32TouchController4initEv+0x20>)
 8013b9a:	4a06      	ldr	r2, [pc, #24]	; (8013bb4 <_ZN20STM32TouchController4initEv+0x24>)
 8013b9c:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 8013b9e:	4b04      	ldr	r3, [pc, #16]	; (8013bb0 <_ZN20STM32TouchController4initEv+0x20>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	2070      	movs	r0, #112	; 0x70
 8013ba6:	4798      	blx	r3

}
 8013ba8:	bf00      	nop
 8013baa:	3708      	adds	r7, #8
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}
 8013bb0:	2000861c 	.word	0x2000861c
 8013bb4:	20000004 	.word	0x20000004

08013bb8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	60f8      	str	r0, [r7, #12]
 8013bc0:	60b9      	str	r1, [r7, #8]
 8013bc2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 8013bc4:	4b0f      	ldr	r3, [pc, #60]	; (8013c04 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d015      	beq.n	8013bf8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8013bcc:	4b0d      	ldr	r3, [pc, #52]	; (8013c04 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	691b      	ldr	r3, [r3, #16]
 8013bd2:	2070      	movs	r0, #112	; 0x70
 8013bd4:	4798      	blx	r3
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	bf14      	ite	ne
 8013bdc:	2301      	movne	r3, #1
 8013bde:	2300      	moveq	r3, #0
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d008      	beq.n	8013bf8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8013be6:	4b07      	ldr	r3, [pc, #28]	; (8013c04 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	695b      	ldr	r3, [r3, #20]
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	6879      	ldr	r1, [r7, #4]
 8013bf0:	2070      	movs	r0, #112	; 0x70
 8013bf2:	4798      	blx	r3
	            return true;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	e000      	b.n	8013bfa <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 8013bf8:	2300      	movs	r3, #0
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3710      	adds	r7, #16
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	2000861c 	.word	0x2000861c

08013c08 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	4a05      	ldr	r2, [pc, #20]	; (8013c28 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	601a      	str	r2, [r3, #0]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7ff ff99 	bl	8013b50 <_ZN8touchgfx15TouchControllerD1Ev>
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	4618      	mov	r0, r3
 8013c22:	3708      	adds	r7, #8
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}
 8013c28:	08028a4c 	.word	0x08028a4c

08013c2c <_ZN20STM32TouchControllerD0Ev>:
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f7ff ffe7 	bl	8013c08 <_ZN20STM32TouchControllerD1Ev>
 8013c3a:	2104      	movs	r1, #4
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f011 fdc1 	bl	80257c4 <_ZdlPvj>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	4618      	mov	r0, r3
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}

08013c4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	4603      	mov	r3, r0
 8013c54:	71fb      	strb	r3, [r7, #7]

}
 8013c56:	bf00      	nop
 8013c58:	370c      	adds	r7, #12
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr

08013c62 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013c62:	b480      	push	{r7}
 8013c64:	b083      	sub	sp, #12
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	4603      	mov	r3, r0
 8013c6a:	71fb      	strb	r3, [r7, #7]

}
 8013c6c:	bf00      	nop
 8013c6e:	370c      	adds	r7, #12
 8013c70:	46bd      	mov	sp, r7
 8013c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c76:	4770      	bx	lr

08013c78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	4603      	mov	r3, r0
 8013c80:	71fb      	strb	r3, [r7, #7]

}
 8013c82:	bf00      	nop
 8013c84:	370c      	adds	r7, #12
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
	...

08013c90 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013c90:	b480      	push	{r7}
 8013c92:	b083      	sub	sp, #12
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
    {
 8013c98:	4a04      	ldr	r2, [pc, #16]	; (8013cac <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	601a      	str	r2, [r3, #0]
    }
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	370c      	adds	r7, #12
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr
 8013cac:	080293a4 	.word	0x080293a4

08013cb0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
    }
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f7ff ffe9 	bl	8013c90 <_ZN8touchgfx3HALD1Ev>
 8013cbe:	2178      	movs	r1, #120	; 0x78
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f011 fd7f 	bl	80257c4 <_ZdlPvj>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3708      	adds	r7, #8
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013cd0:	b480      	push	{r7}
 8013cd2:	b083      	sub	sp, #12
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	460b      	mov	r3, r1
 8013cda:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	78fa      	ldrb	r2, [r7, #3]
 8013ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013cec:	bf00      	nop
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr

08013cf8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	685a      	ldr	r2, [r3, #4]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	4610      	mov	r0, r2
 8013d0e:	4798      	blx	r3
 8013d10:	4603      	mov	r3, r0
    }
 8013d12:	4618      	mov	r0, r3
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8013d1a:	b580      	push	{r7, lr}
 8013d1c:	b082      	sub	sp, #8
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f002 fd9c 	bl	8016860 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	3390      	adds	r3, #144	; 0x90
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	4798      	blx	r3
    }
 8013d34:	bf00      	nop
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8013d3c:	b480      	push	{r7}
 8013d3e:	b083      	sub	sp, #12
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	6039      	str	r1, [r7, #0]
        return false;
 8013d46:	2300      	movs	r3, #0
    }
 8013d48:	4618      	mov	r0, r3
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8013d54:	b590      	push	{r4, r7, lr}
 8013d56:	b08b      	sub	sp, #44	; 0x2c
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	60b9      	str	r1, [r7, #8]
 8013d5e:	4611      	mov	r1, r2
 8013d60:	461a      	mov	r2, r3
 8013d62:	460b      	mov	r3, r1
 8013d64:	80fb      	strh	r3, [r7, #6]
 8013d66:	4613      	mov	r3, r2
 8013d68:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8013d6a:	f7f8 fcf9 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8013d6e:	4602      	mov	r2, r0
 8013d70:	6813      	ldr	r3, [r2, #0]
 8013d72:	3324      	adds	r3, #36	; 0x24
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4610      	mov	r0, r2
 8013d78:	4798      	blx	r3
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8013d7e:	8b7b      	ldrh	r3, [r7, #26]
 8013d80:	4a3d      	ldr	r2, [pc, #244]	; (8013e78 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8013d82:	8812      	ldrh	r2, [r2, #0]
 8013d84:	fb02 f303 	mul.w	r3, r2, r3
 8013d88:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8013d92:	2300      	movs	r3, #0
 8013d94:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013d96:	797b      	ldrb	r3, [r7, #5]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d005      	beq.n	8013da8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8013d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	4413      	add	r3, r2
 8013da2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8013da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da6:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8013da8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d005      	beq.n	8013dbc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8013db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	4413      	add	r3, r2
 8013db6:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8013db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dba:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8013dbc:	88fb      	ldrh	r3, [r7, #6]
 8013dbe:	3b01      	subs	r3, #1
 8013dc0:	2b1f      	cmp	r3, #31
 8013dc2:	d84d      	bhi.n	8013e60 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8013dc4:	a201      	add	r2, pc, #4	; (adr r2, 8013dcc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8013dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dca:	bf00      	nop
 8013dcc:	08013e4d 	.word	0x08013e4d
 8013dd0:	08013e4d 	.word	0x08013e4d
 8013dd4:	08013e61 	.word	0x08013e61
 8013dd8:	08013e4d 	.word	0x08013e4d
 8013ddc:	08013e61 	.word	0x08013e61
 8013de0:	08013e61 	.word	0x08013e61
 8013de4:	08013e61 	.word	0x08013e61
 8013de8:	08013e4d 	.word	0x08013e4d
 8013dec:	08013e61 	.word	0x08013e61
 8013df0:	08013e61 	.word	0x08013e61
 8013df4:	08013e61 	.word	0x08013e61
 8013df8:	08013e61 	.word	0x08013e61
 8013dfc:	08013e61 	.word	0x08013e61
 8013e00:	08013e61 	.word	0x08013e61
 8013e04:	08013e61 	.word	0x08013e61
 8013e08:	08013e4d 	.word	0x08013e4d
 8013e0c:	08013e61 	.word	0x08013e61
 8013e10:	08013e61 	.word	0x08013e61
 8013e14:	08013e61 	.word	0x08013e61
 8013e18:	08013e61 	.word	0x08013e61
 8013e1c:	08013e61 	.word	0x08013e61
 8013e20:	08013e61 	.word	0x08013e61
 8013e24:	08013e61 	.word	0x08013e61
 8013e28:	08013e4d 	.word	0x08013e4d
 8013e2c:	08013e61 	.word	0x08013e61
 8013e30:	08013e61 	.word	0x08013e61
 8013e34:	08013e61 	.word	0x08013e61
 8013e38:	08013e61 	.word	0x08013e61
 8013e3c:	08013e61 	.word	0x08013e61
 8013e40:	08013e61 	.word	0x08013e61
 8013e44:	08013e61 	.word	0x08013e61
 8013e48:	08013e4d 	.word	0x08013e4d
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	3374      	adds	r3, #116	; 0x74
 8013e52:	681c      	ldr	r4, [r3, #0]
 8013e54:	69fb      	ldr	r3, [r7, #28]
 8013e56:	6a3a      	ldr	r2, [r7, #32]
 8013e58:	68b9      	ldr	r1, [r7, #8]
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	47a0      	blx	r4
            break;
 8013e5e:	e006      	b.n	8013e6e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8013e60:	4b06      	ldr	r3, [pc, #24]	; (8013e7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8013e62:	4a07      	ldr	r2, [pc, #28]	; (8013e80 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8013e64:	f240 216f 	movw	r1, #623	; 0x26f
 8013e68:	4806      	ldr	r0, [pc, #24]	; (8013e84 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8013e6a:	f011 fcd7 	bl	802581c <__assert_func>
    }
 8013e6e:	bf00      	nop
 8013e70:	372c      	adds	r7, #44	; 0x2c
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd90      	pop	{r4, r7, pc}
 8013e76:	bf00      	nop
 8013e78:	2000b36c 	.word	0x2000b36c
 8013e7c:	080271d0 	.word	0x080271d0
 8013e80:	08028b78 	.word	0x08028b78
 8013e84:	080271f0 	.word	0x080271f0

08013e88 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	60b9      	str	r1, [r7, #8]
 8013e92:	607a      	str	r2, [r7, #4]
 8013e94:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d106      	bne.n	8013eaa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013e9c:	4b11      	ldr	r3, [pc, #68]	; (8013ee4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013e9e:	4a12      	ldr	r2, [pc, #72]	; (8013ee8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013ea0:	f240 2182 	movw	r1, #642	; 0x282
 8013ea4:	4811      	ldr	r0, [pc, #68]	; (8013eec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013ea6:	f011 fcb9 	bl	802581c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	68ba      	ldr	r2, [r7, #8]
 8013eae:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	683a      	ldr	r2, [r7, #0]
 8013eba:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	bf14      	ite	ne
 8013ec2:	2301      	movne	r3, #1
 8013ec4:	2300      	moveq	r3, #0
 8013ec6:	b2da      	uxtb	r2, r3
 8013ec8:	4b09      	ldr	r3, [pc, #36]	; (8013ef0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013eca:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	bf14      	ite	ne
 8013ed2:	2301      	movne	r3, #1
 8013ed4:	2300      	moveq	r3, #0
 8013ed6:	b2da      	uxtb	r2, r3
 8013ed8:	4b06      	ldr	r3, [pc, #24]	; (8013ef4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013eda:	701a      	strb	r2, [r3, #0]
    }
 8013edc:	bf00      	nop
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	08027234 	.word	0x08027234
 8013ee8:	08028b28 	.word	0x08028b28
 8013eec:	080271f0 	.word	0x080271f0
 8013ef0:	2000b36e 	.word	0x2000b36e
 8013ef4:	2000b36f 	.word	0x2000b36f

08013ef8 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	460b      	mov	r3, r1
 8013f02:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d004      	beq.n	8013f16 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f10:	887a      	ldrh	r2, [r7, #2]
 8013f12:	4610      	mov	r0, r2
 8013f14:	4798      	blx	r3
    }
 8013f16:	bf00      	nop
 8013f18:	3708      	adds	r7, #8
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}

08013f1e <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b082      	sub	sp, #8
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	685a      	ldr	r2, [r3, #4]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	3318      	adds	r3, #24
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4610      	mov	r0, r2
 8013f36:	4798      	blx	r3
 8013f38:	4603      	mov	r3, r0
    }
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3708      	adds	r7, #8
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
	...

08013f44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d017      	beq.n	8013f8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013f5c:	4b1a      	ldr	r3, [pc, #104]	; (8013fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d12a      	bne.n	8013fba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013f64:	4b19      	ldr	r3, [pc, #100]	; (8013fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013f66:	881a      	ldrh	r2, [r3, #0]
 8013f68:	4b19      	ldr	r3, [pc, #100]	; (8013fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013f6a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013f6c:	4b19      	ldr	r3, [pc, #100]	; (8013fd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013f6e:	881a      	ldrh	r2, [r3, #0]
 8013f70:	4b19      	ldr	r3, [pc, #100]	; (8013fd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013f72:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013f74:	4b16      	ldr	r3, [pc, #88]	; (8013fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013f76:	881a      	ldrh	r2, [r3, #0]
 8013f78:	4b16      	ldr	r3, [pc, #88]	; (8013fd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013f7a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013f7c:	4b16      	ldr	r3, [pc, #88]	; (8013fd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013f7e:	881a      	ldrh	r2, [r3, #0]
 8013f80:	4b12      	ldr	r3, [pc, #72]	; (8013fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013f82:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013f84:	4b10      	ldr	r3, [pc, #64]	; (8013fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013f86:	2201      	movs	r2, #1
 8013f88:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013f8a:	e016      	b.n	8013fba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013f8c:	4b0e      	ldr	r3, [pc, #56]	; (8013fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d012      	beq.n	8013fba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013f94:	4b0f      	ldr	r3, [pc, #60]	; (8013fd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013f96:	881a      	ldrh	r2, [r3, #0]
 8013f98:	4b0d      	ldr	r3, [pc, #52]	; (8013fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013f9a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013f9c:	4b0b      	ldr	r3, [pc, #44]	; (8013fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013f9e:	881a      	ldrh	r2, [r3, #0]
 8013fa0:	4b0d      	ldr	r3, [pc, #52]	; (8013fd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013fa2:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013fa4:	4b0c      	ldr	r3, [pc, #48]	; (8013fd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013fa6:	881a      	ldrh	r2, [r3, #0]
 8013fa8:	4b0a      	ldr	r3, [pc, #40]	; (8013fd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013faa:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013fac:	4b08      	ldr	r3, [pc, #32]	; (8013fd0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013fae:	881a      	ldrh	r2, [r3, #0]
 8013fb0:	4b06      	ldr	r3, [pc, #24]	; (8013fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013fb2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013fb4:	4b04      	ldr	r3, [pc, #16]	; (8013fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	701a      	strb	r2, [r3, #0]
    }
 8013fba:	bf00      	nop
 8013fbc:	370c      	adds	r7, #12
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr
 8013fc6:	bf00      	nop
 8013fc8:	2000b368 	.word	0x2000b368
 8013fcc:	2000b364 	.word	0x2000b364
 8013fd0:	2000b36a 	.word	0x2000b36a
 8013fd4:	2000b366 	.word	0x2000b366
 8013fd8:	2000b36c 	.word	0x2000b36c

08013fdc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f001 febd 	bl	8015d66 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8013fec:	bf00      	nop
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}

08013ff4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	4a05      	ldr	r2, [pc, #20]	; (8014014 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	601a      	str	r2, [r3, #0]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	4618      	mov	r0, r3
 8014006:	f7ff fe43 	bl	8013c90 <_ZN8touchgfx3HALD1Ev>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	4618      	mov	r0, r3
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}
 8014014:	08028d90 	.word	0x08028d90

08014018 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7ff ffe7 	bl	8013ff4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014026:	2178      	movs	r1, #120	; 0x78
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f011 fbcb 	bl	80257c4 <_ZdlPvj>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	4618      	mov	r0, r3
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	4618      	mov	r0, r3
 8014044:	f7ff ffca 	bl	8013fdc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8014048:	bf00      	nop
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	4618      	mov	r0, r3
 801405c:	f001 fafa 	bl	8015654 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8014060:	bf00      	nop
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b082      	sub	sp, #8
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	4618      	mov	r0, r3
 8014074:	f001 fb7a 	bl	801576c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8014078:	4603      	mov	r3, r0
}
 801407a:	4618      	mov	r0, r3
 801407c:	3708      	adds	r7, #8
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8014082:	b580      	push	{r7, lr}
 8014084:	b082      	sub	sp, #8
 8014086:	af00      	add	r7, sp, #0
 8014088:	6078      	str	r0, [r7, #4]
 801408a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6839      	ldr	r1, [r7, #0]
 8014090:	4618      	mov	r0, r3
 8014092:	f001 fb79 	bl	8015788 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8014096:	bf00      	nop
 8014098:	3708      	adds	r7, #8
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}

0801409e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801409e:	b580      	push	{r7, lr}
 80140a0:	b082      	sub	sp, #8
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]
 80140a6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6839      	ldr	r1, [r7, #0]
 80140ac:	4618      	mov	r0, r3
 80140ae:	f001 fb81 	bl	80157b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80140b2:	bf00      	nop
 80140b4:	3708      	adds	r7, #8
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}

080140ba <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80140ba:	b580      	push	{r7, lr}
 80140bc:	b084      	sub	sp, #16
 80140be:	af00      	add	r7, sp, #0
 80140c0:	60f8      	str	r0, [r7, #12]
 80140c2:	60b9      	str	r1, [r7, #8]
 80140c4:	607a      	str	r2, [r7, #4]
 80140c6:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	687a      	ldr	r2, [r7, #4]
 80140ce:	68b9      	ldr	r1, [r7, #8]
 80140d0:	f001 ff83 	bl	8015fda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80140d4:	4603      	mov	r3, r0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3710      	adds	r7, #16
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}

080140de <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80140de:	b580      	push	{r7, lr}
 80140e0:	b082      	sub	sp, #8
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	4618      	mov	r0, r3
 80140ea:	f001 fae5 	bl	80156b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80140ee:	bf00      	nop
 80140f0:	3708      	adds	r7, #8
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}

080140f6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80140f6:	b580      	push	{r7, lr}
 80140f8:	b082      	sub	sp, #8
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4618      	mov	r0, r3
 8014102:	f001 fae9 	bl	80156d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8014106:	bf00      	nop
 8014108:	3708      	adds	r7, #8
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}

0801410e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801410e:	b580      	push	{r7, lr}
 8014110:	b082      	sub	sp, #8
 8014112:	af00      	add	r7, sp, #0
 8014114:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	4618      	mov	r0, r3
 801411a:	f001 faeb 	bl	80156f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801411e:	bf00      	nop
 8014120:	3708      	adds	r7, #8
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}

08014126 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8014126:	b580      	push	{r7, lr}
 8014128:	b082      	sub	sp, #8
 801412a:	af00      	add	r7, sp, #0
 801412c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	4618      	mov	r0, r3
 8014132:	f001 faed 	bl	8015710 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8014136:	bf00      	nop
 8014138:	3708      	adds	r7, #8
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
	...

08014140 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	4a05      	ldr	r2, [pc, #20]	; (8014160 <_ZN11TouchGFXHALD1Ev+0x20>)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	601a      	str	r2, [r3, #0]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	4618      	mov	r0, r3
 8014152:	f7ff ff4f 	bl	8013ff4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	4618      	mov	r0, r3
 801415a:	3708      	adds	r7, #8
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	08028a7c 	.word	0x08028a7c

08014164 <_ZN11TouchGFXHALD0Ev>:
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f7ff ffe7 	bl	8014140 <_ZN11TouchGFXHALD1Ev>
 8014172:	2178      	movs	r1, #120	; 0x78
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f011 fb25 	bl	80257c4 <_ZdlPvj>
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	4618      	mov	r0, r3
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014184:	b580      	push	{r7, lr}
 8014186:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8014188:	2101      	movs	r1, #1
 801418a:	4811      	ldr	r0, [pc, #68]	; (80141d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 801418c:	f7f4 fe4f 	bl	8008e2e <osSemaphoreCreate>
 8014190:	4602      	mov	r2, r0
 8014192:	4b10      	ldr	r3, [pc, #64]	; (80141d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014194:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8014196:	4b0f      	ldr	r3, [pc, #60]	; (80141d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d105      	bne.n	80141aa <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 801419e:	4b0e      	ldr	r3, [pc, #56]	; (80141d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80141a0:	4a0e      	ldr	r2, [pc, #56]	; (80141dc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80141a2:	2125      	movs	r1, #37	; 0x25
 80141a4:	480e      	ldr	r0, [pc, #56]	; (80141e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80141a6:	f011 fb39 	bl	802581c <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 80141aa:	2101      	movs	r1, #1
 80141ac:	480d      	ldr	r0, [pc, #52]	; (80141e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80141ae:	f7f4 fe3e 	bl	8008e2e <osSemaphoreCreate>
 80141b2:	4602      	mov	r2, r0
 80141b4:	4b0c      	ldr	r3, [pc, #48]	; (80141e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80141b6:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 80141b8:	4b0b      	ldr	r3, [pc, #44]	; (80141e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d105      	bne.n	80141cc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 80141c0:	4b0a      	ldr	r3, [pc, #40]	; (80141ec <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 80141c2:	4a06      	ldr	r2, [pc, #24]	; (80141dc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80141c4:	2128      	movs	r1, #40	; 0x28
 80141c6:	4806      	ldr	r0, [pc, #24]	; (80141e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80141c8:	f011 fb28 	bl	802581c <__assert_func>
}
 80141cc:	bf00      	nop
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	08028bcc 	.word	0x08028bcc
 80141d4:	20008620 	.word	0x20008620
 80141d8:	0802726c 	.word	0x0802726c
 80141dc:	08028bdc 	.word	0x08028bdc
 80141e0:	080272b8 	.word	0x080272b8
 80141e4:	08028bd4 	.word	0x08028bd4
 80141e8:	20008624 	.word	0x20008624
 80141ec:	080272e4 	.word	0x080272e4

080141f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 80141f4:	4b04      	ldr	r3, [pc, #16]	; (8014208 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	f04f 31ff 	mov.w	r1, #4294967295
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7f4 fe57 	bl	8008eb0 <osSemaphoreWait>
}
 8014202:	bf00      	nop
 8014204:	bd80      	pop	{r7, pc}
 8014206:	bf00      	nop
 8014208:	20008620 	.word	0x20008620

0801420c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801420c:	b580      	push	{r7, lr}
 801420e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014210:	4b03      	ldr	r3, [pc, #12]	; (8014220 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4618      	mov	r0, r3
 8014216:	f7f4 fe99 	bl	8008f4c <osSemaphoreRelease>
}
 801421a:	bf00      	nop
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	20008620 	.word	0x20008620

08014224 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014224:	b580      	push	{r7, lr}
 8014226:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8014228:	4b03      	ldr	r3, [pc, #12]	; (8014238 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2100      	movs	r1, #0
 801422e:	4618      	mov	r0, r3
 8014230:	f7f4 fe3e 	bl	8008eb0 <osSemaphoreWait>
}
 8014234:	bf00      	nop
 8014236:	bd80      	pop	{r7, pc}
 8014238:	20008620 	.word	0x20008620

0801423c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801423c:	b580      	push	{r7, lr}
 801423e:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8014240:	4b03      	ldr	r3, [pc, #12]	; (8014250 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	4618      	mov	r0, r3
 8014246:	f7f4 fe81 	bl	8008f4c <osSemaphoreRelease>
}
 801424a:	bf00      	nop
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	20008620 	.word	0x20008620

08014254 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014254:	b580      	push	{r7, lr}
 8014256:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8014258:	4b03      	ldr	r3, [pc, #12]	; (8014268 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	4618      	mov	r0, r3
 801425e:	f7f4 fe75 	bl	8008f4c <osSemaphoreRelease>
}
 8014262:	bf00      	nop
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	20008624 	.word	0x20008624

0801426c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801426c:	b580      	push	{r7, lr}
 801426e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8014270:	4b07      	ldr	r3, [pc, #28]	; (8014290 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2100      	movs	r1, #0
 8014276:	4618      	mov	r0, r3
 8014278:	f7f4 fe1a 	bl	8008eb0 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 801427c:	4b04      	ldr	r3, [pc, #16]	; (8014290 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	f04f 31ff 	mov.w	r1, #4294967295
 8014284:	4618      	mov	r0, r3
 8014286:	f7f4 fe13 	bl	8008eb0 <osSemaphoreWait>
}
 801428a:	bf00      	nop
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	20008624 	.word	0x20008624

08014294 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	4603      	mov	r3, r0
 801429c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 801429e:	88fb      	ldrh	r3, [r7, #6]
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7f4 fdb0 	bl	8008e06 <osDelay>
}
 80142a6:	bf00      	nop
 80142a8:	3708      	adds	r7, #8
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
	...

080142b0 <__NVIC_EnableIRQ>:
{
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	4603      	mov	r3, r0
 80142b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80142ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	db0d      	blt.n	80142de <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80142c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	f003 021f 	and.w	r2, r3, #31
 80142cc:	4907      	ldr	r1, [pc, #28]	; (80142ec <__NVIC_EnableIRQ+0x3c>)
 80142ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142d2:	095b      	lsrs	r3, r3, #5
 80142d4:	2001      	movs	r0, #1
 80142d6:	fa00 f202 	lsl.w	r2, r0, r2
 80142da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80142de:	bf00      	nop
 80142e0:	370c      	adds	r7, #12
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
 80142ea:	bf00      	nop
 80142ec:	e000e100 	.word	0xe000e100

080142f0 <__NVIC_DisableIRQ>:
{
 80142f0:	b480      	push	{r7}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	4603      	mov	r3, r0
 80142f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80142fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	db12      	blt.n	8014328 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014306:	b2db      	uxtb	r3, r3
 8014308:	f003 021f 	and.w	r2, r3, #31
 801430c:	4909      	ldr	r1, [pc, #36]	; (8014334 <__NVIC_DisableIRQ+0x44>)
 801430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014312:	095b      	lsrs	r3, r3, #5
 8014314:	2001      	movs	r0, #1
 8014316:	fa00 f202 	lsl.w	r2, r0, r2
 801431a:	3320      	adds	r3, #32
 801431c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014320:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014324:	f3bf 8f6f 	isb	sy
}
 8014328:	bf00      	nop
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr
 8014334:	e000e100 	.word	0xe000e100

08014338 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
        : color(0)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2200      	movs	r2, #0
 8014344:	601a      	str	r2, [r3, #0]
    }
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	4618      	mov	r0, r3
 801434a:	370c      	adds	r7, #12
 801434c:	46bd      	mov	sp, r7
 801434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014352:	4770      	bx	lr

08014354 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
        return color;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
    }
 8014360:	4618      	mov	r0, r3
 8014362:	370c      	adds	r7, #12
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
    {
 8014374:	4a04      	ldr	r2, [pc, #16]	; (8014388 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	601a      	str	r2, [r3, #0]
    }
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4618      	mov	r0, r3
 801437e:	370c      	adds	r7, #12
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr
 8014388:	08028c64 	.word	0x08028c64

0801438c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
    }
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f7ff ffe9 	bl	801436c <_ZN8touchgfx9DMA_QueueD1Ev>
 801439a:	2104      	movs	r1, #4
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f011 fa11 	bl	80257c4 <_ZdlPvj>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	4618      	mov	r0, r3
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	3344      	adds	r3, #68	; 0x44
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	4798      	blx	r3
    }
 80143c0:	bf00      	nop
 80143c2:	3708      	adds	r7, #8
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80143d0:	2300      	movs	r3, #0
    }
 80143d2:	4618      	mov	r0, r3
 80143d4:	370c      	adds	r7, #12
 80143d6:	46bd      	mov	sp, r7
 80143d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143dc:	4770      	bx	lr
	...

080143e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80143e0:	b480      	push	{r7}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
    {
 80143e8:	4a04      	ldr	r2, [pc, #16]	; (80143fc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	601a      	str	r2, [r3, #0]
    }
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	4618      	mov	r0, r3
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr
 80143fc:	080297e8 	.word	0x080297e8

08014400 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
    }
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ff ffe9 	bl	80143e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801440e:	210c      	movs	r1, #12
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f011 f9d7 	bl	80257c4 <_ZdlPvj>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	4618      	mov	r0, r3
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801442a:	4a09      	ldr	r2, [pc, #36]	; (8014450 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	601a      	str	r2, [r3, #0]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	605a      	str	r2, [r3, #4]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	2200      	movs	r2, #0
 801443a:	721a      	strb	r2, [r3, #8]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2200      	movs	r2, #0
 8014440:	725a      	strb	r2, [r3, #9]
    {
    }
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4618      	mov	r0, r3
 8014446:	370c      	adds	r7, #12
 8014448:	46bd      	mov	sp, r7
 801444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444e:	4770      	bx	lr
 8014450:	080297e8 	.word	0x080297e8

08014454 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	685a      	ldr	r2, [r3, #4]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	685b      	ldr	r3, [r3, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	3314      	adds	r3, #20
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	4610      	mov	r0, r2
 801446c:	4798      	blx	r3
    }
 801446e:	bf00      	nop
 8014470:	3708      	adds	r7, #8
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}

08014476 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8014476:	b580      	push	{r7, lr}
 8014478:	b082      	sub	sp, #8
 801447a:	af00      	add	r7, sp, #0
 801447c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	3328      	adds	r3, #40	; 0x28
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4610      	mov	r0, r2
 801448a:	4798      	blx	r3
    }
 801448c:	bf00      	nop
 801448e:	3708      	adds	r7, #8
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8014494:	b480      	push	{r7}
 8014496:	b085      	sub	sp, #20
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	607a      	str	r2, [r7, #4]
 80144a0:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80144ac:	68ba      	ldr	r2, [r7, #8]
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	430a      	orrs	r2, r1
 80144b4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144bc:	f023 0107 	bic.w	r1, r3, #7
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	430a      	orrs	r2, r1
 80144c8:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80144d0:	4b06      	ldr	r3, [pc, #24]	; (80144ec <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80144d2:	4013      	ands	r3, r2
 80144d4:	6839      	ldr	r1, [r7, #0]
 80144d6:	68fa      	ldr	r2, [r7, #12]
 80144d8:	6812      	ldr	r2, [r2, #0]
 80144da:	430b      	orrs	r3, r1
 80144dc:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80144de:	2300      	movs	r3, #0
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3714      	adds	r7, #20
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr
 80144ec:	ffffc000 	.word	0xffffc000

080144f0 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80144f8:	f7f8 f926 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 80144fc:	4603      	mov	r3, r0
 80144fe:	4618      	mov	r0, r3
 8014500:	f7ff ffa8 	bl	8014454 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8014504:	bf00      	nop
 8014506:	3708      	adds	r7, #8
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
    assert(0);
 8014514:	4b02      	ldr	r3, [pc, #8]	; (8014520 <DMA2D_XferErrorCallback+0x14>)
 8014516:	4a03      	ldr	r2, [pc, #12]	; (8014524 <DMA2D_XferErrorCallback+0x18>)
 8014518:	213e      	movs	r1, #62	; 0x3e
 801451a:	4803      	ldr	r0, [pc, #12]	; (8014528 <DMA2D_XferErrorCallback+0x1c>)
 801451c:	f011 f97e 	bl	802581c <__assert_func>
 8014520:	08027320 	.word	0x08027320
 8014524:	08028c80 	.word	0x08028c80
 8014528:	08027324 	.word	0x08027324

0801452c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801452c:	b580      	push	{r7, lr}
 801452e:	b082      	sub	sp, #8
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	3318      	adds	r3, #24
 8014538:	4618      	mov	r0, r3
 801453a:	f7ff fefd 	bl	8014338 <_ZN8touchgfx9colortypeC1Ev>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	4618      	mov	r0, r3
 8014542:	3708      	adds	r7, #8
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8014548:	b5b0      	push	{r4, r5, r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	330c      	adds	r3, #12
 8014556:	4619      	mov	r1, r3
 8014558:	4610      	mov	r0, r2
 801455a:	f7ff ff61 	bl	8014420 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801455e:	4a0e      	ldr	r2, [pc, #56]	; (8014598 <_ZN10STM32F7DMAC1Ev+0x50>)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	601a      	str	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f103 000c 	add.w	r0, r3, #12
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	3320      	adds	r3, #32
 801456e:	2260      	movs	r2, #96	; 0x60
 8014570:	4619      	mov	r1, r3
 8014572:	f002 fa9b 	bl	8016aac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	3320      	adds	r3, #32
 801457a:	245f      	movs	r4, #95	; 0x5f
 801457c:	461d      	mov	r5, r3
 801457e:	2c00      	cmp	r4, #0
 8014580:	db05      	blt.n	801458e <_ZN10STM32F7DMAC1Ev+0x46>
 8014582:	4628      	mov	r0, r5
 8014584:	f7ff ffd2 	bl	801452c <_ZN8touchgfx6BlitOpC1Ev>
 8014588:	3520      	adds	r5, #32
 801458a:	3c01      	subs	r4, #1
 801458c:	e7f7      	b.n	801457e <_ZN10STM32F7DMAC1Ev+0x36>
{}
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bdb0      	pop	{r4, r5, r7, pc}
 8014598:	08028c14 	.word	0x08028c14

0801459c <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	4a0b      	ldr	r2, [pc, #44]	; (80145d4 <_ZN10STM32F7DMAD1Ev+0x38>)
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80145aa:	480b      	ldr	r0, [pc, #44]	; (80145d8 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80145ac:	f7ef f80a 	bl	80035c4 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80145b0:	205a      	movs	r0, #90	; 0x5a
 80145b2:	f7ff fe9d 	bl	80142f0 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	330c      	adds	r3, #12
 80145ba:	4618      	mov	r0, r3
 80145bc:	f000 faa4 	bl	8014b08 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7ff ff0c 	bl	80143e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	4618      	mov	r0, r3
 80145cc:	3708      	adds	r7, #8
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	08028c14 	.word	0x08028c14
 80145d8:	2000ba48 	.word	0x2000ba48

080145dc <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
}
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7ff ffd9 	bl	801459c <_ZN10STM32F7DMAD1Ev>
 80145ea:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f011 f8e8 	bl	80257c4 <_ZdlPvj>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	4618      	mov	r0, r3
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
	...

08014600 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8014608:	4b09      	ldr	r3, [pc, #36]	; (8014630 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801460a:	4a0a      	ldr	r2, [pc, #40]	; (8014634 <_ZN10STM32F7DMA10initializeEv+0x34>)
 801460c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801460e:	4808      	ldr	r0, [pc, #32]	; (8014630 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014610:	f7ee ff8e 	bl	8003530 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8014614:	4b06      	ldr	r3, [pc, #24]	; (8014630 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014616:	4a08      	ldr	r2, [pc, #32]	; (8014638 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8014618:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801461a:	4b05      	ldr	r3, [pc, #20]	; (8014630 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801461c:	4a07      	ldr	r2, [pc, #28]	; (801463c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801461e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8014620:	205a      	movs	r0, #90	; 0x5a
 8014622:	f7ff fe45 	bl	80142b0 <__NVIC_EnableIRQ>
}
 8014626:	bf00      	nop
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	2000ba48 	.word	0x2000ba48
 8014634:	4002b000 	.word	0x4002b000
 8014638:	080144f1 	.word	0x080144f1
 801463c:	0801450d 	.word	0x0801450d

08014640 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8014640:	b480      	push	{r7}
 8014642:	b083      	sub	sp, #12
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8014648:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 801464c:	4618      	mov	r0, r3
 801464e:	370c      	adds	r7, #12
 8014650:	46bd      	mov	sp, r7
 8014652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014656:	4770      	bx	lr

08014658 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014658:	b590      	push	{r4, r7, lr}
 801465a:	b08d      	sub	sp, #52	; 0x34
 801465c:	af02      	add	r7, sp, #8
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8014662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014666:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8014668:	2300      	movs	r3, #0
 801466a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014670:	2b20      	cmp	r3, #32
 8014672:	d007      	beq.n	8014684 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	2b40      	cmp	r3, #64	; 0x40
 801467a:	d003      	beq.n	8014684 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2b04      	cmp	r3, #4
 8014682:	d101      	bne.n	8014688 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8014684:	2301      	movs	r3, #1
 8014686:	e000      	b.n	801468a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8014688:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801468a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014690:	2b80      	cmp	r3, #128	; 0x80
 8014692:	d004      	beq.n	801469e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801469c:	d101      	bne.n	80146a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801469e:	2301      	movs	r3, #1
 80146a0:	e000      	b.n	80146a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80146a2:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80146a4:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80146a6:	f7f8 f85b 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80146aa:	4602      	mov	r2, r0
 80146ac:	6813      	ldr	r3, [r2, #0]
 80146ae:	331c      	adds	r3, #28
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	4610      	mov	r0, r2
 80146b4:	4798      	blx	r3
 80146b6:	4603      	mov	r3, r0
 80146b8:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b40      	cmp	r3, #64	; 0x40
 80146c0:	d01d      	beq.n	80146fe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80146c2:	2b40      	cmp	r3, #64	; 0x40
 80146c4:	d804      	bhi.n	80146d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80146c6:	2b04      	cmp	r3, #4
 80146c8:	d00e      	beq.n	80146e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80146ca:	2b20      	cmp	r3, #32
 80146cc:	d017      	beq.n	80146fe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80146ce:	e019      	b.n	8014704 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80146d0:	2b80      	cmp	r3, #128	; 0x80
 80146d2:	d003      	beq.n	80146dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80146d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146d8:	d003      	beq.n	80146e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80146da:	e013      	b.n	8014704 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80146dc:	230a      	movs	r3, #10
 80146de:	623b      	str	r3, [r7, #32]
        break;
 80146e0:	e01a      	b.n	8014718 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80146e2:	2309      	movs	r3, #9
 80146e4:	623b      	str	r3, [r7, #32]
        break;
 80146e6:	e017      	b.n	8014718 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80146e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80146ec:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80146ee:	7f7b      	ldrb	r3, [r7, #29]
 80146f0:	2b10      	cmp	r3, #16
 80146f2:	d101      	bne.n	80146f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80146f4:	2302      	movs	r3, #2
 80146f6:	e000      	b.n	80146fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80146f8:	2301      	movs	r3, #1
 80146fa:	623b      	str	r3, [r7, #32]
        break;
 80146fc:	e00c      	b.n	8014718 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80146fe:	2300      	movs	r3, #0
 8014700:	623b      	str	r3, [r7, #32]
        break;
 8014702:	e009      	b.n	8014718 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8014704:	2300      	movs	r3, #0
 8014706:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014708:	7f7b      	ldrb	r3, [r7, #29]
 801470a:	2b10      	cmp	r3, #16
 801470c:	d101      	bne.n	8014712 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 801470e:	2302      	movs	r3, #2
 8014710:	e000      	b.n	8014714 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8014712:	2301      	movs	r3, #1
 8014714:	623b      	str	r3, [r7, #32]
        break;
 8014716:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014718:	4a75      	ldr	r2, [pc, #468]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801471e:	7f7b      	ldrb	r3, [r7, #29]
 8014720:	2b10      	cmp	r3, #16
 8014722:	d101      	bne.n	8014728 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8014724:	2302      	movs	r3, #2
 8014726:	e000      	b.n	801472a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8014728:	2301      	movs	r3, #1
 801472a:	4a71      	ldr	r2, [pc, #452]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801472c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	8adb      	ldrh	r3, [r3, #22]
 8014732:	461a      	mov	r2, r3
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	8a1b      	ldrh	r3, [r3, #16]
 8014738:	1ad3      	subs	r3, r2, r3
 801473a:	461a      	mov	r2, r3
 801473c:	4b6c      	ldr	r3, [pc, #432]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801473e:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014740:	7f7b      	ldrb	r3, [r7, #29]
 8014742:	2b10      	cmp	r3, #16
 8014744:	d101      	bne.n	801474a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8014746:	2202      	movs	r2, #2
 8014748:	e000      	b.n	801474c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801474a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	8adb      	ldrh	r3, [r3, #22]
 8014750:	4619      	mov	r1, r3
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	8a1b      	ldrh	r3, [r3, #16]
 8014756:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801475a:	4865      	ldr	r0, [pc, #404]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801475c:	f7ff fe9a 	bl	8014494 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014760:	4a63      	ldr	r2, [pc, #396]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014762:	6a3b      	ldr	r3, [r7, #32]
 8014764:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	8a9b      	ldrh	r3, [r3, #20]
 801476a:	461a      	mov	r2, r3
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	8a1b      	ldrh	r3, [r3, #16]
 8014770:	1ad3      	subs	r3, r2, r3
 8014772:	461a      	mov	r2, r3
 8014774:	4b5e      	ldr	r3, [pc, #376]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014776:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8014778:	7ffb      	ldrb	r3, [r7, #31]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d103      	bne.n	8014786 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801477e:	7fbb      	ldrb	r3, [r7, #30]
 8014780:	2b00      	cmp	r3, #0
 8014782:	f000 8081 	beq.w	8014888 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	7f1b      	ldrb	r3, [r3, #28]
 801478a:	2bff      	cmp	r3, #255	; 0xff
 801478c:	d008      	beq.n	80147a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801478e:	4b58      	ldr	r3, [pc, #352]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014790:	2202      	movs	r2, #2
 8014792:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	7f1b      	ldrb	r3, [r3, #28]
 8014798:	461a      	mov	r2, r3
 801479a:	4b55      	ldr	r3, [pc, #340]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801479c:	635a      	str	r2, [r3, #52]	; 0x34
 801479e:	e002      	b.n	80147a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80147a0:	4b53      	ldr	r3, [pc, #332]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80147a2:	2200      	movs	r2, #0
 80147a4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80147a6:	7fbb      	ldrb	r3, [r7, #30]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d058      	beq.n	801485e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 80147ac:	7f7b      	ldrb	r3, [r7, #29]
 80147ae:	2b10      	cmp	r3, #16
 80147b0:	d14a      	bne.n	8014848 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	3318      	adds	r3, #24
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ff fdcc 	bl	8014354 <_ZNK8touchgfx9colortypecvmEv>
 80147bc:	4603      	mov	r3, r0
 80147be:	0adb      	lsrs	r3, r3, #11
 80147c0:	f003 021f 	and.w	r2, r3, #31
 80147c4:	4613      	mov	r3, r2
 80147c6:	021b      	lsls	r3, r3, #8
 80147c8:	1a9a      	subs	r2, r3, r2
 80147ca:	4b4a      	ldr	r3, [pc, #296]	; (80148f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80147cc:	fba3 1302 	umull	r1, r3, r3, r2
 80147d0:	1ad2      	subs	r2, r2, r3
 80147d2:	0852      	lsrs	r2, r2, #1
 80147d4:	4413      	add	r3, r2
 80147d6:	091b      	lsrs	r3, r3, #4
 80147d8:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	3318      	adds	r3, #24
 80147de:	4618      	mov	r0, r3
 80147e0:	f7ff fdb8 	bl	8014354 <_ZNK8touchgfx9colortypecvmEv>
 80147e4:	4603      	mov	r3, r0
 80147e6:	095b      	lsrs	r3, r3, #5
 80147e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80147ec:	4613      	mov	r3, r2
 80147ee:	021b      	lsls	r3, r3, #8
 80147f0:	1a9a      	subs	r2, r3, r2
 80147f2:	4b41      	ldr	r3, [pc, #260]	; (80148f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80147f4:	fba3 1302 	umull	r1, r3, r3, r2
 80147f8:	1ad2      	subs	r2, r2, r3
 80147fa:	0852      	lsrs	r2, r2, #1
 80147fc:	4413      	add	r3, r2
 80147fe:	095b      	lsrs	r3, r3, #5
 8014800:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	3318      	adds	r3, #24
 8014806:	4618      	mov	r0, r3
 8014808:	f7ff fda4 	bl	8014354 <_ZNK8touchgfx9colortypecvmEv>
 801480c:	4603      	mov	r3, r0
 801480e:	f003 021f 	and.w	r2, r3, #31
 8014812:	4613      	mov	r3, r2
 8014814:	021b      	lsls	r3, r3, #8
 8014816:	1a9a      	subs	r2, r3, r2
 8014818:	4b36      	ldr	r3, [pc, #216]	; (80148f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801481a:	fba3 1302 	umull	r1, r3, r3, r2
 801481e:	1ad2      	subs	r2, r2, r3
 8014820:	0852      	lsrs	r2, r2, #1
 8014822:	4413      	add	r3, r2
 8014824:	091b      	lsrs	r3, r3, #4
 8014826:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	7f1b      	ldrb	r3, [r3, #28]
 801482c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	061a      	lsls	r2, r3, #24
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	041b      	lsls	r3, r3, #16
 8014836:	431a      	orrs	r2, r3
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	021b      	lsls	r3, r3, #8
 801483c:	431a      	orrs	r2, r3
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	4313      	orrs	r3, r2
 8014842:	4a2b      	ldr	r2, [pc, #172]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014844:	6353      	str	r3, [r2, #52]	; 0x34
 8014846:	e00a      	b.n	801485e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	3318      	adds	r3, #24
 801484c:	60bb      	str	r3, [r7, #8]
        return color;
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	683a      	ldr	r2, [r7, #0]
 8014854:	7f12      	ldrb	r2, [r2, #28]
 8014856:	0612      	lsls	r2, r2, #24
 8014858:	4313      	orrs	r3, r2
 801485a:	4a25      	ldr	r2, [pc, #148]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801485c:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	8adb      	ldrh	r3, [r3, #22]
 8014862:	461a      	mov	r2, r3
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	8a1b      	ldrh	r3, [r3, #16]
 8014868:	1ad3      	subs	r3, r2, r3
 801486a:	461a      	mov	r2, r3
 801486c:	4b20      	ldr	r3, [pc, #128]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801486e:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014870:	7f7b      	ldrb	r3, [r7, #29]
 8014872:	2b10      	cmp	r3, #16
 8014874:	d101      	bne.n	801487a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 8014876:	2302      	movs	r3, #2
 8014878:	e000      	b.n	801487c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801487a:	2301      	movs	r3, #1
 801487c:	4a1c      	ldr	r2, [pc, #112]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801487e:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014880:	2100      	movs	r1, #0
 8014882:	481b      	ldr	r0, [pc, #108]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014884:	f7ef f91e 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014888:	2101      	movs	r1, #1
 801488a:	4819      	ldr	r0, [pc, #100]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801488c:	f7ef f91a 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8014890:	7ffb      	ldrb	r3, [r7, #31]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d102      	bne.n	801489c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8014896:	7fbb      	ldrb	r3, [r7, #30]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d015      	beq.n	80148c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80148a0:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80148a6:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80148ac:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80148b2:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80148b8:	9301      	str	r3, [sp, #4]
 80148ba:	9200      	str	r2, [sp, #0]
 80148bc:	4623      	mov	r3, r4
 80148be:	4602      	mov	r2, r0
 80148c0:	480b      	ldr	r0, [pc, #44]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80148c2:	f7ee ff22 	bl	800370a <HAL_DMA2D_BlendingStart_IT>
 80148c6:	e00f      	b.n	80148e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80148cc:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80148d2:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80148d8:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	4603      	mov	r3, r0
 80148e2:	4803      	ldr	r0, [pc, #12]	; (80148f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80148e4:	f7ee fede 	bl	80036a4 <HAL_DMA2D_Start_IT>
    }
}
 80148e8:	bf00      	nop
 80148ea:	372c      	adds	r7, #44	; 0x2c
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd90      	pop	{r4, r7, pc}
 80148f0:	2000ba48 	.word	0x2000ba48
 80148f4:	08421085 	.word	0x08421085
 80148f8:	04104105 	.word	0x04104105

080148fc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80148fc:	b590      	push	{r4, r7, lr}
 80148fe:	b08f      	sub	sp, #60	; 0x3c
 8014900:	af02      	add	r7, sp, #8
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014906:	f7f7 ff2b 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 801490a:	4602      	mov	r2, r0
 801490c:	6813      	ldr	r3, [r2, #0]
 801490e:	331c      	adds	r3, #28
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	4610      	mov	r0, r2
 8014914:	4798      	blx	r3
 8014916:	4603      	mov	r3, r0
 8014918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801491c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014920:	2b10      	cmp	r3, #16
 8014922:	d101      	bne.n	8014928 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8014924:	2302      	movs	r3, #2
 8014926:	e000      	b.n	801492a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 8014928:	2301      	movs	r3, #1
 801492a:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 801492c:	2300      	movs	r3, #0
 801492e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8014930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014934:	2b10      	cmp	r3, #16
 8014936:	d149      	bne.n	80149cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	3318      	adds	r3, #24
 801493c:	4618      	mov	r0, r3
 801493e:	f7ff fd09 	bl	8014354 <_ZNK8touchgfx9colortypecvmEv>
 8014942:	4603      	mov	r3, r0
 8014944:	0adb      	lsrs	r3, r3, #11
 8014946:	f003 021f 	and.w	r2, r3, #31
 801494a:	4613      	mov	r3, r2
 801494c:	021b      	lsls	r3, r3, #8
 801494e:	1a9a      	subs	r2, r3, r2
 8014950:	4b6a      	ldr	r3, [pc, #424]	; (8014afc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014952:	fba3 1302 	umull	r1, r3, r3, r2
 8014956:	1ad2      	subs	r2, r2, r3
 8014958:	0852      	lsrs	r2, r2, #1
 801495a:	4413      	add	r3, r2
 801495c:	091b      	lsrs	r3, r3, #4
 801495e:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	3318      	adds	r3, #24
 8014964:	4618      	mov	r0, r3
 8014966:	f7ff fcf5 	bl	8014354 <_ZNK8touchgfx9colortypecvmEv>
 801496a:	4603      	mov	r3, r0
 801496c:	095b      	lsrs	r3, r3, #5
 801496e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014972:	4613      	mov	r3, r2
 8014974:	021b      	lsls	r3, r3, #8
 8014976:	1a9a      	subs	r2, r3, r2
 8014978:	4b61      	ldr	r3, [pc, #388]	; (8014b00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 801497a:	fba3 1302 	umull	r1, r3, r3, r2
 801497e:	1ad2      	subs	r2, r2, r3
 8014980:	0852      	lsrs	r2, r2, #1
 8014982:	4413      	add	r3, r2
 8014984:	095b      	lsrs	r3, r3, #5
 8014986:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	3318      	adds	r3, #24
 801498c:	4618      	mov	r0, r3
 801498e:	f7ff fce1 	bl	8014354 <_ZNK8touchgfx9colortypecvmEv>
 8014992:	4603      	mov	r3, r0
 8014994:	f003 021f 	and.w	r2, r3, #31
 8014998:	4613      	mov	r3, r2
 801499a:	021b      	lsls	r3, r3, #8
 801499c:	1a9a      	subs	r2, r3, r2
 801499e:	4b57      	ldr	r3, [pc, #348]	; (8014afc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80149a0:	fba3 1302 	umull	r1, r3, r3, r2
 80149a4:	1ad2      	subs	r2, r2, r3
 80149a6:	0852      	lsrs	r2, r2, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	091b      	lsrs	r3, r3, #4
 80149ac:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	7f1b      	ldrb	r3, [r3, #28]
 80149b2:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	061a      	lsls	r2, r3, #24
 80149b8:	69fb      	ldr	r3, [r7, #28]
 80149ba:	041b      	lsls	r3, r3, #16
 80149bc:	431a      	orrs	r2, r3
 80149be:	69bb      	ldr	r3, [r7, #24]
 80149c0:	021b      	lsls	r3, r3, #8
 80149c2:	4313      	orrs	r3, r2
 80149c4:	697a      	ldr	r2, [r7, #20]
 80149c6:	4313      	orrs	r3, r2
 80149c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80149ca:	e00a      	b.n	80149e2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	7f1b      	ldrb	r3, [r3, #28]
 80149d0:	061b      	lsls	r3, r3, #24
 80149d2:	461a      	mov	r2, r3
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	3318      	adds	r3, #24
 80149d8:	60fb      	str	r3, [r7, #12]
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	4313      	orrs	r3, r2
 80149e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	2b08      	cmp	r3, #8
 80149e8:	d103      	bne.n	80149f2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80149ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80149ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80149f0:	e003      	b.n	80149fa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80149f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80149f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80149f8:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80149fa:	4a42      	ldr	r2, [pc, #264]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 80149fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fe:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a04:	2b10      	cmp	r3, #16
 8014a06:	d101      	bne.n	8014a0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8014a08:	2302      	movs	r3, #2
 8014a0a:	e000      	b.n	8014a0e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	4a3d      	ldr	r2, [pc, #244]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a10:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	8adb      	ldrh	r3, [r3, #22]
 8014a16:	461a      	mov	r2, r3
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	8a1b      	ldrh	r3, [r3, #16]
 8014a1c:	1ad3      	subs	r3, r2, r3
 8014a1e:	461a      	mov	r2, r3
 8014a20:	4b38      	ldr	r3, [pc, #224]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a22:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a28:	2b10      	cmp	r3, #16
 8014a2a:	d101      	bne.n	8014a30 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8014a2c:	2202      	movs	r2, #2
 8014a2e:	e000      	b.n	8014a32 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8014a30:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	8adb      	ldrh	r3, [r3, #22]
 8014a36:	4619      	mov	r1, r3
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	8a1b      	ldrh	r3, [r3, #16]
 8014a3c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a40:	4830      	ldr	r0, [pc, #192]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a42:	f7ff fd27 	bl	8014494 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014a4c:	d11f      	bne.n	8014a8e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014a4e:	4b2d      	ldr	r3, [pc, #180]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a50:	2201      	movs	r2, #1
 8014a52:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014a54:	4a2b      	ldr	r2, [pc, #172]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a58:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014a5a:	4b2a      	ldr	r3, [pc, #168]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a5c:	2209      	movs	r2, #9
 8014a5e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	8adb      	ldrh	r3, [r3, #22]
 8014a64:	461a      	mov	r2, r3
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	8a1b      	ldrh	r3, [r3, #16]
 8014a6a:	1ad3      	subs	r3, r2, r3
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	4b25      	ldr	r3, [pc, #148]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a70:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a76:	2b10      	cmp	r3, #16
 8014a78:	d101      	bne.n	8014a7e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 8014a7a:	2302      	movs	r3, #2
 8014a7c:	e000      	b.n	8014a80 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8014a7e:	2301      	movs	r3, #1
 8014a80:	4a20      	ldr	r2, [pc, #128]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a82:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014a84:	2100      	movs	r1, #0
 8014a86:	481f      	ldr	r0, [pc, #124]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a88:	f7ef f81c 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
 8014a8c:	e005      	b.n	8014a9a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014a8e:	4a1d      	ldr	r2, [pc, #116]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a90:	6a3b      	ldr	r3, [r7, #32]
 8014a92:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014a94:	4b1b      	ldr	r3, [pc, #108]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a96:	2200      	movs	r2, #0
 8014a98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014a9a:	2101      	movs	r1, #1
 8014a9c:	4819      	ldr	r0, [pc, #100]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014a9e:	f7ef f811 	bl	8003ac4 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014aa8:	d115      	bne.n	8014ad6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014aae:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014ab4:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014aba:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014ac0:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014ac6:	9301      	str	r3, [sp, #4]
 8014ac8:	9200      	str	r2, [sp, #0]
 8014aca:	4623      	mov	r3, r4
 8014acc:	4602      	mov	r2, r0
 8014ace:	480d      	ldr	r0, [pc, #52]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014ad0:	f7ee fe1b 	bl	800370a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8014ad4:	e00d      	b.n	8014af2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014ae0:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014ae6:	9300      	str	r3, [sp, #0]
 8014ae8:	460b      	mov	r3, r1
 8014aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014aec:	4805      	ldr	r0, [pc, #20]	; (8014b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014aee:	f7ee fdd9 	bl	80036a4 <HAL_DMA2D_Start_IT>
}
 8014af2:	bf00      	nop
 8014af4:	3734      	adds	r7, #52	; 0x34
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd90      	pop	{r4, r7, pc}
 8014afa:	bf00      	nop
 8014afc:	08421085 	.word	0x08421085
 8014b00:	04104105 	.word	0x04104105
 8014b04:	2000ba48 	.word	0x2000ba48

08014b08 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	4a05      	ldr	r2, [pc, #20]	; (8014b28 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	601a      	str	r2, [r3, #0]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7ff fc27 	bl	801436c <_ZN8touchgfx9DMA_QueueD1Ev>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	4618      	mov	r0, r3
 8014b22:	3708      	adds	r7, #8
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	08029838 	.word	0x08029838

08014b2c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f7ff ffe7 	bl	8014b08 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014b3a:	2114      	movs	r1, #20
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f010 fe41 	bl	80257c4 <_ZdlPvj>
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	4618      	mov	r0, r3
 8014b46:	3708      	adds	r7, #8
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}

08014b4c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014b4c:	b480      	push	{r7}
 8014b4e:	b083      	sub	sp, #12
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
        texts = t;
 8014b54:	4a04      	ldr	r2, [pc, #16]	; (8014b68 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6013      	str	r3, [r2, #0]
    }
 8014b5a:	bf00      	nop
 8014b5c:	370c      	adds	r7, #12
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b64:	4770      	bx	lr
 8014b66:	bf00      	nop
 8014b68:	2000b40c 	.word	0x2000b40c

08014b6c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014b6c:	b480      	push	{r7}
 8014b6e:	b085      	sub	sp, #20
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	607a      	str	r2, [r7, #4]
 8014b78:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014b7a:	4a0b      	ldr	r2, [pc, #44]	; (8014ba8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	601a      	str	r2, [r3, #0]
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	605a      	str	r2, [r3, #4]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	609a      	str	r2, [r3, #8]
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	683a      	ldr	r2, [r7, #0]
 8014b90:	60da      	str	r2, [r3, #12]
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	69ba      	ldr	r2, [r7, #24]
 8014b96:	611a      	str	r2, [r3, #16]
    {
    }
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3714      	adds	r7, #20
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop
 8014ba8:	08028d80 	.word	0x08028d80

08014bac <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014bac:	b480      	push	{r7}
 8014bae:	b083      	sub	sp, #12
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
    {
 8014bb4:	4a04      	ldr	r2, [pc, #16]	; (8014bc8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	601a      	str	r2, [r3, #0]
    }
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr
 8014bc8:	08028d80 	.word	0x08028d80

08014bcc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b082      	sub	sp, #8
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
    }
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f7ff ffe9 	bl	8014bac <_ZN8touchgfx7MVPHeapD1Ev>
 8014bda:	2114      	movs	r1, #20
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f010 fdf1 	bl	80257c4 <_ZdlPvj>
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	4618      	mov	r0, r3
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014bec:	b480      	push	{r7}
 8014bee:	b083      	sub	sp, #12
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
    {
 8014bf4:	4a04      	ldr	r2, [pc, #16]	; (8014c08 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	601a      	str	r2, [r3, #0]
    }
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	370c      	adds	r7, #12
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr
 8014c08:	0802a2f4 	.word	0x0802a2f4

08014c0c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
    }
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f7ff ffe9 	bl	8014bec <_ZN8touchgfx3LCDD1Ev>
 8014c1a:	2108      	movs	r1, #8
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f010 fdd1 	bl	80257c4 <_ZdlPvj>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014c2c:	b480      	push	{r7}
 8014c2e:	b083      	sub	sp, #12
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2200      	movs	r2, #0
 8014c38:	801a      	strh	r2, [r3, #0]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	805a      	strh	r2, [r3, #2]
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2200      	movs	r2, #0
 8014c44:	809a      	strh	r2, [r3, #4]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	80da      	strh	r2, [r3, #6]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	811a      	strh	r2, [r3, #8]
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2200      	movs	r2, #0
 8014c56:	815a      	strh	r2, [r3, #10]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	819a      	strh	r2, [r3, #12]
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2200      	movs	r2, #0
 8014c62:	739a      	strb	r2, [r3, #14]
        {
        }
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	4618      	mov	r0, r3
 8014c68:	370c      	adds	r7, #12
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c70:	4770      	bx	lr

08014c72 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b082      	sub	sp, #8
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7ff ffd5 	bl	8014c2c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2200      	movs	r2, #0
 8014c86:	611a      	str	r2, [r3, #16]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	829a      	strh	r2, [r3, #20]
    {
    }
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	4618      	mov	r0, r3
 8014c92:	3708      	adds	r7, #8
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	60f8      	str	r0, [r7, #12]
 8014ca0:	60b9      	str	r1, [r7, #8]
 8014ca2:	607a      	str	r2, [r7, #4]
 8014ca4:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 8014ca6:	4a44      	ldr	r2, [pc, #272]	; (8014db8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	601a      	str	r2, [r3, #0]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	68ba      	ldr	r2, [r7, #8]
 8014cb0:	605a      	str	r2, [r3, #4]
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	609a      	str	r2, [r3, #8]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	683a      	ldr	r2, [r7, #0]
 8014cbc:	60da      	str	r2, [r3, #12]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	611a      	str	r2, [r3, #16]
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	615a      	str	r2, [r3, #20]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	619a      	str	r2, [r3, #24]
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	331c      	adds	r3, #28
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7ff ffcc 	bl	8014c72 <_ZN8touchgfx8GesturesC1Ev>
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	639a      	str	r2, [r3, #56]	; 0x38
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	63da      	str	r2, [r3, #60]	; 0x3c
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	641a      	str	r2, [r3, #64]	; 0x40
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	645a      	str	r2, [r3, #68]	; 0x44
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2200      	movs	r2, #0
 8014d06:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	3350      	adds	r3, #80	; 0x50
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7f7 fa53 	bl	800c1c0 <_ZN8touchgfx4RectC1Ev>
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2200      	movs	r2, #0
 8014d26:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2201      	movs	r2, #1
 8014d36:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2200      	movs	r2, #0
 8014d46:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2200      	movs	r2, #0
 8014d56:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2200      	movs	r2, #0
 8014d66:	671a      	str	r2, [r3, #112]	; 0x70
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014d70:	4a12      	ldr	r2, [pc, #72]	; (8014dbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014d76:	4a12      	ldr	r2, [pc, #72]	; (8014dc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014d78:	8b3b      	ldrh	r3, [r7, #24]
 8014d7a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014d7c:	4a11      	ldr	r2, [pc, #68]	; (8014dc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014d7e:	8bbb      	ldrh	r3, [r7, #28]
 8014d80:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014d82:	4b11      	ldr	r3, [pc, #68]	; (8014dc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8014d84:	2200      	movs	r2, #0
 8014d86:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014d88:	4b0d      	ldr	r3, [pc, #52]	; (8014dc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014d8a:	881a      	ldrh	r2, [r3, #0]
 8014d8c:	4b0f      	ldr	r3, [pc, #60]	; (8014dcc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014d8e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014d90:	4b0c      	ldr	r3, [pc, #48]	; (8014dc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014d92:	881a      	ldrh	r2, [r3, #0]
 8014d94:	4b0e      	ldr	r3, [pc, #56]	; (8014dd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8014d96:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014d98:	8b3a      	ldrh	r2, [r7, #24]
 8014d9a:	8bbb      	ldrh	r3, [r7, #28]
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d301      	bcc.n	8014da4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8014da0:	2200      	movs	r2, #0
 8014da2:	e000      	b.n	8014da6 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8014da4:	2201      	movs	r2, #1
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	4618      	mov	r0, r3
 8014db0:	3710      	adds	r7, #16
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	080293a4 	.word	0x080293a4
 8014dbc:	2000b370 	.word	0x2000b370
 8014dc0:	2000b364 	.word	0x2000b364
 8014dc4:	2000b366 	.word	0x2000b366
 8014dc8:	2000b368 	.word	0x2000b368
 8014dcc:	2000b36a 	.word	0x2000b36a
 8014dd0:	2000b36c 	.word	0x2000b36c

08014dd4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8014dde:	683b      	ldr	r3, [r7, #0]
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7f7 fe81 	bl	800cae8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8014de6:	bf00      	nop
 8014de8:	3708      	adds	r7, #8
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
	...

08014df0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b086      	sub	sp, #24
 8014df4:	af02      	add	r7, sp, #8
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	60b9      	str	r1, [r7, #8]
 8014dfa:	607a      	str	r2, [r7, #4]
 8014dfc:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014dfe:	68f8      	ldr	r0, [r7, #12]
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	68b9      	ldr	r1, [r7, #8]
 8014e0a:	f7ff feaf 	bl	8014b6c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014e0e:	4a04      	ldr	r2, [pc, #16]	; (8014e20 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	601a      	str	r2, [r3, #0]
    {

    }
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	4618      	mov	r0, r3
 8014e18:	3710      	adds	r7, #16
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	08028d6c 	.word	0x08028d6c

08014e24 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014e24:	b580      	push	{r7, lr}
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	4801      	ldr	r0, [pc, #4]	; (8014e30 <__tcf_0+0xc>)
 8014e2a:	f000 f951 	bl	80150d0 <_ZN12FrontendHeapD1Ev>
 8014e2e:	bd80      	pop	{r7, pc}
 8014e30:	20008628 	.word	0x20008628

08014e34 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014e34:	b580      	push	{r7, lr}
 8014e36:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014e38:	4b08      	ldr	r3, [pc, #32]	; (8014e5c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	f003 0301 	and.w	r3, r3, #1
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d108      	bne.n	8014e56 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8014e44:	4806      	ldr	r0, [pc, #24]	; (8014e60 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8014e46:	f000 f867 	bl	8014f18 <_ZN12FrontendHeapC1Ev>
 8014e4a:	4b04      	ldr	r3, [pc, #16]	; (8014e5c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014e4c:	2201      	movs	r2, #1
 8014e4e:	601a      	str	r2, [r3, #0]
 8014e50:	4804      	ldr	r0, [pc, #16]	; (8014e64 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8014e52:	f010 fd01 	bl	8025858 <atexit>
        return instance;
 8014e56:	4b02      	ldr	r3, [pc, #8]	; (8014e60 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8014e58:	4618      	mov	r0, r3
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	2000a664 	.word	0x2000a664
 8014e60:	20008628 	.word	0x20008628
 8014e64:	08014e25 	.word	0x08014e25

08014e68 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	4a05      	ldr	r2, [pc, #20]	; (8014e88 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7ff fe97 	bl	8014bac <_ZN8touchgfx7MVPHeapD1Ev>
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4618      	mov	r0, r3
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	08028d6c 	.word	0x08028d6c

08014e8c <_ZN16FrontendHeapBaseD0Ev>:
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f7ff ffe7 	bl	8014e68 <_ZN16FrontendHeapBaseD1Ev>
 8014e9a:	2114      	movs	r1, #20
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f010 fc91 	bl	80257c4 <_ZdlPvj>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3708      	adds	r7, #8
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}

08014eac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f000 fd72 	bl	80159a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014ebc:	4a03      	ldr	r2, [pc, #12]	; (8014ecc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	601a      	str	r2, [r3, #0]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	08028d38 	.word	0x08028d38

08014ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	4618      	mov	r0, r3
 8014edc:	f000 fd60 	bl	80159a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014ee0:	4a03      	ldr	r2, [pc, #12]	; (8014ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	601a      	str	r2, [r3, #0]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3708      	adds	r7, #8
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}
 8014ef0:	08028d04 	.word	0x08028d04

08014ef4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	4618      	mov	r0, r3
 8014f00:	f000 fd4e 	bl	80159a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014f04:	4a03      	ldr	r2, [pc, #12]	; (8014f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	601a      	str	r2, [r3, #0]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3708      	adds	r7, #8
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	08028cd0 	.word	0x08028cd0

08014f18 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014f18:	b5b0      	push	{r4, r5, r7, lr}
 8014f1a:	b084      	sub	sp, #16
 8014f1c:	af02      	add	r7, sp, #8
 8014f1e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	f103 0414 	add.w	r4, r3, #20
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f641 6284 	movw	r2, #7812	; 0x1e84
 8014f34:	441a      	add	r2, r3
 8014f36:	6879      	ldr	r1, [r7, #4]
 8014f38:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014f3c:	440b      	add	r3, r1
 8014f3e:	9300      	str	r3, [sp, #0]
 8014f40:	4613      	mov	r3, r2
 8014f42:	462a      	mov	r2, r5
 8014f44:	4621      	mov	r1, r4
 8014f46:	f7ff ff53 	bl	8014df0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014f4a:	4a19      	ldr	r2, [pc, #100]	; (8014fb0 <_ZN12FrontendHeapC1Ev+0x98>)
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	601a      	str	r2, [r3, #0]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	3314      	adds	r3, #20
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7ff ffa9 	bl	8014eac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	332c      	adds	r3, #44	; 0x2c
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f7ff ffb6 	bl	8014ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	f641 6384 	movw	r3, #7812	; 0x1e84
 8014f6a:	4413      	add	r3, r2
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7ff ffc1 	bl	8014ef4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f7fd ff5f 	bl	8012e3c <_ZN5ModelC1Ev>
 8014f7e:	687a      	ldr	r2, [r7, #4]
 8014f80:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014f84:	4413      	add	r3, r2
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	f502 51f7 	add.w	r1, r2, #7904	; 0x1ee0
 8014f8c:	687a      	ldr	r2, [r7, #4]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7fd fd44 	bl	8012a1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	687a      	ldr	r2, [r7, #4]
 8014f98:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 8014f9c:	4413      	add	r3, r2
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	f7ff ff18 	bl	8014dd4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3708      	adds	r7, #8
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bdb0      	pop	{r4, r5, r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	08028cbc 	.word	0x08028cbc

08014fb4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b086      	sub	sp, #24
 8014fb8:	af02      	add	r7, sp, #8
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
 8014fc0:	603b      	str	r3, [r7, #0]
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	8bbb      	ldrh	r3, [r7, #28]
 8014fc6:	9301      	str	r3, [sp, #4]
 8014fc8:	8b3b      	ldrh	r3, [r7, #24]
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	68b9      	ldr	r1, [r7, #8]
 8014fd2:	f7ff fe61 	bl	8014c98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014fd6:	4a04      	ldr	r2, [pc, #16]	; (8014fe8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	601a      	str	r2, [r3, #0]
    }
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3710      	adds	r7, #16
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	08028d90 	.word	0x08028d90

08014fec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b086      	sub	sp, #24
 8014ff0:	af02      	add	r7, sp, #8
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
 8014ff6:	607a      	str	r2, [r7, #4]
 8014ff8:	603b      	str	r3, [r7, #0]
 8014ffa:	68f8      	ldr	r0, [r7, #12]
 8014ffc:	8bbb      	ldrh	r3, [r7, #28]
 8014ffe:	9301      	str	r3, [sp, #4]
 8015000:	8b3b      	ldrh	r3, [r7, #24]
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	68b9      	ldr	r1, [r7, #8]
 801500a:	f7ff ffd3 	bl	8014fb4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801500e:	4a04      	ldr	r2, [pc, #16]	; (8015020 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	601a      	str	r2, [r3, #0]
    }
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	4618      	mov	r0, r3
 8015018:	3710      	adds	r7, #16
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	08028a7c 	.word	0x08028a7c

08015024 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015024:	b480      	push	{r7}
 8015026:	b083      	sub	sp, #12
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
 801502c:	4a04      	ldr	r2, [pc, #16]	; (8015040 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	601a      	str	r2, [r3, #0]
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	4618      	mov	r0, r3
 8015036:	370c      	adds	r7, #12
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr
 8015040:	08028a64 	.word	0x08028a64

08015044 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	4618      	mov	r0, r3
 8015050:	f7ff ffe8 	bl	8015024 <_ZN8touchgfx15TouchControllerC1Ev>
 8015054:	4a03      	ldr	r2, [pc, #12]	; (8015064 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	601a      	str	r2, [r3, #0]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	4618      	mov	r0, r3
 801505e:	3708      	adds	r7, #8
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}
 8015064:	08028a4c 	.word	0x08028a4c

08015068 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8015068:	b590      	push	{r4, r7, lr}
 801506a:	b085      	sub	sp, #20
 801506c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801506e:	f7fd faa7 	bl	80125c0 <_ZN14BitmapDatabase11getInstanceEv>
 8015072:	4604      	mov	r4, r0
 8015074:	f7fd faae 	bl	80125d4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8015078:	4603      	mov	r3, r0
 801507a:	4619      	mov	r1, r3
 801507c:	2300      	movs	r3, #0
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	2300      	movs	r3, #0
 8015082:	2200      	movs	r2, #0
 8015084:	4620      	mov	r0, r4
 8015086:	f006 fd67 	bl	801bb58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801508a:	4809      	ldr	r0, [pc, #36]	; (80150b0 <touchgfx_init+0x48>)
 801508c:	f7ff fd5e 	bl	8014b4c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8015090:	2000      	movs	r0, #0
 8015092:	f7fd fbd7 	bl	8012844 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8015096:	4807      	ldr	r0, [pc, #28]	; (80150b4 <touchgfx_init+0x4c>)
 8015098:	f006 fca8 	bl	801b9ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 801509c:	f7ff feca 	bl	8014e34 <_ZN12FrontendHeap11getInstanceEv>
 80150a0:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80150a2:	4805      	ldr	r0, [pc, #20]	; (80150b8 <touchgfx_init+0x50>)
 80150a4:	f7fe ffd4 	bl	8014050 <_ZN11TouchGFXHAL10initializeEv>
}
 80150a8:	bf00      	nop
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd90      	pop	{r4, r7, pc}
 80150b0:	2000b2e4 	.word	0x2000b2e4
 80150b4:	2000003c 	.word	0x2000003c
 80150b8:	2000b2e8 	.word	0x2000b2e8

080150bc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80150c0:	4802      	ldr	r0, [pc, #8]	; (80150cc <touchgfx_taskEntry+0x10>)
 80150c2:	f000 fe80 	bl	8015dc6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80150c6:	bf00      	nop
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	2000b2e8 	.word	0x2000b2e8

080150d0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	4a11      	ldr	r2, [pc, #68]	; (8015120 <_ZN12FrontendHeapD1Ev+0x50>)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	601a      	str	r2, [r3, #0]
 80150de:	687a      	ldr	r2, [r7, #4]
 80150e0:	f641 63e4 	movw	r3, #7908	; 0x1ee4
 80150e4:	4413      	add	r3, r2
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7fd fc62 	bl	80129b0 <_ZN19FrontendApplicationD1Ev>
 80150ec:	687a      	ldr	r2, [r7, #4]
 80150ee:	f641 6384 	movw	r3, #7812	; 0x1e84
 80150f2:	4413      	add	r3, r2
 80150f4:	4618      	mov	r0, r3
 80150f6:	f000 f827 	bl	8015148 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	332c      	adds	r3, #44	; 0x2c
 80150fe:	4618      	mov	r0, r3
 8015100:	f000 f844 	bl	801518c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	3314      	adds	r3, #20
 8015108:	4618      	mov	r0, r3
 801510a:	f000 f863 	bl	80151d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	4618      	mov	r0, r3
 8015112:	f7ff fea9 	bl	8014e68 <_ZN16FrontendHeapBaseD1Ev>
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	08028cbc 	.word	0x08028cbc

08015124 <_ZN12FrontendHeapD0Ev>:
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f7ff ffcf 	bl	80150d0 <_ZN12FrontendHeapD1Ev>
 8015132:	f242 013c 	movw	r1, #8252	; 0x203c
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f010 fb44 	bl	80257c4 <_ZdlPvj>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	4618      	mov	r0, r3
 8015140:	3708      	adds	r7, #8
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
	...

08015148 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	4a05      	ldr	r2, [pc, #20]	; (8015168 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	601a      	str	r2, [r3, #0]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	4618      	mov	r0, r3
 801515a:	f000 fc1f 	bl	801599c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	4618      	mov	r0, r3
 8015162:	3708      	adds	r7, #8
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}
 8015168:	08028cd0 	.word	0x08028cd0

0801516c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f7ff ffe7 	bl	8015148 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801517a:	215c      	movs	r1, #92	; 0x5c
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f010 fb21 	bl	80257c4 <_ZdlPvj>
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	4618      	mov	r0, r3
 8015186:	3708      	adds	r7, #8
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	4a05      	ldr	r2, [pc, #20]	; (80151ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	4618      	mov	r0, r3
 801519e:	f000 fbfd 	bl	801599c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	4618      	mov	r0, r3
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	08028d04 	.word	0x08028d04

080151b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	f7ff ffe7 	bl	801518c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80151be:	f641 6158 	movw	r1, #7768	; 0x1e58
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f010 fafe 	bl	80257c4 <_ZdlPvj>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	4618      	mov	r0, r3
 80151cc:	3708      	adds	r7, #8
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
	...

080151d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	4a05      	ldr	r2, [pc, #20]	; (80151f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	601a      	str	r2, [r3, #0]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	4618      	mov	r0, r3
 80151e6:	f000 fbd9 	bl	801599c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	4618      	mov	r0, r3
 80151ee:	3708      	adds	r7, #8
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}
 80151f4:	08028d38 	.word	0x08028d38

080151f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f7ff ffe7 	bl	80151d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015206:	2118      	movs	r1, #24
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f010 fadb 	bl	80257c4 <_ZdlPvj>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	4618      	mov	r0, r3
 8015212:	3708      	adds	r7, #8
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	4a05      	ldr	r2, [pc, #20]	; (8015238 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	601a      	str	r2, [r3, #0]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	4618      	mov	r0, r3
 801522a:	f7ff fcdf 	bl	8014bec <_ZN8touchgfx3LCDD1Ev>
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	4618      	mov	r0, r3
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	0802b3c8 	.word	0x0802b3c8

0801523c <_ZN8touchgfx8LCD24bppD0Ev>:
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f7ff ffe7 	bl	8015218 <_ZN8touchgfx8LCD24bppD1Ev>
 801524a:	2158      	movs	r1, #88	; 0x58
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f010 fab9 	bl	80257c4 <_ZdlPvj>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	4618      	mov	r0, r3
 8015256:	3708      	adds	r7, #8
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <_Z41__static_initialization_and_destruction_0ii>:
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af02      	add	r7, sp, #8
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	6039      	str	r1, [r7, #0]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2b01      	cmp	r3, #1
 801526a:	d119      	bne.n	80152a0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015272:	4293      	cmp	r3, r2
 8015274:	d114      	bne.n	80152a0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8015276:	4818      	ldr	r0, [pc, #96]	; (80152d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015278:	f7ff fee4 	bl	8015044 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 801527c:	4817      	ldr	r0, [pc, #92]	; (80152dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801527e:	f7ff f963 	bl	8014548 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8015282:	4817      	ldr	r0, [pc, #92]	; (80152e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015284:	f008 fe56 	bl	801df34 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8015288:	f44f 7388 	mov.w	r3, #272	; 0x110
 801528c:	9301      	str	r3, [sp, #4]
 801528e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	4b10      	ldr	r3, [pc, #64]	; (80152d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015296:	4a12      	ldr	r2, [pc, #72]	; (80152e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015298:	4910      	ldr	r1, [pc, #64]	; (80152dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801529a:	4812      	ldr	r0, [pc, #72]	; (80152e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801529c:	f7ff fea6 	bl	8014fec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d113      	bne.n	80152ce <_Z41__static_initialization_and_destruction_0ii+0x72>
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152ac:	4293      	cmp	r3, r2
 80152ae:	d10e      	bne.n	80152ce <_Z41__static_initialization_and_destruction_0ii+0x72>
 80152b0:	480c      	ldr	r0, [pc, #48]	; (80152e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80152b2:	f7fe ff45 	bl	8014140 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80152b6:	480c      	ldr	r0, [pc, #48]	; (80152e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80152b8:	f7f6 fc70 	bl	800bb9c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80152bc:	4808      	ldr	r0, [pc, #32]	; (80152e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80152be:	f7ff ffab 	bl	8015218 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80152c2:	4806      	ldr	r0, [pc, #24]	; (80152dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80152c4:	f7ff f96a 	bl	801459c <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80152c8:	4803      	ldr	r0, [pc, #12]	; (80152d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80152ca:	f7fe fc9d 	bl	8013c08 <_ZN20STM32TouchControllerD1Ev>
}
 80152ce:	bf00      	nop
 80152d0:	3708      	adds	r7, #8
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	2000a668 	.word	0x2000a668
 80152dc:	2000a66c 	.word	0x2000a66c
 80152e0:	2000b28c 	.word	0x2000b28c
 80152e4:	2000b2e8 	.word	0x2000b2e8
 80152e8:	2000003c 	.word	0x2000003c

080152ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 80152ec:	b480      	push	{r7}
 80152ee:	b083      	sub	sp, #12
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80152f4:	2301      	movs	r3, #1
    }
 80152f6:	4618      	mov	r0, r3
 80152f8:	370c      	adds	r7, #12
 80152fa:	46bd      	mov	sp, r7
 80152fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015300:	4770      	bx	lr

08015302 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 8015302:	b480      	push	{r7}
 8015304:	b083      	sub	sp, #12
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801530a:	2354      	movs	r3, #84	; 0x54
    }
 801530c:	4618      	mov	r0, r3
 801530e:	370c      	adds	r7, #12
 8015310:	46bd      	mov	sp, r7
 8015312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015316:	4770      	bx	lr

08015318 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	460b      	mov	r3, r1
 8015322:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015324:	887b      	ldrh	r3, [r7, #2]
 8015326:	2254      	movs	r2, #84	; 0x54
 8015328:	fb02 f303 	mul.w	r3, r2, r3
 801532c:	3308      	adds	r3, #8
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	4413      	add	r3, r2
    }
 8015332:	4618      	mov	r0, r3
 8015334:	370c      	adds	r7, #12
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr

0801533e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 801533e:	b480      	push	{r7}
 8015340:	b083      	sub	sp, #12
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
 8015346:	460b      	mov	r3, r1
 8015348:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801534a:	887b      	ldrh	r3, [r7, #2]
 801534c:	2254      	movs	r2, #84	; 0x54
 801534e:	fb02 f303 	mul.w	r3, r2, r3
 8015352:	3308      	adds	r3, #8
 8015354:	687a      	ldr	r2, [r7, #4]
 8015356:	4413      	add	r3, r2
    }
 8015358:	4618      	mov	r0, r3
 801535a:	370c      	adds	r7, #12
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr

08015364 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015364:	b480      	push	{r7}
 8015366:	b083      	sub	sp, #12
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801536c:	2301      	movs	r3, #1
    }
 801536e:	4618      	mov	r0, r3
 8015370:	370c      	adds	r7, #12
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr

0801537a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801537a:	b480      	push	{r7}
 801537c:	b083      	sub	sp, #12
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015382:	f641 6350 	movw	r3, #7760	; 0x1e50
    }
 8015386:	4618      	mov	r0, r3
 8015388:	370c      	adds	r7, #12
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr

08015392 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015392:	b480      	push	{r7}
 8015394:	b083      	sub	sp, #12
 8015396:	af00      	add	r7, sp, #0
 8015398:	6078      	str	r0, [r7, #4]
 801539a:	460b      	mov	r3, r1
 801539c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801539e:	887b      	ldrh	r3, [r7, #2]
 80153a0:	f641 6250 	movw	r2, #7760	; 0x1e50
 80153a4:	fb02 f303 	mul.w	r3, r2, r3
 80153a8:	3308      	adds	r3, #8
 80153aa:	687a      	ldr	r2, [r7, #4]
 80153ac:	4413      	add	r3, r2
    }
 80153ae:	4618      	mov	r0, r3
 80153b0:	370c      	adds	r7, #12
 80153b2:	46bd      	mov	sp, r7
 80153b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b8:	4770      	bx	lr

080153ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8PongViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80153ba:	b480      	push	{r7}
 80153bc:	b083      	sub	sp, #12
 80153be:	af00      	add	r7, sp, #0
 80153c0:	6078      	str	r0, [r7, #4]
 80153c2:	460b      	mov	r3, r1
 80153c4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80153c6:	887b      	ldrh	r3, [r7, #2]
 80153c8:	f641 6250 	movw	r2, #7760	; 0x1e50
 80153cc:	fb02 f303 	mul.w	r3, r2, r3
 80153d0:	3308      	adds	r3, #8
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	4413      	add	r3, r2
    }
 80153d6:	4618      	mov	r0, r3
 80153d8:	370c      	adds	r7, #12
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr

080153e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80153e2:	b480      	push	{r7}
 80153e4:	b083      	sub	sp, #12
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80153ea:	2301      	movs	r3, #1
    }
 80153ec:	4618      	mov	r0, r3
 80153ee:	370c      	adds	r7, #12
 80153f0:	46bd      	mov	sp, r7
 80153f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f6:	4770      	bx	lr

080153f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80153f8:	b480      	push	{r7}
 80153fa:	b083      	sub	sp, #12
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015400:	2310      	movs	r3, #16
    }
 8015402:	4618      	mov	r0, r3
 8015404:	370c      	adds	r7, #12
 8015406:	46bd      	mov	sp, r7
 8015408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540c:	4770      	bx	lr

0801540e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801540e:	b480      	push	{r7}
 8015410:	b083      	sub	sp, #12
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
 8015416:	460b      	mov	r3, r1
 8015418:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801541a:	887b      	ldrh	r3, [r7, #2]
 801541c:	011b      	lsls	r3, r3, #4
 801541e:	3308      	adds	r3, #8
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	4413      	add	r3, r2
    }
 8015424:	4618      	mov	r0, r3
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr

08015430 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16galleryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	460b      	mov	r3, r1
 801543a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801543c:	887b      	ldrh	r3, [r7, #2]
 801543e:	011b      	lsls	r3, r3, #4
 8015440:	3308      	adds	r3, #8
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	4413      	add	r3, r2
    }
 8015446:	4618      	mov	r0, r3
 8015448:	370c      	adds	r7, #12
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr

08015452 <_GLOBAL__sub_I_touchgfx_init>:
 8015452:	b580      	push	{r7, lr}
 8015454:	af00      	add	r7, sp, #0
 8015456:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801545a:	2001      	movs	r0, #1
 801545c:	f7ff fefe 	bl	801525c <_Z41__static_initialization_and_destruction_0ii>
 8015460:	bd80      	pop	{r7, pc}

08015462 <_GLOBAL__sub_D_touchgfx_init>:
 8015462:	b580      	push	{r7, lr}
 8015464:	af00      	add	r7, sp, #0
 8015466:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801546a:	2000      	movs	r0, #0
 801546c:	f7ff fef6 	bl	801525c <_Z41__static_initialization_and_destruction_0ii>
 8015470:	bd80      	pop	{r7, pc}

08015472 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8015472:	b580      	push	{r7, lr}
 8015474:	b082      	sub	sp, #8
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	3318      	adds	r3, #24
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	4798      	blx	r3
    }
 8015486:	bf00      	nop
 8015488:	3708      	adds	r7, #8
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}

0801548e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 801548e:	b480      	push	{r7}
 8015490:	b083      	sub	sp, #12
 8015492:	af00      	add	r7, sp, #0
 8015494:	6078      	str	r0, [r7, #4]
 8015496:	460b      	mov	r3, r1
 8015498:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	78fa      	ldrb	r2, [r7, #3]
 801549e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80154a2:	bf00      	nop
 80154a4:	370c      	adds	r7, #12
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr

080154ae <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80154ae:	b480      	push	{r7}
 80154b0:	b083      	sub	sp, #12
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80154bc:	3301      	adds	r3, #1
 80154be:	b2da      	uxtb	r2, r3
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80154c6:	bf00      	nop
 80154c8:	370c      	adds	r7, #12
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr
	...

080154d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	460b      	mov	r3, r1
 80154de:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80154e0:	78fb      	ldrb	r3, [r7, #3]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d002      	beq.n	80154ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80154e6:	78fb      	ldrb	r3, [r7, #3]
 80154e8:	2b02      	cmp	r3, #2
 80154ea:	d105      	bne.n	80154f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	78fa      	ldrb	r2, [r7, #3]
 80154f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80154f4:	2301      	movs	r3, #1
 80154f6:	e027      	b.n	8015548 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80154f8:	78fb      	ldrb	r3, [r7, #3]
 80154fa:	2b01      	cmp	r3, #1
 80154fc:	d123      	bne.n	8015546 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015502:	2b00      	cmp	r3, #0
 8015504:	d014      	beq.n	8015530 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	3380      	adds	r3, #128	; 0x80
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	4798      	blx	r3
 8015512:	4603      	mov	r3, r0
 8015514:	461a      	mov	r2, r3
 8015516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801551a:	429a      	cmp	r2, r3
 801551c:	d008      	beq.n	8015530 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801551e:	4b0c      	ldr	r3, [pc, #48]	; (8015550 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8015520:	781b      	ldrb	r3, [r3, #0]
 8015522:	f083 0301 	eor.w	r3, r3, #1
 8015526:	b2db      	uxtb	r3, r3
 8015528:	2b00      	cmp	r3, #0
 801552a:	d001      	beq.n	8015530 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801552c:	2301      	movs	r3, #1
 801552e:	e000      	b.n	8015532 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8015530:	2300      	movs	r3, #0
 8015532:	2b00      	cmp	r3, #0
 8015534:	d005      	beq.n	8015542 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	78fa      	ldrb	r2, [r7, #3]
 801553a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801553e:	2301      	movs	r3, #1
 8015540:	e002      	b.n	8015548 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8015542:	2300      	movs	r3, #0
 8015544:	e000      	b.n	8015548 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8015546:	2300      	movs	r3, #0
    }
 8015548:	4618      	mov	r0, r3
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	2000b36e 	.word	0x2000b36e

08015554 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	683a      	ldr	r2, [r7, #0]
 8015562:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015564:	bf00      	nop
 8015566:	370c      	adds	r7, #12
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr

08015570 <__NVIC_EnableIRQ>:
{
 8015570:	b480      	push	{r7}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	4603      	mov	r3, r0
 8015578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801557e:	2b00      	cmp	r3, #0
 8015580:	db0d      	blt.n	801559e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015586:	b2db      	uxtb	r3, r3
 8015588:	f003 021f 	and.w	r2, r3, #31
 801558c:	4907      	ldr	r1, [pc, #28]	; (80155ac <__NVIC_EnableIRQ+0x3c>)
 801558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015592:	095b      	lsrs	r3, r3, #5
 8015594:	2001      	movs	r0, #1
 8015596:	fa00 f202 	lsl.w	r2, r0, r2
 801559a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801559e:	bf00      	nop
 80155a0:	370c      	adds	r7, #12
 80155a2:	46bd      	mov	sp, r7
 80155a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a8:	4770      	bx	lr
 80155aa:	bf00      	nop
 80155ac:	e000e100 	.word	0xe000e100

080155b0 <__NVIC_DisableIRQ>:
{
 80155b0:	b480      	push	{r7}
 80155b2:	b083      	sub	sp, #12
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	4603      	mov	r3, r0
 80155b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	db12      	blt.n	80155e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80155c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	f003 021f 	and.w	r2, r3, #31
 80155cc:	4909      	ldr	r1, [pc, #36]	; (80155f4 <__NVIC_DisableIRQ+0x44>)
 80155ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155d2:	095b      	lsrs	r3, r3, #5
 80155d4:	2001      	movs	r0, #1
 80155d6:	fa00 f202 	lsl.w	r2, r0, r2
 80155da:	3320      	adds	r3, #32
 80155dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80155e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80155e4:	f3bf 8f6f 	isb	sy
}
 80155e8:	bf00      	nop
 80155ea:	370c      	adds	r7, #12
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr
 80155f4:	e000e100 	.word	0xe000e100

080155f8 <__NVIC_SetPriority>:
{
 80155f8:	b480      	push	{r7}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	4603      	mov	r3, r0
 8015600:	6039      	str	r1, [r7, #0]
 8015602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015608:	2b00      	cmp	r3, #0
 801560a:	db0c      	blt.n	8015626 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	b2db      	uxtb	r3, r3
 8015610:	4a0e      	ldr	r2, [pc, #56]	; (801564c <__NVIC_SetPriority+0x54>)
 8015612:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8015616:	4608      	mov	r0, r1
 8015618:	011b      	lsls	r3, r3, #4
 801561a:	b2d9      	uxtb	r1, r3
 801561c:	1813      	adds	r3, r2, r0
 801561e:	460a      	mov	r2, r1
 8015620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015624:	e00c      	b.n	8015640 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	b2da      	uxtb	r2, r3
 801562a:	4909      	ldr	r1, [pc, #36]	; (8015650 <__NVIC_SetPriority+0x58>)
 801562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015630:	b2db      	uxtb	r3, r3
 8015632:	f003 030f 	and.w	r3, r3, #15
 8015636:	3b04      	subs	r3, #4
 8015638:	0112      	lsls	r2, r2, #4
 801563a:	b2d2      	uxtb	r2, r2
 801563c:	440b      	add	r3, r1
 801563e:	761a      	strb	r2, [r3, #24]
}
 8015640:	bf00      	nop
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr
 801564c:	e000e100 	.word	0xe000e100
 8015650:	e000ed00 	.word	0xe000ed00

08015654 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015654:	b5b0      	push	{r4, r5, r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	4618      	mov	r0, r3
 8015660:	f000 fe76 	bl	8016350 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8015664:	687d      	ldr	r5, [r7, #4]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	334c      	adds	r3, #76	; 0x4c
 801566c:	681c      	ldr	r4, [r3, #0]
 801566e:	f003 ff55 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8015672:	4603      	mov	r3, r0
 8015674:	4619      	mov	r1, r3
 8015676:	4628      	mov	r0, r5
 8015678:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	490d      	ldr	r1, [pc, #52]	; (80156b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801567e:	4618      	mov	r0, r3
 8015680:	f7ff ff68 	bl	8015554 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2101      	movs	r1, #1
 8015688:	4618      	mov	r0, r3
 801568a:	f7ff ff23 	bl	80154d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	3374      	adds	r3, #116	; 0x74
 8015696:	681c      	ldr	r4, [r3, #0]
 8015698:	2300      	movs	r3, #0
 801569a:	2200      	movs	r2, #0
 801569c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80156a0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2101      	movs	r1, #1
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7ff fef1 	bl	801548e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80156ac:	bf00      	nop
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bdb0      	pop	{r4, r5, r7, pc}
 80156b4:	08014295 	.word	0x08014295

080156b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80156c0:	2109      	movs	r1, #9
 80156c2:	205a      	movs	r0, #90	; 0x5a
 80156c4:	f7ff ff98 	bl	80155f8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80156c8:	2109      	movs	r1, #9
 80156ca:	2058      	movs	r0, #88	; 0x58
 80156cc:	f7ff ff94 	bl	80155f8 <__NVIC_SetPriority>
}
 80156d0:	bf00      	nop
 80156d2:	3708      	adds	r7, #8
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80156e0:	205a      	movs	r0, #90	; 0x5a
 80156e2:	f7ff ff45 	bl	8015570 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80156e6:	2058      	movs	r0, #88	; 0x58
 80156e8:	f7ff ff42 	bl	8015570 <__NVIC_EnableIRQ>
}
 80156ec:	bf00      	nop
 80156ee:	3708      	adds	r7, #8
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80156fc:	205a      	movs	r0, #90	; 0x5a
 80156fe:	f7ff ff57 	bl	80155b0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8015702:	2058      	movs	r0, #88	; 0x58
 8015704:	f7ff ff54 	bl	80155b0 <__NVIC_DisableIRQ>
}
 8015708:	bf00      	nop
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}

08015710 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015710:	b480      	push	{r7}
 8015712:	b083      	sub	sp, #12
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015718:	4b11      	ldr	r3, [pc, #68]	; (8015760 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801571a:	68db      	ldr	r3, [r3, #12]
 801571c:	b29b      	uxth	r3, r3
 801571e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015722:	b29b      	uxth	r3, r3
 8015724:	3b01      	subs	r3, #1
 8015726:	b29a      	uxth	r2, r3
 8015728:	4b0e      	ldr	r3, [pc, #56]	; (8015764 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801572a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801572c:	4b0c      	ldr	r3, [pc, #48]	; (8015760 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801572e:	691b      	ldr	r3, [r3, #16]
 8015730:	b29b      	uxth	r3, r3
 8015732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015736:	b29b      	uxth	r3, r3
 8015738:	3b01      	subs	r3, #1
 801573a:	b29a      	uxth	r2, r3
 801573c:	4b0a      	ldr	r3, [pc, #40]	; (8015768 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801573e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015740:	4b08      	ldr	r3, [pc, #32]	; (8015764 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015742:	881a      	ldrh	r2, [r3, #0]
 8015744:	4b06      	ldr	r3, [pc, #24]	; (8015760 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015746:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015748:	4b05      	ldr	r3, [pc, #20]	; (8015760 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801574c:	4a04      	ldr	r2, [pc, #16]	; (8015760 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801574e:	f043 0301 	orr.w	r3, r3, #1
 8015752:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015754:	bf00      	nop
 8015756:	370c      	adds	r7, #12
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr
 8015760:	40016800 	.word	0x40016800
 8015764:	2000b360 	.word	0x2000b360
 8015768:	2000b362 	.word	0x2000b362

0801576c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015774:	4b03      	ldr	r3, [pc, #12]	; (8015784 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015778:	4618      	mov	r0, r3
 801577a:	370c      	adds	r7, #12
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr
 8015784:	40016884 	.word	0x40016884

08015788 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015792:	4a06      	ldr	r2, [pc, #24]	; (80157ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015798:	4b05      	ldr	r3, [pc, #20]	; (80157b0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801579a:	2201      	movs	r2, #1
 801579c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801579e:	bf00      	nop
 80157a0:	370c      	adds	r7, #12
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr
 80157aa:	bf00      	nop
 80157ac:	40016884 	.word	0x40016884
 80157b0:	40016800 	.word	0x40016800

080157b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b082      	sub	sp, #8
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6839      	ldr	r1, [r7, #0]
 80157c2:	4618      	mov	r0, r3
 80157c4:	f000 fad5 	bl	8015d72 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80157c8:	bf00      	nop
 80157ca:	3708      	adds	r7, #8
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80157d0:	b480      	push	{r7}
 80157d2:	b085      	sub	sp, #20
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80157d8:	4b0d      	ldr	r3, [pc, #52]	; (8015810 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80157da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157dc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80157de:	4b0c      	ldr	r3, [pc, #48]	; (8015810 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80157e0:	68db      	ldr	r3, [r3, #12]
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	3301      	adds	r3, #1
 80157ec:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80157ee:	89fa      	ldrh	r2, [r7, #14]
 80157f0:	89bb      	ldrh	r3, [r7, #12]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d201      	bcs.n	80157fa <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80157f6:	2300      	movs	r3, #0
 80157f8:	e003      	b.n	8015802 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 80157fa:	89fa      	ldrh	r2, [r7, #14]
 80157fc:	89bb      	ldrh	r3, [r7, #12]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	b29b      	uxth	r3, r3
    }
}
 8015802:	4618      	mov	r0, r3
 8015804:	3714      	adds	r7, #20
 8015806:	46bd      	mov	sp, r7
 8015808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580c:	4770      	bx	lr
 801580e:	bf00      	nop
 8015810:	40016800 	.word	0x40016800

08015814 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801581c:	4b1a      	ldr	r3, [pc, #104]	; (8015888 <HAL_LTDC_LineEventCallback+0x74>)
 801581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015820:	4a1a      	ldr	r2, [pc, #104]	; (801588c <HAL_LTDC_LineEventCallback+0x78>)
 8015822:	8812      	ldrh	r2, [r2, #0]
 8015824:	4293      	cmp	r3, r2
 8015826:	bf0c      	ite	eq
 8015828:	2301      	moveq	r3, #1
 801582a:	2300      	movne	r3, #0
 801582c:	b2db      	uxtb	r3, r3
 801582e:	2b00      	cmp	r3, #0
 8015830:	d017      	beq.n	8015862 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015832:	4b17      	ldr	r3, [pc, #92]	; (8015890 <HAL_LTDC_LineEventCallback+0x7c>)
 8015834:	881b      	ldrh	r3, [r3, #0]
 8015836:	4619      	mov	r1, r3
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f7ef fcb5 	bl	80051a8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801583e:	f7f6 ff83 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 8015842:	4603      	mov	r3, r0
 8015844:	4618      	mov	r0, r3
 8015846:	f7ff fe32 	bl	80154ae <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801584a:	f7fe fd03 	bl	8014254 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801584e:	f7f6 ff7b 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 8015852:	4603      	mov	r3, r0
 8015854:	4618      	mov	r0, r3
 8015856:	f001 f803 	bl	8016860 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801585a:	2000      	movs	r0, #0
 801585c:	f7fe f9f6 	bl	8013c4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015860:	e00e      	b.n	8015880 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015862:	4b0a      	ldr	r3, [pc, #40]	; (801588c <HAL_LTDC_LineEventCallback+0x78>)
 8015864:	881b      	ldrh	r3, [r3, #0]
 8015866:	4619      	mov	r1, r3
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7ef fc9d 	bl	80051a8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801586e:	2000      	movs	r0, #0
 8015870:	f7fe f9f7 	bl	8013c62 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015874:	f7f6 ff68 	bl	800c748 <_ZN8touchgfx3HAL11getInstanceEv>
 8015878:	4603      	mov	r3, r0
 801587a:	4618      	mov	r0, r3
 801587c:	f7ff fdf9 	bl	8015472 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015880:	bf00      	nop
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}
 8015888:	40016800 	.word	0x40016800
 801588c:	2000b360 	.word	0x2000b360
 8015890:	2000b362 	.word	0x2000b362

08015894 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015894:	8880      	ldrh	r0, [r0, #4]
 8015896:	4770      	bx	lr

08015898 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015898:	2300      	movs	r3, #0
 801589a:	8083      	strh	r3, [r0, #4]
 801589c:	4770      	bx	lr
	...

080158a0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80158a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158a2:	6803      	ldr	r3, [r0, #0]
 80158a4:	460e      	mov	r6, r1
 80158a6:	2100      	movs	r1, #0
 80158a8:	4605      	mov	r5, r0
 80158aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ac:	4798      	blx	r3
 80158ae:	4604      	mov	r4, r0
 80158b0:	682b      	ldr	r3, [r5, #0]
 80158b2:	4628      	mov	r0, r5
 80158b4:	1b34      	subs	r4, r6, r4
 80158b6:	6a1b      	ldr	r3, [r3, #32]
 80158b8:	b2a4      	uxth	r4, r4
 80158ba:	4798      	blx	r3
 80158bc:	88ab      	ldrh	r3, [r5, #4]
 80158be:	fbb4 f4f0 	udiv	r4, r4, r0
 80158c2:	42a3      	cmp	r3, r4
 80158c4:	d805      	bhi.n	80158d2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80158c6:	4b0e      	ldr	r3, [pc, #56]	; (8015900 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80158c8:	2120      	movs	r1, #32
 80158ca:	4a0e      	ldr	r2, [pc, #56]	; (8015904 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80158cc:	480e      	ldr	r0, [pc, #56]	; (8015908 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80158ce:	f00f ffa5 	bl	802581c <__assert_func>
 80158d2:	682b      	ldr	r3, [r5, #0]
 80158d4:	2100      	movs	r1, #0
 80158d6:	4628      	mov	r0, r5
 80158d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158da:	4798      	blx	r3
 80158dc:	682b      	ldr	r3, [r5, #0]
 80158de:	4607      	mov	r7, r0
 80158e0:	4628      	mov	r0, r5
 80158e2:	6a1b      	ldr	r3, [r3, #32]
 80158e4:	4798      	blx	r3
 80158e6:	1bf3      	subs	r3, r6, r7
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	fbb3 f2f0 	udiv	r2, r3, r0
 80158ee:	fb02 3010 	mls	r0, r2, r0, r3
 80158f2:	b118      	cbz	r0, 80158fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80158f4:	4b05      	ldr	r3, [pc, #20]	; (801590c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80158f6:	2121      	movs	r1, #33	; 0x21
 80158f8:	4a02      	ldr	r2, [pc, #8]	; (8015904 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80158fa:	e7e7      	b.n	80158cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80158fc:	4620      	mov	r0, r4
 80158fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015900:	08028e3c 	.word	0x08028e3c
 8015904:	08028faa 	.word	0x08028faa
 8015908:	08028e51 	.word	0x08028e51
 801590c:	08028e7f 	.word	0x08028e7f

08015910 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015910:	b538      	push	{r3, r4, r5, lr}
 8015912:	6803      	ldr	r3, [r0, #0]
 8015914:	460d      	mov	r5, r1
 8015916:	4604      	mov	r4, r0
 8015918:	6a1b      	ldr	r3, [r3, #32]
 801591a:	4798      	blx	r3
 801591c:	4285      	cmp	r5, r0
 801591e:	d905      	bls.n	801592c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015920:	4b0c      	ldr	r3, [pc, #48]	; (8015954 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015922:	2132      	movs	r1, #50	; 0x32
 8015924:	4a0c      	ldr	r2, [pc, #48]	; (8015958 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015926:	480d      	ldr	r0, [pc, #52]	; (801595c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015928:	f00f ff78 	bl	802581c <__assert_func>
 801592c:	6823      	ldr	r3, [r4, #0]
 801592e:	4620      	mov	r0, r4
 8015930:	88a5      	ldrh	r5, [r4, #4]
 8015932:	69db      	ldr	r3, [r3, #28]
 8015934:	4798      	blx	r3
 8015936:	4285      	cmp	r5, r0
 8015938:	d303      	bcc.n	8015942 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801593a:	4b09      	ldr	r3, [pc, #36]	; (8015960 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801593c:	2133      	movs	r1, #51	; 0x33
 801593e:	4a06      	ldr	r2, [pc, #24]	; (8015958 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015940:	e7f1      	b.n	8015926 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015942:	6823      	ldr	r3, [r4, #0]
 8015944:	4620      	mov	r0, r4
 8015946:	88a1      	ldrh	r1, [r4, #4]
 8015948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801594a:	4798      	blx	r3
 801594c:	88a3      	ldrh	r3, [r4, #4]
 801594e:	3301      	adds	r3, #1
 8015950:	80a3      	strh	r3, [r4, #4]
 8015952:	bd38      	pop	{r3, r4, r5, pc}
 8015954:	08028ef9 	.word	0x08028ef9
 8015958:	08028fed 	.word	0x08028fed
 801595c:	08028e51 	.word	0x08028e51
 8015960:	08028f10 	.word	0x08028f10

08015964 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015964:	b570      	push	{r4, r5, r6, lr}
 8015966:	6803      	ldr	r3, [r0, #0]
 8015968:	4616      	mov	r6, r2
 801596a:	4604      	mov	r4, r0
 801596c:	460d      	mov	r5, r1
 801596e:	6a1b      	ldr	r3, [r3, #32]
 8015970:	4798      	blx	r3
 8015972:	4286      	cmp	r6, r0
 8015974:	d905      	bls.n	8015982 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015976:	4b06      	ldr	r3, [pc, #24]	; (8015990 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015978:	213c      	movs	r1, #60	; 0x3c
 801597a:	4a06      	ldr	r2, [pc, #24]	; (8015994 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801597c:	4806      	ldr	r0, [pc, #24]	; (8015998 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801597e:	f00f ff4d 	bl	802581c <__assert_func>
 8015982:	6823      	ldr	r3, [r4, #0]
 8015984:	4629      	mov	r1, r5
 8015986:	4620      	mov	r0, r4
 8015988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801598a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801598e:	4718      	bx	r3
 8015990:	08028ef9 	.word	0x08028ef9
 8015994:	08028f60 	.word	0x08028f60
 8015998:	08028e51 	.word	0x08028e51

0801599c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801599c:	4770      	bx	lr
	...

080159a0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80159a0:	4a02      	ldr	r2, [pc, #8]	; (80159ac <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80159a2:	6002      	str	r2, [r0, #0]
 80159a4:	2200      	movs	r2, #0
 80159a6:	8082      	strh	r2, [r0, #4]
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop
 80159ac:	08028f34 	.word	0x08028f34

080159b0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80159b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159b2:	2000      	movs	r0, #0
 80159b4:	b12b      	cbz	r3, 80159c2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80159b6:	b920      	cbnz	r0, 80159c2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80159b8:	1a5a      	subs	r2, r3, r1
 80159ba:	699b      	ldr	r3, [r3, #24]
 80159bc:	4250      	negs	r0, r2
 80159be:	4150      	adcs	r0, r2
 80159c0:	e7f8      	b.n	80159b4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80159c2:	4770      	bx	lr

080159c4 <_ZN8touchgfx9Container9removeAllEv>:
 80159c4:	2200      	movs	r2, #0
 80159c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80159c8:	b123      	cbz	r3, 80159d4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80159ca:	6999      	ldr	r1, [r3, #24]
 80159cc:	6281      	str	r1, [r0, #40]	; 0x28
 80159ce:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80159d2:	e7f8      	b.n	80159c6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80159d4:	4770      	bx	lr

080159d6 <_ZN8touchgfx9Container6unlinkEv>:
 80159d6:	2300      	movs	r3, #0
 80159d8:	6283      	str	r3, [r0, #40]	; 0x28
 80159da:	4770      	bx	lr

080159dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80159dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159e0:	461f      	mov	r7, r3
 80159e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80159e6:	460d      	mov	r5, r1
 80159e8:	4616      	mov	r6, r2
 80159ea:	b103      	cbz	r3, 80159ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80159ec:	6038      	str	r0, [r7, #0]
 80159ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80159f0:	b314      	cbz	r4, 8015a38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80159f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80159f6:	b1eb      	cbz	r3, 8015a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80159fc:	428d      	cmp	r5, r1
 80159fe:	db19      	blt.n	8015a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015a00:	b289      	uxth	r1, r1
 8015a02:	8923      	ldrh	r3, [r4, #8]
 8015a04:	440b      	add	r3, r1
 8015a06:	b21b      	sxth	r3, r3
 8015a08:	429d      	cmp	r5, r3
 8015a0a:	da13      	bge.n	8015a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015a0c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015a10:	4296      	cmp	r6, r2
 8015a12:	db0f      	blt.n	8015a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015a14:	b292      	uxth	r2, r2
 8015a16:	8963      	ldrh	r3, [r4, #10]
 8015a18:	4413      	add	r3, r2
 8015a1a:	b21b      	sxth	r3, r3
 8015a1c:	429e      	cmp	r6, r3
 8015a1e:	da09      	bge.n	8015a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015a20:	6823      	ldr	r3, [r4, #0]
 8015a22:	1ab2      	subs	r2, r6, r2
 8015a24:	1a69      	subs	r1, r5, r1
 8015a26:	4620      	mov	r0, r4
 8015a28:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8015a2c:	b212      	sxth	r2, r2
 8015a2e:	463b      	mov	r3, r7
 8015a30:	b209      	sxth	r1, r1
 8015a32:	47c0      	blx	r8
 8015a34:	69a4      	ldr	r4, [r4, #24]
 8015a36:	e7db      	b.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a3c <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	8002      	strh	r2, [r0, #0]
 8015a40:	8042      	strh	r2, [r0, #2]
 8015a42:	8082      	strh	r2, [r0, #4]
 8015a44:	80c2      	strh	r2, [r0, #6]
 8015a46:	4770      	bx	lr

08015a48 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015a48:	b570      	push	{r4, r5, r6, lr}
 8015a4a:	460d      	mov	r5, r1
 8015a4c:	4616      	mov	r6, r2
 8015a4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a50:	b13c      	cbz	r4, 8015a62 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015a52:	6823      	ldr	r3, [r4, #0]
 8015a54:	4620      	mov	r0, r4
 8015a56:	4632      	mov	r2, r6
 8015a58:	4629      	mov	r1, r5
 8015a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a5c:	4798      	blx	r3
 8015a5e:	69a4      	ldr	r4, [r4, #24]
 8015a60:	e7f6      	b.n	8015a50 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015a62:	bd70      	pop	{r4, r5, r6, pc}

08015a64 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015a64:	b538      	push	{r3, r4, r5, lr}
 8015a66:	460d      	mov	r5, r1
 8015a68:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a6a:	b134      	cbz	r4, 8015a7a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015a6c:	682b      	ldr	r3, [r5, #0]
 8015a6e:	4621      	mov	r1, r4
 8015a70:	4628      	mov	r0, r5
 8015a72:	689b      	ldr	r3, [r3, #8]
 8015a74:	4798      	blx	r3
 8015a76:	69a4      	ldr	r4, [r4, #24]
 8015a78:	e7f7      	b.n	8015a6a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015a7a:	bd38      	pop	{r3, r4, r5, pc}

08015a7c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015a7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a7e:	b19b      	cbz	r3, 8015aa8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a80:	428b      	cmp	r3, r1
 8015a82:	d109      	bne.n	8015a98 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015a84:	699a      	ldr	r2, [r3, #24]
 8015a86:	2100      	movs	r1, #0
 8015a88:	6159      	str	r1, [r3, #20]
 8015a8a:	6282      	str	r2, [r0, #40]	; 0x28
 8015a8c:	b902      	cbnz	r2, 8015a90 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015a8e:	4770      	bx	lr
 8015a90:	6199      	str	r1, [r3, #24]
 8015a92:	4770      	bx	lr
 8015a94:	4613      	mov	r3, r2
 8015a96:	b13a      	cbz	r2, 8015aa8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a98:	699a      	ldr	r2, [r3, #24]
 8015a9a:	428a      	cmp	r2, r1
 8015a9c:	d1fa      	bne.n	8015a94 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015a9e:	698a      	ldr	r2, [r1, #24]
 8015aa0:	619a      	str	r2, [r3, #24]
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015aa8:	4770      	bx	lr

08015aaa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015aaa:	b410      	push	{r4}
 8015aac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015aae:	4604      	mov	r4, r0
 8015ab0:	b92b      	cbnz	r3, 8015abe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015ab2:	6803      	ldr	r3, [r0, #0]
 8015ab4:	4611      	mov	r1, r2
 8015ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015abc:	4718      	bx	r3
 8015abe:	b941      	cbnz	r1, 8015ad2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015ac0:	6193      	str	r3, [r2, #24]
 8015ac2:	6282      	str	r2, [r0, #40]	; 0x28
 8015ac4:	6154      	str	r4, [r2, #20]
 8015ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aca:	4770      	bx	lr
 8015acc:	4603      	mov	r3, r0
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	d0f9      	beq.n	8015ac6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015ad2:	4299      	cmp	r1, r3
 8015ad4:	6998      	ldr	r0, [r3, #24]
 8015ad6:	d1f9      	bne.n	8015acc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015ad8:	6190      	str	r0, [r2, #24]
 8015ada:	618a      	str	r2, [r1, #24]
 8015adc:	e7f2      	b.n	8015ac4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015ae0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015ae0:	4288      	cmp	r0, r1
 8015ae2:	b508      	push	{r3, lr}
 8015ae4:	d105      	bne.n	8015af2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015ae6:	4b11      	ldr	r3, [pc, #68]	; (8015b2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015ae8:	2123      	movs	r1, #35	; 0x23
 8015aea:	4a11      	ldr	r2, [pc, #68]	; (8015b30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015aec:	4811      	ldr	r0, [pc, #68]	; (8015b34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015aee:	f00f fe95 	bl	802581c <__assert_func>
 8015af2:	694b      	ldr	r3, [r1, #20]
 8015af4:	b11b      	cbz	r3, 8015afe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015af6:	4b10      	ldr	r3, [pc, #64]	; (8015b38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015af8:	2124      	movs	r1, #36	; 0x24
 8015afa:	4a0d      	ldr	r2, [pc, #52]	; (8015b30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015afc:	e7f6      	b.n	8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015afe:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015b02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015b04:	b913      	cbnz	r3, 8015b0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015b06:	6281      	str	r1, [r0, #40]	; 0x28
 8015b08:	bd08      	pop	{r3, pc}
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	699a      	ldr	r2, [r3, #24]
 8015b0e:	b12a      	cbz	r2, 8015b1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015b10:	428b      	cmp	r3, r1
 8015b12:	d1fa      	bne.n	8015b0a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015b14:	4b09      	ldr	r3, [pc, #36]	; (8015b3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015b16:	2135      	movs	r1, #53	; 0x35
 8015b18:	4a05      	ldr	r2, [pc, #20]	; (8015b30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015b1a:	e7e7      	b.n	8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015b1c:	428b      	cmp	r3, r1
 8015b1e:	d103      	bne.n	8015b28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015b20:	4b06      	ldr	r3, [pc, #24]	; (8015b3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015b22:	2138      	movs	r1, #56	; 0x38
 8015b24:	4a02      	ldr	r2, [pc, #8]	; (8015b30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015b26:	e7e1      	b.n	8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015b28:	6199      	str	r1, [r3, #24]
 8015b2a:	e7ed      	b.n	8015b08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015b2c:	0802902b 	.word	0x0802902b
 8015b30:	08029180 	.word	0x08029180
 8015b34:	08029057 	.word	0x08029057
 8015b38:	0802908a 	.word	0x0802908a
 8015b3c:	080290c0 	.word	0x080290c0

08015b40 <_ZN8touchgfx4RectaNERKS0_>:
 8015b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b44:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015b48:	888c      	ldrh	r4, [r1, #4]
 8015b4a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015b4e:	443c      	add	r4, r7
 8015b50:	b2a4      	uxth	r4, r4
 8015b52:	fa0f f884 	sxth.w	r8, r4
 8015b56:	45c1      	cmp	r9, r8
 8015b58:	da2f      	bge.n	8015bba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b5a:	8882      	ldrh	r2, [r0, #4]
 8015b5c:	444a      	add	r2, r9
 8015b5e:	b292      	uxth	r2, r2
 8015b60:	fa0f fe82 	sxth.w	lr, r2
 8015b64:	4577      	cmp	r7, lr
 8015b66:	da28      	bge.n	8015bba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b68:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015b6c:	88cb      	ldrh	r3, [r1, #6]
 8015b6e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015b72:	442b      	add	r3, r5
 8015b74:	b21b      	sxth	r3, r3
 8015b76:	429e      	cmp	r6, r3
 8015b78:	da1f      	bge.n	8015bba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b7a:	88c3      	ldrh	r3, [r0, #6]
 8015b7c:	4433      	add	r3, r6
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	fa0f fc83 	sxth.w	ip, r3
 8015b84:	4565      	cmp	r5, ip
 8015b86:	da18      	bge.n	8015bba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b88:	454f      	cmp	r7, r9
 8015b8a:	bfb8      	it	lt
 8015b8c:	464f      	movlt	r7, r9
 8015b8e:	42b5      	cmp	r5, r6
 8015b90:	bfb8      	it	lt
 8015b92:	4635      	movlt	r5, r6
 8015b94:	45f0      	cmp	r8, lr
 8015b96:	bfd8      	it	le
 8015b98:	4622      	movle	r2, r4
 8015b9a:	1bd2      	subs	r2, r2, r7
 8015b9c:	8082      	strh	r2, [r0, #4]
 8015b9e:	884a      	ldrh	r2, [r1, #2]
 8015ba0:	88c9      	ldrh	r1, [r1, #6]
 8015ba2:	8007      	strh	r7, [r0, #0]
 8015ba4:	440a      	add	r2, r1
 8015ba6:	8045      	strh	r5, [r0, #2]
 8015ba8:	b292      	uxth	r2, r2
 8015baa:	b211      	sxth	r1, r2
 8015bac:	458c      	cmp	ip, r1
 8015bae:	bfa8      	it	ge
 8015bb0:	4613      	movge	r3, r2
 8015bb2:	1b5b      	subs	r3, r3, r5
 8015bb4:	80c3      	strh	r3, [r0, #6]
 8015bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bba:	2300      	movs	r3, #0
 8015bbc:	8003      	strh	r3, [r0, #0]
 8015bbe:	8043      	strh	r3, [r0, #2]
 8015bc0:	8083      	strh	r3, [r0, #4]
 8015bc2:	80c3      	strh	r3, [r0, #6]
 8015bc4:	e7f7      	b.n	8015bb6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015bc6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	dd06      	ble.n	8015bdc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015bce:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015bd2:	2800      	cmp	r0, #0
 8015bd4:	bfcc      	ite	gt
 8015bd6:	2000      	movgt	r0, #0
 8015bd8:	2001      	movle	r0, #1
 8015bda:	4770      	bx	lr
 8015bdc:	2001      	movs	r0, #1
 8015bde:	4770      	bx	lr

08015be0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015be4:	2300      	movs	r3, #0
 8015be6:	4604      	mov	r4, r0
 8015be8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015bea:	8003      	strh	r3, [r0, #0]
 8015bec:	8043      	strh	r3, [r0, #2]
 8015bee:	8083      	strh	r3, [r0, #4]
 8015bf0:	80c3      	strh	r3, [r0, #6]
 8015bf2:	2d00      	cmp	r5, #0
 8015bf4:	d040      	beq.n	8015c78 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015bf6:	1d28      	adds	r0, r5, #4
 8015bf8:	f7ff ffe5 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bfc:	b988      	cbnz	r0, 8015c22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015bfe:	4620      	mov	r0, r4
 8015c00:	f7ff ffe1 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c04:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015c08:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015c0c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015c10:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015c14:	b138      	cbz	r0, 8015c26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015c16:	8022      	strh	r2, [r4, #0]
 8015c18:	8063      	strh	r3, [r4, #2]
 8015c1a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015c1e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015c22:	69ad      	ldr	r5, [r5, #24]
 8015c24:	e7e5      	b.n	8015bf2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015c26:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015c2a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015c2e:	4290      	cmp	r0, r2
 8015c30:	4607      	mov	r7, r0
 8015c32:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015c36:	460e      	mov	r6, r1
 8015c38:	bfa8      	it	ge
 8015c3a:	4617      	movge	r7, r2
 8015c3c:	4299      	cmp	r1, r3
 8015c3e:	4472      	add	r2, lr
 8015c40:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015c44:	bfa8      	it	ge
 8015c46:	461e      	movge	r6, r3
 8015c48:	4440      	add	r0, r8
 8015c4a:	4471      	add	r1, lr
 8015c4c:	4463      	add	r3, ip
 8015c4e:	b200      	sxth	r0, r0
 8015c50:	8027      	strh	r7, [r4, #0]
 8015c52:	b212      	sxth	r2, r2
 8015c54:	8066      	strh	r6, [r4, #2]
 8015c56:	b209      	sxth	r1, r1
 8015c58:	b21b      	sxth	r3, r3
 8015c5a:	4290      	cmp	r0, r2
 8015c5c:	bfac      	ite	ge
 8015c5e:	ebc7 0200 	rsbge	r2, r7, r0
 8015c62:	ebc7 0202 	rsblt	r2, r7, r2
 8015c66:	4299      	cmp	r1, r3
 8015c68:	bfac      	ite	ge
 8015c6a:	ebc6 0301 	rsbge	r3, r6, r1
 8015c6e:	ebc6 0303 	rsblt	r3, r6, r3
 8015c72:	80a2      	strh	r2, [r4, #4]
 8015c74:	80e3      	strh	r3, [r4, #6]
 8015c76:	e7d4      	b.n	8015c22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015c78:	4620      	mov	r0, r4
 8015c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c7e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015c7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015c82:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015c86:	b383      	cbz	r3, 8015cea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c88:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c8a:	b374      	cbz	r4, 8015cea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c8c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015c90:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015c94:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015c98:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015c9c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015ca0:	b303      	cbz	r3, 8015ce4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015ca2:	4668      	mov	r0, sp
 8015ca4:	1d21      	adds	r1, r4, #4
 8015ca6:	f8ad 5000 	strh.w	r5, [sp]
 8015caa:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015cae:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015cb2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015cb6:	f7ff ff43 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 8015cba:	4668      	mov	r0, sp
 8015cbc:	f7ff ff83 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cc0:	b980      	cbnz	r0, 8015ce4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015cc2:	f8bd 3000 	ldrh.w	r3, [sp]
 8015cc6:	4669      	mov	r1, sp
 8015cc8:	88a2      	ldrh	r2, [r4, #4]
 8015cca:	4620      	mov	r0, r4
 8015ccc:	1a9b      	subs	r3, r3, r2
 8015cce:	88e2      	ldrh	r2, [r4, #6]
 8015cd0:	f8ad 3000 	strh.w	r3, [sp]
 8015cd4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015cd8:	1a9b      	subs	r3, r3, r2
 8015cda:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015cde:	6823      	ldr	r3, [r4, #0]
 8015ce0:	689b      	ldr	r3, [r3, #8]
 8015ce2:	4798      	blx	r3
 8015ce4:	69a4      	ldr	r4, [r4, #24]
 8015ce6:	2c00      	cmp	r4, #0
 8015ce8:	d1d8      	bne.n	8015c9c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015cea:	b002      	add	sp, #8
 8015cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015cf0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cf2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015cf6:	460d      	mov	r5, r1
 8015cf8:	4616      	mov	r6, r2
 8015cfa:	b323      	cbz	r3, 8015d46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015cfc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cfe:	b314      	cbz	r4, 8015d46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015d00:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015d04:	b1eb      	cbz	r3, 8015d42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015d06:	6828      	ldr	r0, [r5, #0]
 8015d08:	466b      	mov	r3, sp
 8015d0a:	6869      	ldr	r1, [r5, #4]
 8015d0c:	c303      	stmia	r3!, {r0, r1}
 8015d0e:	4668      	mov	r0, sp
 8015d10:	1d21      	adds	r1, r4, #4
 8015d12:	f7ff ff15 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 8015d16:	4668      	mov	r0, sp
 8015d18:	f7ff ff55 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015d1c:	b988      	cbnz	r0, 8015d42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015d1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015d22:	4669      	mov	r1, sp
 8015d24:	88a2      	ldrh	r2, [r4, #4]
 8015d26:	4620      	mov	r0, r4
 8015d28:	1a9b      	subs	r3, r3, r2
 8015d2a:	88e2      	ldrh	r2, [r4, #6]
 8015d2c:	f8ad 3000 	strh.w	r3, [sp]
 8015d30:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015d34:	1a9b      	subs	r3, r3, r2
 8015d36:	4632      	mov	r2, r6
 8015d38:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015d3c:	6823      	ldr	r3, [r4, #0]
 8015d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015d40:	4798      	blx	r3
 8015d42:	69a4      	ldr	r4, [r4, #24]
 8015d44:	e7db      	b.n	8015cfe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015d46:	b002      	add	sp, #8
 8015d48:	bd70      	pop	{r4, r5, r6, pc}

08015d4a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015d4e:	4770      	bx	lr

08015d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015d50:	6803      	ldr	r3, [r0, #0]
 8015d52:	b513      	push	{r0, r1, r4, lr}
 8015d54:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015d58:	2300      	movs	r3, #0
 8015d5a:	e9cd 3300 	strd	r3, r3, [sp]
 8015d5e:	466b      	mov	r3, sp
 8015d60:	47a0      	blx	r4
 8015d62:	b002      	add	sp, #8
 8015d64:	bd10      	pop	{r4, pc}

08015d66 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015d66:	2301      	movs	r3, #1
 8015d68:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d6c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d70:	4770      	bx	lr

08015d72 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015d72:	2301      	movs	r3, #1
 8015d74:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d78:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d7c:	4770      	bx	lr

08015d7e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015d7e:	6843      	ldr	r3, [r0, #4]
 8015d80:	2201      	movs	r2, #1
 8015d82:	725a      	strb	r2, [r3, #9]
 8015d84:	6840      	ldr	r0, [r0, #4]
 8015d86:	6803      	ldr	r3, [r0, #0]
 8015d88:	691b      	ldr	r3, [r3, #16]
 8015d8a:	4718      	bx	r3

08015d8c <_ZN8touchgfx3HAL8flushDMAEv>:
 8015d8c:	6840      	ldr	r0, [r0, #4]
 8015d8e:	6803      	ldr	r3, [r0, #0]
 8015d90:	689b      	ldr	r3, [r3, #8]
 8015d92:	4718      	bx	r3

08015d94 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015d94:	4b04      	ldr	r3, [pc, #16]	; (8015da8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	b123      	cbz	r3, 8015da4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015d9a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015d9e:	f080 0001 	eor.w	r0, r0, #1
 8015da2:	4770      	bx	lr
 8015da4:	2001      	movs	r0, #1
 8015da6:	4770      	bx	lr
 8015da8:	2000b36e 	.word	0x2000b36e

08015dac <_ZN8touchgfx3HAL8endFrameEv>:
 8015dac:	b510      	push	{r4, lr}
 8015dae:	4604      	mov	r4, r0
 8015db0:	6840      	ldr	r0, [r0, #4]
 8015db2:	6803      	ldr	r3, [r0, #0]
 8015db4:	689b      	ldr	r3, [r3, #8]
 8015db6:	4798      	blx	r3
 8015db8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015dbc:	b113      	cbz	r3, 8015dc4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015dc4:	bd10      	pop	{r4, pc}

08015dc6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015dc6:	b508      	push	{r3, lr}
 8015dc8:	6803      	ldr	r3, [r0, #0]
 8015dca:	4604      	mov	r4, r0
 8015dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015dce:	4798      	blx	r3
 8015dd0:	6823      	ldr	r3, [r4, #0]
 8015dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	4798      	blx	r3
 8015dd8:	f7fe fa48 	bl	801426c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015ddc:	6823      	ldr	r3, [r4, #0]
 8015dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015de0:	e7f8      	b.n	8015dd4 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015de4 <_ZN8touchgfx3HAL4tickEv>:
 8015de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015de6:	6803      	ldr	r3, [r0, #0]
 8015de8:	4604      	mov	r4, r0
 8015dea:	4d5c      	ldr	r5, [pc, #368]	; (8015f5c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015df0:	4798      	blx	r3
 8015df2:	2800      	cmp	r0, #0
 8015df4:	f000 8097 	beq.w	8015f26 <_ZN8touchgfx3HAL4tickEv+0x142>
 8015df8:	2001      	movs	r0, #1
 8015dfa:	2600      	movs	r6, #0
 8015dfc:	f7fd ff26 	bl	8013c4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015e00:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015e04:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015e08:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015e0c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015e10:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015e14:	b133      	cbz	r3, 8015e24 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015e1e:	4798      	blx	r3
 8015e20:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015e24:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015e28:	2601      	movs	r6, #1
 8015e2a:	6862      	ldr	r2, [r4, #4]
 8015e2c:	f083 0301 	eor.w	r3, r3, #1
 8015e30:	702e      	strb	r6, [r5, #0]
 8015e32:	7253      	strb	r3, [r2, #9]
 8015e34:	f003 fb72 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8015e38:	6803      	ldr	r3, [r0, #0]
 8015e3a:	4631      	mov	r1, r6
 8015e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e3e:	4798      	blx	r3
 8015e40:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015e44:	b90b      	cbnz	r3, 8015e4a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015e46:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015e4a:	f003 fb67 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8015e4e:	6803      	ldr	r3, [r0, #0]
 8015e50:	695b      	ldr	r3, [r3, #20]
 8015e52:	4798      	blx	r3
 8015e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e56:	6803      	ldr	r3, [r0, #0]
 8015e58:	691b      	ldr	r3, [r3, #16]
 8015e5a:	4798      	blx	r3
 8015e5c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015e60:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015e64:	3b01      	subs	r3, #1
 8015e66:	b2db      	uxtb	r3, r3
 8015e68:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015e6c:	b10a      	cbz	r2, 8015e72 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d1eb      	bne.n	8015e4a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015e72:	4a3b      	ldr	r2, [pc, #236]	; (8015f60 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015e74:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015e78:	7813      	ldrb	r3, [r2, #0]
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	b25b      	sxtb	r3, r3
 8015e7e:	4299      	cmp	r1, r3
 8015e80:	7013      	strb	r3, [r2, #0]
 8015e82:	dc10      	bgt.n	8015ea6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015e84:	2300      	movs	r3, #0
 8015e86:	68e0      	ldr	r0, [r4, #12]
 8015e88:	a902      	add	r1, sp, #8
 8015e8a:	7013      	strb	r3, [r2, #0]
 8015e8c:	aa03      	add	r2, sp, #12
 8015e8e:	6803      	ldr	r3, [r0, #0]
 8015e90:	68db      	ldr	r3, [r3, #12]
 8015e92:	4798      	blx	r3
 8015e94:	6823      	ldr	r3, [r4, #0]
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d051      	beq.n	8015f3e <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015ea4:	4798      	blx	r3
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	6960      	ldr	r0, [r4, #20]
 8015eaa:	f88d 3007 	strb.w	r3, [sp, #7]
 8015eae:	b158      	cbz	r0, 8015ec8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015eb0:	6803      	ldr	r3, [r0, #0]
 8015eb2:	f10d 0107 	add.w	r1, sp, #7
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	4798      	blx	r3
 8015eba:	b128      	cbz	r0, 8015ec8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ebe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015ec2:	6803      	ldr	r3, [r0, #0]
 8015ec4:	68db      	ldr	r3, [r3, #12]
 8015ec6:	4798      	blx	r3
 8015ec8:	f104 001c 	add.w	r0, r4, #28
 8015ecc:	f00d ffd0 	bl	8023e70 <_ZN8touchgfx8Gestures4tickEv>
 8015ed0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015ed4:	b30b      	cbz	r3, 8015f1a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015ed6:	6920      	ldr	r0, [r4, #16]
 8015ed8:	6803      	ldr	r3, [r0, #0]
 8015eda:	691b      	ldr	r3, [r3, #16]
 8015edc:	4798      	blx	r3
 8015ede:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015ee0:	4606      	mov	r6, r0
 8015ee2:	b903      	cbnz	r3, 8015ee6 <_ZN8touchgfx3HAL4tickEv+0x102>
 8015ee4:	6720      	str	r0, [r4, #112]	; 0x70
 8015ee6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015ee8:	4a1e      	ldr	r2, [pc, #120]	; (8015f64 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015eea:	1af3      	subs	r3, r6, r3
 8015eec:	4293      	cmp	r3, r2
 8015eee:	d914      	bls.n	8015f1a <_ZN8touchgfx3HAL4tickEv+0x136>
 8015ef0:	6920      	ldr	r0, [r4, #16]
 8015ef2:	6803      	ldr	r3, [r0, #0]
 8015ef4:	699b      	ldr	r3, [r3, #24]
 8015ef6:	4798      	blx	r3
 8015ef8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015efa:	2264      	movs	r2, #100	; 0x64
 8015efc:	1af3      	subs	r3, r6, r3
 8015efe:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f02:	fbb0 f0f3 	udiv	r0, r0, r3
 8015f06:	2800      	cmp	r0, #0
 8015f08:	dc1e      	bgt.n	8015f48 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015f0a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015f0e:	6920      	ldr	r0, [r4, #16]
 8015f10:	2100      	movs	r1, #0
 8015f12:	6803      	ldr	r3, [r0, #0]
 8015f14:	69db      	ldr	r3, [r3, #28]
 8015f16:	4798      	blx	r3
 8015f18:	6726      	str	r6, [r4, #112]	; 0x70
 8015f1a:	f003 faff 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8015f1e:	6803      	ldr	r3, [r0, #0]
 8015f20:	2100      	movs	r1, #0
 8015f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f24:	4798      	blx	r3
 8015f26:	6823      	ldr	r3, [r4, #0]
 8015f28:	4620      	mov	r0, r4
 8015f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015f2e:	4798      	blx	r3
 8015f30:	2001      	movs	r0, #1
 8015f32:	f7fd fe96 	bl	8013c62 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015f36:	2300      	movs	r3, #0
 8015f38:	702b      	strb	r3, [r5, #0]
 8015f3a:	b004      	add	sp, #16
 8015f3c:	bd70      	pop	{r4, r5, r6, pc}
 8015f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015f42:	4620      	mov	r0, r4
 8015f44:	4798      	blx	r3
 8015f46:	e7ae      	b.n	8015ea6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015f48:	2863      	cmp	r0, #99	; 0x63
 8015f4a:	bfcb      	itete	gt
 8015f4c:	2300      	movgt	r3, #0
 8015f4e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015f52:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015f56:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015f5a:	e7d8      	b.n	8015f0e <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015f5c:	2000b374 	.word	0x2000b374
 8015f60:	2000b375 	.word	0x2000b375
 8015f64:	05f5e100 	.word	0x05f5e100

08015f68 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015f68:	f7fe b950 	b.w	801420c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015f6c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015f6c:	6581      	str	r1, [r0, #88]	; 0x58
 8015f6e:	301c      	adds	r0, #28
 8015f70:	f00d bf7c 	b.w	8023e6c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015f74 <_ZN8touchgfx3HAL5touchEll>:
 8015f74:	b530      	push	{r4, r5, lr}
 8015f76:	b087      	sub	sp, #28
 8015f78:	4604      	mov	r4, r0
 8015f7a:	a804      	add	r0, sp, #16
 8015f7c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015f80:	f003 f886 	bl	8019090 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015f84:	9b04      	ldr	r3, [sp, #16]
 8015f86:	a906      	add	r1, sp, #24
 8015f88:	a803      	add	r0, sp, #12
 8015f8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015f8e:	9b05      	ldr	r3, [sp, #20]
 8015f90:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015f94:	f003 f8ca 	bl	801912c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015f98:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015f9c:	f104 001c 	add.w	r0, r4, #28
 8015fa0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015fa4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015fa8:	b189      	cbz	r1, 8015fce <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015faa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015fb6:	462a      	mov	r2, r5
 8015fb8:	f00d ff68 	bl	8023e8c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015fbc:	b128      	cbz	r0, 8015fca <_ZN8touchgfx3HAL5touchEll+0x56>
 8015fbe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015fc2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015fc4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015fc8:	6623      	str	r3, [r4, #96]	; 0x60
 8015fca:	b007      	add	sp, #28
 8015fcc:	bd30      	pop	{r4, r5, pc}
 8015fce:	f00d ffa1 	bl	8023f14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015fd2:	2301      	movs	r3, #1
 8015fd4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015fd8:	e7f1      	b.n	8015fbe <_ZN8touchgfx3HAL5touchEll+0x4a>

08015fda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015fda:	b570      	push	{r4, r5, r6, lr}
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d050      	beq.n	8016082 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015fe0:	ea81 0002 	eor.w	r0, r1, r2
 8015fe4:	07c6      	lsls	r6, r0, #31
 8015fe6:	d508      	bpl.n	8015ffa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015fe8:	3a01      	subs	r2, #1
 8015fea:	18cc      	adds	r4, r1, r3
 8015fec:	42a1      	cmp	r1, r4
 8015fee:	d048      	beq.n	8016082 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015ff0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015ff4:	f801 0b01 	strb.w	r0, [r1], #1
 8015ff8:	e7f8      	b.n	8015fec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015ffa:	07d5      	lsls	r5, r2, #31
 8015ffc:	bf42      	ittt	mi
 8015ffe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016002:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016006:	f801 0b01 	strbmi.w	r0, [r1], #1
 801600a:	2b01      	cmp	r3, #1
 801600c:	d915      	bls.n	801603a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801600e:	ea82 0001 	eor.w	r0, r2, r1
 8016012:	0784      	lsls	r4, r0, #30
 8016014:	d02d      	beq.n	8016072 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8016016:	1e94      	subs	r4, r2, #2
 8016018:	4608      	mov	r0, r1
 801601a:	18ce      	adds	r6, r1, r3
 801601c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016020:	f820 5b02 	strh.w	r5, [r0], #2
 8016024:	1a35      	subs	r5, r6, r0
 8016026:	2d01      	cmp	r5, #1
 8016028:	d8f8      	bhi.n	801601c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801602a:	1e98      	subs	r0, r3, #2
 801602c:	f003 0301 	and.w	r3, r3, #1
 8016030:	f020 0001 	bic.w	r0, r0, #1
 8016034:	3002      	adds	r0, #2
 8016036:	4401      	add	r1, r0
 8016038:	4402      	add	r2, r0
 801603a:	1f14      	subs	r4, r2, #4
 801603c:	4608      	mov	r0, r1
 801603e:	18ce      	adds	r6, r1, r3
 8016040:	1a35      	subs	r5, r6, r0
 8016042:	2d03      	cmp	r5, #3
 8016044:	d810      	bhi.n	8016068 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8016046:	089c      	lsrs	r4, r3, #2
 8016048:	00a0      	lsls	r0, r4, #2
 801604a:	4401      	add	r1, r0
 801604c:	3801      	subs	r0, #1
 801604e:	4402      	add	r2, r0
 8016050:	f06f 0003 	mvn.w	r0, #3
 8016054:	fb00 3404 	mla	r4, r0, r4, r3
 8016058:	440c      	add	r4, r1
 801605a:	42a1      	cmp	r1, r4
 801605c:	d011      	beq.n	8016082 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801605e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016062:	f801 3b01 	strb.w	r3, [r1], #1
 8016066:	e7f8      	b.n	801605a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016068:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801606c:	f840 5b04 	str.w	r5, [r0], #4
 8016070:	e7e6      	b.n	8016040 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8016072:	0790      	lsls	r0, r2, #30
 8016074:	d0e1      	beq.n	801603a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016076:	f832 0b02 	ldrh.w	r0, [r2], #2
 801607a:	3b02      	subs	r3, #2
 801607c:	f821 0b02 	strh.w	r0, [r1], #2
 8016080:	e7db      	b.n	801603a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016082:	2001      	movs	r0, #1
 8016084:	bd70      	pop	{r4, r5, r6, pc}

08016086 <_ZN8touchgfx3HAL7noTouchEv>:
 8016086:	b510      	push	{r4, lr}
 8016088:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801608c:	4604      	mov	r4, r0
 801608e:	b153      	cbz	r3, 80160a6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016090:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016094:	2101      	movs	r1, #1
 8016096:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801609a:	301c      	adds	r0, #28
 801609c:	f00d ff3a 	bl	8023f14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80160a0:	2300      	movs	r3, #0
 80160a2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80160a6:	bd10      	pop	{r4, pc}

080160a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80160a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160ac:	4605      	mov	r5, r0
 80160ae:	6980      	ldr	r0, [r0, #24]
 80160b0:	b085      	sub	sp, #20
 80160b2:	460f      	mov	r7, r1
 80160b4:	4690      	mov	r8, r2
 80160b6:	4699      	mov	r9, r3
 80160b8:	b930      	cbnz	r0, 80160c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80160ba:	4b1f      	ldr	r3, [pc, #124]	; (8016138 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80160bc:	f44f 7198 	mov.w	r1, #304	; 0x130
 80160c0:	4a1e      	ldr	r2, [pc, #120]	; (801613c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80160c2:	481f      	ldr	r0, [pc, #124]	; (8016140 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80160c4:	f00f fbaa 	bl	802581c <__assert_func>
 80160c8:	ac04      	add	r4, sp, #16
 80160ca:	2600      	movs	r6, #0
 80160cc:	f844 6d04 	str.w	r6, [r4, #-4]!
 80160d0:	6806      	ldr	r6, [r0, #0]
 80160d2:	9401      	str	r4, [sp, #4]
 80160d4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80160d8:	9400      	str	r4, [sp, #0]
 80160da:	6834      	ldr	r4, [r6, #0]
 80160dc:	47a0      	blx	r4
 80160de:	4c19      	ldr	r4, [pc, #100]	; (8016144 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80160e0:	4606      	mov	r6, r0
 80160e2:	f8a4 9000 	strh.w	r9, [r4]
 80160e6:	f7f6 fb3b 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80160ea:	6803      	ldr	r3, [r0, #0]
 80160ec:	6a1b      	ldr	r3, [r3, #32]
 80160ee:	4798      	blx	r3
 80160f0:	280c      	cmp	r0, #12
 80160f2:	d80f      	bhi.n	8016114 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80160f4:	e8df f000 	tbb	[pc, r0]
 80160f8:	1b1b1207 	.word	0x1b1b1207
 80160fc:	1b1b1b1b 	.word	0x1b1b1b1b
 8016100:	1b1b1b1b 	.word	0x1b1b1b1b
 8016104:	1b          	.byte	0x1b
 8016105:	00          	.byte	0x00
 8016106:	8823      	ldrh	r3, [r4, #0]
 8016108:	fb08 7203 	mla	r2, r8, r3, r7
 801610c:	9b03      	ldr	r3, [sp, #12]
 801610e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016112:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016114:	4630      	mov	r0, r6
 8016116:	b005      	add	sp, #20
 8016118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801611c:	8822      	ldrh	r2, [r4, #0]
 801611e:	9b03      	ldr	r3, [sp, #12]
 8016120:	fb08 7202 	mla	r2, r8, r2, r7
 8016124:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016128:	1a9a      	subs	r2, r3, r2
 801612a:	63ea      	str	r2, [r5, #60]	; 0x3c
 801612c:	e7f2      	b.n	8016114 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801612e:	4b06      	ldr	r3, [pc, #24]	; (8016148 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8016130:	f240 114d 	movw	r1, #333	; 0x14d
 8016134:	4a01      	ldr	r2, [pc, #4]	; (801613c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016136:	e7c4      	b.n	80160c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016138:	08029229 	.word	0x08029229
 801613c:	0802953a 	.word	0x0802953a
 8016140:	0802926e 	.word	0x0802926e
 8016144:	2000b36a 	.word	0x2000b36a
 8016148:	08029294 	.word	0x08029294

0801614c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801614c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016150:	4698      	mov	r8, r3
 8016152:	6803      	ldr	r3, [r0, #0]
 8016154:	b087      	sub	sp, #28
 8016156:	460e      	mov	r6, r1
 8016158:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801615a:	4617      	mov	r7, r2
 801615c:	4b0d      	ldr	r3, [pc, #52]	; (8016194 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801615e:	4604      	mov	r4, r0
 8016160:	f8b3 9000 	ldrh.w	r9, [r3]
 8016164:	f7f6 fafc 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8016168:	6803      	ldr	r3, [r0, #0]
 801616a:	6a1b      	ldr	r3, [r3, #32]
 801616c:	4798      	blx	r3
 801616e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016172:	463a      	mov	r2, r7
 8016174:	4631      	mov	r1, r6
 8016176:	9302      	str	r3, [sp, #8]
 8016178:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801617c:	9301      	str	r3, [sp, #4]
 801617e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016182:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016186:	9300      	str	r3, [sp, #0]
 8016188:	4620      	mov	r0, r4
 801618a:	4643      	mov	r3, r8
 801618c:	47a8      	blx	r5
 801618e:	b007      	add	sp, #28
 8016190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016194:	2000b36a 	.word	0x2000b36a

08016198 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801619c:	4606      	mov	r6, r0
 801619e:	b089      	sub	sp, #36	; 0x24
 80161a0:	4610      	mov	r0, r2
 80161a2:	460c      	mov	r4, r1
 80161a4:	4691      	mov	r9, r2
 80161a6:	4698      	mov	r8, r3
 80161a8:	f005 fc26 	bl	801b9f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	f000 8093 	beq.w	80162d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 80161b2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80162f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80161b6:	ad08      	add	r5, sp, #32
 80161b8:	f8df b138 	ldr.w	fp, [pc, #312]	; 80162f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80161bc:	f8da 0000 	ldr.w	r0, [sl]
 80161c0:	4f4a      	ldr	r7, [pc, #296]	; (80162ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80161c2:	6802      	ldr	r2, [r0, #0]
 80161c4:	6a12      	ldr	r2, [r2, #32]
 80161c6:	4790      	blx	r2
 80161c8:	f8da 0000 	ldr.w	r0, [sl]
 80161cc:	6802      	ldr	r2, [r0, #0]
 80161ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80161d0:	4790      	blx	r2
 80161d2:	f8bb 3000 	ldrh.w	r3, [fp]
 80161d6:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80161da:	4628      	mov	r0, r5
 80161dc:	9300      	str	r3, [sp, #0]
 80161de:	883b      	ldrh	r3, [r7, #0]
 80161e0:	9301      	str	r3, [sp, #4]
 80161e2:	f005 fccd 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80161e6:	f8ab 0000 	strh.w	r0, [fp]
 80161ea:	4628      	mov	r0, r5
 80161ec:	f005 fd02 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80161f0:	f8da b000 	ldr.w	fp, [sl]
 80161f4:	8038      	strh	r0, [r7, #0]
 80161f6:	4648      	mov	r0, r9
 80161f8:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80161fc:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8016200:	9302      	str	r3, [sp, #8]
 8016202:	f005 fbf9 	bl	801b9f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016206:	f8da 2000 	ldr.w	r2, [sl]
 801620a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801620e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8016210:	4620      	mov	r0, r4
 8016212:	6822      	ldr	r2, [r4, #0]
 8016214:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8016218:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801621a:	2200      	movs	r2, #0
 801621c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8016220:	4611      	mov	r1, r2
 8016222:	4798      	blx	r3
 8016224:	2201      	movs	r2, #1
 8016226:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801622a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801622e:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016232:	2a00      	cmp	r2, #0
 8016234:	f104 0204 	add.w	r2, r4, #4
 8016238:	dd51      	ble.n	80162de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801623a:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801623e:	2900      	cmp	r1, #0
 8016240:	dd4d      	ble.n	80162de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8016242:	6810      	ldr	r0, [r2, #0]
 8016244:	f10d 0c18 	add.w	ip, sp, #24
 8016248:	6851      	ldr	r1, [r2, #4]
 801624a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801624e:	4641      	mov	r1, r8
 8016250:	a806      	add	r0, sp, #24
 8016252:	f7ff fc75 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 8016256:	4628      	mov	r0, r5
 8016258:	f005 fde4 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801625c:	4680      	mov	r8, r0
 801625e:	f7f6 fa7f 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8016262:	6802      	ldr	r2, [r0, #0]
 8016264:	6a12      	ldr	r2, [r2, #32]
 8016266:	4790      	blx	r2
 8016268:	4580      	cmp	r8, r0
 801626a:	d03d      	beq.n	80162e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 801626c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801626e:	b150      	cbz	r0, 8016286 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8016270:	4628      	mov	r0, r5
 8016272:	f005 fdd7 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016276:	4605      	mov	r5, r0
 8016278:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801627a:	6803      	ldr	r3, [r0, #0]
 801627c:	6a1b      	ldr	r3, [r3, #32]
 801627e:	4798      	blx	r3
 8016280:	1a2b      	subs	r3, r5, r0
 8016282:	4258      	negs	r0, r3
 8016284:	4158      	adcs	r0, r3
 8016286:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801628a:	2500      	movs	r5, #0
 801628c:	6963      	ldr	r3, [r4, #20]
 801628e:	4620      	mov	r0, r4
 8016290:	6822      	ldr	r2, [r4, #0]
 8016292:	a906      	add	r1, sp, #24
 8016294:	6165      	str	r5, [r4, #20]
 8016296:	9303      	str	r3, [sp, #12]
 8016298:	6892      	ldr	r2, [r2, #8]
 801629a:	4790      	blx	r2
 801629c:	9b03      	ldr	r3, [sp, #12]
 801629e:	4620      	mov	r0, r4
 80162a0:	4652      	mov	r2, sl
 80162a2:	6163      	str	r3, [r4, #20]
 80162a4:	4649      	mov	r1, r9
 80162a6:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80162b0:	4c0f      	ldr	r4, [pc, #60]	; (80162f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80162b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162b4:	4798      	blx	r3
 80162b6:	6820      	ldr	r0, [r4, #0]
 80162b8:	9b02      	ldr	r3, [sp, #8]
 80162ba:	9a00      	ldr	r2, [sp, #0]
 80162bc:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80162c0:	4b0c      	ldr	r3, [pc, #48]	; (80162f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80162c2:	801a      	strh	r2, [r3, #0]
 80162c4:	4b09      	ldr	r3, [pc, #36]	; (80162ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80162c6:	9a01      	ldr	r2, [sp, #4]
 80162c8:	801a      	strh	r2, [r3, #0]
 80162ca:	6803      	ldr	r3, [r0, #0]
 80162cc:	6a1b      	ldr	r3, [r3, #32]
 80162ce:	4798      	blx	r3
 80162d0:	6820      	ldr	r0, [r4, #0]
 80162d2:	6803      	ldr	r3, [r0, #0]
 80162d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d6:	4798      	blx	r3
 80162d8:	b009      	add	sp, #36	; 0x24
 80162da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162de:	ab06      	add	r3, sp, #24
 80162e0:	6810      	ldr	r0, [r2, #0]
 80162e2:	6851      	ldr	r1, [r2, #4]
 80162e4:	c303      	stmia	r3!, {r0, r1}
 80162e6:	e7b6      	b.n	8016256 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 80162e8:	2000      	movs	r0, #0
 80162ea:	e7cc      	b.n	8016286 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80162ec:	2000b36c 	.word	0x2000b36c
 80162f0:	2000b370 	.word	0x2000b370
 80162f4:	2000b36a 	.word	0x2000b36a

080162f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80162f8:	4b07      	ldr	r3, [pc, #28]	; (8016318 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80162fa:	b510      	push	{r4, lr}
 80162fc:	781b      	ldrb	r3, [r3, #0]
 80162fe:	4604      	mov	r4, r0
 8016300:	b13b      	cbz	r3, 8016312 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016302:	6803      	ldr	r3, [r0, #0]
 8016304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016306:	4798      	blx	r3
 8016308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801630a:	4283      	cmp	r3, r0
 801630c:	d101      	bne.n	8016312 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801630e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016310:	bd10      	pop	{r4, pc}
 8016312:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016314:	e7fc      	b.n	8016310 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016316:	bf00      	nop
 8016318:	2000b36e 	.word	0x2000b36e

0801631c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801631c:	4b0b      	ldr	r3, [pc, #44]	; (801634c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801631e:	b510      	push	{r4, lr}
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	4604      	mov	r4, r0
 8016324:	b95b      	cbnz	r3, 801633e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016326:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801632a:	2b02      	cmp	r3, #2
 801632c:	d007      	beq.n	801633e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801632e:	6840      	ldr	r0, [r0, #4]
 8016330:	f000 fbc8 	bl	8016ac4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016334:	b118      	cbz	r0, 801633e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016336:	6862      	ldr	r2, [r4, #4]
 8016338:	7a53      	ldrb	r3, [r2, #9]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d0fc      	beq.n	8016338 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801633e:	f7fd ff57 	bl	80141f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016342:	4620      	mov	r0, r4
 8016344:	f7ff ffd8 	bl	80162f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016348:	bd10      	pop	{r4, pc}
 801634a:	bf00      	nop
 801634c:	2000b36e 	.word	0x2000b36e

08016350 <_ZN8touchgfx3HAL10initializeEv>:
 8016350:	b510      	push	{r4, lr}
 8016352:	4604      	mov	r4, r0
 8016354:	f7fd ff16 	bl	8014184 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016358:	6860      	ldr	r0, [r4, #4]
 801635a:	6803      	ldr	r3, [r0, #0]
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	4798      	blx	r3
 8016360:	68e0      	ldr	r0, [r4, #12]
 8016362:	6803      	ldr	r3, [r0, #0]
 8016364:	689b      	ldr	r3, [r3, #8]
 8016366:	4798      	blx	r3
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	4620      	mov	r0, r4
 801636c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801636e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016372:	4718      	bx	r3

08016374 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016374:	b508      	push	{r3, lr}
 8016376:	290c      	cmp	r1, #12
 8016378:	d817      	bhi.n	80163aa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801637a:	e8df f001 	tbb	[pc, r1]
 801637e:	090b      	.short	0x090b
 8016380:	0d0d0d07 	.word	0x0d0d0d07
 8016384:	1414140d 	.word	0x1414140d
 8016388:	1414      	.short	0x1414
 801638a:	0d          	.byte	0x0d
 801638b:	00          	.byte	0x00
 801638c:	2020      	movs	r0, #32
 801638e:	bd08      	pop	{r3, pc}
 8016390:	2018      	movs	r0, #24
 8016392:	e7fc      	b.n	801638e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016394:	2010      	movs	r0, #16
 8016396:	e7fa      	b.n	801638e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016398:	4b05      	ldr	r3, [pc, #20]	; (80163b0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801639a:	f44f 710c 	mov.w	r1, #560	; 0x230
 801639e:	4a05      	ldr	r2, [pc, #20]	; (80163b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80163a0:	4805      	ldr	r0, [pc, #20]	; (80163b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80163a2:	f00f fa3b 	bl	802581c <__assert_func>
 80163a6:	2008      	movs	r0, #8
 80163a8:	e7f1      	b.n	801638e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80163aa:	2000      	movs	r0, #0
 80163ac:	e7ef      	b.n	801638e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80163ae:	bf00      	nop
 80163b0:	08029367 	.word	0x08029367
 80163b4:	080296fc 	.word	0x080296fc
 80163b8:	0802926e 	.word	0x0802926e

080163bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80163bc:	b570      	push	{r4, r5, r6, lr}
 80163be:	460d      	mov	r5, r1
 80163c0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80163c4:	4616      	mov	r6, r2
 80163c6:	461c      	mov	r4, r3
 80163c8:	f7ff ffd4 	bl	8016374 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80163cc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80163d0:	10c0      	asrs	r0, r0, #3
 80163d2:	fb06 5101 	mla	r1, r6, r1, r5
 80163d6:	fb00 4001 	mla	r0, r0, r1, r4
 80163da:	bd70      	pop	{r4, r5, r6, pc}

080163dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80163dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163e0:	b08a      	sub	sp, #40	; 0x28
 80163e2:	f04f 0c00 	mov.w	ip, #0
 80163e6:	4604      	mov	r4, r0
 80163e8:	469a      	mov	sl, r3
 80163ea:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80163ee:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80163f2:	f1b8 0f02 	cmp.w	r8, #2
 80163f6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80163fa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80163fe:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016402:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016406:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801640a:	f8cd c020 	str.w	ip, [sp, #32]
 801640e:	d030      	beq.n	8016472 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8016410:	2bff      	cmp	r3, #255	; 0xff
 8016412:	d12c      	bne.n	801646e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8016414:	4560      	cmp	r0, ip
 8016416:	bf14      	ite	ne
 8016418:	2004      	movne	r0, #4
 801641a:	2001      	moveq	r0, #1
 801641c:	9204      	str	r2, [sp, #16]
 801641e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016422:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016426:	f8ad 201c 	strh.w	r2, [sp, #28]
 801642a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801642e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016436:	4620      	mov	r0, r4
 8016438:	f7ff ff5e 	bl	80162f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801643c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016440:	4603      	mov	r3, r0
 8016442:	4651      	mov	r1, sl
 8016444:	4620      	mov	r0, r4
 8016446:	e9cd 9700 	strd	r9, r7, [sp]
 801644a:	f7ff ffb7 	bl	80163bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801644e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016452:	9005      	str	r0, [sp, #20]
 8016454:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016458:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801645c:	b106      	cbz	r6, 8016460 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801645e:	b98d      	cbnz	r5, 8016484 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016460:	4b12      	ldr	r3, [pc, #72]	; (80164ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8016462:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016466:	4a12      	ldr	r2, [pc, #72]	; (80164b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016468:	4812      	ldr	r0, [pc, #72]	; (80164b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801646a:	f00f f9d7 	bl	802581c <__assert_func>
 801646e:	2004      	movs	r0, #4
 8016470:	e7d4      	b.n	801641c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016472:	2bff      	cmp	r3, #255	; 0xff
 8016474:	d104      	bne.n	8016480 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8016476:	2800      	cmp	r0, #0
 8016478:	bf14      	ite	ne
 801647a:	2040      	movne	r0, #64	; 0x40
 801647c:	2020      	moveq	r0, #32
 801647e:	e7cd      	b.n	801641c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016480:	2040      	movs	r0, #64	; 0x40
 8016482:	e7cb      	b.n	801641c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016484:	6823      	ldr	r3, [r4, #0]
 8016486:	4620      	mov	r0, r4
 8016488:	9d02      	ldr	r5, [sp, #8]
 801648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801648c:	4798      	blx	r3
 801648e:	4228      	tst	r0, r5
 8016490:	d104      	bne.n	801649c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016492:	4b09      	ldr	r3, [pc, #36]	; (80164b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016494:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016498:	4a05      	ldr	r2, [pc, #20]	; (80164b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801649a:	e7e5      	b.n	8016468 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801649c:	6860      	ldr	r0, [r4, #4]
 801649e:	a902      	add	r1, sp, #8
 80164a0:	6803      	ldr	r3, [r0, #0]
 80164a2:	685b      	ldr	r3, [r3, #4]
 80164a4:	4798      	blx	r3
 80164a6:	b00a      	add	sp, #40	; 0x28
 80164a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ac:	080292ea 	.word	0x080292ea
 80164b0:	0802959e 	.word	0x0802959e
 80164b4:	0802926e 	.word	0x0802926e
 80164b8:	08029322 	.word	0x08029322

080164bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80164bc:	b510      	push	{r4, lr}
 80164be:	b08a      	sub	sp, #40	; 0x28
 80164c0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80164c4:	9408      	str	r4, [sp, #32]
 80164c6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80164ca:	9407      	str	r4, [sp, #28]
 80164cc:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80164d0:	9406      	str	r4, [sp, #24]
 80164d2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80164d6:	9405      	str	r4, [sp, #20]
 80164d8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80164dc:	9404      	str	r4, [sp, #16]
 80164de:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80164e2:	9403      	str	r4, [sp, #12]
 80164e4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80164e8:	9402      	str	r4, [sp, #8]
 80164ea:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80164ee:	e9cd 3400 	strd	r3, r4, [sp]
 80164f2:	4613      	mov	r3, r2
 80164f4:	2200      	movs	r2, #0
 80164f6:	f7ff ff71 	bl	80163dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80164fa:	b00a      	add	sp, #40	; 0x28
 80164fc:	bd10      	pop	{r4, pc}
	...

08016500 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016502:	b08b      	sub	sp, #44	; 0x2c
 8016504:	4616      	mov	r6, r2
 8016506:	460d      	mov	r5, r1
 8016508:	461f      	mov	r7, r3
 801650a:	4604      	mov	r4, r0
 801650c:	f7f6 f928 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8016510:	6803      	ldr	r3, [r0, #0]
 8016512:	6a1b      	ldr	r3, [r3, #32]
 8016514:	4798      	blx	r3
 8016516:	4b0e      	ldr	r3, [pc, #56]	; (8016550 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016518:	2200      	movs	r2, #0
 801651a:	4629      	mov	r1, r5
 801651c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016520:	881b      	ldrh	r3, [r3, #0]
 8016522:	4620      	mov	r0, r4
 8016524:	9306      	str	r3, [sp, #24]
 8016526:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801652a:	9305      	str	r3, [sp, #20]
 801652c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016530:	9304      	str	r3, [sp, #16]
 8016532:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016536:	9303      	str	r3, [sp, #12]
 8016538:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801653c:	9302      	str	r3, [sp, #8]
 801653e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016542:	e9cd 7300 	strd	r7, r3, [sp]
 8016546:	4633      	mov	r3, r6
 8016548:	f7ff ff48 	bl	80163dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801654c:	b00b      	add	sp, #44	; 0x2c
 801654e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016550:	2000b36a 	.word	0x2000b36a

08016554 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016558:	461f      	mov	r7, r3
 801655a:	4b14      	ldr	r3, [pc, #80]	; (80165ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801655c:	b08a      	sub	sp, #40	; 0x28
 801655e:	4616      	mov	r6, r2
 8016560:	f8b3 8000 	ldrh.w	r8, [r3]
 8016564:	460d      	mov	r5, r1
 8016566:	4604      	mov	r4, r0
 8016568:	f7f6 f8fa 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 801656c:	6803      	ldr	r3, [r0, #0]
 801656e:	6a1b      	ldr	r3, [r3, #32]
 8016570:	4798      	blx	r3
 8016572:	2302      	movs	r3, #2
 8016574:	9008      	str	r0, [sp, #32]
 8016576:	2200      	movs	r2, #0
 8016578:	4629      	mov	r1, r5
 801657a:	4620      	mov	r0, r4
 801657c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016580:	2301      	movs	r3, #1
 8016582:	9305      	str	r3, [sp, #20]
 8016584:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016588:	9304      	str	r3, [sp, #16]
 801658a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801658e:	9303      	str	r3, [sp, #12]
 8016590:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016594:	9302      	str	r3, [sp, #8]
 8016596:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801659a:	e9cd 7300 	strd	r7, r3, [sp]
 801659e:	4633      	mov	r3, r6
 80165a0:	f7ff ff1c 	bl	80163dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80165a4:	b00a      	add	sp, #40	; 0x28
 80165a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165aa:	bf00      	nop
 80165ac:	2000b36a 	.word	0x2000b36a

080165b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80165b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b4:	b08b      	sub	sp, #44	; 0x2c
 80165b6:	469b      	mov	fp, r3
 80165b8:	4604      	mov	r4, r0
 80165ba:	4692      	mov	sl, r2
 80165bc:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80165c0:	2600      	movs	r6, #0
 80165c2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80165c6:	4689      	mov	r9, r1
 80165c8:	2fff      	cmp	r7, #255	; 0xff
 80165ca:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80165ce:	9608      	str	r6, [sp, #32]
 80165d0:	bf14      	ite	ne
 80165d2:	2308      	movne	r3, #8
 80165d4:	2302      	moveq	r3, #2
 80165d6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80165da:	f7ff fe8d 	bl	80162f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80165de:	465a      	mov	r2, fp
 80165e0:	4603      	mov	r3, r0
 80165e2:	4651      	mov	r1, sl
 80165e4:	4620      	mov	r0, r4
 80165e6:	e9cd 8500 	strd	r8, r5, [sp]
 80165ea:	f7ff fee7 	bl	80163bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80165ee:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80165f2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80165f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80165fa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80165fe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016602:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016606:	6823      	ldr	r3, [r4, #0]
 8016608:	9d02      	ldr	r5, [sp, #8]
 801660a:	9005      	str	r0, [sp, #20]
 801660c:	4620      	mov	r0, r4
 801660e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8016612:	f8ad 801e 	strh.w	r8, [sp, #30]
 8016616:	f8cd 9020 	str.w	r9, [sp, #32]
 801661a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016620:	4798      	blx	r3
 8016622:	4228      	tst	r0, r5
 8016624:	d106      	bne.n	8016634 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8016626:	4b07      	ldr	r3, [pc, #28]	; (8016644 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016628:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801662c:	4a06      	ldr	r2, [pc, #24]	; (8016648 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801662e:	4807      	ldr	r0, [pc, #28]	; (801664c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016630:	f00f f8f4 	bl	802581c <__assert_func>
 8016634:	6860      	ldr	r0, [r4, #4]
 8016636:	a902      	add	r1, sp, #8
 8016638:	6803      	ldr	r3, [r0, #0]
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	4798      	blx	r3
 801663e:	b00b      	add	sp, #44	; 0x2c
 8016640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016644:	08029322 	.word	0x08029322
 8016648:	08029667 	.word	0x08029667
 801664c:	0802926e 	.word	0x0802926e

08016650 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016650:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016654:	461f      	mov	r7, r3
 8016656:	4b0b      	ldr	r3, [pc, #44]	; (8016684 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016658:	460d      	mov	r5, r1
 801665a:	4616      	mov	r6, r2
 801665c:	f8b3 8000 	ldrh.w	r8, [r3]
 8016660:	4604      	mov	r4, r0
 8016662:	f7f6 f87d 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8016666:	6803      	ldr	r3, [r0, #0]
 8016668:	6a1b      	ldr	r3, [r3, #32]
 801666a:	4798      	blx	r3
 801666c:	463b      	mov	r3, r7
 801666e:	4632      	mov	r2, r6
 8016670:	4629      	mov	r1, r5
 8016672:	e9cd 8000 	strd	r8, r0, [sp]
 8016676:	4620      	mov	r0, r4
 8016678:	f7ff fea0 	bl	80163bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801667c:	b002      	add	sp, #8
 801667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016682:	bf00      	nop
 8016684:	2000b36a 	.word	0x2000b36a

08016688 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801668c:	4698      	mov	r8, r3
 801668e:	b088      	sub	sp, #32
 8016690:	2300      	movs	r3, #0
 8016692:	4617      	mov	r7, r2
 8016694:	4604      	mov	r4, r0
 8016696:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801669a:	9306      	str	r3, [sp, #24]
 801669c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80166a0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80166a4:	f8ad 6010 	strh.w	r6, [sp, #16]
 80166a8:	f8ad 5012 	strh.w	r5, [sp, #18]
 80166ac:	e9cd 3100 	strd	r3, r1, [sp]
 80166b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80166b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166b8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80166bc:	f88d 301c 	strb.w	r3, [sp, #28]
 80166c0:	f7ff fe1a 	bl	80162f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80166c4:	4642      	mov	r2, r8
 80166c6:	4603      	mov	r3, r0
 80166c8:	4639      	mov	r1, r7
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7ff ffc0 	bl	8016650 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80166d0:	4b16      	ldr	r3, [pc, #88]	; (801672c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80166d2:	9003      	str	r0, [sp, #12]
 80166d4:	881b      	ldrh	r3, [r3, #0]
 80166d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166da:	f7f6 f841 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80166de:	6803      	ldr	r3, [r0, #0]
 80166e0:	6a1b      	ldr	r3, [r3, #32]
 80166e2:	4798      	blx	r3
 80166e4:	f88d 001e 	strb.w	r0, [sp, #30]
 80166e8:	f88d 001d 	strb.w	r0, [sp, #29]
 80166ec:	b106      	cbz	r6, 80166f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80166ee:	b935      	cbnz	r5, 80166fe <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80166f0:	4b0f      	ldr	r3, [pc, #60]	; (8016730 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80166f2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80166f6:	4a0f      	ldr	r2, [pc, #60]	; (8016734 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80166f8:	480f      	ldr	r0, [pc, #60]	; (8016738 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80166fa:	f00f f88f 	bl	802581c <__assert_func>
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	4620      	mov	r0, r4
 8016702:	9d00      	ldr	r5, [sp, #0]
 8016704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016706:	4798      	blx	r3
 8016708:	4228      	tst	r0, r5
 801670a:	d104      	bne.n	8016716 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801670c:	4b0b      	ldr	r3, [pc, #44]	; (801673c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801670e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8016712:	4a08      	ldr	r2, [pc, #32]	; (8016734 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016714:	e7f0      	b.n	80166f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016718:	4669      	mov	r1, sp
 801671a:	6860      	ldr	r0, [r4, #4]
 801671c:	9306      	str	r3, [sp, #24]
 801671e:	6803      	ldr	r3, [r0, #0]
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	4798      	blx	r3
 8016724:	b008      	add	sp, #32
 8016726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801672a:	bf00      	nop
 801672c:	2000b36a 	.word	0x2000b36a
 8016730:	080292ea 	.word	0x080292ea
 8016734:	08029450 	.word	0x08029450
 8016738:	0802926e 	.word	0x0802926e
 801673c:	08029322 	.word	0x08029322

08016740 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016740:	b570      	push	{r4, r5, r6, lr}
 8016742:	b08a      	sub	sp, #40	; 0x28
 8016744:	4604      	mov	r4, r0
 8016746:	466b      	mov	r3, sp
 8016748:	e883 0006 	stmia.w	r3, {r1, r2}
 801674c:	4b1f      	ldr	r3, [pc, #124]	; (80167cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	b933      	cbnz	r3, 8016760 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016752:	4b1f      	ldr	r3, [pc, #124]	; (80167d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016754:	f240 11f9 	movw	r1, #505	; 0x1f9
 8016758:	4a1e      	ldr	r2, [pc, #120]	; (80167d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801675a:	481f      	ldr	r0, [pc, #124]	; (80167d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801675c:	f00f f85e 	bl	802581c <__assert_func>
 8016760:	2300      	movs	r3, #0
 8016762:	f8bd 5000 	ldrh.w	r5, [sp]
 8016766:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801676a:	9308      	str	r3, [sp, #32]
 801676c:	2301      	movs	r3, #1
 801676e:	9302      	str	r3, [sp, #8]
 8016770:	6803      	ldr	r3, [r0, #0]
 8016772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016774:	4798      	blx	r3
 8016776:	4632      	mov	r2, r6
 8016778:	4629      	mov	r1, r5
 801677a:	4603      	mov	r3, r0
 801677c:	4620      	mov	r0, r4
 801677e:	f7ff ff67 	bl	8016650 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016782:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016784:	9003      	str	r0, [sp, #12]
 8016786:	9305      	str	r3, [sp, #20]
 8016788:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801678c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016790:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016794:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016798:	4b10      	ldr	r3, [pc, #64]	; (80167dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801679a:	881b      	ldrh	r3, [r3, #0]
 801679c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80167a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80167a4:	f7f5 ffdc 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80167a8:	6803      	ldr	r3, [r0, #0]
 80167aa:	6a1b      	ldr	r3, [r3, #32]
 80167ac:	4798      	blx	r3
 80167ae:	23ff      	movs	r3, #255	; 0xff
 80167b0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80167b4:	a902      	add	r1, sp, #8
 80167b6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80167ba:	6860      	ldr	r0, [r4, #4]
 80167bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80167c0:	6803      	ldr	r3, [r0, #0]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	4798      	blx	r3
 80167c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80167c8:	b00a      	add	sp, #40	; 0x28
 80167ca:	bd70      	pop	{r4, r5, r6, pc}
 80167cc:	2000b36f 	.word	0x2000b36f
 80167d0:	080291bb 	.word	0x080291bb
 80167d4:	080294f4 	.word	0x080294f4
 80167d8:	0802926e 	.word	0x0802926e
 80167dc:	2000b36a 	.word	0x2000b36a

080167e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80167e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167e2:	b08b      	sub	sp, #44	; 0x2c
 80167e4:	4604      	mov	r4, r0
 80167e6:	466d      	mov	r5, sp
 80167e8:	e885 0006 	stmia.w	r5, {r1, r2}
 80167ec:	461d      	mov	r5, r3
 80167ee:	2300      	movs	r3, #0
 80167f0:	f8bd 6000 	ldrh.w	r6, [sp]
 80167f4:	9308      	str	r3, [sp, #32]
 80167f6:	2301      	movs	r3, #1
 80167f8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80167fc:	9302      	str	r3, [sp, #8]
 80167fe:	6803      	ldr	r3, [r0, #0]
 8016800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016802:	4798      	blx	r3
 8016804:	463a      	mov	r2, r7
 8016806:	4631      	mov	r1, r6
 8016808:	4603      	mov	r3, r0
 801680a:	4620      	mov	r0, r4
 801680c:	f7ff ff20 	bl	8016650 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016810:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016814:	9003      	str	r0, [sp, #12]
 8016816:	f8ad 3018 	strh.w	r3, [sp, #24]
 801681a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801681e:	9505      	str	r5, [sp, #20]
 8016820:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016824:	4b0d      	ldr	r3, [pc, #52]	; (801685c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016826:	881b      	ldrh	r3, [r3, #0]
 8016828:	f8ad 301c 	strh.w	r3, [sp, #28]
 801682c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801682e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016832:	f7f5 ff95 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8016836:	6803      	ldr	r3, [r0, #0]
 8016838:	6a1b      	ldr	r3, [r3, #32]
 801683a:	4798      	blx	r3
 801683c:	23ff      	movs	r3, #255	; 0xff
 801683e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016842:	a902      	add	r1, sp, #8
 8016844:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016848:	6860      	ldr	r0, [r4, #4]
 801684a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801684e:	6803      	ldr	r3, [r0, #0]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	4798      	blx	r3
 8016854:	4628      	mov	r0, r5
 8016856:	b00b      	add	sp, #44	; 0x2c
 8016858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801685a:	bf00      	nop
 801685c:	2000b36a 	.word	0x2000b36a

08016860 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016860:	b570      	push	{r4, r5, r6, lr}
 8016862:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016866:	4604      	mov	r4, r0
 8016868:	b19b      	cbz	r3, 8016892 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801686a:	2002      	movs	r0, #2
 801686c:	f7fd fa04 	bl	8013c78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016870:	2300      	movs	r3, #0
 8016872:	4620      	mov	r0, r4
 8016874:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016878:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801687c:	6823      	ldr	r3, [r4, #0]
 801687e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016882:	f7ff fd39 	bl	80162f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016886:	4601      	mov	r1, r0
 8016888:	4620      	mov	r0, r4
 801688a:	462b      	mov	r3, r5
 801688c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016890:	4718      	bx	r3
 8016892:	bd70      	pop	{r4, r5, r6, pc}

08016894 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016894:	4770      	bx	lr

08016896 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016896:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801689a:	1a13      	subs	r3, r2, r0
 801689c:	4258      	negs	r0, r3
 801689e:	4158      	adcs	r0, r3
 80168a0:	4770      	bx	lr

080168a2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80168a2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80168a6:	1a9b      	subs	r3, r3, r2
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	bfdc      	itt	le
 80168ac:	6882      	ldrle	r2, [r0, #8]
 80168ae:	189b      	addle	r3, r3, r2
 80168b0:	2b01      	cmp	r3, #1
 80168b2:	bfcc      	ite	gt
 80168b4:	2000      	movgt	r0, #0
 80168b6:	2001      	movle	r0, #1
 80168b8:	4770      	bx	lr

080168ba <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80168ba:	6902      	ldr	r2, [r0, #16]
 80168bc:	6840      	ldr	r0, [r0, #4]
 80168be:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80168c2:	4770      	bx	lr

080168c4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80168c4:	6803      	ldr	r3, [r0, #0]
 80168c6:	691b      	ldr	r3, [r3, #16]
 80168c8:	4718      	bx	r3

080168ca <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80168ca:	4770      	bx	lr

080168cc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80168cc:	4770      	bx	lr
	...

080168d0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80168d0:	2301      	movs	r3, #1
 80168d2:	b570      	push	{r4, r5, r6, lr}
 80168d4:	7203      	strb	r3, [r0, #8]
 80168d6:	4604      	mov	r4, r0
 80168d8:	6840      	ldr	r0, [r0, #4]
 80168da:	6803      	ldr	r3, [r0, #0]
 80168dc:	699b      	ldr	r3, [r3, #24]
 80168de:	4798      	blx	r3
 80168e0:	6803      	ldr	r3, [r0, #0]
 80168e2:	4605      	mov	r5, r0
 80168e4:	2b08      	cmp	r3, #8
 80168e6:	d01e      	beq.n	8016926 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80168e8:	d80b      	bhi.n	8016902 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80168ea:	2b02      	cmp	r3, #2
 80168ec:	d027      	beq.n	801693e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80168ee:	2b04      	cmp	r3, #4
 80168f0:	d011      	beq.n	8016916 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80168f2:	2b01      	cmp	r3, #1
 80168f4:	d028      	beq.n	8016948 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80168f6:	4b17      	ldr	r3, [pc, #92]	; (8016954 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80168f8:	218b      	movs	r1, #139	; 0x8b
 80168fa:	4a17      	ldr	r2, [pc, #92]	; (8016958 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80168fc:	4817      	ldr	r0, [pc, #92]	; (801695c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80168fe:	f00e ff8d 	bl	802581c <__assert_func>
 8016902:	2b40      	cmp	r3, #64	; 0x40
 8016904:	d020      	beq.n	8016948 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016906:	d801      	bhi.n	801690c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016908:	2b20      	cmp	r3, #32
 801690a:	e7f3      	b.n	80168f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801690c:	2b80      	cmp	r3, #128	; 0x80
 801690e:	d01b      	beq.n	8016948 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016914:	e7ee      	b.n	80168f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016916:	6823      	ldr	r3, [r4, #0]
 8016918:	7f01      	ldrb	r1, [r0, #28]
 801691a:	4620      	mov	r0, r4
 801691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801691e:	4798      	blx	r3
 8016920:	6823      	ldr	r3, [r4, #0]
 8016922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016924:	e006      	b.n	8016934 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016926:	6823      	ldr	r3, [r4, #0]
 8016928:	7f01      	ldrb	r1, [r0, #28]
 801692a:	4620      	mov	r0, r4
 801692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801692e:	4798      	blx	r3
 8016930:	6823      	ldr	r3, [r4, #0]
 8016932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016934:	4629      	mov	r1, r5
 8016936:	4620      	mov	r0, r4
 8016938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801693c:	4718      	bx	r3
 801693e:	6823      	ldr	r3, [r4, #0]
 8016940:	4620      	mov	r0, r4
 8016942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016944:	4798      	blx	r3
 8016946:	e7f3      	b.n	8016930 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016948:	6823      	ldr	r3, [r4, #0]
 801694a:	4620      	mov	r0, r4
 801694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801694e:	4798      	blx	r3
 8016950:	e7e6      	b.n	8016920 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016952:	bf00      	nop
 8016954:	08029745 	.word	0x08029745
 8016958:	08029854 	.word	0x08029854
 801695c:	0802976a 	.word	0x0802976a

08016960 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016960:	b570      	push	{r4, r5, r6, lr}
 8016962:	4604      	mov	r4, r0
 8016964:	460e      	mov	r6, r1
 8016966:	6860      	ldr	r0, [r4, #4]
 8016968:	6803      	ldr	r3, [r0, #0]
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	4798      	blx	r3
 801696e:	2800      	cmp	r0, #0
 8016970:	d1f9      	bne.n	8016966 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016972:	4d0b      	ldr	r5, [pc, #44]	; (80169a0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016974:	6828      	ldr	r0, [r5, #0]
 8016976:	6803      	ldr	r3, [r0, #0]
 8016978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801697a:	4798      	blx	r3
 801697c:	f7fd fc52 	bl	8014224 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016980:	6860      	ldr	r0, [r4, #4]
 8016982:	4631      	mov	r1, r6
 8016984:	6803      	ldr	r3, [r0, #0]
 8016986:	689b      	ldr	r3, [r3, #8]
 8016988:	4798      	blx	r3
 801698a:	6823      	ldr	r3, [r4, #0]
 801698c:	4620      	mov	r0, r4
 801698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016990:	4798      	blx	r3
 8016992:	6828      	ldr	r0, [r5, #0]
 8016994:	6803      	ldr	r3, [r0, #0]
 8016996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801699a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801699c:	4718      	bx	r3
 801699e:	bf00      	nop
 80169a0:	2000b370 	.word	0x2000b370

080169a4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80169a4:	b508      	push	{r3, lr}
 80169a6:	f7fd fc23 	bl	80141f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80169aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80169ae:	f7fd bc2d 	b.w	801420c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080169b2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80169b2:	b510      	push	{r4, lr}
 80169b4:	4604      	mov	r4, r0
 80169b6:	6840      	ldr	r0, [r0, #4]
 80169b8:	6803      	ldr	r3, [r0, #0]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	4798      	blx	r3
 80169be:	b948      	cbnz	r0, 80169d4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80169c0:	7a63      	ldrb	r3, [r4, #9]
 80169c2:	b13b      	cbz	r3, 80169d4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80169c4:	7a23      	ldrb	r3, [r4, #8]
 80169c6:	b92b      	cbnz	r3, 80169d4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80169c8:	6823      	ldr	r3, [r4, #0]
 80169ca:	4620      	mov	r0, r4
 80169cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169d2:	4718      	bx	r3
 80169d4:	bd10      	pop	{r4, pc}
	...

080169d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80169d8:	b510      	push	{r4, lr}
 80169da:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80169de:	1b12      	subs	r2, r2, r4
 80169e0:	2a00      	cmp	r2, #0
 80169e2:	bfdc      	itt	le
 80169e4:	6883      	ldrle	r3, [r0, #8]
 80169e6:	18d2      	addle	r2, r2, r3
 80169e8:	2a01      	cmp	r2, #1
 80169ea:	dd18      	ble.n	8016a1e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80169ec:	6843      	ldr	r3, [r0, #4]
 80169ee:	f101 021c 	add.w	r2, r1, #28
 80169f2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80169f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80169fa:	4291      	cmp	r1, r2
 80169fc:	f843 4b04 	str.w	r4, [r3], #4
 8016a00:	d1f9      	bne.n	80169f6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016a02:	880a      	ldrh	r2, [r1, #0]
 8016a04:	801a      	strh	r2, [r3, #0]
 8016a06:	788a      	ldrb	r2, [r1, #2]
 8016a08:	709a      	strb	r2, [r3, #2]
 8016a0a:	68c3      	ldr	r3, [r0, #12]
 8016a0c:	6882      	ldr	r2, [r0, #8]
 8016a0e:	f3bf 8f5b 	dmb	ish
 8016a12:	3301      	adds	r3, #1
 8016a14:	429a      	cmp	r2, r3
 8016a16:	bfd8      	it	le
 8016a18:	1a9b      	suble	r3, r3, r2
 8016a1a:	60c3      	str	r3, [r0, #12]
 8016a1c:	bd10      	pop	{r4, pc}
 8016a1e:	4b03      	ldr	r3, [pc, #12]	; (8016a2c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016a20:	2139      	movs	r1, #57	; 0x39
 8016a22:	4a03      	ldr	r2, [pc, #12]	; (8016a30 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016a24:	4803      	ldr	r0, [pc, #12]	; (8016a34 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016a26:	f00e fef9 	bl	802581c <__assert_func>
 8016a2a:	bf00      	nop
 8016a2c:	08029790 	.word	0x08029790
 8016a30:	08029884 	.word	0x08029884
 8016a34:	0802976a 	.word	0x0802976a

08016a38 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016a38:	b510      	push	{r4, lr}
 8016a3a:	6803      	ldr	r3, [r0, #0]
 8016a3c:	4604      	mov	r4, r0
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4798      	blx	r3
 8016a42:	b128      	cbz	r0, 8016a50 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016a44:	4b07      	ldr	r3, [pc, #28]	; (8016a64 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016a46:	213f      	movs	r1, #63	; 0x3f
 8016a48:	4a07      	ldr	r2, [pc, #28]	; (8016a68 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016a4a:	4808      	ldr	r0, [pc, #32]	; (8016a6c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016a4c:	f00e fee6 	bl	802581c <__assert_func>
 8016a50:	6923      	ldr	r3, [r4, #16]
 8016a52:	68a2      	ldr	r2, [r4, #8]
 8016a54:	f3bf 8f5b 	dmb	ish
 8016a58:	3301      	adds	r3, #1
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	bfd8      	it	le
 8016a5e:	1a9b      	suble	r3, r3, r2
 8016a60:	6123      	str	r3, [r4, #16]
 8016a62:	bd10      	pop	{r4, pc}
 8016a64:	080297b3 	.word	0x080297b3
 8016a68:	080298d2 	.word	0x080298d2
 8016a6c:	0802976a 	.word	0x0802976a

08016a70 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016a70:	b570      	push	{r4, r5, r6, lr}
 8016a72:	4604      	mov	r4, r0
 8016a74:	6840      	ldr	r0, [r0, #4]
 8016a76:	6803      	ldr	r3, [r0, #0]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	4798      	blx	r3
 8016a7c:	4605      	mov	r5, r0
 8016a7e:	b930      	cbnz	r0, 8016a8e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016a80:	7a23      	ldrb	r3, [r4, #8]
 8016a82:	b123      	cbz	r3, 8016a8e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016a84:	6860      	ldr	r0, [r4, #4]
 8016a86:	6803      	ldr	r3, [r0, #0]
 8016a88:	695b      	ldr	r3, [r3, #20]
 8016a8a:	4798      	blx	r3
 8016a8c:	7225      	strb	r5, [r4, #8]
 8016a8e:	6860      	ldr	r0, [r4, #4]
 8016a90:	6803      	ldr	r3, [r0, #0]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	4798      	blx	r3
 8016a96:	b928      	cbnz	r0, 8016aa4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016a98:	6823      	ldr	r3, [r4, #0]
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aa2:	4718      	bx	r3
 8016aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aa8:	f7fd bbc8 	b.w	801423c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016aac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016aac:	b510      	push	{r4, lr}
 8016aae:	6082      	str	r2, [r0, #8]
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	4c03      	ldr	r4, [pc, #12]	; (8016ac0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016ab4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016ab8:	e9c0 4100 	strd	r4, r1, [r0]
 8016abc:	bd10      	pop	{r4, pc}
 8016abe:	bf00      	nop
 8016ac0:	08029838 	.word	0x08029838

08016ac4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016ac4:	6840      	ldr	r0, [r0, #4]
 8016ac6:	6803      	ldr	r3, [r0, #0]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	4718      	bx	r3

08016acc <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016acc:	2001      	movs	r0, #1
 8016ace:	4770      	bx	lr

08016ad0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ad4:	460d      	mov	r5, r1
 8016ad6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016ada:	b085      	sub	sp, #20
 8016adc:	4690      	mov	r8, r2
 8016ade:	4411      	add	r1, r2
 8016ae0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016ae4:	4699      	mov	r9, r3
 8016ae6:	6803      	ldr	r3, [r0, #0]
 8016ae8:	60c1      	str	r1, [r0, #12]
 8016aea:	4604      	mov	r4, r0
 8016aec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016aee:	440a      	add	r2, r1
 8016af0:	6102      	str	r2, [r0, #16]
 8016af2:	695b      	ldr	r3, [r3, #20]
 8016af4:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016af8:	4798      	blx	r3
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d039      	beq.n	8016b72 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8016afe:	44c8      	add	r8, r9
 8016b00:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016b04:	4445      	add	r5, r8
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	f10d 020f 	add.w	r2, sp, #15
 8016b0c:	a903      	add	r1, sp, #12
 8016b0e:	4620      	mov	r0, r4
 8016b10:	9200      	str	r2, [sp, #0]
 8016b12:	f10d 020d 	add.w	r2, sp, #13
 8016b16:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8016b1a:	f10d 030e 	add.w	r3, sp, #14
 8016b1e:	47c0      	blx	r8
 8016b20:	b1f8      	cbz	r0, 8016b62 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016b22:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016b26:	7a20      	ldrb	r0, [r4, #8]
 8016b28:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016b2c:	4358      	muls	r0, r3
 8016b2e:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016b32:	1c43      	adds	r3, r0, #1
 8016b34:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016b38:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016b3c:	121b      	asrs	r3, r3, #8
 8016b3e:	fb10 f003 	smulbb	r0, r0, r3
 8016b42:	b283      	uxth	r3, r0
 8016b44:	1c58      	adds	r0, r3, #1
 8016b46:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016b4a:	6823      	ldr	r3, [r4, #0]
 8016b4c:	1200      	asrs	r0, r0, #8
 8016b4e:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016b52:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016b56:	28ff      	cmp	r0, #255	; 0xff
 8016b58:	d10e      	bne.n	8016b78 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016b5a:	9100      	str	r1, [sp, #0]
 8016b5c:	4629      	mov	r1, r5
 8016b5e:	4620      	mov	r0, r4
 8016b60:	47c0      	blx	r8
 8016b62:	68e3      	ldr	r3, [r4, #12]
 8016b64:	3e01      	subs	r6, #1
 8016b66:	f105 0503 	add.w	r5, r5, #3
 8016b6a:	f103 0301 	add.w	r3, r3, #1
 8016b6e:	60e3      	str	r3, [r4, #12]
 8016b70:	d1c9      	bne.n	8016b06 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016b72:	b005      	add	sp, #20
 8016b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b78:	fa1f fc80 	uxth.w	ip, r0
 8016b7c:	43c0      	mvns	r0, r0
 8016b7e:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016b82:	fb12 f20c 	smulbb	r2, r2, ip
 8016b86:	b2c0      	uxtb	r0, r0
 8016b88:	fb13 f30c 	smulbb	r3, r3, ip
 8016b8c:	fb0e 2200 	mla	r2, lr, r0, r2
 8016b90:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016b94:	fb11 f10c 	smulbb	r1, r1, ip
 8016b98:	fb0e 3300 	mla	r3, lr, r0, r3
 8016b9c:	f895 e000 	ldrb.w	lr, [r5]
 8016ba0:	b292      	uxth	r2, r2
 8016ba2:	b29b      	uxth	r3, r3
 8016ba4:	fb0e 1000 	mla	r0, lr, r0, r1
 8016ba8:	1c59      	adds	r1, r3, #1
 8016baa:	b280      	uxth	r0, r0
 8016bac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016bb0:	1c51      	adds	r1, r2, #1
 8016bb2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016bb6:	1c41      	adds	r1, r0, #1
 8016bb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016bbc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016bc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016bc4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016bc8:	9000      	str	r0, [sp, #0]
 8016bca:	e7c7      	b.n	8016b5c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016bcc <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016bcc:	f89d 0000 	ldrb.w	r0, [sp]
 8016bd0:	704b      	strb	r3, [r1, #1]
 8016bd2:	7008      	strb	r0, [r1, #0]
 8016bd4:	708a      	strb	r2, [r1, #2]
 8016bd6:	4770      	bx	lr

08016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016bd8:	b507      	push	{r0, r1, r2, lr}
 8016bda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016bde:	ab01      	add	r3, sp, #4
 8016be0:	6809      	ldr	r1, [r1, #0]
 8016be2:	6800      	ldr	r0, [r0, #0]
 8016be4:	f003 fa2a 	bl	801a03c <_ZN8touchgfx6muldivElllRl>
 8016be8:	b003      	add	sp, #12
 8016bea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016bf0 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016bf0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016bf4:	fb90 f3f2 	sdiv	r3, r0, r2
 8016bf8:	fb03 0312 	mls	r3, r3, r2, r0
 8016bfc:	4413      	add	r3, r2
 8016bfe:	fb93 f0f2 	sdiv	r0, r3, r2
 8016c02:	fb02 3010 	mls	r0, r2, r0, r3
 8016c06:	4b0a      	ldr	r3, [pc, #40]	; (8016c30 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016c08:	285a      	cmp	r0, #90	; 0x5a
 8016c0a:	dc02      	bgt.n	8016c12 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016c0c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016c10:	4770      	bx	lr
 8016c12:	28b4      	cmp	r0, #180	; 0xb4
 8016c14:	dc02      	bgt.n	8016c1c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016c16:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016c1a:	e7f7      	b.n	8016c0c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016c1c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016c20:	bfd4      	ite	le
 8016c22:	38b4      	suble	r0, #180	; 0xb4
 8016c24:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016c28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016c2c:	4240      	negs	r0, r0
 8016c2e:	4770      	bx	lr
 8016c30:	0802992c 	.word	0x0802992c

08016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8016c34:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016c38:	fb90 f3f2 	sdiv	r3, r0, r2
 8016c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c3e:	fb03 0012 	mls	r0, r3, r2, r0
 8016c42:	4410      	add	r0, r2
 8016c44:	fb90 f4f2 	sdiv	r4, r0, r2
 8016c48:	fb02 0414 	mls	r4, r2, r4, r0
 8016c4c:	f004 061f 	and.w	r6, r4, #31
 8016c50:	1164      	asrs	r4, r4, #5
 8016c52:	4620      	mov	r0, r4
 8016c54:	f7ff ffcc 	bl	8016bf0 <_ZN8touchgfx7CWRUtil4sineEi>
 8016c58:	4605      	mov	r5, r0
 8016c5a:	b90e      	cbnz	r6, 8016c60 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8016c5c:	b002      	add	sp, #8
 8016c5e:	bd70      	pop	{r4, r5, r6, pc}
 8016c60:	1c60      	adds	r0, r4, #1
 8016c62:	f7ff ffc5 	bl	8016bf0 <_ZN8touchgfx7CWRUtil4sineEi>
 8016c66:	ab01      	add	r3, sp, #4
 8016c68:	2220      	movs	r2, #32
 8016c6a:	4631      	mov	r1, r6
 8016c6c:	1b40      	subs	r0, r0, r5
 8016c6e:	f003 f9e5 	bl	801a03c <_ZN8touchgfx6muldivElllRl>
 8016c72:	4428      	add	r0, r5
 8016c74:	e7f2      	b.n	8016c5c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8016c76:	b508      	push	{r3, lr}
 8016c78:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8016c7c:	f7ff ffda 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016c80:	bd08      	pop	{r3, pc}
	...

08016c84 <_ZN8touchgfx6CircleC1Ev>:
 8016c84:	b510      	push	{r4, lr}
 8016c86:	4604      	mov	r4, r0
 8016c88:	f000 fce2 	bl	8017650 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016c8c:	4b08      	ldr	r3, [pc, #32]	; (8016cb0 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8016c8e:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016c92:	4620      	mov	r0, r4
 8016c94:	6023      	str	r3, [r4, #0]
 8016c96:	2300      	movs	r3, #0
 8016c98:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8016c9c:	f24b 4205 	movw	r2, #46085	; 0xb405
 8016ca0:	60a3      	str	r3, [r4, #8]
 8016ca2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016ca6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016caa:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8016cae:	bd10      	pop	{r4, pc}
 8016cb0:	080299ec 	.word	0x080299ec

08016cb4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016cb8:	4606      	mov	r6, r0
 8016cba:	6810      	ldr	r0, [r2, #0]
 8016cbc:	4698      	mov	r8, r3
 8016cbe:	4691      	mov	r9, r2
 8016cc0:	460f      	mov	r7, r1
 8016cc2:	f7ff ffb7 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016cc6:	a902      	add	r1, sp, #8
 8016cc8:	2402      	movs	r4, #2
 8016cca:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016cce:	4640      	mov	r0, r8
 8016cd0:	f7ff ff82 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016cd4:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8016cd6:	fb90 f0f4 	sdiv	r0, r0, r4
 8016cda:	4405      	add	r5, r0
 8016cdc:	f8d9 0000 	ldr.w	r0, [r9]
 8016ce0:	f7ff ffc9 	bl	8016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016ce4:	a902      	add	r1, sp, #8
 8016ce6:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016cea:	4640      	mov	r0, r8
 8016cec:	f7ff ff74 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016cf0:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8016cf2:	4629      	mov	r1, r5
 8016cf4:	fb90 f0f4 	sdiv	r0, r0, r4
 8016cf8:	1a12      	subs	r2, r2, r0
 8016cfa:	4638      	mov	r0, r7
 8016cfc:	f00d fb81 	bl	8024402 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016d00:	b003      	add	sp, #12
 8016d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016d06 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8016d06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016d0a:	9e08      	ldr	r6, [sp, #32]
 8016d0c:	4698      	mov	r8, r3
 8016d0e:	4615      	mov	r5, r2
 8016d10:	460f      	mov	r7, r1
 8016d12:	6830      	ldr	r0, [r6, #0]
 8016d14:	2402      	movs	r4, #2
 8016d16:	f7ff ff8d 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016d1a:	a902      	add	r1, sp, #8
 8016d1c:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d22:	f7ff ff59 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d26:	682d      	ldr	r5, [r5, #0]
 8016d28:	fb90 f0f4 	sdiv	r0, r0, r4
 8016d2c:	4405      	add	r5, r0
 8016d2e:	6830      	ldr	r0, [r6, #0]
 8016d30:	f7ff ffa1 	bl	8016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016d34:	a902      	add	r1, sp, #8
 8016d36:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d3c:	f7ff ff4c 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d40:	f8d8 2000 	ldr.w	r2, [r8]
 8016d44:	4629      	mov	r1, r5
 8016d46:	fb90 f0f4 	sdiv	r0, r0, r4
 8016d4a:	1a12      	subs	r2, r2, r0
 8016d4c:	4638      	mov	r0, r7
 8016d4e:	f00d fae7 	bl	8024320 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016d52:	b002      	add	sp, #8
 8016d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d58 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8016d58:	b513      	push	{r0, r1, r4, lr}
 8016d5a:	e9cd 2300 	strd	r2, r3, [sp]
 8016d5e:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8016d62:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8016d66:	f7ff ffce 	bl	8016d06 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016d6a:	b002      	add	sp, #8
 8016d6c:	bd10      	pop	{r4, pc}

08016d6e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d70:	680e      	ldr	r6, [r1, #0]
 8016d72:	681f      	ldr	r7, [r3, #0]
 8016d74:	9807      	ldr	r0, [sp, #28]
 8016d76:	42be      	cmp	r6, r7
 8016d78:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8016d7c:	bfb8      	it	lt
 8016d7e:	601e      	strlt	r6, [r3, #0]
 8016d80:	680b      	ldr	r3, [r1, #0]
 8016d82:	6829      	ldr	r1, [r5, #0]
 8016d84:	428b      	cmp	r3, r1
 8016d86:	bfc8      	it	gt
 8016d88:	602b      	strgt	r3, [r5, #0]
 8016d8a:	6813      	ldr	r3, [r2, #0]
 8016d8c:	6821      	ldr	r1, [r4, #0]
 8016d8e:	428b      	cmp	r3, r1
 8016d90:	bfb8      	it	lt
 8016d92:	6023      	strlt	r3, [r4, #0]
 8016d94:	6813      	ldr	r3, [r2, #0]
 8016d96:	6802      	ldr	r2, [r0, #0]
 8016d98:	4293      	cmp	r3, r2
 8016d9a:	bfc8      	it	gt
 8016d9c:	6003      	strgt	r3, [r0, #0]
 8016d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016da0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016da4:	b089      	sub	sp, #36	; 0x24
 8016da6:	4690      	mov	r8, r2
 8016da8:	4606      	mov	r6, r0
 8016daa:	2402      	movs	r4, #2
 8016dac:	ad08      	add	r5, sp, #32
 8016dae:	6808      	ldr	r0, [r1, #0]
 8016db0:	461f      	mov	r7, r3
 8016db2:	4689      	mov	r9, r1
 8016db4:	f7ff ff3e 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016db8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016dbc:	4640      	mov	r0, r8
 8016dbe:	4629      	mov	r1, r5
 8016dc0:	f7ff ff0a 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016dc4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8016dc6:	fb90 f0f4 	sdiv	r0, r0, r4
 8016dca:	4418      	add	r0, r3
 8016dcc:	9005      	str	r0, [sp, #20]
 8016dce:	f8d9 0000 	ldr.w	r0, [r9]
 8016dd2:	f7ff ff50 	bl	8016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016dd6:	4629      	mov	r1, r5
 8016dd8:	9007      	str	r0, [sp, #28]
 8016dda:	4640      	mov	r0, r8
 8016ddc:	f7ff fefc 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016de2:	aa08      	add	r2, sp, #32
 8016de4:	a905      	add	r1, sp, #20
 8016de6:	fb90 f0f4 	sdiv	r0, r0, r4
 8016dea:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8016dec:	1a24      	subs	r4, r4, r0
 8016dee:	4630      	mov	r0, r6
 8016df0:	f842 4d08 	str.w	r4, [r2, #-8]!
 8016df4:	9302      	str	r3, [sp, #8]
 8016df6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016df8:	9301      	str	r3, [sp, #4]
 8016dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dfc:	9300      	str	r3, [sp, #0]
 8016dfe:	463b      	mov	r3, r7
 8016e00:	f7ff ffb5 	bl	8016d6e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016e04:	b009      	add	sp, #36	; 0x24
 8016e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016e0a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8016e0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e0e:	4291      	cmp	r1, r2
 8016e10:	b08d      	sub	sp, #52	; 0x34
 8016e12:	461e      	mov	r6, r3
 8016e14:	4604      	mov	r4, r0
 8016e16:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8016e1a:	ad0c      	add	r5, sp, #48	; 0x30
 8016e1c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8016e20:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8016e24:	bfc8      	it	gt
 8016e26:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8016e2a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016e2e:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8016e32:	1a9b      	subs	r3, r3, r2
 8016e34:	a907      	add	r1, sp, #28
 8016e36:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016e3a:	bfa2      	ittt	ge
 8016e3c:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8016e40:	2200      	movge	r2, #0
 8016e42:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8016e46:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8016e48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016e4a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016e4e:	f845 3d04 	str.w	r3, [r5, #-4]!
 8016e52:	4633      	mov	r3, r6
 8016e54:	462a      	mov	r2, r5
 8016e56:	9700      	str	r7, [sp, #0]
 8016e58:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016e5c:	f7ff ffa0 	bl	8016da0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016e60:	9b07      	ldr	r3, [sp, #28]
 8016e62:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8016e66:	f103 0120 	add.w	r1, r3, #32
 8016e6a:	fb91 f3f0 	sdiv	r3, r1, r0
 8016e6e:	fb00 1313 	mls	r3, r0, r3, r1
 8016e72:	1ac3      	subs	r3, r0, r3
 8016e74:	fb93 f2f0 	sdiv	r2, r3, r0
 8016e78:	fb00 3312 	mls	r3, r0, r2, r3
 8016e7c:	440b      	add	r3, r1
 8016e7e:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8016e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e84:	9906      	ldr	r1, [sp, #24]
 8016e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016e88:	4291      	cmp	r1, r2
 8016e8a:	db11      	blt.n	8016eb0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8016e8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016e8e:	4651      	mov	r1, sl
 8016e90:	9700      	str	r7, [sp, #0]
 8016e92:	4620      	mov	r0, r4
 8016e94:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016e98:	462a      	mov	r2, r5
 8016e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e9c:	4633      	mov	r3, r6
 8016e9e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ea2:	f7ff ff7d 	bl	8016da0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ea8:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8016eac:	9309      	str	r3, [sp, #36]	; 0x24
 8016eae:	e7e8      	b.n	8016e82 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8016eb0:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8016eb4:	4291      	cmp	r1, r2
 8016eb6:	dd0c      	ble.n	8016ed2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8016eb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016eba:	a906      	add	r1, sp, #24
 8016ebc:	9700      	str	r7, [sp, #0]
 8016ebe:	4620      	mov	r0, r4
 8016ec0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016ec4:	462a      	mov	r2, r5
 8016ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ec8:	4633      	mov	r3, r6
 8016eca:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ece:	f7ff ff67 	bl	8016da0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016ed2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f040 8097 	bne.w	8017008 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8016eda:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8016ede:	1a52      	subs	r2, r2, r1
 8016ee0:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8016ee4:	da0a      	bge.n	8016efc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8016ee6:	462a      	mov	r2, r5
 8016ee8:	a90a      	add	r1, sp, #40	; 0x28
 8016eea:	9700      	str	r7, [sp, #0]
 8016eec:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8016ef0:	4633      	mov	r3, r6
 8016ef2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	f7ff ff52 	bl	8016da0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016efc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8016f00:	2bb3      	cmp	r3, #179	; 0xb3
 8016f02:	d87e      	bhi.n	8017002 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8016f04:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8016f08:	1a1b      	subs	r3, r3, r0
 8016f0a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016f0e:	da78      	bge.n	8017002 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8016f10:	ad0c      	add	r5, sp, #48	; 0x30
 8016f12:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8016f16:	f7ff fe8d 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016f1a:	f04f 0a02 	mov.w	sl, #2
 8016f1e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016f22:	4658      	mov	r0, fp
 8016f24:	4629      	mov	r1, r5
 8016f26:	f7ff fe57 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016f2c:	18c3      	adds	r3, r0, r3
 8016f2e:	9807      	ldr	r0, [sp, #28]
 8016f30:	9305      	str	r3, [sp, #20]
 8016f32:	f7ff fea0 	bl	8016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016f36:	4629      	mov	r1, r5
 8016f38:	900b      	str	r0, [sp, #44]	; 0x2c
 8016f3a:	4658      	mov	r0, fp
 8016f3c:	f7ff fe4c 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f42:	9a05      	ldr	r2, [sp, #20]
 8016f44:	a90a      	add	r1, sp, #40	; 0x28
 8016f46:	1a1b      	subs	r3, r3, r0
 8016f48:	9700      	str	r7, [sp, #0]
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	9304      	str	r3, [sp, #16]
 8016f4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016f50:	fb93 f3fa 	sdiv	r3, r3, sl
 8016f54:	1ad2      	subs	r2, r2, r3
 8016f56:	920a      	str	r2, [sp, #40]	; 0x28
 8016f58:	9a04      	ldr	r2, [sp, #16]
 8016f5a:	1ad3      	subs	r3, r2, r3
 8016f5c:	462a      	mov	r2, r5
 8016f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f60:	4633      	mov	r3, r6
 8016f62:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016f66:	f7ff ff02 	bl	8016d6e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016f6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016f6c:	9a05      	ldr	r2, [sp, #20]
 8016f6e:	a90a      	add	r1, sp, #40	; 0x28
 8016f70:	4620      	mov	r0, r4
 8016f72:	9700      	str	r7, [sp, #0]
 8016f74:	fb93 f3fa 	sdiv	r3, r3, sl
 8016f78:	189a      	adds	r2, r3, r2
 8016f7a:	920a      	str	r2, [sp, #40]	; 0x28
 8016f7c:	9a04      	ldr	r2, [sp, #16]
 8016f7e:	4413      	add	r3, r2
 8016f80:	462a      	mov	r2, r5
 8016f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f84:	4633      	mov	r3, r6
 8016f86:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016f8a:	f7ff fef0 	bl	8016d6e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016f8e:	9806      	ldr	r0, [sp, #24]
 8016f90:	f7ff fe50 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016f94:	4629      	mov	r1, r5
 8016f96:	900b      	str	r0, [sp, #44]	; 0x2c
 8016f98:	4658      	mov	r0, fp
 8016f9a:	f7ff fe1d 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016fa0:	18c3      	adds	r3, r0, r3
 8016fa2:	9806      	ldr	r0, [sp, #24]
 8016fa4:	9304      	str	r3, [sp, #16]
 8016fa6:	f7ff fe66 	bl	8016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016faa:	4629      	mov	r1, r5
 8016fac:	900b      	str	r0, [sp, #44]	; 0x2c
 8016fae:	4658      	mov	r0, fp
 8016fb0:	f7ff fe12 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fb6:	9a04      	ldr	r2, [sp, #16]
 8016fb8:	a90a      	add	r1, sp, #40	; 0x28
 8016fba:	eba3 0b00 	sub.w	fp, r3, r0
 8016fbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	9700      	str	r7, [sp, #0]
 8016fc4:	fb93 f3fa 	sdiv	r3, r3, sl
 8016fc8:	1ad2      	subs	r2, r2, r3
 8016fca:	ebab 0303 	sub.w	r3, fp, r3
 8016fce:	920a      	str	r2, [sp, #40]	; 0x28
 8016fd0:	462a      	mov	r2, r5
 8016fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fd4:	4633      	mov	r3, r6
 8016fd6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016fda:	f7ff fec8 	bl	8016d6e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016fde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016fe0:	9700      	str	r7, [sp, #0]
 8016fe2:	462a      	mov	r2, r5
 8016fe4:	a90a      	add	r1, sp, #40	; 0x28
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	fb93 fafa 	sdiv	sl, r3, sl
 8016fec:	9b04      	ldr	r3, [sp, #16]
 8016fee:	4453      	add	r3, sl
 8016ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8016ff2:	eb0a 030b 	add.w	r3, sl, fp
 8016ff6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ffc:	4633      	mov	r3, r6
 8016ffe:	f7ff feb6 	bl	8016d6e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017002:	b00d      	add	sp, #52	; 0x34
 8017004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017008:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801700a:	a907      	add	r1, sp, #28
 801700c:	9700      	str	r7, [sp, #0]
 801700e:	4620      	mov	r0, r4
 8017010:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017014:	462a      	mov	r2, r5
 8017016:	930b      	str	r3, [sp, #44]	; 0x2c
 8017018:	4633      	mov	r3, r6
 801701a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801701e:	f7ff febf 	bl	8016da0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017022:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017024:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017026:	a906      	add	r1, sp, #24
 8017028:	9700      	str	r7, [sp, #0]
 801702a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801702e:	462a      	mov	r2, r5
 8017030:	930b      	str	r3, [sp, #44]	; 0x2c
 8017032:	4633      	mov	r3, r6
 8017034:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017038:	e75d      	b.n	8016ef6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801703a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801703a:	b530      	push	{r4, r5, lr}
 801703c:	4604      	mov	r4, r0
 801703e:	4608      	mov	r0, r1
 8017040:	4611      	mov	r1, r2
 8017042:	461a      	mov	r2, r3
 8017044:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017048:	b089      	sub	sp, #36	; 0x24
 801704a:	2500      	movs	r5, #0
 801704c:	015b      	lsls	r3, r3, #5
 801704e:	9505      	str	r5, [sp, #20]
 8017050:	9304      	str	r3, [sp, #16]
 8017052:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017056:	015b      	lsls	r3, r3, #5
 8017058:	e9cd 3506 	strd	r3, r5, [sp, #24]
 801705c:	ab07      	add	r3, sp, #28
 801705e:	2520      	movs	r5, #32
 8017060:	9302      	str	r3, [sp, #8]
 8017062:	ab06      	add	r3, sp, #24
 8017064:	9301      	str	r3, [sp, #4]
 8017066:	ab05      	add	r3, sp, #20
 8017068:	9300      	str	r3, [sp, #0]
 801706a:	ab04      	add	r3, sp, #16
 801706c:	f7ff fecd 	bl	8016e0a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8017070:	9a04      	ldr	r2, [sp, #16]
 8017072:	9805      	ldr	r0, [sp, #20]
 8017074:	9b06      	ldr	r3, [sp, #24]
 8017076:	9907      	ldr	r1, [sp, #28]
 8017078:	fb92 f2f5 	sdiv	r2, r2, r5
 801707c:	fb90 f0f5 	sdiv	r0, r0, r5
 8017080:	fb93 f3f5 	sdiv	r3, r3, r5
 8017084:	fb91 f1f5 	sdiv	r1, r1, r5
 8017088:	b292      	uxth	r2, r2
 801708a:	3002      	adds	r0, #2
 801708c:	b29b      	uxth	r3, r3
 801708e:	3102      	adds	r1, #2
 8017090:	1a80      	subs	r0, r0, r2
 8017092:	3a01      	subs	r2, #1
 8017094:	1ac9      	subs	r1, r1, r3
 8017096:	3b01      	subs	r3, #1
 8017098:	80a0      	strh	r0, [r4, #4]
 801709a:	4620      	mov	r0, r4
 801709c:	8022      	strh	r2, [r4, #0]
 801709e:	8063      	strh	r3, [r4, #2]
 80170a0:	80e1      	strh	r1, [r4, #6]
 80170a2:	b009      	add	sp, #36	; 0x24
 80170a4:	bd30      	pop	{r4, r5, pc}

080170a6 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 80170a6:	b510      	push	{r4, lr}
 80170a8:	4604      	mov	r4, r0
 80170aa:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 80170ae:	f7ff ffc4 	bl	801703a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80170b2:	4620      	mov	r0, r4
 80170b4:	bd10      	pop	{r4, pc}

080170b6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 80170b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80170bc:	b0ba      	sub	sp, #232	; 0xe8
 80170be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80170c0:	4604      	mov	r4, r0
 80170c2:	9303      	str	r3, [sp, #12]
 80170c4:	460f      	mov	r7, r1
 80170c6:	429a      	cmp	r2, r3
 80170c8:	9204      	str	r2, [sp, #16]
 80170ca:	ae0a      	add	r6, sp, #40	; 0x28
 80170cc:	bfb8      	it	lt
 80170ce:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 80170d2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80170d6:	1a9b      	subs	r3, r3, r2
 80170d8:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80170dc:	bfa2      	ittt	ge
 80170de:	2200      	movge	r2, #0
 80170e0:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80170e4:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 80170e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80170ea:	2a00      	cmp	r2, #0
 80170ec:	d131      	bne.n	8017152 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 80170ee:	463a      	mov	r2, r7
 80170f0:	4621      	mov	r1, r4
 80170f2:	a80b      	add	r0, sp, #44	; 0x2c
 80170f4:	f00c ffbc 	bl	8024070 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80170f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80170fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80170fc:	9205      	str	r2, [sp, #20]
 80170fe:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8017102:	9306      	str	r3, [sp, #24]
 8017104:	dc6f      	bgt.n	80171e6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8017106:	9b03      	ldr	r3, [sp, #12]
 8017108:	a90b      	add	r1, sp, #44	; 0x2c
 801710a:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 801710e:	4620      	mov	r0, r4
 8017110:	9307      	str	r3, [sp, #28]
 8017112:	016d      	lsls	r5, r5, #5
 8017114:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017118:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801711c:	aa07      	add	r2, sp, #28
 801711e:	930a      	str	r3, [sp, #40]	; 0x28
 8017120:	4633      	mov	r3, r6
 8017122:	f7ff fdc7 	bl	8016cb4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017126:	9f07      	ldr	r7, [sp, #28]
 8017128:	2d00      	cmp	r5, #0
 801712a:	d165      	bne.n	80171f8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 801712c:	3720      	adds	r7, #32
 801712e:	4639      	mov	r1, r7
 8017130:	9a04      	ldr	r2, [sp, #16]
 8017132:	9b06      	ldr	r3, [sp, #24]
 8017134:	442f      	add	r7, r5
 8017136:	4291      	cmp	r1, r2
 8017138:	dc6b      	bgt.n	8017212 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 801713a:	9a05      	ldr	r2, [sp, #20]
 801713c:	4620      	mov	r0, r4
 801713e:	9107      	str	r1, [sp, #28]
 8017140:	a90b      	add	r1, sp, #44	; 0x2c
 8017142:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017146:	aa07      	add	r2, sp, #28
 8017148:	930a      	str	r3, [sp, #40]	; 0x28
 801714a:	4633      	mov	r3, r6
 801714c:	f7ff fe04 	bl	8016d58 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017150:	e7ed      	b.n	801712e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8017152:	f9b1 c000 	ldrsh.w	ip, [r1]
 8017156:	88bd      	ldrh	r5, [r7, #4]
 8017158:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801715c:	4465      	add	r5, ip
 801715e:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8017162:	b22d      	sxth	r5, r5
 8017164:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8017168:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 801716c:	2d00      	cmp	r5, #0
 801716e:	bfb8      	it	lt
 8017170:	426d      	neglt	r5, r5
 8017172:	2b00      	cmp	r3, #0
 8017174:	bfb8      	it	lt
 8017176:	425b      	neglt	r3, r3
 8017178:	429d      	cmp	r5, r3
 801717a:	bfb8      	it	lt
 801717c:	461d      	movlt	r5, r3
 801717e:	88fb      	ldrh	r3, [r7, #6]
 8017180:	4403      	add	r3, r0
 8017182:	116d      	asrs	r5, r5, #5
 8017184:	b21b      	sxth	r3, r3
 8017186:	3501      	adds	r5, #1
 8017188:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 801718c:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8017190:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017194:	2b00      	cmp	r3, #0
 8017196:	f100 0001 	add.w	r0, r0, #1
 801719a:	bfb8      	it	lt
 801719c:	425b      	neglt	r3, r3
 801719e:	2900      	cmp	r1, #0
 80171a0:	ea4f 0060 	mov.w	r0, r0, asr #1
 80171a4:	bfb8      	it	lt
 80171a6:	4249      	neglt	r1, r1
 80171a8:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80171ac:	428b      	cmp	r3, r1
 80171ae:	bfb8      	it	lt
 80171b0:	460b      	movlt	r3, r1
 80171b2:	115b      	asrs	r3, r3, #5
 80171b4:	3301      	adds	r3, #1
 80171b6:	435b      	muls	r3, r3
 80171b8:	fb05 3505 	mla	r5, r5, r5, r3
 80171bc:	2302      	movs	r3, #2
 80171be:	fb92 f2f3 	sdiv	r2, r2, r3
 80171c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80171c4:	1a9a      	subs	r2, r3, r2
 80171c6:	920a      	str	r2, [sp, #40]	; 0x28
 80171c8:	f7ff fd12 	bl	8016bf0 <_ZN8touchgfx7CWRUtil4sineEi>
 80171cc:	a90b      	add	r1, sp, #44	; 0x2c
 80171ce:	900b      	str	r0, [sp, #44]	; 0x2c
 80171d0:	4630      	mov	r0, r6
 80171d2:	f7ff fd01 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80171d6:	2320      	movs	r3, #32
 80171d8:	fb90 f0f3 	sdiv	r0, r0, r3
 80171dc:	4340      	muls	r0, r0
 80171de:	42a8      	cmp	r0, r5
 80171e0:	dd85      	ble.n	80170ee <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80171e2:	2401      	movs	r4, #1
 80171e4:	e036      	b.n	8017254 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 80171e6:	2102      	movs	r1, #2
 80171e8:	fb93 f3f1 	sdiv	r3, r3, r1
 80171ec:	4413      	add	r3, r2
 80171ee:	9306      	str	r3, [sp, #24]
 80171f0:	fb93 f3f1 	sdiv	r3, r3, r1
 80171f4:	9305      	str	r3, [sp, #20]
 80171f6:	e786      	b.n	8017106 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80171f8:	f107 0320 	add.w	r3, r7, #32
 80171fc:	fb93 f7f5 	sdiv	r7, r3, r5
 8017200:	fb05 3717 	mls	r7, r5, r7, r3
 8017204:	1bea      	subs	r2, r5, r7
 8017206:	fb92 f7f5 	sdiv	r7, r2, r5
 801720a:	fb05 2717 	mls	r7, r5, r7, r2
 801720e:	441f      	add	r7, r3
 8017210:	e78d      	b.n	801712e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8017212:	9907      	ldr	r1, [sp, #28]
 8017214:	428a      	cmp	r2, r1
 8017216:	dd09      	ble.n	801722c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8017218:	9a05      	ldr	r2, [sp, #20]
 801721a:	a90b      	add	r1, sp, #44	; 0x2c
 801721c:	4620      	mov	r0, r4
 801721e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017222:	aa04      	add	r2, sp, #16
 8017224:	930a      	str	r3, [sp, #40]	; 0x28
 8017226:	4633      	mov	r3, r6
 8017228:	f7ff fd96 	bl	8016d58 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801722c:	9a06      	ldr	r2, [sp, #24]
 801722e:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8017232:	1ac3      	subs	r3, r0, r3
 8017234:	b992      	cbnz	r2, 801725c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 8017236:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801723a:	da04      	bge.n	8017246 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 801723c:	a80b      	add	r0, sp, #44	; 0x2c
 801723e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8017242:	f00d f86d 	bl	8024320 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017246:	a80b      	add	r0, sp, #44	; 0x2c
 8017248:	f00d f9df 	bl	802460a <_ZN8touchgfx6Canvas6renderEv>
 801724c:	4604      	mov	r4, r0
 801724e:	a80b      	add	r0, sp, #44	; 0x2c
 8017250:	f00d fa18 	bl	8024684 <_ZN8touchgfx6CanvasD1Ev>
 8017254:	4620      	mov	r0, r4
 8017256:	b03a      	add	sp, #232	; 0xe8
 8017258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801725c:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8017260:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017264:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8017268:	da2b      	bge.n	80172c2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 801726a:	f7ff fce3 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801726e:	4631      	mov	r1, r6
 8017270:	900a      	str	r0, [sp, #40]	; 0x28
 8017272:	a805      	add	r0, sp, #20
 8017274:	f7ff fcb0 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017278:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801727a:	f10d 0818 	add.w	r8, sp, #24
 801727e:	4418      	add	r0, r3
 8017280:	9008      	str	r0, [sp, #32]
 8017282:	9804      	ldr	r0, [sp, #16]
 8017284:	f7ff fcf7 	bl	8016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017288:	4631      	mov	r1, r6
 801728a:	900a      	str	r0, [sp, #40]	; 0x28
 801728c:	a805      	add	r0, sp, #20
 801728e:	f7ff fca3 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017294:	1a18      	subs	r0, r3, r0
 8017296:	9b04      	ldr	r3, [sp, #16]
 8017298:	443b      	add	r3, r7
 801729a:	9009      	str	r0, [sp, #36]	; 0x24
 801729c:	930a      	str	r3, [sp, #40]	; 0x28
 801729e:	9b04      	ldr	r3, [sp, #16]
 80172a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80172a2:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80172a6:	4293      	cmp	r3, r2
 80172a8:	dd0b      	ble.n	80172c2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 80172aa:	ab09      	add	r3, sp, #36	; 0x24
 80172ac:	aa08      	add	r2, sp, #32
 80172ae:	a90b      	add	r1, sp, #44	; 0x2c
 80172b0:	4620      	mov	r0, r4
 80172b2:	e9cd 6800 	strd	r6, r8, [sp]
 80172b6:	f7ff fd26 	bl	8016d06 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80172ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172bc:	443b      	add	r3, r7
 80172be:	930a      	str	r3, [sp, #40]	; 0x28
 80172c0:	e7ed      	b.n	801729e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 80172c2:	9a04      	ldr	r2, [sp, #16]
 80172c4:	9b07      	ldr	r3, [sp, #28]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	dd0a      	ble.n	80172e0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 80172ca:	a90b      	add	r1, sp, #44	; 0x2c
 80172cc:	4620      	mov	r0, r4
 80172ce:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80172d2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80172d6:	aa04      	add	r2, sp, #16
 80172d8:	930a      	str	r3, [sp, #40]	; 0x28
 80172da:	4633      	mov	r3, r6
 80172dc:	f7ff fd3c 	bl	8016d58 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80172e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80172e4:	4642      	mov	r2, r8
 80172e6:	9b03      	ldr	r3, [sp, #12]
 80172e8:	eba8 0805 	sub.w	r8, r8, r5
 80172ec:	429a      	cmp	r2, r3
 80172ee:	db0c      	blt.n	801730a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 80172f0:	9207      	str	r2, [sp, #28]
 80172f2:	a90b      	add	r1, sp, #44	; 0x2c
 80172f4:	4620      	mov	r0, r4
 80172f6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80172fa:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80172fe:	aa07      	add	r2, sp, #28
 8017300:	930a      	str	r3, [sp, #40]	; 0x28
 8017302:	4633      	mov	r3, r6
 8017304:	f7ff fd28 	bl	8016d58 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017308:	e7ec      	b.n	80172e4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 801730a:	9a07      	ldr	r2, [sp, #28]
 801730c:	4293      	cmp	r3, r2
 801730e:	da0a      	bge.n	8017326 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8017310:	a90b      	add	r1, sp, #44	; 0x2c
 8017312:	4620      	mov	r0, r4
 8017314:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017318:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801731c:	aa03      	add	r2, sp, #12
 801731e:	930a      	str	r3, [sp, #40]	; 0x28
 8017320:	4633      	mov	r3, r6
 8017322:	f7ff fd19 	bl	8016d58 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017326:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 801732a:	1a1b      	subs	r3, r3, r0
 801732c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017330:	da89      	bge.n	8017246 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017332:	f7ff fc7f 	bl	8016c34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017336:	4631      	mov	r1, r6
 8017338:	900a      	str	r0, [sp, #40]	; 0x28
 801733a:	a805      	add	r0, sp, #20
 801733c:	f7ff fc4c 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017340:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017342:	ad06      	add	r5, sp, #24
 8017344:	4418      	add	r0, r3
 8017346:	9008      	str	r0, [sp, #32]
 8017348:	9803      	ldr	r0, [sp, #12]
 801734a:	f7ff fc94 	bl	8016c76 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801734e:	4631      	mov	r1, r6
 8017350:	900a      	str	r0, [sp, #40]	; 0x28
 8017352:	a805      	add	r0, sp, #20
 8017354:	f7ff fc40 	bl	8016bd8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801735a:	1a18      	subs	r0, r3, r0
 801735c:	9b03      	ldr	r3, [sp, #12]
 801735e:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8017362:	9009      	str	r0, [sp, #36]	; 0x24
 8017364:	443b      	add	r3, r7
 8017366:	930a      	str	r3, [sp, #40]	; 0x28
 8017368:	9a03      	ldr	r2, [sp, #12]
 801736a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801736c:	429a      	cmp	r2, r3
 801736e:	f77f af6a 	ble.w	8017246 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017372:	ab09      	add	r3, sp, #36	; 0x24
 8017374:	aa08      	add	r2, sp, #32
 8017376:	a90b      	add	r1, sp, #44	; 0x2c
 8017378:	4620      	mov	r0, r4
 801737a:	e9cd 6500 	strd	r6, r5, [sp]
 801737e:	f7ff fcc2 	bl	8016d06 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017384:	443b      	add	r3, r7
 8017386:	930a      	str	r3, [sp, #40]	; 0x28
 8017388:	e7ee      	b.n	8017368 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

0801738a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801738a:	4413      	add	r3, r2
 801738c:	7a42      	ldrb	r2, [r0, #9]
 801738e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017392:	4419      	add	r1, r3
 8017394:	7a03      	ldrb	r3, [r0, #8]
 8017396:	435a      	muls	r2, r3
 8017398:	1c53      	adds	r3, r2, #1
 801739a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801739e:	121b      	asrs	r3, r3, #8
 80173a0:	2bff      	cmp	r3, #255	; 0xff
 80173a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173a4:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 80173a8:	d13e      	bne.n	8017428 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 80173aa:	4427      	add	r7, r4
 80173ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80173b0:	3103      	adds	r1, #3
 80173b2:	7d86      	ldrb	r6, [r0, #22]
 80173b4:	2bff      	cmp	r3, #255	; 0xff
 80173b6:	d10a      	bne.n	80173ce <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 80173b8:	f801 6c03 	strb.w	r6, [r1, #-3]
 80173bc:	7d43      	ldrb	r3, [r0, #21]
 80173be:	f801 3c02 	strb.w	r3, [r1, #-2]
 80173c2:	7d03      	ldrb	r3, [r0, #20]
 80173c4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80173c8:	42a7      	cmp	r7, r4
 80173ca:	d1ef      	bne.n	80173ac <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 80173cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173ce:	b29a      	uxth	r2, r3
 80173d0:	43db      	mvns	r3, r3
 80173d2:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80173d6:	fb16 f602 	smulbb	r6, r6, r2
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	fb05 6503 	mla	r5, r5, r3, r6
 80173e0:	b2ad      	uxth	r5, r5
 80173e2:	1c6e      	adds	r6, r5, #1
 80173e4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80173e8:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80173ec:	fb16 f603 	smulbb	r6, r6, r3
 80173f0:	122d      	asrs	r5, r5, #8
 80173f2:	f801 5c03 	strb.w	r5, [r1, #-3]
 80173f6:	7d45      	ldrb	r5, [r0, #21]
 80173f8:	fb05 6502 	mla	r5, r5, r2, r6
 80173fc:	b2ad      	uxth	r5, r5
 80173fe:	1c6e      	adds	r6, r5, #1
 8017400:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8017404:	122d      	asrs	r5, r5, #8
 8017406:	f801 5c02 	strb.w	r5, [r1, #-2]
 801740a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801740e:	7d06      	ldrb	r6, [r0, #20]
 8017410:	fb15 f303 	smulbb	r3, r5, r3
 8017414:	fb06 3202 	mla	r2, r6, r2, r3
 8017418:	b292      	uxth	r2, r2
 801741a:	1c53      	adds	r3, r2, #1
 801741c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017420:	1212      	asrs	r2, r2, #8
 8017422:	f801 2c01 	strb.w	r2, [r1, #-1]
 8017426:	e7cf      	b.n	80173c8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8017428:	b2de      	uxtb	r6, r3
 801742a:	2b00      	cmp	r3, #0
 801742c:	d0ce      	beq.n	80173cc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801742e:	3103      	adds	r1, #3
 8017430:	4427      	add	r7, r4
 8017432:	f814 2b01 	ldrb.w	r2, [r4], #1
 8017436:	3103      	adds	r1, #3
 8017438:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801743c:	fb02 f306 	mul.w	r3, r2, r6
 8017440:	42bc      	cmp	r4, r7
 8017442:	f103 0201 	add.w	r2, r3, #1
 8017446:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801744a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801744e:	b295      	uxth	r5, r2
 8017450:	ea6f 0202 	mvn.w	r2, r2
 8017454:	b2d3      	uxtb	r3, r2
 8017456:	7d82      	ldrb	r2, [r0, #22]
 8017458:	fb1c fc03 	smulbb	ip, ip, r3
 801745c:	fb02 c205 	mla	r2, r2, r5, ip
 8017460:	b292      	uxth	r2, r2
 8017462:	f102 0c01 	add.w	ip, r2, #1
 8017466:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801746a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801746e:	fb1c fc03 	smulbb	ip, ip, r3
 8017472:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017476:	f801 2c06 	strb.w	r2, [r1, #-6]
 801747a:	7d42      	ldrb	r2, [r0, #21]
 801747c:	fb02 c205 	mla	r2, r2, r5, ip
 8017480:	b292      	uxth	r2, r2
 8017482:	f102 0c01 	add.w	ip, r2, #1
 8017486:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801748a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801748e:	f801 2c05 	strb.w	r2, [r1, #-5]
 8017492:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8017496:	f890 c014 	ldrb.w	ip, [r0, #20]
 801749a:	fb12 f303 	smulbb	r3, r2, r3
 801749e:	fb0c 3305 	mla	r3, ip, r5, r3
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	f103 0201 	add.w	r2, r3, #1
 80174a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80174ac:	ea4f 2323 	mov.w	r3, r3, asr #8
 80174b0:	f801 3c04 	strb.w	r3, [r1, #-4]
 80174b4:	d1bd      	bne.n	8017432 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 80174b6:	e789      	b.n	80173cc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

080174b8 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 80174b8:	b510      	push	{r4, lr}
 80174ba:	7d04      	ldrb	r4, [r0, #20]
 80174bc:	700c      	strb	r4, [r1, #0]
 80174be:	7d41      	ldrb	r1, [r0, #21]
 80174c0:	7011      	strb	r1, [r2, #0]
 80174c2:	7d82      	ldrb	r2, [r0, #22]
 80174c4:	701a      	strb	r2, [r3, #0]
 80174c6:	9b02      	ldr	r3, [sp, #8]
 80174c8:	7a42      	ldrb	r2, [r0, #9]
 80174ca:	2001      	movs	r0, #1
 80174cc:	701a      	strb	r2, [r3, #0]
 80174ce:	bd10      	pop	{r4, pc}

080174d0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80174d0:	6281      	str	r1, [r0, #40]	; 0x28
 80174d2:	4770      	bx	lr

080174d4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80174d4:	b513      	push	{r0, r1, r4, lr}
 80174d6:	6803      	ldr	r3, [r0, #0]
 80174d8:	4604      	mov	r4, r0
 80174da:	4601      	mov	r1, r0
 80174dc:	4668      	mov	r0, sp
 80174de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174e0:	4798      	blx	r3
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	4669      	mov	r1, sp
 80174e6:	4620      	mov	r0, r4
 80174e8:	691b      	ldr	r3, [r3, #16]
 80174ea:	4798      	blx	r3
 80174ec:	b002      	add	sp, #8
 80174ee:	bd10      	pop	{r4, pc}

080174f0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80174f0:	b510      	push	{r4, lr}
 80174f2:	2200      	movs	r2, #0
 80174f4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80174f8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80174fc:	8002      	strh	r2, [r0, #0]
 80174fe:	8042      	strh	r2, [r0, #2]
 8017500:	8084      	strh	r4, [r0, #4]
 8017502:	80c1      	strh	r1, [r0, #6]
 8017504:	bd10      	pop	{r4, pc}

08017506 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8017506:	2200      	movs	r2, #0
 8017508:	8002      	strh	r2, [r0, #0]
 801750a:	8042      	strh	r2, [r0, #2]
 801750c:	8082      	strh	r2, [r0, #4]
 801750e:	80c2      	strh	r2, [r0, #6]
 8017510:	4770      	bx	lr
	...

08017514 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8017514:	b508      	push	{r3, lr}
 8017516:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017518:	b928      	cbnz	r0, 8017526 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801751a:	4b03      	ldr	r3, [pc, #12]	; (8017528 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801751c:	2123      	movs	r1, #35	; 0x23
 801751e:	4a03      	ldr	r2, [pc, #12]	; (801752c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8017520:	4803      	ldr	r0, [pc, #12]	; (8017530 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8017522:	f00e f97b 	bl	802581c <__assert_func>
 8017526:	bd08      	pop	{r3, pc}
 8017528:	08029a8c 	.word	0x08029a8c
 801752c:	08029b70 	.word	0x08029b70
 8017530:	08029ab3 	.word	0x08029ab3

08017534 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017538:	b089      	sub	sp, #36	; 0x24
 801753a:	4604      	mov	r4, r0
 801753c:	6808      	ldr	r0, [r1, #0]
 801753e:	f04f 0a00 	mov.w	sl, #0
 8017542:	6849      	ldr	r1, [r1, #4]
 8017544:	ab02      	add	r3, sp, #8
 8017546:	f04f 0b01 	mov.w	fp, #1
 801754a:	c303      	stmia	r3!, {r0, r1}
 801754c:	4b3f      	ldr	r3, [pc, #252]	; (801764c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801754e:	4621      	mov	r1, r4
 8017550:	a804      	add	r0, sp, #16
 8017552:	781b      	ldrb	r3, [r3, #0]
 8017554:	2b01      	cmp	r3, #1
 8017556:	6823      	ldr	r3, [r4, #0]
 8017558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801755a:	bf1f      	itttt	ne
 801755c:	f10d 0906 	addne.w	r9, sp, #6
 8017560:	ae03      	addne	r6, sp, #12
 8017562:	f10d 050e 	addne.w	r5, sp, #14
 8017566:	f10d 080a 	addne.w	r8, sp, #10
 801756a:	bf01      	itttt	eq
 801756c:	f10d 090e 	addeq.w	r9, sp, #14
 8017570:	f10d 0606 	addeq.w	r6, sp, #6
 8017574:	ad03      	addeq	r5, sp, #12
 8017576:	f10d 0808 	addeq.w	r8, sp, #8
 801757a:	4798      	blx	r3
 801757c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017580:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017584:	2b00      	cmp	r3, #0
 8017586:	d056      	beq.n	8017636 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8017588:	4293      	cmp	r3, r2
 801758a:	bfa8      	it	ge
 801758c:	4613      	movge	r3, r2
 801758e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017592:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8017596:	2f00      	cmp	r7, #0
 8017598:	dd34      	ble.n	8017604 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801759a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801759e:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80175a2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80175a6:	4484      	add	ip, r0
 80175a8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80175ac:	f9b6 e000 	ldrsh.w	lr, [r6]
 80175b0:	fa0f fc8c 	sxth.w	ip, ip
 80175b4:	f9b9 1000 	ldrsh.w	r1, [r9]
 80175b8:	f8ad 2018 	strh.w	r2, [sp, #24]
 80175bc:	4562      	cmp	r2, ip
 80175be:	f8ad 301a 	strh.w	r3, [sp, #26]
 80175c2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80175c6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80175ca:	da29      	bge.n	8017620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80175cc:	4472      	add	r2, lr
 80175ce:	b212      	sxth	r2, r2
 80175d0:	4290      	cmp	r0, r2
 80175d2:	da25      	bge.n	8017620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80175d4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80175d8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80175dc:	4402      	add	r2, r0
 80175de:	b212      	sxth	r2, r2
 80175e0:	4293      	cmp	r3, r2
 80175e2:	da1d      	bge.n	8017620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80175e4:	440b      	add	r3, r1
 80175e6:	b21b      	sxth	r3, r3
 80175e8:	4298      	cmp	r0, r3
 80175ea:	da19      	bge.n	8017620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80175ec:	6823      	ldr	r3, [r4, #0]
 80175ee:	a906      	add	r1, sp, #24
 80175f0:	4620      	mov	r0, r4
 80175f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80175f4:	4798      	blx	r3
 80175f6:	b998      	cbnz	r0, 8017620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80175f8:	107f      	asrs	r7, r7, #1
 80175fa:	f04f 0a01 	mov.w	sl, #1
 80175fe:	f8ad 7006 	strh.w	r7, [sp, #6]
 8017602:	e7c6      	b.n	8017592 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017604:	d10c      	bne.n	8017620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017606:	f8ad b006 	strh.w	fp, [sp, #6]
 801760a:	f8b8 2000 	ldrh.w	r2, [r8]
 801760e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017612:	440a      	add	r2, r1
 8017614:	f8a8 2000 	strh.w	r2, [r8]
 8017618:	882b      	ldrh	r3, [r5, #0]
 801761a:	1a5b      	subs	r3, r3, r1
 801761c:	802b      	strh	r3, [r5, #0]
 801761e:	e7ad      	b.n	801757c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017620:	f1ba 0f00 	cmp.w	sl, #0
 8017624:	d0f1      	beq.n	801760a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8017626:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801762a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801762e:	429a      	cmp	r2, r3
 8017630:	bf08      	it	eq
 8017632:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017634:	e7e9      	b.n	801760a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8017636:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801763a:	429a      	cmp	r2, r3
 801763c:	bf04      	itt	eq
 801763e:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8017642:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017644:	b009      	add	sp, #36	; 0x24
 8017646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801764a:	bf00      	nop
 801764c:	2000b368 	.word	0x2000b368

08017650 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017650:	2200      	movs	r2, #0
 8017652:	2101      	movs	r1, #1
 8017654:	8082      	strh	r2, [r0, #4]
 8017656:	80c2      	strh	r2, [r0, #6]
 8017658:	8102      	strh	r2, [r0, #8]
 801765a:	8142      	strh	r2, [r0, #10]
 801765c:	8182      	strh	r2, [r0, #12]
 801765e:	81c2      	strh	r2, [r0, #14]
 8017660:	8202      	strh	r2, [r0, #16]
 8017662:	8242      	strh	r2, [r0, #18]
 8017664:	61c2      	str	r2, [r0, #28]
 8017666:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801766a:	6282      	str	r2, [r0, #40]	; 0x28
 801766c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017670:	4905      	ldr	r1, [pc, #20]	; (8017688 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8017672:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017676:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801767a:	6001      	str	r1, [r0, #0]
 801767c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801767e:	22ff      	movs	r2, #255	; 0xff
 8017680:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017684:	4770      	bx	lr
 8017686:	bf00      	nop
 8017688:	08029af8 	.word	0x08029af8

0801768c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801768c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017690:	4770      	bx	lr

08017692 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017692:	b570      	push	{r4, r5, r6, lr}
 8017694:	790b      	ldrb	r3, [r1, #4]
 8017696:	4604      	mov	r4, r0
 8017698:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801769c:	460e      	mov	r6, r1
 801769e:	2b00      	cmp	r3, #0
 80176a0:	bf0c      	ite	eq
 80176a2:	2301      	moveq	r3, #1
 80176a4:	2300      	movne	r3, #0
 80176a6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80176aa:	d110      	bne.n	80176ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80176ac:	b185      	cbz	r5, 80176d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 80176ae:	7933      	ldrb	r3, [r6, #4]
 80176b0:	2b01      	cmp	r3, #1
 80176b2:	d113      	bne.n	80176dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80176b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80176b6:	b188      	cbz	r0, 80176dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80176b8:	6803      	ldr	r3, [r0, #0]
 80176ba:	68db      	ldr	r3, [r3, #12]
 80176bc:	4798      	blx	r3
 80176be:	b168      	cbz	r0, 80176dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80176c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80176c2:	4621      	mov	r1, r4
 80176c4:	6803      	ldr	r3, [r0, #0]
 80176c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176ca:	689b      	ldr	r3, [r3, #8]
 80176cc:	4718      	bx	r3
 80176ce:	b12d      	cbz	r5, 80176dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80176d0:	6823      	ldr	r3, [r4, #0]
 80176d2:	4620      	mov	r0, r4
 80176d4:	695b      	ldr	r3, [r3, #20]
 80176d6:	4798      	blx	r3
 80176d8:	2d00      	cmp	r5, #0
 80176da:	d1e8      	bne.n	80176ae <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80176dc:	bd70      	pop	{r4, r5, r6, pc}

080176de <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80176de:	6803      	ldr	r3, [r0, #0]
 80176e0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80176e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80176e6:	4718      	bx	r3

080176e8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80176e8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80176ec:	2bff      	cmp	r3, #255	; 0xff
 80176ee:	b510      	push	{r4, lr}
 80176f0:	d104      	bne.n	80176fc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80176f2:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 80176f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d105      	bne.n	8017708 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80176fc:	2300      	movs	r3, #0
 80176fe:	8003      	strh	r3, [r0, #0]
 8017700:	8043      	strh	r3, [r0, #2]
 8017702:	8083      	strh	r3, [r0, #4]
 8017704:	80c3      	strh	r3, [r0, #6]
 8017706:	bd10      	pop	{r4, pc}
 8017708:	2300      	movs	r3, #0
 801770a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801770e:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8017712:	8003      	strh	r3, [r0, #0]
 8017714:	8043      	strh	r3, [r0, #2]
 8017716:	8084      	strh	r4, [r0, #4]
 8017718:	80c2      	strh	r2, [r0, #6]
 801771a:	e7f4      	b.n	8017706 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801771c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801771c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017720:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017724:	b087      	sub	sp, #28
 8017726:	4604      	mov	r4, r0
 8017728:	4689      	mov	r9, r1
 801772a:	b363      	cbz	r3, 8017786 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801772c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801772e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017732:	429a      	cmp	r2, r3
 8017734:	d027      	beq.n	8017786 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017736:	ad06      	add	r5, sp, #24
 8017738:	2700      	movs	r7, #0
 801773a:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801773e:	4628      	mov	r0, r5
 8017740:	f004 fa1e 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017744:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017748:	a904      	add	r1, sp, #16
 801774a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801774e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017752:	4620      	mov	r0, r4
 8017754:	6823      	ldr	r3, [r4, #0]
 8017756:	9704      	str	r7, [sp, #16]
 8017758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801775a:	4798      	blx	r3
 801775c:	f7f5 f800 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8017760:	6803      	ldr	r3, [r0, #0]
 8017762:	4606      	mov	r6, r0
 8017764:	4628      	mov	r0, r5
 8017766:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801776a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801776c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017770:	f004 fad4 	bl	801bd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 8017774:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8017778:	4601      	mov	r1, r0
 801777a:	9701      	str	r7, [sp, #4]
 801777c:	aa04      	add	r2, sp, #16
 801777e:	9300      	str	r3, [sp, #0]
 8017780:	4630      	mov	r0, r6
 8017782:	464b      	mov	r3, r9
 8017784:	47c0      	blx	r8
 8017786:	b007      	add	sp, #28
 8017788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801778c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801778c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801778e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017792:	460d      	mov	r5, r1
 8017794:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017798:	2100      	movs	r1, #0
 801779a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801779e:	4604      	mov	r4, r0
 80177a0:	6803      	ldr	r3, [r0, #0]
 80177a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80177a6:	6a1b      	ldr	r3, [r3, #32]
 80177a8:	9100      	str	r1, [sp, #0]
 80177aa:	4669      	mov	r1, sp
 80177ac:	4798      	blx	r3
 80177ae:	4621      	mov	r1, r4
 80177b0:	a802      	add	r0, sp, #8
 80177b2:	f002 fb7e 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177b6:	f7f4 ffd3 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80177ba:	6803      	ldr	r3, [r0, #0]
 80177bc:	aa02      	add	r2, sp, #8
 80177be:	4669      	mov	r1, sp
 80177c0:	695e      	ldr	r6, [r3, #20]
 80177c2:	462b      	mov	r3, r5
 80177c4:	47b0      	blx	r6
 80177c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177ca:	2800      	cmp	r0, #0
 80177cc:	bf08      	it	eq
 80177ce:	461d      	moveq	r5, r3
 80177d0:	84e5      	strh	r5, [r4, #38]	; 0x26
 80177d2:	b004      	add	sp, #16
 80177d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080177d8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80177d8:	2200      	movs	r2, #0
 80177da:	8082      	strh	r2, [r0, #4]
 80177dc:	80c2      	strh	r2, [r0, #6]
 80177de:	8102      	strh	r2, [r0, #8]
 80177e0:	8142      	strh	r2, [r0, #10]
 80177e2:	8182      	strh	r2, [r0, #12]
 80177e4:	81c2      	strh	r2, [r0, #14]
 80177e6:	8202      	strh	r2, [r0, #16]
 80177e8:	8242      	strh	r2, [r0, #18]
 80177ea:	61c2      	str	r2, [r0, #28]
 80177ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80177f0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80177f4:	2201      	movs	r2, #1
 80177f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80177fa:	4a04      	ldr	r2, [pc, #16]	; (801780c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 80177fc:	6002      	str	r2, [r0, #0]
 80177fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017802:	84c2      	strh	r2, [r0, #38]	; 0x26
 8017804:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8017808:	4770      	bx	lr
 801780a:	bf00      	nop
 801780c:	08029c34 	.word	0x08029c34

08017810 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017810:	2200      	movs	r2, #0
 8017812:	8002      	strh	r2, [r0, #0]
 8017814:	8042      	strh	r2, [r0, #2]
 8017816:	8082      	strh	r2, [r0, #4]
 8017818:	80c2      	strh	r2, [r0, #6]
 801781a:	4770      	bx	lr

0801781c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801781c:	b570      	push	{r4, r5, r6, lr}
 801781e:	6803      	ldr	r3, [r0, #0]
 8017820:	4604      	mov	r4, r0
 8017822:	4615      	mov	r5, r2
 8017824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017826:	4798      	blx	r3
 8017828:	6823      	ldr	r3, [r4, #0]
 801782a:	4629      	mov	r1, r5
 801782c:	4620      	mov	r0, r4
 801782e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017834:	4718      	bx	r3
	...

08017838 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017838:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801783a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801783e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017840:	4299      	cmp	r1, r3
 8017842:	d029      	beq.n	8017898 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8017844:	4b15      	ldr	r3, [pc, #84]	; (801789c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	b92b      	cbnz	r3, 8017856 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801784a:	4b15      	ldr	r3, [pc, #84]	; (80178a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801784c:	21b1      	movs	r1, #177	; 0xb1
 801784e:	4a15      	ldr	r2, [pc, #84]	; (80178a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017850:	4815      	ldr	r0, [pc, #84]	; (80178a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017852:	f00d ffe3 	bl	802581c <__assert_func>
 8017856:	4a15      	ldr	r2, [pc, #84]	; (80178ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8017858:	8812      	ldrh	r2, [r2, #0]
 801785a:	428a      	cmp	r2, r1
 801785c:	d803      	bhi.n	8017866 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801785e:	4b14      	ldr	r3, [pc, #80]	; (80178b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8017860:	21b2      	movs	r1, #178	; 0xb2
 8017862:	4a10      	ldr	r2, [pc, #64]	; (80178a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017864:	e7f4      	b.n	8017850 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8017866:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801786a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801786e:	4b11      	ldr	r3, [pc, #68]	; (80178b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8017870:	7854      	ldrb	r4, [r2, #1]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017878:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801787c:	682b      	ldr	r3, [r5, #0]
 801787e:	69de      	ldr	r6, [r3, #28]
 8017880:	4b0d      	ldr	r3, [pc, #52]	; (80178b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8017882:	6818      	ldr	r0, [r3, #0]
 8017884:	f7fb f834 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8017888:	2300      	movs	r3, #0
 801788a:	4602      	mov	r2, r0
 801788c:	4621      	mov	r1, r4
 801788e:	9300      	str	r3, [sp, #0]
 8017890:	4628      	mov	r0, r5
 8017892:	47b0      	blx	r6
 8017894:	b002      	add	sp, #8
 8017896:	bd70      	pop	{r4, r5, r6, pc}
 8017898:	2000      	movs	r0, #0
 801789a:	e7fb      	b.n	8017894 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801789c:	2000b400 	.word	0x2000b400
 80178a0:	08029c9c 	.word	0x08029c9c
 80178a4:	08029dd8 	.word	0x08029dd8
 80178a8:	08029cde 	.word	0x08029cde
 80178ac:	2000b404 	.word	0x2000b404
 80178b0:	08029d07 	.word	0x08029d07
 80178b4:	2000b408 	.word	0x2000b408
 80178b8:	2000b40c 	.word	0x2000b40c

080178bc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80178bc:	b570      	push	{r4, r5, r6, lr}
 80178be:	6803      	ldr	r3, [r0, #0]
 80178c0:	4604      	mov	r4, r0
 80178c2:	b28d      	uxth	r5, r1
 80178c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80178c6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80178c8:	4b10      	ldr	r3, [pc, #64]	; (801790c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	b92b      	cbnz	r3, 80178da <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80178ce:	4b10      	ldr	r3, [pc, #64]	; (8017910 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80178d0:	21b1      	movs	r1, #177	; 0xb1
 80178d2:	4a10      	ldr	r2, [pc, #64]	; (8017914 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80178d4:	4810      	ldr	r0, [pc, #64]	; (8017918 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80178d6:	f00d ffa1 	bl	802581c <__assert_func>
 80178da:	4910      	ldr	r1, [pc, #64]	; (801791c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80178dc:	8809      	ldrh	r1, [r1, #0]
 80178de:	4291      	cmp	r1, r2
 80178e0:	d803      	bhi.n	80178ea <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80178e2:	4b0f      	ldr	r3, [pc, #60]	; (8017920 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80178e4:	21b2      	movs	r1, #178	; 0xb2
 80178e6:	4a0b      	ldr	r2, [pc, #44]	; (8017914 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80178e8:	e7f4      	b.n	80178d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80178ea:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80178ee:	4b0d      	ldr	r3, [pc, #52]	; (8017924 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80178f6:	6803      	ldr	r3, [r0, #0]
 80178f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178fa:	4798      	blx	r3
 80178fc:	1a29      	subs	r1, r5, r0
 80178fe:	4633      	mov	r3, r6
 8017900:	4620      	mov	r0, r4
 8017902:	b209      	sxth	r1, r1
 8017904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017908:	4718      	bx	r3
 801790a:	bf00      	nop
 801790c:	2000b400 	.word	0x2000b400
 8017910:	08029c9c 	.word	0x08029c9c
 8017914:	08029dd8 	.word	0x08029dd8
 8017918:	08029cde 	.word	0x08029cde
 801791c:	2000b404 	.word	0x2000b404
 8017920:	08029d07 	.word	0x08029d07
 8017924:	2000b408 	.word	0x2000b408

08017928 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801792c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017930:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017932:	b08c      	sub	sp, #48	; 0x30
 8017934:	4604      	mov	r4, r0
 8017936:	4293      	cmp	r3, r2
 8017938:	4688      	mov	r8, r1
 801793a:	d05f      	beq.n	80179fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801793c:	4e31      	ldr	r6, [pc, #196]	; (8017a04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801793e:	6832      	ldr	r2, [r6, #0]
 8017940:	b92a      	cbnz	r2, 801794e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8017942:	4b31      	ldr	r3, [pc, #196]	; (8017a08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8017944:	21b1      	movs	r1, #177	; 0xb1
 8017946:	4a31      	ldr	r2, [pc, #196]	; (8017a0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017948:	4831      	ldr	r0, [pc, #196]	; (8017a10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801794a:	f00d ff67 	bl	802581c <__assert_func>
 801794e:	4d31      	ldr	r5, [pc, #196]	; (8017a14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017950:	8829      	ldrh	r1, [r5, #0]
 8017952:	4299      	cmp	r1, r3
 8017954:	d803      	bhi.n	801795e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8017956:	4b30      	ldr	r3, [pc, #192]	; (8017a18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8017958:	21b2      	movs	r1, #178	; 0xb2
 801795a:	4a2c      	ldr	r2, [pc, #176]	; (8017a0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801795c:	e7f4      	b.n	8017948 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801795e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017962:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017966:	4b2d      	ldr	r3, [pc, #180]	; (8017a1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801796e:	2a00      	cmp	r2, #0
 8017970:	d044      	beq.n	80179fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017972:	784b      	ldrb	r3, [r1, #1]
 8017974:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8017978:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801797c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017980:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017984:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017988:	4b25      	ldr	r3, [pc, #148]	; (8017a20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801798a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8017994:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017998:	9207      	str	r2, [sp, #28]
 801799a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801799c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80179a0:	9009      	str	r0, [sp, #36]	; 0x24
 80179a2:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80179a6:	f88d 9020 	strb.w	r9, [sp, #32]
 80179aa:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80179ae:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80179b2:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80179b6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80179ba:	b10a      	cbz	r2, 80179c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80179bc:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80179be:	b907      	cbnz	r7, 80179c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80179c0:	689f      	ldr	r7, [r3, #8]
 80179c2:	f10d 0914 	add.w	r9, sp, #20
 80179c6:	4621      	mov	r1, r4
 80179c8:	4648      	mov	r0, r9
 80179ca:	f002 fa72 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80179ce:	6833      	ldr	r3, [r6, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d0b6      	beq.n	8017942 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80179d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80179d6:	882b      	ldrh	r3, [r5, #0]
 80179d8:	428b      	cmp	r3, r1
 80179da:	d9bc      	bls.n	8017956 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80179dc:	4b11      	ldr	r3, [pc, #68]	; (8017a24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80179de:	6818      	ldr	r0, [r3, #0]
 80179e0:	f7fa ff86 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 80179e4:	2300      	movs	r3, #0
 80179e6:	9001      	str	r0, [sp, #4]
 80179e8:	4638      	mov	r0, r7
 80179ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80179ee:	ab07      	add	r3, sp, #28
 80179f0:	9300      	str	r3, [sp, #0]
 80179f2:	4643      	mov	r3, r8
 80179f4:	e899 0006 	ldmia.w	r9, {r1, r2}
 80179f8:	f7fa ff0b 	bl	8012812 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80179fc:	b00c      	add	sp, #48	; 0x30
 80179fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a02:	bf00      	nop
 8017a04:	2000b400 	.word	0x2000b400
 8017a08:	08029c9c 	.word	0x08029c9c
 8017a0c:	08029dd8 	.word	0x08029dd8
 8017a10:	08029cde 	.word	0x08029cde
 8017a14:	2000b404 	.word	0x2000b404
 8017a18:	08029d07 	.word	0x08029d07
 8017a1c:	2000b408 	.word	0x2000b408
 8017a20:	2000b370 	.word	0x2000b370
 8017a24:	2000b40c 	.word	0x2000b40c

08017a28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017a28:	b40e      	push	{r1, r2, r3}
 8017a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a32:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017a34:	b09b      	sub	sp, #108	; 0x6c
 8017a36:	4604      	mov	r4, r0
 8017a38:	4293      	cmp	r3, r2
 8017a3a:	d061      	beq.n	8017b00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8017a3c:	aa24      	add	r2, sp, #144	; 0x90
 8017a3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017b14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8017a42:	9203      	str	r2, [sp, #12]
 8017a44:	f8da 2000 	ldr.w	r2, [sl]
 8017a48:	b92a      	cbnz	r2, 8017a56 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8017a4a:	4b2e      	ldr	r3, [pc, #184]	; (8017b04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8017a4c:	21b1      	movs	r1, #177	; 0xb1
 8017a4e:	4a2e      	ldr	r2, [pc, #184]	; (8017b08 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017a50:	482e      	ldr	r0, [pc, #184]	; (8017b0c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8017a52:	f00d fee3 	bl	802581c <__assert_func>
 8017a56:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8017b18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8017a5a:	f8b8 1000 	ldrh.w	r1, [r8]
 8017a5e:	4299      	cmp	r1, r3
 8017a60:	d803      	bhi.n	8017a6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8017a62:	4b2b      	ldr	r3, [pc, #172]	; (8017b10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017a64:	21b2      	movs	r1, #178	; 0xb2
 8017a66:	4a28      	ldr	r2, [pc, #160]	; (8017b08 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017a68:	e7f2      	b.n	8017a50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8017a6a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017b1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8017a6e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017a72:	f8d9 3000 	ldr.w	r3, [r9]
 8017a76:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	4638      	mov	r0, r7
 8017a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a80:	4798      	blx	r3
 8017a82:	4606      	mov	r6, r0
 8017a84:	b205      	sxth	r5, r0
 8017a86:	a804      	add	r0, sp, #16
 8017a88:	f002 feb5 	bl	801a7f6 <_ZN8touchgfx12TextProviderC1Ev>
 8017a8c:	683b      	ldr	r3, [r7, #0]
 8017a8e:	4638      	mov	r0, r7
 8017a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a92:	4798      	blx	r3
 8017a94:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017a96:	4603      	mov	r3, r0
 8017a98:	9a03      	ldr	r2, [sp, #12]
 8017a9a:	a804      	add	r0, sp, #16
 8017a9c:	f002 fef0 	bl	801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017aa0:	f8da 3000 	ldr.w	r3, [sl]
 8017aa4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d0ce      	beq.n	8017a4a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017aac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017aae:	f8b8 0000 	ldrh.w	r0, [r8]
 8017ab2:	4290      	cmp	r0, r2
 8017ab4:	d9d5      	bls.n	8017a62 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8017ab6:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8017aba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017abe:	f8d9 3000 	ldr.w	r3, [r9]
 8017ac2:	787a      	ldrb	r2, [r7, #1]
 8017ac4:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8017ac8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017acc:	9700      	str	r7, [sp, #0]
 8017ace:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017ad2:	a804      	add	r0, sp, #16
 8017ad4:	f001 f918 	bl	8018d08 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017ad8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017adc:	b203      	sxth	r3, r0
 8017ade:	18a9      	adds	r1, r5, r2
 8017ae0:	2900      	cmp	r1, #0
 8017ae2:	dd0b      	ble.n	8017afc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017ae4:	3b01      	subs	r3, #1
 8017ae6:	fb13 f302 	smulbb	r3, r3, r2
 8017aea:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017aee:	b21d      	sxth	r5, r3
 8017af0:	4628      	mov	r0, r5
 8017af2:	b01b      	add	sp, #108	; 0x6c
 8017af4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017af8:	b003      	add	sp, #12
 8017afa:	4770      	bx	lr
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	dcf7      	bgt.n	8017af0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017b00:	2500      	movs	r5, #0
 8017b02:	e7f5      	b.n	8017af0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017b04:	08029c9c 	.word	0x08029c9c
 8017b08:	08029dd8 	.word	0x08029dd8
 8017b0c:	08029cde 	.word	0x08029cde
 8017b10:	08029d07 	.word	0x08029d07
 8017b14:	2000b400 	.word	0x2000b400
 8017b18:	2000b404 	.word	0x2000b404
 8017b1c:	2000b408 	.word	0x2000b408

08017b20 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017b20:	b570      	push	{r4, r5, r6, lr}
 8017b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b26:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017b28:	4604      	mov	r4, r0
 8017b2a:	4299      	cmp	r1, r3
 8017b2c:	d01e      	beq.n	8017b6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017b2e:	6803      	ldr	r3, [r0, #0]
 8017b30:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017b32:	4b0f      	ldr	r3, [pc, #60]	; (8017b70 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	b92b      	cbnz	r3, 8017b44 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8017b38:	4b0e      	ldr	r3, [pc, #56]	; (8017b74 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8017b3a:	21b1      	movs	r1, #177	; 0xb1
 8017b3c:	4a0e      	ldr	r2, [pc, #56]	; (8017b78 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017b3e:	480f      	ldr	r0, [pc, #60]	; (8017b7c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017b40:	f00d fe6c 	bl	802581c <__assert_func>
 8017b44:	4b0e      	ldr	r3, [pc, #56]	; (8017b80 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8017b46:	881b      	ldrh	r3, [r3, #0]
 8017b48:	428b      	cmp	r3, r1
 8017b4a:	d803      	bhi.n	8017b54 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017b4c:	4b0d      	ldr	r3, [pc, #52]	; (8017b84 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017b4e:	21b2      	movs	r1, #178	; 0xb2
 8017b50:	4a09      	ldr	r2, [pc, #36]	; (8017b78 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017b52:	e7f4      	b.n	8017b3e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017b54:	4b0c      	ldr	r3, [pc, #48]	; (8017b88 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8017b56:	6818      	ldr	r0, [r3, #0]
 8017b58:	f7fa feca 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	4601      	mov	r1, r0
 8017b60:	46ac      	mov	ip, r5
 8017b62:	4620      	mov	r0, r4
 8017b64:	461a      	mov	r2, r3
 8017b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b6a:	4760      	bx	ip
 8017b6c:	2000      	movs	r0, #0
 8017b6e:	bd70      	pop	{r4, r5, r6, pc}
 8017b70:	2000b400 	.word	0x2000b400
 8017b74:	08029c9c 	.word	0x08029c9c
 8017b78:	08029dd8 	.word	0x08029dd8
 8017b7c:	08029cde 	.word	0x08029cde
 8017b80:	2000b404 	.word	0x2000b404
 8017b84:	08029d07 	.word	0x08029d07
 8017b88:	2000b40c 	.word	0x2000b40c

08017b8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017b8c:	b570      	push	{r4, r5, r6, lr}
 8017b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b92:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017b94:	4604      	mov	r4, r0
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d021      	beq.n	8017bde <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017b9a:	6803      	ldr	r3, [r0, #0]
 8017b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b9e:	4798      	blx	r3
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	4605      	mov	r5, r0
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017ba8:	4798      	blx	r3
 8017baa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017bae:	4606      	mov	r6, r0
 8017bb0:	b22d      	sxth	r5, r5
 8017bb2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017bb6:	6823      	ldr	r3, [r4, #0]
 8017bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bba:	d109      	bne.n	8017bd0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017bbc:	4629      	mov	r1, r5
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	4798      	blx	r3
 8017bc2:	6823      	ldr	r3, [r4, #0]
 8017bc4:	4631      	mov	r1, r6
 8017bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bc8:	4620      	mov	r0, r4
 8017bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bce:	4718      	bx	r3
 8017bd0:	4601      	mov	r1, r0
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	4798      	blx	r3
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	4629      	mov	r1, r5
 8017bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bdc:	e7f4      	b.n	8017bc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8017bde:	bd70      	pop	{r4, r5, r6, pc}

08017be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017be0:	888a      	ldrh	r2, [r1, #4]
 8017be2:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017be4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017be8:	b922      	cbnz	r2, 8017bf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017bea:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017bee:	b90b      	cbnz	r3, 8017bf4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017bf0:	f7ff bfcc 	b.w	8017b8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017bf4:	4770      	bx	lr

08017bf6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	8003      	strh	r3, [r0, #0]
 8017bfa:	8043      	strh	r3, [r0, #2]
 8017bfc:	8083      	strh	r3, [r0, #4]
 8017bfe:	80c3      	strh	r3, [r0, #6]
 8017c00:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017c04:	b91b      	cbnz	r3, 8017c0e <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017c06:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017c0a:	2bff      	cmp	r3, #255	; 0xff
 8017c0c:	d103      	bne.n	8017c16 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017c0e:	890b      	ldrh	r3, [r1, #8]
 8017c10:	8083      	strh	r3, [r0, #4]
 8017c12:	894b      	ldrh	r3, [r1, #10]
 8017c14:	80c3      	strh	r3, [r0, #6]
 8017c16:	4770      	bx	lr

08017c18 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c1a:	4604      	mov	r4, r0
 8017c1c:	466b      	mov	r3, sp
 8017c1e:	6808      	ldr	r0, [r1, #0]
 8017c20:	6849      	ldr	r1, [r1, #4]
 8017c22:	c303      	stmia	r3!, {r0, r1}
 8017c24:	6823      	ldr	r3, [r4, #0]
 8017c26:	4669      	mov	r1, sp
 8017c28:	4620      	mov	r0, r4
 8017c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c2c:	4798      	blx	r3
 8017c2e:	4b08      	ldr	r3, [pc, #32]	; (8017c50 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017c36:	b10a      	cbz	r2, 8017c3c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017c38:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017c3a:	b900      	cbnz	r0, 8017c3e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017c3c:	6898      	ldr	r0, [r3, #8]
 8017c3e:	6803      	ldr	r3, [r0, #0]
 8017c40:	4669      	mov	r1, sp
 8017c42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017c44:	699d      	ldr	r5, [r3, #24]
 8017c46:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017c4a:	47a8      	blx	r5
 8017c4c:	b003      	add	sp, #12
 8017c4e:	bd30      	pop	{r4, r5, pc}
 8017c50:	2000b370 	.word	0x2000b370

08017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	880b      	ldrh	r3, [r1, #0]
 8017c58:	4605      	mov	r5, r0
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017c5e:	8813      	ldrh	r3, [r2, #0]
 8017c60:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017c64:	4628      	mov	r0, r5
 8017c66:	f003 ff8b 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c6a:	8120      	strh	r0, [r4, #8]
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	f003 ffc1 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c72:	8160      	strh	r0, [r4, #10]
 8017c74:	bd38      	pop	{r3, r4, r5, pc}

08017c76 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017c76:	b510      	push	{r4, lr}
 8017c78:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	2bff      	cmp	r3, #255	; 0xff
 8017c80:	d006      	beq.n	8017c90 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8017c82:	2300      	movs	r3, #0
 8017c84:	8003      	strh	r3, [r0, #0]
 8017c86:	8043      	strh	r3, [r0, #2]
 8017c88:	8083      	strh	r3, [r0, #4]
 8017c8a:	80c3      	strh	r3, [r0, #6]
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	bd10      	pop	{r4, pc}
 8017c90:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017c94:	b11b      	cbz	r3, 8017c9e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017c96:	3130      	adds	r1, #48	; 0x30
 8017c98:	f003 ffe6 	bl	801bc68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017c9c:	e7f6      	b.n	8017c8c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017c9e:	312e      	adds	r1, #46	; 0x2e
 8017ca0:	e7fa      	b.n	8017c98 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08017ca4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8017ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017cac:	b08a      	sub	sp, #40	; 0x28
 8017cae:	4604      	mov	r4, r0
 8017cb0:	4688      	mov	r8, r1
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d044      	beq.n	8017d40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8017cb6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017cb8:	a805      	add	r0, sp, #20
 8017cba:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cbe:	f003 ff5f 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017cc2:	4605      	mov	r5, r0
 8017cc4:	b206      	sxth	r6, r0
 8017cc6:	a805      	add	r0, sp, #20
 8017cc8:	f003 ff94 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ccc:	f9b8 2000 	ldrsh.w	r2, [r8]
 8017cd0:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	fa0f fc80 	sxth.w	ip, r0
 8017cda:	4417      	add	r7, r2
 8017cdc:	9306      	str	r3, [sp, #24]
 8017cde:	b2bf      	uxth	r7, r7
 8017ce0:	fa0f fe87 	sxth.w	lr, r7
 8017ce4:	459e      	cmp	lr, r3
 8017ce6:	dd2d      	ble.n	8017d44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017ce8:	4296      	cmp	r6, r2
 8017cea:	dd2b      	ble.n	8017d44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017cec:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8017cf0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8017cf4:	4419      	add	r1, r3
 8017cf6:	b289      	uxth	r1, r1
 8017cf8:	fa0f f881 	sxth.w	r8, r1
 8017cfc:	f1b8 0f00 	cmp.w	r8, #0
 8017d00:	dd20      	ble.n	8017d44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017d02:	459c      	cmp	ip, r3
 8017d04:	dd1e      	ble.n	8017d44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8017d06:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017d0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d0e:	4576      	cmp	r6, lr
 8017d10:	bfa8      	it	ge
 8017d12:	463d      	movge	r5, r7
 8017d14:	45c4      	cmp	ip, r8
 8017d16:	bfa8      	it	ge
 8017d18:	4608      	movge	r0, r1
 8017d1a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017d1e:	1aad      	subs	r5, r5, r2
 8017d20:	1ac0      	subs	r0, r0, r3
 8017d22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017d26:	f8ad 501c 	strh.w	r5, [sp, #28]
 8017d2a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017d2e:	4b1f      	ldr	r3, [pc, #124]	; (8017dac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	b953      	cbnz	r3, 8017d4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8017d34:	4b1e      	ldr	r3, [pc, #120]	; (8017db0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8017d36:	2189      	movs	r1, #137	; 0x89
 8017d38:	4a1e      	ldr	r2, [pc, #120]	; (8017db4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8017d3a:	481f      	ldr	r0, [pc, #124]	; (8017db8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8017d3c:	f00d fd6e 	bl	802581c <__assert_func>
 8017d40:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8017d42:	e7b9      	b.n	8017cb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8017d44:	2300      	movs	r3, #0
 8017d46:	9307      	str	r3, [sp, #28]
 8017d48:	e7f1      	b.n	8017d2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8017d4a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d52:	429a      	cmp	r2, r3
 8017d54:	d026      	beq.n	8017da4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017d56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	dd22      	ble.n	8017da4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017d5e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	dd1e      	ble.n	8017da4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8017d66:	2300      	movs	r3, #0
 8017d68:	a908      	add	r1, sp, #32
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017d70:	6823      	ldr	r3, [r4, #0]
 8017d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d74:	4798      	blx	r3
 8017d76:	4b11      	ldr	r3, [pc, #68]	; (8017dbc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017d7e:	b10a      	cbz	r2, 8017d84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8017d80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017d82:	b900      	cbnz	r0, 8017d86 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8017d84:	6898      	ldr	r0, [r3, #8]
 8017d86:	2501      	movs	r5, #1
 8017d88:	6801      	ldr	r1, [r0, #0]
 8017d8a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017d8e:	9502      	str	r5, [sp, #8]
 8017d90:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8017d94:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017d98:	9401      	str	r4, [sp, #4]
 8017d9a:	ac06      	add	r4, sp, #24
 8017d9c:	9400      	str	r4, [sp, #0]
 8017d9e:	688c      	ldr	r4, [r1, #8]
 8017da0:	a905      	add	r1, sp, #20
 8017da2:	47a0      	blx	r4
 8017da4:	b00a      	add	sp, #40	; 0x28
 8017da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017daa:	bf00      	nop
 8017dac:	2000b438 	.word	0x2000b438
 8017db0:	08029e70 	.word	0x08029e70
 8017db4:	08029f44 	.word	0x08029f44
 8017db8:	08029eac 	.word	0x08029eac
 8017dbc:	2000b370 	.word	0x2000b370

08017dc0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017dc6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017dc8:	4606      	mov	r6, r0
 8017dca:	4299      	cmp	r1, r3
 8017dcc:	d02a      	beq.n	8017e24 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8017dce:	4b16      	ldr	r3, [pc, #88]	; (8017e28 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	b92b      	cbnz	r3, 8017de0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8017dd4:	4b15      	ldr	r3, [pc, #84]	; (8017e2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8017dd6:	21b1      	movs	r1, #177	; 0xb1
 8017dd8:	4a15      	ldr	r2, [pc, #84]	; (8017e30 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017dda:	4816      	ldr	r0, [pc, #88]	; (8017e34 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017ddc:	f00d fd1e 	bl	802581c <__assert_func>
 8017de0:	4a15      	ldr	r2, [pc, #84]	; (8017e38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8017de2:	8812      	ldrh	r2, [r2, #0]
 8017de4:	428a      	cmp	r2, r1
 8017de6:	d803      	bhi.n	8017df0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8017de8:	4b14      	ldr	r3, [pc, #80]	; (8017e3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8017dea:	21b2      	movs	r1, #178	; 0xb2
 8017dec:	4a10      	ldr	r2, [pc, #64]	; (8017e30 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017dee:	e7f4      	b.n	8017dda <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8017df0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017df4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017df8:	4b11      	ldr	r3, [pc, #68]	; (8017e40 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8017dfa:	7854      	ldrb	r4, [r2, #1]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017e02:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017e06:	682b      	ldr	r3, [r5, #0]
 8017e08:	69df      	ldr	r7, [r3, #28]
 8017e0a:	4b0e      	ldr	r3, [pc, #56]	; (8017e44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8017e0c:	6818      	ldr	r0, [r3, #0]
 8017e0e:	f7fa fd6f 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8017e12:	2300      	movs	r3, #0
 8017e14:	4602      	mov	r2, r0
 8017e16:	4621      	mov	r1, r4
 8017e18:	9300      	str	r3, [sp, #0]
 8017e1a:	4628      	mov	r0, r5
 8017e1c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8017e1e:	47b8      	blx	r7
 8017e20:	b003      	add	sp, #12
 8017e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e24:	2000      	movs	r0, #0
 8017e26:	e7fb      	b.n	8017e20 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8017e28:	2000b400 	.word	0x2000b400
 8017e2c:	08029c9c 	.word	0x08029c9c
 8017e30:	08029ff4 	.word	0x08029ff4
 8017e34:	08029cde 	.word	0x08029cde
 8017e38:	2000b404 	.word	0x2000b404
 8017e3c:	08029d07 	.word	0x08029d07
 8017e40:	2000b408 	.word	0x2000b408
 8017e44:	2000b40c 	.word	0x2000b40c

08017e48 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017e48:	b570      	push	{r4, r5, r6, lr}
 8017e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e4e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017e50:	4604      	mov	r4, r0
 8017e52:	4299      	cmp	r1, r3
 8017e54:	d01e      	beq.n	8017e94 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8017e56:	6803      	ldr	r3, [r0, #0]
 8017e58:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017e5a:	4b0f      	ldr	r3, [pc, #60]	; (8017e98 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	b92b      	cbnz	r3, 8017e6c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017e60:	4b0e      	ldr	r3, [pc, #56]	; (8017e9c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8017e62:	21b1      	movs	r1, #177	; 0xb1
 8017e64:	4a0e      	ldr	r2, [pc, #56]	; (8017ea0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017e66:	480f      	ldr	r0, [pc, #60]	; (8017ea4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017e68:	f00d fcd8 	bl	802581c <__assert_func>
 8017e6c:	4b0e      	ldr	r3, [pc, #56]	; (8017ea8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017e6e:	881b      	ldrh	r3, [r3, #0]
 8017e70:	428b      	cmp	r3, r1
 8017e72:	d803      	bhi.n	8017e7c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8017e74:	4b0d      	ldr	r3, [pc, #52]	; (8017eac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8017e76:	21b2      	movs	r1, #178	; 0xb2
 8017e78:	4a09      	ldr	r2, [pc, #36]	; (8017ea0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017e7a:	e7f4      	b.n	8017e66 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017e7c:	4b0c      	ldr	r3, [pc, #48]	; (8017eb0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017e7e:	6818      	ldr	r0, [r3, #0]
 8017e80:	f7fa fd36 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8017e84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017e86:	4601      	mov	r1, r0
 8017e88:	46ac      	mov	ip, r5
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e92:	4760      	bx	ip
 8017e94:	2000      	movs	r0, #0
 8017e96:	bd70      	pop	{r4, r5, r6, pc}
 8017e98:	2000b400 	.word	0x2000b400
 8017e9c:	08029c9c 	.word	0x08029c9c
 8017ea0:	08029ff4 	.word	0x08029ff4
 8017ea4:	08029cde 	.word	0x08029cde
 8017ea8:	2000b404 	.word	0x2000b404
 8017eac:	08029d07 	.word	0x08029d07
 8017eb0:	2000b40c 	.word	0x2000b40c

08017eb4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ebc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017ebe:	b08c      	sub	sp, #48	; 0x30
 8017ec0:	4604      	mov	r4, r0
 8017ec2:	4293      	cmp	r3, r2
 8017ec4:	460e      	mov	r6, r1
 8017ec6:	d05d      	beq.n	8017f84 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017ec8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017fa8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017ecc:	f8d8 2000 	ldr.w	r2, [r8]
 8017ed0:	b92a      	cbnz	r2, 8017ede <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8017ed2:	4b2e      	ldr	r3, [pc, #184]	; (8017f8c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8017ed4:	21b1      	movs	r1, #177	; 0xb1
 8017ed6:	4a2e      	ldr	r2, [pc, #184]	; (8017f90 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017ed8:	482e      	ldr	r0, [pc, #184]	; (8017f94 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8017eda:	f00d fc9f 	bl	802581c <__assert_func>
 8017ede:	4f2e      	ldr	r7, [pc, #184]	; (8017f98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8017ee0:	8839      	ldrh	r1, [r7, #0]
 8017ee2:	4299      	cmp	r1, r3
 8017ee4:	d803      	bhi.n	8017eee <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8017ee6:	4b2d      	ldr	r3, [pc, #180]	; (8017f9c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8017ee8:	21b2      	movs	r1, #178	; 0xb2
 8017eea:	4a29      	ldr	r2, [pc, #164]	; (8017f90 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017eec:	e7f4      	b.n	8017ed8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8017eee:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017ef2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017ef6:	4b2a      	ldr	r3, [pc, #168]	; (8017fa0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017efe:	2a00      	cmp	r2, #0
 8017f00:	d040      	beq.n	8017f84 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017f02:	784b      	ldrb	r3, [r1, #1]
 8017f04:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8017f08:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017f0c:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017f10:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017f14:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017f18:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017f1c:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8017f20:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017f24:	ad05      	add	r5, sp, #20
 8017f26:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017f28:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017f2c:	9207      	str	r2, [sp, #28]
 8017f2e:	f88d 9020 	strb.w	r9, [sp, #32]
 8017f32:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017f36:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017f3a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017f3e:	9009      	str	r0, [sp, #36]	; 0x24
 8017f40:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8017f44:	f7f4 fc0c 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 8017f48:	4621      	mov	r1, r4
 8017f4a:	4681      	mov	r9, r0
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	f001 ffb0 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017f52:	f8d8 3000 	ldr.w	r3, [r8]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d0bb      	beq.n	8017ed2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017f5a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017f5c:	883b      	ldrh	r3, [r7, #0]
 8017f5e:	428b      	cmp	r3, r1
 8017f60:	d9c1      	bls.n	8017ee6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8017f62:	4b10      	ldr	r3, [pc, #64]	; (8017fa4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8017f64:	6818      	ldr	r0, [r3, #0]
 8017f66:	f7fa fcc3 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	9303      	str	r3, [sp, #12]
 8017f6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017f70:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017f74:	ab07      	add	r3, sp, #28
 8017f76:	4648      	mov	r0, r9
 8017f78:	9300      	str	r3, [sp, #0]
 8017f7a:	4633      	mov	r3, r6
 8017f7c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017f80:	f7fa fc47 	bl	8012812 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017f84:	b00c      	add	sp, #48	; 0x30
 8017f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f8a:	bf00      	nop
 8017f8c:	08029c9c 	.word	0x08029c9c
 8017f90:	08029ff4 	.word	0x08029ff4
 8017f94:	08029cde 	.word	0x08029cde
 8017f98:	2000b404 	.word	0x2000b404
 8017f9c:	08029d07 	.word	0x08029d07
 8017fa0:	2000b408 	.word	0x2000b408
 8017fa4:	2000b40c 	.word	0x2000b40c
 8017fa8:	2000b400 	.word	0x2000b400

08017fac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8017fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb0:	461c      	mov	r4, r3
 8017fb2:	4606      	mov	r6, r0
 8017fb4:	9f06      	ldr	r7, [sp, #24]
 8017fb6:	f7ff fe4d 	bl	8017c54 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8017fba:	8823      	ldrh	r3, [r4, #0]
 8017fbc:	f04f 0802 	mov.w	r8, #2
 8017fc0:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8017fc4:	4638      	mov	r0, r7
 8017fc6:	86b3      	strh	r3, [r6, #52]	; 0x34
 8017fc8:	883b      	ldrh	r3, [r7, #0]
 8017fca:	fb95 f5f8 	sdiv	r5, r5, r8
 8017fce:	86f3      	strh	r3, [r6, #54]	; 0x36
 8017fd0:	b2ad      	uxth	r5, r5
 8017fd2:	f003 fdd5 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017fd6:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8017fda:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8017fde:	fb94 f4f8 	sdiv	r4, r4, r8
 8017fe2:	b2a4      	uxth	r4, r4
 8017fe4:	8730      	strh	r0, [r6, #56]	; 0x38
 8017fe6:	4638      	mov	r0, r7
 8017fe8:	f003 fe04 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017fec:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8017ff0:	8770      	strh	r0, [r6, #58]	; 0x3a
 8017ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017ff8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8017ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ffc:	4604      	mov	r4, r0
 8017ffe:	b08c      	sub	sp, #48	; 0x30
 8018000:	460d      	mov	r5, r1
 8018002:	f7ff fe4f 	bl	8017ca4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8018006:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801800a:	b33b      	cbz	r3, 801805c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 801800c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801800e:	a805      	add	r0, sp, #20
 8018010:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018014:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8018018:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 801801c:	f003 fdb0 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018020:	4606      	mov	r6, r0
 8018022:	a805      	add	r0, sp, #20
 8018024:	f003 fde6 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018028:	6869      	ldr	r1, [r5, #4]
 801802a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801802e:	ab08      	add	r3, sp, #32
 8018030:	6828      	ldr	r0, [r5, #0]
 8018032:	ad08      	add	r5, sp, #32
 8018034:	f8ad 8018 	strh.w	r8, [sp, #24]
 8018038:	f8ad 701a 	strh.w	r7, [sp, #26]
 801803c:	f8ad 601c 	strh.w	r6, [sp, #28]
 8018040:	c303      	stmia	r3!, {r0, r1}
 8018042:	a906      	add	r1, sp, #24
 8018044:	4628      	mov	r0, r5
 8018046:	f7fd fd7b 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 801804a:	4b25      	ldr	r3, [pc, #148]	; (80180e0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	b93b      	cbnz	r3, 8018060 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8018050:	4b24      	ldr	r3, [pc, #144]	; (80180e4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 8018052:	2189      	movs	r1, #137	; 0x89
 8018054:	4a24      	ldr	r2, [pc, #144]	; (80180e8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 8018056:	4825      	ldr	r0, [pc, #148]	; (80180ec <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8018058:	f00d fbe0 	bl	802581c <__assert_func>
 801805c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801805e:	e7d6      	b.n	801800e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8018060:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018068:	429a      	cmp	r2, r3
 801806a:	d035      	beq.n	80180d8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801806c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8018070:	2b00      	cmp	r3, #0
 8018072:	dd31      	ble.n	80180d8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8018074:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8018078:	2b00      	cmp	r3, #0
 801807a:	dd2d      	ble.n	80180d8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801807c:	2300      	movs	r3, #0
 801807e:	a90a      	add	r1, sp, #40	; 0x28
 8018080:	4620      	mov	r0, r4
 8018082:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8018086:	6823      	ldr	r3, [r4, #0]
 8018088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801808a:	4798      	blx	r3
 801808c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018090:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8018092:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018096:	1a9b      	subs	r3, r3, r2
 8018098:	f8ad 3020 	strh.w	r3, [sp, #32]
 801809c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801809e:	1ac9      	subs	r1, r1, r3
 80180a0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80180a4:	4912      	ldr	r1, [pc, #72]	; (80180f0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 80180a6:	6809      	ldr	r1, [r1, #0]
 80180a8:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 80180ac:	b108      	cbz	r0, 80180b2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 80180ae:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80180b0:	b900      	cbnz	r0, 80180b4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 80180b2:	6888      	ldr	r0, [r1, #8]
 80180b4:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80180b8:	2601      	movs	r6, #1
 80180ba:	440b      	add	r3, r1
 80180bc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80180c0:	440a      	add	r2, r1
 80180c2:	6801      	ldr	r1, [r0, #0]
 80180c4:	9602      	str	r6, [sp, #8]
 80180c6:	b21b      	sxth	r3, r3
 80180c8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80180cc:	b212      	sxth	r2, r2
 80180ce:	e9cd 5400 	strd	r5, r4, [sp]
 80180d2:	688c      	ldr	r4, [r1, #8]
 80180d4:	a905      	add	r1, sp, #20
 80180d6:	47a0      	blx	r4
 80180d8:	b00c      	add	sp, #48	; 0x30
 80180da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180de:	bf00      	nop
 80180e0:	2000b438 	.word	0x2000b438
 80180e4:	08029e70 	.word	0x08029e70
 80180e8:	0802a098 	.word	0x0802a098
 80180ec:	08029eac 	.word	0x08029eac
 80180f0:	2000b370 	.word	0x2000b370

080180f4 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 80180f4:	2101      	movs	r1, #1
 80180f6:	2200      	movs	r2, #0
 80180f8:	b510      	push	{r4, lr}
 80180fa:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80180fe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8018102:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018106:	4c0c      	ldr	r4, [pc, #48]	; (8018138 <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 8018108:	8082      	strh	r2, [r0, #4]
 801810a:	80c2      	strh	r2, [r0, #6]
 801810c:	8102      	strh	r2, [r0, #8]
 801810e:	8142      	strh	r2, [r0, #10]
 8018110:	8182      	strh	r2, [r0, #12]
 8018112:	81c2      	strh	r2, [r0, #14]
 8018114:	8202      	strh	r2, [r0, #16]
 8018116:	8242      	strh	r2, [r0, #18]
 8018118:	61c2      	str	r2, [r0, #28]
 801811a:	6282      	str	r2, [r0, #40]	; 0x28
 801811c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8018120:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8018122:	8601      	strh	r1, [r0, #48]	; 0x30
 8018124:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8018128:	6004      	str	r4, [r0, #0]
 801812a:	8681      	strh	r1, [r0, #52]	; 0x34
 801812c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801812e:	8702      	strh	r2, [r0, #56]	; 0x38
 8018130:	8742      	strh	r2, [r0, #58]	; 0x3a
 8018132:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018136:	bd10      	pop	{r4, pc}
 8018138:	0802a02c 	.word	0x0802a02c

0801813c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801813c:	b570      	push	{r4, r5, r6, lr}
 801813e:	4605      	mov	r5, r0
 8018140:	880b      	ldrh	r3, [r1, #0]
 8018142:	4604      	mov	r4, r0
 8018144:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018146:	f855 3b26 	ldr.w	r3, [r5], #38
 801814a:	4628      	mov	r0, r5
 801814c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801814e:	f003 fd17 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018152:	b201      	sxth	r1, r0
 8018154:	4620      	mov	r0, r4
 8018156:	47b0      	blx	r6
 8018158:	6823      	ldr	r3, [r4, #0]
 801815a:	4628      	mov	r0, r5
 801815c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801815e:	f003 fd49 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018162:	b201      	sxth	r1, r0
 8018164:	4620      	mov	r0, r4
 8018166:	4633      	mov	r3, r6
 8018168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801816c:	4718      	bx	r3

0801816e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801816e:	b510      	push	{r4, lr}
 8018170:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018174:	4604      	mov	r4, r0
 8018176:	2bff      	cmp	r3, #255	; 0xff
 8018178:	d006      	beq.n	8018188 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801817a:	2300      	movs	r3, #0
 801817c:	8003      	strh	r3, [r0, #0]
 801817e:	8043      	strh	r3, [r0, #2]
 8018180:	8083      	strh	r3, [r0, #4]
 8018182:	80c3      	strh	r3, [r0, #6]
 8018184:	4620      	mov	r0, r4
 8018186:	bd10      	pop	{r4, pc}
 8018188:	3126      	adds	r1, #38	; 0x26
 801818a:	f003 fd6d 	bl	801bc68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801818e:	e7f9      	b.n	8018184 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018190 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018194:	4604      	mov	r4, r0
 8018196:	b088      	sub	sp, #32
 8018198:	2500      	movs	r5, #0
 801819a:	460f      	mov	r7, r1
 801819c:	f854 3b26 	ldr.w	r3, [r4], #38
 80181a0:	a904      	add	r1, sp, #16
 80181a2:	4606      	mov	r6, r0
 80181a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80181aa:	4798      	blx	r3
 80181ac:	4620      	mov	r0, r4
 80181ae:	f003 fce7 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80181b2:	4680      	mov	r8, r0
 80181b4:	4620      	mov	r0, r4
 80181b6:	f003 fd1d 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80181ba:	9506      	str	r5, [sp, #24]
 80181bc:	ad06      	add	r5, sp, #24
 80181be:	f8ad 001e 	strh.w	r0, [sp, #30]
 80181c2:	4639      	mov	r1, r7
 80181c4:	f8ad 801c 	strh.w	r8, [sp, #28]
 80181c8:	4628      	mov	r0, r5
 80181ca:	f7fd fcb9 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 80181ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	dd19      	ble.n	801820a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80181d6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	dd15      	ble.n	801820a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80181de:	4b0c      	ldr	r3, [pc, #48]	; (8018210 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80181e6:	b10a      	cbz	r2, 80181ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80181e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80181ea:	b900      	cbnz	r0, 80181ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80181ec:	6898      	ldr	r0, [r3, #8]
 80181ee:	2701      	movs	r7, #1
 80181f0:	6801      	ldr	r1, [r0, #0]
 80181f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80181f6:	9702      	str	r7, [sp, #8]
 80181f8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80181fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018200:	e9cd 5600 	strd	r5, r6, [sp]
 8018204:	688d      	ldr	r5, [r1, #8]
 8018206:	4621      	mov	r1, r4
 8018208:	47a8      	blx	r5
 801820a:	b008      	add	sp, #32
 801820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018210:	2000b370 	.word	0x2000b370

08018214 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8018214:	b510      	push	{r4, lr}
 8018216:	4604      	mov	r4, r0
 8018218:	f7ff fd2d 	bl	8017c76 <_ZNK8touchgfx6Button12getSolidRectEv>
 801821c:	4620      	mov	r0, r4
 801821e:	bd10      	pop	{r4, pc}

08018220 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8018220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018224:	4604      	mov	r4, r0
 8018226:	b08c      	sub	sp, #48	; 0x30
 8018228:	4688      	mov	r8, r1
 801822a:	f7ff fd3b 	bl	8017ca4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801822e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018234:	4293      	cmp	r3, r2
 8018236:	f000 809a 	beq.w	801836e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801823a:	4e55      	ldr	r6, [pc, #340]	; (8018390 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801823c:	6832      	ldr	r2, [r6, #0]
 801823e:	b92a      	cbnz	r2, 801824c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8018240:	4b54      	ldr	r3, [pc, #336]	; (8018394 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8018242:	21b1      	movs	r1, #177	; 0xb1
 8018244:	4a54      	ldr	r2, [pc, #336]	; (8018398 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8018246:	4855      	ldr	r0, [pc, #340]	; (801839c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8018248:	f00d fae8 	bl	802581c <__assert_func>
 801824c:	4d54      	ldr	r5, [pc, #336]	; (80183a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801824e:	8829      	ldrh	r1, [r5, #0]
 8018250:	4299      	cmp	r1, r3
 8018252:	d803      	bhi.n	801825c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8018254:	4b53      	ldr	r3, [pc, #332]	; (80183a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 8018256:	21b2      	movs	r1, #178	; 0xb2
 8018258:	4a4f      	ldr	r2, [pc, #316]	; (8018398 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801825a:	e7f4      	b.n	8018246 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 801825c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018260:	f04f 0c02 	mov.w	ip, #2
 8018264:	4b50      	ldr	r3, [pc, #320]	; (80183a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 8018266:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018270:	f1be 0f01 	cmp.w	lr, #1
 8018274:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8018278:	f04f 0300 	mov.w	r3, #0
 801827c:	b208      	sxth	r0, r1
 801827e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8018282:	9303      	str	r3, [sp, #12]
 8018284:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8018288:	d074      	beq.n	8018374 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801828a:	f1be 0f03 	cmp.w	lr, #3
 801828e:	d071      	beq.n	8018374 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8018290:	1a52      	subs	r2, r2, r1
 8018292:	f8ad 3010 	strh.w	r3, [sp, #16]
 8018296:	f8ad 0012 	strh.w	r0, [sp, #18]
 801829a:	fb92 f2fc 	sdiv	r2, r2, ip
 801829e:	f8ad 200e 	strh.w	r2, [sp, #14]
 80182a2:	f10d 090c 	add.w	r9, sp, #12
 80182a6:	f10d 0a14 	add.w	sl, sp, #20
 80182aa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80182ae:	e88a 0003 	stmia.w	sl, {r0, r1}
 80182b2:	4641      	mov	r1, r8
 80182b4:	4650      	mov	r0, sl
 80182b6:	f7fd fc43 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 80182ba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	dd55      	ble.n	801836e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80182c2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	dd51      	ble.n	801836e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80182ca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80182ce:	4649      	mov	r1, r9
 80182d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80182d4:	4620      	mov	r0, r4
 80182d6:	1a9b      	subs	r3, r3, r2
 80182d8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80182dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80182e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80182e4:	1a9b      	subs	r3, r3, r2
 80182e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182ea:	6823      	ldr	r3, [r4, #0]
 80182ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ee:	4798      	blx	r3
 80182f0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d047      	beq.n	8018388 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 80182f8:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80182fc:	6833      	ldr	r3, [r6, #0]
 80182fe:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 8018302:	2b00      	cmp	r3, #0
 8018304:	d09c      	beq.n	8018240 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 8018306:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8018308:	8828      	ldrh	r0, [r5, #0]
 801830a:	4288      	cmp	r0, r1
 801830c:	d9a2      	bls.n	8018254 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801830e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018312:	6812      	ldr	r2, [r2, #0]
 8018314:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8018318:	785b      	ldrb	r3, [r3, #1]
 801831a:	9209      	str	r2, [sp, #36]	; 0x24
 801831c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8018320:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018324:	9707      	str	r7, [sp, #28]
 8018326:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801832a:	2300      	movs	r3, #0
 801832c:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8018330:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8018334:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018338:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801833c:	4b1b      	ldr	r3, [pc, #108]	; (80183ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801833e:	f88d 5020 	strb.w	r5, [sp, #32]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018348:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801834c:	b10a      	cbz	r2, 8018352 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801834e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018350:	b904      	cbnz	r4, 8018354 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 8018352:	689c      	ldr	r4, [r3, #8]
 8018354:	4b16      	ldr	r3, [pc, #88]	; (80183b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 8018356:	6818      	ldr	r0, [r3, #0]
 8018358:	f7fa faca 	bl	80128f0 <_ZNK8touchgfx5Texts7getTextEt>
 801835c:	ab07      	add	r3, sp, #28
 801835e:	9001      	str	r0, [sp, #4]
 8018360:	4620      	mov	r0, r4
 8018362:	9300      	str	r3, [sp, #0]
 8018364:	4653      	mov	r3, sl
 8018366:	e899 0006 	ldmia.w	r9, {r1, r2}
 801836a:	f7fa fa52 	bl	8012812 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801836e:	b00c      	add	sp, #48	; 0x30
 8018370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018374:	1a5b      	subs	r3, r3, r1
 8018376:	f8ad 0010 	strh.w	r0, [sp, #16]
 801837a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801837e:	fb93 f3fc 	sdiv	r3, r3, ip
 8018382:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018386:	e78c      	b.n	80182a2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 8018388:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801838c:	e7b6      	b.n	80182fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801838e:	bf00      	nop
 8018390:	2000b400 	.word	0x2000b400
 8018394:	08029c9c 	.word	0x08029c9c
 8018398:	0802a1a8 	.word	0x0802a1a8
 801839c:	08029cde 	.word	0x08029cde
 80183a0:	2000b404 	.word	0x2000b404
 80183a4:	08029d07 	.word	0x08029d07
 80183a8:	2000b408 	.word	0x2000b408
 80183ac:	2000b370 	.word	0x2000b370
 80183b0:	2000b40c 	.word	0x2000b40c

080183b4 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80183b4:	2101      	movs	r1, #1
 80183b6:	2200      	movs	r2, #0
 80183b8:	b510      	push	{r4, lr}
 80183ba:	4c12      	ldr	r4, [pc, #72]	; (8018404 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 80183bc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80183c0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80183c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80183c8:	6004      	str	r4, [r0, #0]
 80183ca:	4c0f      	ldr	r4, [pc, #60]	; (8018408 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80183cc:	8082      	strh	r2, [r0, #4]
 80183ce:	80c2      	strh	r2, [r0, #6]
 80183d0:	8102      	strh	r2, [r0, #8]
 80183d2:	8142      	strh	r2, [r0, #10]
 80183d4:	8182      	strh	r2, [r0, #12]
 80183d6:	81c2      	strh	r2, [r0, #14]
 80183d8:	8202      	strh	r2, [r0, #16]
 80183da:	8242      	strh	r2, [r0, #18]
 80183dc:	61c2      	str	r2, [r0, #28]
 80183de:	6282      	str	r2, [r0, #40]	; 0x28
 80183e0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80183e4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80183e6:	8601      	strh	r1, [r0, #48]	; 0x30
 80183e8:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80183ec:	6344      	str	r4, [r0, #52]	; 0x34
 80183ee:	8701      	strh	r1, [r0, #56]	; 0x38
 80183f0:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80183f4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 80183f8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80183fc:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8018400:	bd10      	pop	{r4, pc}
 8018402:	bf00      	nop
 8018404:	0802a140 	.word	0x0802a140
 8018408:	080273e0 	.word	0x080273e0

0801840c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801840c:	4b02      	ldr	r3, [pc, #8]	; (8018418 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801840e:	6018      	str	r0, [r3, #0]
 8018410:	4b02      	ldr	r3, [pc, #8]	; (801841c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8018412:	6019      	str	r1, [r3, #0]
 8018414:	4770      	bx	lr
 8018416:	bf00      	nop
 8018418:	2000b378 	.word	0x2000b378
 801841c:	2000b38c 	.word	0x2000b38c

08018420 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8018420:	b538      	push	{r3, r4, r5, lr}
 8018422:	4c2b      	ldr	r4, [pc, #172]	; (80184d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8018424:	4b2b      	ldr	r3, [pc, #172]	; (80184d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8018426:	6821      	ldr	r1, [r4, #0]
 8018428:	681a      	ldr	r2, [r3, #0]
 801842a:	4281      	cmp	r1, r0
 801842c:	4d2a      	ldr	r5, [pc, #168]	; (80184d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801842e:	492b      	ldr	r1, [pc, #172]	; (80184dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8018430:	d108      	bne.n	8018444 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8018432:	682b      	ldr	r3, [r5, #0]
 8018434:	4293      	cmp	r3, r2
 8018436:	d105      	bne.n	8018444 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8018438:	6808      	ldr	r0, [r1, #0]
 801843a:	280f      	cmp	r0, #15
 801843c:	bf94      	ite	ls
 801843e:	2000      	movls	r0, #0
 8018440:	2001      	movhi	r0, #1
 8018442:	bd38      	pop	{r3, r4, r5, pc}
 8018444:	4b26      	ldr	r3, [pc, #152]	; (80184e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8018446:	6020      	str	r0, [r4, #0]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	602a      	str	r2, [r5, #0]
 801844c:	4298      	cmp	r0, r3
 801844e:	d905      	bls.n	801845c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8018450:	4b24      	ldr	r3, [pc, #144]	; (80184e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018452:	2137      	movs	r1, #55	; 0x37
 8018454:	4a24      	ldr	r2, [pc, #144]	; (80184e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018456:	4825      	ldr	r0, [pc, #148]	; (80184ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8018458:	f00d f9e0 	bl	802581c <__assert_func>
 801845c:	f010 0403 	ands.w	r4, r0, #3
 8018460:	bf1f      	itttt	ne
 8018462:	f1c4 0504 	rsbne	r5, r4, #4
 8018466:	3b04      	subne	r3, #4
 8018468:	1952      	addne	r2, r2, r5
 801846a:	191b      	addne	r3, r3, r4
 801846c:	4d20      	ldr	r5, [pc, #128]	; (80184f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801846e:	4402      	add	r2, r0
 8018470:	1a1b      	subs	r3, r3, r0
 8018472:	3001      	adds	r0, #1
 8018474:	602a      	str	r2, [r5, #0]
 8018476:	f020 0401 	bic.w	r4, r0, #1
 801847a:	42a3      	cmp	r3, r4
 801847c:	d203      	bcs.n	8018486 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801847e:	4b19      	ldr	r3, [pc, #100]	; (80184e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018480:	214a      	movs	r1, #74	; 0x4a
 8018482:	4a19      	ldr	r2, [pc, #100]	; (80184e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018484:	e7e7      	b.n	8018456 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8018486:	f010 0002 	ands.w	r0, r0, #2
 801848a:	bf1f      	itttt	ne
 801848c:	f1c0 0504 	rsbne	r5, r0, #4
 8018490:	1952      	addne	r2, r2, r5
 8018492:	1f05      	subne	r5, r0, #4
 8018494:	195b      	addne	r3, r3, r5
 8018496:	4422      	add	r2, r4
 8018498:	4d16      	ldr	r5, [pc, #88]	; (80184f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801849a:	1b1b      	subs	r3, r3, r4
 801849c:	602a      	str	r2, [r5, #0]
 801849e:	429c      	cmp	r4, r3
 80184a0:	d903      	bls.n	80184aa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 80184a2:	4b10      	ldr	r3, [pc, #64]	; (80184e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80184a4:	215d      	movs	r1, #93	; 0x5d
 80184a6:	4a10      	ldr	r2, [pc, #64]	; (80184e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80184a8:	e7d5      	b.n	8018456 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80184aa:	b120      	cbz	r0, 80184b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 80184ac:	f1c0 0504 	rsb	r5, r0, #4
 80184b0:	3804      	subs	r0, #4
 80184b2:	442a      	add	r2, r5
 80184b4:	4403      	add	r3, r0
 80184b6:	1b1b      	subs	r3, r3, r4
 80184b8:	4422      	add	r2, r4
 80184ba:	480f      	ldr	r0, [pc, #60]	; (80184f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 80184bc:	2b0f      	cmp	r3, #15
 80184be:	600b      	str	r3, [r1, #0]
 80184c0:	6002      	str	r2, [r0, #0]
 80184c2:	d803      	bhi.n	80184cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80184c4:	4b0d      	ldr	r3, [pc, #52]	; (80184fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80184c6:	2170      	movs	r1, #112	; 0x70
 80184c8:	4a07      	ldr	r2, [pc, #28]	; (80184e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80184ca:	e7c4      	b.n	8018456 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80184cc:	2001      	movs	r0, #1
 80184ce:	e7b8      	b.n	8018442 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80184d0:	2000b380 	.word	0x2000b380
 80184d4:	2000b378 	.word	0x2000b378
 80184d8:	2000b388 	.word	0x2000b388
 80184dc:	2000b390 	.word	0x2000b390
 80184e0:	2000b38c 	.word	0x2000b38c
 80184e4:	0802a1d6 	.word	0x0802a1d6
 80184e8:	0802a29e 	.word	0x0802a29e
 80184ec:	0802a20f 	.word	0x0802a20f
 80184f0:	2000b394 	.word	0x2000b394
 80184f4:	2000b384 	.word	0x2000b384
 80184f8:	2000b37c 	.word	0x2000b37c
 80184fc:	0802a259 	.word	0x0802a259

08018500 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8018500:	4b04      	ldr	r3, [pc, #16]	; (8018514 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8018502:	6818      	ldr	r0, [r3, #0]
 8018504:	b120      	cbz	r0, 8018510 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8018506:	4b04      	ldr	r3, [pc, #16]	; (8018518 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8018508:	6818      	ldr	r0, [r3, #0]
 801850a:	3000      	adds	r0, #0
 801850c:	bf18      	it	ne
 801850e:	2001      	movne	r0, #1
 8018510:	4770      	bx	lr
 8018512:	bf00      	nop
 8018514:	2000b378 	.word	0x2000b378
 8018518:	2000b38c 	.word	0x2000b38c

0801851c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801851c:	4b01      	ldr	r3, [pc, #4]	; (8018524 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801851e:	6818      	ldr	r0, [r3, #0]
 8018520:	4770      	bx	lr
 8018522:	bf00      	nop
 8018524:	2000b380 	.word	0x2000b380

08018528 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8018528:	4b01      	ldr	r3, [pc, #4]	; (8018530 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801852a:	6818      	ldr	r0, [r3, #0]
 801852c:	4770      	bx	lr
 801852e:	bf00      	nop
 8018530:	2000b388 	.word	0x2000b388

08018534 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8018534:	4b01      	ldr	r3, [pc, #4]	; (801853c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8018536:	6818      	ldr	r0, [r3, #0]
 8018538:	4770      	bx	lr
 801853a:	bf00      	nop
 801853c:	2000b394 	.word	0x2000b394

08018540 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8018540:	4b01      	ldr	r3, [pc, #4]	; (8018548 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8018542:	6818      	ldr	r0, [r3, #0]
 8018544:	4770      	bx	lr
 8018546:	bf00      	nop
 8018548:	2000b384 	.word	0x2000b384

0801854c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801854c:	4b01      	ldr	r3, [pc, #4]	; (8018554 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801854e:	6818      	ldr	r0, [r3, #0]
 8018550:	4770      	bx	lr
 8018552:	bf00      	nop
 8018554:	2000b37c 	.word	0x2000b37c

08018558 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018558:	4b01      	ldr	r3, [pc, #4]	; (8018560 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801855a:	6818      	ldr	r0, [r3, #0]
 801855c:	4770      	bx	lr
 801855e:	bf00      	nop
 8018560:	2000b390 	.word	0x2000b390

08018564 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018564:	2000      	movs	r0, #0
 8018566:	4770      	bx	lr

08018568 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801856c:	b091      	sub	sp, #68	; 0x44
 801856e:	4699      	mov	r9, r3
 8018570:	4617      	mov	r7, r2
 8018572:	2500      	movs	r5, #0
 8018574:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8018578:	4680      	mov	r8, r0
 801857a:	a80e      	add	r0, sp, #56	; 0x38
 801857c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801857e:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8018582:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8018586:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801858a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801858e:	910d      	str	r1, [sp, #52]	; 0x34
 8018590:	950e      	str	r5, [sp, #56]	; 0x38
 8018592:	f000 fe39 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018596:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018598:	f8d9 6000 	ldr.w	r6, [r9]
 801859c:	6818      	ldr	r0, [r3, #0]
 801859e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80185a0:	f9b4 b000 	ldrsh.w	fp, [r4]
 80185a4:	1b80      	subs	r0, r0, r6
 80185a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80185aa:	eb02 0c06 	add.w	ip, r2, r6
 80185ae:	ebab 0e0c 	sub.w	lr, fp, ip
 80185b2:	4570      	cmp	r0, lr
 80185b4:	f340 80bc 	ble.w	8018730 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80185b8:	88a1      	ldrh	r1, [r4, #4]
 80185ba:	4459      	add	r1, fp
 80185bc:	b209      	sxth	r1, r1
 80185be:	458c      	cmp	ip, r1
 80185c0:	f300 80b6 	bgt.w	8018730 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80185c4:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80185c8:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 80185cc:	4283      	cmp	r3, r0
 80185ce:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 80185d2:	edd9 6a07 	vldr	s13, [r9, #28]
 80185d6:	bfa8      	it	ge
 80185d8:	4603      	movge	r3, r0
 80185da:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 80185de:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80185e2:	45e3      	cmp	fp, ip
 80185e4:	ee07 3a90 	vmov	s15, r3
 80185e8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80185ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80185f0:	ee25 4a04 	vmul.f32	s8, s10, s8
 80185f4:	ee65 4a24 	vmul.f32	s9, s10, s9
 80185f8:	ee25 5a27 	vmul.f32	s10, s10, s15
 80185fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018600:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018604:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018608:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801860c:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018610:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018614:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018618:	f340 808d 	ble.w	8018736 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801861c:	fb9e f5f3 	sdiv	r5, lr, r3
 8018620:	ee07 5a10 	vmov	s14, r5
 8018624:	2d00      	cmp	r5, #0
 8018626:	fb03 e415 	mls	r4, r3, r5, lr
 801862a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801862e:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018632:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018636:	eea7 1a05 	vfma.f32	s2, s14, s10
 801863a:	dd12      	ble.n	8018662 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801863c:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018640:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018644:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018648:	eef5 6a40 	vcmp.f32	s13, #0.0
 801864c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018650:	bf14      	ite	ne
 8018652:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018656:	eeb0 7a67 	vmoveq.f32	s14, s15
 801865a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801865e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018662:	fb05 f703 	mul.w	r7, r5, r3
 8018666:	1bc0      	subs	r0, r0, r7
 8018668:	443e      	add	r6, r7
 801866a:	1997      	adds	r7, r2, r6
 801866c:	4407      	add	r7, r0
 801866e:	42b9      	cmp	r1, r7
 8018670:	bfbc      	itt	lt
 8018672:	1a88      	sublt	r0, r1, r2
 8018674:	1b80      	sublt	r0, r0, r6
 8018676:	2800      	cmp	r0, #0
 8018678:	dd5a      	ble.n	8018730 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801867a:	fb90 f1f3 	sdiv	r1, r0, r3
 801867e:	fb03 0211 	mls	r2, r3, r1, r0
 8018682:	b90a      	cbnz	r2, 8018688 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8018684:	3901      	subs	r1, #1
 8018686:	461a      	mov	r2, r3
 8018688:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801868c:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8018690:	44a4      	add	ip, r4
 8018692:	2900      	cmp	r1, #0
 8018694:	bfcc      	ite	gt
 8018696:	469e      	movgt	lr, r3
 8018698:	4696      	movle	lr, r2
 801869a:	fb03 c505 	mla	r5, r3, r5, ip
 801869e:	eef0 6a42 	vmov.f32	s13, s4
 80186a2:	eeb0 7a61 	vmov.f32	s14, s3
 80186a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80186aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80186ae:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80186b2:	ee21 3a23 	vmul.f32	s6, s2, s7
 80186b6:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80186ba:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80186be:	ee17 0a90 	vmov	r0, s15
 80186c2:	ee73 7a42 	vsub.f32	s15, s6, s4
 80186c6:	fb90 f6f3 	sdiv	r6, r0, r3
 80186ca:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80186ce:	ee17 0a90 	vmov	r0, s15
 80186d2:	fb90 f7f3 	sdiv	r7, r0, r3
 80186d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80186da:	f8d0 8000 	ldr.w	r8, [r0]
 80186de:	900c      	str	r0, [sp, #48]	; 0x30
 80186e0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80186e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80186e6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80186ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80186ee:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80186f2:	f8cd a020 	str.w	sl, [sp, #32]
 80186f6:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80186fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80186fc:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8018700:	9603      	str	r6, [sp, #12]
 8018702:	44ca      	add	sl, r9
 8018704:	9506      	str	r5, [sp, #24]
 8018706:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801870a:	ee16 0a90 	vmov	r0, s13
 801870e:	f8cd a01c 	str.w	sl, [sp, #28]
 8018712:	fb07 0704 	mla	r7, r7, r4, r0
 8018716:	ee17 0a10 	vmov	r0, s14
 801871a:	fb06 0604 	mla	r6, r6, r4, r0
 801871e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018720:	9702      	str	r7, [sp, #8]
 8018722:	e9cd 3600 	strd	r3, r6, [sp]
 8018726:	ebae 0304 	sub.w	r3, lr, r4
 801872a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801872e:	47a8      	blx	r5
 8018730:	b011      	add	sp, #68	; 0x44
 8018732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018736:	462c      	mov	r4, r5
 8018738:	e797      	b.n	801866a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801873a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801873a:	b570      	push	{r4, r5, r6, lr}
 801873c:	4604      	mov	r4, r0
 801873e:	2500      	movs	r5, #0
 8018740:	9804      	ldr	r0, [sp, #16]
 8018742:	7223      	strb	r3, [r4, #8]
 8018744:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018748:	8025      	strh	r5, [r4, #0]
 801874a:	6061      	str	r1, [r4, #4]
 801874c:	7263      	strb	r3, [r4, #9]
 801874e:	60e0      	str	r0, [r4, #12]
 8018750:	8222      	strh	r2, [r4, #16]
 8018752:	8265      	strh	r5, [r4, #18]
 8018754:	82a5      	strh	r5, [r4, #20]
 8018756:	82e5      	strh	r5, [r4, #22]
 8018758:	8325      	strh	r5, [r4, #24]
 801875a:	8365      	strh	r5, [r4, #26]
 801875c:	83a5      	strh	r5, [r4, #28]
 801875e:	77a5      	strb	r5, [r4, #30]
 8018760:	6803      	ldr	r3, [r0, #0]
 8018762:	695b      	ldr	r3, [r3, #20]
 8018764:	4798      	blx	r3
 8018766:	4606      	mov	r6, r0
 8018768:	b1f8      	cbz	r0, 80187aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801876a:	68e0      	ldr	r0, [r4, #12]
 801876c:	4631      	mov	r1, r6
 801876e:	6803      	ldr	r3, [r0, #0]
 8018770:	68db      	ldr	r3, [r3, #12]
 8018772:	4798      	blx	r3
 8018774:	7b43      	ldrb	r3, [r0, #13]
 8018776:	7a82      	ldrb	r2, [r0, #10]
 8018778:	4605      	mov	r5, r0
 801877a:	005b      	lsls	r3, r3, #1
 801877c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018780:	4313      	orrs	r3, r2
 8018782:	83a3      	strh	r3, [r4, #28]
 8018784:	7a63      	ldrb	r3, [r4, #9]
 8018786:	2b04      	cmp	r3, #4
 8018788:	d10f      	bne.n	80187aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801878a:	68e0      	ldr	r0, [r4, #12]
 801878c:	462a      	mov	r2, r5
 801878e:	4631      	mov	r1, r6
 8018790:	6803      	ldr	r3, [r0, #0]
 8018792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018794:	4798      	blx	r3
 8018796:	7b6b      	ldrb	r3, [r5, #13]
 8018798:	005b      	lsls	r3, r3, #1
 801879a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801879e:	7aab      	ldrb	r3, [r5, #10]
 80187a0:	4313      	orrs	r3, r2
 80187a2:	4418      	add	r0, r3
 80187a4:	8ba3      	ldrh	r3, [r4, #28]
 80187a6:	4418      	add	r0, r3
 80187a8:	83a0      	strh	r0, [r4, #28]
 80187aa:	4620      	mov	r0, r4
 80187ac:	bd70      	pop	{r4, r5, r6, pc}

080187ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80187ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b2:	2400      	movs	r4, #0
 80187b4:	b085      	sub	sp, #20
 80187b6:	4681      	mov	r9, r0
 80187b8:	4688      	mov	r8, r1
 80187ba:	4692      	mov	sl, r2
 80187bc:	469b      	mov	fp, r3
 80187be:	4627      	mov	r7, r4
 80187c0:	4625      	mov	r5, r4
 80187c2:	4626      	mov	r6, r4
 80187c4:	4554      	cmp	r4, sl
 80187c6:	da2a      	bge.n	801881e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80187c8:	2300      	movs	r3, #0
 80187ca:	9303      	str	r3, [sp, #12]
 80187cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80187d0:	429d      	cmp	r5, r3
 80187d2:	d004      	beq.n	80187de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80187d4:	f242 030b 	movw	r3, #8203	; 0x200b
 80187d8:	429d      	cmp	r5, r3
 80187da:	bf18      	it	ne
 80187dc:	462f      	movne	r7, r5
 80187de:	ab03      	add	r3, sp, #12
 80187e0:	4642      	mov	r2, r8
 80187e2:	4659      	mov	r1, fp
 80187e4:	4648      	mov	r0, r9
 80187e6:	f002 fb45 	bl	801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80187ea:	4605      	mov	r5, r0
 80187ec:	b1b8      	cbz	r0, 801881e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80187ee:	280a      	cmp	r0, #10
 80187f0:	d015      	beq.n	801881e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80187f2:	9a03      	ldr	r2, [sp, #12]
 80187f4:	b18a      	cbz	r2, 801881a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80187f6:	7b50      	ldrb	r0, [r2, #13]
 80187f8:	4639      	mov	r1, r7
 80187fa:	7a93      	ldrb	r3, [r2, #10]
 80187fc:	0040      	lsls	r0, r0, #1
 80187fe:	8895      	ldrh	r5, [r2, #4]
 8018800:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018804:	4303      	orrs	r3, r0
 8018806:	4640      	mov	r0, r8
 8018808:	9301      	str	r3, [sp, #4]
 801880a:	f8d8 3000 	ldr.w	r3, [r8]
 801880e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018810:	4798      	blx	r3
 8018812:	9b01      	ldr	r3, [sp, #4]
 8018814:	4418      	add	r0, r3
 8018816:	4406      	add	r6, r0
 8018818:	b2b6      	uxth	r6, r6
 801881a:	3401      	adds	r4, #1
 801881c:	e7d2      	b.n	80187c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801881e:	4630      	mov	r0, r6
 8018820:	b005      	add	sp, #20
 8018822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018826 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018826:	2a02      	cmp	r2, #2
 8018828:	b530      	push	{r4, r5, lr}
 801882a:	d011      	beq.n	8018850 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801882c:	2a03      	cmp	r2, #3
 801882e:	d01c      	beq.n	801886a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018830:	2a01      	cmp	r2, #1
 8018832:	d10c      	bne.n	801884e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018834:	888b      	ldrh	r3, [r1, #4]
 8018836:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801883a:	8801      	ldrh	r1, [r0, #0]
 801883c:	1a9b      	subs	r3, r3, r2
 801883e:	8844      	ldrh	r4, [r0, #2]
 8018840:	1a5b      	subs	r3, r3, r1
 8018842:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018846:	8004      	strh	r4, [r0, #0]
 8018848:	8043      	strh	r3, [r0, #2]
 801884a:	8081      	strh	r1, [r0, #4]
 801884c:	80c2      	strh	r2, [r0, #6]
 801884e:	bd30      	pop	{r4, r5, pc}
 8018850:	88cb      	ldrh	r3, [r1, #6]
 8018852:	88c2      	ldrh	r2, [r0, #6]
 8018854:	1a9b      	subs	r3, r3, r2
 8018856:	8842      	ldrh	r2, [r0, #2]
 8018858:	1a9b      	subs	r3, r3, r2
 801885a:	888a      	ldrh	r2, [r1, #4]
 801885c:	8881      	ldrh	r1, [r0, #4]
 801885e:	8043      	strh	r3, [r0, #2]
 8018860:	1a52      	subs	r2, r2, r1
 8018862:	8801      	ldrh	r1, [r0, #0]
 8018864:	1a52      	subs	r2, r2, r1
 8018866:	8002      	strh	r2, [r0, #0]
 8018868:	e7f1      	b.n	801884e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801886a:	88cb      	ldrh	r3, [r1, #6]
 801886c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018870:	8841      	ldrh	r1, [r0, #2]
 8018872:	1a9b      	subs	r3, r3, r2
 8018874:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018878:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801887c:	1a5b      	subs	r3, r3, r1
 801887e:	8045      	strh	r5, [r0, #2]
 8018880:	8082      	strh	r2, [r0, #4]
 8018882:	8003      	strh	r3, [r0, #0]
 8018884:	80c4      	strh	r4, [r0, #6]
 8018886:	e7e2      	b.n	801884e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018888 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888c:	b09f      	sub	sp, #124	; 0x7c
 801888e:	9116      	str	r1, [sp, #88]	; 0x58
 8018890:	9317      	str	r3, [sp, #92]	; 0x5c
 8018892:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018894:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018896:	8809      	ldrh	r1, [r1, #0]
 8018898:	889b      	ldrh	r3, [r3, #4]
 801889a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801889e:	440b      	add	r3, r1
 80188a0:	9212      	str	r2, [sp, #72]	; 0x48
 80188a2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80188a6:	b21b      	sxth	r3, r3
 80188a8:	9011      	str	r0, [sp, #68]	; 0x44
 80188aa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80188ae:	9310      	str	r3, [sp, #64]	; 0x40
 80188b0:	f8d8 3000 	ldr.w	r3, [r8]
 80188b4:	7a59      	ldrb	r1, [r3, #9]
 80188b6:	7a1b      	ldrb	r3, [r3, #8]
 80188b8:	9114      	str	r1, [sp, #80]	; 0x50
 80188ba:	9315      	str	r3, [sp, #84]	; 0x54
 80188bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80188be:	f9b3 5000 	ldrsh.w	r5, [r3]
 80188c2:	2a00      	cmp	r2, #0
 80188c4:	d067      	beq.n	8018996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 80188c6:	f898 3010 	ldrb.w	r3, [r8, #16]
 80188ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80188cc:	2b04      	cmp	r3, #4
 80188ce:	bf14      	ite	ne
 80188d0:	2301      	movne	r3, #1
 80188d2:	2302      	moveq	r3, #2
 80188d4:	4413      	add	r3, r2
 80188d6:	f04f 0900 	mov.w	r9, #0
 80188da:	930f      	str	r3, [sp, #60]	; 0x3c
 80188dc:	464c      	mov	r4, r9
 80188de:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80188e2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80188e6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80188ea:	4293      	cmp	r3, r2
 80188ec:	f280 808c 	bge.w	8018a08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80188f0:	2300      	movs	r3, #0
 80188f2:	931c      	str	r3, [sp, #112]	; 0x70
 80188f4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80188f8:	429c      	cmp	r4, r3
 80188fa:	d006      	beq.n	801890a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80188fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188fe:	f242 020b 	movw	r2, #8203	; 0x200b
 8018902:	4294      	cmp	r4, r2
 8018904:	bf18      	it	ne
 8018906:	4623      	movne	r3, r4
 8018908:	930d      	str	r3, [sp, #52]	; 0x34
 801890a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801890c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801890e:	f8d8 2000 	ldr.w	r2, [r8]
 8018912:	428b      	cmp	r3, r1
 8018914:	db41      	blt.n	801899a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018916:	6813      	ldr	r3, [r2, #0]
 8018918:	4610      	mov	r0, r2
 801891a:	695b      	ldr	r3, [r3, #20]
 801891c:	4798      	blx	r3
 801891e:	4604      	mov	r4, r0
 8018920:	f8d8 0000 	ldr.w	r0, [r8]
 8018924:	aa1d      	add	r2, sp, #116	; 0x74
 8018926:	4621      	mov	r1, r4
 8018928:	6803      	ldr	r3, [r0, #0]
 801892a:	689e      	ldr	r6, [r3, #8]
 801892c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018930:	47b0      	blx	r6
 8018932:	901c      	str	r0, [sp, #112]	; 0x70
 8018934:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018938:	429c      	cmp	r4, r3
 801893a:	f000 80ea 	beq.w	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801893e:	f242 030b 	movw	r3, #8203	; 0x200b
 8018942:	429c      	cmp	r4, r3
 8018944:	f000 80e5 	beq.w	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018948:	2c00      	cmp	r4, #0
 801894a:	f000 80f7 	beq.w	8018b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801894e:	2c0a      	cmp	r4, #10
 8018950:	d060      	beq.n	8018a14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018952:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018954:	b36a      	cbz	r2, 80189b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018956:	8894      	ldrh	r4, [r2, #4]
 8018958:	f1bb 0f00 	cmp.w	fp, #0
 801895c:	d03b      	beq.n	80189d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801895e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018962:	f1bb 0f01 	cmp.w	fp, #1
 8018966:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801896a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801896e:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018972:	ea49 0903 	orr.w	r9, r9, r3
 8018976:	d134      	bne.n	80189e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8018978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801897a:	eba5 0509 	sub.w	r5, r5, r9
 801897e:	2b00      	cmp	r3, #0
 8018980:	d14f      	bne.n	8018a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018982:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018984:	eb09 0305 	add.w	r3, r9, r5
 8018988:	4413      	add	r3, r2
 801898a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801898c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018990:	4293      	cmp	r3, r2
 8018992:	da51      	bge.n	8018a38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018994:	e038      	b.n	8018a08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018996:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018998:	e79d      	b.n	80188d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801899a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801899e:	4659      	mov	r1, fp
 80189a0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80189a2:	9301      	str	r3, [sp, #4]
 80189a4:	ab1d      	add	r3, sp, #116	; 0x74
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	ab1c      	add	r3, sp, #112	; 0x70
 80189aa:	f002 fab7 	bl	801af1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80189ae:	4604      	mov	r4, r0
 80189b0:	e7c0      	b.n	8018934 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 80189b2:	f8d8 0000 	ldr.w	r0, [r8]
 80189b6:	6803      	ldr	r3, [r0, #0]
 80189b8:	691b      	ldr	r3, [r3, #16]
 80189ba:	4798      	blx	r3
 80189bc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80189c0:	4298      	cmp	r0, r3
 80189c2:	f000 80a6 	beq.w	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80189c6:	f242 030b 	movw	r3, #8203	; 0x200b
 80189ca:	4298      	cmp	r0, r3
 80189cc:	f000 80a1 	beq.w	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80189d0:	f1bb 0f00 	cmp.w	fp, #0
 80189d4:	d100      	bne.n	80189d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80189d6:	444d      	add	r5, r9
 80189d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80189da:	2a00      	cmp	r2, #0
 80189dc:	d1bf      	bne.n	801895e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80189de:	4691      	mov	r9, r2
 80189e0:	e097      	b.n	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80189e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	f000 80ab 	beq.w	8018b40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80189ea:	f1bb 0f00 	cmp.w	fp, #0
 80189ee:	d118      	bne.n	8018a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80189f0:	f8d8 0000 	ldr.w	r0, [r8]
 80189f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80189f6:	6803      	ldr	r3, [r0, #0]
 80189f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189fa:	4798      	blx	r3
 80189fc:	4405      	add	r5, r0
 80189fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a02:	1aeb      	subs	r3, r5, r3
 8018a04:	4293      	cmp	r3, r2
 8018a06:	dd17      	ble.n	8018a38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018a08:	2c00      	cmp	r4, #0
 8018a0a:	f000 8097 	beq.w	8018b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018a0e:	2c0a      	cmp	r4, #10
 8018a10:	f040 8085 	bne.w	8018b1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8018a14:	240a      	movs	r4, #10
 8018a16:	fab4 f084 	clz	r0, r4
 8018a1a:	0940      	lsrs	r0, r0, #5
 8018a1c:	b01f      	add	sp, #124	; 0x7c
 8018a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a22:	f8d8 0000 	ldr.w	r0, [r8]
 8018a26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018a28:	6803      	ldr	r3, [r0, #0]
 8018a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a2c:	4798      	blx	r3
 8018a2e:	f1bb 0f01 	cmp.w	fp, #1
 8018a32:	eba5 0500 	sub.w	r5, r5, r0
 8018a36:	d0a4      	beq.n	8018982 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018a38:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018a3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018a3c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018a40:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018a44:	7b43      	ldrb	r3, [r0, #13]
 8018a46:	4429      	add	r1, r5
 8018a48:	015b      	lsls	r3, r3, #5
 8018a4a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018a4e:	7983      	ldrb	r3, [r0, #6]
 8018a50:	4313      	orrs	r3, r2
 8018a52:	440b      	add	r3, r1
 8018a54:	42b3      	cmp	r3, r6
 8018a56:	db5c      	blt.n	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a5a:	4299      	cmp	r1, r3
 8018a5c:	da59      	bge.n	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018a5e:	f8d8 0000 	ldr.w	r0, [r8]
 8018a62:	42ae      	cmp	r6, r5
 8018a64:	6803      	ldr	r3, [r0, #0]
 8018a66:	bfcc      	ite	gt
 8018a68:	1b76      	subgt	r6, r6, r5
 8018a6a:	2600      	movle	r6, #0
 8018a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a6e:	bfc8      	it	gt
 8018a70:	b2b6      	uxthgt	r6, r6
 8018a72:	4798      	blx	r3
 8018a74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018a76:	7b5a      	ldrb	r2, [r3, #13]
 8018a78:	00d1      	lsls	r1, r2, #3
 8018a7a:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018a7e:	7a19      	ldrb	r1, [r3, #8]
 8018a80:	4339      	orrs	r1, r7
 8018a82:	0657      	lsls	r7, r2, #25
 8018a84:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018a86:	bf48      	it	mi
 8018a88:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018a8c:	4407      	add	r7, r0
 8018a8e:	bf48      	it	mi
 8018a90:	b209      	sxthmi	r1, r1
 8018a92:	1a7f      	subs	r7, r7, r1
 8018a94:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018a96:	b2bf      	uxth	r7, r7
 8018a98:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018a9c:	fa0f fa87 	sxth.w	sl, r7
 8018aa0:	4551      	cmp	r1, sl
 8018aa2:	dd3a      	ble.n	8018b1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018aa4:	0112      	lsls	r2, r2, #4
 8018aa6:	79d8      	ldrb	r0, [r3, #7]
 8018aa8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018aac:	4302      	orrs	r2, r0
 8018aae:	4492      	add	sl, r2
 8018ab0:	4551      	cmp	r1, sl
 8018ab2:	dc2e      	bgt.n	8018b12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018ab4:	1bcf      	subs	r7, r1, r7
 8018ab6:	468a      	mov	sl, r1
 8018ab8:	b2bf      	uxth	r7, r7
 8018aba:	9319      	str	r3, [sp, #100]	; 0x64
 8018abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018abe:	f8d8 0000 	ldr.w	r0, [r8]
 8018ac2:	681a      	ldr	r2, [r3, #0]
 8018ac4:	6801      	ldr	r1, [r0, #0]
 8018ac6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018ac8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018aca:	9313      	str	r3, [sp, #76]	; 0x4c
 8018acc:	9218      	str	r2, [sp, #96]	; 0x60
 8018ace:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018ad0:	4788      	blx	r1
 8018ad2:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018ad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018ad8:	910b      	str	r1, [sp, #44]	; 0x2c
 8018ada:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018ade:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018ae0:	910a      	str	r1, [sp, #40]	; 0x28
 8018ae2:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018ae6:	9109      	str	r1, [sp, #36]	; 0x24
 8018ae8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018aec:	9305      	str	r3, [sp, #20]
 8018aee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018af0:	9206      	str	r2, [sp, #24]
 8018af2:	e9cd a601 	strd	sl, r6, [sp, #4]
 8018af6:	442e      	add	r6, r5
 8018af8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018afc:	b236      	sxth	r6, r6
 8018afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b00:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018b04:	9600      	str	r6, [sp, #0]
 8018b06:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018b10:	47b0      	blx	r6
 8018b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b14:	3301      	adds	r3, #1
 8018b16:	930e      	str	r3, [sp, #56]	; 0x38
 8018b18:	e6e5      	b.n	80188e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8018b1a:	2700      	movs	r7, #0
 8018b1c:	e7cd      	b.n	8018aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8018b1e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018b20:	3501      	adds	r5, #1
 8018b22:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018b24:	429d      	cmp	r5, r3
 8018b26:	f6bf af76 	bge.w	8018a16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018b2a:	4659      	mov	r1, fp
 8018b2c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018b2e:	f7f9 fdc1 	bl	80126b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018b32:	4604      	mov	r4, r0
 8018b34:	b110      	cbz	r0, 8018b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018b36:	280a      	cmp	r0, #10
 8018b38:	d1f2      	bne.n	8018b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018b3a:	e76b      	b.n	8018a14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018b3c:	2400      	movs	r4, #0
 8018b3e:	e76a      	b.n	8018a16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018b40:	f1bb 0f00 	cmp.w	fp, #0
 8018b44:	f43f af5b 	beq.w	80189fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018b48:	e776      	b.n	8018a38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018b4a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018b4a:	b530      	push	{r4, r5, lr}
 8018b4c:	8a44      	ldrh	r4, [r0, #18]
 8018b4e:	8ac5      	ldrh	r5, [r0, #22]
 8018b50:	82c3      	strh	r3, [r0, #22]
 8018b52:	442c      	add	r4, r5
 8018b54:	1ae4      	subs	r4, r4, r3
 8018b56:	8b03      	ldrh	r3, [r0, #24]
 8018b58:	8244      	strh	r4, [r0, #18]
 8018b5a:	8a84      	ldrh	r4, [r0, #20]
 8018b5c:	4422      	add	r2, r4
 8018b5e:	440c      	add	r4, r1
 8018b60:	1a59      	subs	r1, r3, r1
 8018b62:	8342      	strh	r2, [r0, #26]
 8018b64:	8284      	strh	r4, [r0, #20]
 8018b66:	8301      	strh	r1, [r0, #24]
 8018b68:	bd30      	pop	{r4, r5, pc}

08018b6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b6e:	7a43      	ldrb	r3, [r0, #9]
 8018b70:	b087      	sub	sp, #28
 8018b72:	4604      	mov	r4, r0
 8018b74:	460f      	mov	r7, r1
 8018b76:	1eda      	subs	r2, r3, #3
 8018b78:	b2d2      	uxtb	r2, r2
 8018b7a:	2900      	cmp	r1, #0
 8018b7c:	d036      	beq.n	8018bec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018b7e:	2a01      	cmp	r2, #1
 8018b80:	d932      	bls.n	8018be8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018b82:	1e58      	subs	r0, r3, #1
 8018b84:	f1d0 0b00 	rsbs	fp, r0, #0
 8018b88:	eb4b 0b00 	adc.w	fp, fp, r0
 8018b8c:	1e99      	subs	r1, r3, #2
 8018b8e:	424b      	negs	r3, r1
 8018b90:	414b      	adcs	r3, r1
 8018b92:	9303      	str	r3, [sp, #12]
 8018b94:	2300      	movs	r3, #0
 8018b96:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018b9a:	2500      	movs	r5, #0
 8018b9c:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018ba0:	46a9      	mov	r9, r5
 8018ba2:	8265      	strh	r5, [r4, #18]
 8018ba4:	82a5      	strh	r5, [r4, #20]
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	9305      	str	r3, [sp, #20]
 8018baa:	8823      	ldrh	r3, [r4, #0]
 8018bac:	2b20      	cmp	r3, #32
 8018bae:	d02b      	beq.n	8018c08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018bb0:	eba3 020a 	sub.w	r2, r3, sl
 8018bb4:	4256      	negs	r6, r2
 8018bb6:	4156      	adcs	r6, r2
 8018bb8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018bbc:	4293      	cmp	r3, r2
 8018bbe:	d004      	beq.n	8018bca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018bc0:	4553      	cmp	r3, sl
 8018bc2:	bf16      	itet	ne
 8018bc4:	4699      	movne	r9, r3
 8018bc6:	2601      	moveq	r6, #1
 8018bc8:	2600      	movne	r6, #0
 8018bca:	ab05      	add	r3, sp, #20
 8018bcc:	68e2      	ldr	r2, [r4, #12]
 8018bce:	7a21      	ldrb	r1, [r4, #8]
 8018bd0:	6860      	ldr	r0, [r4, #4]
 8018bd2:	f002 f94f 	bl	801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018bd6:	8020      	strh	r0, [r4, #0]
 8018bd8:	b9c8      	cbnz	r0, 8018c0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018bda:	8b22      	ldrh	r2, [r4, #24]
 8018bdc:	2300      	movs	r3, #0
 8018bde:	4611      	mov	r1, r2
 8018be0:	4620      	mov	r0, r4
 8018be2:	f7ff ffb2 	bl	8018b4a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018be6:	e066      	b.n	8018cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018be8:	468b      	mov	fp, r1
 8018bea:	e7cf      	b.n	8018b8c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8018bec:	3b01      	subs	r3, #1
 8018bee:	2a01      	cmp	r2, #1
 8018bf0:	9103      	str	r1, [sp, #12]
 8018bf2:	468b      	mov	fp, r1
 8018bf4:	bf8c      	ite	hi
 8018bf6:	2200      	movhi	r2, #0
 8018bf8:	2201      	movls	r2, #1
 8018bfa:	2b01      	cmp	r3, #1
 8018bfc:	9202      	str	r2, [sp, #8]
 8018bfe:	bf8c      	ite	hi
 8018c00:	2300      	movhi	r3, #0
 8018c02:	2301      	movls	r3, #1
 8018c04:	9301      	str	r3, [sp, #4]
 8018c06:	e7c8      	b.n	8018b9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8018c08:	4699      	mov	r9, r3
 8018c0a:	2601      	movs	r6, #1
 8018c0c:	e7dd      	b.n	8018bca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018c0e:	8ae3      	ldrh	r3, [r4, #22]
 8018c10:	280a      	cmp	r0, #10
 8018c12:	f103 0301 	add.w	r3, r3, #1
 8018c16:	82e3      	strh	r3, [r4, #22]
 8018c18:	d0df      	beq.n	8018bda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018c1a:	9a05      	ldr	r2, [sp, #20]
 8018c1c:	bb42      	cbnz	r2, 8018c70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018c1e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018c22:	4298      	cmp	r0, r3
 8018c24:	d001      	beq.n	8018c2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018c26:	4550      	cmp	r0, sl
 8018c28:	d1bd      	bne.n	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018c2a:	8823      	ldrh	r3, [r4, #0]
 8018c2c:	8b21      	ldrh	r1, [r4, #24]
 8018c2e:	2b20      	cmp	r3, #32
 8018c30:	d001      	beq.n	8018c36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018c32:	4553      	cmp	r3, sl
 8018c34:	d131      	bne.n	8018c9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018c36:	2e00      	cmp	r6, #0
 8018c38:	bf0a      	itet	eq
 8018c3a:	460d      	moveq	r5, r1
 8018c3c:	4630      	movne	r0, r6
 8018c3e:	2001      	moveq	r0, #1
 8018c40:	440a      	add	r2, r1
 8018c42:	8aa3      	ldrh	r3, [r4, #20]
 8018c44:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018c48:	b292      	uxth	r2, r2
 8018c4a:	8322      	strh	r2, [r4, #24]
 8018c4c:	4413      	add	r3, r2
 8018c4e:	2f00      	cmp	r7, #0
 8018c50:	d03a      	beq.n	8018cc8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018c52:	f1bb 0f00 	cmp.w	fp, #0
 8018c56:	d102      	bne.n	8018c5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8018c58:	9903      	ldr	r1, [sp, #12]
 8018c5a:	b301      	cbz	r1, 8018c9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018c5c:	b1f8      	cbz	r0, 8018c9e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018c5e:	8ba1      	ldrh	r1, [r4, #28]
 8018c60:	4419      	add	r1, r3
 8018c62:	458c      	cmp	ip, r1
 8018c64:	da2a      	bge.n	8018cbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018c66:	8a61      	ldrh	r1, [r4, #18]
 8018c68:	b341      	cbz	r1, 8018cbc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018c6a:	4563      	cmp	r3, ip
 8018c6c:	dd9b      	ble.n	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018c6e:	e01c      	b.n	8018caa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018c70:	8893      	ldrh	r3, [r2, #4]
 8018c72:	4649      	mov	r1, r9
 8018c74:	8023      	strh	r3, [r4, #0]
 8018c76:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018c7a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018c7e:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018c82:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018c86:	ea48 0800 	orr.w	r8, r8, r0
 8018c8a:	68e0      	ldr	r0, [r4, #12]
 8018c8c:	6803      	ldr	r3, [r0, #0]
 8018c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c90:	4798      	blx	r3
 8018c92:	eb08 0200 	add.w	r2, r8, r0
 8018c96:	b292      	uxth	r2, r2
 8018c98:	e7c7      	b.n	8018c2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018c9a:	2000      	movs	r0, #0
 8018c9c:	e7d0      	b.n	8018c40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018c9e:	4563      	cmp	r3, ip
 8018ca0:	dd81      	ble.n	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ca2:	8a63      	ldrh	r3, [r4, #18]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	f43f af7e 	beq.w	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018caa:	2301      	movs	r3, #1
 8018cac:	8ba2      	ldrh	r2, [r4, #28]
 8018cae:	77a3      	strb	r3, [r4, #30]
 8018cb0:	8b63      	ldrh	r3, [r4, #26]
 8018cb2:	4413      	add	r3, r2
 8018cb4:	8363      	strh	r3, [r4, #26]
 8018cb6:	b007      	add	sp, #28
 8018cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	4611      	mov	r1, r2
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f7ff ff42 	bl	8018b4a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018cc6:	e76e      	b.n	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018cc8:	4563      	cmp	r3, ip
 8018cca:	dd14      	ble.n	8018cf6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018ccc:	9b02      	ldr	r3, [sp, #8]
 8018cce:	b113      	cbz	r3, 8018cd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018cd0:	2301      	movs	r3, #1
 8018cd2:	460a      	mov	r2, r1
 8018cd4:	e783      	b.n	8018bde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018cd6:	9b01      	ldr	r3, [sp, #4]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	f43f af64 	beq.w	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018cde:	2800      	cmp	r0, #0
 8018ce0:	f47f af61 	bne.w	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ce4:	b116      	cbz	r6, 8018cec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	462a      	mov	r2, r5
 8018cea:	e779      	b.n	8018be0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8018cec:	8a63      	ldrh	r3, [r4, #18]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	f43f af59 	beq.w	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018cf4:	e7df      	b.n	8018cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	f47f af55 	bne.w	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018cfc:	2e00      	cmp	r6, #0
 8018cfe:	f43f af52 	beq.w	8018ba6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018d02:	2301      	movs	r3, #1
 8018d04:	462a      	mov	r2, r5
 8018d06:	e7db      	b.n	8018cc0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08018d08 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018d08:	b530      	push	{r4, r5, lr}
 8018d0a:	4605      	mov	r5, r0
 8018d0c:	b08b      	sub	sp, #44	; 0x2c
 8018d0e:	b191      	cbz	r1, 8018d36 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8018d10:	2401      	movs	r4, #1
 8018d12:	e9cd 3100 	strd	r3, r1, [sp]
 8018d16:	4613      	mov	r3, r2
 8018d18:	4601      	mov	r1, r0
 8018d1a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018d1e:	a802      	add	r0, sp, #8
 8018d20:	f7ff fd0b 	bl	801873a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018d24:	2100      	movs	r1, #0
 8018d26:	a802      	add	r0, sp, #8
 8018d28:	f7ff ff1f 	bl	8018b6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018d2c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018d30:	b163      	cbz	r3, 8018d4c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018d32:	3401      	adds	r4, #1
 8018d34:	e7f6      	b.n	8018d24 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018d36:	2401      	movs	r4, #1
 8018d38:	f002 f98e 	bl	801b058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018d3c:	280a      	cmp	r0, #10
 8018d3e:	4628      	mov	r0, r5
 8018d40:	bf08      	it	eq
 8018d42:	3401      	addeq	r4, #1
 8018d44:	f002 f988 	bl	801b058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	d1f7      	bne.n	8018d3c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018d4c:	b2a0      	uxth	r0, r4
 8018d4e:	b00b      	add	sp, #44	; 0x2c
 8018d50:	bd30      	pop	{r4, r5, pc}

08018d52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d56:	b0db      	sub	sp, #364	; 0x16c
 8018d58:	4689      	mov	r9, r1
 8018d5a:	461c      	mov	r4, r3
 8018d5c:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8018d60:	900a      	str	r0, [sp, #40]	; 0x28
 8018d62:	f1ba 0f00 	cmp.w	sl, #0
 8018d66:	f000 80a5 	beq.w	8018eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	f000 80a1 	beq.w	8018eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018d72:	7ba3      	ldrb	r3, [r4, #14]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	f000 809d 	beq.w	8018eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018d7a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8018d7e:	6810      	ldr	r0, [r2, #0]
 8018d80:	6851      	ldr	r1, [r2, #4]
 8018d82:	2500      	movs	r5, #0
 8018d84:	4643      	mov	r3, r8
 8018d86:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018d8a:	950e      	str	r5, [sp, #56]	; 0x38
 8018d8c:	af18      	add	r7, sp, #96	; 0x60
 8018d8e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018d92:	79a2      	ldrb	r2, [r4, #6]
 8018d94:	c303      	stmia	r3!, {r0, r1}
 8018d96:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018d9a:	a90e      	add	r1, sp, #56	; 0x38
 8018d9c:	4640      	mov	r0, r8
 8018d9e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018da2:	f7ff fd40 	bl	8018826 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018da6:	a90e      	add	r1, sp, #56	; 0x38
 8018da8:	79a2      	ldrb	r2, [r4, #6]
 8018daa:	4608      	mov	r0, r1
 8018dac:	f7ff fd3b 	bl	8018826 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018db0:	4638      	mov	r0, r7
 8018db2:	f001 fd20 	bl	801a7f6 <_ZN8touchgfx12TextProviderC1Ev>
 8018db6:	6820      	ldr	r0, [r4, #0]
 8018db8:	6803      	ldr	r3, [r0, #0]
 8018dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dbc:	4798      	blx	r3
 8018dbe:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	4651      	mov	r1, sl
 8018dc4:	4638      	mov	r0, r7
 8018dc6:	f001 fd5b 	bl	801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018dca:	7923      	ldrb	r3, [r4, #4]
 8018dcc:	6820      	ldr	r0, [r4, #0]
 8018dce:	9308      	str	r3, [sp, #32]
 8018dd0:	6803      	ldr	r3, [r0, #0]
 8018dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dd4:	4798      	blx	r3
 8018dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dda:	181e      	adds	r6, r3, r0
 8018ddc:	42ae      	cmp	r6, r5
 8018dde:	dd06      	ble.n	8018dee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8018de0:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8018de4:	4282      	cmp	r2, r0
 8018de6:	bfa4      	itt	ge
 8018de8:	189d      	addge	r5, r3, r2
 8018dea:	fb95 f5f6 	sdivge	r5, r5, r6
 8018dee:	a82e      	add	r0, sp, #184	; 0xb8
 8018df0:	f001 fd01 	bl	801a7f6 <_ZN8touchgfx12TextProviderC1Ev>
 8018df4:	7c23      	ldrb	r3, [r4, #16]
 8018df6:	b14b      	cbz	r3, 8018e0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 8018df8:	6820      	ldr	r0, [r4, #0]
 8018dfa:	6803      	ldr	r3, [r0, #0]
 8018dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dfe:	4798      	blx	r3
 8018e00:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018e02:	4603      	mov	r3, r0
 8018e04:	4651      	mov	r1, sl
 8018e06:	a82e      	add	r0, sp, #184	; 0xb8
 8018e08:	f001 fd3a 	bl	801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018e0c:	7c21      	ldrb	r1, [r4, #16]
 8018e0e:	a810      	add	r0, sp, #64	; 0x40
 8018e10:	7963      	ldrb	r3, [r4, #5]
 8018e12:	9101      	str	r1, [sp, #4]
 8018e14:	6821      	ldr	r1, [r4, #0]
 8018e16:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8018e1a:	9100      	str	r1, [sp, #0]
 8018e1c:	a92e      	add	r1, sp, #184	; 0xb8
 8018e1e:	f7ff fc8c 	bl	801873a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018e22:	7c23      	ldrb	r3, [r4, #16]
 8018e24:	b9bb      	cbnz	r3, 8018e56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8018e26:	fa1f fa86 	uxth.w	sl, r6
 8018e2a:	2d00      	cmp	r5, #0
 8018e2c:	dd45      	ble.n	8018eba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8018e2e:	4638      	mov	r0, r7
 8018e30:	f002 f912 	bl	801b058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018e34:	2800      	cmp	r0, #0
 8018e36:	d03d      	beq.n	8018eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018e38:	280a      	cmp	r0, #10
 8018e3a:	d1f6      	bne.n	8018e2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8018e3c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018e40:	3d01      	subs	r5, #1
 8018e42:	4453      	add	r3, sl
 8018e44:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018e48:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018e4c:	eba3 030a 	sub.w	r3, r3, sl
 8018e50:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018e54:	e7e9      	b.n	8018e2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8018e56:	0073      	lsls	r3, r6, #1
 8018e58:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8018e5c:	fa1f fa86 	uxth.w	sl, r6
 8018e60:	9309      	str	r3, [sp, #36]	; 0x24
 8018e62:	2d00      	cmp	r5, #0
 8018e64:	dd29      	ble.n	8018eba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8018e66:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018e6a:	a810      	add	r0, sp, #64	; 0x40
 8018e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e6e:	428b      	cmp	r3, r1
 8018e70:	bfd4      	ite	le
 8018e72:	2100      	movle	r1, #0
 8018e74:	2101      	movgt	r1, #1
 8018e76:	f7ff fe78 	bl	8018b6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018e7a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8018e7e:	3b01      	subs	r3, #1
 8018e80:	b29b      	uxth	r3, r3
 8018e82:	455b      	cmp	r3, fp
 8018e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8018e86:	d005      	beq.n	8018e94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018e88:	7961      	ldrb	r1, [r4, #5]
 8018e8a:	4638      	mov	r0, r7
 8018e8c:	f7f9 fc12 	bl	80126b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e92:	e7f4      	b.n	8018e7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8018e94:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018e98:	3d01      	subs	r5, #1
 8018e9a:	4453      	add	r3, sl
 8018e9c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018ea0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018ea4:	eba3 030a 	sub.w	r3, r3, sl
 8018ea8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018eac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d1d6      	bne.n	8018e62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8018eb4:	b05b      	add	sp, #364	; 0x16c
 8018eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eba:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8018ebe:	ad44      	add	r5, sp, #272	; 0x110
 8018ec0:	f04f 0b00 	mov.w	fp, #0
 8018ec4:	7c23      	ldrb	r3, [r4, #16]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d067      	beq.n	8018f9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8018eca:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018ece:	a810      	add	r0, sp, #64	; 0x40
 8018ed0:	458a      	cmp	sl, r1
 8018ed2:	bfd4      	ite	le
 8018ed4:	2100      	movle	r1, #0
 8018ed6:	2101      	movgt	r1, #1
 8018ed8:	f7ff fe47 	bl	8018b6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018edc:	9b08      	ldr	r3, [sp, #32]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d056      	beq.n	8018f90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018ee2:	7c23      	ldrb	r3, [r4, #16]
 8018ee4:	2258      	movs	r2, #88	; 0x58
 8018ee6:	4639      	mov	r1, r7
 8018ee8:	4628      	mov	r0, r5
 8018eea:	9309      	str	r3, [sp, #36]	; 0x24
 8018eec:	f00c fd14 	bl	8025918 <memcpy>
 8018ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d059      	beq.n	8018faa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8018ef6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018efa:	7922      	ldrb	r2, [r4, #4]
 8018efc:	2a01      	cmp	r2, #1
 8018efe:	d13d      	bne.n	8018f7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 8018f00:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018f04:	1ac0      	subs	r0, r0, r3
 8018f06:	2302      	movs	r3, #2
 8018f08:	fb90 f0f3 	sdiv	r0, r0, r3
 8018f0c:	b200      	sxth	r0, r0
 8018f0e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018f12:	4418      	add	r0, r3
 8018f14:	7c23      	ldrb	r3, [r4, #16]
 8018f16:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d03a      	beq.n	8018f94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8018f1e:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018f22:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8018f26:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018f2a:	9500      	str	r5, [sp, #0]
 8018f2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018f2e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018f32:	e9cd b703 	strd	fp, r7, [sp, #12]
 8018f36:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8018f3a:	464a      	mov	r2, r9
 8018f3c:	2100      	movs	r1, #0
 8018f3e:	f7ff fca3 	bl	8018888 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018f42:	2800      	cmp	r0, #0
 8018f44:	d1b6      	bne.n	8018eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018f46:	b2b2      	uxth	r2, r6
 8018f48:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018f4c:	4611      	mov	r1, r2
 8018f4e:	4413      	add	r3, r2
 8018f50:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018f54:	b21b      	sxth	r3, r3
 8018f56:	1a52      	subs	r2, r2, r1
 8018f58:	7c21      	ldrb	r1, [r4, #16]
 8018f5a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018f5e:	b212      	sxth	r2, r2
 8018f60:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8018f64:	b109      	cbz	r1, 8018f6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8018f66:	42b2      	cmp	r2, r6
 8018f68:	dba4      	blt.n	8018eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018f6a:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8018f6e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8018f72:	440a      	add	r2, r1
 8018f74:	b212      	sxth	r2, r2
 8018f76:	4293      	cmp	r3, r2
 8018f78:	dda4      	ble.n	8018ec4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8018f7a:	e79b      	b.n	8018eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8018f7c:	2a02      	cmp	r2, #2
 8018f7e:	d105      	bne.n	8018f8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8018f80:	7be2      	ldrb	r2, [r4, #15]
 8018f82:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8018f86:	1a80      	subs	r0, r0, r2
 8018f88:	1ac0      	subs	r0, r0, r3
 8018f8a:	e7bf      	b.n	8018f0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	e7be      	b.n	8018f0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8018f90:	7be0      	ldrb	r0, [r4, #15]
 8018f92:	e7bc      	b.n	8018f0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8018f94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018f98:	e7c3      	b.n	8018f22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8018f9a:	9b08      	ldr	r3, [sp, #32]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d0f7      	beq.n	8018f90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8018fa0:	2258      	movs	r2, #88	; 0x58
 8018fa2:	4639      	mov	r1, r7
 8018fa4:	4628      	mov	r0, r5
 8018fa6:	f00c fcb7 	bl	8025918 <memcpy>
 8018faa:	2300      	movs	r3, #0
 8018fac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018fb0:	6821      	ldr	r1, [r4, #0]
 8018fb2:	4628      	mov	r0, r5
 8018fb4:	f7ff fbfb 	bl	80187ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018fb8:	b203      	sxth	r3, r0
 8018fba:	e79e      	b.n	8018efa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08018fbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018fbc:	2b02      	cmp	r3, #2
 8018fbe:	b510      	push	{r4, lr}
 8018fc0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018fc4:	d00b      	beq.n	8018fde <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018fc6:	2b03      	cmp	r3, #3
 8018fc8:	d00e      	beq.n	8018fe8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018fca:	2b01      	cmp	r3, #1
 8018fcc:	d001      	beq.n	8018fd2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018fce:	1860      	adds	r0, r4, r1
 8018fd0:	bd10      	pop	{r4, pc}
 8018fd2:	8880      	ldrh	r0, [r0, #4]
 8018fd4:	4420      	add	r0, r4
 8018fd6:	b200      	sxth	r0, r0
 8018fd8:	1a80      	subs	r0, r0, r2
 8018fda:	3801      	subs	r0, #1
 8018fdc:	e7f8      	b.n	8018fd0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018fde:	8880      	ldrh	r0, [r0, #4]
 8018fe0:	4420      	add	r0, r4
 8018fe2:	b200      	sxth	r0, r0
 8018fe4:	1a40      	subs	r0, r0, r1
 8018fe6:	e7f8      	b.n	8018fda <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018fe8:	18a0      	adds	r0, r4, r2
 8018fea:	e7f1      	b.n	8018fd0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018fec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018fec:	2b02      	cmp	r3, #2
 8018fee:	b510      	push	{r4, lr}
 8018ff0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018ff4:	d006      	beq.n	8019004 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018ff6:	2b03      	cmp	r3, #3
 8018ff8:	d00a      	beq.n	8019010 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018ffa:	2b01      	cmp	r3, #1
 8018ffc:	bf14      	ite	ne
 8018ffe:	18a0      	addne	r0, r4, r2
 8019000:	1860      	addeq	r0, r4, r1
 8019002:	bd10      	pop	{r4, pc}
 8019004:	88c0      	ldrh	r0, [r0, #6]
 8019006:	4420      	add	r0, r4
 8019008:	b200      	sxth	r0, r0
 801900a:	1a80      	subs	r0, r0, r2
 801900c:	3801      	subs	r0, #1
 801900e:	e7f8      	b.n	8019002 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019010:	88c0      	ldrh	r0, [r0, #6]
 8019012:	4420      	add	r0, r4
 8019014:	b200      	sxth	r0, r0
 8019016:	1a40      	subs	r0, r0, r1
 8019018:	e7f8      	b.n	801900c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801901c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801901c:	4b01      	ldr	r3, [pc, #4]	; (8019024 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801901e:	2200      	movs	r2, #0
 8019020:	601a      	str	r2, [r3, #0]
 8019022:	4770      	bx	lr
 8019024:	2000b398 	.word	0x2000b398

08019028 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8019028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801902a:	1e05      	subs	r5, r0, #0
 801902c:	f04f 0601 	mov.w	r6, #1
 8019030:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8019034:	bfba      	itte	lt
 8019036:	f04f 37ff 	movlt.w	r7, #4294967295
 801903a:	426d      	neglt	r5, r5
 801903c:	2701      	movge	r7, #1
 801903e:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8019042:	f1be 0f00 	cmp.w	lr, #0
 8019046:	bfbc      	itt	lt
 8019048:	f1ce 0e00 	rsblt	lr, lr, #0
 801904c:	427f      	neglt	r7, r7
 801904e:	2c00      	cmp	r4, #0
 8019050:	fa4e f001 	asr.w	r0, lr, r1
 8019054:	fa06 f101 	lsl.w	r1, r6, r1
 8019058:	bfbc      	itt	lt
 801905a:	4264      	neglt	r4, r4
 801905c:	427f      	neglt	r7, r7
 801905e:	3901      	subs	r1, #1
 8019060:	ea01 010e 	and.w	r1, r1, lr
 8019064:	434d      	muls	r5, r1
 8019066:	f8dc 1000 	ldr.w	r1, [ip]
 801906a:	fb03 1300 	mla	r3, r3, r0, r1
 801906e:	fb95 f1f4 	sdiv	r1, r5, r4
 8019072:	fb04 5511 	mls	r5, r4, r1, r5
 8019076:	441d      	add	r5, r3
 8019078:	fb95 f3f4 	sdiv	r3, r5, r4
 801907c:	4419      	add	r1, r3
 801907e:	fb04 5413 	mls	r4, r4, r3, r5
 8019082:	fb02 1000 	mla	r0, r2, r0, r1
 8019086:	f8cc 4000 	str.w	r4, [ip]
 801908a:	4378      	muls	r0, r7
 801908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019090 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019094:	4c24      	ldr	r4, [pc, #144]	; (8019128 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8019096:	b086      	sub	sp, #24
 8019098:	4605      	mov	r5, r0
 801909a:	6807      	ldr	r7, [r0, #0]
 801909c:	69a3      	ldr	r3, [r4, #24]
 801909e:	b92b      	cbnz	r3, 80190ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 80190a0:	6840      	ldr	r0, [r0, #4]
 80190a2:	e9c5 7000 	strd	r7, r0, [r5]
 80190a6:	b006      	add	sp, #24
 80190a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190ac:	f04f 0802 	mov.w	r8, #2
 80190b0:	68a2      	ldr	r2, [r4, #8]
 80190b2:	ae06      	add	r6, sp, #24
 80190b4:	6820      	ldr	r0, [r4, #0]
 80190b6:	fb93 f1f8 	sdiv	r1, r3, r8
 80190ba:	440a      	add	r2, r1
 80190bc:	69e1      	ldr	r1, [r4, #28]
 80190be:	f846 2d04 	str.w	r2, [r6, #-4]!
 80190c2:	9700      	str	r7, [sp, #0]
 80190c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80190c6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80190ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80190cc:	f7ff ffac 	bl	8019028 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80190d0:	69a3      	ldr	r3, [r4, #24]
 80190d2:	4607      	mov	r7, r0
 80190d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80190d6:	9301      	str	r3, [sp, #4]
 80190d8:	686b      	ldr	r3, [r5, #4]
 80190da:	6a21      	ldr	r1, [r4, #32]
 80190dc:	9300      	str	r3, [sp, #0]
 80190de:	9602      	str	r6, [sp, #8]
 80190e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80190e2:	6860      	ldr	r0, [r4, #4]
 80190e4:	f7ff ffa0 	bl	8019028 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80190e8:	69a2      	ldr	r2, [r4, #24]
 80190ea:	6963      	ldr	r3, [r4, #20]
 80190ec:	4407      	add	r7, r0
 80190ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80190f0:	68e0      	ldr	r0, [r4, #12]
 80190f2:	fb92 f8f8 	sdiv	r8, r2, r8
 80190f6:	4443      	add	r3, r8
 80190f8:	9305      	str	r3, [sp, #20]
 80190fa:	682b      	ldr	r3, [r5, #0]
 80190fc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8019100:	9300      	str	r3, [sp, #0]
 8019102:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019104:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019106:	f7ff ff8f 	bl	8019028 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801910a:	69a3      	ldr	r3, [r4, #24]
 801910c:	4680      	mov	r8, r0
 801910e:	9602      	str	r6, [sp, #8]
 8019110:	9301      	str	r3, [sp, #4]
 8019112:	686b      	ldr	r3, [r5, #4]
 8019114:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019116:	9300      	str	r3, [sp, #0]
 8019118:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801911a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801911c:	6920      	ldr	r0, [r4, #16]
 801911e:	f7ff ff83 	bl	8019028 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019122:	4440      	add	r0, r8
 8019124:	e7bd      	b.n	80190a2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8019126:	bf00      	nop
 8019128:	2000b39c 	.word	0x2000b39c

0801912c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801912c:	4b07      	ldr	r3, [pc, #28]	; (801914c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801912e:	b510      	push	{r4, lr}
 8019130:	781b      	ldrb	r3, [r3, #0]
 8019132:	2b01      	cmp	r3, #1
 8019134:	d108      	bne.n	8019148 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019136:	4b06      	ldr	r3, [pc, #24]	; (8019150 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019138:	880c      	ldrh	r4, [r1, #0]
 801913a:	881b      	ldrh	r3, [r3, #0]
 801913c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019140:	3b01      	subs	r3, #1
 8019142:	1b1b      	subs	r3, r3, r4
 8019144:	8003      	strh	r3, [r0, #0]
 8019146:	800a      	strh	r2, [r1, #0]
 8019148:	bd10      	pop	{r4, pc}
 801914a:	bf00      	nop
 801914c:	2000b368 	.word	0x2000b368
 8019150:	2000b36c 	.word	0x2000b36c

08019154 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019154:	4b0a      	ldr	r3, [pc, #40]	; (8019180 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019156:	b510      	push	{r4, lr}
 8019158:	781b      	ldrb	r3, [r3, #0]
 801915a:	2b01      	cmp	r3, #1
 801915c:	d10e      	bne.n	801917c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801915e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019162:	8843      	ldrh	r3, [r0, #2]
 8019164:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019168:	18ca      	adds	r2, r1, r3
 801916a:	4b06      	ldr	r3, [pc, #24]	; (8019184 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801916c:	8044      	strh	r4, [r0, #2]
 801916e:	881b      	ldrh	r3, [r3, #0]
 8019170:	1a9b      	subs	r3, r3, r2
 8019172:	8003      	strh	r3, [r0, #0]
 8019174:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019178:	8081      	strh	r1, [r0, #4]
 801917a:	80c3      	strh	r3, [r0, #6]
 801917c:	bd10      	pop	{r4, pc}
 801917e:	bf00      	nop
 8019180:	2000b368 	.word	0x2000b368
 8019184:	2000b364 	.word	0x2000b364

08019188 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019188:	4b07      	ldr	r3, [pc, #28]	; (80191a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801918a:	b510      	push	{r4, lr}
 801918c:	781b      	ldrb	r3, [r3, #0]
 801918e:	2b01      	cmp	r3, #1
 8019190:	d108      	bne.n	80191a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019192:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019196:	f9b0 4000 	ldrsh.w	r4, [r0]
 801919a:	8003      	strh	r3, [r0, #0]
 801919c:	8893      	ldrh	r3, [r2, #4]
 801919e:	3b01      	subs	r3, #1
 80191a0:	1b1b      	subs	r3, r3, r4
 80191a2:	800b      	strh	r3, [r1, #0]
 80191a4:	bd10      	pop	{r4, pc}
 80191a6:	bf00      	nop
 80191a8:	2000b368 	.word	0x2000b368

080191ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80191ac:	4b08      	ldr	r3, [pc, #32]	; (80191d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80191ae:	b513      	push	{r0, r1, r4, lr}
 80191b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80191b4:	2400      	movs	r4, #0
 80191b6:	4b07      	ldr	r3, [pc, #28]	; (80191d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 80191b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80191bc:	466a      	mov	r2, sp
 80191be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191c2:	9400      	str	r4, [sp, #0]
 80191c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80191c8:	f7ff ffde 	bl	8019188 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80191cc:	b002      	add	sp, #8
 80191ce:	bd10      	pop	{r4, pc}
 80191d0:	2000b364 	.word	0x2000b364
 80191d4:	2000b366 	.word	0x2000b366

080191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80191d8:	4b0a      	ldr	r3, [pc, #40]	; (8019204 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80191da:	460a      	mov	r2, r1
 80191dc:	b510      	push	{r4, lr}
 80191de:	781b      	ldrb	r3, [r3, #0]
 80191e0:	2b01      	cmp	r3, #1
 80191e2:	d10d      	bne.n	8019200 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80191e4:	8881      	ldrh	r1, [r0, #4]
 80191e6:	8803      	ldrh	r3, [r0, #0]
 80191e8:	440b      	add	r3, r1
 80191ea:	4601      	mov	r1, r0
 80191ec:	3b01      	subs	r3, #1
 80191ee:	f821 3b02 	strh.w	r3, [r1], #2
 80191f2:	f7ff ffc9 	bl	8019188 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80191f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80191fa:	88c2      	ldrh	r2, [r0, #6]
 80191fc:	80c3      	strh	r3, [r0, #6]
 80191fe:	8082      	strh	r2, [r0, #4]
 8019200:	bd10      	pop	{r4, pc}
 8019202:	bf00      	nop
 8019204:	2000b368 	.word	0x2000b368

08019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019208:	4b09      	ldr	r3, [pc, #36]	; (8019230 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801920a:	b507      	push	{r0, r1, r2, lr}
 801920c:	2100      	movs	r1, #0
 801920e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019212:	4b08      	ldr	r3, [pc, #32]	; (8019234 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019214:	9100      	str	r1, [sp, #0]
 8019216:	4669      	mov	r1, sp
 8019218:	f9b3 3000 	ldrsh.w	r3, [r3]
 801921c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019220:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019224:	f7ff ffd8 	bl	80191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019228:	b003      	add	sp, #12
 801922a:	f85d fb04 	ldr.w	pc, [sp], #4
 801922e:	bf00      	nop
 8019230:	2000b364 	.word	0x2000b364
 8019234:	2000b366 	.word	0x2000b366

08019238 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019238:	4b06      	ldr	r3, [pc, #24]	; (8019254 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801923a:	2100      	movs	r1, #0
 801923c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019240:	4b05      	ldr	r3, [pc, #20]	; (8019258 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019242:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019246:	f9b3 3000 	ldrsh.w	r3, [r3]
 801924a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801924e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019252:	4770      	bx	lr
 8019254:	2000b364 	.word	0x2000b364
 8019258:	2000b366 	.word	0x2000b366

0801925c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801925c:	4b03      	ldr	r3, [pc, #12]	; (801926c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801925e:	6818      	ldr	r0, [r3, #0]
 8019260:	b110      	cbz	r0, 8019268 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019262:	6803      	ldr	r3, [r0, #0]
 8019264:	699b      	ldr	r3, [r3, #24]
 8019266:	4718      	bx	r3
 8019268:	4770      	bx	lr
 801926a:	bf00      	nop
 801926c:	2000b3ec 	.word	0x2000b3ec

08019270 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019270:	4770      	bx	lr
	...

08019274 <_ZN8touchgfx11Application4drawEv>:
 8019274:	4b09      	ldr	r3, [pc, #36]	; (801929c <_ZN8touchgfx11Application4drawEv+0x28>)
 8019276:	b507      	push	{r0, r1, r2, lr}
 8019278:	f9b3 2000 	ldrsh.w	r2, [r3]
 801927c:	2100      	movs	r1, #0
 801927e:	4b08      	ldr	r3, [pc, #32]	; (80192a0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019280:	9100      	str	r1, [sp, #0]
 8019282:	4669      	mov	r1, sp
 8019284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019288:	f8ad 2004 	strh.w	r2, [sp, #4]
 801928c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019290:	6803      	ldr	r3, [r0, #0]
 8019292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019294:	4798      	blx	r3
 8019296:	b003      	add	sp, #12
 8019298:	f85d fb04 	ldr.w	pc, [sp], #4
 801929c:	2000b364 	.word	0x2000b364
 80192a0:	2000b366 	.word	0x2000b366

080192a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80192a4:	4b03      	ldr	r3, [pc, #12]	; (80192b4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80192a6:	6818      	ldr	r0, [r3, #0]
 80192a8:	b110      	cbz	r0, 80192b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80192aa:	6803      	ldr	r3, [r0, #0]
 80192ac:	69db      	ldr	r3, [r3, #28]
 80192ae:	4718      	bx	r3
 80192b0:	4770      	bx	lr
 80192b2:	bf00      	nop
 80192b4:	2000b3ec 	.word	0x2000b3ec

080192b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80192b8:	4b03      	ldr	r3, [pc, #12]	; (80192c8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80192ba:	6818      	ldr	r0, [r3, #0]
 80192bc:	b110      	cbz	r0, 80192c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80192be:	6803      	ldr	r3, [r0, #0]
 80192c0:	6a1b      	ldr	r3, [r3, #32]
 80192c2:	4718      	bx	r3
 80192c4:	4770      	bx	lr
 80192c6:	bf00      	nop
 80192c8:	2000b3ec 	.word	0x2000b3ec

080192cc <_ZN8touchgfx11Application14handleKeyEventEh>:
 80192cc:	4b03      	ldr	r3, [pc, #12]	; (80192dc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80192ce:	6818      	ldr	r0, [r3, #0]
 80192d0:	b110      	cbz	r0, 80192d8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80192d2:	6803      	ldr	r3, [r0, #0]
 80192d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192d6:	4718      	bx	r3
 80192d8:	4770      	bx	lr
 80192da:	bf00      	nop
 80192dc:	2000b3ec 	.word	0x2000b3ec

080192e0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80192e0:	b570      	push	{r4, r5, r6, lr}
 80192e2:	4d34      	ldr	r5, [pc, #208]	; (80193b4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80192e4:	4604      	mov	r4, r0
 80192e6:	6828      	ldr	r0, [r5, #0]
 80192e8:	b140      	cbz	r0, 80192fc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80192ea:	7a03      	ldrb	r3, [r0, #8]
 80192ec:	b933      	cbnz	r3, 80192fc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80192ee:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80192f2:	6803      	ldr	r3, [r0, #0]
 80192f4:	689b      	ldr	r3, [r3, #8]
 80192f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192fa:	4718      	bx	r3
 80192fc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8019300:	b97b      	cbnz	r3, 8019322 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019302:	b170      	cbz	r0, 8019322 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019304:	7a03      	ldrb	r3, [r0, #8]
 8019306:	b163      	cbz	r3, 8019322 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019308:	4b2b      	ldr	r3, [pc, #172]	; (80193b8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801930a:	6818      	ldr	r0, [r3, #0]
 801930c:	b110      	cbz	r0, 8019314 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801930e:	6803      	ldr	r3, [r0, #0]
 8019310:	691b      	ldr	r3, [r3, #16]
 8019312:	4798      	blx	r3
 8019314:	6828      	ldr	r0, [r5, #0]
 8019316:	6803      	ldr	r3, [r0, #0]
 8019318:	68db      	ldr	r3, [r3, #12]
 801931a:	4798      	blx	r3
 801931c:	2301      	movs	r3, #1
 801931e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019322:	2500      	movs	r5, #0
 8019324:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019328:	42a8      	cmp	r0, r5
 801932a:	dd0c      	ble.n	8019346 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801932c:	1963      	adds	r3, r4, r5
 801932e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019332:	b132      	cbz	r2, 8019342 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019334:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019338:	4413      	add	r3, r2
 801933a:	6858      	ldr	r0, [r3, #4]
 801933c:	6803      	ldr	r3, [r0, #0]
 801933e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019340:	4798      	blx	r3
 8019342:	3501      	adds	r5, #1
 8019344:	e7ee      	b.n	8019324 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019346:	2300      	movs	r3, #0
 8019348:	461a      	mov	r2, r3
 801934a:	4298      	cmp	r0, r3
 801934c:	d114      	bne.n	8019378 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801934e:	1d25      	adds	r5, r4, #4
 8019350:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019354:	1e48      	subs	r0, r1, #1
 8019356:	b280      	uxth	r0, r0
 8019358:	4291      	cmp	r1, r2
 801935a:	dd24      	ble.n	80193a6 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801935c:	4288      	cmp	r0, r1
 801935e:	d2fb      	bcs.n	8019358 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019360:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019364:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8019368:	3304      	adds	r3, #4
 801936a:	428b      	cmp	r3, r1
 801936c:	d018      	beq.n	80193a0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801936e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019372:	f843 6c04 	str.w	r6, [r3, #-4]
 8019376:	e7f8      	b.n	801936a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8019378:	18e1      	adds	r1, r4, r3
 801937a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801937e:	b16d      	cbz	r5, 801939c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019380:	429a      	cmp	r2, r3
 8019382:	d00a      	beq.n	801939a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019384:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019388:	4431      	add	r1, r6
 801938a:	684e      	ldr	r6, [r1, #4]
 801938c:	b291      	uxth	r1, r2
 801938e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019392:	604e      	str	r6, [r1, #4]
 8019394:	18a1      	adds	r1, r4, r2
 8019396:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801939a:	3201      	adds	r2, #1
 801939c:	3301      	adds	r3, #1
 801939e:	e7d4      	b.n	801934a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80193a0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 80193a4:	e7d4      	b.n	8019350 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 80193a6:	4b04      	ldr	r3, [pc, #16]	; (80193b8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80193a8:	6818      	ldr	r0, [r3, #0]
 80193aa:	b110      	cbz	r0, 80193b2 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 80193ac:	6803      	ldr	r3, [r0, #0]
 80193ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193b0:	e7a1      	b.n	80192f6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80193b2:	bd70      	pop	{r4, r5, r6, pc}
 80193b4:	2000b3f0 	.word	0x2000b3f0
 80193b8:	2000b3ec 	.word	0x2000b3ec

080193bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80193bc:	b570      	push	{r4, r5, r6, lr}
 80193be:	4606      	mov	r6, r0
 80193c0:	460c      	mov	r4, r1
 80193c2:	b929      	cbnz	r1, 80193d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80193c4:	4b0c      	ldr	r3, [pc, #48]	; (80193f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80193c6:	2165      	movs	r1, #101	; 0x65
 80193c8:	4a0c      	ldr	r2, [pc, #48]	; (80193fc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80193ca:	480d      	ldr	r0, [pc, #52]	; (8019400 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80193cc:	f00c fa26 	bl	802581c <__assert_func>
 80193d0:	2300      	movs	r3, #0
 80193d2:	4d0c      	ldr	r5, [pc, #48]	; (8019404 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80193d4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80193d8:	6828      	ldr	r0, [r5, #0]
 80193da:	b110      	cbz	r0, 80193e2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80193dc:	6803      	ldr	r3, [r0, #0]
 80193de:	695b      	ldr	r3, [r3, #20]
 80193e0:	4798      	blx	r3
 80193e2:	602c      	str	r4, [r5, #0]
 80193e4:	4620      	mov	r0, r4
 80193e6:	6823      	ldr	r3, [r4, #0]
 80193e8:	68db      	ldr	r3, [r3, #12]
 80193ea:	4798      	blx	r3
 80193ec:	6833      	ldr	r3, [r6, #0]
 80193ee:	4630      	mov	r0, r6
 80193f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193f6:	4718      	bx	r3
 80193f8:	0802a338 	.word	0x0802a338
 80193fc:	0802a408 	.word	0x0802a408
 8019400:	0802a342 	.word	0x0802a342
 8019404:	2000b3ec 	.word	0x2000b3ec

08019408 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019408:	b510      	push	{r4, lr}
 801940a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801940e:	888a      	ldrh	r2, [r1, #4]
 8019410:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019414:	4422      	add	r2, r4
 8019416:	b212      	sxth	r2, r2
 8019418:	4293      	cmp	r3, r2
 801941a:	da15      	bge.n	8019448 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801941c:	8882      	ldrh	r2, [r0, #4]
 801941e:	4413      	add	r3, r2
 8019420:	b21b      	sxth	r3, r3
 8019422:	429c      	cmp	r4, r3
 8019424:	da10      	bge.n	8019448 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019426:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801942a:	88c9      	ldrh	r1, [r1, #6]
 801942c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019430:	4419      	add	r1, r3
 8019432:	b209      	sxth	r1, r1
 8019434:	428a      	cmp	r2, r1
 8019436:	da07      	bge.n	8019448 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019438:	88c0      	ldrh	r0, [r0, #6]
 801943a:	4410      	add	r0, r2
 801943c:	b200      	sxth	r0, r0
 801943e:	4283      	cmp	r3, r0
 8019440:	bfac      	ite	ge
 8019442:	2000      	movge	r0, #0
 8019444:	2001      	movlt	r0, #1
 8019446:	bd10      	pop	{r4, pc}
 8019448:	2000      	movs	r0, #0
 801944a:	e7fc      	b.n	8019446 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801944c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801944c:	b570      	push	{r4, r5, r6, lr}
 801944e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019452:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019456:	42ac      	cmp	r4, r5
 8019458:	db18      	blt.n	801948c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801945a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801945e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019462:	429a      	cmp	r2, r3
 8019464:	db12      	blt.n	801948c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019466:	8886      	ldrh	r6, [r0, #4]
 8019468:	4435      	add	r5, r6
 801946a:	888e      	ldrh	r6, [r1, #4]
 801946c:	4434      	add	r4, r6
 801946e:	b22d      	sxth	r5, r5
 8019470:	b224      	sxth	r4, r4
 8019472:	42a5      	cmp	r5, r4
 8019474:	db0a      	blt.n	801948c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019476:	88c0      	ldrh	r0, [r0, #6]
 8019478:	4418      	add	r0, r3
 801947a:	88cb      	ldrh	r3, [r1, #6]
 801947c:	441a      	add	r2, r3
 801947e:	b200      	sxth	r0, r0
 8019480:	b212      	sxth	r2, r2
 8019482:	4290      	cmp	r0, r2
 8019484:	bfb4      	ite	lt
 8019486:	2000      	movlt	r0, #0
 8019488:	2001      	movge	r0, #1
 801948a:	bd70      	pop	{r4, r5, r6, pc}
 801948c:	2000      	movs	r0, #0
 801948e:	e7fc      	b.n	801948a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08019490 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019492:	4604      	mov	r4, r0
 8019494:	4608      	mov	r0, r1
 8019496:	460d      	mov	r5, r1
 8019498:	f7fc fb95 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801949c:	b978      	cbnz	r0, 80194be <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801949e:	4620      	mov	r0, r4
 80194a0:	f7fc fb91 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80194a4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80194a8:	b150      	cbz	r0, 80194c0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80194aa:	8026      	strh	r6, [r4, #0]
 80194ac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80194b0:	8063      	strh	r3, [r4, #2]
 80194b2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80194b6:	80a3      	strh	r3, [r4, #4]
 80194b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80194bc:	80e3      	strh	r3, [r4, #6]
 80194be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194c0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80194c4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80194c8:	42b1      	cmp	r1, r6
 80194ca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80194ce:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80194d2:	460f      	mov	r7, r1
 80194d4:	88ed      	ldrh	r5, [r5, #6]
 80194d6:	bfa8      	it	ge
 80194d8:	4637      	movge	r7, r6
 80194da:	4293      	cmp	r3, r2
 80194dc:	4618      	mov	r0, r3
 80194de:	4466      	add	r6, ip
 80194e0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80194e4:	bfa8      	it	ge
 80194e6:	4610      	movge	r0, r2
 80194e8:	442a      	add	r2, r5
 80194ea:	88e5      	ldrh	r5, [r4, #6]
 80194ec:	4461      	add	r1, ip
 80194ee:	b236      	sxth	r6, r6
 80194f0:	8027      	strh	r7, [r4, #0]
 80194f2:	442b      	add	r3, r5
 80194f4:	b209      	sxth	r1, r1
 80194f6:	b212      	sxth	r2, r2
 80194f8:	8060      	strh	r0, [r4, #2]
 80194fa:	b21b      	sxth	r3, r3
 80194fc:	428e      	cmp	r6, r1
 80194fe:	bfac      	ite	ge
 8019500:	ebc7 0106 	rsbge	r1, r7, r6
 8019504:	ebc7 0101 	rsblt	r1, r7, r1
 8019508:	429a      	cmp	r2, r3
 801950a:	bfac      	ite	ge
 801950c:	ebc0 0202 	rsbge	r2, r0, r2
 8019510:	ebc0 0203 	rsblt	r2, r0, r3
 8019514:	80a1      	strh	r1, [r4, #4]
 8019516:	80e2      	strh	r2, [r4, #6]
 8019518:	e7d1      	b.n	80194be <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801951c <_ZN8touchgfx11Application11getInstanceEv>:
 801951c:	4b01      	ldr	r3, [pc, #4]	; (8019524 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801951e:	6818      	ldr	r0, [r3, #0]
 8019520:	4770      	bx	lr
 8019522:	bf00      	nop
 8019524:	2000b3fc 	.word	0x2000b3fc

08019528 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8019528:	b570      	push	{r4, r5, r6, lr}
 801952a:	2300      	movs	r3, #0
 801952c:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8019530:	1d04      	adds	r4, r0, #4
 8019532:	b29a      	uxth	r2, r3
 8019534:	4296      	cmp	r6, r2
 8019536:	d90a      	bls.n	801954e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8019538:	f854 2b04 	ldr.w	r2, [r4], #4
 801953c:	428a      	cmp	r2, r1
 801953e:	d107      	bne.n	8019550 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019540:	18c5      	adds	r5, r0, r3
 8019542:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8019546:	b11a      	cbz	r2, 8019550 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019548:	3a01      	subs	r2, #1
 801954a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801954e:	bd70      	pop	{r4, r5, r6, pc}
 8019550:	3301      	adds	r3, #1
 8019552:	e7ee      	b.n	8019532 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019554:	2300      	movs	r3, #0
 8019556:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801955a:	30a8      	adds	r0, #168	; 0xa8
 801955c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019560:	f802 3b01 	strb.w	r3, [r2], #1
 8019564:	4282      	cmp	r2, r0
 8019566:	d1fb      	bne.n	8019560 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019568:	4770      	bx	lr

0801956a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801956a:	4603      	mov	r3, r0
 801956c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019570:	2200      	movs	r2, #0
 8019572:	801a      	strh	r2, [r3, #0]
 8019574:	3308      	adds	r3, #8
 8019576:	f823 2c06 	strh.w	r2, [r3, #-6]
 801957a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801957e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019582:	428b      	cmp	r3, r1
 8019584:	d1f5      	bne.n	8019572 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019586:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801958a:	4770      	bx	lr

0801958c <_ZN8touchgfx11ApplicationC1Ev>:
 801958c:	b570      	push	{r4, r5, r6, lr}
 801958e:	4b1a      	ldr	r3, [pc, #104]	; (80195f8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019590:	2500      	movs	r5, #0
 8019592:	4604      	mov	r4, r0
 8019594:	30a8      	adds	r0, #168	; 0xa8
 8019596:	f840 3ca8 	str.w	r3, [r0, #-168]
 801959a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801959e:	f7ff ffe4 	bl	801956a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80195a2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80195a6:	f7ff ffe0 	bl	801956a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80195aa:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80195ae:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80195b2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80195b6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80195ba:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80195be:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80195c2:	490e      	ldr	r1, [pc, #56]	; (80195fc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80195c4:	480e      	ldr	r0, [pc, #56]	; (8019600 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80195c6:	f00a fc05 	bl	8023dd4 <CRC_Lock>
 80195ca:	4e0e      	ldr	r6, [pc, #56]	; (8019604 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80195cc:	4b0e      	ldr	r3, [pc, #56]	; (8019608 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80195ce:	b158      	cbz	r0, 80195e8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 80195d0:	801d      	strh	r5, [r3, #0]
 80195d2:	2300      	movs	r3, #0
 80195d4:	4a0d      	ldr	r2, [pc, #52]	; (801960c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80195d6:	4620      	mov	r0, r4
 80195d8:	6013      	str	r3, [r2, #0]
 80195da:	4a0d      	ldr	r2, [pc, #52]	; (8019610 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80195dc:	6033      	str	r3, [r6, #0]
 80195de:	6013      	str	r3, [r2, #0]
 80195e0:	f7ff ffb8 	bl	8019554 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80195e4:	4620      	mov	r0, r4
 80195e6:	bd70      	pop	{r4, r5, r6, pc}
 80195e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80195ec:	2002      	movs	r0, #2
 80195ee:	801a      	strh	r2, [r3, #0]
 80195f0:	6030      	str	r0, [r6, #0]
 80195f2:	f000 ff83 	bl	801a4fc <_ZN8touchgfx6Screen4drawEv>
 80195f6:	e7ec      	b.n	80195d2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 80195f8:	0802a3cc 	.word	0x0802a3cc
 80195fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8019600:	f407a5c2 	.word	0xf407a5c2
 8019604:	2000b3ec 	.word	0x2000b3ec
 8019608:	20000040 	.word	0x20000040
 801960c:	2000b3fc 	.word	0x2000b3fc
 8019610:	2000b3f0 	.word	0x2000b3f0

08019614 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019614:	2300      	movs	r3, #0
 8019616:	8003      	strh	r3, [r0, #0]
 8019618:	8043      	strh	r3, [r0, #2]
 801961a:	8083      	strh	r3, [r0, #4]
 801961c:	80c3      	strh	r3, [r0, #6]
 801961e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8019622:	4293      	cmp	r3, r2
 8019624:	b530      	push	{r4, r5, lr}
 8019626:	d912      	bls.n	801964e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019628:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801962c:	3b01      	subs	r3, #1
 801962e:	6825      	ldr	r5, [r4, #0]
 8019630:	b29b      	uxth	r3, r3
 8019632:	6005      	str	r5, [r0, #0]
 8019634:	4293      	cmp	r3, r2
 8019636:	6865      	ldr	r5, [r4, #4]
 8019638:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801963c:	6045      	str	r5, [r0, #4]
 801963e:	d906      	bls.n	801964e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8019640:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019644:	681d      	ldr	r5, [r3, #0]
 8019646:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801964a:	685d      	ldr	r5, [r3, #4]
 801964c:	6065      	str	r5, [r4, #4]
 801964e:	bd30      	pop	{r4, r5, pc}

08019650 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8019650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019652:	466b      	mov	r3, sp
 8019654:	4604      	mov	r4, r0
 8019656:	e883 0006 	stmia.w	r3, {r1, r2}
 801965a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801965e:	2a07      	cmp	r2, #7
 8019660:	d906      	bls.n	8019670 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8019662:	4b09      	ldr	r3, [pc, #36]	; (8019688 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019664:	f240 118f 	movw	r1, #399	; 0x18f
 8019668:	4a08      	ldr	r2, [pc, #32]	; (801968c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801966a:	4809      	ldr	r0, [pc, #36]	; (8019690 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801966c:	f00c f8d6 	bl	802581c <__assert_func>
 8019670:	1c51      	adds	r1, r2, #1
 8019672:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8019676:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801967a:	cb03      	ldmia	r3!, {r0, r1}
 801967c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019680:	6069      	str	r1, [r5, #4]
 8019682:	b003      	add	sp, #12
 8019684:	bd30      	pop	{r4, r5, pc}
 8019686:	bf00      	nop
 8019688:	0802a36c 	.word	0x0802a36c
 801968c:	0802a44c 	.word	0x0802a44c
 8019690:	0802a39b 	.word	0x0802a39b

08019694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019698:	b089      	sub	sp, #36	; 0x24
 801969a:	4606      	mov	r6, r0
 801969c:	466c      	mov	r4, sp
 801969e:	4620      	mov	r0, r4
 80196a0:	e884 0006 	stmia.w	r4, {r1, r2}
 80196a4:	f7fc fa8f 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80196a8:	bbb0      	cbnz	r0, 8019718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80196aa:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80196ae:	b1fd      	cbz	r5, 80196f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80196b0:	3d01      	subs	r5, #1
 80196b2:	af04      	add	r7, sp, #16
 80196b4:	f04f 090a 	mov.w	r9, #10
 80196b8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80196bc:	ab02      	add	r3, sp, #8
 80196be:	fa1f f885 	uxth.w	r8, r5
 80196c2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80196c6:	6851      	ldr	r1, [r2, #4]
 80196c8:	c303      	stmia	r3!, {r0, r1}
 80196ca:	4621      	mov	r1, r4
 80196cc:	a802      	add	r0, sp, #8
 80196ce:	f7ff febd 	bl	801944c <_ZNK8touchgfx4Rect8includesERKS0_>
 80196d2:	bb08      	cbnz	r0, 8019718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80196d4:	a902      	add	r1, sp, #8
 80196d6:	4620      	mov	r0, r4
 80196d8:	f7ff feb8 	bl	801944c <_ZNK8touchgfx4Rect8includesERKS0_>
 80196dc:	b1f8      	cbz	r0, 801971e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80196de:	4642      	mov	r2, r8
 80196e0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80196e4:	a806      	add	r0, sp, #24
 80196e6:	f7ff ff95 	bl	8019614 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80196ea:	f115 35ff 	adds.w	r5, r5, #4294967295
 80196ee:	d2e3      	bcs.n	80196b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80196f0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80196f4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80196f8:	2b08      	cmp	r3, #8
 80196fa:	d108      	bne.n	801970e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80196fc:	4629      	mov	r1, r5
 80196fe:	a806      	add	r0, sp, #24
 8019700:	2207      	movs	r2, #7
 8019702:	f7ff ff87 	bl	8019614 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019706:	a906      	add	r1, sp, #24
 8019708:	4620      	mov	r0, r4
 801970a:	f7ff fec1 	bl	8019490 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801970e:	4628      	mov	r0, r5
 8019710:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019714:	f7ff ff9c 	bl	8019650 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019718:	b009      	add	sp, #36	; 0x24
 801971a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801971e:	4621      	mov	r1, r4
 8019720:	a802      	add	r0, sp, #8
 8019722:	f7ff fe71 	bl	8019408 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019726:	b150      	cbz	r0, 801973e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8019728:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801972c:	a806      	add	r0, sp, #24
 801972e:	4642      	mov	r2, r8
 8019730:	f7ff ff70 	bl	8019614 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019734:	a902      	add	r1, sp, #8
 8019736:	4620      	mov	r0, r4
 8019738:	f7ff feaa 	bl	8019490 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801973c:	e7d5      	b.n	80196ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801973e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019742:	e887 0003 	stmia.w	r7, {r0, r1}
 8019746:	a902      	add	r1, sp, #8
 8019748:	4638      	mov	r0, r7
 801974a:	f7ff fea1 	bl	8019490 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801974e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019752:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019756:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801975a:	fb13 f302 	smulbb	r3, r3, r2
 801975e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019762:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019766:	fb11 f102 	smulbb	r1, r1, r2
 801976a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801976e:	fb09 f303 	mul.w	r3, r9, r3
 8019772:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019776:	220b      	movs	r2, #11
 8019778:	434a      	muls	r2, r1
 801977a:	4293      	cmp	r3, r2
 801977c:	dab5      	bge.n	80196ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801977e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019782:	a806      	add	r0, sp, #24
 8019784:	4642      	mov	r2, r8
 8019786:	f7ff ff45 	bl	8019614 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801978a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801978e:	e884 0003 	stmia.w	r4, {r0, r1}
 8019792:	e7aa      	b.n	80196ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019794 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019794:	4b1d      	ldr	r3, [pc, #116]	; (801980c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019796:	b530      	push	{r4, r5, lr}
 8019798:	f9b3 2000 	ldrsh.w	r2, [r3]
 801979c:	b085      	sub	sp, #20
 801979e:	4b1c      	ldr	r3, [pc, #112]	; (8019810 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80197a0:	460c      	mov	r4, r1
 80197a2:	2100      	movs	r1, #0
 80197a4:	4605      	mov	r5, r0
 80197a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80197aa:	6820      	ldr	r0, [r4, #0]
 80197ac:	9100      	str	r1, [sp, #0]
 80197ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80197b2:	ab02      	add	r3, sp, #8
 80197b4:	6861      	ldr	r1, [r4, #4]
 80197b6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80197ba:	c303      	stmia	r3!, {r0, r1}
 80197bc:	4669      	mov	r1, sp
 80197be:	a802      	add	r0, sp, #8
 80197c0:	f7fc f9be 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 80197c4:	ab02      	add	r3, sp, #8
 80197c6:	cb03      	ldmia	r3!, {r0, r1}
 80197c8:	4b12      	ldr	r3, [pc, #72]	; (8019814 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80197ca:	6020      	str	r0, [r4, #0]
 80197cc:	6818      	ldr	r0, [r3, #0]
 80197ce:	6061      	str	r1, [r4, #4]
 80197d0:	b138      	cbz	r0, 80197e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80197d2:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 80197d6:	b133      	cbz	r3, 80197e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80197d8:	6821      	ldr	r1, [r4, #0]
 80197da:	4628      	mov	r0, r5
 80197dc:	6862      	ldr	r2, [r4, #4]
 80197de:	f7ff ff59 	bl	8019694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80197e2:	b005      	add	sp, #20
 80197e4:	bd30      	pop	{r4, r5, pc}
 80197e6:	6803      	ldr	r3, [r0, #0]
 80197e8:	4621      	mov	r1, r4
 80197ea:	689b      	ldr	r3, [r3, #8]
 80197ec:	4798      	blx	r3
 80197ee:	4b0a      	ldr	r3, [pc, #40]	; (8019818 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80197f0:	6818      	ldr	r0, [r3, #0]
 80197f2:	b118      	cbz	r0, 80197fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80197f4:	6803      	ldr	r3, [r0, #0]
 80197f6:	4621      	mov	r1, r4
 80197f8:	689b      	ldr	r3, [r3, #8]
 80197fa:	4798      	blx	r3
 80197fc:	4b07      	ldr	r3, [pc, #28]	; (801981c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80197fe:	4621      	mov	r1, r4
 8019800:	6818      	ldr	r0, [r3, #0]
 8019802:	6803      	ldr	r3, [r0, #0]
 8019804:	695b      	ldr	r3, [r3, #20]
 8019806:	4798      	blx	r3
 8019808:	e7eb      	b.n	80197e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801980a:	bf00      	nop
 801980c:	2000b364 	.word	0x2000b364
 8019810:	2000b366 	.word	0x2000b366
 8019814:	2000b3ec 	.word	0x2000b3ec
 8019818:	2000b3e8 	.word	0x2000b3e8
 801981c:	2000b370 	.word	0x2000b370

08019820 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019824:	4604      	mov	r4, r0
 8019826:	b09b      	sub	sp, #108	; 0x6c
 8019828:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801982c:	b129      	cbz	r1, 801983a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801982e:	2300      	movs	r3, #0
 8019830:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019834:	b01b      	add	sp, #108	; 0x6c
 8019836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801983a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801983e:	4630      	mov	r0, r6
 8019840:	f7fc f9c1 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019844:	4605      	mov	r5, r0
 8019846:	b940      	cbnz	r0, 801985a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8019848:	4620      	mov	r0, r4
 801984a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801984e:	f7ff ff21 	bl	8019694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019852:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8019856:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801985a:	4baf      	ldr	r3, [pc, #700]	; (8019b18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	b33b      	cbz	r3, 80198b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019860:	4dae      	ldr	r5, [pc, #696]	; (8019b1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 8019862:	4628      	mov	r0, r5
 8019864:	f7fc f9af 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019868:	4606      	mov	r6, r0
 801986a:	bb08      	cbnz	r0, 80198b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801986c:	4628      	mov	r0, r5
 801986e:	f7ff fc71 	bl	8019154 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019872:	6829      	ldr	r1, [r5, #0]
 8019874:	686a      	ldr	r2, [r5, #4]
 8019876:	4620      	mov	r0, r4
 8019878:	f7ff ff0c 	bl	8019694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801987c:	802e      	strh	r6, [r5, #0]
 801987e:	806e      	strh	r6, [r5, #2]
 8019880:	80ae      	strh	r6, [r5, #4]
 8019882:	80ee      	strh	r6, [r5, #6]
 8019884:	4fa6      	ldr	r7, [pc, #664]	; (8019b20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 8019886:	a809      	add	r0, sp, #36	; 0x24
 8019888:	f7ff fe6f 	bl	801956a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801988c:	883d      	ldrh	r5, [r7, #0]
 801988e:	462e      	mov	r6, r5
 8019890:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019894:	42b3      	cmp	r3, r6
 8019896:	d910      	bls.n	80198ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8019898:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801989c:	3601      	adds	r6, #1
 801989e:	a809      	add	r0, sp, #36	; 0x24
 80198a0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80198a4:	b2b6      	uxth	r6, r6
 80198a6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80198aa:	f7ff fed1 	bl	8019650 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80198ae:	e7ef      	b.n	8019890 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80198b0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d1e5      	bne.n	8019884 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80198b8:	e7bc      	b.n	8019834 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80198ba:	462e      	mov	r6, r5
 80198bc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80198c0:	42b3      	cmp	r3, r6
 80198c2:	d90b      	bls.n	80198dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80198c4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80198c8:	3601      	adds	r6, #1
 80198ca:	4620      	mov	r0, r4
 80198cc:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80198d0:	b2b6      	uxth	r6, r6
 80198d2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80198d6:	f7ff fedd 	bl	8019694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80198da:	e7ef      	b.n	80198bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80198dc:	4e91      	ldr	r6, [pc, #580]	; (8019b24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 80198de:	6833      	ldr	r3, [r6, #0]
 80198e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80198e4:	2b01      	cmp	r3, #1
 80198e6:	f040 8092 	bne.w	8019a0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 80198ea:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80198ee:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80198f2:	f04f 0900 	mov.w	r9, #0
 80198f6:	33aa      	adds	r3, #170	; 0xaa
 80198f8:	42a8      	cmp	r0, r5
 80198fa:	f103 0308 	add.w	r3, r3, #8
 80198fe:	dd0a      	ble.n	8019916 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 8019900:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019904:	3501      	adds	r5, #1
 8019906:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801990a:	440a      	add	r2, r1
 801990c:	b212      	sxth	r2, r2
 801990e:	4591      	cmp	r9, r2
 8019910:	bfb8      	it	lt
 8019912:	4691      	movlt	r9, r2
 8019914:	e7f0      	b.n	80198f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 8019916:	4b84      	ldr	r3, [pc, #528]	; (8019b28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 8019918:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8019b30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 801991c:	881d      	ldrh	r5, [r3, #0]
 801991e:	2300      	movs	r3, #0
 8019920:	2d0f      	cmp	r5, #15
 8019922:	bf8c      	ite	hi
 8019924:	08ed      	lsrhi	r5, r5, #3
 8019926:	2501      	movls	r5, #1
 8019928:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801992c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019930:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019934:	6830      	ldr	r0, [r6, #0]
 8019936:	440b      	add	r3, r1
 8019938:	6802      	ldr	r2, [r0, #0]
 801993a:	b21b      	sxth	r3, r3
 801993c:	4599      	cmp	r9, r3
 801993e:	dd49      	ble.n	80199d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 8019940:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019944:	4798      	blx	r3
 8019946:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801994a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801994e:	4413      	add	r3, r2
 8019950:	b21b      	sxth	r3, r3
 8019952:	195a      	adds	r2, r3, r5
 8019954:	4290      	cmp	r0, r2
 8019956:	da07      	bge.n	8019968 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 8019958:	4581      	cmp	r9, r0
 801995a:	dd05      	ble.n	8019968 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801995c:	4298      	cmp	r0, r3
 801995e:	da33      	bge.n	80199c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019960:	2b00      	cmp	r3, #0
 8019962:	dd31      	ble.n	80199c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 8019964:	4648      	mov	r0, r9
 8019966:	e004      	b.n	8019972 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 8019968:	4298      	cmp	r0, r3
 801996a:	dbfb      	blt.n	8019964 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 801996c:	4548      	cmp	r0, r9
 801996e:	bfa8      	it	ge
 8019970:	4648      	movge	r0, r9
 8019972:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019976:	2100      	movs	r1, #0
 8019978:	1ac0      	subs	r0, r0, r3
 801997a:	f8b7 a000 	ldrh.w	sl, [r7]
 801997e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019982:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019986:	f8ad 2018 	strh.w	r2, [sp, #24]
 801998a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801998e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019992:	4553      	cmp	r3, sl
 8019994:	d9ca      	bls.n	801992c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8019996:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801999a:	ab07      	add	r3, sp, #28
 801999c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80199a0:	6851      	ldr	r1, [r2, #4]
 80199a2:	c303      	stmia	r3!, {r0, r1}
 80199a4:	a807      	add	r0, sp, #28
 80199a6:	a905      	add	r1, sp, #20
 80199a8:	f7fc f8ca 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 80199ac:	a807      	add	r0, sp, #28
 80199ae:	f7fc f90a 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80199b2:	b920      	cbnz	r0, 80199be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 80199b4:	6823      	ldr	r3, [r4, #0]
 80199b6:	a907      	add	r1, sp, #28
 80199b8:	4620      	mov	r0, r4
 80199ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199bc:	4798      	blx	r3
 80199be:	f10a 0a01 	add.w	sl, sl, #1
 80199c2:	fa1f fa8a 	uxth.w	sl, sl
 80199c6:	e7e2      	b.n	801998e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 80199c8:	6830      	ldr	r0, [r6, #0]
 80199ca:	2101      	movs	r1, #1
 80199cc:	6803      	ldr	r3, [r0, #0]
 80199ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80199d0:	4798      	blx	r3
 80199d2:	e7ab      	b.n	801992c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80199d4:	69d3      	ldr	r3, [r2, #28]
 80199d6:	4798      	blx	r3
 80199d8:	4b54      	ldr	r3, [pc, #336]	; (8019b2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 80199da:	781b      	ldrb	r3, [r3, #0]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	f43f af29 	beq.w	8019834 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80199e2:	2300      	movs	r3, #0
 80199e4:	883d      	ldrh	r5, [r7, #0]
 80199e6:	34ea      	adds	r4, #234	; 0xea
 80199e8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80199ec:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80199f0:	42ab      	cmp	r3, r5
 80199f2:	f67f af1f 	bls.w	8019834 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80199f6:	ab1a      	add	r3, sp, #104	; 0x68
 80199f8:	4620      	mov	r0, r4
 80199fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80199fe:	3501      	adds	r5, #1
 8019a00:	3b44      	subs	r3, #68	; 0x44
 8019a02:	b2ad      	uxth	r5, r5
 8019a04:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019a08:	f7ff fe22 	bl	8019650 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019a0c:	e7ee      	b.n	80199ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 8019a0e:	2b02      	cmp	r3, #2
 8019a10:	d16a      	bne.n	8019ae8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8019a12:	f8df a120 	ldr.w	sl, [pc, #288]	; 8019b34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 8019a16:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019a1a:	42ab      	cmp	r3, r5
 8019a1c:	d9dc      	bls.n	80199d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8019a1e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019a22:	ab03      	add	r3, sp, #12
 8019a24:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019a28:	6851      	ldr	r1, [r2, #4]
 8019a2a:	c303      	stmia	r3!, {r0, r1}
 8019a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8019a30:	2b01      	cmp	r3, #1
 8019a32:	d102      	bne.n	8019a3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 8019a34:	a803      	add	r0, sp, #12
 8019a36:	f7ff fbe7 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019a3a:	a803      	add	r0, sp, #12
 8019a3c:	f7fc f8c3 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a40:	2800      	cmp	r0, #0
 8019a42:	d14a      	bne.n	8019ada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 8019a44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019a48:	f10d 0914 	add.w	r9, sp, #20
 8019a4c:	f10d 081c 	add.w	r8, sp, #28
 8019a50:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019a54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019a58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019a5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a60:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019a64:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019a68:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019a6c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019a70:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019a74:	44dc      	add	ip, fp
 8019a76:	6830      	ldr	r0, [r6, #0]
 8019a78:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019a7c:	ebac 0c02 	sub.w	ip, ip, r2
 8019a80:	f8d0 e000 	ldr.w	lr, [r0]
 8019a84:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019a88:	fa1f fc8c 	uxth.w	ip, ip
 8019a8c:	f8cd c000 	str.w	ip, [sp]
 8019a90:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019a94:	47d8      	blx	fp
 8019a96:	f89a 3000 	ldrb.w	r3, [sl]
 8019a9a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019a9e:	2b01      	cmp	r3, #1
 8019aa0:	d11e      	bne.n	8019ae0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 8019aa2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019aa6:	e888 0003 	stmia.w	r8, {r0, r1}
 8019aaa:	4640      	mov	r0, r8
 8019aac:	f7ff fb52 	bl	8019154 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019ab0:	6823      	ldr	r3, [r4, #0]
 8019ab2:	4641      	mov	r1, r8
 8019ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ab6:	4620      	mov	r0, r4
 8019ab8:	4798      	blx	r3
 8019aba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019abe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019ac2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8019ac6:	4413      	add	r3, r2
 8019ac8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019acc:	440a      	add	r2, r1
 8019ace:	b21b      	sxth	r3, r3
 8019ad0:	b212      	sxth	r2, r2
 8019ad2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	dbc6      	blt.n	8019a68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 8019ada:	3501      	adds	r5, #1
 8019adc:	b2ad      	uxth	r5, r5
 8019ade:	e79a      	b.n	8019a16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 8019ae0:	6823      	ldr	r3, [r4, #0]
 8019ae2:	4649      	mov	r1, r9
 8019ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ae6:	e7e6      	b.n	8019ab6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 8019ae8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019aec:	42ab      	cmp	r3, r5
 8019aee:	f67f af73 	bls.w	80199d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 8019af2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019af6:	ab07      	add	r3, sp, #28
 8019af8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019afc:	6851      	ldr	r1, [r2, #4]
 8019afe:	c303      	stmia	r3!, {r0, r1}
 8019b00:	a807      	add	r0, sp, #28
 8019b02:	f7fc f860 	bl	8015bc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b06:	b920      	cbnz	r0, 8019b12 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 8019b08:	6823      	ldr	r3, [r4, #0]
 8019b0a:	a907      	add	r1, sp, #28
 8019b0c:	4620      	mov	r0, r4
 8019b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b10:	4798      	blx	r3
 8019b12:	3501      	adds	r5, #1
 8019b14:	b2ad      	uxth	r5, r5
 8019b16:	e7e7      	b.n	8019ae8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 8019b18:	2000b3e8 	.word	0x2000b3e8
 8019b1c:	2000b3f4 	.word	0x2000b3f4
 8019b20:	20000040 	.word	0x20000040
 8019b24:	2000b370 	.word	0x2000b370
 8019b28:	2000b366 	.word	0x2000b366
 8019b2c:	2000b36e 	.word	0x2000b36e
 8019b30:	2000b364 	.word	0x2000b364
 8019b34:	2000b368 	.word	0x2000b368

08019b38 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019b38:	4b03      	ldr	r3, [pc, #12]	; (8019b48 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	801a      	strh	r2, [r3, #0]
 8019b3e:	805a      	strh	r2, [r3, #2]
 8019b40:	809a      	strh	r2, [r3, #4]
 8019b42:	80da      	strh	r2, [r3, #6]
 8019b44:	4770      	bx	lr
 8019b46:	bf00      	nop
 8019b48:	2000b3f4 	.word	0x2000b3f4

08019b4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b50:	b099      	sub	sp, #100	; 0x64
 8019b52:	4607      	mov	r7, r0
 8019b54:	4614      	mov	r4, r2
 8019b56:	461d      	mov	r5, r3
 8019b58:	a802      	add	r0, sp, #8
 8019b5a:	468a      	mov	sl, r1
 8019b5c:	f000 fe4b 	bl	801a7f6 <_ZN8touchgfx12TextProviderC1Ev>
 8019b60:	683b      	ldr	r3, [r7, #0]
 8019b62:	4638      	mov	r0, r7
 8019b64:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b6a:	4798      	blx	r3
 8019b6c:	462a      	mov	r2, r5
 8019b6e:	2500      	movs	r5, #0
 8019b70:	4621      	mov	r1, r4
 8019b72:	4603      	mov	r3, r0
 8019b74:	a802      	add	r0, sp, #8
 8019b76:	462c      	mov	r4, r5
 8019b78:	46a9      	mov	r9, r5
 8019b7a:	46a8      	mov	r8, r5
 8019b7c:	f000 fe80 	bl	801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019b80:	2300      	movs	r3, #0
 8019b82:	9301      	str	r3, [sp, #4]
 8019b84:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019b88:	429c      	cmp	r4, r3
 8019b8a:	d002      	beq.n	8019b92 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8019b8c:	455c      	cmp	r4, fp
 8019b8e:	bf18      	it	ne
 8019b90:	4625      	movne	r5, r4
 8019b92:	ab01      	add	r3, sp, #4
 8019b94:	463a      	mov	r2, r7
 8019b96:	4651      	mov	r1, sl
 8019b98:	a802      	add	r0, sp, #8
 8019b9a:	f001 f96b 	bl	801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b9e:	4604      	mov	r4, r0
 8019ba0:	b108      	cbz	r0, 8019ba6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8019ba2:	280a      	cmp	r0, #10
 8019ba4:	d10a      	bne.n	8019bbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8019ba6:	45c1      	cmp	r9, r8
 8019ba8:	bf38      	it	cc
 8019baa:	46c1      	movcc	r9, r8
 8019bac:	f04f 0800 	mov.w	r8, #0
 8019bb0:	2c00      	cmp	r4, #0
 8019bb2:	d1e5      	bne.n	8019b80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019bb4:	4648      	mov	r0, r9
 8019bb6:	b019      	add	sp, #100	; 0x64
 8019bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bbc:	9a01      	ldr	r2, [sp, #4]
 8019bbe:	2a00      	cmp	r2, #0
 8019bc0:	d0de      	beq.n	8019b80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8019bc2:	7b56      	ldrb	r6, [r2, #13]
 8019bc4:	4629      	mov	r1, r5
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	0076      	lsls	r6, r6, #1
 8019bca:	8894      	ldrh	r4, [r2, #4]
 8019bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bce:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8019bd2:	7a96      	ldrb	r6, [r2, #10]
 8019bd4:	4306      	orrs	r6, r0
 8019bd6:	4638      	mov	r0, r7
 8019bd8:	4798      	blx	r3
 8019bda:	4430      	add	r0, r6
 8019bdc:	4480      	add	r8, r0
 8019bde:	fa1f f888 	uxth.w	r8, r8
 8019be2:	e7e5      	b.n	8019bb0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08019be4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019be4:	b508      	push	{r3, lr}
 8019be6:	6803      	ldr	r3, [r0, #0]
 8019be8:	68db      	ldr	r3, [r3, #12]
 8019bea:	4798      	blx	r3
 8019bec:	b128      	cbz	r0, 8019bfa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019bee:	7b43      	ldrb	r3, [r0, #13]
 8019bf0:	7a80      	ldrb	r0, [r0, #10]
 8019bf2:	005b      	lsls	r3, r3, #1
 8019bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019bf8:	4318      	orrs	r0, r3
 8019bfa:	bd08      	pop	{r3, pc}

08019bfc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019bfc:	b40e      	push	{r1, r2, r3}
 8019bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c00:	b098      	sub	sp, #96	; 0x60
 8019c02:	4605      	mov	r5, r0
 8019c04:	ab1d      	add	r3, sp, #116	; 0x74
 8019c06:	a802      	add	r0, sp, #8
 8019c08:	ae18      	add	r6, sp, #96	; 0x60
 8019c0a:	f853 4b04 	ldr.w	r4, [r3], #4
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	f000 fdf1 	bl	801a7f6 <_ZN8touchgfx12TextProviderC1Ev>
 8019c14:	682b      	ldr	r3, [r5, #0]
 8019c16:	4628      	mov	r0, r5
 8019c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c1a:	4798      	blx	r3
 8019c1c:	4621      	mov	r1, r4
 8019c1e:	2400      	movs	r4, #0
 8019c20:	4603      	mov	r3, r0
 8019c22:	9a00      	ldr	r2, [sp, #0]
 8019c24:	a802      	add	r0, sp, #8
 8019c26:	f000 fe2b 	bl	801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019c2a:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8019c2e:	462a      	mov	r2, r5
 8019c30:	4633      	mov	r3, r6
 8019c32:	4621      	mov	r1, r4
 8019c34:	a802      	add	r0, sp, #8
 8019c36:	f001 f91d 	bl	801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c3a:	b300      	cbz	r0, 8019c7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019c3c:	280a      	cmp	r0, #10
 8019c3e:	d01a      	beq.n	8019c76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019c40:	9f01      	ldr	r7, [sp, #4]
 8019c42:	b1c7      	cbz	r7, 8019c76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 8019c44:	7b78      	ldrb	r0, [r7, #13]
 8019c46:	7a3b      	ldrb	r3, [r7, #8]
 8019c48:	00c1      	lsls	r1, r0, #3
 8019c4a:	88aa      	ldrh	r2, [r5, #4]
 8019c4c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019c50:	4319      	orrs	r1, r3
 8019c52:	0643      	lsls	r3, r0, #25
 8019c54:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019c58:	bf48      	it	mi
 8019c5a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019c5e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019c62:	bf48      	it	mi
 8019c64:	b219      	sxthmi	r1, r3
 8019c66:	79fb      	ldrb	r3, [r7, #7]
 8019c68:	4303      	orrs	r3, r0
 8019c6a:	4413      	add	r3, r2
 8019c6c:	1a5b      	subs	r3, r3, r1
 8019c6e:	b29b      	uxth	r3, r3
 8019c70:	42a3      	cmp	r3, r4
 8019c72:	bfc8      	it	gt
 8019c74:	b21c      	sxthgt	r4, r3
 8019c76:	4633      	mov	r3, r6
 8019c78:	462a      	mov	r2, r5
 8019c7a:	2100      	movs	r1, #0
 8019c7c:	e7da      	b.n	8019c34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8019c7e:	b2a0      	uxth	r0, r4
 8019c80:	b018      	add	sp, #96	; 0x60
 8019c82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019c86:	b003      	add	sp, #12
 8019c88:	4770      	bx	lr

08019c8a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019c8a:	b40e      	push	{r1, r2, r3}
 8019c8c:	b530      	push	{r4, r5, lr}
 8019c8e:	b098      	sub	sp, #96	; 0x60
 8019c90:	4604      	mov	r4, r0
 8019c92:	ab1b      	add	r3, sp, #108	; 0x6c
 8019c94:	a802      	add	r0, sp, #8
 8019c96:	f853 5b04 	ldr.w	r5, [r3], #4
 8019c9a:	9301      	str	r3, [sp, #4]
 8019c9c:	f000 fdab 	bl	801a7f6 <_ZN8touchgfx12TextProviderC1Ev>
 8019ca0:	6823      	ldr	r3, [r4, #0]
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	2401      	movs	r4, #1
 8019ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ca8:	4798      	blx	r3
 8019caa:	9a01      	ldr	r2, [sp, #4]
 8019cac:	4603      	mov	r3, r0
 8019cae:	4629      	mov	r1, r5
 8019cb0:	a802      	add	r0, sp, #8
 8019cb2:	f000 fde5 	bl	801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019cb6:	a802      	add	r0, sp, #8
 8019cb8:	f001 f9ce 	bl	801b058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019cbc:	b2a3      	uxth	r3, r4
 8019cbe:	b138      	cbz	r0, 8019cd0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8019cc0:	280a      	cmp	r0, #10
 8019cc2:	a802      	add	r0, sp, #8
 8019cc4:	bf04      	itt	eq
 8019cc6:	3301      	addeq	r3, #1
 8019cc8:	b21c      	sxtheq	r4, r3
 8019cca:	f001 f9c5 	bl	801b058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019cce:	e7f5      	b.n	8019cbc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	b018      	add	sp, #96	; 0x60
 8019cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019cd8:	b003      	add	sp, #12
 8019cda:	4770      	bx	lr

08019cdc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019cdc:	b40e      	push	{r1, r2, r3}
 8019cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ce0:	b098      	sub	sp, #96	; 0x60
 8019ce2:	4604      	mov	r4, r0
 8019ce4:	26ff      	movs	r6, #255	; 0xff
 8019ce6:	ab1d      	add	r3, sp, #116	; 0x74
 8019ce8:	a802      	add	r0, sp, #8
 8019cea:	f853 5b04 	ldr.w	r5, [r3], #4
 8019cee:	9300      	str	r3, [sp, #0]
 8019cf0:	f000 fd81 	bl	801a7f6 <_ZN8touchgfx12TextProviderC1Ev>
 8019cf4:	6823      	ldr	r3, [r4, #0]
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cfa:	4798      	blx	r3
 8019cfc:	4629      	mov	r1, r5
 8019cfe:	4603      	mov	r3, r0
 8019d00:	9a00      	ldr	r2, [sp, #0]
 8019d02:	a802      	add	r0, sp, #8
 8019d04:	ad18      	add	r5, sp, #96	; 0x60
 8019d06:	f000 fdbb 	bl	801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019d0a:	2100      	movs	r1, #0
 8019d0c:	4622      	mov	r2, r4
 8019d0e:	a802      	add	r0, sp, #8
 8019d10:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019d14:	462b      	mov	r3, r5
 8019d16:	f001 f8ad 	bl	801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019d1a:	b1d8      	cbz	r0, 8019d54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019d1c:	280a      	cmp	r0, #10
 8019d1e:	d012      	beq.n	8019d46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019d20:	9801      	ldr	r0, [sp, #4]
 8019d22:	b180      	cbz	r0, 8019d46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8019d24:	7b47      	ldrb	r7, [r0, #13]
 8019d26:	7922      	ldrb	r2, [r4, #4]
 8019d28:	00fb      	lsls	r3, r7, #3
 8019d2a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019d2e:	7a03      	ldrb	r3, [r0, #8]
 8019d30:	430b      	orrs	r3, r1
 8019d32:	0679      	lsls	r1, r7, #25
 8019d34:	bf44      	itt	mi
 8019d36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019d3a:	b21b      	sxthmi	r3, r3
 8019d3c:	1ad3      	subs	r3, r2, r3
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	429e      	cmp	r6, r3
 8019d42:	bf28      	it	cs
 8019d44:	461e      	movcs	r6, r3
 8019d46:	462b      	mov	r3, r5
 8019d48:	4622      	mov	r2, r4
 8019d4a:	2100      	movs	r1, #0
 8019d4c:	a802      	add	r0, sp, #8
 8019d4e:	f001 f891 	bl	801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019d52:	e7e2      	b.n	8019d1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019d54:	4630      	mov	r0, r6
 8019d56:	b018      	add	sp, #96	; 0x60
 8019d58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019d5c:	b003      	add	sp, #12
 8019d5e:	4770      	bx	lr

08019d60 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019d60:	b513      	push	{r0, r1, r4, lr}
 8019d62:	1d01      	adds	r1, r0, #4
 8019d64:	4603      	mov	r3, r0
 8019d66:	466a      	mov	r2, sp
 8019d68:	c903      	ldmia	r1, {r0, r1}
 8019d6a:	e882 0003 	stmia.w	r2, {r0, r1}
 8019d6e:	2100      	movs	r1, #0
 8019d70:	4618      	mov	r0, r3
 8019d72:	9100      	str	r1, [sp, #0]
 8019d74:	6819      	ldr	r1, [r3, #0]
 8019d76:	690c      	ldr	r4, [r1, #16]
 8019d78:	4611      	mov	r1, r2
 8019d7a:	47a0      	blx	r4
 8019d7c:	b002      	add	sp, #8
 8019d7e:	bd10      	pop	{r4, pc}

08019d80 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019d80:	b538      	push	{r3, r4, r5, lr}
 8019d82:	680b      	ldr	r3, [r1, #0]
 8019d84:	460c      	mov	r4, r1
 8019d86:	4605      	mov	r5, r0
 8019d88:	68db      	ldr	r3, [r3, #12]
 8019d8a:	4798      	blx	r3
 8019d8c:	6823      	ldr	r3, [r4, #0]
 8019d8e:	4620      	mov	r0, r4
 8019d90:	4629      	mov	r1, r5
 8019d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d94:	4798      	blx	r3
 8019d96:	4628      	mov	r0, r5
 8019d98:	bd38      	pop	{r3, r4, r5, pc}

08019d9a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019d9a:	b410      	push	{r4}
 8019d9c:	880a      	ldrh	r2, [r1, #0]
 8019d9e:	8884      	ldrh	r4, [r0, #4]
 8019da0:	4422      	add	r2, r4
 8019da2:	800a      	strh	r2, [r1, #0]
 8019da4:	884a      	ldrh	r2, [r1, #2]
 8019da6:	88c4      	ldrh	r4, [r0, #6]
 8019da8:	4422      	add	r2, r4
 8019daa:	804a      	strh	r2, [r1, #2]
 8019dac:	6940      	ldr	r0, [r0, #20]
 8019dae:	b120      	cbz	r0, 8019dba <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019db0:	6803      	ldr	r3, [r0, #0]
 8019db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019db8:	4718      	bx	r3
 8019dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019dbe:	4770      	bx	lr

08019dc0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dc2:	460b      	mov	r3, r1
 8019dc4:	b085      	sub	sp, #20
 8019dc6:	4604      	mov	r4, r0
 8019dc8:	b901      	cbnz	r1, 8019dcc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019dca:	b1fa      	cbz	r2, 8019e0c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019dcc:	1d27      	adds	r7, r4, #4
 8019dce:	466e      	mov	r6, sp
 8019dd0:	ad02      	add	r5, sp, #8
 8019dd2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019dd6:	e886 0003 	stmia.w	r6, {r0, r1}
 8019dda:	88e1      	ldrh	r1, [r4, #6]
 8019ddc:	4620      	mov	r0, r4
 8019dde:	440a      	add	r2, r1
 8019de0:	88a1      	ldrh	r1, [r4, #4]
 8019de2:	4419      	add	r1, r3
 8019de4:	6823      	ldr	r3, [r4, #0]
 8019de6:	b212      	sxth	r2, r2
 8019de8:	b209      	sxth	r1, r1
 8019dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019dec:	4798      	blx	r3
 8019dee:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019df2:	e885 0003 	stmia.w	r5, {r0, r1}
 8019df6:	6960      	ldr	r0, [r4, #20]
 8019df8:	b150      	cbz	r0, 8019e10 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019dfa:	6803      	ldr	r3, [r0, #0]
 8019dfc:	4631      	mov	r1, r6
 8019dfe:	691b      	ldr	r3, [r3, #16]
 8019e00:	4798      	blx	r3
 8019e02:	6960      	ldr	r0, [r4, #20]
 8019e04:	6803      	ldr	r3, [r0, #0]
 8019e06:	691b      	ldr	r3, [r3, #16]
 8019e08:	4629      	mov	r1, r5
 8019e0a:	4798      	blx	r3
 8019e0c:	b005      	add	sp, #20
 8019e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e10:	f7ff fb84 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8019e14:	6803      	ldr	r3, [r0, #0]
 8019e16:	4631      	mov	r1, r6
 8019e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e1a:	4798      	blx	r3
 8019e1c:	f7ff fb7e 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8019e20:	6803      	ldr	r3, [r0, #0]
 8019e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e24:	e7f0      	b.n	8019e08 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019e26 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019e26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e28:	8882      	ldrh	r2, [r0, #4]
 8019e2a:	4605      	mov	r5, r0
 8019e2c:	880b      	ldrh	r3, [r1, #0]
 8019e2e:	460c      	mov	r4, r1
 8019e30:	4413      	add	r3, r2
 8019e32:	800b      	strh	r3, [r1, #0]
 8019e34:	884b      	ldrh	r3, [r1, #2]
 8019e36:	88c2      	ldrh	r2, [r0, #6]
 8019e38:	4413      	add	r3, r2
 8019e3a:	4602      	mov	r2, r0
 8019e3c:	804b      	strh	r3, [r1, #2]
 8019e3e:	466b      	mov	r3, sp
 8019e40:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019e44:	6851      	ldr	r1, [r2, #4]
 8019e46:	c303      	stmia	r3!, {r0, r1}
 8019e48:	4621      	mov	r1, r4
 8019e4a:	4668      	mov	r0, sp
 8019e4c:	f7fb fe78 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 8019e50:	466b      	mov	r3, sp
 8019e52:	cb03      	ldmia	r3!, {r0, r1}
 8019e54:	6020      	str	r0, [r4, #0]
 8019e56:	6061      	str	r1, [r4, #4]
 8019e58:	6968      	ldr	r0, [r5, #20]
 8019e5a:	b128      	cbz	r0, 8019e68 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019e5c:	6803      	ldr	r3, [r0, #0]
 8019e5e:	691b      	ldr	r3, [r3, #16]
 8019e60:	4621      	mov	r1, r4
 8019e62:	4798      	blx	r3
 8019e64:	b003      	add	sp, #12
 8019e66:	bd30      	pop	{r4, r5, pc}
 8019e68:	f7ff fb58 	bl	801951c <_ZN8touchgfx11Application11getInstanceEv>
 8019e6c:	6803      	ldr	r3, [r0, #0]
 8019e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e70:	e7f6      	b.n	8019e60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019e72 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019e72:	b570      	push	{r4, r5, r6, lr}
 8019e74:	8882      	ldrh	r2, [r0, #4]
 8019e76:	460c      	mov	r4, r1
 8019e78:	880b      	ldrh	r3, [r1, #0]
 8019e7a:	4605      	mov	r5, r0
 8019e7c:	4413      	add	r3, r2
 8019e7e:	800b      	strh	r3, [r1, #0]
 8019e80:	884b      	ldrh	r3, [r1, #2]
 8019e82:	88c2      	ldrh	r2, [r0, #6]
 8019e84:	4413      	add	r3, r2
 8019e86:	804b      	strh	r3, [r1, #2]
 8019e88:	1d01      	adds	r1, r0, #4
 8019e8a:	4620      	mov	r0, r4
 8019e8c:	f7fb fe58 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 8019e90:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	dd0b      	ble.n	8019eb0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019e98:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	dd07      	ble.n	8019eb0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019ea0:	6968      	ldr	r0, [r5, #20]
 8019ea2:	b128      	cbz	r0, 8019eb0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019ea4:	6803      	ldr	r3, [r0, #0]
 8019ea6:	4621      	mov	r1, r4
 8019ea8:	6a1b      	ldr	r3, [r3, #32]
 8019eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019eae:	4718      	bx	r3
 8019eb0:	bd70      	pop	{r4, r5, r6, pc}

08019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019eb2:	b510      	push	{r4, lr}
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	4604      	mov	r4, r0
 8019eb8:	4608      	mov	r0, r1
 8019eba:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019ebe:	8023      	strh	r3, [r4, #0]
 8019ec0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ec4:	8063      	strh	r3, [r4, #2]
 8019ec6:	6803      	ldr	r3, [r0, #0]
 8019ec8:	80a1      	strh	r1, [r4, #4]
 8019eca:	4621      	mov	r1, r4
 8019ecc:	80e2      	strh	r2, [r4, #6]
 8019ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ed0:	4798      	blx	r3
 8019ed2:	4620      	mov	r0, r4
 8019ed4:	bd10      	pop	{r4, pc}
	...

08019ed8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019ed8:	b530      	push	{r4, r5, lr}
 8019eda:	8083      	strh	r3, [r0, #4]
 8019edc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019ee0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019ee4:	7183      	strb	r3, [r0, #6]
 8019ee6:	79c3      	ldrb	r3, [r0, #7]
 8019ee8:	6101      	str	r1, [r0, #16]
 8019eea:	f365 0306 	bfi	r3, r5, #0, #7
 8019eee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019ef2:	8282      	strh	r2, [r0, #20]
 8019ef4:	f365 13c7 	bfi	r3, r5, #7, #1
 8019ef8:	71c3      	strb	r3, [r0, #7]
 8019efa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019efe:	7203      	strb	r3, [r0, #8]
 8019f00:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019f04:	7243      	strb	r3, [r0, #9]
 8019f06:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019f0a:	8143      	strh	r3, [r0, #10]
 8019f0c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019f10:	8183      	strh	r3, [r0, #12]
 8019f12:	4b01      	ldr	r3, [pc, #4]	; (8019f18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019f14:	6003      	str	r3, [r0, #0]
 8019f16:	bd30      	pop	{r4, r5, pc}
 8019f18:	0802a524 	.word	0x0802a524

08019f1c <_ZNK8touchgfx9ConstFont4findEt>:
 8019f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f1e:	6904      	ldr	r4, [r0, #16]
 8019f20:	8a82      	ldrh	r2, [r0, #20]
 8019f22:	88a3      	ldrh	r3, [r4, #4]
 8019f24:	3a01      	subs	r2, #1
 8019f26:	1acb      	subs	r3, r1, r3
 8019f28:	d431      	bmi.n	8019f8e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019f2a:	4293      	cmp	r3, r2
 8019f2c:	dd0c      	ble.n	8019f48 <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 8019f2e:	230e      	movs	r3, #14
 8019f30:	fb03 4302 	mla	r3, r3, r2, r4
 8019f34:	889b      	ldrh	r3, [r3, #4]
 8019f36:	1a5b      	subs	r3, r3, r1
 8019f38:	1ad3      	subs	r3, r2, r3
 8019f3a:	429a      	cmp	r2, r3
 8019f3c:	db27      	blt.n	8019f8e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	bfbc      	itt	lt
 8019f42:	2302      	movlt	r3, #2
 8019f44:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019f48:	2500      	movs	r5, #0
 8019f4a:	260e      	movs	r6, #14
 8019f4c:	4295      	cmp	r5, r2
 8019f4e:	dc1e      	bgt.n	8019f8e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019f50:	fb06 4003 	mla	r0, r6, r3, r4
 8019f54:	8887      	ldrh	r7, [r0, #4]
 8019f56:	428f      	cmp	r7, r1
 8019f58:	d01a      	beq.n	8019f90 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 8019f5a:	d90d      	bls.n	8019f78 <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 8019f5c:	1e5a      	subs	r2, r3, #1
 8019f5e:	4295      	cmp	r5, r2
 8019f60:	dc15      	bgt.n	8019f8e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019f62:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019f66:	1a5b      	subs	r3, r3, r1
 8019f68:	1ad3      	subs	r3, r2, r3
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	db0f      	blt.n	8019f8e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019f6e:	429d      	cmp	r5, r3
 8019f70:	ddec      	ble.n	8019f4c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019f72:	1953      	adds	r3, r2, r5
 8019f74:	105b      	asrs	r3, r3, #1
 8019f76:	e7e9      	b.n	8019f4c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019f78:	1c5d      	adds	r5, r3, #1
 8019f7a:	42aa      	cmp	r2, r5
 8019f7c:	db07      	blt.n	8019f8e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019f7e:	8a43      	ldrh	r3, [r0, #18]
 8019f80:	1acb      	subs	r3, r1, r3
 8019f82:	442b      	add	r3, r5
 8019f84:	429d      	cmp	r5, r3
 8019f86:	dc02      	bgt.n	8019f8e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 8019f88:	429a      	cmp	r2, r3
 8019f8a:	dadf      	bge.n	8019f4c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019f8c:	e7f1      	b.n	8019f72 <_ZNK8touchgfx9ConstFont4findEt+0x56>
 8019f8e:	2000      	movs	r0, #0
 8019f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f92 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f94:	4604      	mov	r4, r0
 8019f96:	4617      	mov	r7, r2
 8019f98:	461e      	mov	r6, r3
 8019f9a:	b911      	cbnz	r1, 8019fa2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019f9c:	2500      	movs	r5, #0
 8019f9e:	4628      	mov	r0, r5
 8019fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fa2:	290a      	cmp	r1, #10
 8019fa4:	d0fa      	beq.n	8019f9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019fa6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019faa:	4291      	cmp	r1, r2
 8019fac:	d0f6      	beq.n	8019f9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019fae:	f242 020b 	movw	r2, #8203	; 0x200b
 8019fb2:	4291      	cmp	r1, r2
 8019fb4:	d0f2      	beq.n	8019f9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019fb6:	f7ff ffb1 	bl	8019f1c <_ZNK8touchgfx9ConstFont4findEt>
 8019fba:	4605      	mov	r5, r0
 8019fbc:	b950      	cbnz	r0, 8019fd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019fbe:	6823      	ldr	r3, [r4, #0]
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	691b      	ldr	r3, [r3, #16]
 8019fc4:	4798      	blx	r3
 8019fc6:	4601      	mov	r1, r0
 8019fc8:	4620      	mov	r0, r4
 8019fca:	f7ff ffa7 	bl	8019f1c <_ZNK8touchgfx9ConstFont4findEt>
 8019fce:	4605      	mov	r5, r0
 8019fd0:	2800      	cmp	r0, #0
 8019fd2:	d0e3      	beq.n	8019f9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019fd4:	6823      	ldr	r3, [r4, #0]
 8019fd6:	4629      	mov	r1, r5
 8019fd8:	4620      	mov	r0, r4
 8019fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019fdc:	4798      	blx	r3
 8019fde:	6038      	str	r0, [r7, #0]
 8019fe0:	6823      	ldr	r3, [r4, #0]
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fe6:	4798      	blx	r3
 8019fe8:	7030      	strb	r0, [r6, #0]
 8019fea:	e7d8      	b.n	8019f9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019fec <_ZN8touchgfx6memsetEPvhm>:
 8019fec:	4402      	add	r2, r0
 8019fee:	4290      	cmp	r0, r2
 8019ff0:	d002      	beq.n	8019ff8 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019ff2:	f800 1b01 	strb.w	r1, [r0], #1
 8019ff6:	e7fa      	b.n	8019fee <_ZN8touchgfx6memsetEPvhm+0x2>
 8019ff8:	4770      	bx	lr

08019ffa <_ZN8touchgfx3clzEl>:
 8019ffa:	b1e8      	cbz	r0, 801a038 <_ZN8touchgfx3clzEl+0x3e>
 8019ffc:	2800      	cmp	r0, #0
 8019ffe:	bfb8      	it	lt
 801a000:	4240      	neglt	r0, r0
 801a002:	0c03      	lsrs	r3, r0, #16
 801a004:	041b      	lsls	r3, r3, #16
 801a006:	b9ab      	cbnz	r3, 801a034 <_ZN8touchgfx3clzEl+0x3a>
 801a008:	0400      	lsls	r0, r0, #16
 801a00a:	2310      	movs	r3, #16
 801a00c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a010:	bf04      	itt	eq
 801a012:	0200      	lsleq	r0, r0, #8
 801a014:	3308      	addeq	r3, #8
 801a016:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a01a:	bf04      	itt	eq
 801a01c:	0100      	lsleq	r0, r0, #4
 801a01e:	3304      	addeq	r3, #4
 801a020:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a024:	bf04      	itt	eq
 801a026:	0080      	lsleq	r0, r0, #2
 801a028:	3302      	addeq	r3, #2
 801a02a:	2800      	cmp	r0, #0
 801a02c:	bfa8      	it	ge
 801a02e:	3301      	addge	r3, #1
 801a030:	1e58      	subs	r0, r3, #1
 801a032:	4770      	bx	lr
 801a034:	2300      	movs	r3, #0
 801a036:	e7e9      	b.n	801a00c <_ZN8touchgfx3clzEl+0x12>
 801a038:	201f      	movs	r0, #31
 801a03a:	4770      	bx	lr

0801a03c <_ZN8touchgfx6muldivElllRl>:
 801a03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a040:	4604      	mov	r4, r0
 801a042:	4698      	mov	r8, r3
 801a044:	2601      	movs	r6, #1
 801a046:	f7ff ffd8 	bl	8019ffa <_ZN8touchgfx3clzEl>
 801a04a:	2c00      	cmp	r4, #0
 801a04c:	fa04 f500 	lsl.w	r5, r4, r0
 801a050:	fa06 f600 	lsl.w	r6, r6, r0
 801a054:	bfba      	itte	lt
 801a056:	f04f 37ff 	movlt.w	r7, #4294967295
 801a05a:	4264      	neglt	r4, r4
 801a05c:	2701      	movge	r7, #1
 801a05e:	2900      	cmp	r1, #0
 801a060:	f106 36ff 	add.w	r6, r6, #4294967295
 801a064:	bfbc      	itt	lt
 801a066:	4249      	neglt	r1, r1
 801a068:	427f      	neglt	r7, r7
 801a06a:	2a00      	cmp	r2, #0
 801a06c:	fa41 fc00 	asr.w	ip, r1, r0
 801a070:	ea01 0106 	and.w	r1, r1, r6
 801a074:	bfb8      	it	lt
 801a076:	427f      	neglt	r7, r7
 801a078:	fb04 f401 	mul.w	r4, r4, r1
 801a07c:	fb95 f3f2 	sdiv	r3, r5, r2
 801a080:	fb02 5513 	mls	r5, r2, r3, r5
 801a084:	bfb8      	it	lt
 801a086:	4252      	neglt	r2, r2
 801a088:	fb94 f0f2 	sdiv	r0, r4, r2
 801a08c:	fb02 4410 	mls	r4, r2, r0, r4
 801a090:	fb0c 4405 	mla	r4, ip, r5, r4
 801a094:	fb94 f1f2 	sdiv	r1, r4, r2
 801a098:	4408      	add	r0, r1
 801a09a:	fb02 4211 	mls	r2, r2, r1, r4
 801a09e:	fb0c 0003 	mla	r0, ip, r3, r0
 801a0a2:	f8c8 2000 	str.w	r2, [r8]
 801a0a6:	4378      	muls	r0, r7
 801a0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0ac <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801a0ac:	2000      	movs	r0, #0
 801a0ae:	4770      	bx	lr

0801a0b0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801a0b0:	2001      	movs	r0, #1
 801a0b2:	4770      	bx	lr

0801a0b4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801a0b4:	2002      	movs	r0, #2
 801a0b6:	4770      	bx	lr

0801a0b8 <_ZN8touchgfx12GestureEventD1Ev>:
 801a0b8:	4770      	bx	lr

0801a0ba <_ZN8touchgfx9DragEventD1Ev>:
 801a0ba:	4770      	bx	lr

0801a0bc <_ZN8touchgfx10ClickEventD1Ev>:
 801a0bc:	4770      	bx	lr

0801a0be <_ZN8touchgfx10ClickEventD0Ev>:
 801a0be:	b510      	push	{r4, lr}
 801a0c0:	4604      	mov	r4, r0
 801a0c2:	210c      	movs	r1, #12
 801a0c4:	f00b fb7e 	bl	80257c4 <_ZdlPvj>
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	bd10      	pop	{r4, pc}

0801a0cc <_ZN8touchgfx9DragEventD0Ev>:
 801a0cc:	b510      	push	{r4, lr}
 801a0ce:	4604      	mov	r4, r0
 801a0d0:	2110      	movs	r1, #16
 801a0d2:	f00b fb77 	bl	80257c4 <_ZdlPvj>
 801a0d6:	4620      	mov	r0, r4
 801a0d8:	bd10      	pop	{r4, pc}

0801a0da <_ZN8touchgfx12GestureEventD0Ev>:
 801a0da:	b510      	push	{r4, lr}
 801a0dc:	4604      	mov	r4, r0
 801a0de:	210c      	movs	r1, #12
 801a0e0:	f00b fb70 	bl	80257c4 <_ZdlPvj>
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	bd10      	pop	{r4, pc}

0801a0e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a0e8:	b530      	push	{r4, r5, lr}
 801a0ea:	460d      	mov	r5, r1
 801a0ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a0ee:	b087      	sub	sp, #28
 801a0f0:	4604      	mov	r4, r0
 801a0f2:	b301      	cbz	r1, 801a136 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a0f4:	a801      	add	r0, sp, #4
 801a0f6:	f7ff fedc 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0fa:	892a      	ldrh	r2, [r5, #8]
 801a0fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a100:	7928      	ldrb	r0, [r5, #4]
 801a102:	1ad2      	subs	r2, r2, r3
 801a104:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a106:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a10a:	441a      	add	r2, r3
 801a10c:	896b      	ldrh	r3, [r5, #10]
 801a10e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a112:	f88d 0010 	strb.w	r0, [sp, #16]
 801a116:	1b5b      	subs	r3, r3, r5
 801a118:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a11a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a11c:	442b      	add	r3, r5
 801a11e:	4d07      	ldr	r5, [pc, #28]	; (801a13c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a120:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a124:	a903      	add	r1, sp, #12
 801a126:	9503      	str	r5, [sp, #12]
 801a128:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a12c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a130:	6803      	ldr	r3, [r0, #0]
 801a132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a134:	4798      	blx	r3
 801a136:	b007      	add	sp, #28
 801a138:	bd30      	pop	{r4, r5, pc}
 801a13a:	bf00      	nop
 801a13c:	0802a5a0 	.word	0x0802a5a0

0801a140 <_ZNK8touchgfx4Rect9intersectEss>:
 801a140:	b510      	push	{r4, lr}
 801a142:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a146:	428b      	cmp	r3, r1
 801a148:	dc10      	bgt.n	801a16c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a14a:	8884      	ldrh	r4, [r0, #4]
 801a14c:	4423      	add	r3, r4
 801a14e:	b21b      	sxth	r3, r3
 801a150:	4299      	cmp	r1, r3
 801a152:	da0b      	bge.n	801a16c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a154:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a158:	4293      	cmp	r3, r2
 801a15a:	dc07      	bgt.n	801a16c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a15c:	88c0      	ldrh	r0, [r0, #6]
 801a15e:	4418      	add	r0, r3
 801a160:	b200      	sxth	r0, r0
 801a162:	4282      	cmp	r2, r0
 801a164:	bfac      	ite	ge
 801a166:	2000      	movge	r0, #0
 801a168:	2001      	movlt	r0, #1
 801a16a:	bd10      	pop	{r4, pc}
 801a16c:	2000      	movs	r0, #0
 801a16e:	e7fc      	b.n	801a16a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a170 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a170:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a172:	460c      	mov	r4, r1
 801a174:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a176:	b089      	sub	sp, #36	; 0x24
 801a178:	4605      	mov	r5, r0
 801a17a:	2900      	cmp	r1, #0
 801a17c:	d054      	beq.n	801a228 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a17e:	4668      	mov	r0, sp
 801a180:	f7ff fe97 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a184:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a186:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a188:	4668      	mov	r0, sp
 801a18a:	8922      	ldrh	r2, [r4, #8]
 801a18c:	88e1      	ldrh	r1, [r4, #6]
 801a18e:	443a      	add	r2, r7
 801a190:	4431      	add	r1, r6
 801a192:	b212      	sxth	r2, r2
 801a194:	b209      	sxth	r1, r1
 801a196:	f7ff ffd3 	bl	801a140 <_ZNK8touchgfx4Rect9intersectEss>
 801a19a:	b1d0      	cbz	r0, 801a1d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a19c:	89a2      	ldrh	r2, [r4, #12]
 801a19e:	4668      	mov	r0, sp
 801a1a0:	8961      	ldrh	r1, [r4, #10]
 801a1a2:	443a      	add	r2, r7
 801a1a4:	4431      	add	r1, r6
 801a1a6:	b212      	sxth	r2, r2
 801a1a8:	b209      	sxth	r1, r1
 801a1aa:	f7ff ffc9 	bl	801a140 <_ZNK8touchgfx4Rect9intersectEss>
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	b978      	cbnz	r0, 801a1d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a1b2:	4a1e      	ldr	r2, [pc, #120]	; (801a22c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a1b4:	a904      	add	r1, sp, #16
 801a1b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a1b8:	9204      	str	r2, [sp, #16]
 801a1ba:	2202      	movs	r2, #2
 801a1bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1c0:	f88d 2014 	strb.w	r2, [sp, #20]
 801a1c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a1c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a1cc:	6803      	ldr	r3, [r0, #0]
 801a1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1d0:	4798      	blx	r3
 801a1d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a1d4:	a802      	add	r0, sp, #8
 801a1d6:	f7ff fe6c 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a1de:	88e0      	ldrh	r0, [r4, #6]
 801a1e0:	8961      	ldrh	r1, [r4, #10]
 801a1e2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a1e6:	1a80      	subs	r0, r0, r2
 801a1e8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a1ec:	1a89      	subs	r1, r1, r2
 801a1ee:	8923      	ldrh	r3, [r4, #8]
 801a1f0:	4460      	add	r0, ip
 801a1f2:	89a2      	ldrh	r2, [r4, #12]
 801a1f4:	4461      	add	r1, ip
 801a1f6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a1f8:	eba3 030e 	sub.w	r3, r3, lr
 801a1fc:	eba2 020e 	sub.w	r2, r2, lr
 801a200:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a204:	7927      	ldrb	r7, [r4, #4]
 801a206:	4433      	add	r3, r6
 801a208:	4432      	add	r2, r6
 801a20a:	4c09      	ldr	r4, [pc, #36]	; (801a230 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a20c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a20e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a212:	a904      	add	r1, sp, #16
 801a214:	9404      	str	r4, [sp, #16]
 801a216:	f88d 7014 	strb.w	r7, [sp, #20]
 801a21a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a21e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a222:	6803      	ldr	r3, [r0, #0]
 801a224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a226:	4798      	blx	r3
 801a228:	b009      	add	sp, #36	; 0x24
 801a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a22c:	0802a578 	.word	0x0802a578
 801a230:	0802a58c 	.word	0x0802a58c

0801a234 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a238:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a23c:	b0a1      	sub	sp, #132	; 0x84
 801a23e:	4604      	mov	r4, r0
 801a240:	460d      	mov	r5, r1
 801a242:	790b      	ldrb	r3, [r1, #4]
 801a244:	f1b9 0f00 	cmp.w	r9, #0
 801a248:	d00f      	beq.n	801a26a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	f040 80a2 	bne.w	801a394 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a250:	b021      	add	sp, #132	; 0x84
 801a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a256:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a25a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a25e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a262:	1d20      	adds	r0, r4, #4
 801a264:	f7fb fbba 	bl	80159dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a268:	e094      	b.n	801a394 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d1f0      	bne.n	801a250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a26e:	4b5f      	ldr	r3, [pc, #380]	; (801a3ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a276:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a27a:	f1ba 0f03 	cmp.w	sl, #3
 801a27e:	ddea      	ble.n	801a256 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a280:	f1ba 0f0c 	cmp.w	sl, #12
 801a284:	f04f 0303 	mov.w	r3, #3
 801a288:	f04f 0600 	mov.w	r6, #0
 801a28c:	4958      	ldr	r1, [pc, #352]	; (801a3f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a28e:	bfd8      	it	le
 801a290:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a294:	960a      	str	r6, [sp, #40]	; 0x28
 801a296:	bfd8      	it	le
 801a298:	fb92 f3f3 	sdivle	r3, r2, r3
 801a29c:	9301      	str	r3, [sp, #4]
 801a29e:	4b55      	ldr	r3, [pc, #340]	; (801a3f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a2a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2a4:	4b54      	ldr	r3, [pc, #336]	; (801a3f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a2a6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a2aa:	2248      	movs	r2, #72	; 0x48
 801a2ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2b0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a2b4:	ab0e      	add	r3, sp, #56	; 0x38
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f00b fb2e 	bl	8025918 <memcpy>
 801a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a2c0:	f8cd a008 	str.w	sl, [sp, #8]
 801a2c4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a2c8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a2cc:	46b3      	mov	fp, r6
 801a2ce:	fb93 f3f2 	sdiv	r3, r3, r2
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	9303      	str	r3, [sp, #12]
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	9a03      	ldr	r2, [sp, #12]
 801a2da:	88ef      	ldrh	r7, [r5, #6]
 801a2dc:	a80a      	add	r0, sp, #40	; 0x28
 801a2de:	9309      	str	r3, [sp, #36]	; 0x24
 801a2e0:	9b07      	ldr	r3, [sp, #28]
 801a2e2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a2e6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a2ea:	fb13 f302 	smulbb	r3, r3, r2
 801a2ee:	b29b      	uxth	r3, r3
 801a2f0:	9304      	str	r3, [sp, #16]
 801a2f2:	9b07      	ldr	r3, [sp, #28]
 801a2f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a2f8:	685b      	ldr	r3, [r3, #4]
 801a2fa:	fb13 f302 	smulbb	r3, r3, r2
 801a2fe:	b29b      	uxth	r3, r3
 801a300:	9305      	str	r3, [sp, #20]
 801a302:	9b04      	ldr	r3, [sp, #16]
 801a304:	441f      	add	r7, r3
 801a306:	9b05      	ldr	r3, [sp, #20]
 801a308:	4498      	add	r8, r3
 801a30a:	b23f      	sxth	r7, r7
 801a30c:	fa0f f888 	sxth.w	r8, r8
 801a310:	4639      	mov	r1, r7
 801a312:	4642      	mov	r2, r8
 801a314:	f7ff ff14 	bl	801a140 <_ZNK8touchgfx4Rect9intersectEss>
 801a318:	b380      	cbz	r0, 801a37c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a31a:	4639      	mov	r1, r7
 801a31c:	ab09      	add	r3, sp, #36	; 0x24
 801a31e:	4642      	mov	r2, r8
 801a320:	1d20      	adds	r0, r4, #4
 801a322:	f7fb fb5b 	bl	80159dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a326:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a328:	b341      	cbz	r1, 801a37c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a32a:	4549      	cmp	r1, r9
 801a32c:	d026      	beq.n	801a37c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a32e:	a80c      	add	r0, sp, #48	; 0x30
 801a330:	f7ff fdbf 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a334:	2002      	movs	r0, #2
 801a336:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a33a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a33e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a342:	fb92 f2f0 	sdiv	r2, r2, r0
 801a346:	440a      	add	r2, r1
 801a348:	1a99      	subs	r1, r3, r2
 801a34a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a34e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a352:	fb93 f3f0 	sdiv	r3, r3, r0
 801a356:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a35a:	4403      	add	r3, r0
 801a35c:	1ad3      	subs	r3, r2, r3
 801a35e:	9a06      	ldr	r2, [sp, #24]
 801a360:	435b      	muls	r3, r3
 801a362:	fb01 3301 	mla	r3, r1, r1, r3
 801a366:	4293      	cmp	r3, r2
 801a368:	d208      	bcs.n	801a37c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a36a:	9a04      	ldr	r2, [sp, #16]
 801a36c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a370:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a372:	9a05      	ldr	r2, [sp, #20]
 801a374:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a378:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a37a:	9306      	str	r3, [sp, #24]
 801a37c:	f10b 0b02 	add.w	fp, fp, #2
 801a380:	f1bb 0f08 	cmp.w	fp, #8
 801a384:	dda7      	ble.n	801a2d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a386:	9b02      	ldr	r3, [sp, #8]
 801a388:	3601      	adds	r6, #1
 801a38a:	4453      	add	r3, sl
 801a38c:	9302      	str	r3, [sp, #8]
 801a38e:	9b01      	ldr	r3, [sp, #4]
 801a390:	42b3      	cmp	r3, r6
 801a392:	d199      	bne.n	801a2c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a394:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a396:	2900      	cmp	r1, #0
 801a398:	f43f af5a 	beq.w	801a250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a39c:	a80c      	add	r0, sp, #48	; 0x30
 801a39e:	2600      	movs	r6, #0
 801a3a0:	f7ff fd87 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a3a4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a3a8:	88ea      	ldrh	r2, [r5, #6]
 801a3aa:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a3ae:	1ad2      	subs	r2, r2, r3
 801a3b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a3b2:	7929      	ldrb	r1, [r5, #4]
 801a3b4:	441a      	add	r2, r3
 801a3b6:	892b      	ldrh	r3, [r5, #8]
 801a3b8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a3bc:	a90e      	add	r1, sp, #56	; 0x38
 801a3be:	1a1b      	subs	r3, r3, r0
 801a3c0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a3c2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a3c6:	4403      	add	r3, r0
 801a3c8:	480c      	ldr	r0, [pc, #48]	; (801a3fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a3ca:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a3ce:	900e      	str	r0, [sp, #56]	; 0x38
 801a3d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a3d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a3d6:	6803      	ldr	r3, [r0, #0]
 801a3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3da:	4798      	blx	r3
 801a3dc:	792b      	ldrb	r3, [r5, #4]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	f43f af36 	beq.w	801a250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a3e4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a3e8:	e732      	b.n	801a250 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a3ea:	bf00      	nop
 801a3ec:	2000b370 	.word	0x2000b370
 801a3f0:	08027350 	.word	0x08027350
 801a3f4:	2000b364 	.word	0x2000b364
 801a3f8:	2000b366 	.word	0x2000b366
 801a3fc:	0802a578 	.word	0x0802a578

0801a400 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a402:	4604      	mov	r4, r0
 801a404:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a408:	3201      	adds	r2, #1
 801a40a:	d112      	bne.n	801a432 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a40c:	2500      	movs	r5, #0
 801a40e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a412:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a416:	6803      	ldr	r3, [r0, #0]
 801a418:	9500      	str	r5, [sp, #0]
 801a41a:	466d      	mov	r5, sp
 801a41c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a420:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a424:	4629      	mov	r1, r5
 801a426:	6a1b      	ldr	r3, [r3, #32]
 801a428:	4798      	blx	r3
 801a42a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a42e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a432:	4620      	mov	r0, r4
 801a434:	b003      	add	sp, #12
 801a436:	bd30      	pop	{r4, r5, pc}

0801a438 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a438:	b513      	push	{r0, r1, r4, lr}
 801a43a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a43e:	4604      	mov	r4, r0
 801a440:	3301      	adds	r3, #1
 801a442:	d109      	bne.n	801a458 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a444:	4601      	mov	r1, r0
 801a446:	4668      	mov	r0, sp
 801a448:	f7ff fd33 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a44c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a450:	8423      	strh	r3, [r4, #32]
 801a452:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a456:	8463      	strh	r3, [r4, #34]	; 0x22
 801a458:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a45c:	b002      	add	sp, #8
 801a45e:	bd10      	pop	{r4, pc}

0801a460 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a460:	b513      	push	{r0, r1, r4, lr}
 801a462:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a466:	4604      	mov	r4, r0
 801a468:	3301      	adds	r3, #1
 801a46a:	d109      	bne.n	801a480 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a46c:	4601      	mov	r1, r0
 801a46e:	4668      	mov	r0, sp
 801a470:	f7ff fd1f 	bl	8019eb2 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a474:	f8bd 3000 	ldrh.w	r3, [sp]
 801a478:	8423      	strh	r3, [r4, #32]
 801a47a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a47e:	8463      	strh	r3, [r4, #34]	; 0x22
 801a480:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a484:	b002      	add	sp, #8
 801a486:	bd10      	pop	{r4, pc}

0801a488 <_ZN8touchgfx6ScreenC1Ev>:
 801a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a48a:	4605      	mov	r5, r0
 801a48c:	4b17      	ldr	r3, [pc, #92]	; (801a4ec <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a48e:	2200      	movs	r2, #0
 801a490:	4917      	ldr	r1, [pc, #92]	; (801a4f0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a492:	f845 3b04 	str.w	r3, [r5], #4
 801a496:	2301      	movs	r3, #1
 801a498:	8102      	strh	r2, [r0, #8]
 801a49a:	4604      	mov	r4, r0
 801a49c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a4a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a4a4:	4b13      	ldr	r3, [pc, #76]	; (801a4f4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a4a6:	8142      	strh	r2, [r0, #10]
 801a4a8:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a4ac:	4b12      	ldr	r3, [pc, #72]	; (801a4f8 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a4ae:	8182      	strh	r2, [r0, #12]
 801a4b0:	81c2      	strh	r2, [r0, #14]
 801a4b2:	8202      	strh	r2, [r0, #16]
 801a4b4:	8242      	strh	r2, [r0, #18]
 801a4b6:	8282      	strh	r2, [r0, #20]
 801a4b8:	82c2      	strh	r2, [r0, #22]
 801a4ba:	6202      	str	r2, [r0, #32]
 801a4bc:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a4c0:	6342      	str	r2, [r0, #52]	; 0x34
 801a4c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a4c6:	6041      	str	r1, [r0, #4]
 801a4c8:	4611      	mov	r1, r2
 801a4ca:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a4ce:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801a4d2:	4628      	mov	r0, r5
 801a4d4:	f7f2 f85f 	bl	800c596 <_ZN8touchgfx8Drawable5setXYEss>
 801a4d8:	4639      	mov	r1, r7
 801a4da:	4628      	mov	r0, r5
 801a4dc:	f7f2 f879 	bl	800c5d2 <_ZN8touchgfx8Drawable8setWidthEs>
 801a4e0:	4628      	mov	r0, r5
 801a4e2:	4631      	mov	r1, r6
 801a4e4:	f7f2 f884 	bl	800c5f0 <_ZN8touchgfx8Drawable9setHeightEs>
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4ec:	0802a5b4 	.word	0x0802a5b4
 801a4f0:	080290fc 	.word	0x080290fc
 801a4f4:	2000b364 	.word	0x2000b364
 801a4f8:	2000b366 	.word	0x2000b366

0801a4fc <_ZN8touchgfx6Screen4drawEv>:
 801a4fc:	4b09      	ldr	r3, [pc, #36]	; (801a524 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a4fe:	b507      	push	{r0, r1, r2, lr}
 801a500:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a504:	2100      	movs	r1, #0
 801a506:	4b08      	ldr	r3, [pc, #32]	; (801a528 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a508:	9100      	str	r1, [sp, #0]
 801a50a:	4669      	mov	r1, sp
 801a50c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a510:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a514:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a518:	6803      	ldr	r3, [r0, #0]
 801a51a:	689b      	ldr	r3, [r3, #8]
 801a51c:	4798      	blx	r3
 801a51e:	b003      	add	sp, #12
 801a520:	f85d fb04 	ldr.w	pc, [sp], #4
 801a524:	2000b364 	.word	0x2000b364
 801a528:	2000b366 	.word	0x2000b366

0801a52c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a530:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a534:	b089      	sub	sp, #36	; 0x24
 801a536:	4680      	mov	r8, r0
 801a538:	460c      	mov	r4, r1
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	4615      	mov	r5, r2
 801a53e:	dd0e      	ble.n	801a55e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a540:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a544:	2b00      	cmp	r3, #0
 801a546:	dd0a      	ble.n	801a55e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a548:	4628      	mov	r0, r5
 801a54a:	f7ff ff59 	bl	801a400 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a54e:	4621      	mov	r1, r4
 801a550:	f7fe ff5a 	bl	8019408 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a554:	69eb      	ldr	r3, [r5, #28]
 801a556:	b928      	cbnz	r0, 801a564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a558:	461d      	mov	r5, r3
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d1f4      	bne.n	801a548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a55e:	b009      	add	sp, #36	; 0x24
 801a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a564:	ae04      	add	r6, sp, #16
 801a566:	2b00      	cmp	r3, #0
 801a568:	d051      	beq.n	801a60e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a56a:	682b      	ldr	r3, [r5, #0]
 801a56c:	4629      	mov	r1, r5
 801a56e:	a802      	add	r0, sp, #8
 801a570:	68db      	ldr	r3, [r3, #12]
 801a572:	4798      	blx	r3
 801a574:	4628      	mov	r0, r5
 801a576:	f7ff ff5f 	bl	801a438 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a57a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a57e:	4407      	add	r7, r0
 801a580:	4628      	mov	r0, r5
 801a582:	f7ff ff6d 	bl	801a460 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a586:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a58a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a58e:	b23f      	sxth	r7, r7
 801a590:	4418      	add	r0, r3
 801a592:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a596:	4621      	mov	r1, r4
 801a598:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a59c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a5a0:	4630      	mov	r0, r6
 801a5a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5a6:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a5aa:	f7fb fac9 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 801a5ae:	4628      	mov	r0, r5
 801a5b0:	f7ff ff26 	bl	801a400 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a5b4:	ab06      	add	r3, sp, #24
 801a5b6:	4602      	mov	r2, r0
 801a5b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a5bc:	e883 0003 	stmia.w	r3, {r0, r1}
 801a5c0:	4611      	mov	r1, r2
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	f7fb fabc 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 801a5c8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a5cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a5d0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a5d4:	4299      	cmp	r1, r3
 801a5d6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a5da:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a5de:	d10b      	bne.n	801a5f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a5e0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a5e4:	4552      	cmp	r2, sl
 801a5e6:	d107      	bne.n	801a5f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a5e8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a5ec:	455a      	cmp	r2, fp
 801a5ee:	d103      	bne.n	801a5f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801a5f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a5f4:	454a      	cmp	r2, r9
 801a5f6:	d00a      	beq.n	801a60e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a5f8:	f1bb 0f00 	cmp.w	fp, #0
 801a5fc:	d002      	beq.n	801a604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801a5fe:	f1b9 0f00 	cmp.w	r9, #0
 801a602:	d12e      	bne.n	801a662 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801a604:	69ea      	ldr	r2, [r5, #28]
 801a606:	4621      	mov	r1, r4
 801a608:	4640      	mov	r0, r8
 801a60a:	f7ff ff8f 	bl	801a52c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a60e:	4628      	mov	r0, r5
 801a610:	f7ff fef6 	bl	801a400 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a614:	6861      	ldr	r1, [r4, #4]
 801a616:	4602      	mov	r2, r0
 801a618:	4633      	mov	r3, r6
 801a61a:	6820      	ldr	r0, [r4, #0]
 801a61c:	c303      	stmia	r3!, {r0, r1}
 801a61e:	4611      	mov	r1, r2
 801a620:	4630      	mov	r0, r6
 801a622:	f7fb fa8d 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 801a626:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	dd97      	ble.n	801a55e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a62e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a632:	2b00      	cmp	r3, #0
 801a634:	dd93      	ble.n	801a55e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a636:	4628      	mov	r0, r5
 801a638:	f7ff fefe 	bl	801a438 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a63c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a640:	1a18      	subs	r0, r3, r0
 801a642:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a646:	4628      	mov	r0, r5
 801a648:	f7ff ff0a 	bl	801a460 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a64c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a650:	4631      	mov	r1, r6
 801a652:	1a18      	subs	r0, r3, r0
 801a654:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a658:	4628      	mov	r0, r5
 801a65a:	682b      	ldr	r3, [r5, #0]
 801a65c:	689b      	ldr	r3, [r3, #8]
 801a65e:	4798      	blx	r3
 801a660:	e77d      	b.n	801a55e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a662:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a666:	fa1f f08a 	uxth.w	r0, sl
 801a66a:	4552      	cmp	r2, sl
 801a66c:	9000      	str	r0, [sp, #0]
 801a66e:	da12      	bge.n	801a696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801a670:	9301      	str	r3, [sp, #4]
 801a672:	9b00      	ldr	r3, [sp, #0]
 801a674:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a678:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a67c:	1a9a      	subs	r2, r3, r2
 801a67e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a682:	4631      	mov	r1, r6
 801a684:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a688:	4640      	mov	r0, r8
 801a68a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a68e:	69ea      	ldr	r2, [r5, #28]
 801a690:	f7ff ff4c 	bl	801a52c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a694:	9b01      	ldr	r3, [sp, #4]
 801a696:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a69a:	b29f      	uxth	r7, r3
 801a69c:	429a      	cmp	r2, r3
 801a69e:	da0d      	bge.n	801a6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801a6a0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a6a4:	1aba      	subs	r2, r7, r2
 801a6a6:	f8ad a012 	strh.w	sl, [sp, #18]
 801a6aa:	4631      	mov	r1, r6
 801a6ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a6b0:	4640      	mov	r0, r8
 801a6b2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a6b6:	69ea      	ldr	r2, [r5, #28]
 801a6b8:	f7ff ff38 	bl	801a52c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a6bc:	8822      	ldrh	r2, [r4, #0]
 801a6be:	445f      	add	r7, fp
 801a6c0:	88a3      	ldrh	r3, [r4, #4]
 801a6c2:	b2bf      	uxth	r7, r7
 801a6c4:	4413      	add	r3, r2
 801a6c6:	b23a      	sxth	r2, r7
 801a6c8:	b29b      	uxth	r3, r3
 801a6ca:	b219      	sxth	r1, r3
 801a6cc:	4291      	cmp	r1, r2
 801a6ce:	dd0d      	ble.n	801a6ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801a6d0:	1bdb      	subs	r3, r3, r7
 801a6d2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a6d6:	f8ad a012 	strh.w	sl, [sp, #18]
 801a6da:	4631      	mov	r1, r6
 801a6dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a6e0:	4640      	mov	r0, r8
 801a6e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a6e6:	69ea      	ldr	r2, [r5, #28]
 801a6e8:	f7ff ff20 	bl	801a52c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a6ec:	88e2      	ldrh	r2, [r4, #6]
 801a6ee:	8863      	ldrh	r3, [r4, #2]
 801a6f0:	4413      	add	r3, r2
 801a6f2:	9a00      	ldr	r2, [sp, #0]
 801a6f4:	444a      	add	r2, r9
 801a6f6:	b29b      	uxth	r3, r3
 801a6f8:	fa1f f982 	uxth.w	r9, r2
 801a6fc:	b219      	sxth	r1, r3
 801a6fe:	fa0f f289 	sxth.w	r2, r9
 801a702:	428a      	cmp	r2, r1
 801a704:	da83      	bge.n	801a60e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801a706:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a70a:	eba3 0309 	sub.w	r3, r3, r9
 801a70e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a712:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a716:	4631      	mov	r1, r6
 801a718:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a71c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a720:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a724:	69ea      	ldr	r2, [r5, #28]
 801a726:	e76f      	b.n	801a608 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801a728 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a72a:	2300      	movs	r3, #0
 801a72c:	aa02      	add	r2, sp, #8
 801a72e:	4604      	mov	r4, r0
 801a730:	3004      	adds	r0, #4
 801a732:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a736:	460d      	mov	r5, r1
 801a738:	f7fb fada 	bl	8015cf0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a73c:	9a01      	ldr	r2, [sp, #4]
 801a73e:	b11a      	cbz	r2, 801a748 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a740:	4629      	mov	r1, r5
 801a742:	4620      	mov	r0, r4
 801a744:	f7ff fef2 	bl	801a52c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a748:	b003      	add	sp, #12
 801a74a:	bd30      	pop	{r4, r5, pc}

0801a74c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a74c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a74e:	4602      	mov	r2, r0
 801a750:	4604      	mov	r4, r0
 801a752:	460d      	mov	r5, r1
 801a754:	466b      	mov	r3, sp
 801a756:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a75a:	6851      	ldr	r1, [r2, #4]
 801a75c:	c303      	stmia	r3!, {r0, r1}
 801a75e:	4629      	mov	r1, r5
 801a760:	4668      	mov	r0, sp
 801a762:	f7fb f9ed 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 801a766:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a76a:	4669      	mov	r1, sp
 801a76c:	b123      	cbz	r3, 801a778 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a76e:	4620      	mov	r0, r4
 801a770:	f7ff ffda 	bl	801a728 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a774:	b003      	add	sp, #12
 801a776:	bd30      	pop	{r4, r5, pc}
 801a778:	1d20      	adds	r0, r4, #4
 801a77a:	f7fb fa80 	bl	8015c7e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a77e:	e7f9      	b.n	801a774 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a780 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a780:	460b      	mov	r3, r1
 801a782:	680a      	ldr	r2, [r1, #0]
 801a784:	1d01      	adds	r1, r0, #4
 801a786:	6952      	ldr	r2, [r2, #20]
 801a788:	4618      	mov	r0, r3
 801a78a:	4710      	bx	r2

0801a78c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a78c:	b510      	push	{r4, lr}
 801a78e:	4298      	cmp	r0, r3
 801a790:	eb01 0402 	add.w	r4, r1, r2
 801a794:	b224      	sxth	r4, r4
 801a796:	d22c      	bcs.n	801a7f2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a798:	b35b      	cbz	r3, 801a7f2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801a79a:	ee07 0a90 	vmov	s15, r0
 801a79e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801a7a2:	ee07 3a90 	vmov	s15, r3
 801a7a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a7aa:	ee07 2a90 	vmov	s15, r2
 801a7ae:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801a7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a7b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a7ba:	ee07 1a90 	vmov	s15, r1
 801a7be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a7c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a7c6:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a7ca:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a7ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a7d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a7d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7de:	bfcc      	ite	gt
 801a7e0:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a7e4:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a7e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a7ec:	ee17 3a90 	vmov	r3, s15
 801a7f0:	b21c      	sxth	r4, r3
 801a7f2:	4620      	mov	r0, r4
 801a7f4:	bd10      	pop	{r4, pc}

0801a7f6 <_ZN8touchgfx12TextProviderC1Ev>:
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	b510      	push	{r4, lr}
 801a7fc:	4604      	mov	r4, r0
 801a7fe:	60c3      	str	r3, [r0, #12]
 801a800:	7403      	strb	r3, [r0, #16]
 801a802:	82c3      	strh	r3, [r0, #22]
 801a804:	8303      	strh	r3, [r0, #24]
 801a806:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a808:	8603      	strh	r3, [r0, #48]	; 0x30
 801a80a:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a80c:	8703      	strh	r3, [r0, #56]	; 0x38
 801a80e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a810:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a814:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a818:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a81c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a820:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a824:	e9c0 3300 	strd	r3, r3, [r0]
 801a828:	f7f7 ffe8 	bl	80127fc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a82c:	4620      	mov	r0, r4
 801a82e:	bd10      	pop	{r4, pc}

0801a830 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a830:	b530      	push	{r4, r5, lr}
 801a832:	2500      	movs	r5, #0
 801a834:	2401      	movs	r4, #1
 801a836:	6843      	ldr	r3, [r0, #4]
 801a838:	b913      	cbnz	r3, 801a840 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a83a:	6803      	ldr	r3, [r0, #0]
 801a83c:	b1f3      	cbz	r3, 801a87c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a83e:	6043      	str	r3, [r0, #4]
 801a840:	7c03      	ldrb	r3, [r0, #16]
 801a842:	b143      	cbz	r3, 801a856 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a844:	68c3      	ldr	r3, [r0, #12]
 801a846:	b12b      	cbz	r3, 801a854 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a848:	881a      	ldrh	r2, [r3, #0]
 801a84a:	b11a      	cbz	r2, 801a854 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a84c:	1c9a      	adds	r2, r3, #2
 801a84e:	60c2      	str	r2, [r0, #12]
 801a850:	8818      	ldrh	r0, [r3, #0]
 801a852:	bd30      	pop	{r4, r5, pc}
 801a854:	7405      	strb	r5, [r0, #16]
 801a856:	6843      	ldr	r3, [r0, #4]
 801a858:	8819      	ldrh	r1, [r3, #0]
 801a85a:	b179      	cbz	r1, 801a87c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a85c:	1c9a      	adds	r2, r3, #2
 801a85e:	2902      	cmp	r1, #2
 801a860:	6042      	str	r2, [r0, #4]
 801a862:	d1f5      	bne.n	801a850 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a864:	6883      	ldr	r3, [r0, #8]
 801a866:	1d1a      	adds	r2, r3, #4
 801a868:	6082      	str	r2, [r0, #8]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	60c3      	str	r3, [r0, #12]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d0e1      	beq.n	801a836 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a872:	881b      	ldrh	r3, [r3, #0]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d0de      	beq.n	801a836 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a878:	7404      	strb	r4, [r0, #16]
 801a87a:	e7dc      	b.n	801a836 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a87c:	2000      	movs	r0, #0
 801a87e:	e7e8      	b.n	801a852 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a880 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a880:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a882:	2300      	movs	r3, #0
 801a884:	6082      	str	r2, [r0, #8]
 801a886:	6001      	str	r1, [r0, #0]
 801a888:	6043      	str	r3, [r0, #4]
 801a88a:	60c3      	str	r3, [r0, #12]
 801a88c:	7403      	strb	r3, [r0, #16]
 801a88e:	8603      	strh	r3, [r0, #48]	; 0x30
 801a890:	8303      	strh	r3, [r0, #24]
 801a892:	8703      	strh	r3, [r0, #56]	; 0x38
 801a894:	b410      	push	{r4}
 801a896:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a89a:	f7f7 bfaf 	b.w	80127fc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a89e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a89e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8a0:	4605      	mov	r5, r0
 801a8a2:	4608      	mov	r0, r1
 801a8a4:	b1f1      	cbz	r1, 801a8e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a8a6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a8aa:	460b      	mov	r3, r1
 801a8ac:	f101 0708 	add.w	r7, r1, #8
 801a8b0:	4622      	mov	r2, r4
 801a8b2:	6818      	ldr	r0, [r3, #0]
 801a8b4:	3308      	adds	r3, #8
 801a8b6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a8ba:	4626      	mov	r6, r4
 801a8bc:	42bb      	cmp	r3, r7
 801a8be:	c603      	stmia	r6!, {r0, r1}
 801a8c0:	4634      	mov	r4, r6
 801a8c2:	d1f6      	bne.n	801a8b2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a8c4:	6818      	ldr	r0, [r3, #0]
 801a8c6:	6030      	str	r0, [r6, #0]
 801a8c8:	4610      	mov	r0, r2
 801a8ca:	889b      	ldrh	r3, [r3, #4]
 801a8cc:	80b3      	strh	r3, [r6, #4]
 801a8ce:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a8d2:	015b      	lsls	r3, r3, #5
 801a8d4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a8d8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a8dc:	430b      	orrs	r3, r1
 801a8de:	425b      	negs	r3, r3
 801a8e0:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a8e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a8e6:	b538      	push	{r3, r4, r5, lr}
 801a8e8:	460c      	mov	r4, r1
 801a8ea:	6811      	ldr	r1, [r2, #0]
 801a8ec:	4610      	mov	r0, r2
 801a8ee:	68cd      	ldr	r5, [r1, #12]
 801a8f0:	4619      	mov	r1, r3
 801a8f2:	47a8      	blx	r5
 801a8f4:	2800      	cmp	r0, #0
 801a8f6:	bf08      	it	eq
 801a8f8:	4620      	moveq	r0, r4
 801a8fa:	bd38      	pop	{r3, r4, r5, pc}

0801a8fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8fe:	4604      	mov	r4, r0
 801a900:	4615      	mov	r5, r2
 801a902:	4608      	mov	r0, r1
 801a904:	b93a      	cbnz	r2, 801a916 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a906:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a90a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a90e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a912:	4628      	mov	r0, r5
 801a914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a916:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a91a:	8893      	ldrh	r3, [r2, #4]
 801a91c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a920:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a924:	79ee      	ldrb	r6, [r5, #7]
 801a926:	4316      	orrs	r6, r2
 801a928:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a92c:	189a      	adds	r2, r3, r2
 801a92e:	b2b7      	uxth	r7, r6
 801a930:	b291      	uxth	r1, r2
 801a932:	291d      	cmp	r1, #29
 801a934:	f200 8084 	bhi.w	801aa40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a938:	2201      	movs	r2, #1
 801a93a:	10f6      	asrs	r6, r6, #3
 801a93c:	408a      	lsls	r2, r1
 801a93e:	4978      	ldr	r1, [pc, #480]	; (801ab20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a940:	420a      	tst	r2, r1
 801a942:	d12e      	bne.n	801a9a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a944:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a948:	d07a      	beq.n	801aa40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a94a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801a94e:	462b      	mov	r3, r5
 801a950:	f105 0e08 	add.w	lr, r5, #8
 801a954:	4615      	mov	r5, r2
 801a956:	6818      	ldr	r0, [r3, #0]
 801a958:	3308      	adds	r3, #8
 801a95a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a95e:	4694      	mov	ip, r2
 801a960:	4573      	cmp	r3, lr
 801a962:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a966:	4662      	mov	r2, ip
 801a968:	d1f5      	bne.n	801a956 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a96a:	6818      	ldr	r0, [r3, #0]
 801a96c:	f8cc 0000 	str.w	r0, [ip]
 801a970:	889b      	ldrh	r3, [r3, #4]
 801a972:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a976:	b2b3      	uxth	r3, r6
 801a978:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a97c:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801a980:	1aca      	subs	r2, r1, r3
 801a982:	1bcf      	subs	r7, r1, r7
 801a984:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a988:	b292      	uxth	r2, r2
 801a98a:	1afb      	subs	r3, r7, r3
 801a98c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801a990:	10d2      	asrs	r2, r2, #3
 801a992:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a996:	4302      	orrs	r2, r0
 801a998:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801a99c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801a9a0:	e7b7      	b.n	801a912 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a9a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a9a4:	b92b      	cbnz	r3, 801a9b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a9a6:	4b5f      	ldr	r3, [pc, #380]	; (801ab24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a9a8:	21c0      	movs	r1, #192	; 0xc0
 801a9aa:	4a5f      	ldr	r2, [pc, #380]	; (801ab28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a9ac:	485f      	ldr	r0, [pc, #380]	; (801ab2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a9ae:	f00a ff35 	bl	802581c <__assert_func>
 801a9b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a9b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a9b8:	8b59      	ldrh	r1, [r3, #26]
 801a9ba:	f640 6333 	movw	r3, #3635	; 0xe33
 801a9be:	4299      	cmp	r1, r3
 801a9c0:	d110      	bne.n	801a9e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a9c2:	6803      	ldr	r3, [r0, #0]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	4798      	blx	r3
 801a9c8:	7b41      	ldrb	r1, [r0, #13]
 801a9ca:	00cb      	lsls	r3, r1, #3
 801a9cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9d0:	7a03      	ldrb	r3, [r0, #8]
 801a9d2:	0648      	lsls	r0, r1, #25
 801a9d4:	ea43 0302 	orr.w	r3, r3, r2
 801a9d8:	bf44      	itt	mi
 801a9da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9de:	b21b      	sxthmi	r3, r3
 801a9e0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a9e4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801a9e8:	462a      	mov	r2, r5
 801a9ea:	f105 0c08 	add.w	ip, r5, #8
 801a9ee:	443b      	add	r3, r7
 801a9f0:	4433      	add	r3, r6
 801a9f2:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801a9f6:	b29b      	uxth	r3, r3
 801a9f8:	4635      	mov	r5, r6
 801a9fa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801a9fe:	6810      	ldr	r0, [r2, #0]
 801aa00:	3208      	adds	r2, #8
 801aa02:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801aa06:	4637      	mov	r7, r6
 801aa08:	4562      	cmp	r2, ip
 801aa0a:	c703      	stmia	r7!, {r0, r1}
 801aa0c:	463e      	mov	r6, r7
 801aa0e:	d1f6      	bne.n	801a9fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801aa10:	6810      	ldr	r0, [r2, #0]
 801aa12:	6038      	str	r0, [r7, #0]
 801aa14:	8892      	ldrh	r2, [r2, #4]
 801aa16:	80ba      	strh	r2, [r7, #4]
 801aa18:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801aa1c:	10db      	asrs	r3, r3, #3
 801aa1e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801aa22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801aa26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801aa2a:	4313      	orrs	r3, r2
 801aa2c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801aa30:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801aa34:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801aa38:	1a9b      	subs	r3, r3, r2
 801aa3a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801aa3e:	e768      	b.n	801a912 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801aa40:	f023 0204 	bic.w	r2, r3, #4
 801aa44:	f640 611b 	movw	r1, #3611	; 0xe1b
 801aa48:	428a      	cmp	r2, r1
 801aa4a:	d003      	beq.n	801aa54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801aa4c:	f640 621d 	movw	r2, #3613	; 0xe1d
 801aa50:	4293      	cmp	r3, r2
 801aa52:	d120      	bne.n	801aa96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801aa54:	3b01      	subs	r3, #1
 801aa56:	4602      	mov	r2, r0
 801aa58:	4629      	mov	r1, r5
 801aa5a:	4620      	mov	r0, r4
 801aa5c:	b29b      	uxth	r3, r3
 801aa5e:	f7ff ff42 	bl	801a8e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801aa62:	7b41      	ldrb	r1, [r0, #13]
 801aa64:	00cb      	lsls	r3, r1, #3
 801aa66:	0649      	lsls	r1, r1, #25
 801aa68:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aa6c:	7a03      	ldrb	r3, [r0, #8]
 801aa6e:	ea43 0302 	orr.w	r3, r3, r2
 801aa72:	bf44      	itt	mi
 801aa74:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa78:	b21b      	sxthmi	r3, r3
 801aa7a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801aa7e:	7b6b      	ldrb	r3, [r5, #13]
 801aa80:	7aaa      	ldrb	r2, [r5, #10]
 801aa82:	005b      	lsls	r3, r3, #1
 801aa84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aa88:	4313      	orrs	r3, r2
 801aa8a:	115a      	asrs	r2, r3, #5
 801aa8c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801aa90:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801aa94:	e035      	b.n	801ab02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801aa96:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801aa9a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801aa9e:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801aaa2:	7a2a      	ldrb	r2, [r5, #8]
 801aaa4:	ea42 0201 	orr.w	r2, r2, r1
 801aaa8:	f640 6109 	movw	r1, #3593	; 0xe09
 801aaac:	bf1c      	itt	ne
 801aaae:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801aab2:	b212      	sxthne	r2, r2
 801aab4:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801aab8:	f023 0210 	bic.w	r2, r3, #16
 801aabc:	428a      	cmp	r2, r1
 801aabe:	d003      	beq.n	801aac8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801aac0:	f640 6213 	movw	r2, #3603	; 0xe13
 801aac4:	4293      	cmp	r3, r2
 801aac6:	d129      	bne.n	801ab1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801aac8:	7b6e      	ldrb	r6, [r5, #13]
 801aaca:	4629      	mov	r1, r5
 801aacc:	0076      	lsls	r6, r6, #1
 801aace:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801aad2:	7aae      	ldrb	r6, [r5, #10]
 801aad4:	4316      	orrs	r6, r2
 801aad6:	f640 6213 	movw	r2, #3603	; 0xe13
 801aada:	4293      	cmp	r3, r2
 801aadc:	4602      	mov	r2, r0
 801aade:	4620      	mov	r0, r4
 801aae0:	bf16      	itet	ne
 801aae2:	f103 33ff 	addne.w	r3, r3, #4294967295
 801aae6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801aaea:	b29b      	uxthne	r3, r3
 801aaec:	f7ff fefb 	bl	801a8e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801aaf0:	7b43      	ldrb	r3, [r0, #13]
 801aaf2:	7a82      	ldrb	r2, [r0, #10]
 801aaf4:	005b      	lsls	r3, r3, #1
 801aaf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aafa:	4313      	orrs	r3, r2
 801aafc:	1af6      	subs	r6, r6, r3
 801aafe:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801ab02:	7b69      	ldrb	r1, [r5, #13]
 801ab04:	00cb      	lsls	r3, r1, #3
 801ab06:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ab0a:	7a2b      	ldrb	r3, [r5, #8]
 801ab0c:	4313      	orrs	r3, r2
 801ab0e:	064a      	lsls	r2, r1, #25
 801ab10:	bf44      	itt	mi
 801ab12:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab16:	b21b      	sxthmi	r3, r3
 801ab18:	1bdb      	subs	r3, r3, r7
 801ab1a:	e73f      	b.n	801a99c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	e7b7      	b.n	801aa90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801ab20:	3fc00079 	.word	0x3fc00079
 801ab24:	0802a5e0 	.word	0x0802a5e0
 801ab28:	0802a852 	.word	0x0802a852
 801ab2c:	0802a5e9 	.word	0x0802a5e9

0801ab30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ab30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab34:	4604      	mov	r4, r0
 801ab36:	b942      	cbnz	r2, 801ab4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ab38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ab3c:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801ab40:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801ab44:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ab48:	e046      	b.n	801abd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ab4a:	7b51      	ldrb	r1, [r2, #13]
 801ab4c:	8893      	ldrh	r3, [r2, #4]
 801ab4e:	010f      	lsls	r7, r1, #4
 801ab50:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ab54:	79d7      	ldrb	r7, [r2, #7]
 801ab56:	4307      	orrs	r7, r0
 801ab58:	2f04      	cmp	r7, #4
 801ab5a:	b2bd      	uxth	r5, r7
 801ab5c:	bfcc      	ite	gt
 801ab5e:	08bf      	lsrgt	r7, r7, #2
 801ab60:	2701      	movle	r7, #1
 801ab62:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ab66:	f200 80ab 	bhi.w	801acc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801ab6a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ab6e:	4283      	cmp	r3, r0
 801ab70:	d216      	bcs.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab72:	f240 605b 	movw	r0, #1627	; 0x65b
 801ab76:	4283      	cmp	r3, r0
 801ab78:	d859      	bhi.n	801ac2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801ab7a:	f240 6057 	movw	r0, #1623	; 0x657
 801ab7e:	4283      	cmp	r3, r0
 801ab80:	d20e      	bcs.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab82:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ab86:	d24a      	bcs.n	801ac1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801ab88:	f240 604e 	movw	r0, #1614	; 0x64e
 801ab8c:	4283      	cmp	r3, r0
 801ab8e:	d207      	bcs.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab90:	f240 601a 	movw	r0, #1562	; 0x61a
 801ab94:	4283      	cmp	r3, r0
 801ab96:	d02a      	beq.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab98:	d821      	bhi.n	801abde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801ab9a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ab9e:	d35b      	bcc.n	801ac58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aba0:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801aba4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aba8:	f040 80d0 	bne.w	801ad4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801abac:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801abb0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801abb4:	f040 80ca 	bne.w	801ad4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801abb8:	00cb      	lsls	r3, r1, #3
 801abba:	0649      	lsls	r1, r1, #25
 801abbc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801abc0:	7a13      	ldrb	r3, [r2, #8]
 801abc2:	ea43 0300 	orr.w	r3, r3, r0
 801abc6:	bf44      	itt	mi
 801abc8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801abcc:	b21b      	sxthmi	r3, r3
 801abce:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801abd2:	1b5d      	subs	r5, r3, r5
 801abd4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801abd8:	4610      	mov	r0, r2
 801abda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abde:	f240 604b 	movw	r0, #1611	; 0x64b
 801abe2:	4283      	cmp	r3, r0
 801abe4:	d338      	bcc.n	801ac58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801abe6:	f240 604c 	movw	r0, #1612	; 0x64c
 801abea:	4283      	cmp	r3, r0
 801abec:	d9d8      	bls.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801abee:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801abf2:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801abf6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801abfa:	f040 80f2 	bne.w	801ade2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801abfe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac02:	f040 80ee 	bne.w	801ade2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801ac06:	00cb      	lsls	r3, r1, #3
 801ac08:	064e      	lsls	r6, r1, #25
 801ac0a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ac0e:	7a13      	ldrb	r3, [r2, #8]
 801ac10:	ea43 0300 	orr.w	r3, r3, r0
 801ac14:	bf44      	itt	mi
 801ac16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac1a:	b21b      	sxthmi	r3, r3
 801ac1c:	e7d9      	b.n	801abd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801ac1e:	f240 6054 	movw	r0, #1620	; 0x654
 801ac22:	4283      	cmp	r3, r0
 801ac24:	d8e3      	bhi.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac26:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ac2a:	d9e0      	bls.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac2c:	e7b8      	b.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac2e:	f240 6074 	movw	r0, #1652	; 0x674
 801ac32:	4283      	cmp	r3, r0
 801ac34:	d0b4      	beq.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac36:	d82d      	bhi.n	801ac94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801ac38:	f240 605e 	movw	r0, #1630	; 0x65e
 801ac3c:	4283      	cmp	r3, r0
 801ac3e:	d804      	bhi.n	801ac4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801ac40:	f240 605d 	movw	r0, #1629	; 0x65d
 801ac44:	4283      	cmp	r3, r0
 801ac46:	d3d2      	bcc.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac48:	e7aa      	b.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac4a:	f240 605f 	movw	r0, #1631	; 0x65f
 801ac4e:	4283      	cmp	r3, r0
 801ac50:	d0cd      	beq.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ac52:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801ac56:	d0a3      	beq.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ac58:	00cb      	lsls	r3, r1, #3
 801ac5a:	0649      	lsls	r1, r1, #25
 801ac5c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ac60:	7a13      	ldrb	r3, [r2, #8]
 801ac62:	ea43 0300 	orr.w	r3, r3, r0
 801ac66:	bf44      	itt	mi
 801ac68:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac6c:	b21b      	sxthmi	r3, r3
 801ac6e:	1b5d      	subs	r5, r3, r5
 801ac70:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801ac74:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801ac78:	7b53      	ldrb	r3, [r2, #13]
 801ac7a:	015b      	lsls	r3, r3, #5
 801ac7c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ac80:	7993      	ldrb	r3, [r2, #6]
 801ac82:	430b      	orrs	r3, r1
 801ac84:	2105      	movs	r1, #5
 801ac86:	005b      	lsls	r3, r3, #1
 801ac88:	fb93 f3f1 	sdiv	r3, r3, r1
 801ac8c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ac90:	440b      	add	r3, r1
 801ac92:	e757      	b.n	801ab44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ac94:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ac98:	4283      	cmp	r3, r0
 801ac9a:	d809      	bhi.n	801acb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ac9c:	f240 60df 	movw	r0, #1759	; 0x6df
 801aca0:	4283      	cmp	r3, r0
 801aca2:	f4bf af7d 	bcs.w	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aca6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801acaa:	2b05      	cmp	r3, #5
 801acac:	d8d4      	bhi.n	801ac58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801acae:	e777      	b.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801acb0:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801acb4:	4283      	cmp	r3, r0
 801acb6:	d09a      	beq.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801acb8:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801acbc:	4283      	cmp	r3, r0
 801acbe:	e7ca      	b.n	801ac56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801acc0:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801acc4:	d22b      	bcs.n	801ad1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801acc6:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801acca:	4283      	cmp	r3, r0
 801accc:	d28f      	bcs.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801acce:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801acd2:	4283      	cmp	r3, r0
 801acd4:	d816      	bhi.n	801ad04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801acd6:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801acda:	4283      	cmp	r3, r0
 801acdc:	f4bf af60 	bcs.w	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ace0:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ace4:	4283      	cmp	r3, r0
 801ace6:	d80a      	bhi.n	801acfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801ace8:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801acec:	4283      	cmp	r3, r0
 801acee:	f4bf af57 	bcs.w	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801acf2:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801acf6:	4283      	cmp	r3, r0
 801acf8:	f43f af79 	beq.w	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801acfc:	e7ac      	b.n	801ac58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801acfe:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ad02:	e7f8      	b.n	801acf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801ad04:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ad08:	4283      	cmp	r3, r0
 801ad0a:	d802      	bhi.n	801ad12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801ad0c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ad10:	e798      	b.n	801ac44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801ad12:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ad16:	4283      	cmp	r3, r0
 801ad18:	f47f af42 	bne.w	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ad1c:	e767      	b.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ad1e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ad22:	4283      	cmp	r3, r0
 801ad24:	f43f af63 	beq.w	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ad28:	d802      	bhi.n	801ad30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ad2a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ad2e:	e7f2      	b.n	801ad16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801ad30:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ad34:	4283      	cmp	r3, r0
 801ad36:	d805      	bhi.n	801ad44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801ad38:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ad3c:	4283      	cmp	r3, r0
 801ad3e:	f4ff af2f 	bcc.w	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ad42:	e754      	b.n	801abee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ad44:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ad48:	4283      	cmp	r3, r0
 801ad4a:	e7af      	b.n	801acac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ad4c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801ad50:	4617      	mov	r7, r2
 801ad52:	f102 0808 	add.w	r8, r2, #8
 801ad56:	4666      	mov	r6, ip
 801ad58:	6838      	ldr	r0, [r7, #0]
 801ad5a:	3708      	adds	r7, #8
 801ad5c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ad60:	46e6      	mov	lr, ip
 801ad62:	4547      	cmp	r7, r8
 801ad64:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ad68:	46f4      	mov	ip, lr
 801ad6a:	d1f5      	bne.n	801ad58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ad6c:	6838      	ldr	r0, [r7, #0]
 801ad6e:	f8ce 0000 	str.w	r0, [lr]
 801ad72:	88b9      	ldrh	r1, [r7, #4]
 801ad74:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ad78:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801ad7c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ad80:	d009      	beq.n	801ad96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ad82:	7b51      	ldrb	r1, [r2, #13]
 801ad84:	7992      	ldrb	r2, [r2, #6]
 801ad86:	0149      	lsls	r1, r1, #5
 801ad88:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ad8c:	4311      	orrs	r1, r2
 801ad8e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ad92:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801ad96:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ad9a:	d00d      	beq.n	801adb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ad9c:	442b      	add	r3, r5
 801ad9e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ada8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801adac:	10db      	asrs	r3, r3, #3
 801adae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801adb2:	4313      	orrs	r3, r2
 801adb4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801adb8:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801adbc:	00cb      	lsls	r3, r1, #3
 801adbe:	064f      	lsls	r7, r1, #25
 801adc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801adc4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801adc8:	ea43 0302 	orr.w	r3, r3, r2
 801adcc:	bf44      	itt	mi
 801adce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801add2:	b21b      	sxthmi	r3, r3
 801add4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801add8:	1b5d      	subs	r5, r3, r5
 801adda:	4632      	mov	r2, r6
 801addc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801ade0:	e6fa      	b.n	801abd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ade2:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801ade6:	4694      	mov	ip, r2
 801ade8:	f102 0908 	add.w	r9, r2, #8
 801adec:	4676      	mov	r6, lr
 801adee:	f8dc 0000 	ldr.w	r0, [ip]
 801adf2:	f10c 0c08 	add.w	ip, ip, #8
 801adf6:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801adfa:	46f0      	mov	r8, lr
 801adfc:	45cc      	cmp	ip, r9
 801adfe:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ae02:	46c6      	mov	lr, r8
 801ae04:	d1f3      	bne.n	801adee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801ae06:	f8dc 0000 	ldr.w	r0, [ip]
 801ae0a:	f8c8 0000 	str.w	r0, [r8]
 801ae0e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801ae12:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ae16:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801ae1a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ae1e:	d009      	beq.n	801ae34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801ae20:	7b51      	ldrb	r1, [r2, #13]
 801ae22:	7992      	ldrb	r2, [r2, #6]
 801ae24:	0149      	lsls	r1, r1, #5
 801ae26:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ae2a:	4311      	orrs	r1, r2
 801ae2c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ae30:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801ae34:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ae38:	d00d      	beq.n	801ae56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801ae3a:	1bdb      	subs	r3, r3, r7
 801ae3c:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801ae40:	b29b      	uxth	r3, r3
 801ae42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ae46:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801ae4a:	10db      	asrs	r3, r3, #3
 801ae4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ae50:	4313      	orrs	r3, r2
 801ae52:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801ae56:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801ae5a:	00cb      	lsls	r3, r1, #3
 801ae5c:	0648      	lsls	r0, r1, #25
 801ae5e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ae62:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801ae66:	ea43 0302 	orr.w	r3, r3, r2
 801ae6a:	bf44      	itt	mi
 801ae6c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ae70:	b21b      	sxthmi	r3, r3
 801ae72:	e7b1      	b.n	801add8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801ae74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae78:	461d      	mov	r5, r3
 801ae7a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ae7c:	4604      	mov	r4, r0
 801ae7e:	4617      	mov	r7, r2
 801ae80:	b92b      	cbnz	r3, 801ae8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ae82:	4b23      	ldr	r3, [pc, #140]	; (801af10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801ae84:	21c0      	movs	r1, #192	; 0xc0
 801ae86:	4a23      	ldr	r2, [pc, #140]	; (801af14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801ae88:	4823      	ldr	r0, [pc, #140]	; (801af18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ae8a:	f00a fcc7 	bl	802581c <__assert_func>
 801ae8e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ae90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ae94:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ae98:	f7f7 fc0c 	bl	80126b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae9c:	683b      	ldr	r3, [r7, #0]
 801ae9e:	4601      	mov	r1, r0
 801aea0:	4606      	mov	r6, r0
 801aea2:	4638      	mov	r0, r7
 801aea4:	68db      	ldr	r3, [r3, #12]
 801aea6:	4798      	blx	r3
 801aea8:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801aeac:	4602      	mov	r2, r0
 801aeae:	6028      	str	r0, [r5, #0]
 801aeb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801aeb4:	d215      	bcs.n	801aee2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801aeb6:	4643      	mov	r3, r8
 801aeb8:	4639      	mov	r1, r7
 801aeba:	4620      	mov	r0, r4
 801aebc:	f7ff fe38 	bl	801ab30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801aec0:	6028      	str	r0, [r5, #0]
 801aec2:	682b      	ldr	r3, [r5, #0]
 801aec4:	b143      	cbz	r3, 801aed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801aec6:	7b5a      	ldrb	r2, [r3, #13]
 801aec8:	7a9b      	ldrb	r3, [r3, #10]
 801aeca:	0052      	lsls	r2, r2, #1
 801aecc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801aed0:	4313      	orrs	r3, r2
 801aed2:	bf0c      	ite	eq
 801aed4:	2301      	moveq	r3, #1
 801aed6:	2300      	movne	r3, #0
 801aed8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801aedc:	4630      	mov	r0, r6
 801aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee2:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	2b7f      	cmp	r3, #127	; 0x7f
 801aeea:	d804      	bhi.n	801aef6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801aeec:	4639      	mov	r1, r7
 801aeee:	4620      	mov	r0, r4
 801aef0:	f7ff fd04 	bl	801a8fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aef4:	e7e4      	b.n	801aec0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801aef6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d0e1      	beq.n	801aec2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801aefe:	f640 1302 	movw	r3, #2306	; 0x902
 801af02:	429e      	cmp	r6, r3
 801af04:	d1dd      	bne.n	801aec2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801af06:	4601      	mov	r1, r0
 801af08:	4620      	mov	r0, r4
 801af0a:	f7ff fcc8 	bl	801a89e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801af0e:	e7d7      	b.n	801aec0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801af10:	0802a5e0 	.word	0x0802a5e0
 801af14:	0802a852 	.word	0x0802a852
 801af18:	0802a5e9 	.word	0x0802a5e9

0801af1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af20:	461d      	mov	r5, r3
 801af22:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801af24:	4604      	mov	r4, r0
 801af26:	4617      	mov	r7, r2
 801af28:	b92b      	cbnz	r3, 801af36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801af2a:	4b25      	ldr	r3, [pc, #148]	; (801afc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801af2c:	21c0      	movs	r1, #192	; 0xc0
 801af2e:	4a25      	ldr	r2, [pc, #148]	; (801afc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801af30:	4825      	ldr	r0, [pc, #148]	; (801afc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801af32:	f00a fc73 	bl	802581c <__assert_func>
 801af36:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801af38:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801af3c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801af40:	f7f7 fbb8 	bl	80126b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	4601      	mov	r1, r0
 801af48:	4606      	mov	r6, r0
 801af4a:	4638      	mov	r0, r7
 801af4c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801af50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801af54:	47c8      	blx	r9
 801af56:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801af5a:	4602      	mov	r2, r0
 801af5c:	6028      	str	r0, [r5, #0]
 801af5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801af62:	d215      	bcs.n	801af90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801af64:	4643      	mov	r3, r8
 801af66:	4639      	mov	r1, r7
 801af68:	4620      	mov	r0, r4
 801af6a:	f7ff fde1 	bl	801ab30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801af6e:	6028      	str	r0, [r5, #0]
 801af70:	682b      	ldr	r3, [r5, #0]
 801af72:	b143      	cbz	r3, 801af86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801af74:	7b5a      	ldrb	r2, [r3, #13]
 801af76:	7a9b      	ldrb	r3, [r3, #10]
 801af78:	0052      	lsls	r2, r2, #1
 801af7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801af7e:	4313      	orrs	r3, r2
 801af80:	bf0c      	ite	eq
 801af82:	2301      	moveq	r3, #1
 801af84:	2300      	movne	r3, #0
 801af86:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801af8a:	4630      	mov	r0, r6
 801af8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af90:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801af94:	b29b      	uxth	r3, r3
 801af96:	2b7f      	cmp	r3, #127	; 0x7f
 801af98:	d804      	bhi.n	801afa4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801af9a:	4639      	mov	r1, r7
 801af9c:	4620      	mov	r0, r4
 801af9e:	f7ff fcad 	bl	801a8fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801afa2:	e7e4      	b.n	801af6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801afa4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d0e1      	beq.n	801af70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801afac:	f640 1302 	movw	r3, #2306	; 0x902
 801afb0:	429e      	cmp	r6, r3
 801afb2:	d1dd      	bne.n	801af70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801afb4:	4601      	mov	r1, r0
 801afb6:	4620      	mov	r0, r4
 801afb8:	f7ff fc71 	bl	801a89e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801afbc:	e7d7      	b.n	801af6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801afbe:	bf00      	nop
 801afc0:	0802a5e0 	.word	0x0802a5e0
 801afc4:	0802a852 	.word	0x0802a852
 801afc8:	0802a5e9 	.word	0x0802a5e9

0801afcc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801afcc:	b510      	push	{r4, lr}
 801afce:	4604      	mov	r4, r0
 801afd0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801afd2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801afd4:	b9d9      	cbnz	r1, 801b00e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801afd6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801afd8:	2b0a      	cmp	r3, #10
 801afda:	d036      	beq.n	801b04a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801afdc:	4620      	mov	r0, r4
 801afde:	f7ff fc27 	bl	801a830 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801afe2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801afe4:	2b09      	cmp	r3, #9
 801afe6:	d906      	bls.n	801aff6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801afe8:	4b18      	ldr	r3, [pc, #96]	; (801b04c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801afea:	f44f 7182 	mov.w	r1, #260	; 0x104
 801afee:	4a18      	ldr	r2, [pc, #96]	; (801b050 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801aff0:	4818      	ldr	r0, [pc, #96]	; (801b054 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801aff2:	f00a fc13 	bl	802581c <__assert_func>
 801aff6:	1c5a      	adds	r2, r3, #1
 801aff8:	8622      	strh	r2, [r4, #48]	; 0x30
 801affa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801affc:	4413      	add	r3, r2
 801affe:	b29b      	uxth	r3, r3
 801b000:	2b09      	cmp	r3, #9
 801b002:	bf88      	it	hi
 801b004:	3b0a      	subhi	r3, #10
 801b006:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b00a:	8358      	strh	r0, [r3, #26]
 801b00c:	e7e3      	b.n	801afd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801b00e:	2b0a      	cmp	r3, #10
 801b010:	d01b      	beq.n	801b04a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b012:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b014:	3901      	subs	r1, #1
 801b016:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b01a:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b01c:	8721      	strh	r1, [r4, #56]	; 0x38
 801b01e:	1c51      	adds	r1, r2, #1
 801b020:	b289      	uxth	r1, r1
 801b022:	2901      	cmp	r1, #1
 801b024:	bf8a      	itet	hi
 801b026:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b02a:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801b02c:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801b02e:	2b09      	cmp	r3, #9
 801b030:	d8da      	bhi.n	801afe8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801b032:	1c5a      	adds	r2, r3, #1
 801b034:	8622      	strh	r2, [r4, #48]	; 0x30
 801b036:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b038:	4413      	add	r3, r2
 801b03a:	b29b      	uxth	r3, r3
 801b03c:	2b09      	cmp	r3, #9
 801b03e:	bf88      	it	hi
 801b040:	3b0a      	subhi	r3, #10
 801b042:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b046:	8358      	strh	r0, [r3, #26]
 801b048:	e7c2      	b.n	801afd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b04a:	bd10      	pop	{r4, pc}
 801b04c:	0802a615 	.word	0x0802a615
 801b050:	0802a9a8 	.word	0x0802a9a8
 801b054:	0802a5e9 	.word	0x0802a5e9

0801b058 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b058:	b538      	push	{r3, r4, r5, lr}
 801b05a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801b05c:	4604      	mov	r4, r0
 801b05e:	b92a      	cbnz	r2, 801b06c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801b060:	4b13      	ldr	r3, [pc, #76]	; (801b0b0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801b062:	21d5      	movs	r1, #213	; 0xd5
 801b064:	4a13      	ldr	r2, [pc, #76]	; (801b0b4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801b066:	4814      	ldr	r0, [pc, #80]	; (801b0b8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801b068:	f00a fbd8 	bl	802581c <__assert_func>
 801b06c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b06e:	3a01      	subs	r2, #1
 801b070:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801b074:	8b4d      	ldrh	r5, [r1, #26]
 801b076:	8602      	strh	r2, [r0, #48]	; 0x30
 801b078:	1c5a      	adds	r2, r3, #1
 801b07a:	b292      	uxth	r2, r2
 801b07c:	2a09      	cmp	r2, #9
 801b07e:	bf8a      	itet	hi
 801b080:	3b09      	subhi	r3, #9
 801b082:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801b084:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801b086:	f7ff ffa1 	bl	801afcc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b08a:	8b23      	ldrh	r3, [r4, #24]
 801b08c:	2b01      	cmp	r3, #1
 801b08e:	bf9c      	itt	ls
 801b090:	3301      	addls	r3, #1
 801b092:	8323      	strhls	r3, [r4, #24]
 801b094:	8ae3      	ldrh	r3, [r4, #22]
 801b096:	b90b      	cbnz	r3, 801b09c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801b098:	2302      	movs	r3, #2
 801b09a:	82e3      	strh	r3, [r4, #22]
 801b09c:	8ae3      	ldrh	r3, [r4, #22]
 801b09e:	4628      	mov	r0, r5
 801b0a0:	3b01      	subs	r3, #1
 801b0a2:	b29b      	uxth	r3, r3
 801b0a4:	82e3      	strh	r3, [r4, #22]
 801b0a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b0aa:	8265      	strh	r5, [r4, #18]
 801b0ac:	bd38      	pop	{r3, r4, r5, pc}
 801b0ae:	bf00      	nop
 801b0b0:	0802a5e0 	.word	0x0802a5e0
 801b0b4:	0802a8fd 	.word	0x0802a8fd
 801b0b8:	0802a5e9 	.word	0x0802a5e9

0801b0bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b0bc:	428a      	cmp	r2, r1
 801b0be:	b538      	push	{r3, r4, r5, lr}
 801b0c0:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801b0c2:	d90c      	bls.n	801b0de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801b0c4:	b92c      	cbnz	r4, 801b0d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801b0c6:	4b1c      	ldr	r3, [pc, #112]	; (801b138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801b0c8:	21e1      	movs	r1, #225	; 0xe1
 801b0ca:	4a1c      	ldr	r2, [pc, #112]	; (801b13c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801b0cc:	481c      	ldr	r0, [pc, #112]	; (801b140 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801b0ce:	f00a fba5 	bl	802581c <__assert_func>
 801b0d2:	3c01      	subs	r4, #1
 801b0d4:	4b1b      	ldr	r3, [pc, #108]	; (801b144 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801b0d6:	4a1c      	ldr	r2, [pc, #112]	; (801b148 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801b0d8:	21c5      	movs	r1, #197	; 0xc5
 801b0da:	8604      	strh	r4, [r0, #48]	; 0x30
 801b0dc:	e7f6      	b.n	801b0cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b0de:	428c      	cmp	r4, r1
 801b0e0:	d203      	bcs.n	801b0ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801b0e2:	4b1a      	ldr	r3, [pc, #104]	; (801b14c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801b0e4:	21cb      	movs	r1, #203	; 0xcb
 801b0e6:	4a1a      	ldr	r2, [pc, #104]	; (801b150 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801b0e8:	e7f0      	b.n	801b0cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b0ea:	1a64      	subs	r4, r4, r1
 801b0ec:	250a      	movs	r5, #10
 801b0ee:	8604      	strh	r4, [r0, #48]	; 0x30
 801b0f0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801b0f2:	4421      	add	r1, r4
 801b0f4:	b289      	uxth	r1, r1
 801b0f6:	2909      	cmp	r1, #9
 801b0f8:	bf88      	it	hi
 801b0fa:	390a      	subhi	r1, #10
 801b0fc:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b0fe:	b1ba      	cbz	r2, 801b130 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801b100:	3a01      	subs	r2, #1
 801b102:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801b104:	b292      	uxth	r2, r2
 801b106:	2909      	cmp	r1, #9
 801b108:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b10c:	d903      	bls.n	801b116 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801b10e:	4b11      	ldr	r3, [pc, #68]	; (801b154 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801b110:	21e6      	movs	r1, #230	; 0xe6
 801b112:	4a11      	ldr	r2, [pc, #68]	; (801b158 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801b114:	e7da      	b.n	801b0cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801b116:	3101      	adds	r1, #1
 801b118:	8601      	strh	r1, [r0, #48]	; 0x30
 801b11a:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b11c:	b901      	cbnz	r1, 801b120 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801b11e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b120:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801b122:	3901      	subs	r1, #1
 801b124:	b289      	uxth	r1, r1
 801b126:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b128:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b12c:	834c      	strh	r4, [r1, #26]
 801b12e:	e7e6      	b.n	801b0fe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801b130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b134:	f7ff bf4a 	b.w	801afcc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b138:	0802a5e0 	.word	0x0802a5e0
 801b13c:	0802a6d6 	.word	0x0802a6d6
 801b140:	0802a5e9 	.word	0x0802a5e9
 801b144:	0802a621 	.word	0x0802a621
 801b148:	0802a780 	.word	0x0802a780
 801b14c:	0802a62f 	.word	0x0802a62f
 801b150:	0802aa57 	.word	0x0802aa57
 801b154:	0802a63b 	.word	0x0802a63b
 801b158:	0802a64e 	.word	0x0802a64e

0801b15c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b15c:	3a01      	subs	r2, #1
 801b15e:	b570      	push	{r4, r5, r6, lr}
 801b160:	b292      	uxth	r2, r2
 801b162:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b166:	42b2      	cmp	r2, r6
 801b168:	d019      	beq.n	801b19e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801b16a:	8b04      	ldrh	r4, [r0, #24]
 801b16c:	f831 5b02 	ldrh.w	r5, [r1], #2
 801b170:	4294      	cmp	r4, r2
 801b172:	d805      	bhi.n	801b180 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801b174:	4b19      	ldr	r3, [pc, #100]	; (801b1dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b176:	4a1a      	ldr	r2, [pc, #104]	; (801b1e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801b178:	21c5      	movs	r1, #197	; 0xc5
 801b17a:	481a      	ldr	r0, [pc, #104]	; (801b1e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801b17c:	f00a fb4e 	bl	802581c <__assert_func>
 801b180:	8ac4      	ldrh	r4, [r0, #22]
 801b182:	4414      	add	r4, r2
 801b184:	3a01      	subs	r2, #1
 801b186:	b2a4      	uxth	r4, r4
 801b188:	b292      	uxth	r2, r2
 801b18a:	2c01      	cmp	r4, #1
 801b18c:	bf88      	it	hi
 801b18e:	3c02      	subhi	r4, #2
 801b190:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b194:	8a64      	ldrh	r4, [r4, #18]
 801b196:	42ac      	cmp	r4, r5
 801b198:	d0e5      	beq.n	801b166 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801b19a:	2000      	movs	r0, #0
 801b19c:	bd70      	pop	{r4, r5, r6, pc}
 801b19e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b1a2:	2400      	movs	r4, #0
 801b1a4:	4413      	add	r3, r2
 801b1a6:	b2a2      	uxth	r2, r4
 801b1a8:	429a      	cmp	r2, r3
 801b1aa:	da14      	bge.n	801b1d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801b1ac:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801b1ae:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b1b2:	4296      	cmp	r6, r2
 801b1b4:	d802      	bhi.n	801b1bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801b1b6:	4b09      	ldr	r3, [pc, #36]	; (801b1dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801b1b8:	4a0b      	ldr	r2, [pc, #44]	; (801b1e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801b1ba:	e7dd      	b.n	801b178 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801b1bc:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801b1be:	3401      	adds	r4, #1
 801b1c0:	4432      	add	r2, r6
 801b1c2:	b292      	uxth	r2, r2
 801b1c4:	2a09      	cmp	r2, #9
 801b1c6:	bf88      	it	hi
 801b1c8:	3a0a      	subhi	r2, #10
 801b1ca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b1ce:	8b52      	ldrh	r2, [r2, #26]
 801b1d0:	42aa      	cmp	r2, r5
 801b1d2:	d0e8      	beq.n	801b1a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801b1d4:	e7e1      	b.n	801b19a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801b1d6:	2001      	movs	r0, #1
 801b1d8:	e7e0      	b.n	801b19c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801b1da:	bf00      	nop
 801b1dc:	0802a621 	.word	0x0802a621
 801b1e0:	0802aadb 	.word	0x0802aadb
 801b1e4:	0802a5e9 	.word	0x0802a5e9
 801b1e8:	0802a780 	.word	0x0802a780

0801b1ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f0:	4605      	mov	r5, r0
 801b1f2:	4616      	mov	r6, r2
 801b1f4:	1c8c      	adds	r4, r1, #2
 801b1f6:	8809      	ldrh	r1, [r1, #0]
 801b1f8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b1fc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b200:	42b3      	cmp	r3, r6
 801b202:	d124      	bne.n	801b24e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b204:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b208:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b20c:	f001 070f 	and.w	r7, r1, #15
 801b210:	4652      	mov	r2, sl
 801b212:	f8cd 8000 	str.w	r8, [sp]
 801b216:	464b      	mov	r3, r9
 801b218:	4621      	mov	r1, r4
 801b21a:	4628      	mov	r0, r5
 801b21c:	f7ff ff9e 	bl	801b15c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b220:	4683      	mov	fp, r0
 801b222:	b168      	cbz	r0, 801b240 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b224:	eb0a 0109 	add.w	r1, sl, r9
 801b228:	463a      	mov	r2, r7
 801b22a:	4628      	mov	r0, r5
 801b22c:	4441      	add	r1, r8
 801b22e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b232:	4649      	mov	r1, r9
 801b234:	f7ff ff42 	bl	801b0bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b238:	4658      	mov	r0, fp
 801b23a:	b003      	add	sp, #12
 801b23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b240:	eb07 010a 	add.w	r1, r7, sl
 801b244:	4449      	add	r1, r9
 801b246:	4441      	add	r1, r8
 801b248:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b24c:	e7d2      	b.n	801b1f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b24e:	f04f 0b00 	mov.w	fp, #0
 801b252:	e7f1      	b.n	801b238 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b254 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b254:	b570      	push	{r4, r5, r6, lr}
 801b256:	8810      	ldrh	r0, [r2, #0]
 801b258:	4298      	cmp	r0, r3
 801b25a:	d817      	bhi.n	801b28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b25c:	1e48      	subs	r0, r1, #1
 801b25e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b262:	4298      	cmp	r0, r3
 801b264:	d312      	bcc.n	801b28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b266:	2400      	movs	r4, #0
 801b268:	428c      	cmp	r4, r1
 801b26a:	d20f      	bcs.n	801b28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b26c:	1860      	adds	r0, r4, r1
 801b26e:	1040      	asrs	r0, r0, #1
 801b270:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b274:	0085      	lsls	r5, r0, #2
 801b276:	42b3      	cmp	r3, r6
 801b278:	d902      	bls.n	801b280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b27a:	3001      	adds	r0, #1
 801b27c:	b284      	uxth	r4, r0
 801b27e:	e7f3      	b.n	801b268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b280:	d201      	bcs.n	801b286 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b282:	b281      	uxth	r1, r0
 801b284:	e7f0      	b.n	801b268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b286:	442a      	add	r2, r5
 801b288:	8850      	ldrh	r0, [r2, #2]
 801b28a:	bd70      	pop	{r4, r5, r6, pc}
 801b28c:	2000      	movs	r0, #0
 801b28e:	e7fc      	b.n	801b28a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b290 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b294:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b296:	4604      	mov	r4, r0
 801b298:	260b      	movs	r6, #11
 801b29a:	886f      	ldrh	r7, [r5, #2]
 801b29c:	087f      	lsrs	r7, r7, #1
 801b29e:	3e01      	subs	r6, #1
 801b2a0:	d01b      	beq.n	801b2da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b2a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b2a4:	b92b      	cbnz	r3, 801b2b2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b2a6:	4b0e      	ldr	r3, [pc, #56]	; (801b2e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b2a8:	21c0      	movs	r1, #192	; 0xc0
 801b2aa:	4a0e      	ldr	r2, [pc, #56]	; (801b2e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b2ac:	480e      	ldr	r0, [pc, #56]	; (801b2e8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b2ae:	f00a fab5 	bl	802581c <__assert_func>
 801b2b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b2b4:	462a      	mov	r2, r5
 801b2b6:	4639      	mov	r1, r7
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b2be:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b2c2:	4643      	mov	r3, r8
 801b2c4:	f7ff ffc6 	bl	801b254 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b2c8:	b138      	cbz	r0, 801b2da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b2ca:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b2ce:	4642      	mov	r2, r8
 801b2d0:	4620      	mov	r0, r4
 801b2d2:	f7ff ff8b 	bl	801b1ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b2d6:	2800      	cmp	r0, #0
 801b2d8:	d1e1      	bne.n	801b29e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2de:	bf00      	nop
 801b2e0:	0802a5e0 	.word	0x0802a5e0
 801b2e4:	0802a852 	.word	0x0802a852
 801b2e8:	0802a5e9 	.word	0x0802a5e9

0801b2ec <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b2ec:	4602      	mov	r2, r0
 801b2ee:	b148      	cbz	r0, 801b304 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	b298      	uxth	r0, r3
 801b2f4:	3301      	adds	r3, #1
 801b2f6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b2fa:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b2fe:	2900      	cmp	r1, #0
 801b300:	d1f7      	bne.n	801b2f2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b302:	4770      	bx	lr
 801b304:	4770      	bx	lr

0801b306 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b306:	b530      	push	{r4, r5, lr}
 801b308:	4604      	mov	r4, r0
 801b30a:	b159      	cbz	r1, 801b324 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b30c:	b148      	cbz	r0, 801b322 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b30e:	2300      	movs	r3, #0
 801b310:	b298      	uxth	r0, r3
 801b312:	4282      	cmp	r2, r0
 801b314:	d905      	bls.n	801b322 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b316:	5ccd      	ldrb	r5, [r1, r3]
 801b318:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b31c:	3301      	adds	r3, #1
 801b31e:	2d00      	cmp	r5, #0
 801b320:	d1f6      	bne.n	801b310 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b322:	bd30      	pop	{r4, r5, pc}
 801b324:	4608      	mov	r0, r1
 801b326:	e7fc      	b.n	801b322 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b328 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b32a:	468c      	mov	ip, r1
 801b32c:	b08b      	sub	sp, #44	; 0x2c
 801b32e:	2100      	movs	r1, #0
 801b330:	ae01      	add	r6, sp, #4
 801b332:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b336:	211f      	movs	r1, #31
 801b338:	fbb0 f7f3 	udiv	r7, r0, r3
 801b33c:	fb03 0517 	mls	r5, r3, r7, r0
 801b340:	4638      	mov	r0, r7
 801b342:	b2ec      	uxtb	r4, r5
 801b344:	2d09      	cmp	r5, #9
 801b346:	bfd4      	ite	le
 801b348:	3430      	addle	r4, #48	; 0x30
 801b34a:	3457      	addgt	r4, #87	; 0x57
 801b34c:	b2e4      	uxtb	r4, r4
 801b34e:	558c      	strb	r4, [r1, r6]
 801b350:	1e4c      	subs	r4, r1, #1
 801b352:	b92f      	cbnz	r7, 801b360 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b354:	4431      	add	r1, r6
 801b356:	4660      	mov	r0, ip
 801b358:	f7ff ffd5 	bl	801b306 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b35c:	b00b      	add	sp, #44	; 0x2c
 801b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b360:	4621      	mov	r1, r4
 801b362:	e7e9      	b.n	801b338 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b364 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b364:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b366:	4607      	mov	r7, r0
 801b368:	b08b      	sub	sp, #44	; 0x2c
 801b36a:	4608      	mov	r0, r1
 801b36c:	b341      	cbz	r1, 801b3c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b36e:	1e99      	subs	r1, r3, #2
 801b370:	290e      	cmp	r1, #14
 801b372:	d825      	bhi.n	801b3c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b374:	2100      	movs	r1, #0
 801b376:	463c      	mov	r4, r7
 801b378:	261f      	movs	r6, #31
 801b37a:	f10d 0c04 	add.w	ip, sp, #4
 801b37e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b382:	1e71      	subs	r1, r6, #1
 801b384:	fb94 fef3 	sdiv	lr, r4, r3
 801b388:	fb03 441e 	mls	r4, r3, lr, r4
 801b38c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b390:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b394:	b2ec      	uxtb	r4, r5
 801b396:	2d09      	cmp	r5, #9
 801b398:	bfd4      	ite	le
 801b39a:	3430      	addle	r4, #48	; 0x30
 801b39c:	3457      	addgt	r4, #87	; 0x57
 801b39e:	b2e4      	uxtb	r4, r4
 801b3a0:	f80c 4006 	strb.w	r4, [ip, r6]
 801b3a4:	4674      	mov	r4, lr
 801b3a6:	b96c      	cbnz	r4, 801b3c4 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b3a8:	2f00      	cmp	r7, #0
 801b3aa:	da05      	bge.n	801b3b8 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b3ac:	ab0a      	add	r3, sp, #40	; 0x28
 801b3ae:	4419      	add	r1, r3
 801b3b0:	232d      	movs	r3, #45	; 0x2d
 801b3b2:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b3b6:	1eb1      	subs	r1, r6, #2
 801b3b8:	3101      	adds	r1, #1
 801b3ba:	4461      	add	r1, ip
 801b3bc:	f7ff ffa3 	bl	801b306 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b3c0:	b00b      	add	sp, #44	; 0x2c
 801b3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3c4:	460e      	mov	r6, r1
 801b3c6:	e7dc      	b.n	801b382 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b3c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3cc:	b085      	sub	sp, #20
 801b3ce:	4691      	mov	r9, r2
 801b3d0:	6802      	ldr	r2, [r0, #0]
 801b3d2:	4688      	mov	r8, r1
 801b3d4:	461c      	mov	r4, r3
 801b3d6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b3da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b3de:	4683      	mov	fp, r0
 801b3e0:	4610      	mov	r0, r2
 801b3e2:	9103      	str	r1, [sp, #12]
 801b3e4:	9302      	str	r3, [sp, #8]
 801b3e6:	9201      	str	r2, [sp, #4]
 801b3e8:	f7ff ff80 	bl	801b2ec <_ZN8touchgfx7Unicode6strlenEPKt>
 801b3ec:	f1b8 0f00 	cmp.w	r8, #0
 801b3f0:	bf0c      	ite	eq
 801b3f2:	4684      	moveq	ip, r0
 801b3f4:	f100 0c01 	addne.w	ip, r0, #1
 801b3f8:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b3fc:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b400:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b402:	fa1f fc8c 	uxth.w	ip, ip
 801b406:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b408:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b40c:	9903      	ldr	r1, [sp, #12]
 801b40e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b412:	d041      	beq.n	801b498 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b414:	d834      	bhi.n	801b480 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b416:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b41a:	d059      	beq.n	801b4d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b41c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b420:	d03a      	beq.n	801b498 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b422:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b426:	d034      	beq.n	801b492 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b428:	2400      	movs	r4, #0
 801b42a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b42e:	3a01      	subs	r2, #1
 801b430:	b169      	cbz	r1, 801b44e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b432:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b434:	458c      	cmp	ip, r1
 801b436:	da09      	bge.n	801b44c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b438:	eba1 010c 	sub.w	r1, r1, ip
 801b43c:	b289      	uxth	r1, r1
 801b43e:	b933      	cbnz	r3, 801b44e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b440:	2e00      	cmp	r6, #0
 801b442:	d051      	beq.n	801b4e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b444:	2800      	cmp	r0, #0
 801b446:	d04f      	beq.n	801b4e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b448:	440c      	add	r4, r1
 801b44a:	b2a4      	uxth	r4, r4
 801b44c:	2100      	movs	r1, #0
 801b44e:	682b      	ldr	r3, [r5, #0]
 801b450:	4293      	cmp	r3, r2
 801b452:	da07      	bge.n	801b464 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b454:	f1b8 0f00 	cmp.w	r8, #0
 801b458:	d004      	beq.n	801b464 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b45a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b45e:	682b      	ldr	r3, [r5, #0]
 801b460:	3301      	adds	r3, #1
 801b462:	602b      	str	r3, [r5, #0]
 801b464:	2730      	movs	r7, #48	; 0x30
 801b466:	2c00      	cmp	r4, #0
 801b468:	d04e      	beq.n	801b508 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b46a:	682e      	ldr	r6, [r5, #0]
 801b46c:	3c01      	subs	r4, #1
 801b46e:	42b2      	cmp	r2, r6
 801b470:	b2a4      	uxth	r4, r4
 801b472:	dd49      	ble.n	801b508 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b474:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b478:	682b      	ldr	r3, [r5, #0]
 801b47a:	3301      	adds	r3, #1
 801b47c:	602b      	str	r3, [r5, #0]
 801b47e:	e7f2      	b.n	801b466 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b480:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b484:	d01d      	beq.n	801b4c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b486:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b48a:	d002      	beq.n	801b492 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b48c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b490:	e7c9      	b.n	801b426 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b492:	4684      	mov	ip, r0
 801b494:	f04f 0800 	mov.w	r8, #0
 801b498:	2c00      	cmp	r4, #0
 801b49a:	d0c6      	beq.n	801b42a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b49c:	b947      	cbnz	r7, 801b4b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b49e:	2801      	cmp	r0, #1
 801b4a0:	d106      	bne.n	801b4b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b4a2:	8814      	ldrh	r4, [r2, #0]
 801b4a4:	2c30      	cmp	r4, #48	; 0x30
 801b4a6:	bf02      	ittt	eq
 801b4a8:	3202      	addeq	r2, #2
 801b4aa:	4638      	moveq	r0, r7
 801b4ac:	f8cb 2000 	streq.w	r2, [fp]
 801b4b0:	45bc      	cmp	ip, r7
 801b4b2:	da14      	bge.n	801b4de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b4b4:	b2bf      	uxth	r7, r7
 801b4b6:	eba7 040c 	sub.w	r4, r7, ip
 801b4ba:	46bc      	mov	ip, r7
 801b4bc:	b2a4      	uxth	r4, r4
 801b4be:	2600      	movs	r6, #0
 801b4c0:	e7b3      	b.n	801b42a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b4c2:	4684      	mov	ip, r0
 801b4c4:	b16c      	cbz	r4, 801b4e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b4c6:	42b8      	cmp	r0, r7
 801b4c8:	dd00      	ble.n	801b4cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b4ca:	b2b8      	uxth	r0, r7
 801b4cc:	2400      	movs	r4, #0
 801b4ce:	e003      	b.n	801b4d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b4d0:	f04f 0c01 	mov.w	ip, #1
 801b4d4:	2400      	movs	r4, #0
 801b4d6:	4660      	mov	r0, ip
 801b4d8:	4626      	mov	r6, r4
 801b4da:	46a0      	mov	r8, r4
 801b4dc:	e7a5      	b.n	801b42a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b4de:	2400      	movs	r4, #0
 801b4e0:	e7ed      	b.n	801b4be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b4e2:	4626      	mov	r6, r4
 801b4e4:	46a0      	mov	r8, r4
 801b4e6:	e7a0      	b.n	801b42a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b4e8:	2900      	cmp	r1, #0
 801b4ea:	d0b0      	beq.n	801b44e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b4ec:	2720      	movs	r7, #32
 801b4ee:	682e      	ldr	r6, [r5, #0]
 801b4f0:	2900      	cmp	r1, #0
 801b4f2:	d0ac      	beq.n	801b44e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b4f4:	3901      	subs	r1, #1
 801b4f6:	4296      	cmp	r6, r2
 801b4f8:	b289      	uxth	r1, r1
 801b4fa:	daa7      	bge.n	801b44c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b4fc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b500:	682b      	ldr	r3, [r5, #0]
 801b502:	3301      	adds	r3, #1
 801b504:	602b      	str	r3, [r5, #0]
 801b506:	e7f2      	b.n	801b4ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b508:	b188      	cbz	r0, 801b52e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b50a:	682b      	ldr	r3, [r5, #0]
 801b50c:	3801      	subs	r0, #1
 801b50e:	429a      	cmp	r2, r3
 801b510:	b280      	uxth	r0, r0
 801b512:	dd0c      	ble.n	801b52e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b514:	f8db 3000 	ldr.w	r3, [fp]
 801b518:	1c9c      	adds	r4, r3, #2
 801b51a:	f8cb 4000 	str.w	r4, [fp]
 801b51e:	881c      	ldrh	r4, [r3, #0]
 801b520:	682b      	ldr	r3, [r5, #0]
 801b522:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b526:	682b      	ldr	r3, [r5, #0]
 801b528:	3301      	adds	r3, #1
 801b52a:	602b      	str	r3, [r5, #0]
 801b52c:	e7ec      	b.n	801b508 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b52e:	2620      	movs	r6, #32
 801b530:	b151      	cbz	r1, 801b548 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b532:	6828      	ldr	r0, [r5, #0]
 801b534:	3901      	subs	r1, #1
 801b536:	4282      	cmp	r2, r0
 801b538:	b289      	uxth	r1, r1
 801b53a:	dd05      	ble.n	801b548 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b53c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b540:	682b      	ldr	r3, [r5, #0]
 801b542:	3301      	adds	r3, #1
 801b544:	602b      	str	r3, [r5, #0]
 801b546:	e7f3      	b.n	801b530 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b548:	b005      	add	sp, #20
 801b54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b54e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b54e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b552:	2400      	movs	r4, #0
 801b554:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b558:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b55c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b560:	8014      	strh	r4, [r2, #0]
 801b562:	701c      	strb	r4, [r3, #0]
 801b564:	f888 4000 	strb.w	r4, [r8]
 801b568:	f88c 4000 	strb.w	r4, [ip]
 801b56c:	f88e 4000 	strb.w	r4, [lr]
 801b570:	703c      	strb	r4, [r7, #0]
 801b572:	6804      	ldr	r4, [r0, #0]
 801b574:	b1a4      	cbz	r4, 801b5a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b576:	8824      	ldrh	r4, [r4, #0]
 801b578:	f04f 0901 	mov.w	r9, #1
 801b57c:	b314      	cbz	r4, 801b5c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b57e:	2c2b      	cmp	r4, #43	; 0x2b
 801b580:	d001      	beq.n	801b586 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b582:	2c20      	cmp	r4, #32
 801b584:	d110      	bne.n	801b5a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b586:	8014      	strh	r4, [r2, #0]
 801b588:	6804      	ldr	r4, [r0, #0]
 801b58a:	b10c      	cbz	r4, 801b590 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b58c:	3402      	adds	r4, #2
 801b58e:	6004      	str	r4, [r0, #0]
 801b590:	680c      	ldr	r4, [r1, #0]
 801b592:	b10c      	cbz	r4, 801b598 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b594:	3401      	adds	r4, #1
 801b596:	600c      	str	r4, [r1, #0]
 801b598:	6804      	ldr	r4, [r0, #0]
 801b59a:	b17c      	cbz	r4, 801b5bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b59c:	8824      	ldrh	r4, [r4, #0]
 801b59e:	e7ed      	b.n	801b57c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b5a0:	680c      	ldr	r4, [r1, #0]
 801b5a2:	b17c      	cbz	r4, 801b5c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b5a4:	7824      	ldrb	r4, [r4, #0]
 801b5a6:	e7e7      	b.n	801b578 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b5a8:	2c2d      	cmp	r4, #45	; 0x2d
 801b5aa:	d102      	bne.n	801b5b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b5ac:	f883 9000 	strb.w	r9, [r3]
 801b5b0:	e7ea      	b.n	801b588 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b5b2:	2c23      	cmp	r4, #35	; 0x23
 801b5b4:	d107      	bne.n	801b5c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b5b6:	f888 9000 	strb.w	r9, [r8]
 801b5ba:	e7e5      	b.n	801b588 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b5bc:	680c      	ldr	r4, [r1, #0]
 801b5be:	b10c      	cbz	r4, 801b5c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b5c0:	7824      	ldrb	r4, [r4, #0]
 801b5c2:	e7db      	b.n	801b57c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b5c4:	2400      	movs	r4, #0
 801b5c6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b5ca:	2b09      	cmp	r3, #9
 801b5cc:	d901      	bls.n	801b5d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b5ce:	2c2a      	cmp	r4, #42	; 0x2a
 801b5d0:	d122      	bne.n	801b618 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b5d2:	2301      	movs	r3, #1
 801b5d4:	2c30      	cmp	r4, #48	; 0x30
 801b5d6:	f88e 3000 	strb.w	r3, [lr]
 801b5da:	d10d      	bne.n	801b5f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b5dc:	f88c 3000 	strb.w	r3, [ip]
 801b5e0:	6803      	ldr	r3, [r0, #0]
 801b5e2:	b10b      	cbz	r3, 801b5e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b5e4:	3302      	adds	r3, #2
 801b5e6:	6003      	str	r3, [r0, #0]
 801b5e8:	680b      	ldr	r3, [r1, #0]
 801b5ea:	b10b      	cbz	r3, 801b5f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	600b      	str	r3, [r1, #0]
 801b5f0:	6803      	ldr	r3, [r0, #0]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d02f      	beq.n	801b656 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b5f6:	881c      	ldrh	r4, [r3, #0]
 801b5f8:	2c2a      	cmp	r4, #42	; 0x2a
 801b5fa:	d135      	bne.n	801b668 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b5fc:	f04f 33ff 	mov.w	r3, #4294967295
 801b600:	6033      	str	r3, [r6, #0]
 801b602:	6803      	ldr	r3, [r0, #0]
 801b604:	b10b      	cbz	r3, 801b60a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b606:	3302      	adds	r3, #2
 801b608:	6003      	str	r3, [r0, #0]
 801b60a:	680b      	ldr	r3, [r1, #0]
 801b60c:	b10b      	cbz	r3, 801b612 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b60e:	3301      	adds	r3, #1
 801b610:	600b      	str	r3, [r1, #0]
 801b612:	6803      	ldr	r3, [r0, #0]
 801b614:	b31b      	cbz	r3, 801b65e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b616:	881c      	ldrh	r4, [r3, #0]
 801b618:	2c2e      	cmp	r4, #46	; 0x2e
 801b61a:	d11a      	bne.n	801b652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b61c:	2301      	movs	r3, #1
 801b61e:	703b      	strb	r3, [r7, #0]
 801b620:	6803      	ldr	r3, [r0, #0]
 801b622:	b10b      	cbz	r3, 801b628 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b624:	3302      	adds	r3, #2
 801b626:	6003      	str	r3, [r0, #0]
 801b628:	680b      	ldr	r3, [r1, #0]
 801b62a:	b10b      	cbz	r3, 801b630 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b62c:	3301      	adds	r3, #1
 801b62e:	600b      	str	r3, [r1, #0]
 801b630:	6803      	ldr	r3, [r0, #0]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d036      	beq.n	801b6a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b636:	881b      	ldrh	r3, [r3, #0]
 801b638:	2b2a      	cmp	r3, #42	; 0x2a
 801b63a:	d137      	bne.n	801b6ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b63c:	f04f 33ff 	mov.w	r3, #4294967295
 801b640:	602b      	str	r3, [r5, #0]
 801b642:	6803      	ldr	r3, [r0, #0]
 801b644:	b10b      	cbz	r3, 801b64a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b646:	3302      	adds	r3, #2
 801b648:	6003      	str	r3, [r0, #0]
 801b64a:	680b      	ldr	r3, [r1, #0]
 801b64c:	b10b      	cbz	r3, 801b652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b64e:	3301      	adds	r3, #1
 801b650:	600b      	str	r3, [r1, #0]
 801b652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b656:	680c      	ldr	r4, [r1, #0]
 801b658:	b134      	cbz	r4, 801b668 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b65a:	7824      	ldrb	r4, [r4, #0]
 801b65c:	e7cc      	b.n	801b5f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b65e:	680b      	ldr	r3, [r1, #0]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d0f6      	beq.n	801b652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b664:	781c      	ldrb	r4, [r3, #0]
 801b666:	e7d7      	b.n	801b618 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b668:	2300      	movs	r3, #0
 801b66a:	220a      	movs	r2, #10
 801b66c:	6033      	str	r3, [r6, #0]
 801b66e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b672:	fa1f f38c 	uxth.w	r3, ip
 801b676:	2b09      	cmp	r3, #9
 801b678:	d8ce      	bhi.n	801b618 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b67a:	6833      	ldr	r3, [r6, #0]
 801b67c:	fb02 c303 	mla	r3, r2, r3, ip
 801b680:	6033      	str	r3, [r6, #0]
 801b682:	6803      	ldr	r3, [r0, #0]
 801b684:	b10b      	cbz	r3, 801b68a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b686:	3302      	adds	r3, #2
 801b688:	6003      	str	r3, [r0, #0]
 801b68a:	680b      	ldr	r3, [r1, #0]
 801b68c:	b10b      	cbz	r3, 801b692 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b68e:	3301      	adds	r3, #1
 801b690:	600b      	str	r3, [r1, #0]
 801b692:	6803      	ldr	r3, [r0, #0]
 801b694:	b10b      	cbz	r3, 801b69a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b696:	881c      	ldrh	r4, [r3, #0]
 801b698:	e7e9      	b.n	801b66e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b69a:	680c      	ldr	r4, [r1, #0]
 801b69c:	2c00      	cmp	r4, #0
 801b69e:	d0e6      	beq.n	801b66e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b6a0:	7824      	ldrb	r4, [r4, #0]
 801b6a2:	e7e4      	b.n	801b66e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b6a4:	680b      	ldr	r3, [r1, #0]
 801b6a6:	b10b      	cbz	r3, 801b6ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b6a8:	781b      	ldrb	r3, [r3, #0]
 801b6aa:	e7c5      	b.n	801b638 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b6ac:	2200      	movs	r2, #0
 801b6ae:	240a      	movs	r4, #10
 801b6b0:	602a      	str	r2, [r5, #0]
 801b6b2:	3b30      	subs	r3, #48	; 0x30
 801b6b4:	682a      	ldr	r2, [r5, #0]
 801b6b6:	b29e      	uxth	r6, r3
 801b6b8:	2e09      	cmp	r6, #9
 801b6ba:	d813      	bhi.n	801b6e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b6bc:	fb04 3302 	mla	r3, r4, r2, r3
 801b6c0:	602b      	str	r3, [r5, #0]
 801b6c2:	6803      	ldr	r3, [r0, #0]
 801b6c4:	b10b      	cbz	r3, 801b6ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b6c6:	3302      	adds	r3, #2
 801b6c8:	6003      	str	r3, [r0, #0]
 801b6ca:	680b      	ldr	r3, [r1, #0]
 801b6cc:	b10b      	cbz	r3, 801b6d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b6ce:	3301      	adds	r3, #1
 801b6d0:	600b      	str	r3, [r1, #0]
 801b6d2:	6803      	ldr	r3, [r0, #0]
 801b6d4:	b10b      	cbz	r3, 801b6da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b6d6:	881b      	ldrh	r3, [r3, #0]
 801b6d8:	e7eb      	b.n	801b6b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b6da:	680b      	ldr	r3, [r1, #0]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d0e8      	beq.n	801b6b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b6e0:	781b      	ldrb	r3, [r3, #0]
 801b6e2:	e7e6      	b.n	801b6b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b6e4:	2a06      	cmp	r2, #6
 801b6e6:	bfa8      	it	ge
 801b6e8:	2206      	movge	r2, #6
 801b6ea:	602a      	str	r2, [r5, #0]
 801b6ec:	e7b1      	b.n	801b652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b6ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b6ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f2:	b0a3      	sub	sp, #140	; 0x8c
 801b6f4:	2600      	movs	r6, #0
 801b6f6:	4607      	mov	r7, r0
 801b6f8:	4688      	mov	r8, r1
 801b6fa:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801b6fe:	4631      	mov	r1, r6
 801b700:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b702:	4648      	mov	r0, r9
 801b704:	960d      	str	r6, [sp, #52]	; 0x34
 801b706:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b70a:	2242      	movs	r2, #66	; 0x42
 801b70c:	f7fe fc6e 	bl	8019fec <_ZN8touchgfx6memsetEPvhm>
 801b710:	b15f      	cbz	r7, 801b72a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b712:	f108 3aff 	add.w	sl, r8, #4294967295
 801b716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b71a:	b152      	cbz	r2, 801b732 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b71c:	8812      	ldrh	r2, [r2, #0]
 801b71e:	b10a      	cbz	r2, 801b724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b720:	459a      	cmp	sl, r3
 801b722:	dc2e      	bgt.n	801b782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b724:	2200      	movs	r2, #0
 801b726:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b72a:	4638      	mov	r0, r7
 801b72c:	b023      	add	sp, #140	; 0x8c
 801b72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b732:	9a08      	ldr	r2, [sp, #32]
 801b734:	2a00      	cmp	r2, #0
 801b736:	d0f5      	beq.n	801b724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b738:	7812      	ldrb	r2, [r2, #0]
 801b73a:	e7f0      	b.n	801b71e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b73c:	2d00      	cmp	r5, #0
 801b73e:	d0ea      	beq.n	801b716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b740:	782a      	ldrb	r2, [r5, #0]
 801b742:	b142      	cbz	r2, 801b756 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b744:	2a25      	cmp	r2, #37	; 0x25
 801b746:	d001      	beq.n	801b74c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b748:	459a      	cmp	sl, r3
 801b74a:	dc08      	bgt.n	801b75e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b74c:	f1bb 0f00 	cmp.w	fp, #0
 801b750:	d121      	bne.n	801b796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b752:	2d00      	cmp	r5, #0
 801b754:	d0df      	beq.n	801b716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b756:	782a      	ldrb	r2, [r5, #0]
 801b758:	f04f 0b00 	mov.w	fp, #0
 801b75c:	e01d      	b.n	801b79a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b75e:	f1bb 0f00 	cmp.w	fp, #0
 801b762:	d077      	beq.n	801b854 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b764:	f8bb 2000 	ldrh.w	r2, [fp]
 801b768:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b76c:	f1bb 0f00 	cmp.w	fp, #0
 801b770:	d002      	beq.n	801b778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b772:	f10b 0202 	add.w	r2, fp, #2
 801b776:	9209      	str	r2, [sp, #36]	; 0x24
 801b778:	b10d      	cbz	r5, 801b77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b77a:	3501      	adds	r5, #1
 801b77c:	9508      	str	r5, [sp, #32]
 801b77e:	3301      	adds	r3, #1
 801b780:	930d      	str	r3, [sp, #52]	; 0x34
 801b782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b784:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b788:	f1bb 0f00 	cmp.w	fp, #0
 801b78c:	d0d6      	beq.n	801b73c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b78e:	f8bb 2000 	ldrh.w	r2, [fp]
 801b792:	2a00      	cmp	r2, #0
 801b794:	d1d6      	bne.n	801b744 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b796:	f8bb 2000 	ldrh.w	r2, [fp]
 801b79a:	2a00      	cmp	r2, #0
 801b79c:	d0bb      	beq.n	801b716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b79e:	459a      	cmp	sl, r3
 801b7a0:	ddb9      	ble.n	801b716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b7a2:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801b7a6:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801b7aa:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801b7ae:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801b7b2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801b7b6:	960e      	str	r6, [sp, #56]	; 0x38
 801b7b8:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801b7bc:	960f      	str	r6, [sp, #60]	; 0x3c
 801b7be:	f1bb 0f00 	cmp.w	fp, #0
 801b7c2:	d002      	beq.n	801b7ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b7c4:	f10b 0302 	add.w	r3, fp, #2
 801b7c8:	9309      	str	r3, [sp, #36]	; 0x24
 801b7ca:	b10d      	cbz	r5, 801b7d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b7cc:	1c6b      	adds	r3, r5, #1
 801b7ce:	9308      	str	r3, [sp, #32]
 801b7d0:	ab0f      	add	r3, sp, #60	; 0x3c
 801b7d2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801b7d6:	a908      	add	r1, sp, #32
 801b7d8:	a809      	add	r0, sp, #36	; 0x24
 801b7da:	9305      	str	r3, [sp, #20]
 801b7dc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b7e0:	9304      	str	r3, [sp, #16]
 801b7e2:	ab0e      	add	r3, sp, #56	; 0x38
 801b7e4:	9303      	str	r3, [sp, #12]
 801b7e6:	ab0c      	add	r3, sp, #48	; 0x30
 801b7e8:	9302      	str	r3, [sp, #8]
 801b7ea:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b7ee:	9301      	str	r3, [sp, #4]
 801b7f0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b7f4:	9300      	str	r3, [sp, #0]
 801b7f6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b7fa:	f7ff fea8 	bl	801b54e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b7fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b800:	2b00      	cmp	r3, #0
 801b802:	bfbf      	itttt	lt
 801b804:	6823      	ldrlt	r3, [r4, #0]
 801b806:	3404      	addlt	r4, #4
 801b808:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b80c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b810:	2b00      	cmp	r3, #0
 801b812:	bfbe      	ittt	lt
 801b814:	6823      	ldrlt	r3, [r4, #0]
 801b816:	3404      	addlt	r4, #4
 801b818:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b81c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b820:	bfb8      	it	lt
 801b822:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b824:	b1d9      	cbz	r1, 801b85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801b826:	880b      	ldrh	r3, [r1, #0]
 801b828:	2b69      	cmp	r3, #105	; 0x69
 801b82a:	d01f      	beq.n	801b86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b82c:	d82f      	bhi.n	801b88e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b82e:	2b58      	cmp	r3, #88	; 0x58
 801b830:	d01c      	beq.n	801b86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b832:	d818      	bhi.n	801b866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b834:	2b25      	cmp	r3, #37	; 0x25
 801b836:	d034      	beq.n	801b8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b83a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b83e:	f1bb 0f00 	cmp.w	fp, #0
 801b842:	f000 80b7 	beq.w	801b9b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801b846:	f8bb 5000 	ldrh.w	r5, [fp]
 801b84a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b84e:	3301      	adds	r3, #1
 801b850:	930d      	str	r3, [sp, #52]	; 0x34
 801b852:	e029      	b.n	801b8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b854:	b10d      	cbz	r5, 801b85a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b856:	782a      	ldrb	r2, [r5, #0]
 801b858:	e786      	b.n	801b768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b85a:	462a      	mov	r2, r5
 801b85c:	e784      	b.n	801b768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b85e:	2a00      	cmp	r2, #0
 801b860:	d0ea      	beq.n	801b838 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b862:	7813      	ldrb	r3, [r2, #0]
 801b864:	e7e0      	b.n	801b828 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b866:	3b63      	subs	r3, #99	; 0x63
 801b868:	2b01      	cmp	r3, #1
 801b86a:	d8e5      	bhi.n	801b838 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b86c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801b870:	b329      	cbz	r1, 801b8be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b872:	880b      	ldrh	r3, [r1, #0]
 801b874:	2b69      	cmp	r3, #105	; 0x69
 801b876:	d063      	beq.n	801b940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b878:	d825      	bhi.n	801b8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b87a:	2b63      	cmp	r3, #99	; 0x63
 801b87c:	d038      	beq.n	801b8f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b87e:	2b64      	cmp	r3, #100	; 0x64
 801b880:	d05e      	beq.n	801b940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b882:	2b58      	cmp	r3, #88	; 0x58
 801b884:	d07a      	beq.n	801b97c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b886:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b88a:	4625      	mov	r5, r4
 801b88c:	e036      	b.n	801b8fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b88e:	2b73      	cmp	r3, #115	; 0x73
 801b890:	d0ec      	beq.n	801b86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b892:	d802      	bhi.n	801b89a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b894:	2b6f      	cmp	r3, #111	; 0x6f
 801b896:	d1cf      	bne.n	801b838 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b898:	e7e8      	b.n	801b86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b89a:	2b75      	cmp	r3, #117	; 0x75
 801b89c:	d0e6      	beq.n	801b86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b89e:	2b78      	cmp	r3, #120	; 0x78
 801b8a0:	e7f9      	b.n	801b896 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b8a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b8a4:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8aa:	b10b      	cbz	r3, 801b8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b8ac:	3302      	adds	r3, #2
 801b8ae:	9309      	str	r3, [sp, #36]	; 0x24
 801b8b0:	9b08      	ldr	r3, [sp, #32]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	f43f af2f 	beq.w	801b716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b8b8:	3301      	adds	r3, #1
 801b8ba:	9308      	str	r3, [sp, #32]
 801b8bc:	e72b      	b.n	801b716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b8be:	2a00      	cmp	r2, #0
 801b8c0:	d0e1      	beq.n	801b886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b8c2:	7813      	ldrb	r3, [r2, #0]
 801b8c4:	e7d6      	b.n	801b874 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b8c6:	2b73      	cmp	r3, #115	; 0x73
 801b8c8:	d036      	beq.n	801b938 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b8ca:	d807      	bhi.n	801b8dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b8cc:	2b6f      	cmp	r3, #111	; 0x6f
 801b8ce:	d1da      	bne.n	801b886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b8d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b8d2:	1d25      	adds	r5, r4, #4
 801b8d4:	2308      	movs	r3, #8
 801b8d6:	eba8 0202 	sub.w	r2, r8, r2
 801b8da:	e049      	b.n	801b970 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b8dc:	2b75      	cmp	r3, #117	; 0x75
 801b8de:	d042      	beq.n	801b966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b8e0:	2b78      	cmp	r3, #120	; 0x78
 801b8e2:	d1d0      	bne.n	801b886 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b8e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b8e6:	1d25      	adds	r5, r4, #4
 801b8e8:	2310      	movs	r3, #16
 801b8ea:	eba8 0202 	sub.w	r2, r8, r2
 801b8ee:	e03f      	b.n	801b970 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b8f0:	7823      	ldrb	r3, [r4, #0]
 801b8f2:	1d25      	adds	r5, r4, #4
 801b8f4:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801b8f8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8fe:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b902:	2b00      	cmp	r3, #0
 801b904:	d051      	beq.n	801b9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b906:	881a      	ldrh	r2, [r3, #0]
 801b908:	a80d      	add	r0, sp, #52	; 0x34
 801b90a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b90e:	462c      	mov	r4, r5
 801b910:	9005      	str	r0, [sp, #20]
 801b912:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801b916:	9004      	str	r0, [sp, #16]
 801b918:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b91a:	9003      	str	r0, [sp, #12]
 801b91c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801b920:	9002      	str	r0, [sp, #8]
 801b922:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b924:	9001      	str	r0, [sp, #4]
 801b926:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801b92a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b92e:	9000      	str	r0, [sp, #0]
 801b930:	a810      	add	r0, sp, #64	; 0x40
 801b932:	f7ff fd49 	bl	801b3c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b936:	e7b7      	b.n	801b8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b938:	1d25      	adds	r5, r4, #4
 801b93a:	6823      	ldr	r3, [r4, #0]
 801b93c:	9310      	str	r3, [sp, #64]	; 0x40
 801b93e:	e7dd      	b.n	801b8fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b942:	230a      	movs	r3, #10
 801b944:	4649      	mov	r1, r9
 801b946:	6820      	ldr	r0, [r4, #0]
 801b948:	eba8 0202 	sub.w	r2, r8, r2
 801b94c:	1d25      	adds	r5, r4, #4
 801b94e:	b292      	uxth	r2, r2
 801b950:	f7ff fd08 	bl	801b364 <_ZN8touchgfx7Unicode4itoaElPtti>
 801b954:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b958:	2b2d      	cmp	r3, #45	; 0x2d
 801b95a:	d1cf      	bne.n	801b8fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b95c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b960:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b962:	3302      	adds	r3, #2
 801b964:	e7ea      	b.n	801b93c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b968:	1d25      	adds	r5, r4, #4
 801b96a:	230a      	movs	r3, #10
 801b96c:	eba8 0202 	sub.w	r2, r8, r2
 801b970:	b292      	uxth	r2, r2
 801b972:	4649      	mov	r1, r9
 801b974:	6820      	ldr	r0, [r4, #0]
 801b976:	f7ff fcd7 	bl	801b328 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b97a:	e7bf      	b.n	801b8fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b97c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b97e:	2310      	movs	r3, #16
 801b980:	4649      	mov	r1, r9
 801b982:	6820      	ldr	r0, [r4, #0]
 801b984:	eba8 0202 	sub.w	r2, r8, r2
 801b988:	1d25      	adds	r5, r4, #4
 801b98a:	b292      	uxth	r2, r2
 801b98c:	f7ff fccc 	bl	801b328 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801b990:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b994:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d0af      	beq.n	801b8fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b99c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b9a0:	2919      	cmp	r1, #25
 801b9a2:	d8f7      	bhi.n	801b994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b9a4:	3b20      	subs	r3, #32
 801b9a6:	8013      	strh	r3, [r2, #0]
 801b9a8:	e7f4      	b.n	801b994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b9aa:	9a08      	ldr	r2, [sp, #32]
 801b9ac:	2a00      	cmp	r2, #0
 801b9ae:	d0ab      	beq.n	801b908 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b9b0:	7812      	ldrb	r2, [r2, #0]
 801b9b2:	e7a9      	b.n	801b908 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b9b4:	2d00      	cmp	r5, #0
 801b9b6:	f43f af48 	beq.w	801b84a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b9ba:	782d      	ldrb	r5, [r5, #0]
 801b9bc:	e745      	b.n	801b84a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b9be <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b9be:	b507      	push	{r0, r1, r2, lr}
 801b9c0:	9300      	str	r3, [sp, #0]
 801b9c2:	4613      	mov	r3, r2
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	f7ff fe92 	bl	801b6ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b9ca:	b003      	add	sp, #12
 801b9cc:	f85d fb04 	ldr.w	pc, [sp], #4

0801b9d0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b9d0:	b40c      	push	{r2, r3}
 801b9d2:	b507      	push	{r0, r1, r2, lr}
 801b9d4:	ab04      	add	r3, sp, #16
 801b9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9da:	9301      	str	r3, [sp, #4]
 801b9dc:	f7ff ffef 	bl	801b9be <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b9e0:	b003      	add	sp, #12
 801b9e2:	f85d eb04 	ldr.w	lr, [sp], #4
 801b9e6:	b002      	add	sp, #8
 801b9e8:	4770      	bx	lr
	...

0801b9ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b9ec:	4b01      	ldr	r3, [pc, #4]	; (801b9f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b9ee:	6018      	str	r0, [r3, #0]
 801b9f0:	4770      	bx	lr
 801b9f2:	bf00      	nop
 801b9f4:	2000b410 	.word	0x2000b410

0801b9f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b9f8:	4b07      	ldr	r3, [pc, #28]	; (801ba18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b9fa:	881a      	ldrh	r2, [r3, #0]
 801b9fc:	4282      	cmp	r2, r0
 801b9fe:	d809      	bhi.n	801ba14 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801ba00:	4b06      	ldr	r3, [pc, #24]	; (801ba1c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801ba02:	881b      	ldrh	r3, [r3, #0]
 801ba04:	4413      	add	r3, r2
 801ba06:	4298      	cmp	r0, r3
 801ba08:	da04      	bge.n	801ba14 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801ba0a:	4b05      	ldr	r3, [pc, #20]	; (801ba20 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801ba12:	4770      	bx	lr
 801ba14:	2000      	movs	r0, #0
 801ba16:	4770      	bx	lr
 801ba18:	2000b430 	.word	0x2000b430
 801ba1c:	2000b434 	.word	0x2000b434
 801ba20:	2000b414 	.word	0x2000b414

0801ba24 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba28:	4d28      	ldr	r5, [pc, #160]	; (801bacc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ba2a:	682b      	ldr	r3, [r5, #0]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d04a      	beq.n	801bac6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ba30:	4a27      	ldr	r2, [pc, #156]	; (801bad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ba32:	4e28      	ldr	r6, [pc, #160]	; (801bad4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ba34:	8810      	ldrh	r0, [r2, #0]
 801ba36:	f8b6 8000 	ldrh.w	r8, [r6]
 801ba3a:	4c27      	ldr	r4, [pc, #156]	; (801bad8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ba3c:	4440      	add	r0, r8
 801ba3e:	4f27      	ldr	r7, [pc, #156]	; (801badc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ba40:	1c41      	adds	r1, r0, #1
 801ba42:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801ba46:	f021 0101 	bic.w	r1, r1, #1
 801ba4a:	eb03 020e 	add.w	r2, r3, lr
 801ba4e:	0409      	lsls	r1, r1, #16
 801ba50:	6022      	str	r2, [r4, #0]
 801ba52:	0c09      	lsrs	r1, r1, #16
 801ba54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801ba58:	eb0e 010c 	add.w	r1, lr, ip
 801ba5c:	185a      	adds	r2, r3, r1
 801ba5e:	603a      	str	r2, [r7, #0]
 801ba60:	220e      	movs	r2, #14
 801ba62:	fb02 f208 	mul.w	r2, r2, r8
 801ba66:	3203      	adds	r2, #3
 801ba68:	f022 0203 	bic.w	r2, r2, #3
 801ba6c:	4411      	add	r1, r2
 801ba6e:	440b      	add	r3, r1
 801ba70:	491b      	ldr	r1, [pc, #108]	; (801bae0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ba72:	600b      	str	r3, [r1, #0]
 801ba74:	2300      	movs	r3, #0
 801ba76:	491b      	ldr	r1, [pc, #108]	; (801bae4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ba78:	800b      	strh	r3, [r1, #0]
 801ba7a:	491b      	ldr	r1, [pc, #108]	; (801bae8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ba7c:	6809      	ldr	r1, [r1, #0]
 801ba7e:	eba1 010e 	sub.w	r1, r1, lr
 801ba82:	eba1 010c 	sub.w	r1, r1, ip
 801ba86:	469c      	mov	ip, r3
 801ba88:	1a8a      	subs	r2, r1, r2
 801ba8a:	4918      	ldr	r1, [pc, #96]	; (801baec <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801ba8c:	600a      	str	r2, [r1, #0]
 801ba8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ba92:	4a17      	ldr	r2, [pc, #92]	; (801baf0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801ba94:	8013      	strh	r3, [r2, #0]
 801ba96:	4283      	cmp	r3, r0
 801ba98:	d10d      	bne.n	801bab6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801ba9a:	8835      	ldrh	r5, [r6, #0]
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	6838      	ldr	r0, [r7, #0]
 801baa0:	240e      	movs	r4, #14
 801baa2:	429d      	cmp	r5, r3
 801baa4:	d90f      	bls.n	801bac6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801baa6:	fb04 0203 	mla	r2, r4, r3, r0
 801baaa:	3301      	adds	r3, #1
 801baac:	7b11      	ldrb	r1, [r2, #12]
 801baae:	f36f 1145 	bfc	r1, #5, #1
 801bab2:	7311      	strb	r1, [r2, #12]
 801bab4:	e7f5      	b.n	801baa2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801bab6:	682a      	ldr	r2, [r5, #0]
 801bab8:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801babc:	6822      	ldr	r2, [r4, #0]
 801babe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bac2:	3301      	adds	r3, #1
 801bac4:	e7e7      	b.n	801ba96 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801bac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baca:	bf00      	nop
 801bacc:	2000b414 	.word	0x2000b414
 801bad0:	2000b430 	.word	0x2000b430
 801bad4:	2000b434 	.word	0x2000b434
 801bad8:	2000b428 	.word	0x2000b428
 801badc:	2000b418 	.word	0x2000b418
 801bae0:	2000b420 	.word	0x2000b420
 801bae4:	2000b432 	.word	0x2000b432
 801bae8:	2000b41c 	.word	0x2000b41c
 801baec:	2000b42c 	.word	0x2000b42c
 801baf0:	2000b424 	.word	0x2000b424

0801baf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801baf4:	4b10      	ldr	r3, [pc, #64]	; (801bb38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801baf6:	b510      	push	{r4, lr}
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	b9db      	cbnz	r3, 801bb34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bafc:	b1d1      	cbz	r1, 801bb34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bafe:	4b0f      	ldr	r3, [pc, #60]	; (801bb3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bb00:	240e      	movs	r4, #14
 801bb02:	801a      	strh	r2, [r3, #0]
 801bb04:	b292      	uxth	r2, r2
 801bb06:	4b0e      	ldr	r3, [pc, #56]	; (801bb40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bb08:	881b      	ldrh	r3, [r3, #0]
 801bb0a:	4413      	add	r3, r2
 801bb0c:	4362      	muls	r2, r4
 801bb0e:	2406      	movs	r4, #6
 801bb10:	fb04 2203 	mla	r2, r4, r3, r2
 801bb14:	428a      	cmp	r2, r1
 801bb16:	d305      	bcc.n	801bb24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bb18:	4b0a      	ldr	r3, [pc, #40]	; (801bb44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bb1a:	2137      	movs	r1, #55	; 0x37
 801bb1c:	4a0a      	ldr	r2, [pc, #40]	; (801bb48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bb1e:	480b      	ldr	r0, [pc, #44]	; (801bb4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bb20:	f009 fe7c 	bl	802581c <__assert_func>
 801bb24:	4b0a      	ldr	r3, [pc, #40]	; (801bb50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bb26:	6019      	str	r1, [r3, #0]
 801bb28:	4b0a      	ldr	r3, [pc, #40]	; (801bb54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bb2a:	6018      	str	r0, [r3, #0]
 801bb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb30:	f7ff bf78 	b.w	801ba24 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bb34:	bd10      	pop	{r4, pc}
 801bb36:	bf00      	nop
 801bb38:	2000b420 	.word	0x2000b420
 801bb3c:	2000b434 	.word	0x2000b434
 801bb40:	2000b430 	.word	0x2000b430
 801bb44:	0802ac09 	.word	0x0802ac09
 801bb48:	0802ac62 	.word	0x0802ac62
 801bb4c:	0802abe4 	.word	0x0802abe4
 801bb50:	2000b41c 	.word	0x2000b41c
 801bb54:	2000b414 	.word	0x2000b414

0801bb58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bb58:	b470      	push	{r4, r5, r6}
 801bb5a:	4c07      	ldr	r4, [pc, #28]	; (801bb78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bb5c:	4605      	mov	r5, r0
 801bb5e:	4610      	mov	r0, r2
 801bb60:	9a03      	ldr	r2, [sp, #12]
 801bb62:	6826      	ldr	r6, [r4, #0]
 801bb64:	b936      	cbnz	r6, 801bb74 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bb66:	6025      	str	r5, [r4, #0]
 801bb68:	4c04      	ldr	r4, [pc, #16]	; (801bb7c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bb6a:	8021      	strh	r1, [r4, #0]
 801bb6c:	4619      	mov	r1, r3
 801bb6e:	bc70      	pop	{r4, r5, r6}
 801bb70:	f7ff bfc0 	b.w	801baf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bb74:	bc70      	pop	{r4, r5, r6}
 801bb76:	4770      	bx	lr
 801bb78:	2000b438 	.word	0x2000b438
 801bb7c:	2000b430 	.word	0x2000b430

0801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bb80:	b508      	push	{r3, lr}
 801bb82:	4b14      	ldr	r3, [pc, #80]	; (801bbd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bb84:	6819      	ldr	r1, [r3, #0]
 801bb86:	b931      	cbnz	r1, 801bb96 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bb88:	4b13      	ldr	r3, [pc, #76]	; (801bbd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bb8a:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801bb8e:	4a13      	ldr	r2, [pc, #76]	; (801bbdc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bb90:	4813      	ldr	r0, [pc, #76]	; (801bbe0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bb92:	f009 fe43 	bl	802581c <__assert_func>
 801bb96:	4a13      	ldr	r2, [pc, #76]	; (801bbe4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bb98:	8803      	ldrh	r3, [r0, #0]
 801bb9a:	8812      	ldrh	r2, [r2, #0]
 801bb9c:	4293      	cmp	r3, r2
 801bb9e:	d204      	bcs.n	801bbaa <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bba0:	2214      	movs	r2, #20
 801bba2:	fb02 1303 	mla	r3, r2, r3, r1
 801bba6:	8918      	ldrh	r0, [r3, #8]
 801bba8:	bd08      	pop	{r3, pc}
 801bbaa:	490f      	ldr	r1, [pc, #60]	; (801bbe8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801bbac:	8809      	ldrh	r1, [r1, #0]
 801bbae:	4411      	add	r1, r2
 801bbb0:	428b      	cmp	r3, r1
 801bbb2:	da06      	bge.n	801bbc2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bbb4:	1a9b      	subs	r3, r3, r2
 801bbb6:	4a0d      	ldr	r2, [pc, #52]	; (801bbec <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bbb8:	210e      	movs	r1, #14
 801bbba:	6812      	ldr	r2, [r2, #0]
 801bbbc:	fb01 2303 	mla	r3, r1, r3, r2
 801bbc0:	e7f1      	b.n	801bba6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bbc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bbc6:	4293      	cmp	r3, r2
 801bbc8:	bf0a      	itet	eq
 801bbca:	4b09      	ldreq	r3, [pc, #36]	; (801bbf0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bbcc:	2000      	movne	r0, #0
 801bbce:	8818      	ldrheq	r0, [r3, #0]
 801bbd0:	e7ea      	b.n	801bba8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801bbd2:	bf00      	nop
 801bbd4:	2000b438 	.word	0x2000b438
 801bbd8:	08029e70 	.word	0x08029e70
 801bbdc:	0802ad0f 	.word	0x0802ad0f
 801bbe0:	0802abe4 	.word	0x0802abe4
 801bbe4:	2000b430 	.word	0x2000b430
 801bbe8:	2000b434 	.word	0x2000b434
 801bbec:	2000b418 	.word	0x2000b418
 801bbf0:	2000b364 	.word	0x2000b364

0801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bbf4:	b508      	push	{r3, lr}
 801bbf6:	4b14      	ldr	r3, [pc, #80]	; (801bc48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bbf8:	6819      	ldr	r1, [r3, #0]
 801bbfa:	b931      	cbnz	r1, 801bc0a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bbfc:	4b13      	ldr	r3, [pc, #76]	; (801bc4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bbfe:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801bc02:	4a13      	ldr	r2, [pc, #76]	; (801bc50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bc04:	4813      	ldr	r0, [pc, #76]	; (801bc54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bc06:	f009 fe09 	bl	802581c <__assert_func>
 801bc0a:	4a13      	ldr	r2, [pc, #76]	; (801bc58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bc0c:	8803      	ldrh	r3, [r0, #0]
 801bc0e:	8812      	ldrh	r2, [r2, #0]
 801bc10:	4293      	cmp	r3, r2
 801bc12:	d204      	bcs.n	801bc1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801bc14:	2214      	movs	r2, #20
 801bc16:	fb02 1303 	mla	r3, r2, r3, r1
 801bc1a:	8958      	ldrh	r0, [r3, #10]
 801bc1c:	bd08      	pop	{r3, pc}
 801bc1e:	490f      	ldr	r1, [pc, #60]	; (801bc5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bc20:	8809      	ldrh	r1, [r1, #0]
 801bc22:	4411      	add	r1, r2
 801bc24:	428b      	cmp	r3, r1
 801bc26:	da06      	bge.n	801bc36 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bc28:	1a9b      	subs	r3, r3, r2
 801bc2a:	4a0d      	ldr	r2, [pc, #52]	; (801bc60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bc2c:	210e      	movs	r1, #14
 801bc2e:	6812      	ldr	r2, [r2, #0]
 801bc30:	fb01 2303 	mla	r3, r1, r3, r2
 801bc34:	e7f1      	b.n	801bc1a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bc36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bc3a:	4293      	cmp	r3, r2
 801bc3c:	bf0a      	itet	eq
 801bc3e:	4b09      	ldreq	r3, [pc, #36]	; (801bc64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bc40:	2000      	movne	r0, #0
 801bc42:	8818      	ldrheq	r0, [r3, #0]
 801bc44:	e7ea      	b.n	801bc1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801bc46:	bf00      	nop
 801bc48:	2000b438 	.word	0x2000b438
 801bc4c:	08029e70 	.word	0x08029e70
 801bc50:	0802ad3b 	.word	0x0802ad3b
 801bc54:	0802abe4 	.word	0x0802abe4
 801bc58:	2000b430 	.word	0x2000b430
 801bc5c:	2000b434 	.word	0x2000b434
 801bc60:	2000b418 	.word	0x2000b418
 801bc64:	2000b366 	.word	0x2000b366

0801bc68 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bc68:	4b23      	ldr	r3, [pc, #140]	; (801bcf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bc6a:	b510      	push	{r4, lr}
 801bc6c:	681c      	ldr	r4, [r3, #0]
 801bc6e:	b934      	cbnz	r4, 801bc7e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801bc70:	4b22      	ldr	r3, [pc, #136]	; (801bcfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bc72:	f44f 7148 	mov.w	r1, #800	; 0x320
 801bc76:	4a22      	ldr	r2, [pc, #136]	; (801bd00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bc78:	4822      	ldr	r0, [pc, #136]	; (801bd04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bc7a:	f009 fdcf 	bl	802581c <__assert_func>
 801bc7e:	4a22      	ldr	r2, [pc, #136]	; (801bd08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bc80:	880b      	ldrh	r3, [r1, #0]
 801bc82:	8812      	ldrh	r2, [r2, #0]
 801bc84:	4293      	cmp	r3, r2
 801bc86:	d211      	bcs.n	801bcac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801bc88:	2214      	movs	r2, #20
 801bc8a:	fb02 4303 	mla	r3, r2, r3, r4
 801bc8e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bc92:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bc96:	8a1a      	ldrh	r2, [r3, #16]
 801bc98:	8a5b      	ldrh	r3, [r3, #18]
 801bc9a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bc9e:	8004      	strh	r4, [r0, #0]
 801bca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bca4:	8041      	strh	r1, [r0, #2]
 801bca6:	8082      	strh	r2, [r0, #4]
 801bca8:	80c3      	strh	r3, [r0, #6]
 801bcaa:	e00e      	b.n	801bcca <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bcac:	4917      	ldr	r1, [pc, #92]	; (801bd0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801bcae:	8809      	ldrh	r1, [r1, #0]
 801bcb0:	4411      	add	r1, r2
 801bcb2:	428b      	cmp	r3, r1
 801bcb4:	da0a      	bge.n	801bccc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801bcb6:	1a9b      	subs	r3, r3, r2
 801bcb8:	4a15      	ldr	r2, [pc, #84]	; (801bd10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801bcba:	210e      	movs	r1, #14
 801bcbc:	6812      	ldr	r2, [r2, #0]
 801bcbe:	fb01 2303 	mla	r3, r1, r3, r2
 801bcc2:	681a      	ldr	r2, [r3, #0]
 801bcc4:	6002      	str	r2, [r0, #0]
 801bcc6:	685a      	ldr	r2, [r3, #4]
 801bcc8:	6042      	str	r2, [r0, #4]
 801bcca:	bd10      	pop	{r4, pc}
 801bccc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bcd0:	4293      	cmp	r3, r2
 801bcd2:	d10b      	bne.n	801bcec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801bcd4:	4b0f      	ldr	r3, [pc, #60]	; (801bd14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801bcd6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bcda:	4b0f      	ldr	r3, [pc, #60]	; (801bd18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bcdc:	8081      	strh	r1, [r0, #4]
 801bcde:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bce2:	2300      	movs	r3, #0
 801bce4:	80c2      	strh	r2, [r0, #6]
 801bce6:	8003      	strh	r3, [r0, #0]
 801bce8:	8043      	strh	r3, [r0, #2]
 801bcea:	e7ee      	b.n	801bcca <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bcec:	2300      	movs	r3, #0
 801bcee:	8003      	strh	r3, [r0, #0]
 801bcf0:	8043      	strh	r3, [r0, #2]
 801bcf2:	8083      	strh	r3, [r0, #4]
 801bcf4:	e7d8      	b.n	801bca8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bcf6:	bf00      	nop
 801bcf8:	2000b438 	.word	0x2000b438
 801bcfc:	08029e70 	.word	0x08029e70
 801bd00:	0802aca8 	.word	0x0802aca8
 801bd04:	0802abe4 	.word	0x0802abe4
 801bd08:	2000b430 	.word	0x2000b430
 801bd0c:	2000b434 	.word	0x2000b434
 801bd10:	2000b418 	.word	0x2000b418
 801bd14:	2000b364 	.word	0x2000b364
 801bd18:	2000b366 	.word	0x2000b366

0801bd1c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bd1c:	b508      	push	{r3, lr}
 801bd1e:	4b12      	ldr	r3, [pc, #72]	; (801bd68 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bd20:	6819      	ldr	r1, [r3, #0]
 801bd22:	b931      	cbnz	r1, 801bd32 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bd24:	4b11      	ldr	r3, [pc, #68]	; (801bd6c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bd26:	f44f 7151 	mov.w	r1, #836	; 0x344
 801bd2a:	4a11      	ldr	r2, [pc, #68]	; (801bd70 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bd2c:	4811      	ldr	r0, [pc, #68]	; (801bd74 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bd2e:	f009 fd75 	bl	802581c <__assert_func>
 801bd32:	8803      	ldrh	r3, [r0, #0]
 801bd34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd38:	4293      	cmp	r3, r2
 801bd3a:	d012      	beq.n	801bd62 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bd3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bd40:	4293      	cmp	r3, r2
 801bd42:	d103      	bne.n	801bd4c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bd44:	4b0c      	ldr	r3, [pc, #48]	; (801bd78 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bd4a:	bd08      	pop	{r3, pc}
 801bd4c:	4a0b      	ldr	r2, [pc, #44]	; (801bd7c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bd4e:	6812      	ldr	r2, [r2, #0]
 801bd50:	b11a      	cbz	r2, 801bd5a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bd52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bd56:	2800      	cmp	r0, #0
 801bd58:	d1f7      	bne.n	801bd4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bd5a:	2214      	movs	r2, #20
 801bd5c:	4353      	muls	r3, r2
 801bd5e:	58c8      	ldr	r0, [r1, r3]
 801bd60:	e7f3      	b.n	801bd4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bd62:	2000      	movs	r0, #0
 801bd64:	e7f1      	b.n	801bd4a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bd66:	bf00      	nop
 801bd68:	2000b438 	.word	0x2000b438
 801bd6c:	08029e70 	.word	0x08029e70
 801bd70:	0802acde 	.word	0x0802acde
 801bd74:	0802abe4 	.word	0x0802abe4
 801bd78:	2000b370 	.word	0x2000b370
 801bd7c:	2000b414 	.word	0x2000b414

0801bd80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bd80:	8802      	ldrh	r2, [r0, #0]
 801bd82:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bd86:	429a      	cmp	r2, r3
 801bd88:	d840      	bhi.n	801be0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bd8a:	4b21      	ldr	r3, [pc, #132]	; (801be10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bd8c:	881b      	ldrh	r3, [r3, #0]
 801bd8e:	429a      	cmp	r2, r3
 801bd90:	d220      	bcs.n	801bdd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bd92:	4b20      	ldr	r3, [pc, #128]	; (801be14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bd94:	6819      	ldr	r1, [r3, #0]
 801bd96:	2314      	movs	r3, #20
 801bd98:	fb03 1302 	mla	r3, r3, r2, r1
 801bd9c:	6858      	ldr	r0, [r3, #4]
 801bd9e:	2800      	cmp	r0, #0
 801bda0:	d035      	beq.n	801be0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bda2:	491d      	ldr	r1, [pc, #116]	; (801be18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bda4:	6809      	ldr	r1, [r1, #0]
 801bda6:	2900      	cmp	r1, #0
 801bda8:	d031      	beq.n	801be0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bdaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bdae:	b371      	cbz	r1, 801be0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bdb0:	895a      	ldrh	r2, [r3, #10]
 801bdb2:	8918      	ldrh	r0, [r3, #8]
 801bdb4:	4350      	muls	r0, r2
 801bdb6:	7c5a      	ldrb	r2, [r3, #17]
 801bdb8:	7cdb      	ldrb	r3, [r3, #19]
 801bdba:	0952      	lsrs	r2, r2, #5
 801bdbc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bdc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bdc4:	2b0b      	cmp	r3, #11
 801bdc6:	bf18      	it	ne
 801bdc8:	0040      	lslne	r0, r0, #1
 801bdca:	3003      	adds	r0, #3
 801bdcc:	f020 0003 	bic.w	r0, r0, #3
 801bdd0:	4408      	add	r0, r1
 801bdd2:	4770      	bx	lr
 801bdd4:	4911      	ldr	r1, [pc, #68]	; (801be1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bdd6:	8809      	ldrh	r1, [r1, #0]
 801bdd8:	4419      	add	r1, r3
 801bdda:	428a      	cmp	r2, r1
 801bddc:	da16      	bge.n	801be0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bdde:	4910      	ldr	r1, [pc, #64]	; (801be20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bde0:	1ad3      	subs	r3, r2, r3
 801bde2:	200e      	movs	r0, #14
 801bde4:	6809      	ldr	r1, [r1, #0]
 801bde6:	fb00 1303 	mla	r3, r0, r3, r1
 801bdea:	7b19      	ldrb	r1, [r3, #12]
 801bdec:	f001 011f 	and.w	r1, r1, #31
 801bdf0:	290b      	cmp	r1, #11
 801bdf2:	d10b      	bne.n	801be0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bdf4:	8919      	ldrh	r1, [r3, #8]
 801bdf6:	8958      	ldrh	r0, [r3, #10]
 801bdf8:	4b07      	ldr	r3, [pc, #28]	; (801be18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bdfa:	4348      	muls	r0, r1
 801bdfc:	6819      	ldr	r1, [r3, #0]
 801bdfe:	3003      	adds	r0, #3
 801be00:	f020 0303 	bic.w	r3, r0, #3
 801be04:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801be08:	4418      	add	r0, r3
 801be0a:	4770      	bx	lr
 801be0c:	2000      	movs	r0, #0
 801be0e:	4770      	bx	lr
 801be10:	2000b430 	.word	0x2000b430
 801be14:	2000b438 	.word	0x2000b438
 801be18:	2000b414 	.word	0x2000b414
 801be1c:	2000b434 	.word	0x2000b434
 801be20:	2000b418 	.word	0x2000b418

0801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801be24:	4b19      	ldr	r3, [pc, #100]	; (801be8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801be26:	6819      	ldr	r1, [r3, #0]
 801be28:	8803      	ldrh	r3, [r0, #0]
 801be2a:	b1e9      	cbz	r1, 801be68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801be2c:	4a18      	ldr	r2, [pc, #96]	; (801be90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801be2e:	8812      	ldrh	r2, [r2, #0]
 801be30:	429a      	cmp	r2, r3
 801be32:	d90a      	bls.n	801be4a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801be34:	2214      	movs	r2, #20
 801be36:	fb02 1303 	mla	r3, r2, r3, r1
 801be3a:	7c58      	ldrb	r0, [r3, #17]
 801be3c:	0942      	lsrs	r2, r0, #5
 801be3e:	7cd8      	ldrb	r0, [r3, #19]
 801be40:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801be44:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801be48:	4770      	bx	lr
 801be4a:	4912      	ldr	r1, [pc, #72]	; (801be94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801be4c:	8809      	ldrh	r1, [r1, #0]
 801be4e:	4411      	add	r1, r2
 801be50:	428b      	cmp	r3, r1
 801be52:	da09      	bge.n	801be68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801be54:	1a9b      	subs	r3, r3, r2
 801be56:	4a10      	ldr	r2, [pc, #64]	; (801be98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801be58:	210e      	movs	r1, #14
 801be5a:	6812      	ldr	r2, [r2, #0]
 801be5c:	fb01 2303 	mla	r3, r1, r3, r2
 801be60:	7b18      	ldrb	r0, [r3, #12]
 801be62:	f000 001f 	and.w	r0, r0, #31
 801be66:	4770      	bx	lr
 801be68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be6c:	4293      	cmp	r3, r2
 801be6e:	d10a      	bne.n	801be86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801be70:	4b0a      	ldr	r3, [pc, #40]	; (801be9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801be78:	b10a      	cbz	r2, 801be7e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801be7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801be7c:	b900      	cbnz	r0, 801be80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801be7e:	6898      	ldr	r0, [r3, #8]
 801be80:	6803      	ldr	r3, [r0, #0]
 801be82:	6a1b      	ldr	r3, [r3, #32]
 801be84:	4718      	bx	r3
 801be86:	2000      	movs	r0, #0
 801be88:	4770      	bx	lr
 801be8a:	bf00      	nop
 801be8c:	2000b438 	.word	0x2000b438
 801be90:	2000b430 	.word	0x2000b430
 801be94:	2000b434 	.word	0x2000b434
 801be98:	2000b418 	.word	0x2000b418
 801be9c:	2000b370 	.word	0x2000b370

0801bea0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801bea0:	2018      	movs	r0, #24
 801bea2:	4770      	bx	lr

0801bea4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801bea4:	2001      	movs	r0, #1
 801bea6:	4770      	bx	lr

0801bea8 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801bea8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801beac:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801beb0:	4770      	bx	lr

0801beb2 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801beb2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801beb6:	4770      	bx	lr

0801beb8 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801beb8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801bebc:	4770      	bx	lr

0801bebe <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801bebe:	b2c8      	uxtb	r0, r1
 801bec0:	4770      	bx	lr

0801bec2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bec6:	b085      	sub	sp, #20
 801bec8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801beca:	9203      	str	r2, [sp, #12]
 801becc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bed0:	6878      	ldr	r0, [r7, #4]
 801bed2:	9201      	str	r2, [sp, #4]
 801bed4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801bed6:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801beda:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801bede:	fa1f fc84 	uxth.w	ip, r4
 801bee2:	43e4      	mvns	r4, r4
 801bee4:	9100      	str	r1, [sp, #0]
 801bee6:	b2e4      	uxtb	r4, r4
 801bee8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801beec:	fb00 2505 	mla	r5, r0, r5, r2
 801bef0:	683a      	ldr	r2, [r7, #0]
 801bef2:	6877      	ldr	r7, [r6, #4]
 801bef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bef8:	3704      	adds	r7, #4
 801befa:	4415      	add	r5, r2
 801befc:	6832      	ldr	r2, [r6, #0]
 801befe:	9202      	str	r2, [sp, #8]
 801bf00:	9a00      	ldr	r2, [sp, #0]
 801bf02:	2a00      	cmp	r2, #0
 801bf04:	dc03      	bgt.n	801bf0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801bf06:	9a03      	ldr	r2, [sp, #12]
 801bf08:	2a00      	cmp	r2, #0
 801bf0a:	f340 8116 	ble.w	801c13a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bf0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf10:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf16:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	dd0f      	ble.n	801bf3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801bf1e:	1406      	asrs	r6, r0, #16
 801bf20:	d406      	bmi.n	801bf30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bf22:	4546      	cmp	r6, r8
 801bf24:	da04      	bge.n	801bf30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bf26:	1416      	asrs	r6, r2, #16
 801bf28:	d402      	bmi.n	801bf30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bf2a:	9901      	ldr	r1, [sp, #4]
 801bf2c:	428e      	cmp	r6, r1
 801bf2e:	db07      	blt.n	801bf40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801bf30:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf32:	3b01      	subs	r3, #1
 801bf34:	3503      	adds	r5, #3
 801bf36:	4408      	add	r0, r1
 801bf38:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bf3a:	440a      	add	r2, r1
 801bf3c:	e7ed      	b.n	801bf1a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801bf3e:	d011      	beq.n	801bf64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801bf40:	1e5e      	subs	r6, r3, #1
 801bf42:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf44:	fb01 0e06 	mla	lr, r1, r6, r0
 801bf48:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801bf4c:	d548      	bpl.n	801bfe0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801bf4e:	4699      	mov	r9, r3
 801bf50:	462e      	mov	r6, r5
 801bf52:	f1b9 0f00 	cmp.w	r9, #0
 801bf56:	f300 809e 	bgt.w	801c096 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801bf5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf62:	441d      	add	r5, r3
 801bf64:	9b00      	ldr	r3, [sp, #0]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	f340 80e7 	ble.w	801c13a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bf6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bf70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf7a:	eef0 6a62 	vmov.f32	s13, s5
 801bf7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bf82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf8a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801bf8e:	eef0 6a43 	vmov.f32	s13, s6
 801bf92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf96:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801bf9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfa6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfb2:	ee12 2a90 	vmov	r2, s5
 801bfb6:	eef0 2a47 	vmov.f32	s5, s14
 801bfba:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfbe:	ee13 2a10 	vmov	r2, s6
 801bfc2:	9311      	str	r3, [sp, #68]	; 0x44
 801bfc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfc6:	eeb0 3a67 	vmov.f32	s6, s15
 801bfca:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfce:	9312      	str	r3, [sp, #72]	; 0x48
 801bfd0:	9b00      	ldr	r3, [sp, #0]
 801bfd2:	9a03      	ldr	r2, [sp, #12]
 801bfd4:	3b01      	subs	r3, #1
 801bfd6:	9300      	str	r3, [sp, #0]
 801bfd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfda:	bf08      	it	eq
 801bfdc:	4613      	moveq	r3, r2
 801bfde:	e78f      	b.n	801bf00 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801bfe0:	45c6      	cmp	lr, r8
 801bfe2:	dab4      	bge.n	801bf4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bfe4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bfe6:	fb01 2606 	mla	r6, r1, r6, r2
 801bfea:	1436      	asrs	r6, r6, #16
 801bfec:	d4af      	bmi.n	801bf4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bfee:	9901      	ldr	r1, [sp, #4]
 801bff0:	428e      	cmp	r6, r1
 801bff2:	daac      	bge.n	801bf4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bff4:	1cee      	adds	r6, r5, #3
 801bff6:	4699      	mov	r9, r3
 801bff8:	f1b9 0f00 	cmp.w	r9, #0
 801bffc:	f106 0603 	add.w	r6, r6, #3
 801c000:	ddab      	ble.n	801bf5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c002:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c006:	9902      	ldr	r1, [sp, #8]
 801c008:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c00c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c010:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c014:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c016:	fb1b fb04 	smulbb	fp, fp, r4
 801c01a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c01e:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c022:	4408      	add	r0, r1
 801c024:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c026:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c02a:	440a      	add	r2, r1
 801c02c:	eb07 0a0e 	add.w	sl, r7, lr
 801c030:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c034:	fb0e be0c 	mla	lr, lr, ip, fp
 801c038:	fa1f fe8e 	uxth.w	lr, lr
 801c03c:	f10e 0b01 	add.w	fp, lr, #1
 801c040:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c044:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c048:	fb1b fb04 	smulbb	fp, fp, r4
 801c04c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c050:	f806 ec06 	strb.w	lr, [r6, #-6]
 801c054:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c058:	fb0e be0c 	mla	lr, lr, ip, fp
 801c05c:	fa1f fe8e 	uxth.w	lr, lr
 801c060:	f10e 0b01 	add.w	fp, lr, #1
 801c064:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c068:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c06c:	f806 ec05 	strb.w	lr, [r6, #-5]
 801c070:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c074:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c078:	fb1a fa04 	smulbb	sl, sl, r4
 801c07c:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c080:	fa1f fe8e 	uxth.w	lr, lr
 801c084:	f10e 0a01 	add.w	sl, lr, #1
 801c088:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c08c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c090:	f806 ec04 	strb.w	lr, [r6, #-4]
 801c094:	e7b0      	b.n	801bff8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c096:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c09a:	d446      	bmi.n	801c12a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c09c:	45c2      	cmp	sl, r8
 801c09e:	da44      	bge.n	801c12a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c0a0:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801c0a4:	d441      	bmi.n	801c12a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c0a6:	9901      	ldr	r1, [sp, #4]
 801c0a8:	458e      	cmp	lr, r1
 801c0aa:	da3e      	bge.n	801c12a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c0ac:	9902      	ldr	r1, [sp, #8]
 801c0ae:	f896 b000 	ldrb.w	fp, [r6]
 801c0b2:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c0b6:	fb1b fb04 	smulbb	fp, fp, r4
 801c0ba:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c0be:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c0c2:	eb07 0a0e 	add.w	sl, r7, lr
 801c0c6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c0ca:	fb0e be0c 	mla	lr, lr, ip, fp
 801c0ce:	fa1f fe8e 	uxth.w	lr, lr
 801c0d2:	f10e 0b01 	add.w	fp, lr, #1
 801c0d6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c0da:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c0de:	fb1b fb04 	smulbb	fp, fp, r4
 801c0e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c0e6:	f886 e000 	strb.w	lr, [r6]
 801c0ea:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c0ee:	fb0e be0c 	mla	lr, lr, ip, fp
 801c0f2:	fa1f fe8e 	uxth.w	lr, lr
 801c0f6:	f10e 0b01 	add.w	fp, lr, #1
 801c0fa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c0fe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c102:	f886 e001 	strb.w	lr, [r6, #1]
 801c106:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c10a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c10e:	fb1a fa04 	smulbb	sl, sl, r4
 801c112:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c116:	fa1f fe8e 	uxth.w	lr, lr
 801c11a:	f10e 0a01 	add.w	sl, lr, #1
 801c11e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c122:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c126:	f886 e002 	strb.w	lr, [r6, #2]
 801c12a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c12c:	3603      	adds	r6, #3
 801c12e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c132:	4408      	add	r0, r1
 801c134:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c136:	440a      	add	r2, r1
 801c138:	e70b      	b.n	801bf52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801c13a:	b005      	add	sp, #20
 801c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c140 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c144:	b085      	sub	sp, #20
 801c146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c14a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c14c:	9203      	str	r2, [sp, #12]
 801c14e:	6870      	ldr	r0, [r6, #4]
 801c150:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c152:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c156:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c15a:	9101      	str	r1, [sp, #4]
 801c15c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c160:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801c164:	fb00 2404 	mla	r4, r0, r4, r2
 801c168:	6832      	ldr	r2, [r6, #0]
 801c16a:	686e      	ldr	r6, [r5, #4]
 801c16c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c170:	3604      	adds	r6, #4
 801c172:	4414      	add	r4, r2
 801c174:	682a      	ldr	r2, [r5, #0]
 801c176:	9202      	str	r2, [sp, #8]
 801c178:	9a01      	ldr	r2, [sp, #4]
 801c17a:	2a00      	cmp	r2, #0
 801c17c:	dc03      	bgt.n	801c186 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801c17e:	9a03      	ldr	r2, [sp, #12]
 801c180:	2a00      	cmp	r2, #0
 801c182:	f340 80b2 	ble.w	801c2ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c188:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c18c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c18e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c192:	2b00      	cmp	r3, #0
 801c194:	dd0c      	ble.n	801c1b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c196:	1405      	asrs	r5, r0, #16
 801c198:	d405      	bmi.n	801c1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c19a:	4575      	cmp	r5, lr
 801c19c:	da03      	bge.n	801c1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c19e:	1415      	asrs	r5, r2, #16
 801c1a0:	d401      	bmi.n	801c1a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c1a2:	4545      	cmp	r5, r8
 801c1a4:	db05      	blt.n	801c1b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c1a6:	4460      	add	r0, ip
 801c1a8:	443a      	add	r2, r7
 801c1aa:	3b01      	subs	r3, #1
 801c1ac:	3403      	adds	r4, #3
 801c1ae:	e7f0      	b.n	801c192 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801c1b0:	d03d      	beq.n	801c22e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c1b2:	1e5d      	subs	r5, r3, #1
 801c1b4:	fb0c 0905 	mla	r9, ip, r5, r0
 801c1b8:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c1bc:	d42c      	bmi.n	801c218 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c1be:	45f1      	cmp	r9, lr
 801c1c0:	da2a      	bge.n	801c218 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c1c2:	fb07 2505 	mla	r5, r7, r5, r2
 801c1c6:	142d      	asrs	r5, r5, #16
 801c1c8:	d426      	bmi.n	801c218 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c1ca:	4545      	cmp	r5, r8
 801c1cc:	da24      	bge.n	801c218 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c1ce:	1ce5      	adds	r5, r4, #3
 801c1d0:	469a      	mov	sl, r3
 801c1d2:	f1ba 0f00 	cmp.w	sl, #0
 801c1d6:	f105 0503 	add.w	r5, r5, #3
 801c1da:	dd23      	ble.n	801c224 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c1dc:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c1e0:	9902      	ldr	r1, [sp, #8]
 801c1e2:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c1e6:	443a      	add	r2, r7
 801c1e8:	fb0e 1909 	mla	r9, lr, r9, r1
 801c1ec:	4460      	add	r0, ip
 801c1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c1f2:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c1f6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c1fa:	eb06 0b09 	add.w	fp, r6, r9
 801c1fe:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c202:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c206:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c20a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c20e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c212:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c216:	e7dc      	b.n	801c1d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c218:	2500      	movs	r5, #0
 801c21a:	eba3 0905 	sub.w	r9, r3, r5
 801c21e:	f1b9 0f00 	cmp.w	r9, #0
 801c222:	dc3c      	bgt.n	801c29e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c224:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c22c:	441c      	add	r4, r3
 801c22e:	9b01      	ldr	r3, [sp, #4]
 801c230:	2b00      	cmp	r3, #0
 801c232:	dd5a      	ble.n	801c2ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c234:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c23a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c23e:	eeb0 6a62 	vmov.f32	s12, s5
 801c242:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c246:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c24a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c24e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c252:	eeb0 6a43 	vmov.f32	s12, s6
 801c256:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c25a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c25e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c262:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c266:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c26a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c26e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c272:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c276:	ee12 2a90 	vmov	r2, s5
 801c27a:	eef0 2a47 	vmov.f32	s5, s14
 801c27e:	fb92 fcf3 	sdiv	ip, r2, r3
 801c282:	ee13 2a10 	vmov	r2, s6
 801c286:	eeb0 3a67 	vmov.f32	s6, s15
 801c28a:	fb92 f7f3 	sdiv	r7, r2, r3
 801c28e:	9b01      	ldr	r3, [sp, #4]
 801c290:	9a03      	ldr	r2, [sp, #12]
 801c292:	3b01      	subs	r3, #1
 801c294:	9301      	str	r3, [sp, #4]
 801c296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c298:	bf08      	it	eq
 801c29a:	4613      	moveq	r3, r2
 801c29c:	e76c      	b.n	801c178 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c29e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c2a2:	d41e      	bmi.n	801c2e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c2a4:	45f2      	cmp	sl, lr
 801c2a6:	da1c      	bge.n	801c2e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c2a8:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c2ac:	d419      	bmi.n	801c2e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c2ae:	45c1      	cmp	r9, r8
 801c2b0:	da17      	bge.n	801c2e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c2b2:	9902      	ldr	r1, [sp, #8]
 801c2b4:	fb0e 1909 	mla	r9, lr, r9, r1
 801c2b8:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c2bc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c2c0:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c2c4:	eb06 0a09 	add.w	sl, r6, r9
 801c2c8:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c2cc:	f804 b009 	strb.w	fp, [r4, r9]
 801c2d0:	44a1      	add	r9, r4
 801c2d2:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c2d6:	f889 b001 	strb.w	fp, [r9, #1]
 801c2da:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c2de:	f889 a002 	strb.w	sl, [r9, #2]
 801c2e2:	4460      	add	r0, ip
 801c2e4:	443a      	add	r2, r7
 801c2e6:	3501      	adds	r5, #1
 801c2e8:	e797      	b.n	801c21a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c2ea:	b005      	add	sp, #20
 801c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2f4:	b087      	sub	sp, #28
 801c2f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c2fa:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c2fc:	9204      	str	r2, [sp, #16]
 801c2fe:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c302:	6870      	ldr	r0, [r6, #4]
 801c304:	9205      	str	r2, [sp, #20]
 801c306:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c308:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c30c:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c310:	9101      	str	r1, [sp, #4]
 801c312:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c316:	fb00 2505 	mla	r5, r0, r5, r2
 801c31a:	6832      	ldr	r2, [r6, #0]
 801c31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c320:	4415      	add	r5, r2
 801c322:	6822      	ldr	r2, [r4, #0]
 801c324:	9202      	str	r2, [sp, #8]
 801c326:	6862      	ldr	r2, [r4, #4]
 801c328:	3204      	adds	r2, #4
 801c32a:	9203      	str	r2, [sp, #12]
 801c32c:	9a01      	ldr	r2, [sp, #4]
 801c32e:	2a00      	cmp	r2, #0
 801c330:	dc03      	bgt.n	801c33a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c332:	9a04      	ldr	r2, [sp, #16]
 801c334:	2a00      	cmp	r2, #0
 801c336:	f340 8124 	ble.w	801c582 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c33a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c33c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c342:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c346:	2b00      	cmp	r3, #0
 801c348:	dd0e      	ble.n	801c368 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c34a:	1422      	asrs	r2, r4, #16
 801c34c:	d405      	bmi.n	801c35a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c34e:	4572      	cmp	r2, lr
 801c350:	da03      	bge.n	801c35a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c352:	1402      	asrs	r2, r0, #16
 801c354:	d401      	bmi.n	801c35a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c356:	4542      	cmp	r2, r8
 801c358:	db07      	blt.n	801c36a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c35a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c35c:	3b01      	subs	r3, #1
 801c35e:	3503      	adds	r5, #3
 801c360:	4414      	add	r4, r2
 801c362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c364:	4410      	add	r0, r2
 801c366:	e7ee      	b.n	801c346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c368:	d010      	beq.n	801c38c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c36a:	1e5a      	subs	r2, r3, #1
 801c36c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c36e:	fb06 4602 	mla	r6, r6, r2, r4
 801c372:	1436      	asrs	r6, r6, #16
 801c374:	d546      	bpl.n	801c404 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c376:	4699      	mov	r9, r3
 801c378:	462f      	mov	r7, r5
 801c37a:	f1b9 0f00 	cmp.w	r9, #0
 801c37e:	f300 80a5 	bgt.w	801c4cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c38a:	441d      	add	r5, r3
 801c38c:	9b01      	ldr	r3, [sp, #4]
 801c38e:	2b00      	cmp	r3, #0
 801c390:	f340 80f7 	ble.w	801c582 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c394:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c39a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c39e:	eeb0 6a62 	vmov.f32	s12, s5
 801c3a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3ae:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c3b2:	eeb0 6a43 	vmov.f32	s12, s6
 801c3b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3ba:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c3be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3d6:	ee12 2a90 	vmov	r2, s5
 801c3da:	eef0 2a47 	vmov.f32	s5, s14
 801c3de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3e2:	ee13 2a10 	vmov	r2, s6
 801c3e6:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3ea:	eeb0 3a67 	vmov.f32	s6, s15
 801c3ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3f2:	9314      	str	r3, [sp, #80]	; 0x50
 801c3f4:	9b01      	ldr	r3, [sp, #4]
 801c3f6:	9a04      	ldr	r2, [sp, #16]
 801c3f8:	3b01      	subs	r3, #1
 801c3fa:	9301      	str	r3, [sp, #4]
 801c3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3fe:	bf08      	it	eq
 801c400:	4613      	moveq	r3, r2
 801c402:	e793      	b.n	801c32c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c404:	4576      	cmp	r6, lr
 801c406:	dab6      	bge.n	801c376 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c408:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c40a:	fb06 0202 	mla	r2, r6, r2, r0
 801c40e:	1412      	asrs	r2, r2, #16
 801c410:	d4b1      	bmi.n	801c376 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c412:	4542      	cmp	r2, r8
 801c414:	daaf      	bge.n	801c376 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c416:	1cef      	adds	r7, r5, #3
 801c418:	4699      	mov	r9, r3
 801c41a:	f1b9 0f00 	cmp.w	r9, #0
 801c41e:	ddb0      	ble.n	801c382 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c420:	9902      	ldr	r1, [sp, #8]
 801c422:	1402      	asrs	r2, r0, #16
 801c424:	1426      	asrs	r6, r4, #16
 801c426:	fb0e 1202 	mla	r2, lr, r2, r1
 801c42a:	9903      	ldr	r1, [sp, #12]
 801c42c:	5d92      	ldrb	r2, [r2, r6]
 801c42e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c432:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c436:	d041      	beq.n	801c4bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c438:	9a05      	ldr	r2, [sp, #20]
 801c43a:	fa5f fb86 	uxtb.w	fp, r6
 801c43e:	fb02 fc0c 	mul.w	ip, r2, ip
 801c442:	f10c 0201 	add.w	r2, ip, #1
 801c446:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c44a:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c44e:	1212      	asrs	r2, r2, #8
 801c450:	fa1f fa82 	uxth.w	sl, r2
 801c454:	43d2      	mvns	r2, r2
 801c456:	fb1b fb0a 	smulbb	fp, fp, sl
 801c45a:	b2d2      	uxtb	r2, r2
 801c45c:	fb0c bc02 	mla	ip, ip, r2, fp
 801c460:	fa1f fc8c 	uxth.w	ip, ip
 801c464:	f10c 0b01 	add.w	fp, ip, #1
 801c468:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c46c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c470:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c474:	fb1b fb0a 	smulbb	fp, fp, sl
 801c478:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c47c:	fb16 fa0a 	smulbb	sl, r6, sl
 801c480:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c484:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c488:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c48c:	fb06 aa02 	mla	sl, r6, r2, sl
 801c490:	fb0c bc02 	mla	ip, ip, r2, fp
 801c494:	fa1f fa8a 	uxth.w	sl, sl
 801c498:	fa1f fc8c 	uxth.w	ip, ip
 801c49c:	f10a 0601 	add.w	r6, sl, #1
 801c4a0:	f10c 0b01 	add.w	fp, ip, #1
 801c4a4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c4a8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c4ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c4b0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c4b4:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c4b8:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c4bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c4be:	3703      	adds	r7, #3
 801c4c0:	f109 39ff 	add.w	r9, r9, #4294967295
 801c4c4:	4414      	add	r4, r2
 801c4c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4c8:	4410      	add	r0, r2
 801c4ca:	e7a6      	b.n	801c41a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c4cc:	1426      	asrs	r6, r4, #16
 801c4ce:	d450      	bmi.n	801c572 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c4d0:	4576      	cmp	r6, lr
 801c4d2:	da4e      	bge.n	801c572 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c4d4:	1402      	asrs	r2, r0, #16
 801c4d6:	d44c      	bmi.n	801c572 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c4d8:	4542      	cmp	r2, r8
 801c4da:	da4a      	bge.n	801c572 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c4dc:	9902      	ldr	r1, [sp, #8]
 801c4de:	fb0e 1202 	mla	r2, lr, r2, r1
 801c4e2:	9903      	ldr	r1, [sp, #12]
 801c4e4:	5d92      	ldrb	r2, [r2, r6]
 801c4e6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c4ea:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c4ee:	d040      	beq.n	801c572 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c4f0:	9a05      	ldr	r2, [sp, #20]
 801c4f2:	fa5f fb86 	uxtb.w	fp, r6
 801c4f6:	fb02 fc0c 	mul.w	ip, r2, ip
 801c4fa:	f10c 0201 	add.w	r2, ip, #1
 801c4fe:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c502:	f897 c000 	ldrb.w	ip, [r7]
 801c506:	1212      	asrs	r2, r2, #8
 801c508:	fa1f fa82 	uxth.w	sl, r2
 801c50c:	43d2      	mvns	r2, r2
 801c50e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c512:	b2d2      	uxtb	r2, r2
 801c514:	fb0c bc02 	mla	ip, ip, r2, fp
 801c518:	fa1f fc8c 	uxth.w	ip, ip
 801c51c:	f10c 0b01 	add.w	fp, ip, #1
 801c520:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c524:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c528:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c52c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c530:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c534:	fb16 fa0a 	smulbb	sl, r6, sl
 801c538:	78be      	ldrb	r6, [r7, #2]
 801c53a:	f887 c000 	strb.w	ip, [r7]
 801c53e:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c542:	fb06 aa02 	mla	sl, r6, r2, sl
 801c546:	fb0c bc02 	mla	ip, ip, r2, fp
 801c54a:	fa1f fa8a 	uxth.w	sl, sl
 801c54e:	fa1f fc8c 	uxth.w	ip, ip
 801c552:	f10a 0601 	add.w	r6, sl, #1
 801c556:	f10c 0b01 	add.w	fp, ip, #1
 801c55a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c55e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c562:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c566:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c56a:	f887 a002 	strb.w	sl, [r7, #2]
 801c56e:	f887 c001 	strb.w	ip, [r7, #1]
 801c572:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c574:	3703      	adds	r7, #3
 801c576:	f109 39ff 	add.w	r9, r9, #4294967295
 801c57a:	4414      	add	r4, r2
 801c57c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c57e:	4410      	add	r0, r2
 801c580:	e6fb      	b.n	801c37a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c582:	b007      	add	sp, #28
 801c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c588 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c58c:	b085      	sub	sp, #20
 801c58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c592:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c594:	9203      	str	r2, [sp, #12]
 801c596:	6870      	ldr	r0, [r6, #4]
 801c598:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c59a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c59e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c5a2:	9100      	str	r1, [sp, #0]
 801c5a4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c5a8:	fb00 2404 	mla	r4, r0, r4, r2
 801c5ac:	6832      	ldr	r2, [r6, #0]
 801c5ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c5b2:	4414      	add	r4, r2
 801c5b4:	682a      	ldr	r2, [r5, #0]
 801c5b6:	9201      	str	r2, [sp, #4]
 801c5b8:	686a      	ldr	r2, [r5, #4]
 801c5ba:	3204      	adds	r2, #4
 801c5bc:	9202      	str	r2, [sp, #8]
 801c5be:	9a00      	ldr	r2, [sp, #0]
 801c5c0:	2a00      	cmp	r2, #0
 801c5c2:	dc03      	bgt.n	801c5cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c5c4:	9a03      	ldr	r2, [sp, #12]
 801c5c6:	2a00      	cmp	r2, #0
 801c5c8:	f340 8131 	ble.w	801c82e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c5cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c5ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c5d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c5d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	dd0e      	ble.n	801c5fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c5dc:	1405      	asrs	r5, r0, #16
 801c5de:	d405      	bmi.n	801c5ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c5e0:	4575      	cmp	r5, lr
 801c5e2:	da03      	bge.n	801c5ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c5e4:	1415      	asrs	r5, r2, #16
 801c5e6:	d401      	bmi.n	801c5ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c5e8:	4545      	cmp	r5, r8
 801c5ea:	db07      	blt.n	801c5fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c5ec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c5ee:	3b01      	subs	r3, #1
 801c5f0:	3403      	adds	r4, #3
 801c5f2:	4428      	add	r0, r5
 801c5f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c5f6:	442a      	add	r2, r5
 801c5f8:	e7ee      	b.n	801c5d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c5fa:	d06f      	beq.n	801c6dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c5fc:	1e5d      	subs	r5, r3, #1
 801c5fe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c600:	fb06 0605 	mla	r6, r6, r5, r0
 801c604:	1436      	asrs	r6, r6, #16
 801c606:	d460      	bmi.n	801c6ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c608:	4576      	cmp	r6, lr
 801c60a:	da5e      	bge.n	801c6ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c60c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c60e:	fb06 2505 	mla	r5, r6, r5, r2
 801c612:	142d      	asrs	r5, r5, #16
 801c614:	d459      	bmi.n	801c6ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c616:	4545      	cmp	r5, r8
 801c618:	da57      	bge.n	801c6ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c61a:	1ce5      	adds	r5, r4, #3
 801c61c:	469a      	mov	sl, r3
 801c61e:	f1ba 0f00 	cmp.w	sl, #0
 801c622:	dd56      	ble.n	801c6d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c624:	9901      	ldr	r1, [sp, #4]
 801c626:	1416      	asrs	r6, r2, #16
 801c628:	1407      	asrs	r7, r0, #16
 801c62a:	fb0e 1606 	mla	r6, lr, r6, r1
 801c62e:	9902      	ldr	r1, [sp, #8]
 801c630:	5df6      	ldrb	r6, [r6, r7]
 801c632:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c636:	0e37      	lsrs	r7, r6, #24
 801c638:	2fff      	cmp	r7, #255	; 0xff
 801c63a:	f000 80ef 	beq.w	801c81c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c63e:	fa5f fc87 	uxtb.w	ip, r7
 801c642:	b3d7      	cbz	r7, 801c6ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c644:	fa1f f78c 	uxth.w	r7, ip
 801c648:	ea6f 0c0c 	mvn.w	ip, ip
 801c64c:	fa5f fb86 	uxtb.w	fp, r6
 801c650:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c654:	fa5f fc8c 	uxtb.w	ip, ip
 801c658:	fb1b fb07 	smulbb	fp, fp, r7
 801c65c:	fb09 b90c 	mla	r9, r9, ip, fp
 801c660:	fa1f f989 	uxth.w	r9, r9
 801c664:	f109 0b01 	add.w	fp, r9, #1
 801c668:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c66c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c670:	fb1b fb0c 	smulbb	fp, fp, ip
 801c674:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c678:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c67c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c680:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c684:	fb09 b907 	mla	r9, r9, r7, fp
 801c688:	fa1f f989 	uxth.w	r9, r9
 801c68c:	f109 0b01 	add.w	fp, r9, #1
 801c690:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c694:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c698:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c69c:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c6a0:	fb19 fc0c 	smulbb	ip, r9, ip
 801c6a4:	fb06 c607 	mla	r6, r6, r7, ip
 801c6a8:	b2b6      	uxth	r6, r6
 801c6aa:	f106 0c01 	add.w	ip, r6, #1
 801c6ae:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c6b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c6b6:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c6ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c6bc:	3503      	adds	r5, #3
 801c6be:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c6c2:	4408      	add	r0, r1
 801c6c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c6c6:	440a      	add	r2, r1
 801c6c8:	e7a9      	b.n	801c61e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c6ca:	2600      	movs	r6, #0
 801c6cc:	1b9d      	subs	r5, r3, r6
 801c6ce:	2d00      	cmp	r5, #0
 801c6d0:	dc40      	bgt.n	801c754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c6d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6da:	441c      	add	r4, r3
 801c6dc:	9b00      	ldr	r3, [sp, #0]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	f340 80a5 	ble.w	801c82e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c6e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6ee:	eeb0 6a62 	vmov.f32	s12, s5
 801c6f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6fe:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c702:	eeb0 6a43 	vmov.f32	s12, s6
 801c706:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c70a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c70e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c712:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c716:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c71a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c71e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c722:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c726:	ee12 2a90 	vmov	r2, s5
 801c72a:	eef0 2a47 	vmov.f32	s5, s14
 801c72e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c732:	ee13 2a10 	vmov	r2, s6
 801c736:	9311      	str	r3, [sp, #68]	; 0x44
 801c738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c73a:	eeb0 3a67 	vmov.f32	s6, s15
 801c73e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c742:	9312      	str	r3, [sp, #72]	; 0x48
 801c744:	9b00      	ldr	r3, [sp, #0]
 801c746:	9a03      	ldr	r2, [sp, #12]
 801c748:	3b01      	subs	r3, #1
 801c74a:	9300      	str	r3, [sp, #0]
 801c74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c74e:	bf08      	it	eq
 801c750:	4613      	moveq	r3, r2
 801c752:	e734      	b.n	801c5be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c754:	1407      	asrs	r7, r0, #16
 801c756:	d450      	bmi.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c758:	4577      	cmp	r7, lr
 801c75a:	da4e      	bge.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c75c:	1415      	asrs	r5, r2, #16
 801c75e:	d44c      	bmi.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c760:	4545      	cmp	r5, r8
 801c762:	da4a      	bge.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c764:	9901      	ldr	r1, [sp, #4]
 801c766:	fb0e 1505 	mla	r5, lr, r5, r1
 801c76a:	9902      	ldr	r1, [sp, #8]
 801c76c:	5ded      	ldrb	r5, [r5, r7]
 801c76e:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c772:	0e2f      	lsrs	r7, r5, #24
 801c774:	2fff      	cmp	r7, #255	; 0xff
 801c776:	d046      	beq.n	801c806 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c778:	fa5f f987 	uxtb.w	r9, r7
 801c77c:	b3ef      	cbz	r7, 801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c77e:	fa1f fc89 	uxth.w	ip, r9
 801c782:	ea6f 0909 	mvn.w	r9, r9
 801c786:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c78a:	fa5f fb85 	uxtb.w	fp, r5
 801c78e:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c792:	fa5f f989 	uxtb.w	r9, r9
 801c796:	fb1b fb0c 	smulbb	fp, fp, ip
 801c79a:	fb0a ba09 	mla	sl, sl, r9, fp
 801c79e:	fa1f fa8a 	uxth.w	sl, sl
 801c7a2:	f10a 0b01 	add.w	fp, sl, #1
 801c7a6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c7aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c7ae:	f804 a007 	strb.w	sl, [r4, r7]
 801c7b2:	4427      	add	r7, r4
 801c7b4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c7b8:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c7bc:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c7c0:	fb1b fb09 	smulbb	fp, fp, r9
 801c7c4:	fb0a ba0c 	mla	sl, sl, ip, fp
 801c7c8:	fa1f fa8a 	uxth.w	sl, sl
 801c7cc:	f10a 0b01 	add.w	fp, sl, #1
 801c7d0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c7d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c7d8:	f887 a001 	strb.w	sl, [r7, #1]
 801c7dc:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c7e0:	fb1a f909 	smulbb	r9, sl, r9
 801c7e4:	fb05 950c 	mla	r5, r5, ip, r9
 801c7e8:	b2ad      	uxth	r5, r5
 801c7ea:	f105 0901 	add.w	r9, r5, #1
 801c7ee:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c7f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7f6:	f887 9002 	strb.w	r9, [r7, #2]
 801c7fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c7fc:	3601      	adds	r6, #1
 801c7fe:	4408      	add	r0, r1
 801c800:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c802:	440a      	add	r2, r1
 801c804:	e762      	b.n	801c6cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c806:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c80a:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801c80e:	55e5      	strb	r5, [r4, r7]
 801c810:	4427      	add	r7, r4
 801c812:	0c2d      	lsrs	r5, r5, #16
 801c814:	f887 c001 	strb.w	ip, [r7, #1]
 801c818:	70bd      	strb	r5, [r7, #2]
 801c81a:	e7ee      	b.n	801c7fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c81c:	0a37      	lsrs	r7, r6, #8
 801c81e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c822:	0c36      	lsrs	r6, r6, #16
 801c824:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c828:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c82c:	e745      	b.n	801c6ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c82e:	b005      	add	sp, #20
 801c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c838:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c83a:	9201      	str	r2, [sp, #4]
 801c83c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c840:	6870      	ldr	r0, [r6, #4]
 801c842:	9200      	str	r2, [sp, #0]
 801c844:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c848:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801c84c:	fa1f fc85 	uxth.w	ip, r5
 801c850:	43ed      	mvns	r5, r5
 801c852:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c856:	b2ed      	uxtb	r5, r5
 801c858:	fb00 2404 	mla	r4, r0, r4, r2
 801c85c:	6832      	ldr	r2, [r6, #0]
 801c85e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c862:	4414      	add	r4, r2
 801c864:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c866:	f8d2 8000 	ldr.w	r8, [r2]
 801c86a:	2900      	cmp	r1, #0
 801c86c:	dc03      	bgt.n	801c876 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801c86e:	9a01      	ldr	r2, [sp, #4]
 801c870:	2a00      	cmp	r2, #0
 801c872:	f340 8104 	ble.w	801ca7e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c878:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c87c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c87e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c882:	2b00      	cmp	r3, #0
 801c884:	dd0f      	ble.n	801c8a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c886:	1406      	asrs	r6, r0, #16
 801c888:	d406      	bmi.n	801c898 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c88a:	4576      	cmp	r6, lr
 801c88c:	da04      	bge.n	801c898 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c88e:	1416      	asrs	r6, r2, #16
 801c890:	d402      	bmi.n	801c898 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c892:	9f00      	ldr	r7, [sp, #0]
 801c894:	42be      	cmp	r6, r7
 801c896:	db07      	blt.n	801c8a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c898:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c89a:	3b01      	subs	r3, #1
 801c89c:	3403      	adds	r4, #3
 801c89e:	4430      	add	r0, r6
 801c8a0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c8a2:	4432      	add	r2, r6
 801c8a4:	e7ed      	b.n	801c882 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c8a6:	d05f      	beq.n	801c968 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801c8a8:	1e5e      	subs	r6, r3, #1
 801c8aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c8ac:	fb07 0706 	mla	r7, r7, r6, r0
 801c8b0:	143f      	asrs	r7, r7, #16
 801c8b2:	d450      	bmi.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c8b4:	4577      	cmp	r7, lr
 801c8b6:	da4e      	bge.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c8b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c8ba:	fb07 2606 	mla	r6, r7, r6, r2
 801c8be:	1436      	asrs	r6, r6, #16
 801c8c0:	d449      	bmi.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c8c2:	9f00      	ldr	r7, [sp, #0]
 801c8c4:	42be      	cmp	r6, r7
 801c8c6:	da46      	bge.n	801c956 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c8c8:	1ce6      	adds	r6, r4, #3
 801c8ca:	4699      	mov	r9, r3
 801c8cc:	f1b9 0f00 	cmp.w	r9, #0
 801c8d0:	f106 0603 	add.w	r6, r6, #3
 801c8d4:	dd43      	ble.n	801c95e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c8d6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c8da:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c8de:	1417      	asrs	r7, r2, #16
 801c8e0:	f109 39ff 	add.w	r9, r9, #4294967295
 801c8e4:	fb1b fb05 	smulbb	fp, fp, r5
 801c8e8:	fb0e a707 	mla	r7, lr, r7, sl
 801c8ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c8f0:	eb08 0a07 	add.w	sl, r8, r7
 801c8f4:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c8f8:	fb07 b70c 	mla	r7, r7, ip, fp
 801c8fc:	b2bf      	uxth	r7, r7
 801c8fe:	f107 0b01 	add.w	fp, r7, #1
 801c902:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c906:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c90a:	fb1b fb05 	smulbb	fp, fp, r5
 801c90e:	123f      	asrs	r7, r7, #8
 801c910:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c914:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c918:	fb07 b70c 	mla	r7, r7, ip, fp
 801c91c:	b2bf      	uxth	r7, r7
 801c91e:	f107 0b01 	add.w	fp, r7, #1
 801c922:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c926:	123f      	asrs	r7, r7, #8
 801c928:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c92c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c930:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c934:	fb1a fa05 	smulbb	sl, sl, r5
 801c938:	fb07 a70c 	mla	r7, r7, ip, sl
 801c93c:	b2bf      	uxth	r7, r7
 801c93e:	f107 0a01 	add.w	sl, r7, #1
 801c942:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c946:	123f      	asrs	r7, r7, #8
 801c948:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c94c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c94e:	4438      	add	r0, r7
 801c950:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c952:	443a      	add	r2, r7
 801c954:	e7ba      	b.n	801c8cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c956:	2700      	movs	r7, #0
 801c958:	1bde      	subs	r6, r3, r7
 801c95a:	2e00      	cmp	r6, #0
 801c95c:	dc3f      	bgt.n	801c9de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c95e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c962:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c966:	441c      	add	r4, r3
 801c968:	2900      	cmp	r1, #0
 801c96a:	f340 8088 	ble.w	801ca7e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c96e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c974:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c978:	3901      	subs	r1, #1
 801c97a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c97e:	eef0 6a62 	vmov.f32	s13, s5
 801c982:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c986:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c98a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c98e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c992:	eef0 6a43 	vmov.f32	s13, s6
 801c996:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c99a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c99e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9b6:	ee12 2a90 	vmov	r2, s5
 801c9ba:	eef0 2a47 	vmov.f32	s5, s14
 801c9be:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9c2:	ee13 2a10 	vmov	r2, s6
 801c9c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9ca:	eeb0 3a67 	vmov.f32	s6, s15
 801c9ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9d2:	9a01      	ldr	r2, [sp, #4]
 801c9d4:	9310      	str	r3, [sp, #64]	; 0x40
 801c9d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9d8:	bf08      	it	eq
 801c9da:	4613      	moveq	r3, r2
 801c9dc:	e745      	b.n	801c86a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c9de:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c9e2:	d446      	bmi.n	801ca72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9e4:	45f2      	cmp	sl, lr
 801c9e6:	da44      	bge.n	801ca72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9e8:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c9ec:	d441      	bmi.n	801ca72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9ee:	9e00      	ldr	r6, [sp, #0]
 801c9f0:	45b1      	cmp	r9, r6
 801c9f2:	da3e      	bge.n	801ca72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9f4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c9f8:	fb0e a909 	mla	r9, lr, r9, sl
 801c9fc:	f814 b006 	ldrb.w	fp, [r4, r6]
 801ca00:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ca04:	fb1b fb05 	smulbb	fp, fp, r5
 801ca08:	eb08 0a09 	add.w	sl, r8, r9
 801ca0c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801ca10:	fb09 b90c 	mla	r9, r9, ip, fp
 801ca14:	fa1f f989 	uxth.w	r9, r9
 801ca18:	f109 0b01 	add.w	fp, r9, #1
 801ca1c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ca20:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca24:	f804 9006 	strb.w	r9, [r4, r6]
 801ca28:	4426      	add	r6, r4
 801ca2a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ca2e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ca32:	fb1b fb05 	smulbb	fp, fp, r5
 801ca36:	fb09 b90c 	mla	r9, r9, ip, fp
 801ca3a:	fa1f f989 	uxth.w	r9, r9
 801ca3e:	f109 0b01 	add.w	fp, r9, #1
 801ca42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ca46:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca4a:	f886 9001 	strb.w	r9, [r6, #1]
 801ca4e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ca52:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ca56:	fb1a fa05 	smulbb	sl, sl, r5
 801ca5a:	fb09 a90c 	mla	r9, r9, ip, sl
 801ca5e:	fa1f f989 	uxth.w	r9, r9
 801ca62:	f109 0a01 	add.w	sl, r9, #1
 801ca66:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ca6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca6e:	f886 9002 	strb.w	r9, [r6, #2]
 801ca72:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ca74:	3701      	adds	r7, #1
 801ca76:	4430      	add	r0, r6
 801ca78:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ca7a:	4432      	add	r2, r6
 801ca7c:	e76c      	b.n	801c958 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801ca7e:	b003      	add	sp, #12
 801ca80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca84 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca88:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ca8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca8e:	9201      	str	r2, [sp, #4]
 801ca90:	6868      	ldr	r0, [r5, #4]
 801ca92:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801ca96:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801ca9a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ca9e:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801caa2:	fb00 2404 	mla	r4, r0, r4, r2
 801caa6:	682a      	ldr	r2, [r5, #0]
 801caa8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801caac:	4414      	add	r4, r2
 801caae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cab0:	f8d2 9000 	ldr.w	r9, [r2]
 801cab4:	2900      	cmp	r1, #0
 801cab6:	dc03      	bgt.n	801cac0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cab8:	9a01      	ldr	r2, [sp, #4]
 801caba:	2a00      	cmp	r2, #0
 801cabc:	f340 80a8 	ble.w	801cc10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801cac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cac2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cac8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cacc:	2b00      	cmp	r3, #0
 801cace:	dd0c      	ble.n	801caea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801cad0:	1405      	asrs	r5, r0, #16
 801cad2:	d405      	bmi.n	801cae0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cad4:	4565      	cmp	r5, ip
 801cad6:	da03      	bge.n	801cae0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cad8:	1415      	asrs	r5, r2, #16
 801cada:	d401      	bmi.n	801cae0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cadc:	4575      	cmp	r5, lr
 801cade:	db05      	blt.n	801caec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801cae0:	4438      	add	r0, r7
 801cae2:	4432      	add	r2, r6
 801cae4:	3b01      	subs	r3, #1
 801cae6:	3403      	adds	r4, #3
 801cae8:	e7f0      	b.n	801cacc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801caea:	d03a      	beq.n	801cb62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801caec:	1e5d      	subs	r5, r3, #1
 801caee:	fb07 0805 	mla	r8, r7, r5, r0
 801caf2:	ea5f 4828 	movs.w	r8, r8, asr #16
 801caf6:	d429      	bmi.n	801cb4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801caf8:	45e0      	cmp	r8, ip
 801cafa:	da27      	bge.n	801cb4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cafc:	fb06 2505 	mla	r5, r6, r5, r2
 801cb00:	142d      	asrs	r5, r5, #16
 801cb02:	d423      	bmi.n	801cb4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cb04:	4575      	cmp	r5, lr
 801cb06:	da21      	bge.n	801cb4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cb08:	f104 0803 	add.w	r8, r4, #3
 801cb0c:	469a      	mov	sl, r3
 801cb0e:	f1ba 0f00 	cmp.w	sl, #0
 801cb12:	f108 0803 	add.w	r8, r8, #3
 801cb16:	dd1f      	ble.n	801cb58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801cb18:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801cb1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cb20:	1415      	asrs	r5, r2, #16
 801cb22:	4438      	add	r0, r7
 801cb24:	4432      	add	r2, r6
 801cb26:	fb0c b505 	mla	r5, ip, r5, fp
 801cb2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb2e:	eb09 0b05 	add.w	fp, r9, r5
 801cb32:	f819 5005 	ldrb.w	r5, [r9, r5]
 801cb36:	f808 5c06 	strb.w	r5, [r8, #-6]
 801cb3a:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801cb3e:	f808 5c05 	strb.w	r5, [r8, #-5]
 801cb42:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801cb46:	f808 5c04 	strb.w	r5, [r8, #-4]
 801cb4a:	e7e0      	b.n	801cb0e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cb4c:	2500      	movs	r5, #0
 801cb4e:	eba3 0805 	sub.w	r8, r3, r5
 801cb52:	f1b8 0f00 	cmp.w	r8, #0
 801cb56:	dc38      	bgt.n	801cbca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801cb58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb60:	441c      	add	r4, r3
 801cb62:	2900      	cmp	r1, #0
 801cb64:	dd54      	ble.n	801cc10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801cb66:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb70:	3901      	subs	r1, #1
 801cb72:	eeb0 6a62 	vmov.f32	s12, s5
 801cb76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb82:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cb86:	eeb0 6a43 	vmov.f32	s12, s6
 801cb8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb8e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cb92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb96:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cba2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cba6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbaa:	ee12 2a90 	vmov	r2, s5
 801cbae:	eef0 2a47 	vmov.f32	s5, s14
 801cbb2:	fb92 f7f3 	sdiv	r7, r2, r3
 801cbb6:	ee13 2a10 	vmov	r2, s6
 801cbba:	eeb0 3a67 	vmov.f32	s6, s15
 801cbbe:	fb92 f6f3 	sdiv	r6, r2, r3
 801cbc2:	9a01      	ldr	r2, [sp, #4]
 801cbc4:	bf08      	it	eq
 801cbc6:	4613      	moveq	r3, r2
 801cbc8:	e774      	b.n	801cab4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801cbca:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cbce:	d41b      	bmi.n	801cc08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cbd0:	45e2      	cmp	sl, ip
 801cbd2:	da19      	bge.n	801cc08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cbd4:	ea5f 4822 	movs.w	r8, r2, asr #16
 801cbd8:	d416      	bmi.n	801cc08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cbda:	45f0      	cmp	r8, lr
 801cbdc:	da14      	bge.n	801cc08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cbde:	fb0c a808 	mla	r8, ip, r8, sl
 801cbe2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cbe6:	f819 b008 	ldrb.w	fp, [r9, r8]
 801cbea:	eb09 0a08 	add.w	sl, r9, r8
 801cbee:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801cbf2:	f804 b008 	strb.w	fp, [r4, r8]
 801cbf6:	44a0      	add	r8, r4
 801cbf8:	f89a b001 	ldrb.w	fp, [sl, #1]
 801cbfc:	f888 b001 	strb.w	fp, [r8, #1]
 801cc00:	f89a a002 	ldrb.w	sl, [sl, #2]
 801cc04:	f888 a002 	strb.w	sl, [r8, #2]
 801cc08:	4438      	add	r0, r7
 801cc0a:	4432      	add	r2, r6
 801cc0c:	3501      	adds	r5, #1
 801cc0e:	e79e      	b.n	801cb4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801cc10:	b003      	add	sp, #12
 801cc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cc16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc1a:	b085      	sub	sp, #20
 801cc1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cc20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cc22:	9202      	str	r2, [sp, #8]
 801cc24:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cc28:	6860      	ldr	r0, [r4, #4]
 801cc2a:	9203      	str	r2, [sp, #12]
 801cc2c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801cc30:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801cc34:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cc38:	fb00 2505 	mla	r5, r0, r5, r2
 801cc3c:	6822      	ldr	r2, [r4, #0]
 801cc3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc42:	4415      	add	r5, r2
 801cc44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cc46:	6812      	ldr	r2, [r2, #0]
 801cc48:	9201      	str	r2, [sp, #4]
 801cc4a:	2900      	cmp	r1, #0
 801cc4c:	dc03      	bgt.n	801cc56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801cc4e:	9a02      	ldr	r2, [sp, #8]
 801cc50:	2a00      	cmp	r2, #0
 801cc52:	f340 811c 	ble.w	801ce8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cc56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc58:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cc5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc5e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	dd0e      	ble.n	801cc84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cc66:	1422      	asrs	r2, r4, #16
 801cc68:	d405      	bmi.n	801cc76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cc6a:	4572      	cmp	r2, lr
 801cc6c:	da03      	bge.n	801cc76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cc6e:	1402      	asrs	r2, r0, #16
 801cc70:	d401      	bmi.n	801cc76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cc72:	4542      	cmp	r2, r8
 801cc74:	db07      	blt.n	801cc86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801cc76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc78:	3b01      	subs	r3, #1
 801cc7a:	3503      	adds	r5, #3
 801cc7c:	4414      	add	r4, r2
 801cc7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc80:	4410      	add	r0, r2
 801cc82:	e7ee      	b.n	801cc62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cc84:	d072      	beq.n	801cd6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801cc86:	1e5a      	subs	r2, r3, #1
 801cc88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cc8a:	fb06 4602 	mla	r6, r6, r2, r4
 801cc8e:	1436      	asrs	r6, r6, #16
 801cc90:	d461      	bmi.n	801cd56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cc92:	4576      	cmp	r6, lr
 801cc94:	da5f      	bge.n	801cd56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cc96:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cc98:	fb06 0202 	mla	r2, r6, r2, r0
 801cc9c:	1412      	asrs	r2, r2, #16
 801cc9e:	d45a      	bmi.n	801cd56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cca0:	4542      	cmp	r2, r8
 801cca2:	da58      	bge.n	801cd56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cca4:	1cef      	adds	r7, r5, #3
 801cca6:	4699      	mov	r9, r3
 801cca8:	f1b9 0f00 	cmp.w	r9, #0
 801ccac:	dd59      	ble.n	801cd62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ccae:	1426      	asrs	r6, r4, #16
 801ccb0:	1402      	asrs	r2, r0, #16
 801ccb2:	fb0e 6202 	mla	r2, lr, r2, r6
 801ccb6:	9e01      	ldr	r6, [sp, #4]
 801ccb8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ccbc:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801ccc0:	d041      	beq.n	801cd46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801ccc2:	9a03      	ldr	r2, [sp, #12]
 801ccc4:	fa5f fb86 	uxtb.w	fp, r6
 801ccc8:	fb02 fc0c 	mul.w	ip, r2, ip
 801cccc:	f10c 0201 	add.w	r2, ip, #1
 801ccd0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801ccd4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801ccd8:	1212      	asrs	r2, r2, #8
 801ccda:	fa1f fa82 	uxth.w	sl, r2
 801ccde:	43d2      	mvns	r2, r2
 801cce0:	fb1b fb0a 	smulbb	fp, fp, sl
 801cce4:	b2d2      	uxtb	r2, r2
 801cce6:	fb0c bc02 	mla	ip, ip, r2, fp
 801ccea:	fa1f fc8c 	uxth.w	ip, ip
 801ccee:	f10c 0b01 	add.w	fp, ip, #1
 801ccf2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ccf6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ccfa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ccfe:	fb1b fb0a 	smulbb	fp, fp, sl
 801cd02:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cd06:	fb16 fa0a 	smulbb	sl, r6, sl
 801cd0a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cd0e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801cd12:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801cd16:	fb06 aa02 	mla	sl, r6, r2, sl
 801cd1a:	fb0c bc02 	mla	ip, ip, r2, fp
 801cd1e:	fa1f fa8a 	uxth.w	sl, sl
 801cd22:	fa1f fc8c 	uxth.w	ip, ip
 801cd26:	f10a 0601 	add.w	r6, sl, #1
 801cd2a:	f10c 0b01 	add.w	fp, ip, #1
 801cd2e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cd32:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cd36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cd3a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cd3e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cd42:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cd46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd48:	3703      	adds	r7, #3
 801cd4a:	f109 39ff 	add.w	r9, r9, #4294967295
 801cd4e:	4414      	add	r4, r2
 801cd50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd52:	4410      	add	r0, r2
 801cd54:	e7a8      	b.n	801cca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cd56:	f04f 0c00 	mov.w	ip, #0
 801cd5a:	eba3 020c 	sub.w	r2, r3, ip
 801cd5e:	2a00      	cmp	r2, #0
 801cd60:	dc3d      	bgt.n	801cdde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cd62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd6a:	441d      	add	r5, r3
 801cd6c:	2900      	cmp	r1, #0
 801cd6e:	f340 808e 	ble.w	801ce8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cd72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd7c:	3901      	subs	r1, #1
 801cd7e:	eeb0 6a62 	vmov.f32	s12, s5
 801cd82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cd86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd8e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cd92:	eeb0 6a43 	vmov.f32	s12, s6
 801cd96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd9a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cd9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cda2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cda6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdb6:	ee12 2a90 	vmov	r2, s5
 801cdba:	eef0 2a47 	vmov.f32	s5, s14
 801cdbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdc2:	ee13 2a10 	vmov	r2, s6
 801cdc6:	9311      	str	r3, [sp, #68]	; 0x44
 801cdc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdca:	eeb0 3a67 	vmov.f32	s6, s15
 801cdce:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdd2:	9a02      	ldr	r2, [sp, #8]
 801cdd4:	9312      	str	r3, [sp, #72]	; 0x48
 801cdd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdd8:	bf08      	it	eq
 801cdda:	4613      	moveq	r3, r2
 801cddc:	e735      	b.n	801cc4a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801cdde:	1426      	asrs	r6, r4, #16
 801cde0:	d44e      	bmi.n	801ce80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cde2:	4576      	cmp	r6, lr
 801cde4:	da4c      	bge.n	801ce80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cde6:	1402      	asrs	r2, r0, #16
 801cde8:	d44a      	bmi.n	801ce80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cdea:	4542      	cmp	r2, r8
 801cdec:	da48      	bge.n	801ce80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cdee:	fb0e 6202 	mla	r2, lr, r2, r6
 801cdf2:	9e01      	ldr	r6, [sp, #4]
 801cdf4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801cdf8:	0e3a      	lsrs	r2, r7, #24
 801cdfa:	d041      	beq.n	801ce80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cdfc:	9e03      	ldr	r6, [sp, #12]
 801cdfe:	fa5f fb87 	uxtb.w	fp, r7
 801ce02:	4372      	muls	r2, r6
 801ce04:	1c56      	adds	r6, r2, #1
 801ce06:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ce0a:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801ce0e:	1212      	asrs	r2, r2, #8
 801ce10:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ce14:	fa1f fa82 	uxth.w	sl, r2
 801ce18:	43d2      	mvns	r2, r2
 801ce1a:	fb1b fb0a 	smulbb	fp, fp, sl
 801ce1e:	b2d2      	uxtb	r2, r2
 801ce20:	fb09 b902 	mla	r9, r9, r2, fp
 801ce24:	fa1f f989 	uxth.w	r9, r9
 801ce28:	f109 0b01 	add.w	fp, r9, #1
 801ce2c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce30:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ce34:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ce38:	fb1b fb0a 	smulbb	fp, fp, sl
 801ce3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce40:	fb17 fa0a 	smulbb	sl, r7, sl
 801ce44:	f805 9006 	strb.w	r9, [r5, r6]
 801ce48:	442e      	add	r6, r5
 801ce4a:	78b7      	ldrb	r7, [r6, #2]
 801ce4c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ce50:	fb07 aa02 	mla	sl, r7, r2, sl
 801ce54:	fb09 b902 	mla	r9, r9, r2, fp
 801ce58:	fa1f fa8a 	uxth.w	sl, sl
 801ce5c:	fa1f f989 	uxth.w	r9, r9
 801ce60:	f10a 0701 	add.w	r7, sl, #1
 801ce64:	f109 0b01 	add.w	fp, r9, #1
 801ce68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ce6c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce70:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ce74:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce78:	f886 a002 	strb.w	sl, [r6, #2]
 801ce7c:	f886 9001 	strb.w	r9, [r6, #1]
 801ce80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ce82:	f10c 0c01 	add.w	ip, ip, #1
 801ce86:	4414      	add	r4, r2
 801ce88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ce8a:	4410      	add	r0, r2
 801ce8c:	e765      	b.n	801cd5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ce8e:	b005      	add	sp, #20
 801ce90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce98:	b085      	sub	sp, #20
 801ce9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cea0:	9203      	str	r2, [sp, #12]
 801cea2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801cea6:	6860      	ldr	r0, [r4, #4]
 801cea8:	9201      	str	r2, [sp, #4]
 801ceaa:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ceae:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ceb2:	fb00 2505 	mla	r5, r0, r5, r2
 801ceb6:	6822      	ldr	r2, [r4, #0]
 801ceb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cebc:	4415      	add	r5, r2
 801cebe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cec0:	6812      	ldr	r2, [r2, #0]
 801cec2:	9202      	str	r2, [sp, #8]
 801cec4:	2900      	cmp	r1, #0
 801cec6:	dc03      	bgt.n	801ced0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cec8:	9a03      	ldr	r2, [sp, #12]
 801ceca:	2a00      	cmp	r2, #0
 801cecc:	f340 8122 	ble.w	801d114 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ced0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ced2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ced6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ced8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cedc:	2b00      	cmp	r3, #0
 801cede:	dd0f      	ble.n	801cf00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cee0:	1422      	asrs	r2, r4, #16
 801cee2:	d406      	bmi.n	801cef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cee4:	4572      	cmp	r2, lr
 801cee6:	da04      	bge.n	801cef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cee8:	1402      	asrs	r2, r0, #16
 801ceea:	d402      	bmi.n	801cef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ceec:	9e01      	ldr	r6, [sp, #4]
 801ceee:	42b2      	cmp	r2, r6
 801cef0:	db07      	blt.n	801cf02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cef2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cef4:	3b01      	subs	r3, #1
 801cef6:	3503      	adds	r5, #3
 801cef8:	4414      	add	r4, r2
 801cefa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cefc:	4410      	add	r0, r2
 801cefe:	e7ed      	b.n	801cedc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801cf00:	d06e      	beq.n	801cfe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cf02:	1e5a      	subs	r2, r3, #1
 801cf04:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cf06:	fb06 4602 	mla	r6, r6, r2, r4
 801cf0a:	1436      	asrs	r6, r6, #16
 801cf0c:	d45d      	bmi.n	801cfca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cf0e:	4576      	cmp	r6, lr
 801cf10:	da5b      	bge.n	801cfca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cf12:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cf14:	fb06 0202 	mla	r2, r6, r2, r0
 801cf18:	1412      	asrs	r2, r2, #16
 801cf1a:	d456      	bmi.n	801cfca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cf1c:	9e01      	ldr	r6, [sp, #4]
 801cf1e:	42b2      	cmp	r2, r6
 801cf20:	da53      	bge.n	801cfca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cf22:	1cee      	adds	r6, r5, #3
 801cf24:	469a      	mov	sl, r3
 801cf26:	f1ba 0f00 	cmp.w	sl, #0
 801cf2a:	dd54      	ble.n	801cfd6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cf2c:	1427      	asrs	r7, r4, #16
 801cf2e:	1402      	asrs	r2, r0, #16
 801cf30:	fb0e 7202 	mla	r2, lr, r2, r7
 801cf34:	9f02      	ldr	r7, [sp, #8]
 801cf36:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801cf3a:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801cf3e:	d03c      	beq.n	801cfba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801cf40:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cf44:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cf48:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cf4c:	fa5f f28c 	uxtb.w	r2, ip
 801cf50:	b2ff      	uxtb	r7, r7
 801cf52:	f000 80d8 	beq.w	801d106 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801cf56:	fa1f f882 	uxth.w	r8, r2
 801cf5a:	43d2      	mvns	r2, r2
 801cf5c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801cf60:	fb17 f708 	smulbb	r7, r7, r8
 801cf64:	b2d2      	uxtb	r2, r2
 801cf66:	fb19 f908 	smulbb	r9, r9, r8
 801cf6a:	fb0c 7702 	mla	r7, ip, r2, r7
 801cf6e:	fb1b f808 	smulbb	r8, fp, r8
 801cf72:	b2bf      	uxth	r7, r7
 801cf74:	f107 0c01 	add.w	ip, r7, #1
 801cf78:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cf7c:	123f      	asrs	r7, r7, #8
 801cf7e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801cf82:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801cf86:	fb07 9902 	mla	r9, r7, r2, r9
 801cf8a:	fa1f f989 	uxth.w	r9, r9
 801cf8e:	f109 0701 	add.w	r7, r9, #1
 801cf92:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cf96:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801cf9a:	fb07 8802 	mla	r8, r7, r2, r8
 801cf9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cfa2:	fa1f f888 	uxth.w	r8, r8
 801cfa6:	f806 9c02 	strb.w	r9, [r6, #-2]
 801cfaa:	f108 0201 	add.w	r2, r8, #1
 801cfae:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cfb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cfb6:	f806 8c01 	strb.w	r8, [r6, #-1]
 801cfba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfbc:	3603      	adds	r6, #3
 801cfbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cfc2:	4414      	add	r4, r2
 801cfc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfc6:	4410      	add	r0, r2
 801cfc8:	e7ad      	b.n	801cf26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cfca:	f04f 0c00 	mov.w	ip, #0
 801cfce:	eba3 020c 	sub.w	r2, r3, ip
 801cfd2:	2a00      	cmp	r2, #0
 801cfd4:	dc3d      	bgt.n	801d052 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801cfd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfde:	441d      	add	r5, r3
 801cfe0:	2900      	cmp	r1, #0
 801cfe2:	f340 8097 	ble.w	801d114 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801cfe6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cff0:	3901      	subs	r1, #1
 801cff2:	eeb0 6a62 	vmov.f32	s12, s5
 801cff6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cffa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cffe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d002:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d006:	eeb0 6a43 	vmov.f32	s12, s6
 801d00a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d00e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d012:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d016:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d01a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d01e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d022:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d026:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d02a:	ee12 2a90 	vmov	r2, s5
 801d02e:	eef0 2a47 	vmov.f32	s5, s14
 801d032:	fb92 f3f3 	sdiv	r3, r2, r3
 801d036:	ee13 2a10 	vmov	r2, s6
 801d03a:	9311      	str	r3, [sp, #68]	; 0x44
 801d03c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d03e:	eeb0 3a67 	vmov.f32	s6, s15
 801d042:	fb92 f3f3 	sdiv	r3, r2, r3
 801d046:	9a03      	ldr	r2, [sp, #12]
 801d048:	9312      	str	r3, [sp, #72]	; 0x48
 801d04a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d04c:	bf08      	it	eq
 801d04e:	4613      	moveq	r3, r2
 801d050:	e738      	b.n	801cec4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801d052:	1426      	asrs	r6, r4, #16
 801d054:	d448      	bmi.n	801d0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d056:	4576      	cmp	r6, lr
 801d058:	da46      	bge.n	801d0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d05a:	1402      	asrs	r2, r0, #16
 801d05c:	d444      	bmi.n	801d0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d05e:	9f01      	ldr	r7, [sp, #4]
 801d060:	42ba      	cmp	r2, r7
 801d062:	da41      	bge.n	801d0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d064:	fb0e 6202 	mla	r2, lr, r2, r6
 801d068:	9e02      	ldr	r6, [sp, #8]
 801d06a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d06e:	0e3a      	lsrs	r2, r7, #24
 801d070:	d03a      	beq.n	801d0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d072:	2aff      	cmp	r2, #255	; 0xff
 801d074:	b2d6      	uxtb	r6, r2
 801d076:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d07a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d07e:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801d082:	b2ff      	uxtb	r7, r7
 801d084:	d037      	beq.n	801d0f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801d086:	fa1f f986 	uxth.w	r9, r6
 801d08a:	4462      	add	r2, ip
 801d08c:	43f6      	mvns	r6, r6
 801d08e:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d092:	fb17 f709 	smulbb	r7, r7, r9
 801d096:	fb1a fa09 	smulbb	sl, sl, r9
 801d09a:	b2f6      	uxtb	r6, r6
 801d09c:	fb1b f909 	smulbb	r9, fp, r9
 801d0a0:	fb08 7706 	mla	r7, r8, r6, r7
 801d0a4:	b2bf      	uxth	r7, r7
 801d0a6:	f107 0801 	add.w	r8, r7, #1
 801d0aa:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d0ae:	123f      	asrs	r7, r7, #8
 801d0b0:	54af      	strb	r7, [r5, r2]
 801d0b2:	442a      	add	r2, r5
 801d0b4:	7857      	ldrb	r7, [r2, #1]
 801d0b6:	fb07 aa06 	mla	sl, r7, r6, sl
 801d0ba:	fa1f fa8a 	uxth.w	sl, sl
 801d0be:	f10a 0701 	add.w	r7, sl, #1
 801d0c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0c6:	7897      	ldrb	r7, [r2, #2]
 801d0c8:	fb07 9906 	mla	r9, r7, r6, r9
 801d0cc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0d0:	fa1f f989 	uxth.w	r9, r9
 801d0d4:	f882 a001 	strb.w	sl, [r2, #1]
 801d0d8:	f109 0601 	add.w	r6, r9, #1
 801d0dc:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d0e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0e4:	f882 9002 	strb.w	r9, [r2, #2]
 801d0e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d0ea:	f10c 0c01 	add.w	ip, ip, #1
 801d0ee:	4414      	add	r4, r2
 801d0f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0f2:	4410      	add	r0, r2
 801d0f4:	e76b      	b.n	801cfce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801d0f6:	4462      	add	r2, ip
 801d0f8:	54af      	strb	r7, [r5, r2]
 801d0fa:	442a      	add	r2, r5
 801d0fc:	f882 a001 	strb.w	sl, [r2, #1]
 801d100:	f882 b002 	strb.w	fp, [r2, #2]
 801d104:	e7f0      	b.n	801d0e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d106:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d10a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d10e:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d112:	e752      	b.n	801cfba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d114:	b005      	add	sp, #20
 801d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d11c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d120:	b087      	sub	sp, #28
 801d122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d126:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d128:	9204      	str	r2, [sp, #16]
 801d12a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d12e:	6860      	ldr	r0, [r4, #4]
 801d130:	9205      	str	r2, [sp, #20]
 801d132:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d136:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d13a:	9101      	str	r1, [sp, #4]
 801d13c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d140:	fb00 2505 	mla	r5, r0, r5, r2
 801d144:	6822      	ldr	r2, [r4, #0]
 801d146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d14a:	4415      	add	r5, r2
 801d14c:	f10e 0201 	add.w	r2, lr, #1
 801d150:	f022 0201 	bic.w	r2, r2, #1
 801d154:	9202      	str	r2, [sp, #8]
 801d156:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d158:	6812      	ldr	r2, [r2, #0]
 801d15a:	9203      	str	r2, [sp, #12]
 801d15c:	9a01      	ldr	r2, [sp, #4]
 801d15e:	2a00      	cmp	r2, #0
 801d160:	dc03      	bgt.n	801d16a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d162:	9a04      	ldr	r2, [sp, #16]
 801d164:	2a00      	cmp	r2, #0
 801d166:	f340 8132 	ble.w	801d3ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d16a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d16c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d172:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d176:	2b00      	cmp	r3, #0
 801d178:	dd0e      	ble.n	801d198 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d17a:	1422      	asrs	r2, r4, #16
 801d17c:	d405      	bmi.n	801d18a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d17e:	4596      	cmp	lr, r2
 801d180:	dd03      	ble.n	801d18a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d182:	1402      	asrs	r2, r0, #16
 801d184:	d401      	bmi.n	801d18a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d186:	4542      	cmp	r2, r8
 801d188:	db07      	blt.n	801d19a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d18a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d18c:	3b01      	subs	r3, #1
 801d18e:	3503      	adds	r5, #3
 801d190:	4414      	add	r4, r2
 801d192:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d194:	4410      	add	r0, r2
 801d196:	e7ee      	b.n	801d176 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801d198:	d010      	beq.n	801d1bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d19a:	1e5a      	subs	r2, r3, #1
 801d19c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d19e:	fb06 4602 	mla	r6, r6, r2, r4
 801d1a2:	1436      	asrs	r6, r6, #16
 801d1a4:	d546      	bpl.n	801d234 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d1a6:	4699      	mov	r9, r3
 801d1a8:	462e      	mov	r6, r5
 801d1aa:	f1b9 0f00 	cmp.w	r9, #0
 801d1ae:	f300 80ac 	bgt.w	801d30a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801d1b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1ba:	441d      	add	r5, r3
 801d1bc:	9b01      	ldr	r3, [sp, #4]
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	f340 8105 	ble.w	801d3ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d1c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d1c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1ce:	eeb0 6a62 	vmov.f32	s12, s5
 801d1d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d1d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1de:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d1e2:	eeb0 6a43 	vmov.f32	s12, s6
 801d1e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1ea:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d1ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d202:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d206:	ee12 2a90 	vmov	r2, s5
 801d20a:	eef0 2a47 	vmov.f32	s5, s14
 801d20e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d212:	ee13 2a10 	vmov	r2, s6
 801d216:	9313      	str	r3, [sp, #76]	; 0x4c
 801d218:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d21a:	eeb0 3a67 	vmov.f32	s6, s15
 801d21e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d222:	9314      	str	r3, [sp, #80]	; 0x50
 801d224:	9b01      	ldr	r3, [sp, #4]
 801d226:	9a04      	ldr	r2, [sp, #16]
 801d228:	3b01      	subs	r3, #1
 801d22a:	9301      	str	r3, [sp, #4]
 801d22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d22e:	bf08      	it	eq
 801d230:	4613      	moveq	r3, r2
 801d232:	e793      	b.n	801d15c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d234:	45b6      	cmp	lr, r6
 801d236:	ddb6      	ble.n	801d1a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d238:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d23a:	fb06 0202 	mla	r2, r6, r2, r0
 801d23e:	1412      	asrs	r2, r2, #16
 801d240:	d4b1      	bmi.n	801d1a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d242:	4542      	cmp	r2, r8
 801d244:	daaf      	bge.n	801d1a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d246:	1cee      	adds	r6, r5, #3
 801d248:	4699      	mov	r9, r3
 801d24a:	f1b9 0f00 	cmp.w	r9, #0
 801d24e:	ddb0      	ble.n	801d1b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d250:	1422      	asrs	r2, r4, #16
 801d252:	9902      	ldr	r1, [sp, #8]
 801d254:	1407      	asrs	r7, r0, #16
 801d256:	fb01 2707 	mla	r7, r1, r7, r2
 801d25a:	9903      	ldr	r1, [sp, #12]
 801d25c:	087a      	lsrs	r2, r7, #1
 801d25e:	5c8a      	ldrb	r2, [r1, r2]
 801d260:	07f9      	lsls	r1, r7, #31
 801d262:	bf54      	ite	pl
 801d264:	f002 020f 	andpl.w	r2, r2, #15
 801d268:	1112      	asrmi	r2, r2, #4
 801d26a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d26e:	b2d2      	uxtb	r2, r2
 801d270:	2a00      	cmp	r2, #0
 801d272:	d042      	beq.n	801d2fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d274:	4957      	ldr	r1, [pc, #348]	; (801d3d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d276:	680f      	ldr	r7, [r1, #0]
 801d278:	9905      	ldr	r1, [sp, #20]
 801d27a:	fa5f fb87 	uxtb.w	fp, r7
 801d27e:	434a      	muls	r2, r1
 801d280:	f102 0c01 	add.w	ip, r2, #1
 801d284:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d288:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d28c:	1212      	asrs	r2, r2, #8
 801d28e:	fa1f fa82 	uxth.w	sl, r2
 801d292:	43d2      	mvns	r2, r2
 801d294:	fb1b fb0a 	smulbb	fp, fp, sl
 801d298:	b2d2      	uxtb	r2, r2
 801d29a:	fb0c bc02 	mla	ip, ip, r2, fp
 801d29e:	fa1f fc8c 	uxth.w	ip, ip
 801d2a2:	f10c 0b01 	add.w	fp, ip, #1
 801d2a6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d2aa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d2ae:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d2b2:	fb1b fb0a 	smulbb	fp, fp, sl
 801d2b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d2ba:	fb17 fa0a 	smulbb	sl, r7, sl
 801d2be:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d2c2:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d2c6:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d2ca:	fb07 aa02 	mla	sl, r7, r2, sl
 801d2ce:	fb0c bc02 	mla	ip, ip, r2, fp
 801d2d2:	fa1f fa8a 	uxth.w	sl, sl
 801d2d6:	fa1f fc8c 	uxth.w	ip, ip
 801d2da:	f10a 0701 	add.w	r7, sl, #1
 801d2de:	f10c 0b01 	add.w	fp, ip, #1
 801d2e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d2e6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d2ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d2ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d2f2:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d2f6:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d2fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d2fc:	3603      	adds	r6, #3
 801d2fe:	f109 39ff 	add.w	r9, r9, #4294967295
 801d302:	4414      	add	r4, r2
 801d304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d306:	4410      	add	r0, r2
 801d308:	e79f      	b.n	801d24a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d30a:	1422      	asrs	r2, r4, #16
 801d30c:	d457      	bmi.n	801d3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d30e:	4596      	cmp	lr, r2
 801d310:	dd55      	ble.n	801d3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d312:	1407      	asrs	r7, r0, #16
 801d314:	d453      	bmi.n	801d3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d316:	4547      	cmp	r7, r8
 801d318:	da51      	bge.n	801d3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d31a:	9902      	ldr	r1, [sp, #8]
 801d31c:	fb07 2701 	mla	r7, r7, r1, r2
 801d320:	9903      	ldr	r1, [sp, #12]
 801d322:	087a      	lsrs	r2, r7, #1
 801d324:	07ff      	lsls	r7, r7, #31
 801d326:	5c8a      	ldrb	r2, [r1, r2]
 801d328:	bf54      	ite	pl
 801d32a:	f002 020f 	andpl.w	r2, r2, #15
 801d32e:	1112      	asrmi	r2, r2, #4
 801d330:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d334:	b2d2      	uxtb	r2, r2
 801d336:	2a00      	cmp	r2, #0
 801d338:	d041      	beq.n	801d3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d33a:	4926      	ldr	r1, [pc, #152]	; (801d3d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d33c:	680f      	ldr	r7, [r1, #0]
 801d33e:	9905      	ldr	r1, [sp, #20]
 801d340:	fa5f fb87 	uxtb.w	fp, r7
 801d344:	434a      	muls	r2, r1
 801d346:	f102 0c01 	add.w	ip, r2, #1
 801d34a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d34e:	f896 c000 	ldrb.w	ip, [r6]
 801d352:	1212      	asrs	r2, r2, #8
 801d354:	fa1f fa82 	uxth.w	sl, r2
 801d358:	43d2      	mvns	r2, r2
 801d35a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d35e:	b2d2      	uxtb	r2, r2
 801d360:	fb0c bc02 	mla	ip, ip, r2, fp
 801d364:	fa1f fc8c 	uxth.w	ip, ip
 801d368:	f10c 0b01 	add.w	fp, ip, #1
 801d36c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d370:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d374:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d378:	fb1b fb0a 	smulbb	fp, fp, sl
 801d37c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d380:	fb17 fa0a 	smulbb	sl, r7, sl
 801d384:	78b7      	ldrb	r7, [r6, #2]
 801d386:	f886 c000 	strb.w	ip, [r6]
 801d38a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d38e:	fb07 aa02 	mla	sl, r7, r2, sl
 801d392:	fb0c bc02 	mla	ip, ip, r2, fp
 801d396:	fa1f fa8a 	uxth.w	sl, sl
 801d39a:	fa1f fc8c 	uxth.w	ip, ip
 801d39e:	f10a 0701 	add.w	r7, sl, #1
 801d3a2:	f10c 0b01 	add.w	fp, ip, #1
 801d3a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d3aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d3ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d3b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d3b6:	f886 a002 	strb.w	sl, [r6, #2]
 801d3ba:	f886 c001 	strb.w	ip, [r6, #1]
 801d3be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3c0:	3603      	adds	r6, #3
 801d3c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801d3c6:	4414      	add	r4, r2
 801d3c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3ca:	4410      	add	r0, r2
 801d3cc:	e6ed      	b.n	801d1aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d3ce:	b007      	add	sp, #28
 801d3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3d4:	2000b398 	.word	0x2000b398

0801d3d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3dc:	b087      	sub	sp, #28
 801d3de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d3e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d3e4:	9205      	str	r2, [sp, #20]
 801d3e6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d3ea:	6860      	ldr	r0, [r4, #4]
 801d3ec:	9202      	str	r2, [sp, #8]
 801d3ee:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d3f2:	9101      	str	r1, [sp, #4]
 801d3f4:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d3f8:	fb00 2606 	mla	r6, r0, r6, r2
 801d3fc:	6822      	ldr	r2, [r4, #0]
 801d3fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d402:	4416      	add	r6, r2
 801d404:	f108 0201 	add.w	r2, r8, #1
 801d408:	f022 0201 	bic.w	r2, r2, #1
 801d40c:	9203      	str	r2, [sp, #12]
 801d40e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d410:	6812      	ldr	r2, [r2, #0]
 801d412:	9204      	str	r2, [sp, #16]
 801d414:	9a01      	ldr	r2, [sp, #4]
 801d416:	2a00      	cmp	r2, #0
 801d418:	dc03      	bgt.n	801d422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d41a:	9a05      	ldr	r2, [sp, #20]
 801d41c:	2a00      	cmp	r2, #0
 801d41e:	f340 813a 	ble.w	801d696 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d422:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d424:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d428:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d42a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d42e:	2b00      	cmp	r3, #0
 801d430:	dd0f      	ble.n	801d452 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d432:	142a      	asrs	r2, r5, #16
 801d434:	d406      	bmi.n	801d444 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d436:	4590      	cmp	r8, r2
 801d438:	dd04      	ble.n	801d444 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d43a:	1422      	asrs	r2, r4, #16
 801d43c:	d402      	bmi.n	801d444 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d43e:	9802      	ldr	r0, [sp, #8]
 801d440:	4282      	cmp	r2, r0
 801d442:	db07      	blt.n	801d454 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d444:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d446:	3b01      	subs	r3, #1
 801d448:	3603      	adds	r6, #3
 801d44a:	4415      	add	r5, r2
 801d44c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d44e:	4414      	add	r4, r2
 801d450:	e7ed      	b.n	801d42e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d452:	d073      	beq.n	801d53c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d454:	1e5a      	subs	r2, r3, #1
 801d456:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d458:	fb00 5002 	mla	r0, r0, r2, r5
 801d45c:	1400      	asrs	r0, r0, #16
 801d45e:	d464      	bmi.n	801d52a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d460:	4580      	cmp	r8, r0
 801d462:	dd62      	ble.n	801d52a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d464:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d466:	fb00 4202 	mla	r2, r0, r2, r4
 801d46a:	1412      	asrs	r2, r2, #16
 801d46c:	d45d      	bmi.n	801d52a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d46e:	9802      	ldr	r0, [sp, #8]
 801d470:	4282      	cmp	r2, r0
 801d472:	da5a      	bge.n	801d52a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d474:	1cf0      	adds	r0, r6, #3
 801d476:	469a      	mov	sl, r3
 801d478:	f1ba 0f00 	cmp.w	sl, #0
 801d47c:	dd59      	ble.n	801d532 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d47e:	142a      	asrs	r2, r5, #16
 801d480:	9903      	ldr	r1, [sp, #12]
 801d482:	1427      	asrs	r7, r4, #16
 801d484:	fb01 2707 	mla	r7, r1, r7, r2
 801d488:	9904      	ldr	r1, [sp, #16]
 801d48a:	087a      	lsrs	r2, r7, #1
 801d48c:	5c8a      	ldrb	r2, [r1, r2]
 801d48e:	07f9      	lsls	r1, r7, #31
 801d490:	bf54      	ite	pl
 801d492:	f002 020f 	andpl.w	r2, r2, #15
 801d496:	1112      	asrmi	r2, r2, #4
 801d498:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d49c:	b2d2      	uxtb	r2, r2
 801d49e:	2a00      	cmp	r2, #0
 801d4a0:	d03b      	beq.n	801d51a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d4a2:	497e      	ldr	r1, [pc, #504]	; (801d69c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d4a4:	2aff      	cmp	r2, #255	; 0xff
 801d4a6:	680f      	ldr	r7, [r1, #0]
 801d4a8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d4ac:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d4b0:	b2ff      	uxtb	r7, r7
 801d4b2:	f000 80e9 	beq.w	801d688 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d4b6:	fa1f fe82 	uxth.w	lr, r2
 801d4ba:	43d2      	mvns	r2, r2
 801d4bc:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d4c0:	fb17 f70e 	smulbb	r7, r7, lr
 801d4c4:	b2d2      	uxtb	r2, r2
 801d4c6:	fb19 f90e 	smulbb	r9, r9, lr
 801d4ca:	fb0c 7702 	mla	r7, ip, r2, r7
 801d4ce:	fb1b fe0e 	smulbb	lr, fp, lr
 801d4d2:	b2bf      	uxth	r7, r7
 801d4d4:	f107 0c01 	add.w	ip, r7, #1
 801d4d8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d4dc:	123f      	asrs	r7, r7, #8
 801d4de:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d4e2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d4e6:	fb07 9902 	mla	r9, r7, r2, r9
 801d4ea:	fa1f f989 	uxth.w	r9, r9
 801d4ee:	f109 0701 	add.w	r7, r9, #1
 801d4f2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d4f6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d4fa:	fb07 ee02 	mla	lr, r7, r2, lr
 801d4fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d502:	fa1f fe8e 	uxth.w	lr, lr
 801d506:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d50a:	f10e 0201 	add.w	r2, lr, #1
 801d50e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d512:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d516:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d51a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d51c:	3003      	adds	r0, #3
 801d51e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d522:	4415      	add	r5, r2
 801d524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d526:	4414      	add	r4, r2
 801d528:	e7a6      	b.n	801d478 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d52a:	2700      	movs	r7, #0
 801d52c:	1bda      	subs	r2, r3, r7
 801d52e:	2a00      	cmp	r2, #0
 801d530:	dc40      	bgt.n	801d5b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d532:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d53a:	441e      	add	r6, r3
 801d53c:	9b01      	ldr	r3, [sp, #4]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	f340 80a9 	ble.w	801d696 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d544:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d54a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d54e:	eeb0 6a62 	vmov.f32	s12, s5
 801d552:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d556:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d55a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d55e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d562:	eeb0 6a43 	vmov.f32	s12, s6
 801d566:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d56a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d56e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d572:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d576:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d57a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d57e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d582:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d586:	ee12 2a90 	vmov	r2, s5
 801d58a:	eef0 2a47 	vmov.f32	s5, s14
 801d58e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d592:	ee13 2a10 	vmov	r2, s6
 801d596:	9313      	str	r3, [sp, #76]	; 0x4c
 801d598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d59a:	eeb0 3a67 	vmov.f32	s6, s15
 801d59e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5a2:	9314      	str	r3, [sp, #80]	; 0x50
 801d5a4:	9b01      	ldr	r3, [sp, #4]
 801d5a6:	9a05      	ldr	r2, [sp, #20]
 801d5a8:	3b01      	subs	r3, #1
 801d5aa:	9301      	str	r3, [sp, #4]
 801d5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5ae:	bf08      	it	eq
 801d5b0:	4613      	moveq	r3, r2
 801d5b2:	e72f      	b.n	801d414 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d5b4:	142a      	asrs	r2, r5, #16
 801d5b6:	d458      	bmi.n	801d66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d5b8:	4590      	cmp	r8, r2
 801d5ba:	dd56      	ble.n	801d66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d5bc:	1420      	asrs	r0, r4, #16
 801d5be:	d454      	bmi.n	801d66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d5c0:	9902      	ldr	r1, [sp, #8]
 801d5c2:	4288      	cmp	r0, r1
 801d5c4:	da51      	bge.n	801d66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d5c6:	9903      	ldr	r1, [sp, #12]
 801d5c8:	fb00 2001 	mla	r0, r0, r1, r2
 801d5cc:	9904      	ldr	r1, [sp, #16]
 801d5ce:	0842      	lsrs	r2, r0, #1
 801d5d0:	07c0      	lsls	r0, r0, #31
 801d5d2:	5c8a      	ldrb	r2, [r1, r2]
 801d5d4:	bf54      	ite	pl
 801d5d6:	f002 020f 	andpl.w	r2, r2, #15
 801d5da:	1112      	asrmi	r2, r2, #4
 801d5dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d5e0:	b2d2      	uxtb	r2, r2
 801d5e2:	2a00      	cmp	r2, #0
 801d5e4:	d041      	beq.n	801d66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d5e6:	492d      	ldr	r1, [pc, #180]	; (801d69c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d5e8:	2aff      	cmp	r2, #255	; 0xff
 801d5ea:	6808      	ldr	r0, [r1, #0]
 801d5ec:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d5f0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d5f4:	fa5f fc80 	uxtb.w	ip, r0
 801d5f8:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d5fc:	d03b      	beq.n	801d676 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d5fe:	fa1f f982 	uxth.w	r9, r2
 801d602:	4438      	add	r0, r7
 801d604:	43d2      	mvns	r2, r2
 801d606:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d60a:	fb1c fc09 	smulbb	ip, ip, r9
 801d60e:	fb1a fa09 	smulbb	sl, sl, r9
 801d612:	b2d2      	uxtb	r2, r2
 801d614:	fb1b f909 	smulbb	r9, fp, r9
 801d618:	fb0e cc02 	mla	ip, lr, r2, ip
 801d61c:	fa1f fc8c 	uxth.w	ip, ip
 801d620:	f10c 0e01 	add.w	lr, ip, #1
 801d624:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d628:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d62c:	f806 c000 	strb.w	ip, [r6, r0]
 801d630:	4430      	add	r0, r6
 801d632:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d636:	fb0c aa02 	mla	sl, ip, r2, sl
 801d63a:	fa1f fa8a 	uxth.w	sl, sl
 801d63e:	f10a 0c01 	add.w	ip, sl, #1
 801d642:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d646:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d64a:	fb0c 9902 	mla	r9, ip, r2, r9
 801d64e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d652:	fa1f f989 	uxth.w	r9, r9
 801d656:	f880 a001 	strb.w	sl, [r0, #1]
 801d65a:	f109 0201 	add.w	r2, r9, #1
 801d65e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d662:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d666:	f880 9002 	strb.w	r9, [r0, #2]
 801d66a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d66c:	3701      	adds	r7, #1
 801d66e:	4415      	add	r5, r2
 801d670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d672:	4414      	add	r4, r2
 801d674:	e75a      	b.n	801d52c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d676:	4438      	add	r0, r7
 801d678:	f806 c000 	strb.w	ip, [r6, r0]
 801d67c:	4430      	add	r0, r6
 801d67e:	f880 a001 	strb.w	sl, [r0, #1]
 801d682:	f880 b002 	strb.w	fp, [r0, #2]
 801d686:	e7f0      	b.n	801d66a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d688:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d68c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d690:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d694:	e741      	b.n	801d51a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d696:	b007      	add	sp, #28
 801d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d69c:	2000b398 	.word	0x2000b398

0801d6a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d6a0:	4770      	bx	lr

0801d6a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d6a2:	4770      	bx	lr

0801d6a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d6a4:	4770      	bx	lr

0801d6a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d6a6:	4770      	bx	lr

0801d6a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d6a8:	4770      	bx	lr

0801d6aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d6aa:	4770      	bx	lr

0801d6ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d6ac:	4770      	bx	lr

0801d6ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d6ae:	4770      	bx	lr

0801d6b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d6b0:	4770      	bx	lr

0801d6b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d6b2:	4770      	bx	lr

0801d6b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d6b4:	4770      	bx	lr

0801d6b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d6b6:	4770      	bx	lr

0801d6b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d6b8:	4770      	bx	lr

0801d6ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d6ba:	4770      	bx	lr

0801d6bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d6bc:	4770      	bx	lr

0801d6be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d6be:	4770      	bx	lr

0801d6c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d6c0:	4770      	bx	lr

0801d6c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d6c2:	4770      	bx	lr

0801d6c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d6c4:	4770      	bx	lr

0801d6c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d6c6:	4770      	bx	lr

0801d6c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d6c8:	2bff      	cmp	r3, #255	; 0xff
 801d6ca:	b508      	push	{r3, lr}
 801d6cc:	d04f      	beq.n	801d76e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d6ce:	2a2c      	cmp	r2, #44	; 0x2c
 801d6d0:	d032      	beq.n	801d738 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d6d2:	d80f      	bhi.n	801d6f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d6d4:	2a08      	cmp	r2, #8
 801d6d6:	d046      	beq.n	801d766 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d6d8:	d805      	bhi.n	801d6e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d6da:	2a04      	cmp	r2, #4
 801d6dc:	d041      	beq.n	801d762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d6de:	2a05      	cmp	r2, #5
 801d6e0:	d03d      	beq.n	801d75e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d6e2:	2000      	movs	r0, #0
 801d6e4:	e027      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6e6:	2a0a      	cmp	r2, #10
 801d6e8:	d03d      	beq.n	801d766 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d6ea:	d301      	bcc.n	801d6f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d6ec:	2a0b      	cmp	r2, #11
 801d6ee:	d1f8      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d6f2:	e020      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6f4:	2a30      	cmp	r2, #48	; 0x30
 801d6f6:	d038      	beq.n	801d76a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d6f8:	d808      	bhi.n	801d70c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d6fa:	2a2e      	cmp	r2, #46	; 0x2e
 801d6fc:	684b      	ldr	r3, [r1, #4]
 801d6fe:	d029      	beq.n	801d754 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d700:	d90b      	bls.n	801d71a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d702:	781b      	ldrb	r3, [r3, #0]
 801d704:	2b00      	cmp	r3, #0
 801d706:	d1ec      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d708:	6a00      	ldr	r0, [r0, #32]
 801d70a:	e014      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d70c:	2a32      	cmp	r2, #50	; 0x32
 801d70e:	d02c      	beq.n	801d76a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d710:	d301      	bcc.n	801d716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d712:	2a33      	cmp	r2, #51	; 0x33
 801d714:	d1e5      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d716:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d718:	e00d      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d71a:	781b      	ldrb	r3, [r3, #0]
 801d71c:	2b01      	cmp	r3, #1
 801d71e:	d009      	beq.n	801d734 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d720:	d3f2      	bcc.n	801d708 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d722:	2b02      	cmp	r3, #2
 801d724:	d1dd      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d726:	4b39      	ldr	r3, [pc, #228]	; (801d80c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d728:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 801d72c:	4a38      	ldr	r2, [pc, #224]	; (801d810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d72e:	4839      	ldr	r0, [pc, #228]	; (801d814 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d730:	f008 f874 	bl	802581c <__assert_func>
 801d734:	6900      	ldr	r0, [r0, #16]
 801d736:	bd08      	pop	{r3, pc}
 801d738:	684b      	ldr	r3, [r1, #4]
 801d73a:	781b      	ldrb	r3, [r3, #0]
 801d73c:	2b01      	cmp	r3, #1
 801d73e:	d007      	beq.n	801d750 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d740:	d30b      	bcc.n	801d75a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d742:	2b02      	cmp	r3, #2
 801d744:	d1cd      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d746:	4b31      	ldr	r3, [pc, #196]	; (801d80c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d748:	f44f 6181 	mov.w	r1, #1032	; 0x408
 801d74c:	4a30      	ldr	r2, [pc, #192]	; (801d810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d74e:	e7ee      	b.n	801d72e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d750:	6880      	ldr	r0, [r0, #8]
 801d752:	e7f0      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d754:	781b      	ldrb	r3, [r3, #0]
 801d756:	2b00      	cmp	r3, #0
 801d758:	d1c3      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d75a:	6980      	ldr	r0, [r0, #24]
 801d75c:	e7eb      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d75e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d760:	e7e9      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d762:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d764:	e7e7      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d766:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d768:	e7e5      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d76a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d76c:	e7e3      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d76e:	2a2c      	cmp	r2, #44	; 0x2c
 801d770:	d030      	beq.n	801d7d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d772:	d80f      	bhi.n	801d794 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d774:	2a08      	cmp	r2, #8
 801d776:	d044      	beq.n	801d802 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d778:	d805      	bhi.n	801d786 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d77a:	2a04      	cmp	r2, #4
 801d77c:	d03f      	beq.n	801d7fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d77e:	2a05      	cmp	r2, #5
 801d780:	d1af      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d782:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d784:	e7d7      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d786:	2a0a      	cmp	r2, #10
 801d788:	d03b      	beq.n	801d802 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d78a:	d301      	bcc.n	801d790 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d78c:	2a0b      	cmp	r2, #11
 801d78e:	d1a8      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d790:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d792:	e7d0      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d794:	2a30      	cmp	r2, #48	; 0x30
 801d796:	d036      	beq.n	801d806 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d798:	d808      	bhi.n	801d7ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d79a:	2a2e      	cmp	r2, #46	; 0x2e
 801d79c:	684b      	ldr	r3, [r1, #4]
 801d79e:	d028      	beq.n	801d7f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d7a0:	d90b      	bls.n	801d7ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d7a2:	781b      	ldrb	r3, [r3, #0]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d19c      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d7a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d7aa:	e7c4      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7ac:	2a32      	cmp	r2, #50	; 0x32
 801d7ae:	d02a      	beq.n	801d806 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d7b0:	d301      	bcc.n	801d7b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d7b2:	2a33      	cmp	r2, #51	; 0x33
 801d7b4:	d195      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d7b6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d7b8:	e7bd      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7ba:	781b      	ldrb	r3, [r3, #0]
 801d7bc:	2b01      	cmp	r3, #1
 801d7be:	d007      	beq.n	801d7d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d7c0:	d3f2      	bcc.n	801d7a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d7c2:	2b02      	cmp	r3, #2
 801d7c4:	d18d      	bne.n	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d7c6:	4b11      	ldr	r3, [pc, #68]	; (801d80c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d7c8:	f240 4139 	movw	r1, #1081	; 0x439
 801d7cc:	4a10      	ldr	r2, [pc, #64]	; (801d810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d7ce:	e7ae      	b.n	801d72e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d7d0:	6940      	ldr	r0, [r0, #20]
 801d7d2:	e7b0      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7d4:	684b      	ldr	r3, [r1, #4]
 801d7d6:	781b      	ldrb	r3, [r3, #0]
 801d7d8:	2b01      	cmp	r3, #1
 801d7da:	d008      	beq.n	801d7ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d7dc:	d30d      	bcc.n	801d7fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d7de:	2b02      	cmp	r3, #2
 801d7e0:	f47f af7f 	bne.w	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d7e4:	4b09      	ldr	r3, [pc, #36]	; (801d80c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d7e6:	f240 4145 	movw	r1, #1093	; 0x445
 801d7ea:	4a09      	ldr	r2, [pc, #36]	; (801d810 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d7ec:	e79f      	b.n	801d72e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d7ee:	68c0      	ldr	r0, [r0, #12]
 801d7f0:	e7a1      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7f2:	781b      	ldrb	r3, [r3, #0]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	f47f af74 	bne.w	801d6e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d7fa:	69c0      	ldr	r0, [r0, #28]
 801d7fc:	e79b      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d800:	e799      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d802:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d804:	e797      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d806:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d808:	e795      	b.n	801d736 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d80a:	bf00      	nop
 801d80c:	0802af1f 	.word	0x0802af1f
 801d810:	0802b6cf 	.word	0x0802b6cf
 801d814:	0802af6b 	.word	0x0802af6b

0801d818 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d818:	b508      	push	{r3, lr}
 801d81a:	4b06      	ldr	r3, [pc, #24]	; (801d834 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d81c:	8818      	ldrh	r0, [r3, #0]
 801d81e:	b928      	cbnz	r0, 801d82c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d820:	4b05      	ldr	r3, [pc, #20]	; (801d838 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d822:	2155      	movs	r1, #85	; 0x55
 801d824:	4a05      	ldr	r2, [pc, #20]	; (801d83c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d826:	4806      	ldr	r0, [pc, #24]	; (801d840 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d828:	f007 fff8 	bl	802581c <__assert_func>
 801d82c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d830:	b280      	uxth	r0, r0
 801d832:	bd08      	pop	{r3, pc}
 801d834:	2000b36a 	.word	0x2000b36a
 801d838:	0802b1b8 	.word	0x0802b1b8
 801d83c:	0802b694 	.word	0x0802b694
 801d840:	0802b1fa 	.word	0x0802b1fa

0801d844 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d848:	4616      	mov	r6, r2
 801d84a:	b087      	sub	sp, #28
 801d84c:	461f      	mov	r7, r3
 801d84e:	b34b      	cbz	r3, 801d8a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d850:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d854:	2b00      	cmp	r3, #0
 801d856:	dd25      	ble.n	801d8a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d858:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	dd21      	ble.n	801d8a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d860:	6808      	ldr	r0, [r1, #0]
 801d862:	ab04      	add	r3, sp, #16
 801d864:	6849      	ldr	r1, [r1, #4]
 801d866:	4c5a      	ldr	r4, [pc, #360]	; (801d9d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d868:	c303      	stmia	r3!, {r0, r1}
 801d86a:	a804      	add	r0, sp, #16
 801d86c:	f7fb fccc 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d870:	6820      	ldr	r0, [r4, #0]
 801d872:	6803      	ldr	r3, [r0, #0]
 801d874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d876:	4798      	blx	r3
 801d878:	2fff      	cmp	r7, #255	; 0xff
 801d87a:	4623      	mov	r3, r4
 801d87c:	d015      	beq.n	801d8aa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d87e:	f010 0f08 	tst.w	r0, #8
 801d882:	d015      	beq.n	801d8b0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801d884:	6818      	ldr	r0, [r3, #0]
 801d886:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d88a:	6801      	ldr	r1, [r0, #0]
 801d88c:	9401      	str	r4, [sp, #4]
 801d88e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d892:	9702      	str	r7, [sp, #8]
 801d894:	9400      	str	r4, [sp, #0]
 801d896:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d89a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801d89c:	4631      	mov	r1, r6
 801d89e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d8a2:	47a0      	blx	r4
 801d8a4:	b007      	add	sp, #28
 801d8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8aa:	f010 0f02 	tst.w	r0, #2
 801d8ae:	e7e8      	b.n	801d882 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801d8b0:	6818      	ldr	r0, [r3, #0]
 801d8b2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d8b6:	6803      	ldr	r3, [r0, #0]
 801d8b8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d8bc:	6a1b      	ldr	r3, [r3, #32]
 801d8be:	4798      	blx	r3
 801d8c0:	4944      	ldr	r1, [pc, #272]	; (801d9d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801d8c2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d8c6:	2fff      	cmp	r7, #255	; 0xff
 801d8c8:	f8b1 c000 	ldrh.w	ip, [r1]
 801d8cc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d8d0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d8d4:	4688      	mov	r8, r1
 801d8d6:	fb0c 2303 	mla	r3, ip, r3, r2
 801d8da:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d8de:	b2f2      	uxtb	r2, r6
 801d8e0:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d8e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8e8:	4418      	add	r0, r3
 801d8ea:	d112      	bne.n	801d912 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801d8ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d8f0:	2100      	movs	r1, #0
 801d8f2:	42a9      	cmp	r1, r5
 801d8f4:	da66      	bge.n	801d9c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801d8f6:	4603      	mov	r3, r0
 801d8f8:	2700      	movs	r7, #0
 801d8fa:	42a7      	cmp	r7, r4
 801d8fc:	f103 0303 	add.w	r3, r3, #3
 801d900:	da57      	bge.n	801d9b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801d902:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d906:	3701      	adds	r7, #1
 801d908:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d90c:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d910:	e7f3      	b.n	801d8fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801d912:	b2bb      	uxth	r3, r7
 801d914:	f04f 0800 	mov.w	r8, #0
 801d918:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d91c:	fb0c fc03 	mul.w	ip, ip, r3
 801d920:	fb0e fe03 	mul.w	lr, lr, r3
 801d924:	435a      	muls	r2, r3
 801d926:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d92a:	460f      	mov	r7, r1
 801d92c:	b29b      	uxth	r3, r3
 801d92e:	45a8      	cmp	r8, r5
 801d930:	da48      	bge.n	801d9c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801d932:	4601      	mov	r1, r0
 801d934:	f04f 0a00 	mov.w	sl, #0
 801d938:	45a2      	cmp	sl, r4
 801d93a:	f101 0103 	add.w	r1, r1, #3
 801d93e:	da2f      	bge.n	801d9a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801d940:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d944:	f10a 0a01 	add.w	sl, sl, #1
 801d948:	fb19 f903 	smulbb	r9, r9, r3
 801d94c:	4491      	add	r9, r2
 801d94e:	fa1f f989 	uxth.w	r9, r9
 801d952:	f109 0b01 	add.w	fp, r9, #1
 801d956:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d95a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d95e:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d962:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d966:	fb19 f903 	smulbb	r9, r9, r3
 801d96a:	44f1      	add	r9, lr
 801d96c:	fa1f f989 	uxth.w	r9, r9
 801d970:	f109 0b01 	add.w	fp, r9, #1
 801d974:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d978:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d97c:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d980:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d984:	fb19 f903 	smulbb	r9, r9, r3
 801d988:	44e1      	add	r9, ip
 801d98a:	fa1f f989 	uxth.w	r9, r9
 801d98e:	f109 0b01 	add.w	fp, r9, #1
 801d992:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d996:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d99a:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d99e:	e7cb      	b.n	801d938 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801d9a0:	8839      	ldrh	r1, [r7, #0]
 801d9a2:	f108 0801 	add.w	r8, r8, #1
 801d9a6:	1b09      	subs	r1, r1, r4
 801d9a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d9ac:	4431      	add	r1, r6
 801d9ae:	4408      	add	r0, r1
 801d9b0:	e7bd      	b.n	801d92e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801d9b2:	f8b8 3000 	ldrh.w	r3, [r8]
 801d9b6:	3101      	adds	r1, #1
 801d9b8:	1b1b      	subs	r3, r3, r4
 801d9ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9be:	4433      	add	r3, r6
 801d9c0:	4418      	add	r0, r3
 801d9c2:	e796      	b.n	801d8f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801d9c4:	4b02      	ldr	r3, [pc, #8]	; (801d9d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d9c6:	6818      	ldr	r0, [r3, #0]
 801d9c8:	6803      	ldr	r3, [r0, #0]
 801d9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9cc:	4798      	blx	r3
 801d9ce:	e769      	b.n	801d8a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d9d0:	2000b370 	.word	0x2000b370
 801d9d4:	2000b36a 	.word	0x2000b36a

0801d9d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9dc:	b08d      	sub	sp, #52	; 0x34
 801d9de:	460c      	mov	r4, r1
 801d9e0:	4617      	mov	r7, r2
 801d9e2:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d9e6:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d9ea:	2e00      	cmp	r6, #0
 801d9ec:	d04a      	beq.n	801da84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d9ee:	6810      	ldr	r0, [r2, #0]
 801d9f0:	ad08      	add	r5, sp, #32
 801d9f2:	6851      	ldr	r1, [r2, #4]
 801d9f4:	c503      	stmia	r5!, {r0, r1}
 801d9f6:	6818      	ldr	r0, [r3, #0]
 801d9f8:	ad0a      	add	r5, sp, #40	; 0x28
 801d9fa:	6859      	ldr	r1, [r3, #4]
 801d9fc:	c503      	stmia	r5!, {r0, r1}
 801d9fe:	a808      	add	r0, sp, #32
 801da00:	f7fb fc02 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da04:	4639      	mov	r1, r7
 801da06:	a80a      	add	r0, sp, #40	; 0x28
 801da08:	4f59      	ldr	r7, [pc, #356]	; (801db70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801da0a:	f7fb fbe5 	bl	80191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da0e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801da12:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801da16:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801da1a:	6838      	ldr	r0, [r7, #0]
 801da1c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da20:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801da24:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801da28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801da2c:	440c      	add	r4, r1
 801da2e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801da32:	440a      	add	r2, r1
 801da34:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801da38:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801da3c:	4413      	add	r3, r2
 801da3e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801da42:	6803      	ldr	r3, [r0, #0]
 801da44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da46:	4798      	blx	r3
 801da48:	2eff      	cmp	r6, #255	; 0xff
 801da4a:	f000 8089 	beq.w	801db60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801da4e:	0743      	lsls	r3, r0, #29
 801da50:	d405      	bmi.n	801da5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801da52:	f1b9 0f00 	cmp.w	r9, #0
 801da56:	d018      	beq.n	801da8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801da58:	f010 0f10 	tst.w	r0, #16
 801da5c:	d015      	beq.n	801da8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801da5e:	6838      	ldr	r0, [r7, #0]
 801da60:	b2ad      	uxth	r5, r5
 801da62:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801da66:	6801      	ldr	r1, [r0, #0]
 801da68:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801da6c:	9500      	str	r5, [sp, #0]
 801da6e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801da72:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801da76:	9602      	str	r6, [sp, #8]
 801da78:	fa1f f688 	uxth.w	r6, r8
 801da7c:	9601      	str	r6, [sp, #4]
 801da7e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801da80:	4621      	mov	r1, r4
 801da82:	47a8      	blx	r5
 801da84:	b00d      	add	sp, #52	; 0x34
 801da86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da8a:	6838      	ldr	r0, [r7, #0]
 801da8c:	6803      	ldr	r3, [r0, #0]
 801da8e:	6a1b      	ldr	r3, [r3, #32]
 801da90:	4798      	blx	r3
 801da92:	4a38      	ldr	r2, [pc, #224]	; (801db74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801da94:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801da98:	2eff      	cmp	r6, #255	; 0xff
 801da9a:	8813      	ldrh	r3, [r2, #0]
 801da9c:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801daa0:	fb0c 1303 	mla	r3, ip, r3, r1
 801daa4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801daa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801daac:	4418      	add	r0, r3
 801daae:	d032      	beq.n	801db16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801dab0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801dab4:	f04f 0c00 	mov.w	ip, #0
 801dab8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801dabc:	9306      	str	r3, [sp, #24]
 801dabe:	45c4      	cmp	ip, r8
 801dac0:	da49      	bge.n	801db56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dac2:	4686      	mov	lr, r0
 801dac4:	46a1      	mov	r9, r4
 801dac6:	eba9 0304 	sub.w	r3, r9, r4
 801daca:	428b      	cmp	r3, r1
 801dacc:	da13      	bge.n	801daf6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801dace:	f819 3b01 	ldrb.w	r3, [r9], #1
 801dad2:	f89e b000 	ldrb.w	fp, [lr]
 801dad6:	9307      	str	r3, [sp, #28]
 801dad8:	9b06      	ldr	r3, [sp, #24]
 801dada:	fb1b fb03 	smulbb	fp, fp, r3
 801dade:	9b07      	ldr	r3, [sp, #28]
 801dae0:	fb03 b306 	mla	r3, r3, r6, fp
 801dae4:	b29b      	uxth	r3, r3
 801dae6:	f103 0b01 	add.w	fp, r3, #1
 801daea:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801daee:	121b      	asrs	r3, r3, #8
 801daf0:	f80e 3b01 	strb.w	r3, [lr], #1
 801daf4:	e7e7      	b.n	801dac6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801daf6:	8813      	ldrh	r3, [r2, #0]
 801daf8:	f10c 0c01 	add.w	ip, ip, #1
 801dafc:	1b5b      	subs	r3, r3, r5
 801dafe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db02:	4453      	add	r3, sl
 801db04:	4418      	add	r0, r3
 801db06:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801db0a:	1b5b      	subs	r3, r3, r5
 801db0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db10:	4453      	add	r3, sl
 801db12:	441c      	add	r4, r3
 801db14:	e7d3      	b.n	801dabe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801db16:	2600      	movs	r6, #0
 801db18:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801db1c:	4546      	cmp	r6, r8
 801db1e:	da1a      	bge.n	801db56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801db20:	f100 3eff 	add.w	lr, r0, #4294967295
 801db24:	4623      	mov	r3, r4
 801db26:	eba3 0904 	sub.w	r9, r3, r4
 801db2a:	4589      	cmp	r9, r1
 801db2c:	da04      	bge.n	801db38 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801db2e:	f813 9b01 	ldrb.w	r9, [r3], #1
 801db32:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801db36:	e7f6      	b.n	801db26 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801db38:	8813      	ldrh	r3, [r2, #0]
 801db3a:	3601      	adds	r6, #1
 801db3c:	1b5b      	subs	r3, r3, r5
 801db3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db42:	4463      	add	r3, ip
 801db44:	4418      	add	r0, r3
 801db46:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801db4a:	1b5b      	subs	r3, r3, r5
 801db4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db50:	4463      	add	r3, ip
 801db52:	441c      	add	r4, r3
 801db54:	e7e2      	b.n	801db1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801db56:	6838      	ldr	r0, [r7, #0]
 801db58:	6803      	ldr	r3, [r0, #0]
 801db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db5c:	4798      	blx	r3
 801db5e:	e791      	b.n	801da84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801db60:	f1b9 0f00 	cmp.w	r9, #0
 801db64:	f47f af78 	bne.w	801da58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801db68:	f010 0f01 	tst.w	r0, #1
 801db6c:	e776      	b.n	801da5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801db6e:	bf00      	nop
 801db70:	2000b370 	.word	0x2000b370
 801db74:	2000b36a 	.word	0x2000b36a

0801db78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801db78:	b510      	push	{r4, lr}
 801db7a:	4604      	mov	r4, r0
 801db7c:	2104      	movs	r1, #4
 801db7e:	f007 fe21 	bl	80257c4 <_ZdlPvj>
 801db82:	4620      	mov	r0, r4
 801db84:	bd10      	pop	{r4, pc}

0801db86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801db86:	b510      	push	{r4, lr}
 801db88:	4604      	mov	r4, r0
 801db8a:	2104      	movs	r1, #4
 801db8c:	f007 fe1a 	bl	80257c4 <_ZdlPvj>
 801db90:	4620      	mov	r0, r4
 801db92:	bd10      	pop	{r4, pc}

0801db94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801db94:	b510      	push	{r4, lr}
 801db96:	4604      	mov	r4, r0
 801db98:	2104      	movs	r1, #4
 801db9a:	f007 fe13 	bl	80257c4 <_ZdlPvj>
 801db9e:	4620      	mov	r0, r4
 801dba0:	bd10      	pop	{r4, pc}

0801dba2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dba2:	b510      	push	{r4, lr}
 801dba4:	4604      	mov	r4, r0
 801dba6:	2104      	movs	r1, #4
 801dba8:	f007 fe0c 	bl	80257c4 <_ZdlPvj>
 801dbac:	4620      	mov	r0, r4
 801dbae:	bd10      	pop	{r4, pc}

0801dbb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dbb0:	b510      	push	{r4, lr}
 801dbb2:	4604      	mov	r4, r0
 801dbb4:	2104      	movs	r1, #4
 801dbb6:	f007 fe05 	bl	80257c4 <_ZdlPvj>
 801dbba:	4620      	mov	r0, r4
 801dbbc:	bd10      	pop	{r4, pc}

0801dbbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dbbe:	b510      	push	{r4, lr}
 801dbc0:	4604      	mov	r4, r0
 801dbc2:	2104      	movs	r1, #4
 801dbc4:	f007 fdfe 	bl	80257c4 <_ZdlPvj>
 801dbc8:	4620      	mov	r0, r4
 801dbca:	bd10      	pop	{r4, pc}

0801dbcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dbcc:	b510      	push	{r4, lr}
 801dbce:	4604      	mov	r4, r0
 801dbd0:	2104      	movs	r1, #4
 801dbd2:	f007 fdf7 	bl	80257c4 <_ZdlPvj>
 801dbd6:	4620      	mov	r0, r4
 801dbd8:	bd10      	pop	{r4, pc}

0801dbda <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dbda:	b510      	push	{r4, lr}
 801dbdc:	4604      	mov	r4, r0
 801dbde:	2104      	movs	r1, #4
 801dbe0:	f007 fdf0 	bl	80257c4 <_ZdlPvj>
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	bd10      	pop	{r4, pc}

0801dbe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dbe8:	b510      	push	{r4, lr}
 801dbea:	4604      	mov	r4, r0
 801dbec:	2104      	movs	r1, #4
 801dbee:	f007 fde9 	bl	80257c4 <_ZdlPvj>
 801dbf2:	4620      	mov	r0, r4
 801dbf4:	bd10      	pop	{r4, pc}

0801dbf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dbf6:	b510      	push	{r4, lr}
 801dbf8:	4604      	mov	r4, r0
 801dbfa:	2104      	movs	r1, #4
 801dbfc:	f007 fde2 	bl	80257c4 <_ZdlPvj>
 801dc00:	4620      	mov	r0, r4
 801dc02:	bd10      	pop	{r4, pc}

0801dc04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dc04:	b510      	push	{r4, lr}
 801dc06:	4604      	mov	r4, r0
 801dc08:	2104      	movs	r1, #4
 801dc0a:	f007 fddb 	bl	80257c4 <_ZdlPvj>
 801dc0e:	4620      	mov	r0, r4
 801dc10:	bd10      	pop	{r4, pc}

0801dc12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dc12:	b510      	push	{r4, lr}
 801dc14:	4604      	mov	r4, r0
 801dc16:	2104      	movs	r1, #4
 801dc18:	f007 fdd4 	bl	80257c4 <_ZdlPvj>
 801dc1c:	4620      	mov	r0, r4
 801dc1e:	bd10      	pop	{r4, pc}

0801dc20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dc20:	b510      	push	{r4, lr}
 801dc22:	4604      	mov	r4, r0
 801dc24:	2104      	movs	r1, #4
 801dc26:	f007 fdcd 	bl	80257c4 <_ZdlPvj>
 801dc2a:	4620      	mov	r0, r4
 801dc2c:	bd10      	pop	{r4, pc}

0801dc2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dc2e:	b510      	push	{r4, lr}
 801dc30:	4604      	mov	r4, r0
 801dc32:	2104      	movs	r1, #4
 801dc34:	f007 fdc6 	bl	80257c4 <_ZdlPvj>
 801dc38:	4620      	mov	r0, r4
 801dc3a:	bd10      	pop	{r4, pc}

0801dc3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dc3c:	b510      	push	{r4, lr}
 801dc3e:	4604      	mov	r4, r0
 801dc40:	2104      	movs	r1, #4
 801dc42:	f007 fdbf 	bl	80257c4 <_ZdlPvj>
 801dc46:	4620      	mov	r0, r4
 801dc48:	bd10      	pop	{r4, pc}

0801dc4a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dc4a:	b510      	push	{r4, lr}
 801dc4c:	4604      	mov	r4, r0
 801dc4e:	2104      	movs	r1, #4
 801dc50:	f007 fdb8 	bl	80257c4 <_ZdlPvj>
 801dc54:	4620      	mov	r0, r4
 801dc56:	bd10      	pop	{r4, pc}

0801dc58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801dc58:	b510      	push	{r4, lr}
 801dc5a:	4604      	mov	r4, r0
 801dc5c:	2104      	movs	r1, #4
 801dc5e:	f007 fdb1 	bl	80257c4 <_ZdlPvj>
 801dc62:	4620      	mov	r0, r4
 801dc64:	bd10      	pop	{r4, pc}

0801dc66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801dc66:	b510      	push	{r4, lr}
 801dc68:	4604      	mov	r4, r0
 801dc6a:	2104      	movs	r1, #4
 801dc6c:	f007 fdaa 	bl	80257c4 <_ZdlPvj>
 801dc70:	4620      	mov	r0, r4
 801dc72:	bd10      	pop	{r4, pc}

0801dc74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801dc74:	b510      	push	{r4, lr}
 801dc76:	4604      	mov	r4, r0
 801dc78:	2104      	movs	r1, #4
 801dc7a:	f007 fda3 	bl	80257c4 <_ZdlPvj>
 801dc7e:	4620      	mov	r0, r4
 801dc80:	bd10      	pop	{r4, pc}

0801dc82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801dc82:	b510      	push	{r4, lr}
 801dc84:	4604      	mov	r4, r0
 801dc86:	2104      	movs	r1, #4
 801dc88:	f007 fd9c 	bl	80257c4 <_ZdlPvj>
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	bd10      	pop	{r4, pc}

0801dc90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc94:	4d9e      	ldr	r5, [pc, #632]	; (801df10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801dc96:	4690      	mov	r8, r2
 801dc98:	b08f      	sub	sp, #60	; 0x3c
 801dc9a:	4604      	mov	r4, r0
 801dc9c:	682a      	ldr	r2, [r5, #0]
 801dc9e:	4689      	mov	r9, r1
 801dca0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801dca4:	2a02      	cmp	r2, #2
 801dca6:	d106      	bne.n	801dcb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801dca8:	4b9a      	ldr	r3, [pc, #616]	; (801df14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801dcaa:	f240 11ef 	movw	r1, #495	; 0x1ef
 801dcae:	4a9a      	ldr	r2, [pc, #616]	; (801df18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dcb0:	489a      	ldr	r0, [pc, #616]	; (801df1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801dcb2:	f007 fdb3 	bl	802581c <__assert_func>
 801dcb6:	ae0e      	add	r6, sp, #56	; 0x38
 801dcb8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801dcbc:	4630      	mov	r0, r6
 801dcbe:	f7fe f8b1 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dcc2:	6823      	ldr	r3, [r4, #0]
 801dcc4:	4607      	mov	r7, r0
 801dcc6:	4620      	mov	r0, r4
 801dcc8:	6a1b      	ldr	r3, [r3, #32]
 801dcca:	4798      	blx	r3
 801dccc:	4287      	cmp	r7, r0
 801dcce:	d004      	beq.n	801dcda <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801dcd0:	4b93      	ldr	r3, [pc, #588]	; (801df20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801dcd2:	f240 11f1 	movw	r1, #497	; 0x1f1
 801dcd6:	4a90      	ldr	r2, [pc, #576]	; (801df18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dcd8:	e7ea      	b.n	801dcb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dcda:	4630      	mov	r0, r6
 801dcdc:	f7fe f81e 	bl	801bd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 801dce0:	4607      	mov	r7, r0
 801dce2:	b920      	cbnz	r0, 801dcee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801dce4:	4b8f      	ldr	r3, [pc, #572]	; (801df24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801dce6:	f240 11f3 	movw	r1, #499	; 0x1f3
 801dcea:	4a8b      	ldr	r2, [pc, #556]	; (801df18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dcec:	e7e0      	b.n	801dcb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dcee:	f8d8 0000 	ldr.w	r0, [r8]
 801dcf2:	ab06      	add	r3, sp, #24
 801dcf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dcf8:	f9b8 a000 	ldrsh.w	sl, [r8]
 801dcfc:	c303      	stmia	r3!, {r0, r1}
 801dcfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dd02:	ab08      	add	r3, sp, #32
 801dd04:	f8d9 0000 	ldr.w	r0, [r9]
 801dd08:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801dd0c:	c303      	stmia	r3!, {r0, r1}
 801dd0e:	4630      	mov	r0, r6
 801dd10:	f7fd ff36 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dd14:	4680      	mov	r8, r0
 801dd16:	4630      	mov	r0, r6
 801dd18:	4e83      	ldr	r6, [pc, #524]	; (801df28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801dd1a:	f7fd ff6b 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dd1e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801dd22:	f10d 0920 	add.w	r9, sp, #32
 801dd26:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801dd2a:	a806      	add	r0, sp, #24
 801dd2c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801dd30:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801dd34:	f7fb fa68 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd38:	4648      	mov	r0, r9
 801dd3a:	f7fb fa65 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd3e:	a80a      	add	r0, sp, #40	; 0x28
 801dd40:	f7fb fa62 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd44:	4b79      	ldr	r3, [pc, #484]	; (801df2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dd46:	2100      	movs	r1, #0
 801dd48:	f9b6 2000 	ldrsh.w	r2, [r6]
 801dd4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dd50:	4648      	mov	r0, r9
 801dd52:	910c      	str	r1, [sp, #48]	; 0x30
 801dd54:	a90c      	add	r1, sp, #48	; 0x30
 801dd56:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801dd5a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dd5e:	f7f7 feef 	bl	8015b40 <_ZN8touchgfx4RectaNERKS0_>
 801dd62:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801dd66:	9602      	str	r6, [sp, #8]
 801dd68:	f1bc 0f00 	cmp.w	ip, #0
 801dd6c:	f340 80a4 	ble.w	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd70:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801dd74:	2e00      	cmp	r6, #0
 801dd76:	f340 809f 	ble.w	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd7a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dd7e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dd82:	4288      	cmp	r0, r1
 801dd84:	db36      	blt.n	801ddf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dd86:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dd8a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dd8e:	429a      	cmp	r2, r3
 801dd90:	db30      	blt.n	801ddf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dd92:	4460      	add	r0, ip
 801dd94:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dd98:	4461      	add	r1, ip
 801dd9a:	b200      	sxth	r0, r0
 801dd9c:	b209      	sxth	r1, r1
 801dd9e:	4288      	cmp	r0, r1
 801dda0:	dc28      	bgt.n	801ddf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dda2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dda6:	4432      	add	r2, r6
 801dda8:	440b      	add	r3, r1
 801ddaa:	b212      	sxth	r2, r2
 801ddac:	b21b      	sxth	r3, r3
 801ddae:	429a      	cmp	r2, r3
 801ddb0:	dc20      	bgt.n	801ddf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801ddb2:	6823      	ldr	r3, [r4, #0]
 801ddb4:	4620      	mov	r0, r4
 801ddb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddb8:	4798      	blx	r3
 801ddba:	4682      	mov	sl, r0
 801ddbc:	6828      	ldr	r0, [r5, #0]
 801ddbe:	6803      	ldr	r3, [r0, #0]
 801ddc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddc2:	4798      	blx	r3
 801ddc4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ddc8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ddcc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ddd0:	9303      	str	r3, [sp, #12]
 801ddd2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ddd6:	1a9b      	subs	r3, r3, r2
 801ddd8:	b29b      	uxth	r3, r3
 801ddda:	b21c      	sxth	r4, r3
 801dddc:	2c00      	cmp	r4, #0
 801ddde:	dc0e      	bgt.n	801ddfe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801dde0:	b134      	cbz	r4, 801ddf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801dde2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dde6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ddea:	4413      	add	r3, r2
 801ddec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ddf0:	463c      	mov	r4, r7
 801ddf2:	e00b      	b.n	801de0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ddf4:	4b4e      	ldr	r3, [pc, #312]	; (801df30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ddf6:	f240 2101 	movw	r1, #513	; 0x201
 801ddfa:	4a47      	ldr	r2, [pc, #284]	; (801df18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ddfc:	e758      	b.n	801dcb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ddfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801de02:	ebab 0303 	sub.w	r3, fp, r3
 801de06:	443c      	add	r4, r7
 801de08:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801de0c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801de10:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801de14:	1a9b      	subs	r3, r3, r2
 801de16:	b29b      	uxth	r3, r3
 801de18:	b219      	sxth	r1, r3
 801de1a:	2900      	cmp	r1, #0
 801de1c:	dd50      	ble.n	801dec0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801de1e:	9a03      	ldr	r2, [sp, #12]
 801de20:	fb02 4401 	mla	r4, r2, r1, r4
 801de24:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801de28:	1ad3      	subs	r3, r2, r3
 801de2a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801de2e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801de32:	f1bc 0f00 	cmp.w	ip, #0
 801de36:	dd3f      	ble.n	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801de38:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801de3c:	2e00      	cmp	r6, #0
 801de3e:	dd3b      	ble.n	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801de40:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801de44:	2203      	movs	r2, #3
 801de46:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801de4a:	fb0a f801 	mul.w	r8, sl, r1
 801de4e:	fb13 8802 	smlabb	r8, r3, r2, r8
 801de52:	9a02      	ldr	r2, [sp, #8]
 801de54:	4480      	add	r8, r0
 801de56:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801de5a:	8812      	ldrh	r2, [r2, #0]
 801de5c:	4584      	cmp	ip, r0
 801de5e:	eba2 0303 	sub.w	r3, r2, r3
 801de62:	bfa8      	it	ge
 801de64:	4684      	movge	ip, r0
 801de66:	459c      	cmp	ip, r3
 801de68:	bfa8      	it	ge
 801de6a:	469c      	movge	ip, r3
 801de6c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801de70:	429e      	cmp	r6, r3
 801de72:	bfa8      	it	ge
 801de74:	461e      	movge	r6, r3
 801de76:	4b2d      	ldr	r3, [pc, #180]	; (801df2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801de78:	881b      	ldrh	r3, [r3, #0]
 801de7a:	1a59      	subs	r1, r3, r1
 801de7c:	4633      	mov	r3, r6
 801de7e:	428e      	cmp	r6, r1
 801de80:	bfa8      	it	ge
 801de82:	460b      	movge	r3, r1
 801de84:	4562      	cmp	r2, ip
 801de86:	9302      	str	r3, [sp, #8]
 801de88:	d12d      	bne.n	801dee6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801de8a:	455a      	cmp	r2, fp
 801de8c:	d12b      	bne.n	801dee6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801de8e:	6828      	ldr	r0, [r5, #0]
 801de90:	6803      	ldr	r3, [r0, #0]
 801de92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de94:	4798      	blx	r3
 801de96:	07c3      	lsls	r3, r0, #31
 801de98:	d51b      	bpl.n	801ded2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801de9a:	6828      	ldr	r0, [r5, #0]
 801de9c:	9b02      	ldr	r3, [sp, #8]
 801de9e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801dea2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801dea6:	6803      	ldr	r3, [r0, #0]
 801dea8:	f8cd b000 	str.w	fp, [sp]
 801deac:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801deae:	4623      	mov	r3, r4
 801deb0:	e899 0006 	ldmia.w	r9, {r1, r2}
 801deb4:	47a8      	blx	r5
 801deb6:	4607      	mov	r7, r0
 801deb8:	4638      	mov	r0, r7
 801deba:	b00f      	add	sp, #60	; 0x3c
 801debc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dec0:	bf1f      	itttt	ne
 801dec2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801dec6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801deca:	189b      	addne	r3, r3, r2
 801decc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801ded0:	e7ad      	b.n	801de2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801ded2:	6828      	ldr	r0, [r5, #0]
 801ded4:	4642      	mov	r2, r8
 801ded6:	4621      	mov	r1, r4
 801ded8:	6803      	ldr	r3, [r0, #0]
 801deda:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801dedc:	9b02      	ldr	r3, [sp, #8]
 801dede:	fb03 f30a 	mul.w	r3, r3, sl
 801dee2:	47a8      	blx	r5
 801dee4:	e7e8      	b.n	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dee6:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801deea:	f04f 0900 	mov.w	r9, #0
 801deee:	9b02      	ldr	r3, [sp, #8]
 801def0:	454b      	cmp	r3, r9
 801def2:	dde1      	ble.n	801deb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801def4:	6828      	ldr	r0, [r5, #0]
 801def6:	4642      	mov	r2, r8
 801def8:	4621      	mov	r1, r4
 801defa:	44d0      	add	r8, sl
 801defc:	6803      	ldr	r3, [r0, #0]
 801defe:	f109 0901 	add.w	r9, r9, #1
 801df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df04:	461e      	mov	r6, r3
 801df06:	465b      	mov	r3, fp
 801df08:	47b0      	blx	r6
 801df0a:	9b03      	ldr	r3, [sp, #12]
 801df0c:	441c      	add	r4, r3
 801df0e:	e7ee      	b.n	801deee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801df10:	2000b370 	.word	0x2000b370
 801df14:	0802af9d 	.word	0x0802af9d
 801df18:	0802b779 	.word	0x0802b779
 801df1c:	0802af6b 	.word	0x0802af6b
 801df20:	0802b04f 	.word	0x0802b04f
 801df24:	0802b0a4 	.word	0x0802b0a4
 801df28:	2000b36a 	.word	0x2000b36a
 801df2c:	2000b36c 	.word	0x2000b36c
 801df30:	0802b0e2 	.word	0x0802b0e2

0801df34 <_ZN8touchgfx8LCD24bppC1Ev>:
 801df34:	4a0b      	ldr	r2, [pc, #44]	; (801df64 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801df36:	6002      	str	r2, [r0, #0]
 801df38:	2200      	movs	r2, #0
 801df3a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801df3e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801df42:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801df46:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801df4a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801df4e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801df52:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801df56:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801df5a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801df5e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801df62:	4770      	bx	lr
 801df64:	0802b3c8 	.word	0x0802b3c8

0801df68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df6c:	b093      	sub	sp, #76	; 0x4c
 801df6e:	880c      	ldrh	r4, [r1, #0]
 801df70:	4605      	mov	r5, r0
 801df72:	460f      	mov	r7, r1
 801df74:	4691      	mov	r9, r2
 801df76:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801df7a:	b12c      	cbz	r4, 801df88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801df7c:	4b71      	ldr	r3, [pc, #452]	; (801e144 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801df7e:	2168      	movs	r1, #104	; 0x68
 801df80:	4a71      	ldr	r2, [pc, #452]	; (801e148 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801df82:	4872      	ldr	r0, [pc, #456]	; (801e14c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801df84:	f007 fc4a 	bl	802581c <__assert_func>
 801df88:	6810      	ldr	r0, [r2, #0]
 801df8a:	ae0e      	add	r6, sp, #56	; 0x38
 801df8c:	6851      	ldr	r1, [r2, #4]
 801df8e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801e154 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801df92:	c603      	stmia	r6!, {r0, r1}
 801df94:	6818      	ldr	r0, [r3, #0]
 801df96:	ae10      	add	r6, sp, #64	; 0x40
 801df98:	6859      	ldr	r1, [r3, #4]
 801df9a:	c603      	stmia	r6!, {r0, r1}
 801df9c:	a80e      	add	r0, sp, #56	; 0x38
 801df9e:	f7fb f933 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfa2:	4649      	mov	r1, r9
 801dfa4:	a810      	add	r0, sp, #64	; 0x40
 801dfa6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801e150 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801dfaa:	f7fb f915 	bl	80191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dfae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801dfb2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801dfb6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801dfba:	f8d9 0000 	ldr.w	r0, [r9]
 801dfbe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dfc2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801dfc6:	440d      	add	r5, r1
 801dfc8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801dfcc:	440a      	add	r2, r1
 801dfce:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801dfd2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dfd6:	4413      	add	r3, r2
 801dfd8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801dfdc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801dfe0:	930b      	str	r3, [sp, #44]	; 0x2c
 801dfe2:	6803      	ldr	r3, [r0, #0]
 801dfe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dfe8:	4798      	blx	r3
 801dfea:	2801      	cmp	r0, #1
 801dfec:	d11e      	bne.n	801e02c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801dfee:	220b      	movs	r2, #11
 801dff0:	9008      	str	r0, [sp, #32]
 801dff2:	b2b6      	uxth	r6, r6
 801dff4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801dff8:	9207      	str	r2, [sp, #28]
 801dffa:	4629      	mov	r1, r5
 801dffc:	f8ba 2000 	ldrh.w	r2, [sl]
 801e000:	f8cd 8010 	str.w	r8, [sp, #16]
 801e004:	9601      	str	r6, [sp, #4]
 801e006:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801e00a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e00e:	9203      	str	r2, [sp, #12]
 801e010:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e014:	9202      	str	r2, [sp, #8]
 801e016:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e01a:	9200      	str	r2, [sp, #0]
 801e01c:	463a      	mov	r2, r7
 801e01e:	f8d9 0000 	ldr.w	r0, [r9]
 801e022:	f7f8 f9db 	bl	80163dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e026:	b013      	add	sp, #76	; 0x4c
 801e028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e02c:	f8d9 0000 	ldr.w	r0, [r9]
 801e030:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801e034:	6803      	ldr	r3, [r0, #0]
 801e036:	6a1b      	ldr	r3, [r3, #32]
 801e038:	4798      	blx	r3
 801e03a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e03e:	f8ba 3000 	ldrh.w	r3, [sl]
 801e042:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e046:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e04a:	fb01 2303 	mla	r3, r1, r3, r2
 801e04e:	4621      	mov	r1, r4
 801e050:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e054:	4418      	add	r0, r3
 801e056:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801e05a:	930c      	str	r3, [sp, #48]	; 0x30
 801e05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e05e:	4299      	cmp	r1, r3
 801e060:	da6a      	bge.n	801e138 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801e062:	1cc2      	adds	r2, r0, #3
 801e064:	46aa      	mov	sl, r5
 801e066:	ebaa 0305 	sub.w	r3, sl, r5
 801e06a:	429e      	cmp	r6, r3
 801e06c:	dd55      	ble.n	801e11a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801e06e:	2404      	movs	r4, #4
 801e070:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801e074:	fb14 4303 	smlabb	r3, r4, r3, r4
 801e078:	eb07 0e03 	add.w	lr, r7, r3
 801e07c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801e080:	b184      	cbz	r4, 801e0a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e082:	2cff      	cmp	r4, #255	; 0xff
 801e084:	f817 b003 	ldrb.w	fp, [r7, r3]
 801e088:	d10e      	bne.n	801e0a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e08a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e08e:	d10b      	bne.n	801e0a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e090:	f802 bc03 	strb.w	fp, [r2, #-3]
 801e094:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801e098:	f802 3c02 	strb.w	r3, [r2, #-2]
 801e09c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801e0a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e0a4:	3203      	adds	r2, #3
 801e0a6:	e7de      	b.n	801e066 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801e0a8:	fb08 f404 	mul.w	r4, r8, r4
 801e0ac:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801e0b0:	1c63      	adds	r3, r4, #1
 801e0b2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801e0b6:	121b      	asrs	r3, r3, #8
 801e0b8:	b29c      	uxth	r4, r3
 801e0ba:	43db      	mvns	r3, r3
 801e0bc:	fb1b fb04 	smulbb	fp, fp, r4
 801e0c0:	b2db      	uxtb	r3, r3
 801e0c2:	fb0c bc03 	mla	ip, ip, r3, fp
 801e0c6:	fa1f fc8c 	uxth.w	ip, ip
 801e0ca:	f10c 0b01 	add.w	fp, ip, #1
 801e0ce:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e0d2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801e0d6:	fb1b fb03 	smulbb	fp, fp, r3
 801e0da:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e0de:	f802 cc03 	strb.w	ip, [r2, #-3]
 801e0e2:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e0e6:	fb0c bc04 	mla	ip, ip, r4, fp
 801e0ea:	fa1f fc8c 	uxth.w	ip, ip
 801e0ee:	f10c 0b01 	add.w	fp, ip, #1
 801e0f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e0f6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e0fa:	f802 cc02 	strb.w	ip, [r2, #-2]
 801e0fe:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801e102:	f89e e002 	ldrb.w	lr, [lr, #2]
 801e106:	fb1c f303 	smulbb	r3, ip, r3
 801e10a:	fb0e 3304 	mla	r3, lr, r4, r3
 801e10e:	b29b      	uxth	r3, r3
 801e110:	1c5c      	adds	r4, r3, #1
 801e112:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e116:	121b      	asrs	r3, r3, #8
 801e118:	e7c2      	b.n	801e0a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e11c:	3101      	adds	r1, #1
 801e11e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e120:	881b      	ldrh	r3, [r3, #0]
 801e122:	1b9b      	subs	r3, r3, r6
 801e124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e128:	4413      	add	r3, r2
 801e12a:	4418      	add	r0, r3
 801e12c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e130:	1b9b      	subs	r3, r3, r6
 801e132:	444b      	add	r3, r9
 801e134:	441d      	add	r5, r3
 801e136:	e791      	b.n	801e05c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e138:	4b05      	ldr	r3, [pc, #20]	; (801e150 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801e13a:	6818      	ldr	r0, [r3, #0]
 801e13c:	6803      	ldr	r3, [r0, #0]
 801e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e140:	4798      	blx	r3
 801e142:	e770      	b.n	801e026 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e144:	0802aecf 	.word	0x0802aecf
 801e148:	0802b59b 	.word	0x0802b59b
 801e14c:	0802af6b 	.word	0x0802af6b
 801e150:	2000b370 	.word	0x2000b370
 801e154:	2000b36a 	.word	0x2000b36a

0801e158 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e15c:	4614      	mov	r4, r2
 801e15e:	880a      	ldrh	r2, [r1, #0]
 801e160:	b091      	sub	sp, #68	; 0x44
 801e162:	4680      	mov	r8, r0
 801e164:	2a01      	cmp	r2, #1
 801e166:	460e      	mov	r6, r1
 801e168:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e16c:	d005      	beq.n	801e17a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801e16e:	4b6d      	ldr	r3, [pc, #436]	; (801e324 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e170:	21b6      	movs	r1, #182	; 0xb6
 801e172:	4a6d      	ldr	r2, [pc, #436]	; (801e328 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801e174:	486d      	ldr	r0, [pc, #436]	; (801e32c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e176:	f007 fb51 	bl	802581c <__assert_func>
 801e17a:	6820      	ldr	r0, [r4, #0]
 801e17c:	ad0c      	add	r5, sp, #48	; 0x30
 801e17e:	6861      	ldr	r1, [r4, #4]
 801e180:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e330 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801e184:	c503      	stmia	r5!, {r0, r1}
 801e186:	6818      	ldr	r0, [r3, #0]
 801e188:	ad0e      	add	r5, sp, #56	; 0x38
 801e18a:	6859      	ldr	r1, [r3, #4]
 801e18c:	c503      	stmia	r5!, {r0, r1}
 801e18e:	a80c      	add	r0, sp, #48	; 0x30
 801e190:	f7fb f83a 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e194:	4621      	mov	r1, r4
 801e196:	a80e      	add	r0, sp, #56	; 0x38
 801e198:	f7fb f81e 	bl	80191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e19c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e1a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e1a4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e1a8:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e1ac:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e1b0:	eb08 0401 	add.w	r4, r8, r1
 801e1b4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e1b8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e334 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e1bc:	440a      	add	r2, r1
 801e1be:	f8d8 0000 	ldr.w	r0, [r8]
 801e1c2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e1c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e1ca:	4413      	add	r3, r2
 801e1cc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e1d0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e1d4:	930a      	str	r3, [sp, #40]	; 0x28
 801e1d6:	6803      	ldr	r3, [r0, #0]
 801e1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e1dc:	4798      	blx	r3
 801e1de:	2801      	cmp	r0, #1
 801e1e0:	d11e      	bne.n	801e220 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e1e2:	220b      	movs	r2, #11
 801e1e4:	9008      	str	r0, [sp, #32]
 801e1e6:	b2ad      	uxth	r5, r5
 801e1e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e1ec:	9207      	str	r2, [sp, #28]
 801e1ee:	4621      	mov	r1, r4
 801e1f0:	f8b9 2000 	ldrh.w	r2, [r9]
 801e1f4:	9501      	str	r5, [sp, #4]
 801e1f6:	9206      	str	r2, [sp, #24]
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e1fe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e202:	9203      	str	r2, [sp, #12]
 801e204:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e208:	9202      	str	r2, [sp, #8]
 801e20a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e20e:	9200      	str	r2, [sp, #0]
 801e210:	4632      	mov	r2, r6
 801e212:	f8d8 0000 	ldr.w	r0, [r8]
 801e216:	f7f8 f8e1 	bl	80163dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e21a:	b011      	add	sp, #68	; 0x44
 801e21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e220:	f8d8 0000 	ldr.w	r0, [r8]
 801e224:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e228:	6803      	ldr	r3, [r0, #0]
 801e22a:	6a1b      	ldr	r3, [r3, #32]
 801e22c:	4798      	blx	r3
 801e22e:	f8b9 3000 	ldrh.w	r3, [r9]
 801e232:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e236:	f04f 0e00 	mov.w	lr, #0
 801e23a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e23e:	fa1f f987 	uxth.w	r9, r7
 801e242:	fb01 2303 	mla	r3, r1, r3, r2
 801e246:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e24a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e24e:	b289      	uxth	r1, r1
 801e250:	4418      	add	r0, r3
 801e252:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e256:	930b      	str	r3, [sp, #44]	; 0x2c
 801e258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e25a:	459e      	cmp	lr, r3
 801e25c:	da5c      	bge.n	801e318 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e25e:	1cc3      	adds	r3, r0, #3
 801e260:	46a2      	mov	sl, r4
 801e262:	ebaa 0204 	sub.w	r2, sl, r4
 801e266:	4295      	cmp	r5, r2
 801e268:	dd46      	ble.n	801e2f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e26a:	f04f 0c03 	mov.w	ip, #3
 801e26e:	f04f 0b04 	mov.w	fp, #4
 801e272:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e276:	2fff      	cmp	r7, #255	; 0xff
 801e278:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e27c:	eb06 0c02 	add.w	ip, r6, r2
 801e280:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e284:	d02f      	beq.n	801e2e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e286:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e28a:	fb12 f201 	smulbb	r2, r2, r1
 801e28e:	fb0b 2209 	mla	r2, fp, r9, r2
 801e292:	b292      	uxth	r2, r2
 801e294:	f102 0b01 	add.w	fp, r2, #1
 801e298:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e29c:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e2a0:	fb1b fb01 	smulbb	fp, fp, r1
 801e2a4:	1212      	asrs	r2, r2, #8
 801e2a6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e2aa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e2ae:	fb02 b209 	mla	r2, r2, r9, fp
 801e2b2:	b292      	uxth	r2, r2
 801e2b4:	f102 0b01 	add.w	fp, r2, #1
 801e2b8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e2bc:	1212      	asrs	r2, r2, #8
 801e2be:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e2c2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e2c6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e2ca:	fb1c fc01 	smulbb	ip, ip, r1
 801e2ce:	fb02 c209 	mla	r2, r2, r9, ip
 801e2d2:	b292      	uxth	r2, r2
 801e2d4:	f102 0c01 	add.w	ip, r2, #1
 801e2d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e2dc:	1212      	asrs	r2, r2, #8
 801e2de:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e2e2:	3303      	adds	r3, #3
 801e2e4:	e7bd      	b.n	801e262 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e2e6:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e2ea:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e2ee:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e2f2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e2f6:	e7f2      	b.n	801e2de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e2f8:	4b0d      	ldr	r3, [pc, #52]	; (801e330 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e2fa:	f10e 0e01 	add.w	lr, lr, #1
 801e2fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e300:	881b      	ldrh	r3, [r3, #0]
 801e302:	1b5b      	subs	r3, r3, r5
 801e304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e308:	4413      	add	r3, r2
 801e30a:	4418      	add	r0, r3
 801e30c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e310:	1b5b      	subs	r3, r3, r5
 801e312:	4443      	add	r3, r8
 801e314:	441c      	add	r4, r3
 801e316:	e79f      	b.n	801e258 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e318:	4b06      	ldr	r3, [pc, #24]	; (801e334 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e31a:	6818      	ldr	r0, [r3, #0]
 801e31c:	6803      	ldr	r3, [r0, #0]
 801e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e320:	4798      	blx	r3
 801e322:	e77a      	b.n	801e21a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e324:	0802adb3 	.word	0x0802adb3
 801e328:	0802b48e 	.word	0x0802b48e
 801e32c:	0802af6b 	.word	0x0802af6b
 801e330:	2000b36a 	.word	0x2000b36a
 801e334:	2000b370 	.word	0x2000b370

0801e338 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e338:	b570      	push	{r4, r5, r6, lr}
 801e33a:	780d      	ldrb	r5, [r1, #0]
 801e33c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e340:	2d01      	cmp	r5, #1
 801e342:	d00d      	beq.n	801e360 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e344:	d307      	bcc.n	801e356 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e346:	2d02      	cmp	r5, #2
 801e348:	d10f      	bne.n	801e36a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e34a:	4b08      	ldr	r3, [pc, #32]	; (801e36c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e34c:	215b      	movs	r1, #91	; 0x5b
 801e34e:	4a08      	ldr	r2, [pc, #32]	; (801e370 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e350:	4808      	ldr	r0, [pc, #32]	; (801e374 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e352:	f007 fa63 	bl	802581c <__assert_func>
 801e356:	9404      	str	r4, [sp, #16]
 801e358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e35c:	f7ff be04 	b.w	801df68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e360:	9404      	str	r4, [sp, #16]
 801e362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e366:	f7ff bef7 	b.w	801e158 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e36a:	bd70      	pop	{r4, r5, r6, pc}
 801e36c:	0802ad68 	.word	0x0802ad68
 801e370:	0802b40c 	.word	0x0802b40c
 801e374:	0802af6b 	.word	0x0802af6b

0801e378 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e37c:	4605      	mov	r5, r0
 801e37e:	b08f      	sub	sp, #60	; 0x3c
 801e380:	460c      	mov	r4, r1
 801e382:	461f      	mov	r7, r3
 801e384:	2b00      	cmp	r3, #0
 801e386:	d04e      	beq.n	801e426 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e388:	6808      	ldr	r0, [r1, #0]
 801e38a:	ab0a      	add	r3, sp, #40	; 0x28
 801e38c:	6849      	ldr	r1, [r1, #4]
 801e38e:	4e81      	ldr	r6, [pc, #516]	; (801e594 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e390:	c303      	stmia	r3!, {r0, r1}
 801e392:	6810      	ldr	r0, [r2, #0]
 801e394:	ab0c      	add	r3, sp, #48	; 0x30
 801e396:	6851      	ldr	r1, [r2, #4]
 801e398:	c303      	stmia	r3!, {r0, r1}
 801e39a:	a80a      	add	r0, sp, #40	; 0x28
 801e39c:	f7fa ff34 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3a0:	4621      	mov	r1, r4
 801e3a2:	a80c      	add	r0, sp, #48	; 0x30
 801e3a4:	f7fa ff18 	bl	80191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e3a8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e3ac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e3b0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e3b4:	6830      	ldr	r0, [r6, #0]
 801e3b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e3ba:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 801e3be:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 801e3c2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e3c6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e3ca:	440a      	add	r2, r1
 801e3cc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e3d0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e3d4:	4413      	add	r3, r2
 801e3d6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e3da:	6803      	ldr	r3, [r0, #0]
 801e3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e3de:	4798      	blx	r3
 801e3e0:	2fff      	cmp	r7, #255	; 0xff
 801e3e2:	4633      	mov	r3, r6
 801e3e4:	4e6c      	ldr	r6, [pc, #432]	; (801e598 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e3e6:	d021      	beq.n	801e42c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801e3e8:	f010 0f04 	tst.w	r0, #4
 801e3ec:	6818      	ldr	r0, [r3, #0]
 801e3ee:	d020      	beq.n	801e432 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801e3f0:	2100      	movs	r1, #0
 801e3f2:	f04f 0e01 	mov.w	lr, #1
 801e3f6:	f8d0 c000 	ldr.w	ip, [r0]
 801e3fa:	b2a4      	uxth	r4, r4
 801e3fc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e400:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e404:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801e408:	8836      	ldrh	r6, [r6, #0]
 801e40a:	9703      	str	r7, [sp, #12]
 801e40c:	9400      	str	r4, [sp, #0]
 801e40e:	e9cd 1604 	strd	r1, r6, [sp, #16]
 801e412:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e416:	9102      	str	r1, [sp, #8]
 801e418:	fa1f f188 	uxth.w	r1, r8
 801e41c:	9101      	str	r1, [sp, #4]
 801e41e:	4629      	mov	r1, r5
 801e420:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 801e424:	47a0      	blx	r4
 801e426:	b00f      	add	sp, #60	; 0x3c
 801e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e42c:	f010 0f01 	tst.w	r0, #1
 801e430:	e7dc      	b.n	801e3ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 801e432:	6803      	ldr	r3, [r0, #0]
 801e434:	6a1b      	ldr	r3, [r3, #32]
 801e436:	4798      	blx	r3
 801e438:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e43c:	8833      	ldrh	r3, [r6, #0]
 801e43e:	2fff      	cmp	r7, #255	; 0xff
 801e440:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801e444:	fb01 2303 	mla	r3, r1, r3, r2
 801e448:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 801e44c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e450:	4418      	add	r0, r3
 801e452:	d128      	bne.n	801e4a6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 801e454:	0051      	lsls	r1, r2, #1
 801e456:	2700      	movs	r7, #0
 801e458:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e45c:	4547      	cmp	r7, r8
 801e45e:	f280 8092 	bge.w	801e586 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e462:	4684      	mov	ip, r0
 801e464:	f04f 0e00 	mov.w	lr, #0
 801e468:	45a6      	cmp	lr, r4
 801e46a:	f10c 0c03 	add.w	ip, ip, #3
 801e46e:	da7c      	bge.n	801e56a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 801e470:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 801e474:	f10e 0e01 	add.w	lr, lr, #1
 801e478:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801e47c:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 801e480:	ea4f 03e9 	mov.w	r3, r9, asr #3
 801e484:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801e488:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 801e48c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e490:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 801e494:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801e498:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801e49c:	f80c ac01 	strb.w	sl, [ip, #-1]
 801e4a0:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801e4a4:	e7e0      	b.n	801e468 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 801e4a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801e4aa:	ea6f 0c07 	mvn.w	ip, r7
 801e4ae:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 801e4b2:	f04f 0900 	mov.w	r9, #0
 801e4b6:	9309      	str	r3, [sp, #36]	; 0x24
 801e4b8:	fa5f fc8c 	uxtb.w	ip, ip
 801e4bc:	b2bb      	uxth	r3, r7
 801e4be:	45c1      	cmp	r9, r8
 801e4c0:	da61      	bge.n	801e586 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801e4c2:	4601      	mov	r1, r0
 801e4c4:	f04f 0e00 	mov.w	lr, #0
 801e4c8:	45a6      	cmp	lr, r4
 801e4ca:	f101 0103 	add.w	r1, r1, #3
 801e4ce:	da3b      	bge.n	801e548 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 801e4d0:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801e4d4:	f10e 0e01 	add.w	lr, lr, #1
 801e4d8:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 801e4dc:	1216      	asrs	r6, r2, #8
 801e4de:	10d7      	asrs	r7, r2, #3
 801e4e0:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 801e4e4:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 801e4e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e4ec:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e4f0:	fb1b fb0c 	smulbb	fp, fp, ip
 801e4f4:	b2d2      	uxtb	r2, r2
 801e4f6:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e4fa:	fb02 b203 	mla	r2, r2, r3, fp
 801e4fe:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e502:	fb17 f703 	smulbb	r7, r7, r3
 801e506:	fb16 f603 	smulbb	r6, r6, r3
 801e50a:	b292      	uxth	r2, r2
 801e50c:	f102 0b01 	add.w	fp, r2, #1
 801e510:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e514:	1212      	asrs	r2, r2, #8
 801e516:	f801 2c03 	strb.w	r2, [r1, #-3]
 801e51a:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 801e51e:	fb02 770c 	mla	r7, r2, ip, r7
 801e522:	b2bf      	uxth	r7, r7
 801e524:	1c7a      	adds	r2, r7, #1
 801e526:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e52a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 801e52e:	fb02 660c 	mla	r6, r2, ip, r6
 801e532:	123f      	asrs	r7, r7, #8
 801e534:	b2b6      	uxth	r6, r6
 801e536:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e53a:	1c72      	adds	r2, r6, #1
 801e53c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e540:	1236      	asrs	r6, r6, #8
 801e542:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e546:	e7bf      	b.n	801e4c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 801e548:	4a13      	ldr	r2, [pc, #76]	; (801e598 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801e54a:	f109 0901 	add.w	r9, r9, #1
 801e54e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e550:	8812      	ldrh	r2, [r2, #0]
 801e552:	1b12      	subs	r2, r2, r4
 801e554:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e558:	440a      	add	r2, r1
 801e55a:	4410      	add	r0, r2
 801e55c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e560:	1b12      	subs	r2, r2, r4
 801e562:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801e566:	4415      	add	r5, r2
 801e568:	e7a9      	b.n	801e4be <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 801e56a:	8833      	ldrh	r3, [r6, #0]
 801e56c:	3701      	adds	r7, #1
 801e56e:	1b1b      	subs	r3, r3, r4
 801e570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e574:	4413      	add	r3, r2
 801e576:	4418      	add	r0, r3
 801e578:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e57c:	1b1b      	subs	r3, r3, r4
 801e57e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e582:	441d      	add	r5, r3
 801e584:	e76a      	b.n	801e45c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 801e586:	4b03      	ldr	r3, [pc, #12]	; (801e594 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801e588:	6818      	ldr	r0, [r3, #0]
 801e58a:	6803      	ldr	r3, [r0, #0]
 801e58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e58e:	4798      	blx	r3
 801e590:	e749      	b.n	801e426 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801e592:	bf00      	nop
 801e594:	2000b370 	.word	0x2000b370
 801e598:	2000b36a 	.word	0x2000b36a

0801e59c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5a0:	b08b      	sub	sp, #44	; 0x2c
 801e5a2:	460c      	mov	r4, r1
 801e5a4:	4680      	mov	r8, r0
 801e5a6:	469a      	mov	sl, r3
 801e5a8:	6808      	ldr	r0, [r1, #0]
 801e5aa:	ab06      	add	r3, sp, #24
 801e5ac:	6849      	ldr	r1, [r1, #4]
 801e5ae:	c303      	stmia	r3!, {r0, r1}
 801e5b0:	6810      	ldr	r0, [r2, #0]
 801e5b2:	ab08      	add	r3, sp, #32
 801e5b4:	6851      	ldr	r1, [r2, #4]
 801e5b6:	c303      	stmia	r3!, {r0, r1}
 801e5b8:	a806      	add	r0, sp, #24
 801e5ba:	f7fa fe25 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e5be:	4621      	mov	r1, r4
 801e5c0:	a808      	add	r0, sp, #32
 801e5c2:	4c61      	ldr	r4, [pc, #388]	; (801e748 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e5c4:	f7fa fe08 	bl	80191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e5c8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e5cc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e5d0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e5d4:	6820      	ldr	r0, [r4, #0]
 801e5d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e5da:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e5de:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e5e2:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e5e6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e5ea:	440a      	add	r2, r1
 801e5ec:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e5f0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e5f4:	4413      	add	r3, r2
 801e5f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e5fa:	6803      	ldr	r3, [r0, #0]
 801e5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e5fe:	4798      	blx	r3
 801e600:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e604:	d118      	bne.n	801e638 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e606:	f010 0f20 	tst.w	r0, #32
 801e60a:	6820      	ldr	r0, [r4, #0]
 801e60c:	d017      	beq.n	801e63e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e60e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e612:	b2bf      	uxth	r7, r7
 801e614:	6801      	ldr	r1, [r0, #0]
 801e616:	9402      	str	r4, [sp, #8]
 801e618:	fa1f f489 	uxth.w	r4, r9
 801e61c:	f8cd a00c 	str.w	sl, [sp, #12]
 801e620:	9401      	str	r4, [sp, #4]
 801e622:	9700      	str	r7, [sp, #0]
 801e624:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e628:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e62a:	4641      	mov	r1, r8
 801e62c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e630:	47a0      	blx	r4
 801e632:	b00b      	add	sp, #44	; 0x2c
 801e634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e638:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e63c:	e7e5      	b.n	801e60a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e63e:	6803      	ldr	r3, [r0, #0]
 801e640:	6a1b      	ldr	r3, [r3, #32]
 801e642:	4798      	blx	r3
 801e644:	4b41      	ldr	r3, [pc, #260]	; (801e74c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e646:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e64a:	f04f 0c00 	mov.w	ip, #0
 801e64e:	881a      	ldrh	r2, [r3, #0]
 801e650:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e654:	fb04 1202 	mla	r2, r4, r2, r1
 801e658:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e65c:	4410      	add	r0, r2
 801e65e:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e662:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e666:	0092      	lsls	r2, r2, #2
 801e668:	9105      	str	r1, [sp, #20]
 801e66a:	9204      	str	r2, [sp, #16]
 801e66c:	45cc      	cmp	ip, r9
 801e66e:	da65      	bge.n	801e73c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e670:	1cc4      	adds	r4, r0, #3
 801e672:	f108 0504 	add.w	r5, r8, #4
 801e676:	f04f 0e00 	mov.w	lr, #0
 801e67a:	45be      	cmp	lr, r7
 801e67c:	da4d      	bge.n	801e71a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e67e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e682:	b181      	cbz	r1, 801e6a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e684:	29ff      	cmp	r1, #255	; 0xff
 801e686:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e68a:	d111      	bne.n	801e6b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e68c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e690:	d10e      	bne.n	801e6b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e692:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e696:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e69a:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e69e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e6a2:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e6a6:	f10e 0e01 	add.w	lr, lr, #1
 801e6aa:	3403      	adds	r4, #3
 801e6ac:	3504      	adds	r5, #4
 801e6ae:	e7e4      	b.n	801e67a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e6b0:	fb0a f101 	mul.w	r1, sl, r1
 801e6b4:	1c4a      	adds	r2, r1, #1
 801e6b6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e6ba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e6be:	1212      	asrs	r2, r2, #8
 801e6c0:	b296      	uxth	r6, r2
 801e6c2:	43d2      	mvns	r2, r2
 801e6c4:	fb1b fb06 	smulbb	fp, fp, r6
 801e6c8:	b2d2      	uxtb	r2, r2
 801e6ca:	fb01 b102 	mla	r1, r1, r2, fp
 801e6ce:	b289      	uxth	r1, r1
 801e6d0:	f101 0b01 	add.w	fp, r1, #1
 801e6d4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e6d8:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e6dc:	fb1b fb02 	smulbb	fp, fp, r2
 801e6e0:	1209      	asrs	r1, r1, #8
 801e6e2:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e6e6:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e6ea:	fb01 b106 	mla	r1, r1, r6, fp
 801e6ee:	b289      	uxth	r1, r1
 801e6f0:	f101 0b01 	add.w	fp, r1, #1
 801e6f4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e6f8:	1209      	asrs	r1, r1, #8
 801e6fa:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e6fe:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e702:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e706:	fb11 f202 	smulbb	r2, r1, r2
 801e70a:	fb0b 2206 	mla	r2, fp, r6, r2
 801e70e:	b292      	uxth	r2, r2
 801e710:	1c56      	adds	r6, r2, #1
 801e712:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e716:	1212      	asrs	r2, r2, #8
 801e718:	e7c3      	b.n	801e6a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e71a:	881a      	ldrh	r2, [r3, #0]
 801e71c:	f10c 0c01 	add.w	ip, ip, #1
 801e720:	9905      	ldr	r1, [sp, #20]
 801e722:	1bd2      	subs	r2, r2, r7
 801e724:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e728:	440a      	add	r2, r1
 801e72a:	9904      	ldr	r1, [sp, #16]
 801e72c:	4410      	add	r0, r2
 801e72e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e732:	1bd2      	subs	r2, r2, r7
 801e734:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e738:	4490      	add	r8, r2
 801e73a:	e797      	b.n	801e66c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e73c:	4b02      	ldr	r3, [pc, #8]	; (801e748 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e73e:	6818      	ldr	r0, [r3, #0]
 801e740:	6803      	ldr	r3, [r0, #0]
 801e742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e744:	4798      	blx	r3
 801e746:	e774      	b.n	801e632 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e748:	2000b370 	.word	0x2000b370
 801e74c:	2000b36a 	.word	0x2000b36a

0801e750 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e754:	b085      	sub	sp, #20
 801e756:	4606      	mov	r6, r0
 801e758:	460c      	mov	r4, r1
 801e75a:	4691      	mov	r9, r2
 801e75c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e760:	4698      	mov	r8, r3
 801e762:	b3a5      	cbz	r5, 801e7ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e764:	4608      	mov	r0, r1
 801e766:	f7fd fa0b 	bl	801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e76a:	4607      	mov	r7, r0
 801e76c:	4620      	mov	r0, r4
 801e76e:	f7fd fa41 	bl	801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e772:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e776:	4620      	mov	r0, r4
 801e778:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e77c:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e780:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e784:	f7fd fb4e 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e788:	b1a0      	cbz	r0, 801e7b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e78a:	4620      	mov	r0, r4
 801e78c:	f7fd fb4a 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e790:	2801      	cmp	r0, #1
 801e792:	d00f      	beq.n	801e7b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e794:	4620      	mov	r0, r4
 801e796:	f7fd fb45 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e79a:	2802      	cmp	r0, #2
 801e79c:	d00a      	beq.n	801e7b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e79e:	4620      	mov	r0, r4
 801e7a0:	f7fd fb40 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7a4:	280b      	cmp	r0, #11
 801e7a6:	d005      	beq.n	801e7b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801e7a8:	4b21      	ldr	r3, [pc, #132]	; (801e830 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 801e7aa:	213f      	movs	r1, #63	; 0x3f
 801e7ac:	4a21      	ldr	r2, [pc, #132]	; (801e834 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 801e7ae:	4822      	ldr	r0, [pc, #136]	; (801e838 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 801e7b0:	f007 f834 	bl	802581c <__assert_func>
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	f7fd fb35 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7ba:	2802      	cmp	r0, #2
 801e7bc:	4620      	mov	r0, r4
 801e7be:	d109      	bne.n	801e7d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 801e7c0:	f7fd faac 	bl	801bd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e7c4:	462b      	mov	r3, r5
 801e7c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e7c8:	a902      	add	r1, sp, #8
 801e7ca:	f7ff fee7 	bl	801e59c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e7ce:	b005      	add	sp, #20
 801e7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7d4:	f7fd fb26 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7d8:	280b      	cmp	r0, #11
 801e7da:	4620      	mov	r0, r4
 801e7dc:	d10d      	bne.n	801e7fa <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801e7de:	f7fd fa9d 	bl	801bd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e7e2:	4606      	mov	r6, r0
 801e7e4:	4620      	mov	r0, r4
 801e7e6:	f7fd facb 	bl	801bd80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e7ea:	9500      	str	r5, [sp, #0]
 801e7ec:	4601      	mov	r1, r0
 801e7ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7f0:	aa02      	add	r2, sp, #8
 801e7f2:	4630      	mov	r0, r6
 801e7f4:	f7ff fda0 	bl	801e338 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e7f8:	e7e9      	b.n	801e7ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e7fa:	f7fd fb13 	bl	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e7fe:	b940      	cbnz	r0, 801e812 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 801e800:	4620      	mov	r0, r4
 801e802:	f7fd fa8b 	bl	801bd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e806:	462b      	mov	r3, r5
 801e808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e80a:	a902      	add	r1, sp, #8
 801e80c:	f7ff fdb4 	bl	801e378 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e810:	e7dd      	b.n	801e7ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e812:	6833      	ldr	r3, [r6, #0]
 801e814:	4620      	mov	r0, r4
 801e816:	68df      	ldr	r7, [r3, #12]
 801e818:	f7fd fa80 	bl	801bd1c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e81c:	2300      	movs	r3, #0
 801e81e:	4601      	mov	r1, r0
 801e820:	aa02      	add	r2, sp, #8
 801e822:	4630      	mov	r0, r6
 801e824:	e9cd 5300 	strd	r5, r3, [sp]
 801e828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e82a:	47b8      	blx	r7
 801e82c:	e7cf      	b.n	801e7ce <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801e82e:	bf00      	nop
 801e830:	0802ae01 	.word	0x0802ae01
 801e834:	0802b517 	.word	0x0802b517
 801e838:	0802af6b 	.word	0x0802af6b

0801e83c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e83c:	b570      	push	{r4, r5, r6, lr}
 801e83e:	9d04      	ldr	r5, [sp, #16]
 801e840:	460c      	mov	r4, r1
 801e842:	4619      	mov	r1, r3
 801e844:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e848:	2a0c      	cmp	r2, #12
 801e84a:	d826      	bhi.n	801e89a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e84c:	e8df f002 	tbb	[pc, r2]
 801e850:	200e1407 	.word	0x200e1407
 801e854:	20202020 	.word	0x20202020
 801e858:	20202020 	.word	0x20202020
 801e85c:	20          	.byte	0x20
 801e85d:	00          	.byte	0x00
 801e85e:	4b0f      	ldr	r3, [pc, #60]	; (801e89c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e860:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 801e864:	4a0e      	ldr	r2, [pc, #56]	; (801e8a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e866:	480f      	ldr	r0, [pc, #60]	; (801e8a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e868:	f006 ffd8 	bl	802581c <__assert_func>
 801e86c:	462a      	mov	r2, r5
 801e86e:	4620      	mov	r0, r4
 801e870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e874:	f7ff be92 	b.w	801e59c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e878:	6802      	ldr	r2, [r0, #0]
 801e87a:	2600      	movs	r6, #0
 801e87c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e880:	68d6      	ldr	r6, [r2, #12]
 801e882:	462b      	mov	r3, r5
 801e884:	460a      	mov	r2, r1
 801e886:	4621      	mov	r1, r4
 801e888:	46b4      	mov	ip, r6
 801e88a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e88e:	4760      	bx	ip
 801e890:	4b05      	ldr	r3, [pc, #20]	; (801e8a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e892:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801e896:	4a02      	ldr	r2, [pc, #8]	; (801e8a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e898:	e7e5      	b.n	801e866 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e89a:	bd70      	pop	{r4, r5, r6, pc}
 801e89c:	0802b142 	.word	0x0802b142
 801e8a0:	0802b7ff 	.word	0x0802b7ff
 801e8a4:	0802af6b 	.word	0x0802af6b
 801e8a8:	0802b183 	.word	0x0802b183

0801e8ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e8ac:	b158      	cbz	r0, 801e8c6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e8ae:	2902      	cmp	r1, #2
 801e8b0:	d00f      	beq.n	801e8d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e8b2:	2903      	cmp	r1, #3
 801e8b4:	d010      	beq.n	801e8d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e8b6:	2901      	cmp	r1, #1
 801e8b8:	d101      	bne.n	801e8be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e8ba:	2001      	movs	r0, #1
 801e8bc:	4770      	bx	lr
 801e8be:	4b08      	ldr	r3, [pc, #32]	; (801e8e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e8c0:	8819      	ldrh	r1, [r3, #0]
 801e8c2:	4248      	negs	r0, r1
 801e8c4:	4770      	bx	lr
 801e8c6:	2902      	cmp	r1, #2
 801e8c8:	d006      	beq.n	801e8d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e8ca:	2903      	cmp	r1, #3
 801e8cc:	d0f7      	beq.n	801e8be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e8ce:	2901      	cmp	r1, #1
 801e8d0:	d1f3      	bne.n	801e8ba <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e8d2:	4b03      	ldr	r3, [pc, #12]	; (801e8e0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e8d4:	8818      	ldrh	r0, [r3, #0]
 801e8d6:	4770      	bx	lr
 801e8d8:	f04f 30ff 	mov.w	r0, #4294967295
 801e8dc:	4770      	bx	lr
 801e8de:	bf00      	nop
 801e8e0:	2000b36a 	.word	0x2000b36a

0801e8e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e8e4:	b170      	cbz	r0, 801e904 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e8e6:	2902      	cmp	r1, #2
 801e8e8:	d012      	beq.n	801e910 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e8ea:	2903      	cmp	r1, #3
 801e8ec:	d006      	beq.n	801e8fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e8ee:	2901      	cmp	r1, #1
 801e8f0:	d001      	beq.n	801e8f6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e8f2:	2001      	movs	r0, #1
 801e8f4:	4770      	bx	lr
 801e8f6:	4b08      	ldr	r3, [pc, #32]	; (801e918 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e8f8:	8818      	ldrh	r0, [r3, #0]
 801e8fa:	4770      	bx	lr
 801e8fc:	4b06      	ldr	r3, [pc, #24]	; (801e918 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e8fe:	8818      	ldrh	r0, [r3, #0]
 801e900:	4240      	negs	r0, r0
 801e902:	4770      	bx	lr
 801e904:	2902      	cmp	r1, #2
 801e906:	d0f9      	beq.n	801e8fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e908:	2903      	cmp	r1, #3
 801e90a:	d0f2      	beq.n	801e8f2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e90c:	2901      	cmp	r1, #1
 801e90e:	d1f2      	bne.n	801e8f6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e910:	f04f 30ff 	mov.w	r0, #4294967295
 801e914:	4770      	bx	lr
 801e916:	bf00      	nop
 801e918:	2000b36a 	.word	0x2000b36a

0801e91c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e920:	b097      	sub	sp, #92	; 0x5c
 801e922:	910b      	str	r1, [sp, #44]	; 0x2c
 801e924:	a912      	add	r1, sp, #72	; 0x48
 801e926:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801e92a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801e92e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801e932:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801e936:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801e93a:	e881 000c 	stmia.w	r1, {r2, r3}
 801e93e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801e942:	9308      	str	r3, [sp, #32]
 801e944:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801e948:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801e94c:	9310      	str	r3, [sp, #64]	; 0x40
 801e94e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801e952:	798d      	ldrb	r5, [r1, #6]
 801e954:	930c      	str	r3, [sp, #48]	; 0x30
 801e956:	7b4b      	ldrb	r3, [r1, #13]
 801e958:	0158      	lsls	r0, r3, #5
 801e95a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e95e:	4328      	orrs	r0, r5
 801e960:	9007      	str	r0, [sp, #28]
 801e962:	f000 8184 	beq.w	801ec6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e966:	011b      	lsls	r3, r3, #4
 801e968:	79c8      	ldrb	r0, [r1, #7]
 801e96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e96e:	4303      	orrs	r3, r0
 801e970:	9309      	str	r3, [sp, #36]	; 0x24
 801e972:	f000 817c 	beq.w	801ec6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e976:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e97a:	b29b      	uxth	r3, r3
 801e97c:	2f00      	cmp	r7, #0
 801e97e:	f000 8122 	beq.w	801ebc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801e982:	1aff      	subs	r7, r7, r3
 801e984:	b2bf      	uxth	r7, r7
 801e986:	043b      	lsls	r3, r7, #16
 801e988:	d502      	bpl.n	801e990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e98a:	1bf6      	subs	r6, r6, r7
 801e98c:	2700      	movs	r7, #0
 801e98e:	b236      	sxth	r6, r6
 801e990:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e994:	a812      	add	r0, sp, #72	; 0x48
 801e996:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e99a:	428e      	cmp	r6, r1
 801e99c:	b28b      	uxth	r3, r1
 801e99e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801e9a2:	bfbf      	itttt	lt
 801e9a4:	18ff      	addlt	r7, r7, r3
 801e9a6:	1bbe      	sublt	r6, r7, r6
 801e9a8:	b2b7      	uxthlt	r7, r6
 801e9aa:	460e      	movlt	r6, r1
 801e9ac:	8891      	ldrh	r1, [r2, #4]
 801e9ae:	440b      	add	r3, r1
 801e9b0:	4631      	mov	r1, r6
 801e9b2:	b21b      	sxth	r3, r3
 801e9b4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9b6:	88d3      	ldrh	r3, [r2, #6]
 801e9b8:	9a08      	ldr	r2, [sp, #32]
 801e9ba:	449a      	add	sl, r3
 801e9bc:	fa0f f38a 	sxth.w	r3, sl
 801e9c0:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801e9c4:	930e      	str	r3, [sp, #56]	; 0x38
 801e9c6:	4bb2      	ldr	r3, [pc, #712]	; (801ec90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801e9c8:	f893 b000 	ldrb.w	fp, [r3]
 801e9cc:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e9d0:	f1dc 0300 	rsbs	r3, ip, #0
 801e9d4:	eb43 030c 	adc.w	r3, r3, ip
 801e9d8:	930d      	str	r3, [sp, #52]	; 0x34
 801e9da:	464b      	mov	r3, r9
 801e9dc:	f7fa faee 	bl	8018fbc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e9e0:	4631      	mov	r1, r6
 801e9e2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801e9e6:	464b      	mov	r3, r9
 801e9e8:	9a08      	ldr	r2, [sp, #32]
 801e9ea:	a812      	add	r0, sp, #72	; 0x48
 801e9ec:	f7fa fafe 	bl	8018fec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e9f0:	a916      	add	r1, sp, #88	; 0x58
 801e9f2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e9f6:	a815      	add	r0, sp, #84	; 0x54
 801e9f8:	f7fa fbd8 	bl	80191ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e9fc:	f1b9 0f00 	cmp.w	r9, #0
 801ea00:	f040 80e4 	bne.w	801ebcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 801ea04:	f1bb 0f01 	cmp.w	fp, #1
 801ea08:	f040 80e8 	bne.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 801ea0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	f040 8132 	bne.w	801ec78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801ea14:	4b9f      	ldr	r3, [pc, #636]	; (801ec94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801ea16:	6818      	ldr	r0, [r3, #0]
 801ea18:	6803      	ldr	r3, [r0, #0]
 801ea1a:	6a1b      	ldr	r3, [r3, #32]
 801ea1c:	4798      	blx	r3
 801ea1e:	4a9e      	ldr	r2, [pc, #632]	; (801ec98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801ea20:	f1b8 0f01 	cmp.w	r8, #1
 801ea24:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801ea28:	8811      	ldrh	r1, [r2, #0]
 801ea2a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801ea2e:	fb01 2303 	mla	r3, r1, r3, r2
 801ea32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea36:	4403      	add	r3, r0
 801ea38:	9309      	str	r3, [sp, #36]	; 0x24
 801ea3a:	f04f 0301 	mov.w	r3, #1
 801ea3e:	fa03 f308 	lsl.w	r3, r3, r8
 801ea42:	f103 33ff 	add.w	r3, r3, #4294967295
 801ea46:	b2db      	uxtb	r3, r3
 801ea48:	9311      	str	r3, [sp, #68]	; 0x44
 801ea4a:	f000 8117 	beq.w	801ec7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 801ea4e:	f1b8 0f02 	cmp.w	r8, #2
 801ea52:	f000 8115 	beq.w	801ec80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 801ea56:	f1b8 0f04 	cmp.w	r8, #4
 801ea5a:	bf14      	ite	ne
 801ea5c:	2301      	movne	r3, #1
 801ea5e:	2311      	moveq	r3, #17
 801ea60:	930a      	str	r3, [sp, #40]	; 0x28
 801ea62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea64:	b153      	cbz	r3, 801ea7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801ea66:	2508      	movs	r5, #8
 801ea68:	9a07      	ldr	r2, [sp, #28]
 801ea6a:	fb95 f3f8 	sdiv	r3, r5, r8
 801ea6e:	1e5d      	subs	r5, r3, #1
 801ea70:	4415      	add	r5, r2
 801ea72:	fb95 f5f3 	sdiv	r5, r5, r3
 801ea76:	fb15 f503 	smulbb	r5, r5, r3
 801ea7a:	b2ad      	uxth	r5, r5
 801ea7c:	b907      	cbnz	r7, 801ea80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 801ea7e:	b174      	cbz	r4, 801ea9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 801ea80:	fb15 7304 	smlabb	r3, r5, r4, r7
 801ea84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ea86:	ebaa 0a04 	sub.w	sl, sl, r4
 801ea8a:	fb13 f308 	smulbb	r3, r3, r8
 801ea8e:	fa1f fa8a 	uxth.w	sl, sl
 801ea92:	b29b      	uxth	r3, r3
 801ea94:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ea98:	f003 0407 	and.w	r4, r3, #7
 801ea9c:	9226      	str	r2, [sp, #152]	; 0x98
 801ea9e:	4649      	mov	r1, r9
 801eaa0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eaa2:	f7ff ff03 	bl	801e8ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801eaa6:	4649      	mov	r1, r9
 801eaa8:	4683      	mov	fp, r0
 801eaaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eaac:	f7ff ff1a 	bl	801e8e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801eab0:	9a08      	ldr	r2, [sp, #32]
 801eab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eab4:	1bf6      	subs	r6, r6, r7
 801eab6:	1a9b      	subs	r3, r3, r2
 801eab8:	459a      	cmp	sl, r3
 801eaba:	bfa8      	it	ge
 801eabc:	469a      	movge	sl, r3
 801eabe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eac0:	1b9e      	subs	r6, r3, r6
 801eac2:	9b07      	ldr	r3, [sp, #28]
 801eac4:	429e      	cmp	r6, r3
 801eac6:	bfd4      	ite	le
 801eac8:	ebc7 0706 	rsble	r7, r7, r6
 801eacc:	ebc7 0703 	rsbgt	r7, r7, r3
 801ead0:	1bed      	subs	r5, r5, r7
 801ead2:	fb0b 0017 	mls	r0, fp, r7, r0
 801ead6:	fb08 f305 	mul.w	r3, r8, r5
 801eada:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eade:	9308      	str	r3, [sp, #32]
 801eae0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eae2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801eae6:	930d      	str	r3, [sp, #52]	; 0x34
 801eae8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eaee:	930e      	str	r3, [sp, #56]	; 0x38
 801eaf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaf2:	b2de      	uxtb	r6, r3
 801eaf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eaf6:	781a      	ldrb	r2, [r3, #0]
 801eaf8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801eafc:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 801eb00:	4122      	asrs	r2, r4
 801eb02:	9307      	str	r3, [sp, #28]
 801eb04:	fb03 0b0b 	mla	fp, r3, fp, r0
 801eb08:	b2d2      	uxtb	r2, r2
 801eb0a:	f1ba 0f00 	cmp.w	sl, #0
 801eb0e:	f340 80d8 	ble.w	801ecc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 801eb12:	46be      	mov	lr, r7
 801eb14:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eb16:	f1be 0f00 	cmp.w	lr, #0
 801eb1a:	f340 80bf 	ble.w	801ec9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801eb1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb20:	4013      	ands	r3, r2
 801eb22:	d03e      	beq.n	801eba2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801eb24:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eb26:	fb13 f300 	smulbb	r3, r3, r0
 801eb2a:	2bfe      	cmp	r3, #254	; 0xfe
 801eb2c:	dd03      	ble.n	801eb36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 801eb2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eb30:	28ff      	cmp	r0, #255	; 0xff
 801eb32:	f000 80a7 	beq.w	801ec84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 801eb36:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eb38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801eb3a:	fb10 f303 	smulbb	r3, r0, r3
 801eb3e:	b29b      	uxth	r3, r3
 801eb40:	1c58      	adds	r0, r3, #1
 801eb42:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801eb46:	7808      	ldrb	r0, [r1, #0]
 801eb48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eb4c:	fa1f fc83 	uxth.w	ip, r3
 801eb50:	43db      	mvns	r3, r3
 801eb52:	fb16 f90c 	smulbb	r9, r6, ip
 801eb56:	b2db      	uxtb	r3, r3
 801eb58:	fb00 9003 	mla	r0, r0, r3, r9
 801eb5c:	b280      	uxth	r0, r0
 801eb5e:	f100 0901 	add.w	r9, r0, #1
 801eb62:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801eb66:	fb15 f90c 	smulbb	r9, r5, ip
 801eb6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801eb6c:	1200      	asrs	r0, r0, #8
 801eb6e:	fb15 fc0c 	smulbb	ip, r5, ip
 801eb72:	7008      	strb	r0, [r1, #0]
 801eb74:	7848      	ldrb	r0, [r1, #1]
 801eb76:	fb00 9003 	mla	r0, r0, r3, r9
 801eb7a:	b280      	uxth	r0, r0
 801eb7c:	f100 0901 	add.w	r9, r0, #1
 801eb80:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801eb84:	1200      	asrs	r0, r0, #8
 801eb86:	7048      	strb	r0, [r1, #1]
 801eb88:	7888      	ldrb	r0, [r1, #2]
 801eb8a:	fb00 cc03 	mla	ip, r0, r3, ip
 801eb8e:	fa1f fc8c 	uxth.w	ip, ip
 801eb92:	f10c 0301 	add.w	r3, ip, #1
 801eb96:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eb9a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eb9e:	f881 c002 	strb.w	ip, [r1, #2]
 801eba2:	4444      	add	r4, r8
 801eba4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eba8:	b2a4      	uxth	r4, r4
 801ebaa:	2c07      	cmp	r4, #7
 801ebac:	bf89      	itett	hi
 801ebae:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801ebb0:	fa42 f208 	asrls.w	r2, r2, r8
 801ebb4:	2400      	movhi	r4, #0
 801ebb6:	785a      	ldrbhi	r2, [r3, #1]
 801ebb8:	bf8a      	itet	hi
 801ebba:	3301      	addhi	r3, #1
 801ebbc:	b2d2      	uxtbls	r2, r2
 801ebbe:	9326      	strhi	r3, [sp, #152]	; 0x98
 801ebc0:	9b07      	ldr	r3, [sp, #28]
 801ebc2:	4419      	add	r1, r3
 801ebc4:	e7a7      	b.n	801eb16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 801ebc6:	441e      	add	r6, r3
 801ebc8:	b236      	sxth	r6, r6
 801ebca:	e6e1      	b.n	801e990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ebcc:	f1b9 0f01 	cmp.w	r9, #1
 801ebd0:	f47f af1c 	bne.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebd4:	f1bb 0f01 	cmp.w	fp, #1
 801ebd8:	f47f af18 	bne.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ebdc:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801ec94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ebe0:	f8db 0000 	ldr.w	r0, [fp]
 801ebe4:	6803      	ldr	r3, [r0, #0]
 801ebe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ebe8:	4798      	blx	r3
 801ebea:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ebee:	465a      	mov	r2, fp
 801ebf0:	d006      	beq.n	801ec00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801ebf2:	f1b8 0f04 	cmp.w	r8, #4
 801ebf6:	d13d      	bne.n	801ec74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 801ebf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebfa:	3300      	adds	r3, #0
 801ebfc:	bf18      	it	ne
 801ebfe:	2301      	movne	r3, #1
 801ec00:	05c0      	lsls	r0, r0, #23
 801ec02:	d567      	bpl.n	801ecd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801ec04:	f1b8 0f08 	cmp.w	r8, #8
 801ec08:	d164      	bne.n	801ecd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	bf0c      	ite	eq
 801ec0e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ec12:	2180      	movne	r1, #128	; 0x80
 801ec14:	2f00      	cmp	r7, #0
 801ec16:	f47f aef9 	bne.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ec1a:	2c00      	cmp	r4, #0
 801ec1c:	f47f aef6 	bne.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ec20:	9b07      	ldr	r3, [sp, #28]
 801ec22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ec24:	18f3      	adds	r3, r6, r3
 801ec26:	4283      	cmp	r3, r0
 801ec28:	f73f aef0 	bgt.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ec2c:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 801ec30:	4403      	add	r3, r0
 801ec32:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ec34:	4283      	cmp	r3, r0
 801ec36:	f73f aee9 	bgt.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ec3a:	f1b8 0f08 	cmp.w	r8, #8
 801ec3e:	6810      	ldr	r0, [r2, #0]
 801ec40:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801ec44:	bf18      	it	ne
 801ec46:	3501      	addne	r5, #1
 801ec48:	6804      	ldr	r4, [r0, #0]
 801ec4a:	9105      	str	r1, [sp, #20]
 801ec4c:	bf18      	it	ne
 801ec4e:	f025 0501 	bicne.w	r5, r5, #1
 801ec52:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ec54:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801ec58:	bf18      	it	ne
 801ec5a:	b2ad      	uxthne	r5, r5
 801ec5c:	9104      	str	r1, [sp, #16]
 801ec5e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ec60:	e9cd 5a00 	strd	r5, sl, [sp]
 801ec64:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801ec68:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ec6a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801ec6c:	47a0      	blx	r4
 801ec6e:	b017      	add	sp, #92	; 0x5c
 801ec70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec74:	2300      	movs	r3, #0
 801ec76:	e7c3      	b.n	801ec00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801ec78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ec7a:	e6d0      	b.n	801ea1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801ec7c:	23ff      	movs	r3, #255	; 0xff
 801ec7e:	e6ef      	b.n	801ea60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801ec80:	2355      	movs	r3, #85	; 0x55
 801ec82:	e6ed      	b.n	801ea60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801ec84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec86:	700e      	strb	r6, [r1, #0]
 801ec88:	704b      	strb	r3, [r1, #1]
 801ec8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec8c:	708b      	strb	r3, [r1, #2]
 801ec8e:	e788      	b.n	801eba2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 801ec90:	2000b368 	.word	0x2000b368
 801ec94:	2000b370 	.word	0x2000b370
 801ec98:	2000b36a 	.word	0x2000b36a
 801ec9c:	9b08      	ldr	r3, [sp, #32]
 801ec9e:	b153      	cbz	r3, 801ecb6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801eca0:	441c      	add	r4, r3
 801eca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eca4:	b2a4      	uxth	r4, r4
 801eca6:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ecaa:	f004 0407 	and.w	r4, r4, #7
 801ecae:	781a      	ldrb	r2, [r3, #0]
 801ecb0:	9326      	str	r3, [sp, #152]	; 0x98
 801ecb2:	4122      	asrs	r2, r4
 801ecb4:	b2d2      	uxtb	r2, r2
 801ecb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ecbc:	445b      	add	r3, fp
 801ecbe:	9309      	str	r3, [sp, #36]	; 0x24
 801ecc0:	e723      	b.n	801eb0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801ecc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d1d2      	bne.n	801ec6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ecc8:	4b05      	ldr	r3, [pc, #20]	; (801ece0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 801ecca:	6818      	ldr	r0, [r3, #0]
 801eccc:	6803      	ldr	r3, [r0, #0]
 801ecce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecd0:	4798      	blx	r3
 801ecd2:	e7cc      	b.n	801ec6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	f43f ae99 	beq.w	801ea0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ecda:	2180      	movs	r1, #128	; 0x80
 801ecdc:	e79a      	b.n	801ec14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 801ecde:	bf00      	nop
 801ece0:	2000b370 	.word	0x2000b370

0801ece4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ece4:	b538      	push	{r3, r4, r5, lr}
 801ece6:	4c15      	ldr	r4, [pc, #84]	; (801ed3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ece8:	4605      	mov	r5, r0
 801ecea:	7823      	ldrb	r3, [r4, #0]
 801ecec:	f3bf 8f5b 	dmb	ish
 801ecf0:	07da      	lsls	r2, r3, #31
 801ecf2:	d40b      	bmi.n	801ed0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ecf4:	4620      	mov	r0, r4
 801ecf6:	f006 fd67 	bl	80257c8 <__cxa_guard_acquire>
 801ecfa:	b138      	cbz	r0, 801ed0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ecfc:	4620      	mov	r0, r4
 801ecfe:	f006 fd6f 	bl	80257e0 <__cxa_guard_release>
 801ed02:	4a0f      	ldr	r2, [pc, #60]	; (801ed40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ed04:	490f      	ldr	r1, [pc, #60]	; (801ed44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ed06:	4810      	ldr	r0, [pc, #64]	; (801ed48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ed08:	f006 fd54 	bl	80257b4 <__aeabi_atexit>
 801ed0c:	4c0f      	ldr	r4, [pc, #60]	; (801ed4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ed0e:	7823      	ldrb	r3, [r4, #0]
 801ed10:	f3bf 8f5b 	dmb	ish
 801ed14:	07db      	lsls	r3, r3, #31
 801ed16:	d40b      	bmi.n	801ed30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ed18:	4620      	mov	r0, r4
 801ed1a:	f006 fd55 	bl	80257c8 <__cxa_guard_acquire>
 801ed1e:	b138      	cbz	r0, 801ed30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ed20:	4620      	mov	r0, r4
 801ed22:	f006 fd5d 	bl	80257e0 <__cxa_guard_release>
 801ed26:	4a06      	ldr	r2, [pc, #24]	; (801ed40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ed28:	4909      	ldr	r1, [pc, #36]	; (801ed50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ed2a:	480a      	ldr	r0, [pc, #40]	; (801ed54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ed2c:	f006 fd42 	bl	80257b4 <__aeabi_atexit>
 801ed30:	4b05      	ldr	r3, [pc, #20]	; (801ed48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ed32:	612b      	str	r3, [r5, #16]
 801ed34:	4b07      	ldr	r3, [pc, #28]	; (801ed54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ed36:	616b      	str	r3, [r5, #20]
 801ed38:	bd38      	pop	{r3, r4, r5, pc}
 801ed3a:	bf00      	nop
 801ed3c:	2000b47c 	.word	0x2000b47c
 801ed40:	20000000 	.word	0x20000000
 801ed44:	0801d6c3 	.word	0x0801d6c3
 801ed48:	20000084 	.word	0x20000084
 801ed4c:	2000b480 	.word	0x2000b480
 801ed50:	0801d6c1 	.word	0x0801d6c1
 801ed54:	20000088 	.word	0x20000088

0801ed58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ed58:	b538      	push	{r3, r4, r5, lr}
 801ed5a:	4c15      	ldr	r4, [pc, #84]	; (801edb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ed5c:	4605      	mov	r5, r0
 801ed5e:	7823      	ldrb	r3, [r4, #0]
 801ed60:	f3bf 8f5b 	dmb	ish
 801ed64:	07da      	lsls	r2, r3, #31
 801ed66:	d40b      	bmi.n	801ed80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ed68:	4620      	mov	r0, r4
 801ed6a:	f006 fd2d 	bl	80257c8 <__cxa_guard_acquire>
 801ed6e:	b138      	cbz	r0, 801ed80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ed70:	4620      	mov	r0, r4
 801ed72:	f006 fd35 	bl	80257e0 <__cxa_guard_release>
 801ed76:	4a0f      	ldr	r2, [pc, #60]	; (801edb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ed78:	490f      	ldr	r1, [pc, #60]	; (801edb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ed7a:	4810      	ldr	r0, [pc, #64]	; (801edbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ed7c:	f006 fd1a 	bl	80257b4 <__aeabi_atexit>
 801ed80:	4c0f      	ldr	r4, [pc, #60]	; (801edc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ed82:	7823      	ldrb	r3, [r4, #0]
 801ed84:	f3bf 8f5b 	dmb	ish
 801ed88:	07db      	lsls	r3, r3, #31
 801ed8a:	d40b      	bmi.n	801eda4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ed8c:	4620      	mov	r0, r4
 801ed8e:	f006 fd1b 	bl	80257c8 <__cxa_guard_acquire>
 801ed92:	b138      	cbz	r0, 801eda4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ed94:	4620      	mov	r0, r4
 801ed96:	f006 fd23 	bl	80257e0 <__cxa_guard_release>
 801ed9a:	4a06      	ldr	r2, [pc, #24]	; (801edb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ed9c:	4909      	ldr	r1, [pc, #36]	; (801edc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ed9e:	480a      	ldr	r0, [pc, #40]	; (801edc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801eda0:	f006 fd08 	bl	80257b4 <__aeabi_atexit>
 801eda4:	4b05      	ldr	r3, [pc, #20]	; (801edbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801eda6:	60ab      	str	r3, [r5, #8]
 801eda8:	4b07      	ldr	r3, [pc, #28]	; (801edc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801edaa:	60eb      	str	r3, [r5, #12]
 801edac:	bd38      	pop	{r3, r4, r5, pc}
 801edae:	bf00      	nop
 801edb0:	2000b45c 	.word	0x2000b45c
 801edb4:	20000000 	.word	0x20000000
 801edb8:	0801d6c7 	.word	0x0801d6c7
 801edbc:	20000064 	.word	0x20000064
 801edc0:	2000b460 	.word	0x2000b460
 801edc4:	0801d6c5 	.word	0x0801d6c5
 801edc8:	20000068 	.word	0x20000068

0801edcc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801edcc:	b510      	push	{r4, lr}
 801edce:	4604      	mov	r4, r0
 801edd0:	f7ff ff88 	bl	801ece4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801edd4:	4620      	mov	r0, r4
 801edd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edda:	f7ff bfbd 	b.w	801ed58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ede0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ede0:	b538      	push	{r3, r4, r5, lr}
 801ede2:	4c15      	ldr	r4, [pc, #84]	; (801ee38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ede4:	4605      	mov	r5, r0
 801ede6:	7823      	ldrb	r3, [r4, #0]
 801ede8:	f3bf 8f5b 	dmb	ish
 801edec:	07da      	lsls	r2, r3, #31
 801edee:	d40b      	bmi.n	801ee08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801edf0:	4620      	mov	r0, r4
 801edf2:	f006 fce9 	bl	80257c8 <__cxa_guard_acquire>
 801edf6:	b138      	cbz	r0, 801ee08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801edf8:	4620      	mov	r0, r4
 801edfa:	f006 fcf1 	bl	80257e0 <__cxa_guard_release>
 801edfe:	4a0f      	ldr	r2, [pc, #60]	; (801ee3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ee00:	490f      	ldr	r1, [pc, #60]	; (801ee40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ee02:	4810      	ldr	r0, [pc, #64]	; (801ee44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ee04:	f006 fcd6 	bl	80257b4 <__aeabi_atexit>
 801ee08:	4c0f      	ldr	r4, [pc, #60]	; (801ee48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ee0a:	7823      	ldrb	r3, [r4, #0]
 801ee0c:	f3bf 8f5b 	dmb	ish
 801ee10:	07db      	lsls	r3, r3, #31
 801ee12:	d40b      	bmi.n	801ee2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ee14:	4620      	mov	r0, r4
 801ee16:	f006 fcd7 	bl	80257c8 <__cxa_guard_acquire>
 801ee1a:	b138      	cbz	r0, 801ee2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ee1c:	4620      	mov	r0, r4
 801ee1e:	f006 fcdf 	bl	80257e0 <__cxa_guard_release>
 801ee22:	4a06      	ldr	r2, [pc, #24]	; (801ee3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ee24:	4909      	ldr	r1, [pc, #36]	; (801ee4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ee26:	480a      	ldr	r0, [pc, #40]	; (801ee50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ee28:	f006 fcc4 	bl	80257b4 <__aeabi_atexit>
 801ee2c:	4b05      	ldr	r3, [pc, #20]	; (801ee44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ee2e:	622b      	str	r3, [r5, #32]
 801ee30:	4b07      	ldr	r3, [pc, #28]	; (801ee50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ee32:	626b      	str	r3, [r5, #36]	; 0x24
 801ee34:	bd38      	pop	{r3, r4, r5, pc}
 801ee36:	bf00      	nop
 801ee38:	2000b484 	.word	0x2000b484
 801ee3c:	20000000 	.word	0x20000000
 801ee40:	0801d6bb 	.word	0x0801d6bb
 801ee44:	2000008c 	.word	0x2000008c
 801ee48:	2000b488 	.word	0x2000b488
 801ee4c:	0801d6b9 	.word	0x0801d6b9
 801ee50:	20000090 	.word	0x20000090

0801ee54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ee54:	b538      	push	{r3, r4, r5, lr}
 801ee56:	4c15      	ldr	r4, [pc, #84]	; (801eeac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ee58:	4605      	mov	r5, r0
 801ee5a:	7823      	ldrb	r3, [r4, #0]
 801ee5c:	f3bf 8f5b 	dmb	ish
 801ee60:	07da      	lsls	r2, r3, #31
 801ee62:	d40b      	bmi.n	801ee7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ee64:	4620      	mov	r0, r4
 801ee66:	f006 fcaf 	bl	80257c8 <__cxa_guard_acquire>
 801ee6a:	b138      	cbz	r0, 801ee7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	f006 fcb7 	bl	80257e0 <__cxa_guard_release>
 801ee72:	4a0f      	ldr	r2, [pc, #60]	; (801eeb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ee74:	490f      	ldr	r1, [pc, #60]	; (801eeb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ee76:	4810      	ldr	r0, [pc, #64]	; (801eeb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ee78:	f006 fc9c 	bl	80257b4 <__aeabi_atexit>
 801ee7c:	4c0f      	ldr	r4, [pc, #60]	; (801eebc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ee7e:	7823      	ldrb	r3, [r4, #0]
 801ee80:	f3bf 8f5b 	dmb	ish
 801ee84:	07db      	lsls	r3, r3, #31
 801ee86:	d40b      	bmi.n	801eea0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ee88:	4620      	mov	r0, r4
 801ee8a:	f006 fc9d 	bl	80257c8 <__cxa_guard_acquire>
 801ee8e:	b138      	cbz	r0, 801eea0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ee90:	4620      	mov	r0, r4
 801ee92:	f006 fca5 	bl	80257e0 <__cxa_guard_release>
 801ee96:	4a06      	ldr	r2, [pc, #24]	; (801eeb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ee98:	4909      	ldr	r1, [pc, #36]	; (801eec0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ee9a:	480a      	ldr	r0, [pc, #40]	; (801eec4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ee9c:	f006 fc8a 	bl	80257b4 <__aeabi_atexit>
 801eea0:	4b05      	ldr	r3, [pc, #20]	; (801eeb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801eea2:	61ab      	str	r3, [r5, #24]
 801eea4:	4b07      	ldr	r3, [pc, #28]	; (801eec4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801eea6:	61eb      	str	r3, [r5, #28]
 801eea8:	bd38      	pop	{r3, r4, r5, pc}
 801eeaa:	bf00      	nop
 801eeac:	2000b464 	.word	0x2000b464
 801eeb0:	20000000 	.word	0x20000000
 801eeb4:	0801d6bf 	.word	0x0801d6bf
 801eeb8:	2000006c 	.word	0x2000006c
 801eebc:	2000b468 	.word	0x2000b468
 801eec0:	0801d6bd 	.word	0x0801d6bd
 801eec4:	20000070 	.word	0x20000070

0801eec8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801eec8:	b510      	push	{r4, lr}
 801eeca:	4604      	mov	r4, r0
 801eecc:	f7ff ff88 	bl	801ede0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801eed0:	4620      	mov	r0, r4
 801eed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eed6:	f7ff bfbd 	b.w	801ee54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801eedc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801eedc:	b538      	push	{r3, r4, r5, lr}
 801eede:	4c15      	ldr	r4, [pc, #84]	; (801ef34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801eee0:	4605      	mov	r5, r0
 801eee2:	7823      	ldrb	r3, [r4, #0]
 801eee4:	f3bf 8f5b 	dmb	ish
 801eee8:	07da      	lsls	r2, r3, #31
 801eeea:	d40b      	bmi.n	801ef04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eeec:	4620      	mov	r0, r4
 801eeee:	f006 fc6b 	bl	80257c8 <__cxa_guard_acquire>
 801eef2:	b138      	cbz	r0, 801ef04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eef4:	4620      	mov	r0, r4
 801eef6:	f006 fc73 	bl	80257e0 <__cxa_guard_release>
 801eefa:	4a0f      	ldr	r2, [pc, #60]	; (801ef38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eefc:	490f      	ldr	r1, [pc, #60]	; (801ef3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801eefe:	4810      	ldr	r0, [pc, #64]	; (801ef40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ef00:	f006 fc58 	bl	80257b4 <__aeabi_atexit>
 801ef04:	4c0f      	ldr	r4, [pc, #60]	; (801ef44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801ef06:	7823      	ldrb	r3, [r4, #0]
 801ef08:	f3bf 8f5b 	dmb	ish
 801ef0c:	07db      	lsls	r3, r3, #31
 801ef0e:	d40b      	bmi.n	801ef28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801ef10:	4620      	mov	r0, r4
 801ef12:	f006 fc59 	bl	80257c8 <__cxa_guard_acquire>
 801ef16:	b138      	cbz	r0, 801ef28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801ef18:	4620      	mov	r0, r4
 801ef1a:	f006 fc61 	bl	80257e0 <__cxa_guard_release>
 801ef1e:	4a06      	ldr	r2, [pc, #24]	; (801ef38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ef20:	4909      	ldr	r1, [pc, #36]	; (801ef48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801ef22:	480a      	ldr	r0, [pc, #40]	; (801ef4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ef24:	f006 fc46 	bl	80257b4 <__aeabi_atexit>
 801ef28:	4b05      	ldr	r3, [pc, #20]	; (801ef40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ef2a:	632b      	str	r3, [r5, #48]	; 0x30
 801ef2c:	4b07      	ldr	r3, [pc, #28]	; (801ef4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ef2e:	636b      	str	r3, [r5, #52]	; 0x34
 801ef30:	bd38      	pop	{r3, r4, r5, pc}
 801ef32:	bf00      	nop
 801ef34:	2000b46c 	.word	0x2000b46c
 801ef38:	20000000 	.word	0x20000000
 801ef3c:	0801d6b3 	.word	0x0801d6b3
 801ef40:	20000074 	.word	0x20000074
 801ef44:	2000b470 	.word	0x2000b470
 801ef48:	0801d6b1 	.word	0x0801d6b1
 801ef4c:	20000078 	.word	0x20000078

0801ef50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ef50:	b538      	push	{r3, r4, r5, lr}
 801ef52:	4c15      	ldr	r4, [pc, #84]	; (801efa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ef54:	4605      	mov	r5, r0
 801ef56:	7823      	ldrb	r3, [r4, #0]
 801ef58:	f3bf 8f5b 	dmb	ish
 801ef5c:	07da      	lsls	r2, r3, #31
 801ef5e:	d40b      	bmi.n	801ef78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ef60:	4620      	mov	r0, r4
 801ef62:	f006 fc31 	bl	80257c8 <__cxa_guard_acquire>
 801ef66:	b138      	cbz	r0, 801ef78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ef68:	4620      	mov	r0, r4
 801ef6a:	f006 fc39 	bl	80257e0 <__cxa_guard_release>
 801ef6e:	4a0f      	ldr	r2, [pc, #60]	; (801efac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ef70:	490f      	ldr	r1, [pc, #60]	; (801efb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ef72:	4810      	ldr	r0, [pc, #64]	; (801efb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ef74:	f006 fc1e 	bl	80257b4 <__aeabi_atexit>
 801ef78:	4c0f      	ldr	r4, [pc, #60]	; (801efb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ef7a:	7823      	ldrb	r3, [r4, #0]
 801ef7c:	f3bf 8f5b 	dmb	ish
 801ef80:	07db      	lsls	r3, r3, #31
 801ef82:	d40b      	bmi.n	801ef9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ef84:	4620      	mov	r0, r4
 801ef86:	f006 fc1f 	bl	80257c8 <__cxa_guard_acquire>
 801ef8a:	b138      	cbz	r0, 801ef9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ef8c:	4620      	mov	r0, r4
 801ef8e:	f006 fc27 	bl	80257e0 <__cxa_guard_release>
 801ef92:	4a06      	ldr	r2, [pc, #24]	; (801efac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ef94:	4909      	ldr	r1, [pc, #36]	; (801efbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ef96:	480a      	ldr	r0, [pc, #40]	; (801efc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ef98:	f006 fc0c 	bl	80257b4 <__aeabi_atexit>
 801ef9c:	4b05      	ldr	r3, [pc, #20]	; (801efb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ef9e:	62ab      	str	r3, [r5, #40]	; 0x28
 801efa0:	4b07      	ldr	r3, [pc, #28]	; (801efc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801efa2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801efa4:	bd38      	pop	{r3, r4, r5, pc}
 801efa6:	bf00      	nop
 801efa8:	2000b444 	.word	0x2000b444
 801efac:	20000000 	.word	0x20000000
 801efb0:	0801d6b7 	.word	0x0801d6b7
 801efb4:	2000004c 	.word	0x2000004c
 801efb8:	2000b448 	.word	0x2000b448
 801efbc:	0801d6b5 	.word	0x0801d6b5
 801efc0:	20000050 	.word	0x20000050

0801efc4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801efc4:	b510      	push	{r4, lr}
 801efc6:	4604      	mov	r4, r0
 801efc8:	f7ff ff88 	bl	801eedc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801efcc:	4620      	mov	r0, r4
 801efce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801efd2:	f7ff bfbd 	b.w	801ef50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801efd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801efd8:	b538      	push	{r3, r4, r5, lr}
 801efda:	4c15      	ldr	r4, [pc, #84]	; (801f030 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801efdc:	4605      	mov	r5, r0
 801efde:	7823      	ldrb	r3, [r4, #0]
 801efe0:	f3bf 8f5b 	dmb	ish
 801efe4:	07da      	lsls	r2, r3, #31
 801efe6:	d40b      	bmi.n	801f000 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801efe8:	4620      	mov	r0, r4
 801efea:	f006 fbed 	bl	80257c8 <__cxa_guard_acquire>
 801efee:	b138      	cbz	r0, 801f000 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eff0:	4620      	mov	r0, r4
 801eff2:	f006 fbf5 	bl	80257e0 <__cxa_guard_release>
 801eff6:	4a0f      	ldr	r2, [pc, #60]	; (801f034 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eff8:	490f      	ldr	r1, [pc, #60]	; (801f038 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801effa:	4810      	ldr	r0, [pc, #64]	; (801f03c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801effc:	f006 fbda 	bl	80257b4 <__aeabi_atexit>
 801f000:	4c0f      	ldr	r4, [pc, #60]	; (801f040 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f002:	7823      	ldrb	r3, [r4, #0]
 801f004:	f3bf 8f5b 	dmb	ish
 801f008:	07db      	lsls	r3, r3, #31
 801f00a:	d40b      	bmi.n	801f024 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f00c:	4620      	mov	r0, r4
 801f00e:	f006 fbdb 	bl	80257c8 <__cxa_guard_acquire>
 801f012:	b138      	cbz	r0, 801f024 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f014:	4620      	mov	r0, r4
 801f016:	f006 fbe3 	bl	80257e0 <__cxa_guard_release>
 801f01a:	4a06      	ldr	r2, [pc, #24]	; (801f034 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f01c:	4909      	ldr	r1, [pc, #36]	; (801f044 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f01e:	480a      	ldr	r0, [pc, #40]	; (801f048 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f020:	f006 fbc8 	bl	80257b4 <__aeabi_atexit>
 801f024:	4b05      	ldr	r3, [pc, #20]	; (801f03c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f026:	642b      	str	r3, [r5, #64]	; 0x40
 801f028:	4b07      	ldr	r3, [pc, #28]	; (801f048 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f02a:	646b      	str	r3, [r5, #68]	; 0x44
 801f02c:	bd38      	pop	{r3, r4, r5, pc}
 801f02e:	bf00      	nop
 801f030:	2000b474 	.word	0x2000b474
 801f034:	20000000 	.word	0x20000000
 801f038:	0801d6ab 	.word	0x0801d6ab
 801f03c:	2000007c 	.word	0x2000007c
 801f040:	2000b478 	.word	0x2000b478
 801f044:	0801d6a9 	.word	0x0801d6a9
 801f048:	20000080 	.word	0x20000080

0801f04c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f04c:	b538      	push	{r3, r4, r5, lr}
 801f04e:	4c15      	ldr	r4, [pc, #84]	; (801f0a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f050:	4605      	mov	r5, r0
 801f052:	7823      	ldrb	r3, [r4, #0]
 801f054:	f3bf 8f5b 	dmb	ish
 801f058:	07da      	lsls	r2, r3, #31
 801f05a:	d40b      	bmi.n	801f074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f05c:	4620      	mov	r0, r4
 801f05e:	f006 fbb3 	bl	80257c8 <__cxa_guard_acquire>
 801f062:	b138      	cbz	r0, 801f074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f064:	4620      	mov	r0, r4
 801f066:	f006 fbbb 	bl	80257e0 <__cxa_guard_release>
 801f06a:	4a0f      	ldr	r2, [pc, #60]	; (801f0a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f06c:	490f      	ldr	r1, [pc, #60]	; (801f0ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f06e:	4810      	ldr	r0, [pc, #64]	; (801f0b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f070:	f006 fba0 	bl	80257b4 <__aeabi_atexit>
 801f074:	4c0f      	ldr	r4, [pc, #60]	; (801f0b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f076:	7823      	ldrb	r3, [r4, #0]
 801f078:	f3bf 8f5b 	dmb	ish
 801f07c:	07db      	lsls	r3, r3, #31
 801f07e:	d40b      	bmi.n	801f098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f080:	4620      	mov	r0, r4
 801f082:	f006 fba1 	bl	80257c8 <__cxa_guard_acquire>
 801f086:	b138      	cbz	r0, 801f098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f088:	4620      	mov	r0, r4
 801f08a:	f006 fba9 	bl	80257e0 <__cxa_guard_release>
 801f08e:	4a06      	ldr	r2, [pc, #24]	; (801f0a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f090:	4909      	ldr	r1, [pc, #36]	; (801f0b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f092:	480a      	ldr	r0, [pc, #40]	; (801f0bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f094:	f006 fb8e 	bl	80257b4 <__aeabi_atexit>
 801f098:	4b05      	ldr	r3, [pc, #20]	; (801f0b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f09a:	63ab      	str	r3, [r5, #56]	; 0x38
 801f09c:	4b07      	ldr	r3, [pc, #28]	; (801f0bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f09e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f0a0:	bd38      	pop	{r3, r4, r5, pc}
 801f0a2:	bf00      	nop
 801f0a4:	2000b454 	.word	0x2000b454
 801f0a8:	20000000 	.word	0x20000000
 801f0ac:	0801d6af 	.word	0x0801d6af
 801f0b0:	2000005c 	.word	0x2000005c
 801f0b4:	2000b458 	.word	0x2000b458
 801f0b8:	0801d6ad 	.word	0x0801d6ad
 801f0bc:	20000060 	.word	0x20000060

0801f0c0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f0c0:	b510      	push	{r4, lr}
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	f7ff ff88 	bl	801efd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f0c8:	4620      	mov	r0, r4
 801f0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0ce:	f7ff bfbd 	b.w	801f04c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f0d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f0d4:	b538      	push	{r3, r4, r5, lr}
 801f0d6:	4c15      	ldr	r4, [pc, #84]	; (801f12c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f0d8:	4605      	mov	r5, r0
 801f0da:	7823      	ldrb	r3, [r4, #0]
 801f0dc:	f3bf 8f5b 	dmb	ish
 801f0e0:	07da      	lsls	r2, r3, #31
 801f0e2:	d40b      	bmi.n	801f0fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f0e4:	4620      	mov	r0, r4
 801f0e6:	f006 fb6f 	bl	80257c8 <__cxa_guard_acquire>
 801f0ea:	b138      	cbz	r0, 801f0fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f0ec:	4620      	mov	r0, r4
 801f0ee:	f006 fb77 	bl	80257e0 <__cxa_guard_release>
 801f0f2:	4a0f      	ldr	r2, [pc, #60]	; (801f130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f0f4:	490f      	ldr	r1, [pc, #60]	; (801f134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f0f6:	4810      	ldr	r0, [pc, #64]	; (801f138 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f0f8:	f006 fb5c 	bl	80257b4 <__aeabi_atexit>
 801f0fc:	4c0f      	ldr	r4, [pc, #60]	; (801f13c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f0fe:	7823      	ldrb	r3, [r4, #0]
 801f100:	f3bf 8f5b 	dmb	ish
 801f104:	07db      	lsls	r3, r3, #31
 801f106:	d40b      	bmi.n	801f120 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f108:	4620      	mov	r0, r4
 801f10a:	f006 fb5d 	bl	80257c8 <__cxa_guard_acquire>
 801f10e:	b138      	cbz	r0, 801f120 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f110:	4620      	mov	r0, r4
 801f112:	f006 fb65 	bl	80257e0 <__cxa_guard_release>
 801f116:	4a06      	ldr	r2, [pc, #24]	; (801f130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f118:	4909      	ldr	r1, [pc, #36]	; (801f140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f11a:	480a      	ldr	r0, [pc, #40]	; (801f144 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f11c:	f006 fb4a 	bl	80257b4 <__aeabi_atexit>
 801f120:	4b05      	ldr	r3, [pc, #20]	; (801f138 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f122:	652b      	str	r3, [r5, #80]	; 0x50
 801f124:	4b07      	ldr	r3, [pc, #28]	; (801f144 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f126:	656b      	str	r3, [r5, #84]	; 0x54
 801f128:	bd38      	pop	{r3, r4, r5, pc}
 801f12a:	bf00      	nop
 801f12c:	2000b44c 	.word	0x2000b44c
 801f130:	20000000 	.word	0x20000000
 801f134:	0801d6a3 	.word	0x0801d6a3
 801f138:	20000054 	.word	0x20000054
 801f13c:	2000b450 	.word	0x2000b450
 801f140:	0801d6a1 	.word	0x0801d6a1
 801f144:	20000058 	.word	0x20000058

0801f148 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f148:	b538      	push	{r3, r4, r5, lr}
 801f14a:	4c15      	ldr	r4, [pc, #84]	; (801f1a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f14c:	4605      	mov	r5, r0
 801f14e:	7823      	ldrb	r3, [r4, #0]
 801f150:	f3bf 8f5b 	dmb	ish
 801f154:	07da      	lsls	r2, r3, #31
 801f156:	d40b      	bmi.n	801f170 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f158:	4620      	mov	r0, r4
 801f15a:	f006 fb35 	bl	80257c8 <__cxa_guard_acquire>
 801f15e:	b138      	cbz	r0, 801f170 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f160:	4620      	mov	r0, r4
 801f162:	f006 fb3d 	bl	80257e0 <__cxa_guard_release>
 801f166:	4a0f      	ldr	r2, [pc, #60]	; (801f1a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f168:	490f      	ldr	r1, [pc, #60]	; (801f1a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f16a:	4810      	ldr	r0, [pc, #64]	; (801f1ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f16c:	f006 fb22 	bl	80257b4 <__aeabi_atexit>
 801f170:	4c0f      	ldr	r4, [pc, #60]	; (801f1b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f172:	7823      	ldrb	r3, [r4, #0]
 801f174:	f3bf 8f5b 	dmb	ish
 801f178:	07db      	lsls	r3, r3, #31
 801f17a:	d40b      	bmi.n	801f194 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f17c:	4620      	mov	r0, r4
 801f17e:	f006 fb23 	bl	80257c8 <__cxa_guard_acquire>
 801f182:	b138      	cbz	r0, 801f194 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f184:	4620      	mov	r0, r4
 801f186:	f006 fb2b 	bl	80257e0 <__cxa_guard_release>
 801f18a:	4a06      	ldr	r2, [pc, #24]	; (801f1a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f18c:	4909      	ldr	r1, [pc, #36]	; (801f1b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f18e:	480a      	ldr	r0, [pc, #40]	; (801f1b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f190:	f006 fb10 	bl	80257b4 <__aeabi_atexit>
 801f194:	4b05      	ldr	r3, [pc, #20]	; (801f1ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f196:	64ab      	str	r3, [r5, #72]	; 0x48
 801f198:	4b07      	ldr	r3, [pc, #28]	; (801f1b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f19a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f19c:	bd38      	pop	{r3, r4, r5, pc}
 801f19e:	bf00      	nop
 801f1a0:	2000b43c 	.word	0x2000b43c
 801f1a4:	20000000 	.word	0x20000000
 801f1a8:	0801d6a7 	.word	0x0801d6a7
 801f1ac:	20000044 	.word	0x20000044
 801f1b0:	2000b440 	.word	0x2000b440
 801f1b4:	0801d6a5 	.word	0x0801d6a5
 801f1b8:	20000048 	.word	0x20000048

0801f1bc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f1bc:	b510      	push	{r4, lr}
 801f1be:	4604      	mov	r4, r0
 801f1c0:	f7ff ff88 	bl	801f0d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1ca:	f7ff bfbd 	b.w	801f148 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f1ce <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f1ce:	b510      	push	{r4, lr}
 801f1d0:	4604      	mov	r4, r0
 801f1d2:	f7ff fff3 	bl	801f1bc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f1d6:	4620      	mov	r0, r4
 801f1d8:	f7ff ff72 	bl	801f0c0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f1dc:	4620      	mov	r0, r4
 801f1de:	f7ff fe73 	bl	801eec8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f1e2:	4620      	mov	r0, r4
 801f1e4:	f7ff fdf2 	bl	801edcc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f1e8:	4620      	mov	r0, r4
 801f1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1ee:	f7ff bee9 	b.w	801efc4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f1f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1f8:	b087      	sub	sp, #28
 801f1fa:	7888      	ldrb	r0, [r1, #2]
 801f1fc:	4616      	mov	r6, r2
 801f1fe:	9001      	str	r0, [sp, #4]
 801f200:	7848      	ldrb	r0, [r1, #1]
 801f202:	9100      	str	r1, [sp, #0]
 801f204:	9002      	str	r0, [sp, #8]
 801f206:	7808      	ldrb	r0, [r1, #0]
 801f208:	9901      	ldr	r1, [sp, #4]
 801f20a:	9003      	str	r0, [sp, #12]
 801f20c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f210:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f218:	9902      	ldr	r1, [sp, #8]
 801f21a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f21e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801f222:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f226:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f22a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f22e:	9005      	str	r0, [sp, #20]
 801f230:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f234:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f238:	2d00      	cmp	r5, #0
 801f23a:	eb06 080a 	add.w	r8, r6, sl
 801f23e:	db4a      	blt.n	801f2d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f240:	45a9      	cmp	r9, r5
 801f242:	dd48      	ble.n	801f2d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801f244:	f1bc 0f00 	cmp.w	ip, #0
 801f248:	db43      	blt.n	801f2d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f24a:	45e6      	cmp	lr, ip
 801f24c:	dd41      	ble.n	801f2d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801f24e:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f252:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f256:	441e      	add	r6, r3
 801f258:	f11c 0001 	adds.w	r0, ip, #1
 801f25c:	d43e      	bmi.n	801f2dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f25e:	4586      	cmp	lr, r0
 801f260:	dd3c      	ble.n	801f2dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f262:	2a00      	cmp	r2, #0
 801f264:	d03a      	beq.n	801f2dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801f266:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f26a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f26e:	4418      	add	r0, r3
 801f270:	3501      	adds	r5, #1
 801f272:	d437      	bmi.n	801f2e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f274:	45a9      	cmp	r9, r5
 801f276:	dd35      	ble.n	801f2e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f278:	b3a4      	cbz	r4, 801f2e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801f27a:	f1bc 0f00 	cmp.w	ip, #0
 801f27e:	db2f      	blt.n	801f2e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f280:	45e6      	cmp	lr, ip
 801f282:	dd2d      	ble.n	801f2e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801f284:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f28c:	441d      	add	r5, r3
 801f28e:	f11c 0c01 	adds.w	ip, ip, #1
 801f292:	d42a      	bmi.n	801f2ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f294:	45e6      	cmp	lr, ip
 801f296:	dd28      	ble.n	801f2ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f298:	b33a      	cbz	r2, 801f2ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801f29a:	44c6      	add	lr, r8
 801f29c:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f2a0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f2a4:	4463      	add	r3, ip
 801f2a6:	ea6f 0c07 	mvn.w	ip, r7
 801f2aa:	2a0f      	cmp	r2, #15
 801f2ac:	f896 a000 	ldrb.w	sl, [r6]
 801f2b0:	fa5f fc8c 	uxtb.w	ip, ip
 801f2b4:	f890 b000 	ldrb.w	fp, [r0]
 801f2b8:	f895 9000 	ldrb.w	r9, [r5]
 801f2bc:	7819      	ldrb	r1, [r3, #0]
 801f2be:	d801      	bhi.n	801f2c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801f2c0:	2c0f      	cmp	r4, #15
 801f2c2:	d914      	bls.n	801f2ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801f2c4:	4b40      	ldr	r3, [pc, #256]	; (801f3c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f2c6:	f240 11a5 	movw	r1, #421	; 0x1a5
 801f2ca:	4a40      	ldr	r2, [pc, #256]	; (801f3cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f2cc:	4840      	ldr	r0, [pc, #256]	; (801f3d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801f2ce:	f006 faa5 	bl	802581c <__assert_func>
 801f2d2:	ae05      	add	r6, sp, #20
 801f2d4:	e7c0      	b.n	801f258 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801f2d6:	a805      	add	r0, sp, #20
 801f2d8:	4606      	mov	r6, r0
 801f2da:	e7c9      	b.n	801f270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f2dc:	a805      	add	r0, sp, #20
 801f2de:	e7c7      	b.n	801f270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f2e0:	ad05      	add	r5, sp, #20
 801f2e2:	e7d4      	b.n	801f28e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801f2e4:	ab05      	add	r3, sp, #20
 801f2e6:	461d      	mov	r5, r3
 801f2e8:	e7dd      	b.n	801f2a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f2ea:	ab05      	add	r3, sp, #20
 801f2ec:	e7db      	b.n	801f2a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f2ee:	b292      	uxth	r2, r2
 801f2f0:	b2a4      	uxth	r4, r4
 801f2f2:	fa1f fc8c 	uxth.w	ip, ip
 801f2f6:	fb02 f804 	mul.w	r8, r2, r4
 801f2fa:	0112      	lsls	r2, r2, #4
 801f2fc:	b2bf      	uxth	r7, r7
 801f2fe:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f302:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f306:	eba2 0208 	sub.w	r2, r2, r8
 801f30a:	b2a4      	uxth	r4, r4
 801f30c:	b292      	uxth	r2, r2
 801f30e:	ebae 0e04 	sub.w	lr, lr, r4
 801f312:	fb02 fb0b 	mul.w	fp, r2, fp
 801f316:	fa1f fe8e 	uxth.w	lr, lr
 801f31a:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f31e:	fb04 aa09 	mla	sl, r4, r9, sl
 801f322:	fb08 aa01 	mla	sl, r8, r1, sl
 801f326:	9903      	ldr	r1, [sp, #12]
 801f328:	fb11 f90c 	smulbb	r9, r1, ip
 801f32c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f330:	9900      	ldr	r1, [sp, #0]
 801f332:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f336:	fa1f fa8a 	uxth.w	sl, sl
 801f33a:	f10a 0901 	add.w	r9, sl, #1
 801f33e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f342:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f346:	f881 a000 	strb.w	sl, [r1]
 801f34a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f34e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f352:	fb02 fa0a 	mul.w	sl, r2, sl
 801f356:	9902      	ldr	r1, [sp, #8]
 801f358:	fb0e aa09 	mla	sl, lr, r9, sl
 801f35c:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f360:	fb04 aa09 	mla	sl, r4, r9, sl
 801f364:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f368:	fb08 a909 	mla	r9, r8, r9, sl
 801f36c:	fb11 fa0c 	smulbb	sl, r1, ip
 801f370:	9900      	ldr	r1, [sp, #0]
 801f372:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f376:	fb09 a907 	mla	r9, r9, r7, sl
 801f37a:	fa1f f989 	uxth.w	r9, r9
 801f37e:	f109 0a01 	add.w	sl, r9, #1
 801f382:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f386:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f38a:	f881 9001 	strb.w	r9, [r1, #1]
 801f38e:	7880      	ldrb	r0, [r0, #2]
 801f390:	78b6      	ldrb	r6, [r6, #2]
 801f392:	4342      	muls	r2, r0
 801f394:	78a8      	ldrb	r0, [r5, #2]
 801f396:	789b      	ldrb	r3, [r3, #2]
 801f398:	fb0e 2206 	mla	r2, lr, r6, r2
 801f39c:	fb04 2400 	mla	r4, r4, r0, r2
 801f3a0:	fb08 4803 	mla	r8, r8, r3, r4
 801f3a4:	9b01      	ldr	r3, [sp, #4]
 801f3a6:	fb13 fc0c 	smulbb	ip, r3, ip
 801f3aa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f3ae:	fb08 c707 	mla	r7, r8, r7, ip
 801f3b2:	b2bf      	uxth	r7, r7
 801f3b4:	f107 0c01 	add.w	ip, r7, #1
 801f3b8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f3bc:	123f      	asrs	r7, r7, #8
 801f3be:	708f      	strb	r7, [r1, #2]
 801f3c0:	b007      	add	sp, #28
 801f3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3c6:	bf00      	nop
 801f3c8:	0802b131 	.word	0x0802b131
 801f3cc:	0802b626 	.word	0x0802b626
 801f3d0:	0802b1fa 	.word	0x0802b1fa

0801f3d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3d8:	ed2d 8b08 	vpush	{d8-d11}
 801f3dc:	b095      	sub	sp, #84	; 0x54
 801f3de:	eeb0 aa40 	vmov.f32	s20, s0
 801f3e2:	eef0 9a60 	vmov.f32	s19, s1
 801f3e6:	930a      	str	r3, [sp, #40]	; 0x28
 801f3e8:	eeb0 9a41 	vmov.f32	s18, s2
 801f3ec:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f3f0:	eeb0 8a62 	vmov.f32	s16, s5
 801f3f4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801f3f6:	eef0 8a43 	vmov.f32	s17, s6
 801f3fa:	930c      	str	r3, [sp, #48]	; 0x30
 801f3fc:	eef0 ba44 	vmov.f32	s23, s8
 801f400:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f404:	eeb0 ba64 	vmov.f32	s22, s9
 801f408:	9013      	str	r0, [sp, #76]	; 0x4c
 801f40a:	eef0 aa45 	vmov.f32	s21, s10
 801f40e:	9310      	str	r3, [sp, #64]	; 0x40
 801f410:	6860      	ldr	r0, [r4, #4]
 801f412:	910f      	str	r1, [sp, #60]	; 0x3c
 801f414:	9212      	str	r2, [sp, #72]	; 0x48
 801f416:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f418:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f41c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f420:	fb00 1303 	mla	r3, r0, r3, r1
 801f424:	6821      	ldr	r1, [r4, #0]
 801f426:	6854      	ldr	r4, [r2, #4]
 801f428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f42c:	18cb      	adds	r3, r1, r3
 801f42e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f430:	6813      	ldr	r3, [r2, #0]
 801f432:	930e      	str	r3, [sp, #56]	; 0x38
 801f434:	1d23      	adds	r3, r4, #4
 801f436:	9309      	str	r3, [sp, #36]	; 0x24
 801f438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f43a:	43db      	mvns	r3, r3
 801f43c:	b2db      	uxtb	r3, r3
 801f43e:	930d      	str	r3, [sp, #52]	; 0x34
 801f440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f442:	2b00      	cmp	r3, #0
 801f444:	dc03      	bgt.n	801f44e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f448:	2b00      	cmp	r3, #0
 801f44a:	f340 823c 	ble.w	801f8c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f450:	2b00      	cmp	r3, #0
 801f452:	f340 8115 	ble.w	801f680 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f456:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f458:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f45a:	1412      	asrs	r2, r2, #16
 801f45c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f460:	d431      	bmi.n	801f4c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f462:	1c51      	adds	r1, r2, #1
 801f464:	428d      	cmp	r5, r1
 801f466:	dd31      	ble.n	801f4cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f468:	2b00      	cmp	r3, #0
 801f46a:	db2f      	blt.n	801f4cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f46c:	1c59      	adds	r1, r3, #1
 801f46e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f470:	4288      	cmp	r0, r1
 801f472:	dd2b      	ble.n	801f4cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f476:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f478:	3b01      	subs	r3, #1
 801f47a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f47c:	fb02 1203 	mla	r2, r2, r3, r1
 801f480:	1412      	asrs	r2, r2, #16
 801f482:	d42d      	bmi.n	801f4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f484:	3201      	adds	r2, #1
 801f486:	4295      	cmp	r5, r2
 801f488:	dd2a      	ble.n	801f4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f48a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f48c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f48e:	fb02 1303 	mla	r3, r2, r3, r1
 801f492:	141b      	asrs	r3, r3, #16
 801f494:	d424      	bmi.n	801f4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f496:	3301      	adds	r3, #1
 801f498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f49a:	429a      	cmp	r2, r3
 801f49c:	dd20      	ble.n	801f4e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4a0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f4a4:	f103 0c03 	add.w	ip, r3, #3
 801f4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4aa:	9311      	str	r3, [sp, #68]	; 0x44
 801f4ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	f300 814f 	bgt.w	801f752 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f4b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4c0:	441a      	add	r2, r3
 801f4c2:	920b      	str	r2, [sp, #44]	; 0x2c
 801f4c4:	e0de      	b.n	801f684 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f4c6:	1c51      	adds	r1, r2, #1
 801f4c8:	f040 80cb 	bne.w	801f662 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4cc:	42aa      	cmp	r2, r5
 801f4ce:	f280 80c8 	bge.w	801f662 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4d2:	1c5f      	adds	r7, r3, #1
 801f4d4:	f2c0 80c5 	blt.w	801f662 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f4da:	4293      	cmp	r3, r2
 801f4dc:	f280 80c1 	bge.w	801f662 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f4e4:	9311      	str	r3, [sp, #68]	; 0x44
 801f4e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	dde3      	ble.n	801f4b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f4ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f4ee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f4f0:	141a      	asrs	r2, r3, #16
 801f4f2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f4f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f4f6:	1400      	asrs	r0, r0, #16
 801f4f8:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f4fc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f500:	f100 810e 	bmi.w	801f720 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f504:	1c46      	adds	r6, r0, #1
 801f506:	42b5      	cmp	r5, r6
 801f508:	f340 810c 	ble.w	801f724 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f50c:	2a00      	cmp	r2, #0
 801f50e:	f2c0 8109 	blt.w	801f724 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f512:	1c56      	adds	r6, r2, #1
 801f514:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f516:	42b4      	cmp	r4, r6
 801f518:	f340 8104 	ble.w	801f724 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f51c:	fb02 0005 	mla	r0, r2, r5, r0
 801f520:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f524:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f528:	4402      	add	r2, r0
 801f52a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f52c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f530:	eb00 080e 	add.w	r8, r0, lr
 801f534:	2b00      	cmp	r3, #0
 801f536:	f000 80e4 	beq.w	801f702 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f53a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f53e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f542:	4484      	add	ip, r0
 801f544:	2900      	cmp	r1, #0
 801f546:	f000 80e5 	beq.w	801f714 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f54a:	1950      	adds	r0, r2, r5
 801f54c:	5d52      	ldrb	r2, [r2, r5]
 801f54e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f550:	7840      	ldrb	r0, [r0, #1]
 801f552:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f556:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f55a:	4422      	add	r2, r4
 801f55c:	4420      	add	r0, r4
 801f55e:	b29b      	uxth	r3, r3
 801f560:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f562:	b289      	uxth	r1, r1
 801f564:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f568:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f56c:	fb03 fa01 	mul.w	sl, r3, r1
 801f570:	011b      	lsls	r3, r3, #4
 801f572:	f89c e000 	ldrb.w	lr, [ip]
 801f576:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f57a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f57e:	eba3 030a 	sub.w	r3, r3, sl
 801f582:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f584:	b289      	uxth	r1, r1
 801f586:	b29b      	uxth	r3, r3
 801f588:	eba9 0901 	sub.w	r9, r9, r1
 801f58c:	fb03 fe0e 	mul.w	lr, r3, lr
 801f590:	fa1f f989 	uxth.w	r9, r9
 801f594:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f598:	f892 b000 	ldrb.w	fp, [r2]
 801f59c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f5a0:	f890 b000 	ldrb.w	fp, [r0]
 801f5a4:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f5a8:	f897 b000 	ldrb.w	fp, [r7]
 801f5ac:	fb1b fb04 	smulbb	fp, fp, r4
 801f5b0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f5b4:	fb0e be06 	mla	lr, lr, r6, fp
 801f5b8:	fa1f fe8e 	uxth.w	lr, lr
 801f5bc:	f10e 0b01 	add.w	fp, lr, #1
 801f5c0:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f5c4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f5c8:	f887 b000 	strb.w	fp, [r7]
 801f5cc:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f5d0:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f5d4:	fb03 fe0e 	mul.w	lr, r3, lr
 801f5d8:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f5dc:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f5e0:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f5e4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f5e8:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f5ec:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f5f0:	fb1b fb04 	smulbb	fp, fp, r4
 801f5f4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f5f8:	fb0e be06 	mla	lr, lr, r6, fp
 801f5fc:	fa1f fe8e 	uxth.w	lr, lr
 801f600:	f10e 0b01 	add.w	fp, lr, #1
 801f604:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f608:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f60c:	f887 e001 	strb.w	lr, [r7, #1]
 801f610:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f614:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f618:	fb03 f30c 	mul.w	r3, r3, ip
 801f61c:	fb09 330e 	mla	r3, r9, lr, r3
 801f620:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f624:	7882      	ldrb	r2, [r0, #2]
 801f626:	fb01 310e 	mla	r1, r1, lr, r3
 801f62a:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f62e:	78b9      	ldrb	r1, [r7, #2]
 801f630:	fb11 f104 	smulbb	r1, r1, r4
 801f634:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f638:	fb0a 1606 	mla	r6, sl, r6, r1
 801f63c:	b2b6      	uxth	r6, r6
 801f63e:	1c73      	adds	r3, r6, #1
 801f640:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f644:	1236      	asrs	r6, r6, #8
 801f646:	70be      	strb	r6, [r7, #2]
 801f648:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f64a:	3703      	adds	r7, #3
 801f64c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f64e:	4413      	add	r3, r2
 801f650:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f652:	9327      	str	r3, [sp, #156]	; 0x9c
 801f654:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f656:	4413      	add	r3, r2
 801f658:	9328      	str	r3, [sp, #160]	; 0xa0
 801f65a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f65c:	3b01      	subs	r3, #1
 801f65e:	9311      	str	r3, [sp, #68]	; 0x44
 801f660:	e741      	b.n	801f4e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f662:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f664:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f666:	4413      	add	r3, r2
 801f668:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f66a:	9327      	str	r3, [sp, #156]	; 0x9c
 801f66c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f66e:	4413      	add	r3, r2
 801f670:	9328      	str	r3, [sp, #160]	; 0xa0
 801f672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f674:	3b01      	subs	r3, #1
 801f676:	930a      	str	r3, [sp, #40]	; 0x28
 801f678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f67a:	3303      	adds	r3, #3
 801f67c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f67e:	e6e6      	b.n	801f44e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f680:	f47f aef8 	bne.w	801f474 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f686:	2b00      	cmp	r3, #0
 801f688:	f340 811d 	ble.w	801f8c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f68c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f690:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f692:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f696:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f69a:	eef0 6a48 	vmov.f32	s13, s16
 801f69e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f6a2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f6a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6aa:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f6ae:	eef0 6a68 	vmov.f32	s13, s17
 801f6b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6b6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f6ba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f6be:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f6c2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f6c6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f6ca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f6ce:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f6d2:	ee18 2a10 	vmov	r2, s16
 801f6d6:	eeb0 8a47 	vmov.f32	s16, s14
 801f6da:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6de:	ee18 2a90 	vmov	r2, s17
 801f6e2:	9329      	str	r3, [sp, #164]	; 0xa4
 801f6e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f6e6:	eef0 8a67 	vmov.f32	s17, s15
 801f6ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6ee:	932a      	str	r3, [sp, #168]	; 0xa8
 801f6f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6f4:	3b01      	subs	r3, #1
 801f6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 801f6f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f6fa:	bf08      	it	eq
 801f6fc:	4613      	moveq	r3, r2
 801f6fe:	930a      	str	r3, [sp, #40]	; 0x28
 801f700:	e69e      	b.n	801f440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f702:	b151      	cbz	r1, 801f71a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f704:	5d52      	ldrb	r2, [r2, r5]
 801f706:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f708:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f70c:	4402      	add	r2, r0
 801f70e:	4640      	mov	r0, r8
 801f710:	46c4      	mov	ip, r8
 801f712:	e724      	b.n	801f55e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f714:	4640      	mov	r0, r8
 801f716:	4642      	mov	r2, r8
 801f718:	e721      	b.n	801f55e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f71a:	4640      	mov	r0, r8
 801f71c:	4642      	mov	r2, r8
 801f71e:	e7f7      	b.n	801f710 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f720:	1c46      	adds	r6, r0, #1
 801f722:	d191      	bne.n	801f648 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f724:	4285      	cmp	r5, r0
 801f726:	dd8f      	ble.n	801f648 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f728:	1c54      	adds	r4, r2, #1
 801f72a:	db8d      	blt.n	801f648 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f72c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f72e:	4294      	cmp	r4, r2
 801f730:	dd8a      	ble.n	801f648 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f732:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f734:	9002      	str	r0, [sp, #8]
 801f736:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f738:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f73e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f740:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f744:	e9cd 5300 	strd	r5, r3, [sp]
 801f748:	4639      	mov	r1, r7
 801f74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f74c:	f7ff fd52 	bl	801f1f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f750:	e77a      	b.n	801f648 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f752:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f754:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f756:	1410      	asrs	r0, r2, #16
 801f758:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f75c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f75e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f760:	1412      	asrs	r2, r2, #16
 801f762:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f766:	fb05 2000 	mla	r0, r5, r0, r2
 801f76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f76c:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f770:	4402      	add	r2, r0
 801f772:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f774:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f778:	eb00 0708 	add.w	r7, r0, r8
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	f000 8093 	beq.w	801f8a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f782:	7856      	ldrb	r6, [r2, #1]
 801f784:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f788:	4406      	add	r6, r0
 801f78a:	2900      	cmp	r1, #0
 801f78c:	f000 8095 	beq.w	801f8ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f790:	1950      	adds	r0, r2, r5
 801f792:	5d52      	ldrb	r2, [r2, r5]
 801f794:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f796:	7840      	ldrb	r0, [r0, #1]
 801f798:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f79c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f7a0:	4422      	add	r2, r4
 801f7a2:	4420      	add	r0, r4
 801f7a4:	b29b      	uxth	r3, r3
 801f7a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f7a8:	b289      	uxth	r1, r1
 801f7aa:	f10c 0c03 	add.w	ip, ip, #3
 801f7ae:	f814 b008 	ldrb.w	fp, [r4, r8]
 801f7b2:	fb03 f901 	mul.w	r9, r3, r1
 801f7b6:	011b      	lsls	r3, r3, #4
 801f7b8:	f896 8000 	ldrb.w	r8, [r6]
 801f7bc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f7c0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f7c4:	eba3 0309 	sub.w	r3, r3, r9
 801f7c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f7ca:	b289      	uxth	r1, r1
 801f7cc:	b29b      	uxth	r3, r3
 801f7ce:	ebae 0e01 	sub.w	lr, lr, r1
 801f7d2:	fb03 f808 	mul.w	r8, r3, r8
 801f7d6:	fa1f fe8e 	uxth.w	lr, lr
 801f7da:	fb0e 880b 	mla	r8, lr, fp, r8
 801f7de:	f892 b000 	ldrb.w	fp, [r2]
 801f7e2:	fb01 880b 	mla	r8, r1, fp, r8
 801f7e6:	f890 b000 	ldrb.w	fp, [r0]
 801f7ea:	fb09 880b 	mla	r8, r9, fp, r8
 801f7ee:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801f7f2:	fb1b fb04 	smulbb	fp, fp, r4
 801f7f6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f7fa:	fb08 b80a 	mla	r8, r8, sl, fp
 801f7fe:	fa1f f888 	uxth.w	r8, r8
 801f802:	f108 0b01 	add.w	fp, r8, #1
 801f806:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f80a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f80e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801f812:	f896 8001 	ldrb.w	r8, [r6, #1]
 801f816:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f81a:	fb03 f808 	mul.w	r8, r3, r8
 801f81e:	fb0e 880b 	mla	r8, lr, fp, r8
 801f822:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f826:	fb01 880b 	mla	r8, r1, fp, r8
 801f82a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f82e:	fb09 880b 	mla	r8, r9, fp, r8
 801f832:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801f836:	fb1b fb04 	smulbb	fp, fp, r4
 801f83a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f83e:	fb08 b80a 	mla	r8, r8, sl, fp
 801f842:	fa1f f888 	uxth.w	r8, r8
 801f846:	f108 0b01 	add.w	fp, r8, #1
 801f84a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f84e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f852:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801f856:	78b6      	ldrb	r6, [r6, #2]
 801f858:	78bf      	ldrb	r7, [r7, #2]
 801f85a:	4373      	muls	r3, r6
 801f85c:	7896      	ldrb	r6, [r2, #2]
 801f85e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f860:	fb0e 3307 	mla	r3, lr, r7, r3
 801f864:	fb01 3306 	mla	r3, r1, r6, r3
 801f868:	7886      	ldrb	r6, [r0, #2]
 801f86a:	fb09 3906 	mla	r9, r9, r6, r3
 801f86e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f872:	fb13 f304 	smulbb	r3, r3, r4
 801f876:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f87a:	fb09 390a 	mla	r9, r9, sl, r3
 801f87e:	fa1f f989 	uxth.w	r9, r9
 801f882:	f109 0301 	add.w	r3, r9, #1
 801f886:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f88a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f88c:	4413      	add	r3, r2
 801f88e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f890:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f894:	9327      	str	r3, [sp, #156]	; 0x9c
 801f896:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f898:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801f89c:	4413      	add	r3, r2
 801f89e:	9328      	str	r3, [sp, #160]	; 0xa0
 801f8a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f8a2:	3b01      	subs	r3, #1
 801f8a4:	9311      	str	r3, [sp, #68]	; 0x44
 801f8a6:	e601      	b.n	801f4ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f8a8:	b151      	cbz	r1, 801f8c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801f8aa:	5d52      	ldrb	r2, [r2, r5]
 801f8ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f8ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8b2:	4402      	add	r2, r0
 801f8b4:	4638      	mov	r0, r7
 801f8b6:	463e      	mov	r6, r7
 801f8b8:	e774      	b.n	801f7a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f8ba:	4638      	mov	r0, r7
 801f8bc:	463a      	mov	r2, r7
 801f8be:	e771      	b.n	801f7a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f8c0:	4638      	mov	r0, r7
 801f8c2:	463a      	mov	r2, r7
 801f8c4:	e7f7      	b.n	801f8b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f8c6:	b015      	add	sp, #84	; 0x54
 801f8c8:	ecbd 8b08 	vpop	{d8-d11}
 801f8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f8d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8d4:	780d      	ldrb	r5, [r1, #0]
 801f8d6:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f8da:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801f8de:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f8e2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f8e6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f8ea:	f891 9001 	ldrb.w	r9, [r1, #1]
 801f8ee:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f8f2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f8f6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f8fa:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f8fe:	9501      	str	r5, [sp, #4]
 801f900:	fb06 470c 	mla	r7, r6, ip, r4
 801f904:	2e00      	cmp	r6, #0
 801f906:	eb02 0e07 	add.w	lr, r2, r7
 801f90a:	db46      	blt.n	801f99a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f90c:	45b0      	cmp	r8, r6
 801f90e:	dd44      	ble.n	801f99a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f910:	2c00      	cmp	r4, #0
 801f912:	db40      	blt.n	801f996 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f914:	45a4      	cmp	ip, r4
 801f916:	dd3e      	ble.n	801f996 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f918:	5dd7      	ldrb	r7, [r2, r7]
 801f91a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f91e:	441f      	add	r7, r3
 801f920:	1c62      	adds	r2, r4, #1
 801f922:	d43d      	bmi.n	801f9a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f924:	4594      	cmp	ip, r2
 801f926:	dd3b      	ble.n	801f9a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f928:	f1ba 0f00 	cmp.w	sl, #0
 801f92c:	d038      	beq.n	801f9a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f92e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f936:	441d      	add	r5, r3
 801f938:	3601      	adds	r6, #1
 801f93a:	d435      	bmi.n	801f9a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f93c:	45b0      	cmp	r8, r6
 801f93e:	dd33      	ble.n	801f9a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f940:	b390      	cbz	r0, 801f9a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f942:	2c00      	cmp	r4, #0
 801f944:	db2e      	blt.n	801f9a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f946:	45a4      	cmp	ip, r4
 801f948:	dd2c      	ble.n	801f9a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f94a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f94e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f952:	441e      	add	r6, r3
 801f954:	1c62      	adds	r2, r4, #1
 801f956:	d42a      	bmi.n	801f9ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f958:	4594      	cmp	ip, r2
 801f95a:	dd28      	ble.n	801f9ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f95c:	f1ba 0f00 	cmp.w	sl, #0
 801f960:	d025      	beq.n	801f9ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f962:	44f4      	add	ip, lr
 801f964:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f968:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f96c:	4413      	add	r3, r2
 801f96e:	f1ba 0f0f 	cmp.w	sl, #15
 801f972:	f897 8000 	ldrb.w	r8, [r7]
 801f976:	f895 9000 	ldrb.w	r9, [r5]
 801f97a:	f896 e000 	ldrb.w	lr, [r6]
 801f97e:	f893 c000 	ldrb.w	ip, [r3]
 801f982:	d801      	bhi.n	801f988 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f984:	280f      	cmp	r0, #15
 801f986:	d914      	bls.n	801f9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f988:	4b29      	ldr	r3, [pc, #164]	; (801fa30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f98a:	f240 11a5 	movw	r1, #421	; 0x1a5
 801f98e:	4a29      	ldr	r2, [pc, #164]	; (801fa34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f990:	4829      	ldr	r0, [pc, #164]	; (801fa38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f992:	f005 ff43 	bl	802581c <__assert_func>
 801f996:	af01      	add	r7, sp, #4
 801f998:	e7c2      	b.n	801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f99a:	ad01      	add	r5, sp, #4
 801f99c:	462f      	mov	r7, r5
 801f99e:	e7cb      	b.n	801f938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f9a0:	ad01      	add	r5, sp, #4
 801f9a2:	e7c9      	b.n	801f938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f9a4:	ae01      	add	r6, sp, #4
 801f9a6:	e7d5      	b.n	801f954 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f9a8:	ab01      	add	r3, sp, #4
 801f9aa:	461e      	mov	r6, r3
 801f9ac:	e7df      	b.n	801f96e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f9ae:	ab01      	add	r3, sp, #4
 801f9b0:	e7dd      	b.n	801f96e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f9b2:	fa1f f48a 	uxth.w	r4, sl
 801f9b6:	b280      	uxth	r0, r0
 801f9b8:	fb04 fa00 	mul.w	sl, r4, r0
 801f9bc:	0124      	lsls	r4, r4, #4
 801f9be:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f9c2:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f9c6:	b282      	uxth	r2, r0
 801f9c8:	eba4 000a 	sub.w	r0, r4, sl
 801f9cc:	ebab 0b02 	sub.w	fp, fp, r2
 801f9d0:	b280      	uxth	r0, r0
 801f9d2:	fa1f fb8b 	uxth.w	fp, fp
 801f9d6:	fb00 f909 	mul.w	r9, r0, r9
 801f9da:	fb0b 9808 	mla	r8, fp, r8, r9
 801f9de:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f9e2:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f9e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f9ea:	f881 c000 	strb.w	ip, [r1]
 801f9ee:	786c      	ldrb	r4, [r5, #1]
 801f9f0:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f9f4:	4344      	muls	r4, r0
 801f9f6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f9fa:	7874      	ldrb	r4, [r6, #1]
 801f9fc:	fb02 cc04 	mla	ip, r2, r4, ip
 801fa00:	785c      	ldrb	r4, [r3, #1]
 801fa02:	fb0a c404 	mla	r4, sl, r4, ip
 801fa06:	1224      	asrs	r4, r4, #8
 801fa08:	704c      	strb	r4, [r1, #1]
 801fa0a:	78ad      	ldrb	r5, [r5, #2]
 801fa0c:	78bc      	ldrb	r4, [r7, #2]
 801fa0e:	4368      	muls	r0, r5
 801fa10:	fb0b 0b04 	mla	fp, fp, r4, r0
 801fa14:	78b0      	ldrb	r0, [r6, #2]
 801fa16:	fb02 b000 	mla	r0, r2, r0, fp
 801fa1a:	789a      	ldrb	r2, [r3, #2]
 801fa1c:	fb0a 0a02 	mla	sl, sl, r2, r0
 801fa20:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fa24:	f881 a002 	strb.w	sl, [r1, #2]
 801fa28:	b003      	add	sp, #12
 801fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa2e:	bf00      	nop
 801fa30:	0802b131 	.word	0x0802b131
 801fa34:	0802b626 	.word	0x0802b626
 801fa38:	0802b1fa 	.word	0x0802b1fa

0801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa40:	ed2d 8b0a 	vpush	{d8-d12}
 801fa44:	b08f      	sub	sp, #60	; 0x3c
 801fa46:	eeb0 aa40 	vmov.f32	s20, s0
 801fa4a:	eef0 9a60 	vmov.f32	s19, s1
 801fa4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801fa50:	eeb0 9a41 	vmov.f32	s18, s2
 801fa54:	9307      	str	r3, [sp, #28]
 801fa56:	eeb0 8a62 	vmov.f32	s16, s5
 801fa5a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801fa5e:	eef0 8a43 	vmov.f32	s17, s6
 801fa62:	900d      	str	r0, [sp, #52]	; 0x34
 801fa64:	eeb0 ca44 	vmov.f32	s24, s8
 801fa68:	6860      	ldr	r0, [r4, #4]
 801fa6a:	eef0 ba64 	vmov.f32	s23, s9
 801fa6e:	9309      	str	r3, [sp, #36]	; 0x24
 801fa70:	eeb0 ba45 	vmov.f32	s22, s10
 801fa74:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801fa78:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801fa7c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801fa80:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801fa84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fa86:	fb00 1303 	mla	r3, r0, r3, r1
 801fa8a:	6821      	ldr	r1, [r4, #0]
 801fa8c:	6854      	ldr	r4, [r2, #4]
 801fa8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa92:	3404      	adds	r4, #4
 801fa94:	18cb      	adds	r3, r1, r3
 801fa96:	9308      	str	r3, [sp, #32]
 801fa98:	6813      	ldr	r3, [r2, #0]
 801fa9a:	930a      	str	r3, [sp, #40]	; 0x28
 801fa9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	dc03      	bgt.n	801faaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801faa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	f340 81d2 	ble.w	801fe4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801faaa:	9b07      	ldr	r3, [sp, #28]
 801faac:	2b00      	cmp	r3, #0
 801faae:	f340 80e3 	ble.w	801fc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801fab2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fab4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fab6:	1412      	asrs	r2, r2, #16
 801fab8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fabc:	d42f      	bmi.n	801fb1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801fabe:	1c51      	adds	r1, r2, #1
 801fac0:	428d      	cmp	r5, r1
 801fac2:	dd2f      	ble.n	801fb24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	db2d      	blt.n	801fb24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fac8:	1c59      	adds	r1, r3, #1
 801faca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801facc:	4288      	cmp	r0, r1
 801face:	dd29      	ble.n	801fb24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801fad0:	9b07      	ldr	r3, [sp, #28]
 801fad2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fad4:	3b01      	subs	r3, #1
 801fad6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801fad8:	fb02 1203 	mla	r2, r2, r3, r1
 801fadc:	1412      	asrs	r2, r2, #16
 801fade:	d42b      	bmi.n	801fb38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fae0:	3201      	adds	r2, #1
 801fae2:	4295      	cmp	r5, r2
 801fae4:	dd28      	ble.n	801fb38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fae6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fae8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801faea:	fb02 1303 	mla	r3, r2, r3, r1
 801faee:	141b      	asrs	r3, r3, #16
 801faf0:	d422      	bmi.n	801fb38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801faf2:	3301      	adds	r3, #1
 801faf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801faf6:	429a      	cmp	r2, r3
 801faf8:	dd1e      	ble.n	801fb38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fafa:	9b08      	ldr	r3, [sp, #32]
 801fafc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fb00:	f103 0803 	add.w	r8, r3, #3
 801fb04:	f1ba 0f00 	cmp.w	sl, #0
 801fb08:	f300 8119 	bgt.w	801fd3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801fb0c:	9b07      	ldr	r3, [sp, #28]
 801fb0e:	9a08      	ldr	r2, [sp, #32]
 801fb10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb18:	441a      	add	r2, r3
 801fb1a:	9208      	str	r2, [sp, #32]
 801fb1c:	e0ae      	b.n	801fc7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801fb1e:	1c51      	adds	r1, r2, #1
 801fb20:	f040 809b 	bne.w	801fc5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb24:	42aa      	cmp	r2, r5
 801fb26:	f280 8098 	bge.w	801fc5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb2a:	1c5a      	adds	r2, r3, #1
 801fb2c:	f2c0 8095 	blt.w	801fc5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb32:	4293      	cmp	r3, r2
 801fb34:	f280 8091 	bge.w	801fc5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801fb38:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801fb3c:	f1bb 0f00 	cmp.w	fp, #0
 801fb40:	dde4      	ble.n	801fb0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fb42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb44:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fb46:	141a      	asrs	r2, r3, #16
 801fb48:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fb4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb4c:	1400      	asrs	r0, r0, #16
 801fb4e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801fb52:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fb56:	f100 80dc 	bmi.w	801fd12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801fb5a:	1c47      	adds	r7, r0, #1
 801fb5c:	42bd      	cmp	r5, r7
 801fb5e:	f340 80da 	ble.w	801fd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb62:	2a00      	cmp	r2, #0
 801fb64:	f2c0 80d7 	blt.w	801fd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb68:	f102 0c01 	add.w	ip, r2, #1
 801fb6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fb6e:	4567      	cmp	r7, ip
 801fb70:	f340 80d1 	ble.w	801fd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801fb74:	fb02 0005 	mla	r0, r2, r5, r0
 801fb78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fb7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb7c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fb80:	4402      	add	r2, r0
 801fb82:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fb86:	eb04 0c08 	add.w	ip, r4, r8
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	f000 80b3 	beq.w	801fcf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801fb90:	7857      	ldrb	r7, [r2, #1]
 801fb92:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fb96:	4427      	add	r7, r4
 801fb98:	2900      	cmp	r1, #0
 801fb9a:	f000 80b4 	beq.w	801fd06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801fb9e:	1950      	adds	r0, r2, r5
 801fba0:	5d52      	ldrb	r2, [r2, r5]
 801fba2:	7840      	ldrb	r0, [r0, #1]
 801fba4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fba8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fbac:	4422      	add	r2, r4
 801fbae:	4420      	add	r0, r4
 801fbb0:	b29b      	uxth	r3, r3
 801fbb2:	f814 a008 	ldrb.w	sl, [r4, r8]
 801fbb6:	b289      	uxth	r1, r1
 801fbb8:	f897 8000 	ldrb.w	r8, [r7]
 801fbbc:	fb03 f901 	mul.w	r9, r3, r1
 801fbc0:	011b      	lsls	r3, r3, #4
 801fbc2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fbc6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fbca:	eba3 0309 	sub.w	r3, r3, r9
 801fbce:	b289      	uxth	r1, r1
 801fbd0:	b29b      	uxth	r3, r3
 801fbd2:	ebae 0e01 	sub.w	lr, lr, r1
 801fbd6:	fb03 f808 	mul.w	r8, r3, r8
 801fbda:	fa1f fe8e 	uxth.w	lr, lr
 801fbde:	fb0e 880a 	mla	r8, lr, sl, r8
 801fbe2:	f892 a000 	ldrb.w	sl, [r2]
 801fbe6:	fb01 880a 	mla	r8, r1, sl, r8
 801fbea:	f890 a000 	ldrb.w	sl, [r0]
 801fbee:	fb09 880a 	mla	r8, r9, sl, r8
 801fbf2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbf6:	f886 8000 	strb.w	r8, [r6]
 801fbfa:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fbfe:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fc02:	fb03 f808 	mul.w	r8, r3, r8
 801fc06:	fb0e 880a 	mla	r8, lr, sl, r8
 801fc0a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fc0e:	fb01 880a 	mla	r8, r1, sl, r8
 801fc12:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fc16:	fb09 880a 	mla	r8, r9, sl, r8
 801fc1a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fc1e:	f886 8001 	strb.w	r8, [r6, #1]
 801fc22:	78bf      	ldrb	r7, [r7, #2]
 801fc24:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fc28:	437b      	muls	r3, r7
 801fc2a:	7892      	ldrb	r2, [r2, #2]
 801fc2c:	fb0e 330c 	mla	r3, lr, ip, r3
 801fc30:	fb01 3102 	mla	r1, r1, r2, r3
 801fc34:	7882      	ldrb	r2, [r0, #2]
 801fc36:	fb09 1902 	mla	r9, r9, r2, r1
 801fc3a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc3e:	f886 9002 	strb.w	r9, [r6, #2]
 801fc42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc44:	3603      	adds	r6, #3
 801fc46:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fc48:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc4c:	4413      	add	r3, r2
 801fc4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fc50:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc54:	4413      	add	r3, r2
 801fc56:	9324      	str	r3, [sp, #144]	; 0x90
 801fc58:	e770      	b.n	801fb3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801fc5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fc5c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fc5e:	4413      	add	r3, r2
 801fc60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fc62:	9323      	str	r3, [sp, #140]	; 0x8c
 801fc64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc66:	4413      	add	r3, r2
 801fc68:	9324      	str	r3, [sp, #144]	; 0x90
 801fc6a:	9b07      	ldr	r3, [sp, #28]
 801fc6c:	3b01      	subs	r3, #1
 801fc6e:	9307      	str	r3, [sp, #28]
 801fc70:	9b08      	ldr	r3, [sp, #32]
 801fc72:	3303      	adds	r3, #3
 801fc74:	9308      	str	r3, [sp, #32]
 801fc76:	e718      	b.n	801faaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fc78:	f47f af2a 	bne.w	801fad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fc7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	f340 80e5 	ble.w	801fe4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801fc84:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801fc88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fc8a:	ee79 9aab 	vadd.f32	s19, s19, s23
 801fc8e:	eef0 6a48 	vmov.f32	s13, s16
 801fc92:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801fc96:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801fc9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc9e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801fca2:	eef0 6a68 	vmov.f32	s13, s17
 801fca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcaa:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801fcae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fcb2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fcb6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fcba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fcbe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fcc2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fcc6:	ee18 2a10 	vmov	r2, s16
 801fcca:	eeb0 8a47 	vmov.f32	s16, s14
 801fcce:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcd2:	ee18 2a90 	vmov	r2, s17
 801fcd6:	9325      	str	r3, [sp, #148]	; 0x94
 801fcd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fcda:	eef0 8a67 	vmov.f32	s17, s15
 801fcde:	fb92 f3f3 	sdiv	r3, r2, r3
 801fce2:	9326      	str	r3, [sp, #152]	; 0x98
 801fce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fce8:	3b01      	subs	r3, #1
 801fcea:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fcee:	bf08      	it	eq
 801fcf0:	4613      	moveq	r3, r2
 801fcf2:	9307      	str	r3, [sp, #28]
 801fcf4:	e6d2      	b.n	801fa9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fcf6:	b149      	cbz	r1, 801fd0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801fcf8:	5d52      	ldrb	r2, [r2, r5]
 801fcfa:	4660      	mov	r0, ip
 801fcfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd00:	4422      	add	r2, r4
 801fd02:	4667      	mov	r7, ip
 801fd04:	e754      	b.n	801fbb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fd06:	4660      	mov	r0, ip
 801fd08:	4662      	mov	r2, ip
 801fd0a:	e751      	b.n	801fbb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fd0c:	4660      	mov	r0, ip
 801fd0e:	4662      	mov	r2, ip
 801fd10:	e7f7      	b.n	801fd02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801fd12:	1c47      	adds	r7, r0, #1
 801fd14:	d195      	bne.n	801fc42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd16:	4285      	cmp	r5, r0
 801fd18:	dd93      	ble.n	801fc42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd1a:	1c57      	adds	r7, r2, #1
 801fd1c:	db91      	blt.n	801fc42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd1e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fd20:	4297      	cmp	r7, r2
 801fd22:	dd8e      	ble.n	801fc42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd24:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fd28:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fd2c:	e9cd 5700 	strd	r5, r7, [sp]
 801fd30:	4623      	mov	r3, r4
 801fd32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd34:	4631      	mov	r1, r6
 801fd36:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fd38:	f7ff fdca 	bl	801f8d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fd3c:	e781      	b.n	801fc42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fd3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fd40:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fd42:	1410      	asrs	r0, r2, #16
 801fd44:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fd48:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fd4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fd4c:	1412      	asrs	r2, r2, #16
 801fd4e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fd52:	fb05 2000 	mla	r0, r5, r0, r2
 801fd56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd58:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fd5c:	4402      	add	r2, r0
 801fd5e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fd62:	eb04 070e 	add.w	r7, r4, lr
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d063      	beq.n	801fe32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801fd6a:	7856      	ldrb	r6, [r2, #1]
 801fd6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fd70:	4426      	add	r6, r4
 801fd72:	2900      	cmp	r1, #0
 801fd74:	d065      	beq.n	801fe42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801fd76:	1950      	adds	r0, r2, r5
 801fd78:	5d52      	ldrb	r2, [r2, r5]
 801fd7a:	7840      	ldrb	r0, [r0, #1]
 801fd7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fd84:	4422      	add	r2, r4
 801fd86:	4420      	add	r0, r4
 801fd88:	b29b      	uxth	r3, r3
 801fd8a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fd8e:	b289      	uxth	r1, r1
 801fd90:	f896 e000 	ldrb.w	lr, [r6]
 801fd94:	f108 0803 	add.w	r8, r8, #3
 801fd98:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fd9c:	fb03 f901 	mul.w	r9, r3, r1
 801fda0:	011b      	lsls	r3, r3, #4
 801fda2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fda6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fdaa:	eba3 0309 	sub.w	r3, r3, r9
 801fdae:	b289      	uxth	r1, r1
 801fdb0:	b29b      	uxth	r3, r3
 801fdb2:	ebac 0c01 	sub.w	ip, ip, r1
 801fdb6:	fb03 fe0e 	mul.w	lr, r3, lr
 801fdba:	fa1f fc8c 	uxth.w	ip, ip
 801fdbe:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fdc2:	f892 b000 	ldrb.w	fp, [r2]
 801fdc6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fdca:	f890 b000 	ldrb.w	fp, [r0]
 801fdce:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fdd2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fdd6:	f808 ec06 	strb.w	lr, [r8, #-6]
 801fdda:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fdde:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fde2:	fb03 fe0e 	mul.w	lr, r3, lr
 801fde6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fdea:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fdee:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fdf2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fdf6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fdfa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fdfe:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fe02:	78b6      	ldrb	r6, [r6, #2]
 801fe04:	78bf      	ldrb	r7, [r7, #2]
 801fe06:	4373      	muls	r3, r6
 801fe08:	7896      	ldrb	r6, [r2, #2]
 801fe0a:	7882      	ldrb	r2, [r0, #2]
 801fe0c:	fb0c 3307 	mla	r3, ip, r7, r3
 801fe10:	fb01 3306 	mla	r3, r1, r6, r3
 801fe14:	fb09 3902 	mla	r9, r9, r2, r3
 801fe18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fe1a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fe1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe20:	4413      	add	r3, r2
 801fe22:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fe24:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fe28:	9323      	str	r3, [sp, #140]	; 0x8c
 801fe2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe2c:	4413      	add	r3, r2
 801fe2e:	9324      	str	r3, [sp, #144]	; 0x90
 801fe30:	e668      	b.n	801fb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fe32:	b149      	cbz	r1, 801fe48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801fe34:	5d52      	ldrb	r2, [r2, r5]
 801fe36:	4638      	mov	r0, r7
 801fe38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe3c:	4422      	add	r2, r4
 801fe3e:	463e      	mov	r6, r7
 801fe40:	e7a2      	b.n	801fd88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fe42:	4638      	mov	r0, r7
 801fe44:	463a      	mov	r2, r7
 801fe46:	e79f      	b.n	801fd88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fe48:	4638      	mov	r0, r7
 801fe4a:	463a      	mov	r2, r7
 801fe4c:	e7f7      	b.n	801fe3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801fe4e:	b00f      	add	sp, #60	; 0x3c
 801fe50:	ecbd 8b0a 	vpop	{d8-d12}
 801fe54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe5c:	b087      	sub	sp, #28
 801fe5e:	7888      	ldrb	r0, [r1, #2]
 801fe60:	9002      	str	r0, [sp, #8]
 801fe62:	7848      	ldrb	r0, [r1, #1]
 801fe64:	9e02      	ldr	r6, [sp, #8]
 801fe66:	9003      	str	r0, [sp, #12]
 801fe68:	7808      	ldrb	r0, [r1, #0]
 801fe6a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fe6e:	9004      	str	r0, [sp, #16]
 801fe70:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fe74:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801fe78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801fe7c:	9e03      	ldr	r6, [sp, #12]
 801fe7e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801fe82:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fe86:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801fe8a:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801fe8e:	fb04 7508 	mla	r5, r4, r8, r7
 801fe92:	2c00      	cmp	r4, #0
 801fe94:	eb02 0905 	add.w	r9, r2, r5
 801fe98:	db45      	blt.n	801ff26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fe9a:	45a2      	cmp	sl, r4
 801fe9c:	dd43      	ble.n	801ff26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fe9e:	2f00      	cmp	r7, #0
 801fea0:	db3f      	blt.n	801ff22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fea2:	45b8      	cmp	r8, r7
 801fea4:	dd3d      	ble.n	801ff22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fea6:	5d52      	ldrb	r2, [r2, r5]
 801fea8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801feac:	1c7a      	adds	r2, r7, #1
 801feae:	d43d      	bmi.n	801ff2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801feb0:	4590      	cmp	r8, r2
 801feb2:	dd3b      	ble.n	801ff2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801feb4:	f1bc 0f00 	cmp.w	ip, #0
 801feb8:	d038      	beq.n	801ff2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801feba:	f899 2001 	ldrb.w	r2, [r9, #1]
 801febe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fec2:	3401      	adds	r4, #1
 801fec4:	d436      	bmi.n	801ff34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fec6:	45a2      	cmp	sl, r4
 801fec8:	dd34      	ble.n	801ff34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801feca:	f1be 0f00 	cmp.w	lr, #0
 801fece:	d031      	beq.n	801ff34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fed0:	2f00      	cmp	r7, #0
 801fed2:	db2d      	blt.n	801ff30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fed4:	45b8      	cmp	r8, r7
 801fed6:	dd2b      	ble.n	801ff30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fed8:	f819 2008 	ldrb.w	r2, [r9, r8]
 801fedc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fee0:	3701      	adds	r7, #1
 801fee2:	d409      	bmi.n	801fef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fee4:	45b8      	cmp	r8, r7
 801fee6:	dd07      	ble.n	801fef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fee8:	f1bc 0f00 	cmp.w	ip, #0
 801feec:	d004      	beq.n	801fef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801feee:	44c8      	add	r8, r9
 801fef0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fef4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fef8:	f1bc 0f0f 	cmp.w	ip, #15
 801fefc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801ff00:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801ff04:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ff08:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ff0c:	d802      	bhi.n	801ff14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801ff0e:	f1be 0f0f 	cmp.w	lr, #15
 801ff12:	d911      	bls.n	801ff38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801ff14:	4b77      	ldr	r3, [pc, #476]	; (80200f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801ff16:	f240 11a5 	movw	r1, #421	; 0x1a5
 801ff1a:	4a77      	ldr	r2, [pc, #476]	; (80200f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801ff1c:	4877      	ldr	r0, [pc, #476]	; (80200fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801ff1e:	f005 fc7d 	bl	802581c <__assert_func>
 801ff22:	4606      	mov	r6, r0
 801ff24:	e7c2      	b.n	801feac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801ff26:	4605      	mov	r5, r0
 801ff28:	4606      	mov	r6, r0
 801ff2a:	e7ca      	b.n	801fec2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ff2c:	4605      	mov	r5, r0
 801ff2e:	e7c8      	b.n	801fec2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801ff30:	4604      	mov	r4, r0
 801ff32:	e7d5      	b.n	801fee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801ff34:	4604      	mov	r4, r0
 801ff36:	e7df      	b.n	801fef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ff38:	fa1f fc8c 	uxth.w	ip, ip
 801ff3c:	fa1f f28e 	uxth.w	r2, lr
 801ff40:	fb02 fe0c 	mul.w	lr, r2, ip
 801ff44:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ff48:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801ff4c:	ebac 070e 	sub.w	r7, ip, lr
 801ff50:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ff54:	b292      	uxth	r2, r2
 801ff56:	b2bf      	uxth	r7, r7
 801ff58:	1a9b      	subs	r3, r3, r2
 801ff5a:	fb07 fc0a 	mul.w	ip, r7, sl
 801ff5e:	b29b      	uxth	r3, r3
 801ff60:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ff64:	9301      	str	r3, [sp, #4]
 801ff66:	fb02 cc09 	mla	ip, r2, r9, ip
 801ff6a:	fb0e cc08 	mla	ip, lr, r8, ip
 801ff6e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ff72:	9305      	str	r3, [sp, #20]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	f000 80b9 	beq.w	80200ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801ff7a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ff7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ff82:	fb0b fc0c 	mul.w	ip, fp, ip
 801ff86:	fb0b f606 	mul.w	r6, fp, r6
 801ff8a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ff8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ff92:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ff96:	44dc      	add	ip, fp
 801ff98:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801ff9c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ffa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffa4:	fb0a fb0b 	mul.w	fp, sl, fp
 801ffa8:	fb0a fa05 	mul.w	sl, sl, r5
 801ffac:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801ffb0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ffb4:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801ffb8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ffbc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ffc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffc4:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801ffc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffcc:	0a36      	lsrs	r6, r6, #8
 801ffce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffd2:	44dc      	add	ip, fp
 801ffd4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ffd8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ffdc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffe0:	fb09 fb0b 	mul.w	fp, r9, fp
 801ffe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffe8:	fb09 f904 	mul.w	r9, r9, r4
 801ffec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fff0:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801fff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fff8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fffc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020000:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020004:	fb0c fc07 	mul.w	ip, ip, r7
 8020008:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802000c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8020010:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020014:	445d      	add	r5, fp
 8020016:	fb08 f404 	mul.w	r4, r8, r4
 802001a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802001e:	fb08 f800 	mul.w	r8, r8, r0
 8020022:	0a2d      	lsrs	r5, r5, #8
 8020024:	0a20      	lsrs	r0, r4, #8
 8020026:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802002a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802002e:	fb07 f70a 	mul.w	r7, r7, sl
 8020032:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020036:	4404      	add	r4, r0
 8020038:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802003c:	0a24      	lsrs	r4, r4, #8
 802003e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8020042:	9801      	ldr	r0, [sp, #4]
 8020044:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020048:	fb03 cc00 	mla	ip, r3, r0, ip
 802004c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020050:	fb00 7606 	mla	r6, r0, r6, r7
 8020054:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8020058:	fb04 cc0e 	mla	ip, r4, lr, ip
 802005c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020060:	b280      	uxth	r0, r0
 8020062:	9c04      	ldr	r4, [sp, #16]
 8020064:	fb05 cc02 	mla	ip, r5, r2, ip
 8020068:	fb0e 6e08 	mla	lr, lr, r8, r6
 802006c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020070:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020074:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8020078:	fb02 ec0c 	mla	ip, r2, ip, lr
 802007c:	9a05      	ldr	r2, [sp, #20]
 802007e:	4342      	muls	r2, r0
 8020080:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020084:	1c53      	adds	r3, r2, #1
 8020086:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802008a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802008e:	ea45 0c0c 	orr.w	ip, r5, ip
 8020092:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020096:	fa5f f28c 	uxtb.w	r2, ip
 802009a:	b2db      	uxtb	r3, r3
 802009c:	fb14 f403 	smulbb	r4, r4, r3
 80200a0:	fb02 4200 	mla	r2, r2, r0, r4
 80200a4:	b292      	uxth	r2, r2
 80200a6:	1c54      	adds	r4, r2, #1
 80200a8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80200ac:	9c03      	ldr	r4, [sp, #12]
 80200ae:	fb14 f403 	smulbb	r4, r4, r3
 80200b2:	1212      	asrs	r2, r2, #8
 80200b4:	700a      	strb	r2, [r1, #0]
 80200b6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80200ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80200be:	fb02 4200 	mla	r2, r2, r0, r4
 80200c2:	b292      	uxth	r2, r2
 80200c4:	1c54      	adds	r4, r2, #1
 80200c6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80200ca:	1212      	asrs	r2, r2, #8
 80200cc:	704a      	strb	r2, [r1, #1]
 80200ce:	9a02      	ldr	r2, [sp, #8]
 80200d0:	fb12 f303 	smulbb	r3, r2, r3
 80200d4:	fb0c 3c00 	mla	ip, ip, r0, r3
 80200d8:	fa1f fc8c 	uxth.w	ip, ip
 80200dc:	f10c 0301 	add.w	r3, ip, #1
 80200e0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80200e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80200e8:	f881 c002 	strb.w	ip, [r1, #2]
 80200ec:	b007      	add	sp, #28
 80200ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200f2:	bf00      	nop
 80200f4:	0802b131 	.word	0x0802b131
 80200f8:	0802b626 	.word	0x0802b626
 80200fc:	0802b1fa 	.word	0x0802b1fa

08020100 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020104:	ed2d 8b08 	vpush	{d8-d11}
 8020108:	b09b      	sub	sp, #108	; 0x6c
 802010a:	eeb0 aa40 	vmov.f32	s20, s0
 802010e:	eef0 9a60 	vmov.f32	s19, s1
 8020112:	930a      	str	r3, [sp, #40]	; 0x28
 8020114:	eeb0 9a41 	vmov.f32	s18, s2
 8020118:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 802011c:	eeb0 8a62 	vmov.f32	s16, s5
 8020120:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8020122:	eef0 8a43 	vmov.f32	s17, s6
 8020126:	9312      	str	r3, [sp, #72]	; 0x48
 8020128:	eef0 ba44 	vmov.f32	s23, s8
 802012c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8020130:	eeb0 ba64 	vmov.f32	s22, s9
 8020134:	9019      	str	r0, [sp, #100]	; 0x64
 8020136:	eef0 aa45 	vmov.f32	s21, s10
 802013a:	9114      	str	r1, [sp, #80]	; 0x50
 802013c:	9317      	str	r3, [sp, #92]	; 0x5c
 802013e:	6868      	ldr	r0, [r5, #4]
 8020140:	9218      	str	r2, [sp, #96]	; 0x60
 8020142:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020144:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8020148:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802014c:	fb00 1303 	mla	r3, r0, r3, r1
 8020150:	6829      	ldr	r1, [r5, #0]
 8020152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020156:	18cb      	adds	r3, r1, r3
 8020158:	930d      	str	r3, [sp, #52]	; 0x34
 802015a:	6813      	ldr	r3, [r2, #0]
 802015c:	9313      	str	r3, [sp, #76]	; 0x4c
 802015e:	6853      	ldr	r3, [r2, #4]
 8020160:	3304      	adds	r3, #4
 8020162:	9309      	str	r3, [sp, #36]	; 0x24
 8020164:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020166:	2b00      	cmp	r3, #0
 8020168:	dc03      	bgt.n	8020172 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802016a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802016c:	2b00      	cmp	r3, #0
 802016e:	f340 8352 	ble.w	8020816 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8020172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020174:	2b00      	cmp	r3, #0
 8020176:	f340 81a2 	ble.w	80204be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802017a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802017c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802017e:	1412      	asrs	r2, r2, #16
 8020180:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020184:	d431      	bmi.n	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8020186:	1c51      	adds	r1, r2, #1
 8020188:	428c      	cmp	r4, r1
 802018a:	dd31      	ble.n	80201f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802018c:	2b00      	cmp	r3, #0
 802018e:	db2f      	blt.n	80201f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020190:	1c59      	adds	r1, r3, #1
 8020192:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020194:	4288      	cmp	r0, r1
 8020196:	dd2b      	ble.n	80201f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8020198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802019a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802019c:	3b01      	subs	r3, #1
 802019e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80201a0:	fb02 1203 	mla	r2, r2, r3, r1
 80201a4:	1412      	asrs	r2, r2, #16
 80201a6:	d42d      	bmi.n	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80201a8:	3201      	adds	r2, #1
 80201aa:	4294      	cmp	r4, r2
 80201ac:	dd2a      	ble.n	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80201ae:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80201b0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80201b2:	fb02 1303 	mla	r3, r2, r3, r1
 80201b6:	141b      	asrs	r3, r3, #16
 80201b8:	d424      	bmi.n	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80201ba:	3301      	adds	r3, #1
 80201bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201be:	429a      	cmp	r2, r3
 80201c0:	dd20      	ble.n	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80201c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201c4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80201c8:	f103 0e03 	add.w	lr, r3, #3
 80201cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201ce:	9315      	str	r3, [sp, #84]	; 0x54
 80201d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	f300 81de 	bgt.w	8020594 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80201d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80201dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80201e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201e4:	441a      	add	r2, r3
 80201e6:	920d      	str	r2, [sp, #52]	; 0x34
 80201e8:	e16b      	b.n	80204c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80201ea:	1c51      	adds	r1, r2, #1
 80201ec:	f040 8158 	bne.w	80204a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201f0:	42a2      	cmp	r2, r4
 80201f2:	f280 8155 	bge.w	80204a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201f6:	1c5a      	adds	r2, r3, #1
 80201f8:	f2c0 8152 	blt.w	80204a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80201fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201fe:	4293      	cmp	r3, r2
 8020200:	f280 814e 	bge.w	80204a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8020204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020206:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020208:	9316      	str	r3, [sp, #88]	; 0x58
 802020a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 802020e:	9315      	str	r3, [sp, #84]	; 0x54
 8020210:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020212:	2b00      	cmp	r3, #0
 8020214:	dde0      	ble.n	80201d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8020216:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020218:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802021a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802021e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020220:	141b      	asrs	r3, r3, #16
 8020222:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020226:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020228:	1412      	asrs	r2, r2, #16
 802022a:	f100 819a 	bmi.w	8020562 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802022e:	1c55      	adds	r5, r2, #1
 8020230:	42ac      	cmp	r4, r5
 8020232:	f340 8198 	ble.w	8020566 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020236:	2b00      	cmp	r3, #0
 8020238:	f2c0 8195 	blt.w	8020566 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802023c:	1c5d      	adds	r5, r3, #1
 802023e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020240:	42af      	cmp	r7, r5
 8020242:	f340 8190 	ble.w	8020566 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8020246:	fb03 2304 	mla	r3, r3, r4, r2
 802024a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802024c:	18d5      	adds	r5, r2, r3
 802024e:	5cd3      	ldrb	r3, [r2, r3]
 8020250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020256:	0e1f      	lsrs	r7, r3, #24
 8020258:	2800      	cmp	r0, #0
 802025a:	f000 8171 	beq.w	8020540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802025e:	f895 c001 	ldrb.w	ip, [r5, #1]
 8020262:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8020266:	920e      	str	r2, [sp, #56]	; 0x38
 8020268:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802026c:	2900      	cmp	r1, #0
 802026e:	f000 8172 	beq.w	8020556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8020272:	eb05 0c04 	add.w	ip, r5, r4
 8020276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020278:	5d2d      	ldrb	r5, [r5, r4]
 802027a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 802027e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020282:	950b      	str	r5, [sp, #44]	; 0x2c
 8020284:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020288:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802028a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802028e:	0e15      	lsrs	r5, r2, #24
 8020290:	920f      	str	r2, [sp, #60]	; 0x3c
 8020292:	b280      	uxth	r0, r0
 8020294:	b289      	uxth	r1, r1
 8020296:	fb00 fa01 	mul.w	sl, r0, r1
 802029a:	0100      	lsls	r0, r0, #4
 802029c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80202a0:	eba0 080a 	sub.w	r8, r0, sl
 80202a4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80202a8:	b289      	uxth	r1, r1
 80202aa:	fa1f f888 	uxth.w	r8, r8
 80202ae:	1a52      	subs	r2, r2, r1
 80202b0:	fb08 f00e 	mul.w	r0, r8, lr
 80202b4:	b292      	uxth	r2, r2
 80202b6:	fb02 0007 	mla	r0, r2, r7, r0
 80202ba:	fb01 0009 	mla	r0, r1, r9, r0
 80202be:	fb0a 0005 	mla	r0, sl, r5, r0
 80202c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80202c6:	2800      	cmp	r0, #0
 80202c8:	f000 80dd 	beq.w	8020486 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80202cc:	2fff      	cmp	r7, #255	; 0xff
 80202ce:	d01a      	beq.n	8020306 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80202d0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80202d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80202d8:	fb07 fc0c 	mul.w	ip, r7, ip
 80202dc:	435f      	muls	r7, r3
 80202de:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80202e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202e6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80202ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80202ee:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80202f2:	4463      	add	r3, ip
 80202f4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80202f8:	0a1b      	lsrs	r3, r3, #8
 80202fa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80202fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020302:	ea43 030b 	orr.w	r3, r3, fp
 8020306:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802030a:	d01e      	beq.n	802034a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 802030c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802030e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8020312:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020316:	fb0e fb0b 	mul.w	fp, lr, fp
 802031a:	fb0e fe07 	mul.w	lr, lr, r7
 802031e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020322:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020326:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802032a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802032e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020332:	44dc      	add	ip, fp
 8020334:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020338:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802033c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020340:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020344:	ea4c 070e 	orr.w	r7, ip, lr
 8020348:	970e      	str	r7, [sp, #56]	; 0x38
 802034a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802034e:	d01e      	beq.n	802038e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020350:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020352:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020356:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802035a:	fb09 fe0e 	mul.w	lr, r9, lr
 802035e:	fb09 f907 	mul.w	r9, r9, r7
 8020362:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020366:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802036a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802036e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020372:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020376:	44f4      	add	ip, lr
 8020378:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802037c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020380:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020384:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020388:	ea4c 0709 	orr.w	r7, ip, r9
 802038c:	970b      	str	r7, [sp, #44]	; 0x2c
 802038e:	2dff      	cmp	r5, #255	; 0xff
 8020390:	d01c      	beq.n	80203cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8020392:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020394:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020398:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802039c:	fb05 fe0e 	mul.w	lr, r5, lr
 80203a0:	437d      	muls	r5, r7
 80203a2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80203a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80203aa:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80203ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203b2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80203b6:	44f4      	add	ip, lr
 80203b8:	0a2d      	lsrs	r5, r5, #8
 80203ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80203c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203c6:	ea4c 0505 	orr.w	r5, ip, r5
 80203ca:	950f      	str	r5, [sp, #60]	; 0x3c
 80203cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80203ce:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80203d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203d6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80203da:	fb08 f505 	mul.w	r5, r8, r5
 80203de:	fb02 5507 	mla	r5, r2, r7, r5
 80203e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80203e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80203e8:	fb01 5507 	mla	r5, r1, r7, r5
 80203ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80203ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80203f2:	fb0a 5507 	mla	r5, sl, r7, r5
 80203f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80203f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80203fc:	0a2d      	lsrs	r5, r5, #8
 80203fe:	fb08 f807 	mul.w	r8, r8, r7
 8020402:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020406:	fb02 8303 	mla	r3, r2, r3, r8
 802040a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802040c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020412:	fb01 330c 	mla	r3, r1, ip, r3
 8020416:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802041a:	fb0a 3a01 	mla	sl, sl, r1, r3
 802041e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020420:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020422:	4343      	muls	r3, r0
 8020424:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020428:	1c58      	adds	r0, r3, #1
 802042a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802042e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020432:	ea45 050a 	orr.w	r5, r5, sl
 8020436:	7833      	ldrb	r3, [r6, #0]
 8020438:	b2ea      	uxtb	r2, r5
 802043a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802043e:	fb12 f201 	smulbb	r2, r2, r1
 8020442:	b2c0      	uxtb	r0, r0
 8020444:	fb03 2300 	mla	r3, r3, r0, r2
 8020448:	b29b      	uxth	r3, r3
 802044a:	1c5a      	adds	r2, r3, #1
 802044c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020450:	7872      	ldrb	r2, [r6, #1]
 8020452:	fb12 f200 	smulbb	r2, r2, r0
 8020456:	121b      	asrs	r3, r3, #8
 8020458:	7033      	strb	r3, [r6, #0]
 802045a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802045e:	0c2d      	lsrs	r5, r5, #16
 8020460:	fb03 2301 	mla	r3, r3, r1, r2
 8020464:	b29b      	uxth	r3, r3
 8020466:	1c5a      	adds	r2, r3, #1
 8020468:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802046c:	121b      	asrs	r3, r3, #8
 802046e:	7073      	strb	r3, [r6, #1]
 8020470:	78b3      	ldrb	r3, [r6, #2]
 8020472:	fb13 f000 	smulbb	r0, r3, r0
 8020476:	fb05 0501 	mla	r5, r5, r1, r0
 802047a:	b2ad      	uxth	r5, r5
 802047c:	1c6b      	adds	r3, r5, #1
 802047e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020482:	122d      	asrs	r5, r5, #8
 8020484:	70b5      	strb	r5, [r6, #2]
 8020486:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020488:	3603      	adds	r6, #3
 802048a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802048c:	4413      	add	r3, r2
 802048e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020490:	932d      	str	r3, [sp, #180]	; 0xb4
 8020492:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020494:	4413      	add	r3, r2
 8020496:	932e      	str	r3, [sp, #184]	; 0xb8
 8020498:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802049a:	3b01      	subs	r3, #1
 802049c:	9316      	str	r3, [sp, #88]	; 0x58
 802049e:	e6b7      	b.n	8020210 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80204a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80204a2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80204a4:	4413      	add	r3, r2
 80204a6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80204a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80204aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80204ac:	4413      	add	r3, r2
 80204ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80204b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204b2:	3b01      	subs	r3, #1
 80204b4:	930a      	str	r3, [sp, #40]	; 0x28
 80204b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80204b8:	3303      	adds	r3, #3
 80204ba:	930d      	str	r3, [sp, #52]	; 0x34
 80204bc:	e659      	b.n	8020172 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80204be:	f47f ae6b 	bne.w	8020198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80204c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	f340 81a6 	ble.w	8020816 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80204ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80204d0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80204d4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80204d8:	eef0 6a48 	vmov.f32	s13, s16
 80204dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80204e0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204e8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80204ec:	eef0 6a68 	vmov.f32	s13, s17
 80204f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204f4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80204f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020500:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020504:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020508:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802050c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020510:	ee18 2a10 	vmov	r2, s16
 8020514:	eeb0 8a47 	vmov.f32	s16, s14
 8020518:	fb92 f3f3 	sdiv	r3, r2, r3
 802051c:	ee18 2a90 	vmov	r2, s17
 8020520:	932f      	str	r3, [sp, #188]	; 0xbc
 8020522:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020524:	eef0 8a67 	vmov.f32	s17, s15
 8020528:	fb92 f3f3 	sdiv	r3, r2, r3
 802052c:	9330      	str	r3, [sp, #192]	; 0xc0
 802052e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020530:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020532:	3b01      	subs	r3, #1
 8020534:	9314      	str	r3, [sp, #80]	; 0x50
 8020536:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020538:	bf08      	it	eq
 802053a:	4613      	moveq	r3, r2
 802053c:	930a      	str	r3, [sp, #40]	; 0x28
 802053e:	e611      	b.n	8020164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020540:	b161      	cbz	r1, 802055c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8020542:	5d2a      	ldrb	r2, [r5, r4]
 8020544:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020546:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802054a:	25ff      	movs	r5, #255	; 0xff
 802054c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020550:	920b      	str	r2, [sp, #44]	; 0x2c
 8020552:	46ae      	mov	lr, r5
 8020554:	e69d      	b.n	8020292 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020556:	25ff      	movs	r5, #255	; 0xff
 8020558:	46a9      	mov	r9, r5
 802055a:	e69a      	b.n	8020292 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802055c:	25ff      	movs	r5, #255	; 0xff
 802055e:	46a9      	mov	r9, r5
 8020560:	e7f7      	b.n	8020552 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8020562:	1c57      	adds	r7, r2, #1
 8020564:	d18f      	bne.n	8020486 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020566:	4294      	cmp	r4, r2
 8020568:	dd8d      	ble.n	8020486 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802056a:	1c5d      	adds	r5, r3, #1
 802056c:	db8b      	blt.n	8020486 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802056e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020570:	429d      	cmp	r5, r3
 8020572:	dd88      	ble.n	8020486 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020574:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8020576:	9202      	str	r2, [sp, #8]
 8020578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802057a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802057e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020580:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020582:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8020586:	e9cd 4300 	strd	r4, r3, [sp]
 802058a:	4631      	mov	r1, r6
 802058c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802058e:	f7ff fc63 	bl	801fe58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020592:	e778      	b.n	8020486 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020594:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020596:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020598:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802059c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802059e:	1412      	asrs	r2, r2, #16
 80205a0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80205a4:	141b      	asrs	r3, r3, #16
 80205a6:	fb04 2303 	mla	r3, r4, r3, r2
 80205aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80205ac:	18d5      	adds	r5, r2, r3
 80205ae:	5cd3      	ldrb	r3, [r2, r3]
 80205b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80205b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80205b6:	0e1e      	lsrs	r6, r3, #24
 80205b8:	2900      	cmp	r1, #0
 80205ba:	f000 811b 	beq.w	80207f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80205be:	786a      	ldrb	r2, [r5, #1]
 80205c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80205c2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80205c6:	9210      	str	r2, [sp, #64]	; 0x40
 80205c8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80205cc:	2800      	cmp	r0, #0
 80205ce:	f000 811c 	beq.w	802080a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80205d2:	192a      	adds	r2, r5, r4
 80205d4:	5d2d      	ldrb	r5, [r5, r4]
 80205d6:	7852      	ldrb	r2, [r2, #1]
 80205d8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80205dc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80205e0:	950c      	str	r5, [sp, #48]	; 0x30
 80205e2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80205e6:	0e15      	lsrs	r5, r2, #24
 80205e8:	9211      	str	r2, [sp, #68]	; 0x44
 80205ea:	b289      	uxth	r1, r1
 80205ec:	b280      	uxth	r0, r0
 80205ee:	fb01 fa00 	mul.w	sl, r1, r0
 80205f2:	0109      	lsls	r1, r1, #4
 80205f4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80205f8:	eba1 080a 	sub.w	r8, r1, sl
 80205fc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020600:	b280      	uxth	r0, r0
 8020602:	fa1f f888 	uxth.w	r8, r8
 8020606:	1a12      	subs	r2, r2, r0
 8020608:	fb08 f10c 	mul.w	r1, r8, ip
 802060c:	b292      	uxth	r2, r2
 802060e:	fb02 1106 	mla	r1, r2, r6, r1
 8020612:	fb00 1109 	mla	r1, r0, r9, r1
 8020616:	fb0a 1105 	mla	r1, sl, r5, r1
 802061a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802061e:	2900      	cmp	r1, #0
 8020620:	f000 80da 	beq.w	80207d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8020624:	2eff      	cmp	r6, #255	; 0xff
 8020626:	d016      	beq.n	8020656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8020628:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802062c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020630:	4377      	muls	r7, r6
 8020632:	435e      	muls	r6, r3
 8020634:	0a3b      	lsrs	r3, r7, #8
 8020636:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802063a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802063e:	443b      	add	r3, r7
 8020640:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020644:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8020648:	0a1b      	lsrs	r3, r3, #8
 802064a:	0a3f      	lsrs	r7, r7, #8
 802064c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020650:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020654:	433b      	orrs	r3, r7
 8020656:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802065a:	d01d      	beq.n	8020698 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 802065c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802065e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020660:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020664:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020668:	fb0c f606 	mul.w	r6, ip, r6
 802066c:	fb0c fc07 	mul.w	ip, ip, r7
 8020670:	0a37      	lsrs	r7, r6, #8
 8020672:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020676:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802067a:	4437      	add	r7, r6
 802067c:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020680:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020684:	0a3f      	lsrs	r7, r7, #8
 8020686:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802068a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802068e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020692:	ea47 060c 	orr.w	r6, r7, ip
 8020696:	9610      	str	r6, [sp, #64]	; 0x40
 8020698:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802069c:	d01d      	beq.n	80206da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802069e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80206a0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80206a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206a8:	fb09 fc0c 	mul.w	ip, r9, ip
 80206ac:	fb09 f906 	mul.w	r9, r9, r6
 80206b0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80206b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206b8:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80206bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206c0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80206c4:	4467      	add	r7, ip
 80206c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80206ca:	0a3f      	lsrs	r7, r7, #8
 80206cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80206d0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206d4:	ea47 0609 	orr.w	r6, r7, r9
 80206d8:	960c      	str	r6, [sp, #48]	; 0x30
 80206da:	2dff      	cmp	r5, #255	; 0xff
 80206dc:	d01a      	beq.n	8020714 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80206de:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80206e0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80206e4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206e8:	fb05 fc0c 	mul.w	ip, r5, ip
 80206ec:	4375      	muls	r5, r6
 80206ee:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80206f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206f6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80206fa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80206fe:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020702:	4467      	add	r7, ip
 8020704:	0a2d      	lsrs	r5, r5, #8
 8020706:	0a3f      	lsrs	r7, r7, #8
 8020708:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802070c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020710:	433d      	orrs	r5, r7
 8020712:	9511      	str	r5, [sp, #68]	; 0x44
 8020714:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020716:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802071a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802071e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020722:	fb08 f505 	mul.w	r5, r8, r5
 8020726:	fb02 5506 	mla	r5, r2, r6, r5
 802072a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802072c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020730:	fb00 5506 	mla	r5, r0, r6, r5
 8020734:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020736:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802073a:	fb0a 5506 	mla	r5, sl, r6, r5
 802073e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020740:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020744:	0a2d      	lsrs	r5, r5, #8
 8020746:	fb08 f806 	mul.w	r8, r8, r6
 802074a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802074e:	fb02 8303 	mla	r3, r2, r3, r8
 8020752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020754:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020758:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802075a:	fb00 3307 	mla	r3, r0, r7, r3
 802075e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020762:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8020766:	fb01 f30b 	mul.w	r3, r1, fp
 802076a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802076e:	1c59      	adds	r1, r3, #1
 8020770:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020774:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020778:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802077c:	ea45 050c 	orr.w	r5, r5, ip
 8020780:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020784:	b2ea      	uxtb	r2, r5
 8020786:	b2c9      	uxtb	r1, r1
 8020788:	fb12 f20b 	smulbb	r2, r2, fp
 802078c:	fb03 2301 	mla	r3, r3, r1, r2
 8020790:	b29b      	uxth	r3, r3
 8020792:	1c5a      	adds	r2, r3, #1
 8020794:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020798:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802079c:	fb12 f201 	smulbb	r2, r2, r1
 80207a0:	121b      	asrs	r3, r3, #8
 80207a2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80207a6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80207aa:	0c2d      	lsrs	r5, r5, #16
 80207ac:	fb03 230b 	mla	r3, r3, fp, r2
 80207b0:	b29b      	uxth	r3, r3
 80207b2:	1c5a      	adds	r2, r3, #1
 80207b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80207b8:	121b      	asrs	r3, r3, #8
 80207ba:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80207be:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80207c2:	fb13 f101 	smulbb	r1, r3, r1
 80207c6:	fb05 150b 	mla	r5, r5, fp, r1
 80207ca:	b2ad      	uxth	r5, r5
 80207cc:	1c69      	adds	r1, r5, #1
 80207ce:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80207d2:	122d      	asrs	r5, r5, #8
 80207d4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80207d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80207da:	f10e 0e03 	add.w	lr, lr, #3
 80207de:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80207e0:	4413      	add	r3, r2
 80207e2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80207e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80207e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80207e8:	4413      	add	r3, r2
 80207ea:	932e      	str	r3, [sp, #184]	; 0xb8
 80207ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80207ee:	3b01      	subs	r3, #1
 80207f0:	9315      	str	r3, [sp, #84]	; 0x54
 80207f2:	e4ed      	b.n	80201d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80207f4:	b160      	cbz	r0, 8020810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80207f6:	5d2a      	ldrb	r2, [r5, r4]
 80207f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80207fa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80207fe:	25ff      	movs	r5, #255	; 0xff
 8020800:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020804:	920c      	str	r2, [sp, #48]	; 0x30
 8020806:	46ac      	mov	ip, r5
 8020808:	e6ef      	b.n	80205ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 802080a:	25ff      	movs	r5, #255	; 0xff
 802080c:	46a9      	mov	r9, r5
 802080e:	e6ec      	b.n	80205ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8020810:	25ff      	movs	r5, #255	; 0xff
 8020812:	46a9      	mov	r9, r5
 8020814:	e7f7      	b.n	8020806 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 8020816:	b01b      	add	sp, #108	; 0x6c
 8020818:	ecbd 8b08 	vpop	{d8-d11}
 802081c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020824:	b085      	sub	sp, #20
 8020826:	7888      	ldrb	r0, [r1, #2]
 8020828:	4692      	mov	sl, r2
 802082a:	4698      	mov	r8, r3
 802082c:	9000      	str	r0, [sp, #0]
 802082e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020832:	7848      	ldrb	r0, [r1, #1]
 8020834:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020838:	9001      	str	r0, [sp, #4]
 802083a:	7808      	ldrb	r0, [r1, #0]
 802083c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020840:	9002      	str	r0, [sp, #8]
 8020842:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020846:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802084a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802084e:	fb04 560c 	mla	r6, r4, ip, r5
 8020852:	2c00      	cmp	r4, #0
 8020854:	eb02 0e06 	add.w	lr, r2, r6
 8020858:	9a00      	ldr	r2, [sp, #0]
 802085a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802085e:	9a01      	ldr	r2, [sp, #4]
 8020860:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020864:	db3e      	blt.n	80208e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8020866:	45a1      	cmp	r9, r4
 8020868:	dd3c      	ble.n	80208e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802086a:	2d00      	cmp	r5, #0
 802086c:	db38      	blt.n	80208e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 802086e:	45ac      	cmp	ip, r5
 8020870:	dd36      	ble.n	80208e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020872:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8020876:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802087a:	1c6e      	adds	r6, r5, #1
 802087c:	d435      	bmi.n	80208ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 802087e:	45b4      	cmp	ip, r6
 8020880:	dd33      	ble.n	80208ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020882:	b393      	cbz	r3, 80208ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020884:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8020888:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 802088c:	3401      	adds	r4, #1
 802088e:	d430      	bmi.n	80208f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020890:	45a1      	cmp	r9, r4
 8020892:	dd2e      	ble.n	80208f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020894:	b36f      	cbz	r7, 80208f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020896:	2d00      	cmp	r5, #0
 8020898:	db29      	blt.n	80208ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802089a:	45ac      	cmp	ip, r5
 802089c:	dd27      	ble.n	80208ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802089e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80208a2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80208a6:	3501      	adds	r5, #1
 80208a8:	d407      	bmi.n	80208ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80208aa:	45ac      	cmp	ip, r5
 80208ac:	dd05      	ble.n	80208ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80208ae:	b123      	cbz	r3, 80208ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80208b0:	44f4      	add	ip, lr
 80208b2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80208b6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80208ba:	2b0f      	cmp	r3, #15
 80208bc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80208c0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80208c4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80208c8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80208cc:	d801      	bhi.n	80208d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80208ce:	2f0f      	cmp	r7, #15
 80208d0:	d911      	bls.n	80208f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80208d2:	4b76      	ldr	r3, [pc, #472]	; (8020aac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80208d4:	f240 11a5 	movw	r1, #421	; 0x1a5
 80208d8:	4a75      	ldr	r2, [pc, #468]	; (8020ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80208da:	4876      	ldr	r0, [pc, #472]	; (8020ab4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80208dc:	f004 ff9e 	bl	802581c <__assert_func>
 80208e0:	4602      	mov	r2, r0
 80208e2:	e7ca      	b.n	802087a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80208e4:	4606      	mov	r6, r0
 80208e6:	4602      	mov	r2, r0
 80208e8:	e7d0      	b.n	802088c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80208ea:	4606      	mov	r6, r0
 80208ec:	e7ce      	b.n	802088c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80208ee:	4604      	mov	r4, r0
 80208f0:	e7d9      	b.n	80208a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80208f2:	4604      	mov	r4, r0
 80208f4:	e7e1      	b.n	80208ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80208f6:	b29b      	uxth	r3, r3
 80208f8:	b2bf      	uxth	r7, r7
 80208fa:	fb07 fe03 	mul.w	lr, r7, r3
 80208fe:	011b      	lsls	r3, r3, #4
 8020900:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020904:	eba3 0c0e 	sub.w	ip, r3, lr
 8020908:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802090c:	b2bf      	uxth	r7, r7
 802090e:	fa1f fc8c 	uxth.w	ip, ip
 8020912:	1bed      	subs	r5, r5, r7
 8020914:	fb0c f30a 	mul.w	r3, ip, sl
 8020918:	b2ad      	uxth	r5, r5
 802091a:	fb05 330b 	mla	r3, r5, fp, r3
 802091e:	fb07 3309 	mla	r3, r7, r9, r3
 8020922:	fb0e 3308 	mla	r3, lr, r8, r3
 8020926:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802092a:	9303      	str	r3, [sp, #12]
 802092c:	2b00      	cmp	r3, #0
 802092e:	f000 80b9 	beq.w	8020aa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8020932:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020936:	d018      	beq.n	802096a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8020938:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802093c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020940:	fb0b f303 	mul.w	r3, fp, r3
 8020944:	fb0b fb02 	mul.w	fp, fp, r2
 8020948:	0a1a      	lsrs	r2, r3, #8
 802094a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802094e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020952:	441a      	add	r2, r3
 8020954:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8020958:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802095c:	0a12      	lsrs	r2, r2, #8
 802095e:	0a1b      	lsrs	r3, r3, #8
 8020960:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020964:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020968:	431a      	orrs	r2, r3
 802096a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802096e:	d019      	beq.n	80209a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020970:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020974:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020978:	fb0a fb0b 	mul.w	fp, sl, fp
 802097c:	fb0a fa06 	mul.w	sl, sl, r6
 8020980:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020984:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020988:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 802098c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020990:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020994:	445e      	add	r6, fp
 8020996:	0a1b      	lsrs	r3, r3, #8
 8020998:	0a36      	lsrs	r6, r6, #8
 802099a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802099e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80209a2:	431e      	orrs	r6, r3
 80209a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80209a8:	d019      	beq.n	80209de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 80209aa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80209ae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80209b2:	fb09 fa0a 	mul.w	sl, r9, sl
 80209b6:	fb09 f904 	mul.w	r9, r9, r4
 80209ba:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80209be:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80209c2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80209c6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80209ca:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80209ce:	4454      	add	r4, sl
 80209d0:	0a1b      	lsrs	r3, r3, #8
 80209d2:	0a24      	lsrs	r4, r4, #8
 80209d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80209d8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80209dc:	431c      	orrs	r4, r3
 80209de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80209e2:	d019      	beq.n	8020a18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80209e4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80209e8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80209ec:	fb08 f909 	mul.w	r9, r8, r9
 80209f0:	fb08 f800 	mul.w	r8, r8, r0
 80209f4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80209f8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80209fc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020a00:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020a04:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020a08:	4448      	add	r0, r9
 8020a0a:	0a1b      	lsrs	r3, r3, #8
 8020a0c:	0a00      	lsrs	r0, r0, #8
 8020a0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a12:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020a16:	4318      	orrs	r0, r3
 8020a18:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020a1c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020a20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020a24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020a28:	fb0c f808 	mul.w	r8, ip, r8
 8020a2c:	fb0c f606 	mul.w	r6, ip, r6
 8020a30:	fb05 8803 	mla	r8, r5, r3, r8
 8020a34:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020a38:	fb05 6202 	mla	r2, r5, r2, r6
 8020a3c:	fb07 8803 	mla	r8, r7, r3, r8
 8020a40:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020a44:	fb0e 8303 	mla	r3, lr, r3, r8
 8020a48:	0a1b      	lsrs	r3, r3, #8
 8020a4a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020a4e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020a52:	9c02      	ldr	r4, [sp, #8]
 8020a54:	fb07 2703 	mla	r7, r7, r3, r2
 8020a58:	9a03      	ldr	r2, [sp, #12]
 8020a5a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020a5e:	43d2      	mvns	r2, r2
 8020a60:	fb0e 7303 	mla	r3, lr, r3, r7
 8020a64:	b2d2      	uxtb	r2, r2
 8020a66:	0a1b      	lsrs	r3, r3, #8
 8020a68:	4354      	muls	r4, r2
 8020a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a6e:	1c60      	adds	r0, r4, #1
 8020a70:	ea48 0303 	orr.w	r3, r8, r3
 8020a74:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020a78:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020a7c:	7008      	strb	r0, [r1, #0]
 8020a7e:	9801      	ldr	r0, [sp, #4]
 8020a80:	4350      	muls	r0, r2
 8020a82:	1c44      	adds	r4, r0, #1
 8020a84:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8020a88:	0a18      	lsrs	r0, r3, #8
 8020a8a:	0c1b      	lsrs	r3, r3, #16
 8020a8c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020a90:	7048      	strb	r0, [r1, #1]
 8020a92:	9800      	ldr	r0, [sp, #0]
 8020a94:	4350      	muls	r0, r2
 8020a96:	4602      	mov	r2, r0
 8020a98:	3001      	adds	r0, #1
 8020a9a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020a9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020aa2:	708b      	strb	r3, [r1, #2]
 8020aa4:	b005      	add	sp, #20
 8020aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aaa:	bf00      	nop
 8020aac:	0802b131 	.word	0x0802b131
 8020ab0:	0802b626 	.word	0x0802b626
 8020ab4:	0802b1fa 	.word	0x0802b1fa

08020ab8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020abc:	ed2d 8b08 	vpush	{d8-d11}
 8020ac0:	b097      	sub	sp, #92	; 0x5c
 8020ac2:	eeb0 aa40 	vmov.f32	s20, s0
 8020ac6:	eef0 9a60 	vmov.f32	s19, s1
 8020aca:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8020acc:	eeb0 9a41 	vmov.f32	s18, s2
 8020ad0:	9308      	str	r3, [sp, #32]
 8020ad2:	eeb0 8a62 	vmov.f32	s16, s5
 8020ad6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020ada:	eef0 8a43 	vmov.f32	s17, s6
 8020ade:	9015      	str	r0, [sp, #84]	; 0x54
 8020ae0:	eef0 ba44 	vmov.f32	s23, s8
 8020ae4:	6868      	ldr	r0, [r5, #4]
 8020ae6:	eeb0 ba64 	vmov.f32	s22, s9
 8020aea:	9112      	str	r1, [sp, #72]	; 0x48
 8020aec:	eef0 aa45 	vmov.f32	s21, s10
 8020af0:	9310      	str	r3, [sp, #64]	; 0x40
 8020af2:	9214      	str	r2, [sp, #80]	; 0x50
 8020af4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8020af6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8020afa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020afe:	fb00 1303 	mla	r3, r0, r3, r1
 8020b02:	6829      	ldr	r1, [r5, #0]
 8020b04:	6855      	ldr	r5, [r2, #4]
 8020b06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b0a:	3504      	adds	r5, #4
 8020b0c:	18cb      	adds	r3, r1, r3
 8020b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020b10:	6813      	ldr	r3, [r2, #0]
 8020b12:	9311      	str	r3, [sp, #68]	; 0x44
 8020b14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	dc03      	bgt.n	8020b22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020b1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	f340 8333 	ble.w	8021188 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020b22:	9b08      	ldr	r3, [sp, #32]
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	f340 8190 	ble.w	8020e4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020b2a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b2e:	1412      	asrs	r2, r2, #16
 8020b30:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020b34:	d42f      	bmi.n	8020b96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020b36:	1c51      	adds	r1, r2, #1
 8020b38:	428c      	cmp	r4, r1
 8020b3a:	dd2f      	ble.n	8020b9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	db2d      	blt.n	8020b9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020b40:	1c59      	adds	r1, r3, #1
 8020b42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020b44:	4288      	cmp	r0, r1
 8020b46:	dd29      	ble.n	8020b9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020b48:	9b08      	ldr	r3, [sp, #32]
 8020b4a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020b4c:	3b01      	subs	r3, #1
 8020b4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020b50:	fb02 1203 	mla	r2, r2, r3, r1
 8020b54:	1412      	asrs	r2, r2, #16
 8020b56:	d42b      	bmi.n	8020bb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b58:	3201      	adds	r2, #1
 8020b5a:	4294      	cmp	r4, r2
 8020b5c:	dd28      	ble.n	8020bb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b5e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020b60:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020b62:	fb02 1303 	mla	r3, r2, r3, r1
 8020b66:	141b      	asrs	r3, r3, #16
 8020b68:	d422      	bmi.n	8020bb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b6a:	3301      	adds	r3, #1
 8020b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b6e:	429a      	cmp	r2, r3
 8020b70:	dd1e      	ble.n	8020bb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b74:	f103 0803 	add.w	r8, r3, #3
 8020b78:	9b08      	ldr	r3, [sp, #32]
 8020b7a:	9307      	str	r3, [sp, #28]
 8020b7c:	9b07      	ldr	r3, [sp, #28]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	f300 81ca 	bgt.w	8020f18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020b84:	9b08      	ldr	r3, [sp, #32]
 8020b86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b90:	441a      	add	r2, r3
 8020b92:	920b      	str	r2, [sp, #44]	; 0x2c
 8020b94:	e15b      	b.n	8020e4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8020b96:	1c51      	adds	r1, r2, #1
 8020b98:	f040 8148 	bne.w	8020e2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020b9c:	42a2      	cmp	r2, r4
 8020b9e:	f280 8145 	bge.w	8020e2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020ba2:	1c5a      	adds	r2, r3, #1
 8020ba4:	f2c0 8142 	blt.w	8020e2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020ba8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020baa:	4293      	cmp	r3, r2
 8020bac:	f280 813e 	bge.w	8020e2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020bb0:	9b08      	ldr	r3, [sp, #32]
 8020bb2:	9313      	str	r3, [sp, #76]	; 0x4c
 8020bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020bb6:	9307      	str	r3, [sp, #28]
 8020bb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	dde2      	ble.n	8020b84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020bbe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020bc0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bc2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020bc6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020bc8:	141b      	asrs	r3, r3, #16
 8020bca:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020bce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020bd0:	1412      	asrs	r2, r2, #16
 8020bd2:	f100 818b 	bmi.w	8020eec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8020bd6:	1c56      	adds	r6, r2, #1
 8020bd8:	42b4      	cmp	r4, r6
 8020bda:	f340 8189 	ble.w	8020ef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020bde:	2b00      	cmp	r3, #0
 8020be0:	f2c0 8186 	blt.w	8020ef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020be4:	1c5e      	adds	r6, r3, #1
 8020be6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020be8:	42b7      	cmp	r7, r6
 8020bea:	f340 8181 	ble.w	8020ef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020bee:	fb03 2304 	mla	r3, r3, r4, r2
 8020bf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020bf4:	18d6      	adds	r6, r2, r3
 8020bf6:	5cd3      	ldrb	r3, [r2, r3]
 8020bf8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020bfc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020c00:	2900      	cmp	r1, #0
 8020c02:	f000 8163 	beq.w	8020ecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020c06:	7872      	ldrb	r2, [r6, #1]
 8020c08:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020c0c:	920c      	str	r2, [sp, #48]	; 0x30
 8020c0e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020c12:	2800      	cmp	r0, #0
 8020c14:	f000 8164 	beq.w	8020ee0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020c18:	1932      	adds	r2, r6, r4
 8020c1a:	5d36      	ldrb	r6, [r6, r4]
 8020c1c:	7852      	ldrb	r2, [r2, #1]
 8020c1e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020c22:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020c26:	9609      	str	r6, [sp, #36]	; 0x24
 8020c28:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020c2c:	0e16      	lsrs	r6, r2, #24
 8020c2e:	920d      	str	r2, [sp, #52]	; 0x34
 8020c30:	b289      	uxth	r1, r1
 8020c32:	b280      	uxth	r0, r0
 8020c34:	fb01 fb00 	mul.w	fp, r1, r0
 8020c38:	0109      	lsls	r1, r1, #4
 8020c3a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020c3e:	eba1 090b 	sub.w	r9, r1, fp
 8020c42:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020c46:	b280      	uxth	r0, r0
 8020c48:	fa1f f989 	uxth.w	r9, r9
 8020c4c:	1a12      	subs	r2, r2, r0
 8020c4e:	fb09 f108 	mul.w	r1, r9, r8
 8020c52:	b292      	uxth	r2, r2
 8020c54:	fb02 110c 	mla	r1, r2, ip, r1
 8020c58:	fb00 110a 	mla	r1, r0, sl, r1
 8020c5c:	fb0b 1106 	mla	r1, fp, r6, r1
 8020c60:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020c64:	2900      	cmp	r1, #0
 8020c66:	f000 80d2 	beq.w	8020e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c6a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020c6e:	d01b      	beq.n	8020ca8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020c70:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c78:	fb0c fe0e 	mul.w	lr, ip, lr
 8020c7c:	fb0c fc03 	mul.w	ip, ip, r3
 8020c80:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020c84:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c8c:	4473      	add	r3, lr
 8020c8e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020c92:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020c96:	0a1b      	lsrs	r3, r3, #8
 8020c98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ca0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020ca4:	ea43 030e 	orr.w	r3, r3, lr
 8020ca8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020cac:	d01e      	beq.n	8020cec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020cae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020cb0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020cb4:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020cb8:	fb08 fc0c 	mul.w	ip, r8, ip
 8020cbc:	fb08 f80e 	mul.w	r8, r8, lr
 8020cc0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020cc4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020cc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ccc:	44e6      	add	lr, ip
 8020cce:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020cd2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020cd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cda:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020cde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ce2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020ce6:	ea4e 0708 	orr.w	r7, lr, r8
 8020cea:	970c      	str	r7, [sp, #48]	; 0x30
 8020cec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020cf0:	d01e      	beq.n	8020d30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020cf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020cf4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020cf8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020cfc:	fb0a f808 	mul.w	r8, sl, r8
 8020d00:	fb0a fa0c 	mul.w	sl, sl, ip
 8020d04:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020d08:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020d0c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020d10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d14:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020d18:	44c6      	add	lr, r8
 8020d1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d2a:	ea4e 070a 	orr.w	r7, lr, sl
 8020d2e:	9709      	str	r7, [sp, #36]	; 0x24
 8020d30:	2eff      	cmp	r6, #255	; 0xff
 8020d32:	d01d      	beq.n	8020d70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020d34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020d36:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020d3a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020d3e:	fb06 f808 	mul.w	r8, r6, r8
 8020d42:	fb06 f60c 	mul.w	r6, r6, ip
 8020d46:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020d4a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020d4e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020d52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d56:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020d5a:	44c6      	add	lr, r8
 8020d5c:	0a36      	lsrs	r6, r6, #8
 8020d5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d62:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020d66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020d6a:	ea4e 0606 	orr.w	r6, lr, r6
 8020d6e:	960d      	str	r6, [sp, #52]	; 0x34
 8020d70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020d72:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020d76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d7c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020d80:	43c9      	mvns	r1, r1
 8020d82:	fb09 f606 	mul.w	r6, r9, r6
 8020d86:	b2c9      	uxtb	r1, r1
 8020d88:	fb02 660c 	mla	r6, r2, ip, r6
 8020d8c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020d92:	fb00 660c 	mla	r6, r0, ip, r6
 8020d96:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020d9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020d9c:	fb0b 660c 	mla	r6, fp, ip, r6
 8020da0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020da4:	fb09 f90c 	mul.w	r9, r9, ip
 8020da8:	0a36      	lsrs	r6, r6, #8
 8020daa:	fb02 9303 	mla	r3, r2, r3, r9
 8020dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020db0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020db4:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020db8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020dba:	fb00 330e 	mla	r3, r0, lr, r3
 8020dbe:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020dc2:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020dc6:	9b07      	ldr	r3, [sp, #28]
 8020dc8:	781b      	ldrb	r3, [r3, #0]
 8020dca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020dce:	fb03 f201 	mul.w	r2, r3, r1
 8020dd2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020dd6:	1c53      	adds	r3, r2, #1
 8020dd8:	ea46 060b 	orr.w	r6, r6, fp
 8020ddc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020de0:	9a07      	ldr	r2, [sp, #28]
 8020de2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020de6:	7013      	strb	r3, [r2, #0]
 8020de8:	7853      	ldrb	r3, [r2, #1]
 8020dea:	434b      	muls	r3, r1
 8020dec:	1c5a      	adds	r2, r3, #1
 8020dee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020df2:	0a33      	lsrs	r3, r6, #8
 8020df4:	0c36      	lsrs	r6, r6, #16
 8020df6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020dfa:	9a07      	ldr	r2, [sp, #28]
 8020dfc:	7053      	strb	r3, [r2, #1]
 8020dfe:	7893      	ldrb	r3, [r2, #2]
 8020e00:	4359      	muls	r1, r3
 8020e02:	1c4b      	adds	r3, r1, #1
 8020e04:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020e08:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020e0c:	7096      	strb	r6, [r2, #2]
 8020e0e:	9b07      	ldr	r3, [sp, #28]
 8020e10:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e12:	3303      	adds	r3, #3
 8020e14:	9307      	str	r3, [sp, #28]
 8020e16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e18:	4413      	add	r3, r2
 8020e1a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020e1c:	9329      	str	r3, [sp, #164]	; 0xa4
 8020e1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e20:	4413      	add	r3, r2
 8020e22:	932a      	str	r3, [sp, #168]	; 0xa8
 8020e24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020e26:	3b01      	subs	r3, #1
 8020e28:	9313      	str	r3, [sp, #76]	; 0x4c
 8020e2a:	e6c5      	b.n	8020bb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020e2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e2e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e30:	4413      	add	r3, r2
 8020e32:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020e34:	9329      	str	r3, [sp, #164]	; 0xa4
 8020e36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e38:	4413      	add	r3, r2
 8020e3a:	932a      	str	r3, [sp, #168]	; 0xa8
 8020e3c:	9b08      	ldr	r3, [sp, #32]
 8020e3e:	3b01      	subs	r3, #1
 8020e40:	9308      	str	r3, [sp, #32]
 8020e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e44:	3303      	adds	r3, #3
 8020e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e48:	e66b      	b.n	8020b22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020e4a:	f47f ae7d 	bne.w	8020b48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	f340 8199 	ble.w	8021188 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020e5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e5c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020e60:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020e64:	eef0 6a48 	vmov.f32	s13, s16
 8020e68:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020e6c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020e70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e74:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020e78:	eef0 6a68 	vmov.f32	s13, s17
 8020e7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e80:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020e84:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e88:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e8c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e90:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e94:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e98:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e9c:	ee18 2a10 	vmov	r2, s16
 8020ea0:	eeb0 8a47 	vmov.f32	s16, s14
 8020ea4:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ea8:	ee18 2a90 	vmov	r2, s17
 8020eac:	932b      	str	r3, [sp, #172]	; 0xac
 8020eae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020eb0:	eef0 8a67 	vmov.f32	s17, s15
 8020eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8020eb8:	932c      	str	r3, [sp, #176]	; 0xb0
 8020eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020ebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ebe:	3b01      	subs	r3, #1
 8020ec0:	9312      	str	r3, [sp, #72]	; 0x48
 8020ec2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ec4:	bf08      	it	eq
 8020ec6:	4613      	moveq	r3, r2
 8020ec8:	9308      	str	r3, [sp, #32]
 8020eca:	e623      	b.n	8020b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020ecc:	b158      	cbz	r0, 8020ee6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020ece:	5d32      	ldrb	r2, [r6, r4]
 8020ed0:	26ff      	movs	r6, #255	; 0xff
 8020ed2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020ed6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020eda:	9209      	str	r2, [sp, #36]	; 0x24
 8020edc:	46b0      	mov	r8, r6
 8020ede:	e6a7      	b.n	8020c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020ee0:	26ff      	movs	r6, #255	; 0xff
 8020ee2:	46b2      	mov	sl, r6
 8020ee4:	e6a4      	b.n	8020c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020ee6:	26ff      	movs	r6, #255	; 0xff
 8020ee8:	46b2      	mov	sl, r6
 8020eea:	e7f7      	b.n	8020edc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020eec:	1c57      	adds	r7, r2, #1
 8020eee:	d18e      	bne.n	8020e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ef0:	4294      	cmp	r4, r2
 8020ef2:	dd8c      	ble.n	8020e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ef4:	1c5e      	adds	r6, r3, #1
 8020ef6:	db8a      	blt.n	8020e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ef8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020efa:	429e      	cmp	r6, r3
 8020efc:	dd87      	ble.n	8020e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020efe:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020f02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020f06:	e9cd 4600 	strd	r4, r6, [sp]
 8020f0a:	462b      	mov	r3, r5
 8020f0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f0e:	9907      	ldr	r1, [sp, #28]
 8020f10:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020f12:	f7ff fc85 	bl	8020820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020f16:	e77a      	b.n	8020e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020f18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020f1a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020f1c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020f20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020f22:	1409      	asrs	r1, r1, #16
 8020f24:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020f28:	141b      	asrs	r3, r3, #16
 8020f2a:	fb04 1303 	mla	r3, r4, r3, r1
 8020f2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020f30:	18ce      	adds	r6, r1, r3
 8020f32:	5ccb      	ldrb	r3, [r1, r3]
 8020f34:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020f38:	0e1f      	lsrs	r7, r3, #24
 8020f3a:	2a00      	cmp	r2, #0
 8020f3c:	f000 8114 	beq.w	8021168 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020f40:	7871      	ldrb	r1, [r6, #1]
 8020f42:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020f46:	910e      	str	r1, [sp, #56]	; 0x38
 8020f48:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020f4c:	2800      	cmp	r0, #0
 8020f4e:	f000 8115 	beq.w	802117c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020f52:	1931      	adds	r1, r6, r4
 8020f54:	5d36      	ldrb	r6, [r6, r4]
 8020f56:	7849      	ldrb	r1, [r1, #1]
 8020f58:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020f5c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020f60:	960a      	str	r6, [sp, #40]	; 0x28
 8020f62:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020f66:	0e0e      	lsrs	r6, r1, #24
 8020f68:	910f      	str	r1, [sp, #60]	; 0x3c
 8020f6a:	b292      	uxth	r2, r2
 8020f6c:	b280      	uxth	r0, r0
 8020f6e:	fb02 fb00 	mul.w	fp, r2, r0
 8020f72:	0112      	lsls	r2, r2, #4
 8020f74:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020f78:	eba2 090b 	sub.w	r9, r2, fp
 8020f7c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020f80:	b280      	uxth	r0, r0
 8020f82:	fa1f f989 	uxth.w	r9, r9
 8020f86:	1a09      	subs	r1, r1, r0
 8020f88:	fb09 f20e 	mul.w	r2, r9, lr
 8020f8c:	b289      	uxth	r1, r1
 8020f8e:	fb01 2207 	mla	r2, r1, r7, r2
 8020f92:	fb00 220a 	mla	r2, r0, sl, r2
 8020f96:	fb0b 2206 	mla	r2, fp, r6, r2
 8020f9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020f9e:	9213      	str	r2, [sp, #76]	; 0x4c
 8020fa0:	2a00      	cmp	r2, #0
 8020fa2:	f000 80d4 	beq.w	802114e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020fa6:	2fff      	cmp	r7, #255	; 0xff
 8020fa8:	d01a      	beq.n	8020fe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020faa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020fae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fb2:	fb07 fc0c 	mul.w	ip, r7, ip
 8020fb6:	435f      	muls	r7, r3
 8020fb8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020fbc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020fc0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fc4:	4463      	add	r3, ip
 8020fc6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020fca:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020fce:	0a1b      	lsrs	r3, r3, #8
 8020fd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fd4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020fd8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020fdc:	ea43 030c 	orr.w	r3, r3, ip
 8020fe0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020fe4:	d01f      	beq.n	8021026 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020fe6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020fea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020fee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020ff2:	fb0e f707 	mul.w	r7, lr, r7
 8020ff6:	fb0e fe0c 	mul.w	lr, lr, ip
 8020ffa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020ffe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021002:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021006:	44bc      	add	ip, r7
 8021008:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802100c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021010:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021014:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021018:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802101c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021020:	ea4c 020e 	orr.w	r2, ip, lr
 8021024:	920e      	str	r2, [sp, #56]	; 0x38
 8021026:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802102a:	d01e      	beq.n	802106a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 802102c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802102e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021032:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021036:	fb0a fe0e 	mul.w	lr, sl, lr
 802103a:	fb0a fa07 	mul.w	sl, sl, r7
 802103e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021042:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021046:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802104a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802104e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021052:	44f4      	add	ip, lr
 8021054:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021058:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802105c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021060:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021064:	ea4c 020a 	orr.w	r2, ip, sl
 8021068:	920a      	str	r2, [sp, #40]	; 0x28
 802106a:	2eff      	cmp	r6, #255	; 0xff
 802106c:	d01c      	beq.n	80210a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802106e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021070:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021074:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021078:	fb06 fe0e 	mul.w	lr, r6, lr
 802107c:	437e      	muls	r6, r7
 802107e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021082:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021086:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802108a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802108e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021092:	44f4      	add	ip, lr
 8021094:	0a36      	lsrs	r6, r6, #8
 8021096:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802109a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802109e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210a2:	ea4c 0206 	orr.w	r2, ip, r6
 80210a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80210a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80210aa:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80210ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210b2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80210b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210b8:	fb09 f606 	mul.w	r6, r9, r6
 80210bc:	fb01 6607 	mla	r6, r1, r7, r6
 80210c0:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80210c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210c6:	fb00 6607 	mla	r6, r0, r7, r6
 80210ca:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80210ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80210d0:	fb0b 6607 	mla	r6, fp, r7, r6
 80210d4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80210d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210da:	fb09 f907 	mul.w	r9, r9, r7
 80210de:	0a36      	lsrs	r6, r6, #8
 80210e0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80210e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210e6:	fb01 9303 	mla	r3, r1, r3, r9
 80210ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80210ee:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80210f2:	fb00 330c 	mla	r3, r0, ip, r3
 80210f6:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80210fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80210fc:	43da      	mvns	r2, r3
 80210fe:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8021102:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021106:	b2d2      	uxtb	r2, r2
 8021108:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802110c:	fb03 f102 	mul.w	r1, r3, r2
 8021110:	ea46 060e 	orr.w	r6, r6, lr
 8021114:	1c4b      	adds	r3, r1, #1
 8021116:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802111a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802111e:	f808 3c03 	strb.w	r3, [r8, #-3]
 8021122:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8021126:	4353      	muls	r3, r2
 8021128:	1c59      	adds	r1, r3, #1
 802112a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802112e:	0a33      	lsrs	r3, r6, #8
 8021130:	0c36      	lsrs	r6, r6, #16
 8021132:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021136:	f808 3c02 	strb.w	r3, [r8, #-2]
 802113a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802113e:	435a      	muls	r2, r3
 8021140:	1c53      	adds	r3, r2, #1
 8021142:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021146:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802114a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802114e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021150:	f108 0803 	add.w	r8, r8, #3
 8021154:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021156:	4413      	add	r3, r2
 8021158:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802115a:	9329      	str	r3, [sp, #164]	; 0xa4
 802115c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802115e:	4413      	add	r3, r2
 8021160:	932a      	str	r3, [sp, #168]	; 0xa8
 8021162:	9b07      	ldr	r3, [sp, #28]
 8021164:	3b01      	subs	r3, #1
 8021166:	e508      	b.n	8020b7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8021168:	b158      	cbz	r0, 8021182 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802116a:	5d31      	ldrb	r1, [r6, r4]
 802116c:	26ff      	movs	r6, #255	; 0xff
 802116e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8021172:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021176:	910a      	str	r1, [sp, #40]	; 0x28
 8021178:	46b6      	mov	lr, r6
 802117a:	e6f6      	b.n	8020f6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802117c:	26ff      	movs	r6, #255	; 0xff
 802117e:	46b2      	mov	sl, r6
 8021180:	e6f3      	b.n	8020f6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8021182:	26ff      	movs	r6, #255	; 0xff
 8021184:	46b2      	mov	sl, r6
 8021186:	e7f7      	b.n	8021178 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8021188:	b017      	add	sp, #92	; 0x5c
 802118a:	ecbd 8b08 	vpop	{d8-d11}
 802118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021194 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021198:	b08d      	sub	sp, #52	; 0x34
 802119a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802119e:	9103      	str	r1, [sp, #12]
 80211a0:	fb07 5803 	mla	r8, r7, r3, r5
 80211a4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80211a8:	9803      	ldr	r0, [sp, #12]
 80211aa:	2f00      	cmp	r7, #0
 80211ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80211ae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80211b2:	9903      	ldr	r1, [sp, #12]
 80211b4:	9c03      	ldr	r4, [sp, #12]
 80211b6:	eb02 0608 	add.w	r6, r2, r8
 80211ba:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80211be:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80211c2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80211c6:	7809      	ldrb	r1, [r1, #0]
 80211c8:	7840      	ldrb	r0, [r0, #1]
 80211ca:	78a4      	ldrb	r4, [r4, #2]
 80211cc:	db51      	blt.n	8021272 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80211ce:	45be      	cmp	lr, r7
 80211d0:	dd4f      	ble.n	8021272 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80211d2:	2d00      	cmp	r5, #0
 80211d4:	db49      	blt.n	802126a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80211d6:	42ab      	cmp	r3, r5
 80211d8:	dd47      	ble.n	802126a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80211da:	f812 2008 	ldrb.w	r2, [r2, r8]
 80211de:	9204      	str	r2, [sp, #16]
 80211e0:	7872      	ldrb	r2, [r6, #1]
 80211e2:	9205      	str	r2, [sp, #20]
 80211e4:	78b2      	ldrb	r2, [r6, #2]
 80211e6:	9206      	str	r2, [sp, #24]
 80211e8:	1c6a      	adds	r2, r5, #1
 80211ea:	d449      	bmi.n	8021280 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211ec:	4293      	cmp	r3, r2
 80211ee:	dd47      	ble.n	8021280 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211f0:	f1bc 0f00 	cmp.w	ip, #0
 80211f4:	d044      	beq.n	8021280 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80211f6:	7972      	ldrb	r2, [r6, #5]
 80211f8:	f896 b003 	ldrb.w	fp, [r6, #3]
 80211fc:	f896 a004 	ldrb.w	sl, [r6, #4]
 8021200:	9201      	str	r2, [sp, #4]
 8021202:	3701      	adds	r7, #1
 8021204:	d444      	bmi.n	8021290 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021206:	45be      	cmp	lr, r7
 8021208:	dd42      	ble.n	8021290 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802120a:	f1b9 0f00 	cmp.w	r9, #0
 802120e:	f000 80c1 	beq.w	8021394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8021212:	2d00      	cmp	r5, #0
 8021214:	db38      	blt.n	8021288 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8021216:	42ab      	cmp	r3, r5
 8021218:	dd36      	ble.n	8021288 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802121a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802121e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8021222:	2203      	movs	r2, #3
 8021224:	fb03 6702 	mla	r7, r3, r2, r6
 8021228:	fb03 6202 	mla	r2, r3, r2, r6
 802122c:	787f      	ldrb	r7, [r7, #1]
 802122e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021232:	9702      	str	r7, [sp, #8]
 8021234:	3501      	adds	r5, #1
 8021236:	d432      	bmi.n	802129e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021238:	42ab      	cmp	r3, r5
 802123a:	dd30      	ble.n	802129e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802123c:	f1bc 0f00 	cmp.w	ip, #0
 8021240:	d031      	beq.n	80212a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8021242:	2703      	movs	r7, #3
 8021244:	fb13 7207 	smlabb	r2, r3, r7, r7
 8021248:	5cb5      	ldrb	r5, [r6, r2]
 802124a:	fb03 6207 	mla	r2, r3, r7, r6
 802124e:	fb03 6307 	mla	r3, r3, r7, r6
 8021252:	7912      	ldrb	r2, [r2, #4]
 8021254:	795e      	ldrb	r6, [r3, #5]
 8021256:	f1bc 0f0f 	cmp.w	ip, #15
 802125a:	d927      	bls.n	80212ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802125c:	4b53      	ldr	r3, [pc, #332]	; (80213ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802125e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021262:	4a53      	ldr	r2, [pc, #332]	; (80213b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8021264:	4853      	ldr	r0, [pc, #332]	; (80213b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8021266:	f004 fad9 	bl	802581c <__assert_func>
 802126a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802126e:	9104      	str	r1, [sp, #16]
 8021270:	e7ba      	b.n	80211e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8021272:	9401      	str	r4, [sp, #4]
 8021274:	4682      	mov	sl, r0
 8021276:	468b      	mov	fp, r1
 8021278:	9104      	str	r1, [sp, #16]
 802127a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802127e:	e7c0      	b.n	8021202 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021280:	9401      	str	r4, [sp, #4]
 8021282:	4682      	mov	sl, r0
 8021284:	468b      	mov	fp, r1
 8021286:	e7bc      	b.n	8021202 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8021288:	46a6      	mov	lr, r4
 802128a:	9002      	str	r0, [sp, #8]
 802128c:	4688      	mov	r8, r1
 802128e:	e7d1      	b.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8021290:	4626      	mov	r6, r4
 8021292:	4602      	mov	r2, r0
 8021294:	460d      	mov	r5, r1
 8021296:	46a6      	mov	lr, r4
 8021298:	9002      	str	r0, [sp, #8]
 802129a:	4688      	mov	r8, r1
 802129c:	e7db      	b.n	8021256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802129e:	4626      	mov	r6, r4
 80212a0:	4602      	mov	r2, r0
 80212a2:	460d      	mov	r5, r1
 80212a4:	e7d7      	b.n	8021256 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80212a6:	4626      	mov	r6, r4
 80212a8:	4602      	mov	r2, r0
 80212aa:	460d      	mov	r5, r1
 80212ac:	f1b9 0f0f 	cmp.w	r9, #15
 80212b0:	d8d4      	bhi.n	802125c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80212b2:	fa1f f38c 	uxth.w	r3, ip
 80212b6:	fa1f fc89 	uxth.w	ip, r9
 80212ba:	fb03 f70c 	mul.w	r7, r3, ip
 80212be:	011b      	lsls	r3, r3, #4
 80212c0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80212c4:	9707      	str	r7, [sp, #28]
 80212c6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80212ca:	fa1f fc8c 	uxth.w	ip, ip
 80212ce:	eba7 070c 	sub.w	r7, r7, ip
 80212d2:	b2bf      	uxth	r7, r7
 80212d4:	9709      	str	r7, [sp, #36]	; 0x24
 80212d6:	9f07      	ldr	r7, [sp, #28]
 80212d8:	1bdb      	subs	r3, r3, r7
 80212da:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80212de:	b29b      	uxth	r3, r3
 80212e0:	9708      	str	r7, [sp, #32]
 80212e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80212e4:	930a      	str	r3, [sp, #40]	; 0x28
 80212e6:	ea6f 0907 	mvn.w	r9, r7
 80212ea:	fb03 fb0b 	mul.w	fp, r3, fp
 80212ee:	9f04      	ldr	r7, [sp, #16]
 80212f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212f2:	fa5f f989 	uxtb.w	r9, r9
 80212f6:	fb03 bb07 	mla	fp, r3, r7, fp
 80212fa:	9f07      	ldr	r7, [sp, #28]
 80212fc:	fb11 f109 	smulbb	r1, r1, r9
 8021300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021302:	fb0c b808 	mla	r8, ip, r8, fp
 8021306:	fb10 f009 	smulbb	r0, r0, r9
 802130a:	fb14 f409 	smulbb	r4, r4, r9
 802130e:	fb07 8805 	mla	r8, r7, r5, r8
 8021312:	9d08      	ldr	r5, [sp, #32]
 8021314:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021316:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802131a:	fb08 1805 	mla	r8, r8, r5, r1
 802131e:	9d05      	ldr	r5, [sp, #20]
 8021320:	fa1f f888 	uxth.w	r8, r8
 8021324:	f108 0101 	add.w	r1, r8, #1
 8021328:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802132c:	9903      	ldr	r1, [sp, #12]
 802132e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021332:	f881 8000 	strb.w	r8, [r1]
 8021336:	fb03 f10a 	mul.w	r1, r3, sl
 802133a:	fb07 1105 	mla	r1, r7, r5, r1
 802133e:	9d02      	ldr	r5, [sp, #8]
 8021340:	fb0c 1105 	mla	r1, ip, r5, r1
 8021344:	9d07      	ldr	r5, [sp, #28]
 8021346:	fb05 1102 	mla	r1, r5, r2, r1
 802134a:	9a08      	ldr	r2, [sp, #32]
 802134c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021350:	fb01 0102 	mla	r1, r1, r2, r0
 8021354:	9a03      	ldr	r2, [sp, #12]
 8021356:	b289      	uxth	r1, r1
 8021358:	1c48      	adds	r0, r1, #1
 802135a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802135e:	1209      	asrs	r1, r1, #8
 8021360:	7051      	strb	r1, [r2, #1]
 8021362:	9a01      	ldr	r2, [sp, #4]
 8021364:	4353      	muls	r3, r2
 8021366:	9a06      	ldr	r2, [sp, #24]
 8021368:	fb07 3702 	mla	r7, r7, r2, r3
 802136c:	9b08      	ldr	r3, [sp, #32]
 802136e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8021372:	fb05 c606 	mla	r6, r5, r6, ip
 8021376:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802137a:	fb06 4603 	mla	r6, r6, r3, r4
 802137e:	9b03      	ldr	r3, [sp, #12]
 8021380:	b2b6      	uxth	r6, r6
 8021382:	f106 0e01 	add.w	lr, r6, #1
 8021386:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802138a:	1236      	asrs	r6, r6, #8
 802138c:	709e      	strb	r6, [r3, #2]
 802138e:	b00d      	add	sp, #52	; 0x34
 8021390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021394:	f1bc 0f0f 	cmp.w	ip, #15
 8021398:	f63f af60 	bhi.w	802125c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802139c:	4626      	mov	r6, r4
 802139e:	4602      	mov	r2, r0
 80213a0:	460d      	mov	r5, r1
 80213a2:	46a6      	mov	lr, r4
 80213a4:	9002      	str	r0, [sp, #8]
 80213a6:	4688      	mov	r8, r1
 80213a8:	e783      	b.n	80212b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80213aa:	bf00      	nop
 80213ac:	0802b131 	.word	0x0802b131
 80213b0:	0802b626 	.word	0x0802b626
 80213b4:	0802b1fa 	.word	0x0802b1fa

080213b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80213b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213bc:	ed2d 8b08 	vpush	{d8-d11}
 80213c0:	b0a1      	sub	sp, #132	; 0x84
 80213c2:	eeb0 aa40 	vmov.f32	s20, s0
 80213c6:	eef0 9a60 	vmov.f32	s19, s1
 80213ca:	9307      	str	r3, [sp, #28]
 80213cc:	eeb0 9a41 	vmov.f32	s18, s2
 80213d0:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80213d4:	eeb0 8a62 	vmov.f32	s16, s5
 80213d8:	9210      	str	r2, [sp, #64]	; 0x40
 80213da:	eef0 8a43 	vmov.f32	s17, s6
 80213de:	9308      	str	r3, [sp, #32]
 80213e0:	eef0 ba44 	vmov.f32	s23, s8
 80213e4:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80213e8:	eeb0 ba64 	vmov.f32	s22, s9
 80213ec:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80213ee:	eef0 aa45 	vmov.f32	s21, s10
 80213f2:	930a      	str	r3, [sp, #40]	; 0x28
 80213f4:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80213f8:	901f      	str	r0, [sp, #124]	; 0x7c
 80213fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80213fc:	6850      	ldr	r0, [r2, #4]
 80213fe:	910e      	str	r1, [sp, #56]	; 0x38
 8021400:	6812      	ldr	r2, [r2, #0]
 8021402:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8021406:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802140a:	fb00 1303 	mla	r3, r0, r3, r1
 802140e:	9908      	ldr	r1, [sp, #32]
 8021410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021414:	18d3      	adds	r3, r2, r3
 8021416:	2203      	movs	r2, #3
 8021418:	9309      	str	r3, [sp, #36]	; 0x24
 802141a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	930c      	str	r3, [sp, #48]	; 0x30
 8021420:	f06f 0304 	mvn.w	r3, #4
 8021424:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021428:	930d      	str	r3, [sp, #52]	; 0x34
 802142a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802142c:	43db      	mvns	r3, r3
 802142e:	b2db      	uxtb	r3, r3
 8021430:	930b      	str	r3, [sp, #44]	; 0x2c
 8021432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021434:	2b00      	cmp	r3, #0
 8021436:	dc03      	bgt.n	8021440 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802143a:	2b00      	cmp	r3, #0
 802143c:	f340 81df 	ble.w	80217fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021440:	9b07      	ldr	r3, [sp, #28]
 8021442:	2b00      	cmp	r3, #0
 8021444:	f340 80f2 	ble.w	802162c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021448:	ea5f 4228 	movs.w	r2, r8, asr #16
 802144c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021450:	d430      	bmi.n	80214b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021452:	1c51      	adds	r1, r2, #1
 8021454:	9808      	ldr	r0, [sp, #32]
 8021456:	4281      	cmp	r1, r0
 8021458:	da2f      	bge.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802145a:	2b00      	cmp	r3, #0
 802145c:	db2d      	blt.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802145e:	1c59      	adds	r1, r3, #1
 8021460:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021462:	4288      	cmp	r0, r1
 8021464:	dd29      	ble.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021466:	9b07      	ldr	r3, [sp, #28]
 8021468:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802146a:	3b01      	subs	r3, #1
 802146c:	fb02 8203 	mla	r2, r2, r3, r8
 8021470:	1412      	asrs	r2, r2, #16
 8021472:	d42d      	bmi.n	80214d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021474:	3201      	adds	r2, #1
 8021476:	9908      	ldr	r1, [sp, #32]
 8021478:	4291      	cmp	r1, r2
 802147a:	dd29      	ble.n	80214d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802147c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802147e:	fb02 b303 	mla	r3, r2, r3, fp
 8021482:	141b      	asrs	r3, r3, #16
 8021484:	d424      	bmi.n	80214d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021486:	3301      	adds	r3, #1
 8021488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802148a:	429a      	cmp	r2, r3
 802148c:	dd20      	ble.n	80214d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802148e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021490:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021494:	1cde      	adds	r6, r3, #3
 8021496:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802149a:	f1bc 0f00 	cmp.w	ip, #0
 802149e:	f300 811f 	bgt.w	80216e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 80214a2:	9b07      	ldr	r3, [sp, #28]
 80214a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80214a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80214ae:	4423      	add	r3, r4
 80214b0:	9309      	str	r3, [sp, #36]	; 0x24
 80214b2:	e0bd      	b.n	8021630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80214b4:	1c57      	adds	r7, r2, #1
 80214b6:	f040 80ae 	bne.w	8021616 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80214ba:	9908      	ldr	r1, [sp, #32]
 80214bc:	428a      	cmp	r2, r1
 80214be:	f280 80aa 	bge.w	8021616 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80214c2:	1c5e      	adds	r6, r3, #1
 80214c4:	f2c0 80a7 	blt.w	8021616 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80214c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214ca:	4293      	cmp	r3, r2
 80214cc:	f280 80a3 	bge.w	8021616 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80214d0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80214d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80214d6:	f1ba 0f00 	cmp.w	sl, #0
 80214da:	dde2      	ble.n	80214a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80214dc:	ea5f 4028 	movs.w	r0, r8, asr #16
 80214e0:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80214e4:	ea4f 412b 	mov.w	r1, fp, asr #16
 80214e8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80214ec:	f100 80df 	bmi.w	80216ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80214f0:	1c45      	adds	r5, r0, #1
 80214f2:	9f08      	ldr	r7, [sp, #32]
 80214f4:	42af      	cmp	r7, r5
 80214f6:	f340 80dc 	ble.w	80216b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80214fa:	2900      	cmp	r1, #0
 80214fc:	f2c0 80d9 	blt.w	80216b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8021500:	1c4d      	adds	r5, r1, #1
 8021502:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021504:	42af      	cmp	r7, r5
 8021506:	f340 80d4 	ble.w	80216b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802150a:	9d08      	ldr	r5, [sp, #32]
 802150c:	fb05 0101 	mla	r1, r5, r1, r0
 8021510:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021512:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021516:	1845      	adds	r5, r0, r1
 8021518:	5c40      	ldrb	r0, [r0, r1]
 802151a:	792f      	ldrb	r7, [r5, #4]
 802151c:	7869      	ldrb	r1, [r5, #1]
 802151e:	9711      	str	r7, [sp, #68]	; 0x44
 8021520:	796f      	ldrb	r7, [r5, #5]
 8021522:	f895 e002 	ldrb.w	lr, [r5, #2]
 8021526:	f895 9003 	ldrb.w	r9, [r5, #3]
 802152a:	9712      	str	r7, [sp, #72]	; 0x48
 802152c:	b17a      	cbz	r2, 802154e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 802152e:	3505      	adds	r5, #5
 8021530:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021532:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021534:	19ef      	adds	r7, r5, r7
 8021536:	5d2d      	ldrb	r5, [r5, r4]
 8021538:	787c      	ldrb	r4, [r7, #1]
 802153a:	9513      	str	r5, [sp, #76]	; 0x4c
 802153c:	9415      	str	r4, [sp, #84]	; 0x54
 802153e:	78bc      	ldrb	r4, [r7, #2]
 8021540:	9417      	str	r4, [sp, #92]	; 0x5c
 8021542:	78fc      	ldrb	r4, [r7, #3]
 8021544:	9414      	str	r4, [sp, #80]	; 0x50
 8021546:	793c      	ldrb	r4, [r7, #4]
 8021548:	9416      	str	r4, [sp, #88]	; 0x58
 802154a:	797c      	ldrb	r4, [r7, #5]
 802154c:	9418      	str	r4, [sp, #96]	; 0x60
 802154e:	b29b      	uxth	r3, r3
 8021550:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021552:	b292      	uxth	r2, r2
 8021554:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8021558:	fb03 f702 	mul.w	r7, r3, r2
 802155c:	011b      	lsls	r3, r3, #4
 802155e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8021562:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021566:	1bdb      	subs	r3, r3, r7
 8021568:	b292      	uxth	r2, r2
 802156a:	b29b      	uxth	r3, r3
 802156c:	ebac 0c02 	sub.w	ip, ip, r2
 8021570:	fb03 f909 	mul.w	r9, r3, r9
 8021574:	fa1f fc8c 	uxth.w	ip, ip
 8021578:	fb0c 9000 	mla	r0, ip, r0, r9
 802157c:	f896 9000 	ldrb.w	r9, [r6]
 8021580:	fb02 0004 	mla	r0, r2, r4, r0
 8021584:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021586:	fb07 0004 	mla	r0, r7, r4, r0
 802158a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802158c:	fb19 f904 	smulbb	r9, r9, r4
 8021590:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021594:	fb00 9005 	mla	r0, r0, r5, r9
 8021598:	b280      	uxth	r0, r0
 802159a:	f100 0901 	add.w	r9, r0, #1
 802159e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80215a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80215a4:	4358      	muls	r0, r3
 80215a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80215aa:	fb0c 0101 	mla	r1, ip, r1, r0
 80215ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80215b0:	f886 9000 	strb.w	r9, [r6]
 80215b4:	fb02 1100 	mla	r1, r2, r0, r1
 80215b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80215ba:	fb07 1100 	mla	r1, r7, r0, r1
 80215be:	7870      	ldrb	r0, [r6, #1]
 80215c0:	fb10 f004 	smulbb	r0, r0, r4
 80215c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80215c8:	fb01 0105 	mla	r1, r1, r5, r0
 80215cc:	b289      	uxth	r1, r1
 80215ce:	1c48      	adds	r0, r1, #1
 80215d0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80215d4:	1209      	asrs	r1, r1, #8
 80215d6:	7071      	strb	r1, [r6, #1]
 80215d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80215da:	434b      	muls	r3, r1
 80215dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80215de:	fb0c 330e 	mla	r3, ip, lr, r3
 80215e2:	fb02 3201 	mla	r2, r2, r1, r3
 80215e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80215e8:	fb07 2703 	mla	r7, r7, r3, r2
 80215ec:	78b2      	ldrb	r2, [r6, #2]
 80215ee:	fb12 f204 	smulbb	r2, r2, r4
 80215f2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80215f6:	fb07 2505 	mla	r5, r7, r5, r2
 80215fa:	b2ad      	uxth	r5, r5
 80215fc:	1c6f      	adds	r7, r5, #1
 80215fe:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8021602:	122d      	asrs	r5, r5, #8
 8021604:	70b5      	strb	r5, [r6, #2]
 8021606:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8021608:	3603      	adds	r6, #3
 802160a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802160e:	4498      	add	r8, r3
 8021610:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021612:	449b      	add	fp, r3
 8021614:	e75f      	b.n	80214d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8021616:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8021618:	4498      	add	r8, r3
 802161a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802161c:	449b      	add	fp, r3
 802161e:	9b07      	ldr	r3, [sp, #28]
 8021620:	3b01      	subs	r3, #1
 8021622:	9307      	str	r3, [sp, #28]
 8021624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021626:	3303      	adds	r3, #3
 8021628:	9309      	str	r3, [sp, #36]	; 0x24
 802162a:	e709      	b.n	8021440 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802162c:	f47f af1b 	bne.w	8021466 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8021630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021632:	2b00      	cmp	r3, #0
 8021634:	f340 80e3 	ble.w	80217fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802163c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802163e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021642:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021646:	eef0 6a48 	vmov.f32	s13, s16
 802164a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802164e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021656:	ee16 8a90 	vmov	r8, s13
 802165a:	eef0 6a68 	vmov.f32	s13, s17
 802165e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021662:	ee16 ba90 	vmov	fp, s13
 8021666:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802166a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802166e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021672:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021676:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802167a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802167e:	ee18 2a10 	vmov	r2, s16
 8021682:	eeb0 8a47 	vmov.f32	s16, s14
 8021686:	fb92 f3f3 	sdiv	r3, r2, r3
 802168a:	ee18 2a90 	vmov	r2, s17
 802168e:	9335      	str	r3, [sp, #212]	; 0xd4
 8021690:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021692:	eef0 8a67 	vmov.f32	s17, s15
 8021696:	fb92 f3f3 	sdiv	r3, r2, r3
 802169a:	9336      	str	r3, [sp, #216]	; 0xd8
 802169c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802169e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80216a0:	3b01      	subs	r3, #1
 80216a2:	930e      	str	r3, [sp, #56]	; 0x38
 80216a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80216a6:	bf08      	it	eq
 80216a8:	4613      	moveq	r3, r2
 80216aa:	9307      	str	r3, [sp, #28]
 80216ac:	e6c1      	b.n	8021432 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80216ae:	1c45      	adds	r5, r0, #1
 80216b0:	d1a9      	bne.n	8021606 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216b2:	9c08      	ldr	r4, [sp, #32]
 80216b4:	42a0      	cmp	r0, r4
 80216b6:	daa6      	bge.n	8021606 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216b8:	1c4c      	adds	r4, r1, #1
 80216ba:	dba4      	blt.n	8021606 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80216be:	428c      	cmp	r4, r1
 80216c0:	dda1      	ble.n	8021606 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80216c4:	9001      	str	r0, [sp, #4]
 80216c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80216c8:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80216cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216ce:	4631      	mov	r1, r6
 80216d0:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80216d4:	9300      	str	r3, [sp, #0]
 80216d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216d8:	9b08      	ldr	r3, [sp, #32]
 80216da:	f7ff fd5b 	bl	8021194 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80216de:	e792      	b.n	8021606 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80216e0:	ea4f 4228 	mov.w	r2, r8, asr #16
 80216e4:	9c08      	ldr	r4, [sp, #32]
 80216e6:	ea4f 402b 	mov.w	r0, fp, asr #16
 80216ea:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80216ee:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80216f2:	fb04 2000 	mla	r0, r4, r0, r2
 80216f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80216fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80216fe:	4402      	add	r2, r0
 8021700:	5c25      	ldrb	r5, [r4, r0]
 8021702:	7894      	ldrb	r4, [r2, #2]
 8021704:	7850      	ldrb	r0, [r2, #1]
 8021706:	9411      	str	r4, [sp, #68]	; 0x44
 8021708:	7954      	ldrb	r4, [r2, #5]
 802170a:	f892 a003 	ldrb.w	sl, [r2, #3]
 802170e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8021712:	9412      	str	r4, [sp, #72]	; 0x48
 8021714:	b171      	cbz	r1, 8021734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021716:	3205      	adds	r2, #5
 8021718:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802171a:	1917      	adds	r7, r2, r4
 802171c:	5d12      	ldrb	r2, [r2, r4]
 802171e:	9219      	str	r2, [sp, #100]	; 0x64
 8021720:	787a      	ldrb	r2, [r7, #1]
 8021722:	921b      	str	r2, [sp, #108]	; 0x6c
 8021724:	78ba      	ldrb	r2, [r7, #2]
 8021726:	921d      	str	r2, [sp, #116]	; 0x74
 8021728:	78fa      	ldrb	r2, [r7, #3]
 802172a:	921a      	str	r2, [sp, #104]	; 0x68
 802172c:	793a      	ldrb	r2, [r7, #4]
 802172e:	921c      	str	r2, [sp, #112]	; 0x70
 8021730:	797a      	ldrb	r2, [r7, #5]
 8021732:	921e      	str	r2, [sp, #120]	; 0x78
 8021734:	b29b      	uxth	r3, r3
 8021736:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8021738:	b289      	uxth	r1, r1
 802173a:	3603      	adds	r6, #3
 802173c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021740:	fb03 f201 	mul.w	r2, r3, r1
 8021744:	011b      	lsls	r3, r3, #4
 8021746:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802174a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802174e:	1a9b      	subs	r3, r3, r2
 8021750:	b289      	uxth	r1, r1
 8021752:	b29b      	uxth	r3, r3
 8021754:	1a7f      	subs	r7, r7, r1
 8021756:	fb03 fa0a 	mul.w	sl, r3, sl
 802175a:	b2bf      	uxth	r7, r7
 802175c:	fb03 f909 	mul.w	r9, r3, r9
 8021760:	fb07 a505 	mla	r5, r7, r5, sl
 8021764:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8021768:	fb07 9000 	mla	r0, r7, r0, r9
 802176c:	fb01 5504 	mla	r5, r1, r4, r5
 8021770:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021772:	fb02 5504 	mla	r5, r2, r4, r5
 8021776:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021778:	fb1a fa04 	smulbb	sl, sl, r4
 802177c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021780:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021782:	fb05 a50e 	mla	r5, r5, lr, sl
 8021786:	fb01 0004 	mla	r0, r1, r4, r0
 802178a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802178c:	b2ad      	uxth	r5, r5
 802178e:	fb02 0004 	mla	r0, r2, r4, r0
 8021792:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021794:	f105 0a01 	add.w	sl, r5, #1
 8021798:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802179c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80217a0:	122d      	asrs	r5, r5, #8
 80217a2:	f806 5c06 	strb.w	r5, [r6, #-6]
 80217a6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 80217aa:	fb15 f504 	smulbb	r5, r5, r4
 80217ae:	fb00 500e 	mla	r0, r0, lr, r5
 80217b2:	b280      	uxth	r0, r0
 80217b4:	1c45      	adds	r5, r0, #1
 80217b6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80217ba:	1200      	asrs	r0, r0, #8
 80217bc:	f806 0c05 	strb.w	r0, [r6, #-5]
 80217c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80217c2:	4343      	muls	r3, r0
 80217c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80217c6:	fb07 3300 	mla	r3, r7, r0, r3
 80217ca:	981d      	ldr	r0, [sp, #116]	; 0x74
 80217cc:	fb01 3100 	mla	r1, r1, r0, r3
 80217d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80217d2:	fb02 1203 	mla	r2, r2, r3, r1
 80217d6:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80217da:	fb11 f104 	smulbb	r1, r1, r4
 80217de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80217e2:	fb02 120e 	mla	r2, r2, lr, r1
 80217e6:	b292      	uxth	r2, r2
 80217e8:	1c53      	adds	r3, r2, #1
 80217ea:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80217ee:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80217f0:	1212      	asrs	r2, r2, #8
 80217f2:	4498      	add	r8, r3
 80217f4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80217f6:	f806 2c04 	strb.w	r2, [r6, #-4]
 80217fa:	449b      	add	fp, r3
 80217fc:	e64d      	b.n	802149a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80217fe:	b021      	add	sp, #132	; 0x84
 8021800:	ecbd 8b08 	vpop	{d8-d11}
 8021804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021808 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802180c:	b085      	sub	sp, #20
 802180e:	784d      	ldrb	r5, [r1, #1]
 8021810:	788e      	ldrb	r6, [r1, #2]
 8021812:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8021816:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 802181a:	9403      	str	r4, [sp, #12]
 802181c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021820:	780c      	ldrb	r4, [r1, #0]
 8021822:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8021826:	fb07 ce03 	mla	lr, r7, r3, ip
 802182a:	2f00      	cmp	r7, #0
 802182c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021830:	eb02 0b0e 	add.w	fp, r2, lr
 8021834:	db56      	blt.n	80218e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021836:	45b9      	cmp	r9, r7
 8021838:	dd54      	ble.n	80218e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802183a:	f1bc 0f00 	cmp.w	ip, #0
 802183e:	db4d      	blt.n	80218dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021840:	4563      	cmp	r3, ip
 8021842:	dd4b      	ble.n	80218dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021844:	f812 200e 	ldrb.w	r2, [r2, lr]
 8021848:	9200      	str	r2, [sp, #0]
 802184a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802184e:	9201      	str	r2, [sp, #4]
 8021850:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021854:	9202      	str	r2, [sp, #8]
 8021856:	f11c 0201 	adds.w	r2, ip, #1
 802185a:	d44a      	bmi.n	80218f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802185c:	4293      	cmp	r3, r2
 802185e:	dd48      	ble.n	80218f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021860:	2800      	cmp	r0, #0
 8021862:	d046      	beq.n	80218f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021864:	f89b e003 	ldrb.w	lr, [fp, #3]
 8021868:	f89b 8004 	ldrb.w	r8, [fp, #4]
 802186c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021870:	3701      	adds	r7, #1
 8021872:	d446      	bmi.n	8021902 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021874:	45b9      	cmp	r9, r7
 8021876:	dd44      	ble.n	8021902 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021878:	9a03      	ldr	r2, [sp, #12]
 802187a:	2a00      	cmp	r2, #0
 802187c:	d045      	beq.n	802190a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802187e:	f1bc 0f00 	cmp.w	ip, #0
 8021882:	db3a      	blt.n	80218fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021884:	4563      	cmp	r3, ip
 8021886:	dd38      	ble.n	80218fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021888:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802188c:	f04f 0903 	mov.w	r9, #3
 8021890:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021894:	fb03 b209 	mla	r2, r3, r9, fp
 8021898:	fb03 b909 	mla	r9, r3, r9, fp
 802189c:	7852      	ldrb	r2, [r2, #1]
 802189e:	f899 9002 	ldrb.w	r9, [r9, #2]
 80218a2:	f11c 0c01 	adds.w	ip, ip, #1
 80218a6:	d40d      	bmi.n	80218c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80218a8:	4563      	cmp	r3, ip
 80218aa:	dd0b      	ble.n	80218c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80218ac:	b160      	cbz	r0, 80218c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80218ae:	2603      	movs	r6, #3
 80218b0:	fb13 6406 	smlabb	r4, r3, r6, r6
 80218b4:	fb03 b506 	mla	r5, r3, r6, fp
 80218b8:	fb03 b306 	mla	r3, r3, r6, fp
 80218bc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80218c0:	792d      	ldrb	r5, [r5, #4]
 80218c2:	795e      	ldrb	r6, [r3, #5]
 80218c4:	280f      	cmp	r0, #15
 80218c6:	d802      	bhi.n	80218ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80218c8:	9b03      	ldr	r3, [sp, #12]
 80218ca:	2b0f      	cmp	r3, #15
 80218cc:	d922      	bls.n	8021914 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80218ce:	4b2f      	ldr	r3, [pc, #188]	; (802198c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80218d0:	f240 11a5 	movw	r1, #421	; 0x1a5
 80218d4:	4a2e      	ldr	r2, [pc, #184]	; (8021990 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80218d6:	482f      	ldr	r0, [pc, #188]	; (8021994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80218d8:	f003 ffa0 	bl	802581c <__assert_func>
 80218dc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80218e0:	9400      	str	r4, [sp, #0]
 80218e2:	e7b8      	b.n	8021856 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80218e4:	46b2      	mov	sl, r6
 80218e6:	46a8      	mov	r8, r5
 80218e8:	46a6      	mov	lr, r4
 80218ea:	9400      	str	r4, [sp, #0]
 80218ec:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80218f0:	e7be      	b.n	8021870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80218f2:	46b2      	mov	sl, r6
 80218f4:	46a8      	mov	r8, r5
 80218f6:	46a6      	mov	lr, r4
 80218f8:	e7ba      	b.n	8021870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80218fa:	46b1      	mov	r9, r6
 80218fc:	462a      	mov	r2, r5
 80218fe:	4627      	mov	r7, r4
 8021900:	e7cf      	b.n	80218a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021902:	46b1      	mov	r9, r6
 8021904:	462a      	mov	r2, r5
 8021906:	4627      	mov	r7, r4
 8021908:	e7dc      	b.n	80218c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802190a:	280f      	cmp	r0, #15
 802190c:	d8df      	bhi.n	80218ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802190e:	46b1      	mov	r9, r6
 8021910:	462a      	mov	r2, r5
 8021912:	4627      	mov	r7, r4
 8021914:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8021918:	b280      	uxth	r0, r0
 802191a:	fb00 f30b 	mul.w	r3, r0, fp
 802191e:	0100      	lsls	r0, r0, #4
 8021920:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021924:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8021928:	1ac0      	subs	r0, r0, r3
 802192a:	fa1f fb8b 	uxth.w	fp, fp
 802192e:	b280      	uxth	r0, r0
 8021930:	ebac 0c0b 	sub.w	ip, ip, fp
 8021934:	9003      	str	r0, [sp, #12]
 8021936:	fa1f fc8c 	uxth.w	ip, ip
 802193a:	fb00 fe0e 	mul.w	lr, r0, lr
 802193e:	9800      	ldr	r0, [sp, #0]
 8021940:	fb0c ee00 	mla	lr, ip, r0, lr
 8021944:	9803      	ldr	r0, [sp, #12]
 8021946:	fb00 f808 	mul.w	r8, r0, r8
 802194a:	9801      	ldr	r0, [sp, #4]
 802194c:	fb0b ee07 	mla	lr, fp, r7, lr
 8021950:	fb0c 8800 	mla	r8, ip, r0, r8
 8021954:	fb03 ee04 	mla	lr, r3, r4, lr
 8021958:	fb0b 8202 	mla	r2, fp, r2, r8
 802195c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021960:	fb03 2505 	mla	r5, r3, r5, r2
 8021964:	9a03      	ldr	r2, [sp, #12]
 8021966:	f881 e000 	strb.w	lr, [r1]
 802196a:	fb02 f00a 	mul.w	r0, r2, sl
 802196e:	9a02      	ldr	r2, [sp, #8]
 8021970:	122d      	asrs	r5, r5, #8
 8021972:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021976:	704d      	strb	r5, [r1, #1]
 8021978:	fb0b c909 	mla	r9, fp, r9, ip
 802197c:	fb03 9606 	mla	r6, r3, r6, r9
 8021980:	1236      	asrs	r6, r6, #8
 8021982:	708e      	strb	r6, [r1, #2]
 8021984:	b005      	add	sp, #20
 8021986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802198a:	bf00      	nop
 802198c:	0802b131 	.word	0x0802b131
 8021990:	0802b626 	.word	0x0802b626
 8021994:	0802b1fa 	.word	0x0802b1fa

08021998 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802199c:	ed2d 8b0a 	vpush	{d8-d12}
 80219a0:	b09d      	sub	sp, #116	; 0x74
 80219a2:	eeb0 aa40 	vmov.f32	s20, s0
 80219a6:	eef0 9a60 	vmov.f32	s19, s1
 80219aa:	9306      	str	r3, [sp, #24]
 80219ac:	eeb0 9a41 	vmov.f32	s18, s2
 80219b0:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80219b4:	eeb0 8a62 	vmov.f32	s16, s5
 80219b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80219ba:	eef0 8a43 	vmov.f32	s17, s6
 80219be:	9307      	str	r3, [sp, #28]
 80219c0:	eeb0 ca44 	vmov.f32	s24, s8
 80219c4:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80219c8:	eef0 ba64 	vmov.f32	s23, s9
 80219cc:	eeb0 ba45 	vmov.f32	s22, s10
 80219d0:	9309      	str	r3, [sp, #36]	; 0x24
 80219d2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80219d6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80219da:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80219dc:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80219e0:	6850      	ldr	r0, [r2, #4]
 80219e2:	6812      	ldr	r2, [r2, #0]
 80219e4:	fb00 1303 	mla	r3, r0, r3, r1
 80219e8:	9907      	ldr	r1, [sp, #28]
 80219ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219ee:	18d3      	adds	r3, r2, r3
 80219f0:	2203      	movs	r2, #3
 80219f2:	9308      	str	r3, [sp, #32]
 80219f4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80219f6:	681b      	ldr	r3, [r3, #0]
 80219f8:	930a      	str	r3, [sp, #40]	; 0x28
 80219fa:	f06f 0304 	mvn.w	r3, #4
 80219fe:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8021a02:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	dc03      	bgt.n	8021a16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	f340 8193 	ble.w	8021d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021a16:	9b06      	ldr	r3, [sp, #24]
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	f340 80d0 	ble.w	8021bbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8021a1e:	1432      	asrs	r2, r6, #16
 8021a20:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021a24:	d42f      	bmi.n	8021a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8021a26:	1c51      	adds	r1, r2, #1
 8021a28:	9807      	ldr	r0, [sp, #28]
 8021a2a:	4281      	cmp	r1, r0
 8021a2c:	da2e      	bge.n	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	db2c      	blt.n	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021a32:	1c59      	adds	r1, r3, #1
 8021a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021a36:	4288      	cmp	r0, r1
 8021a38:	dd28      	ble.n	8021a8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021a3a:	9b06      	ldr	r3, [sp, #24]
 8021a3c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021a3e:	3b01      	subs	r3, #1
 8021a40:	fb02 6203 	mla	r2, r2, r3, r6
 8021a44:	1412      	asrs	r2, r2, #16
 8021a46:	d42c      	bmi.n	8021aa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a48:	3201      	adds	r2, #1
 8021a4a:	9907      	ldr	r1, [sp, #28]
 8021a4c:	4291      	cmp	r1, r2
 8021a4e:	dd28      	ble.n	8021aa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a50:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021a52:	fb02 5303 	mla	r3, r2, r3, r5
 8021a56:	141b      	asrs	r3, r3, #16
 8021a58:	d423      	bmi.n	8021aa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a5a:	3301      	adds	r3, #1
 8021a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a5e:	429a      	cmp	r2, r3
 8021a60:	dd1f      	ble.n	8021aa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021a62:	9b08      	ldr	r3, [sp, #32]
 8021a64:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021a68:	f103 0c03 	add.w	ip, r3, #3
 8021a6c:	f1be 0f00 	cmp.w	lr, #0
 8021a70:	f300 80fa 	bgt.w	8021c68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021a74:	9b06      	ldr	r3, [sp, #24]
 8021a76:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021a7a:	9b08      	ldr	r3, [sp, #32]
 8021a7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a80:	4423      	add	r3, r4
 8021a82:	9308      	str	r3, [sp, #32]
 8021a84:	e09d      	b.n	8021bc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021a86:	1c51      	adds	r1, r2, #1
 8021a88:	f040 808e 	bne.w	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a8c:	9907      	ldr	r1, [sp, #28]
 8021a8e:	428a      	cmp	r2, r1
 8021a90:	f280 808a 	bge.w	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a94:	1c5f      	adds	r7, r3, #1
 8021a96:	f2c0 8087 	blt.w	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a9c:	4293      	cmp	r3, r2
 8021a9e:	f280 8083 	bge.w	8021ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021aa2:	9f06      	ldr	r7, [sp, #24]
 8021aa4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021aa8:	2f00      	cmp	r7, #0
 8021aaa:	dde3      	ble.n	8021a74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021aac:	1432      	asrs	r2, r6, #16
 8021aae:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021ab2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021ab6:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8021aba:	f100 80bf 	bmi.w	8021c3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8021abe:	1c50      	adds	r0, r2, #1
 8021ac0:	9c07      	ldr	r4, [sp, #28]
 8021ac2:	4284      	cmp	r4, r0
 8021ac4:	f340 80bc 	ble.w	8021c40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	f2c0 80b9 	blt.w	8021c40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021ace:	1c58      	adds	r0, r3, #1
 8021ad0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ad2:	4284      	cmp	r4, r0
 8021ad4:	f340 80b4 	ble.w	8021c40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021ad8:	9807      	ldr	r0, [sp, #28]
 8021ada:	fb00 2303 	mla	r3, r0, r3, r2
 8021ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021ae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ae6:	441a      	add	r2, r3
 8021ae8:	f810 c003 	ldrb.w	ip, [r0, r3]
 8021aec:	7953      	ldrb	r3, [r2, #5]
 8021aee:	7850      	ldrb	r0, [r2, #1]
 8021af0:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021af4:	f892 9003 	ldrb.w	r9, [r2, #3]
 8021af8:	f892 8004 	ldrb.w	r8, [r2, #4]
 8021afc:	930e      	str	r3, [sp, #56]	; 0x38
 8021afe:	f1bb 0f00 	cmp.w	fp, #0
 8021b02:	d00f      	beq.n	8021b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8021b04:	3205      	adds	r2, #5
 8021b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b0a:	18d3      	adds	r3, r2, r3
 8021b0c:	5d12      	ldrb	r2, [r2, r4]
 8021b0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8021b10:	785a      	ldrb	r2, [r3, #1]
 8021b12:	9211      	str	r2, [sp, #68]	; 0x44
 8021b14:	789a      	ldrb	r2, [r3, #2]
 8021b16:	9213      	str	r2, [sp, #76]	; 0x4c
 8021b18:	78da      	ldrb	r2, [r3, #3]
 8021b1a:	9210      	str	r2, [sp, #64]	; 0x40
 8021b1c:	791a      	ldrb	r2, [r3, #4]
 8021b1e:	795b      	ldrb	r3, [r3, #5]
 8021b20:	9212      	str	r2, [sp, #72]	; 0x48
 8021b22:	9314      	str	r3, [sp, #80]	; 0x50
 8021b24:	b28b      	uxth	r3, r1
 8021b26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021b28:	fa1f f28b 	uxth.w	r2, fp
 8021b2c:	fb03 fb02 	mul.w	fp, r3, r2
 8021b30:	011b      	lsls	r3, r3, #4
 8021b32:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021b36:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8021b3a:	eba3 030b 	sub.w	r3, r3, fp
 8021b3e:	b292      	uxth	r2, r2
 8021b40:	b29b      	uxth	r3, r3
 8021b42:	1a89      	subs	r1, r1, r2
 8021b44:	fb03 f808 	mul.w	r8, r3, r8
 8021b48:	b289      	uxth	r1, r1
 8021b4a:	fb03 f909 	mul.w	r9, r3, r9
 8021b4e:	fb01 8800 	mla	r8, r1, r0, r8
 8021b52:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021b54:	fb01 990c 	mla	r9, r1, ip, r9
 8021b58:	fb02 8800 	mla	r8, r2, r0, r8
 8021b5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021b5e:	fb02 9904 	mla	r9, r2, r4, r9
 8021b62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b64:	fb0b 8800 	mla	r8, fp, r0, r8
 8021b68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021b6a:	fb0b 9904 	mla	r9, fp, r4, r9
 8021b6e:	4343      	muls	r3, r0
 8021b70:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021b74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b78:	fb01 330e 	mla	r3, r1, lr, r3
 8021b7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021b7e:	f88a 9000 	strb.w	r9, [sl]
 8021b82:	fb02 3201 	mla	r2, r2, r1, r3
 8021b86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b88:	f88a 8001 	strb.w	r8, [sl, #1]
 8021b8c:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021b90:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021b94:	f88a b002 	strb.w	fp, [sl, #2]
 8021b98:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021b9a:	f10a 0a03 	add.w	sl, sl, #3
 8021b9e:	3f01      	subs	r7, #1
 8021ba0:	441e      	add	r6, r3
 8021ba2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021ba4:	441d      	add	r5, r3
 8021ba6:	e77f      	b.n	8021aa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021ba8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021baa:	441e      	add	r6, r3
 8021bac:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021bae:	441d      	add	r5, r3
 8021bb0:	9b06      	ldr	r3, [sp, #24]
 8021bb2:	3b01      	subs	r3, #1
 8021bb4:	9306      	str	r3, [sp, #24]
 8021bb6:	9b08      	ldr	r3, [sp, #32]
 8021bb8:	3303      	adds	r3, #3
 8021bba:	9308      	str	r3, [sp, #32]
 8021bbc:	e72b      	b.n	8021a16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021bbe:	f47f af3c 	bne.w	8021a3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	f340 80b9 	ble.w	8021d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8021bca:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021bce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021bd0:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021bd4:	eef0 6a48 	vmov.f32	s13, s16
 8021bd8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021bdc:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021be0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021be4:	ee16 6a90 	vmov	r6, s13
 8021be8:	eef0 6a68 	vmov.f32	s13, s17
 8021bec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bf0:	ee16 5a90 	vmov	r5, s13
 8021bf4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021bf8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021bfc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021c00:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021c04:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021c08:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021c0c:	ee18 2a10 	vmov	r2, s16
 8021c10:	eeb0 8a47 	vmov.f32	s16, s14
 8021c14:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c18:	ee18 2a90 	vmov	r2, s17
 8021c1c:	9333      	str	r3, [sp, #204]	; 0xcc
 8021c1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021c20:	eef0 8a67 	vmov.f32	s17, s15
 8021c24:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c28:	9334      	str	r3, [sp, #208]	; 0xd0
 8021c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021c2e:	3b01      	subs	r3, #1
 8021c30:	930c      	str	r3, [sp, #48]	; 0x30
 8021c32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021c34:	bf08      	it	eq
 8021c36:	4613      	moveq	r3, r2
 8021c38:	9306      	str	r3, [sp, #24]
 8021c3a:	e6e5      	b.n	8021a08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021c3c:	1c54      	adds	r4, r2, #1
 8021c3e:	d1ab      	bne.n	8021b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c40:	9807      	ldr	r0, [sp, #28]
 8021c42:	4282      	cmp	r2, r0
 8021c44:	daa8      	bge.n	8021b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c46:	1c58      	adds	r0, r3, #1
 8021c48:	dba6      	blt.n	8021b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c4c:	4298      	cmp	r0, r3
 8021c4e:	dda3      	ble.n	8021b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c50:	9000      	str	r0, [sp, #0]
 8021c52:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021c54:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021c58:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021c5c:	9b07      	ldr	r3, [sp, #28]
 8021c5e:	4651      	mov	r1, sl
 8021c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c62:	f7ff fdd1 	bl	8021808 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021c66:	e797      	b.n	8021b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021c68:	1431      	asrs	r1, r6, #16
 8021c6a:	9c07      	ldr	r4, [sp, #28]
 8021c6c:	1428      	asrs	r0, r5, #16
 8021c6e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021c72:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021c76:	fb04 1000 	mla	r0, r4, r0, r1
 8021c7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021c7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021c7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c82:	4401      	add	r1, r0
 8021c84:	5c20      	ldrb	r0, [r4, r0]
 8021c86:	f891 8002 	ldrb.w	r8, [r1, #2]
 8021c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8021c8c:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021c90:	7848      	ldrb	r0, [r1, #1]
 8021c92:	f891 9004 	ldrb.w	r9, [r1, #4]
 8021c96:	f891 b005 	ldrb.w	fp, [r1, #5]
 8021c9a:	b172      	cbz	r2, 8021cba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021c9c:	3105      	adds	r1, #5
 8021c9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ca0:	190f      	adds	r7, r1, r4
 8021ca2:	5d09      	ldrb	r1, [r1, r4]
 8021ca4:	9115      	str	r1, [sp, #84]	; 0x54
 8021ca6:	7879      	ldrb	r1, [r7, #1]
 8021ca8:	9117      	str	r1, [sp, #92]	; 0x5c
 8021caa:	78b9      	ldrb	r1, [r7, #2]
 8021cac:	9119      	str	r1, [sp, #100]	; 0x64
 8021cae:	78f9      	ldrb	r1, [r7, #3]
 8021cb0:	9116      	str	r1, [sp, #88]	; 0x58
 8021cb2:	7939      	ldrb	r1, [r7, #4]
 8021cb4:	9118      	str	r1, [sp, #96]	; 0x60
 8021cb6:	7979      	ldrb	r1, [r7, #5]
 8021cb8:	911a      	str	r1, [sp, #104]	; 0x68
 8021cba:	b29b      	uxth	r3, r3
 8021cbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021cbe:	b292      	uxth	r2, r2
 8021cc0:	f10c 0c03 	add.w	ip, ip, #3
 8021cc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021cc8:	fb03 f102 	mul.w	r1, r3, r2
 8021ccc:	011b      	lsls	r3, r3, #4
 8021cce:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021cd2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021cd6:	1a5b      	subs	r3, r3, r1
 8021cd8:	b292      	uxth	r2, r2
 8021cda:	b29b      	uxth	r3, r3
 8021cdc:	1abf      	subs	r7, r7, r2
 8021cde:	fb03 f909 	mul.w	r9, r3, r9
 8021ce2:	b2bf      	uxth	r7, r7
 8021ce4:	fb03 fa0a 	mul.w	sl, r3, sl
 8021ce8:	fb03 f30b 	mul.w	r3, r3, fp
 8021cec:	fb07 9900 	mla	r9, r7, r0, r9
 8021cf0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021cf2:	fb07 aa04 	mla	sl, r7, r4, sl
 8021cf6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021cf8:	fb02 9900 	mla	r9, r2, r0, r9
 8021cfc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021cfe:	fb07 3308 	mla	r3, r7, r8, r3
 8021d02:	fb01 9900 	mla	r9, r1, r0, r9
 8021d06:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021d08:	fb02 aa04 	mla	sl, r2, r4, sl
 8021d0c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021d0e:	fb02 3200 	mla	r2, r2, r0, r3
 8021d12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021d14:	fb01 aa04 	mla	sl, r1, r4, sl
 8021d18:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021d1c:	fb01 2103 	mla	r1, r1, r3, r2
 8021d20:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021d22:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021d26:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021d2a:	1209      	asrs	r1, r1, #8
 8021d2c:	441e      	add	r6, r3
 8021d2e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d30:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021d34:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021d38:	441d      	add	r5, r3
 8021d3a:	e697      	b.n	8021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021d3c:	b01d      	add	sp, #116	; 0x74
 8021d3e:	ecbd 8b0a 	vpop	{d8-d12}
 8021d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021d48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d4c:	b085      	sub	sp, #20
 8021d4e:	7888      	ldrb	r0, [r1, #2]
 8021d50:	4691      	mov	r9, r2
 8021d52:	9000      	str	r0, [sp, #0]
 8021d54:	7848      	ldrb	r0, [r1, #1]
 8021d56:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021d5a:	9001      	str	r0, [sp, #4]
 8021d5c:	7808      	ldrb	r0, [r1, #0]
 8021d5e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021d62:	9002      	str	r0, [sp, #8]
 8021d64:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021d68:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021d6c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021d70:	fb04 c603 	mla	r6, r4, r3, ip
 8021d74:	2c00      	cmp	r4, #0
 8021d76:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021d7a:	9a00      	ldr	r2, [sp, #0]
 8021d7c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021d80:	9a01      	ldr	r2, [sp, #4]
 8021d82:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021d86:	db3a      	blt.n	8021dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021d88:	45a0      	cmp	r8, r4
 8021d8a:	dd38      	ble.n	8021dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021d8c:	f1bc 0f00 	cmp.w	ip, #0
 8021d90:	db33      	blt.n	8021dfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021d92:	4563      	cmp	r3, ip
 8021d94:	dd31      	ble.n	8021dfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021d96:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021d9a:	f11c 0601 	adds.w	r6, ip, #1
 8021d9e:	d431      	bmi.n	8021e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021da0:	42b3      	cmp	r3, r6
 8021da2:	dd2f      	ble.n	8021e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021da4:	b375      	cbz	r5, 8021e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021da6:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021daa:	3401      	adds	r4, #1
 8021dac:	d42e      	bmi.n	8021e0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021dae:	45a0      	cmp	r8, r4
 8021db0:	dd2c      	ble.n	8021e0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021db2:	b35f      	cbz	r7, 8021e0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021db4:	f1bc 0f00 	cmp.w	ip, #0
 8021db8:	db26      	blt.n	8021e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021dba:	4563      	cmp	r3, ip
 8021dbc:	dd24      	ble.n	8021e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021dbe:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021dc2:	f11c 0c01 	adds.w	ip, ip, #1
 8021dc6:	d405      	bmi.n	8021dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021dc8:	4563      	cmp	r3, ip
 8021dca:	dd03      	ble.n	8021dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021dcc:	b115      	cbz	r5, 8021dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021dce:	3301      	adds	r3, #1
 8021dd0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021dd4:	2d0f      	cmp	r5, #15
 8021dd6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021dda:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021dde:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021de2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021de6:	d801      	bhi.n	8021dec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021de8:	2f0f      	cmp	r7, #15
 8021dea:	d911      	bls.n	8021e10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8021dec:	4b80      	ldr	r3, [pc, #512]	; (8021ff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8021dee:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021df2:	4a80      	ldr	r2, [pc, #512]	; (8021ff4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021df4:	4880      	ldr	r0, [pc, #512]	; (8021ff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021df6:	f003 fd11 	bl	802581c <__assert_func>
 8021dfa:	4602      	mov	r2, r0
 8021dfc:	e7cd      	b.n	8021d9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8021dfe:	4606      	mov	r6, r0
 8021e00:	4602      	mov	r2, r0
 8021e02:	e7d2      	b.n	8021daa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021e04:	4606      	mov	r6, r0
 8021e06:	e7d0      	b.n	8021daa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021e08:	4604      	mov	r4, r0
 8021e0a:	e7da      	b.n	8021dc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8021e0c:	4604      	mov	r4, r0
 8021e0e:	e7e1      	b.n	8021dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021e10:	b2ab      	uxth	r3, r5
 8021e12:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021e16:	b2bf      	uxth	r7, r7
 8021e18:	fb03 fe07 	mul.w	lr, r3, r7
 8021e1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021e20:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021e24:	eba3 0c0e 	sub.w	ip, r3, lr
 8021e28:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021e2c:	b2bf      	uxth	r7, r7
 8021e2e:	fa1f fc8c 	uxth.w	ip, ip
 8021e32:	eba5 0507 	sub.w	r5, r5, r7
 8021e36:	fb0c f30a 	mul.w	r3, ip, sl
 8021e3a:	b2ad      	uxth	r5, r5
 8021e3c:	fb05 330b 	mla	r3, r5, fp, r3
 8021e40:	fb07 3309 	mla	r3, r7, r9, r3
 8021e44:	fb0e 3308 	mla	r3, lr, r8, r3
 8021e48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e4c:	9303      	str	r3, [sp, #12]
 8021e4e:	d018      	beq.n	8021e82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021e50:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021e54:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e58:	fb0b f303 	mul.w	r3, fp, r3
 8021e5c:	fb0b fb02 	mul.w	fp, fp, r2
 8021e60:	0a1a      	lsrs	r2, r3, #8
 8021e62:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021e66:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e6a:	441a      	add	r2, r3
 8021e6c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021e70:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021e74:	0a12      	lsrs	r2, r2, #8
 8021e76:	0a1b      	lsrs	r3, r3, #8
 8021e78:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e80:	431a      	orrs	r2, r3
 8021e82:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021e86:	d019      	beq.n	8021ebc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021e88:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021e8c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021e90:	fb0a fb0b 	mul.w	fp, sl, fp
 8021e94:	fb0a fa06 	mul.w	sl, sl, r6
 8021e98:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021e9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021ea0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021ea4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021ea8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021eac:	445e      	add	r6, fp
 8021eae:	0a1b      	lsrs	r3, r3, #8
 8021eb0:	0a36      	lsrs	r6, r6, #8
 8021eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021eb6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021eba:	431e      	orrs	r6, r3
 8021ebc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ec0:	d019      	beq.n	8021ef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021ec2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021ec6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021eca:	fb09 fa0a 	mul.w	sl, r9, sl
 8021ece:	fb09 f904 	mul.w	r9, r9, r4
 8021ed2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021ed6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021eda:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021ede:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ee2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021ee6:	4454      	add	r4, sl
 8021ee8:	0a1b      	lsrs	r3, r3, #8
 8021eea:	0a24      	lsrs	r4, r4, #8
 8021eec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ef0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ef4:	431c      	orrs	r4, r3
 8021ef6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021efa:	d019      	beq.n	8021f30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8021efc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021f00:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f04:	fb08 f909 	mul.w	r9, r8, r9
 8021f08:	fb08 f800 	mul.w	r8, r8, r0
 8021f0c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021f10:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021f14:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021f18:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f1c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021f20:	4448      	add	r0, r9
 8021f22:	0a1b      	lsrs	r3, r3, #8
 8021f24:	0a00      	lsrs	r0, r0, #8
 8021f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f2e:	4318      	orrs	r0, r3
 8021f30:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021f34:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021f38:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021f3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021f40:	fb0c f808 	mul.w	r8, ip, r8
 8021f44:	fb0c f606 	mul.w	r6, ip, r6
 8021f48:	fb05 8803 	mla	r8, r5, r3, r8
 8021f4c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021f50:	fb05 6202 	mla	r2, r5, r2, r6
 8021f54:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021f58:	fb07 8803 	mla	r8, r7, r3, r8
 8021f5c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021f60:	fb07 2704 	mla	r7, r7, r4, r2
 8021f64:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f68:	fb0e 8303 	mla	r3, lr, r3, r8
 8021f6c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021f70:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021f74:	9803      	ldr	r0, [sp, #12]
 8021f76:	b292      	uxth	r2, r2
 8021f78:	9c02      	ldr	r4, [sp, #8]
 8021f7a:	0a1b      	lsrs	r3, r3, #8
 8021f7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f80:	4350      	muls	r0, r2
 8021f82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f86:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021f8a:	ea43 0e0e 	orr.w	lr, r3, lr
 8021f8e:	1c43      	adds	r3, r0, #1
 8021f90:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021f94:	fa5f f08e 	uxtb.w	r0, lr
 8021f98:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021f9c:	b2db      	uxtb	r3, r3
 8021f9e:	fb14 f403 	smulbb	r4, r4, r3
 8021fa2:	fb00 4002 	mla	r0, r0, r2, r4
 8021fa6:	b280      	uxth	r0, r0
 8021fa8:	1c44      	adds	r4, r0, #1
 8021faa:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021fae:	9c01      	ldr	r4, [sp, #4]
 8021fb0:	fb14 f403 	smulbb	r4, r4, r3
 8021fb4:	1200      	asrs	r0, r0, #8
 8021fb6:	7008      	strb	r0, [r1, #0]
 8021fb8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021fbc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021fc0:	fb00 4002 	mla	r0, r0, r2, r4
 8021fc4:	b280      	uxth	r0, r0
 8021fc6:	1c44      	adds	r4, r0, #1
 8021fc8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021fcc:	1200      	asrs	r0, r0, #8
 8021fce:	7048      	strb	r0, [r1, #1]
 8021fd0:	9800      	ldr	r0, [sp, #0]
 8021fd2:	fb10 f303 	smulbb	r3, r0, r3
 8021fd6:	fb0e 3202 	mla	r2, lr, r2, r3
 8021fda:	b292      	uxth	r2, r2
 8021fdc:	f102 0e01 	add.w	lr, r2, #1
 8021fe0:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021fe4:	1212      	asrs	r2, r2, #8
 8021fe6:	708a      	strb	r2, [r1, #2]
 8021fe8:	b005      	add	sp, #20
 8021fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fee:	bf00      	nop
 8021ff0:	0802b131 	.word	0x0802b131
 8021ff4:	0802b626 	.word	0x0802b626
 8021ff8:	0802b1fa 	.word	0x0802b1fa

08021ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022000:	ed2d 8b08 	vpush	{d8-d11}
 8022004:	b099      	sub	sp, #100	; 0x64
 8022006:	eeb0 aa40 	vmov.f32	s20, s0
 802200a:	eef0 9a60 	vmov.f32	s19, s1
 802200e:	9306      	str	r3, [sp, #24]
 8022010:	eeb0 9a41 	vmov.f32	s18, s2
 8022014:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8022018:	eeb0 8a62 	vmov.f32	s16, s5
 802201c:	9216      	str	r2, [sp, #88]	; 0x58
 802201e:	eef0 8a43 	vmov.f32	s17, s6
 8022022:	9307      	str	r3, [sp, #28]
 8022024:	eef0 ba44 	vmov.f32	s23, s8
 8022028:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802202c:	eeb0 ba64 	vmov.f32	s22, s9
 8022030:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022032:	eef0 aa45 	vmov.f32	s21, s10
 8022036:	9310      	str	r3, [sp, #64]	; 0x40
 8022038:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802203c:	9017      	str	r0, [sp, #92]	; 0x5c
 802203e:	9112      	str	r1, [sp, #72]	; 0x48
 8022040:	6850      	ldr	r0, [r2, #4]
 8022042:	9315      	str	r3, [sp, #84]	; 0x54
 8022044:	6812      	ldr	r2, [r2, #0]
 8022046:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8022048:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802204c:	fb00 1303 	mla	r3, r0, r3, r1
 8022050:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022054:	18d3      	adds	r3, r2, r3
 8022056:	930a      	str	r3, [sp, #40]	; 0x28
 8022058:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802205a:	681b      	ldr	r3, [r3, #0]
 802205c:	9311      	str	r3, [sp, #68]	; 0x44
 802205e:	9b07      	ldr	r3, [sp, #28]
 8022060:	009b      	lsls	r3, r3, #2
 8022062:	930e      	str	r3, [sp, #56]	; 0x38
 8022064:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022066:	2b00      	cmp	r3, #0
 8022068:	dc03      	bgt.n	8022072 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802206a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802206c:	2b00      	cmp	r3, #0
 802206e:	f340 833b 	ble.w	80226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022072:	9b06      	ldr	r3, [sp, #24]
 8022074:	2b00      	cmp	r3, #0
 8022076:	f340 8197 	ble.w	80223a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802207a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802207c:	1423      	asrs	r3, r4, #16
 802207e:	1412      	asrs	r2, r2, #16
 8022080:	d432      	bmi.n	80220e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8022082:	1c51      	adds	r1, r2, #1
 8022084:	9807      	ldr	r0, [sp, #28]
 8022086:	4288      	cmp	r0, r1
 8022088:	dd31      	ble.n	80220ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802208a:	2b00      	cmp	r3, #0
 802208c:	db2f      	blt.n	80220ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802208e:	1c59      	adds	r1, r3, #1
 8022090:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022092:	4288      	cmp	r0, r1
 8022094:	dd2b      	ble.n	80220ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8022096:	9b06      	ldr	r3, [sp, #24]
 8022098:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802209a:	3b01      	subs	r3, #1
 802209c:	992b      	ldr	r1, [sp, #172]	; 0xac
 802209e:	fb02 1203 	mla	r2, r2, r3, r1
 80220a2:	1412      	asrs	r2, r2, #16
 80220a4:	d42e      	bmi.n	8022104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80220a6:	3201      	adds	r2, #1
 80220a8:	9907      	ldr	r1, [sp, #28]
 80220aa:	4291      	cmp	r1, r2
 80220ac:	dd2a      	ble.n	8022104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80220ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80220b0:	fb02 4303 	mla	r3, r2, r3, r4
 80220b4:	141b      	asrs	r3, r3, #16
 80220b6:	d425      	bmi.n	8022104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80220b8:	3301      	adds	r3, #1
 80220ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80220bc:	429a      	cmp	r2, r3
 80220be:	dd21      	ble.n	8022104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80220c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220c2:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80220c6:	f103 0e03 	add.w	lr, r3, #3
 80220ca:	9b06      	ldr	r3, [sp, #24]
 80220cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80220ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	f300 81d2 	bgt.w	802247a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80220d6:	9b06      	ldr	r3, [sp, #24]
 80220d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80220dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80220e2:	4423      	add	r3, r4
 80220e4:	930a      	str	r3, [sp, #40]	; 0x28
 80220e6:	e161      	b.n	80223ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80220e8:	1c51      	adds	r1, r2, #1
 80220ea:	f040 8150 	bne.w	802238e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220ee:	9907      	ldr	r1, [sp, #28]
 80220f0:	428a      	cmp	r2, r1
 80220f2:	f280 814c 	bge.w	802238e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220f6:	1c5a      	adds	r2, r3, #1
 80220f8:	f2c0 8149 	blt.w	802238e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80220fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80220fe:	4293      	cmp	r3, r2
 8022100:	f280 8145 	bge.w	802238e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8022104:	9b06      	ldr	r3, [sp, #24]
 8022106:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022108:	9314      	str	r3, [sp, #80]	; 0x50
 802210a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802210e:	9313      	str	r3, [sp, #76]	; 0x4c
 8022110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022112:	2b00      	cmp	r3, #0
 8022114:	dddf      	ble.n	80220d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8022116:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022118:	1423      	asrs	r3, r4, #16
 802211a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802211e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022122:	1412      	asrs	r2, r2, #16
 8022124:	f100 8190 	bmi.w	8022448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8022128:	1c55      	adds	r5, r2, #1
 802212a:	9f07      	ldr	r7, [sp, #28]
 802212c:	42af      	cmp	r7, r5
 802212e:	f340 818d 	ble.w	802244c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022132:	2b00      	cmp	r3, #0
 8022134:	f2c0 818a 	blt.w	802244c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022138:	1c5d      	adds	r5, r3, #1
 802213a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802213c:	42af      	cmp	r7, r5
 802213e:	f340 8185 	ble.w	802244c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8022142:	9d07      	ldr	r5, [sp, #28]
 8022144:	fb03 2305 	mla	r3, r3, r5, r2
 8022148:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802214a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022152:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022156:	2800      	cmp	r0, #0
 8022158:	f000 8167 	beq.w	802242a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802215c:	686a      	ldr	r2, [r5, #4]
 802215e:	920b      	str	r2, [sp, #44]	; 0x2c
 8022160:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022164:	2900      	cmp	r1, #0
 8022166:	f000 8169 	beq.w	802243c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802216a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802216c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802216e:	18aa      	adds	r2, r5, r2
 8022170:	59ed      	ldr	r5, [r5, r7]
 8022172:	6852      	ldr	r2, [r2, #4]
 8022174:	9508      	str	r5, [sp, #32]
 8022176:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802217a:	0e15      	lsrs	r5, r2, #24
 802217c:	920c      	str	r2, [sp, #48]	; 0x30
 802217e:	b280      	uxth	r0, r0
 8022180:	b289      	uxth	r1, r1
 8022182:	fb00 fb01 	mul.w	fp, r0, r1
 8022186:	0100      	lsls	r0, r0, #4
 8022188:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802218c:	eba0 090b 	sub.w	r9, r0, fp
 8022190:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022194:	b289      	uxth	r1, r1
 8022196:	fa1f f989 	uxth.w	r9, r9
 802219a:	1a52      	subs	r2, r2, r1
 802219c:	fb09 f008 	mul.w	r0, r9, r8
 80221a0:	b292      	uxth	r2, r2
 80221a2:	fb02 000c 	mla	r0, r2, ip, r0
 80221a6:	fb01 000a 	mla	r0, r1, sl, r0
 80221aa:	fb0b 0005 	mla	r0, fp, r5, r0
 80221ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80221b2:	2800      	cmp	r0, #0
 80221b4:	f000 80e0 	beq.w	8022378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80221b8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80221bc:	d01b      	beq.n	80221f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80221be:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80221c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221c6:	fb0c fe0e 	mul.w	lr, ip, lr
 80221ca:	fb0c fc03 	mul.w	ip, ip, r3
 80221ce:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80221d2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80221d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221da:	4473      	add	r3, lr
 80221dc:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80221e0:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80221e4:	0a1b      	lsrs	r3, r3, #8
 80221e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221ee:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80221f2:	ea43 030e 	orr.w	r3, r3, lr
 80221f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80221fa:	d01e      	beq.n	802223a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80221fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80221fe:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022202:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8022206:	fb08 fc0c 	mul.w	ip, r8, ip
 802220a:	fb08 f80e 	mul.w	r8, r8, lr
 802220e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022212:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022216:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802221a:	44e6      	add	lr, ip
 802221c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022220:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022224:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022228:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802222c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022230:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022234:	ea4e 0708 	orr.w	r7, lr, r8
 8022238:	970b      	str	r7, [sp, #44]	; 0x2c
 802223a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802223e:	d01e      	beq.n	802227e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022240:	9f08      	ldr	r7, [sp, #32]
 8022242:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022246:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802224a:	fb0a f808 	mul.w	r8, sl, r8
 802224e:	fb0a fa0c 	mul.w	sl, sl, ip
 8022252:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022256:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802225a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802225e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022262:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022266:	44c6      	add	lr, r8
 8022268:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802226c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022270:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022274:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022278:	ea4e 070a 	orr.w	r7, lr, sl
 802227c:	9708      	str	r7, [sp, #32]
 802227e:	2dff      	cmp	r5, #255	; 0xff
 8022280:	d01d      	beq.n	80222be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8022282:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022284:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022288:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802228c:	fb05 f808 	mul.w	r8, r5, r8
 8022290:	fb05 f50c 	mul.w	r5, r5, ip
 8022294:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022298:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802229c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80222a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222a4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80222a8:	44c6      	add	lr, r8
 80222aa:	0a2d      	lsrs	r5, r5, #8
 80222ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222b0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80222b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222b8:	ea4e 0505 	orr.w	r5, lr, r5
 80222bc:	950c      	str	r5, [sp, #48]	; 0x30
 80222be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80222c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80222c4:	9f08      	ldr	r7, [sp, #32]
 80222c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222ca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80222ce:	fb09 f505 	mul.w	r5, r9, r5
 80222d2:	fb02 550c 	mla	r5, r2, ip, r5
 80222d6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80222da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80222dc:	fb01 550c 	mla	r5, r1, ip, r5
 80222e0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80222e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80222e6:	fb0b 550c 	mla	r5, fp, ip, r5
 80222ea:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80222ee:	fb09 f90c 	mul.w	r9, r9, ip
 80222f2:	0a2d      	lsrs	r5, r5, #8
 80222f4:	fb02 9303 	mla	r3, r2, r3, r9
 80222f8:	9a08      	ldr	r2, [sp, #32]
 80222fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80222fe:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022304:	fb01 330e 	mla	r3, r1, lr, r3
 8022308:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802230c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8022310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022312:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022314:	4343      	muls	r3, r0
 8022316:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802231a:	1c58      	adds	r0, r3, #1
 802231c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022320:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022324:	ea45 050b 	orr.w	r5, r5, fp
 8022328:	7833      	ldrb	r3, [r6, #0]
 802232a:	b2ea      	uxtb	r2, r5
 802232c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022330:	fb12 f201 	smulbb	r2, r2, r1
 8022334:	b2c0      	uxtb	r0, r0
 8022336:	fb03 2300 	mla	r3, r3, r0, r2
 802233a:	b29b      	uxth	r3, r3
 802233c:	1c5a      	adds	r2, r3, #1
 802233e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022342:	7872      	ldrb	r2, [r6, #1]
 8022344:	fb12 f200 	smulbb	r2, r2, r0
 8022348:	121b      	asrs	r3, r3, #8
 802234a:	7033      	strb	r3, [r6, #0]
 802234c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022350:	0c2d      	lsrs	r5, r5, #16
 8022352:	fb03 2301 	mla	r3, r3, r1, r2
 8022356:	b29b      	uxth	r3, r3
 8022358:	1c5a      	adds	r2, r3, #1
 802235a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802235e:	121b      	asrs	r3, r3, #8
 8022360:	7073      	strb	r3, [r6, #1]
 8022362:	78b3      	ldrb	r3, [r6, #2]
 8022364:	fb13 f000 	smulbb	r0, r3, r0
 8022368:	fb05 0501 	mla	r5, r5, r1, r0
 802236c:	b2ad      	uxth	r5, r5
 802236e:	1c6b      	adds	r3, r5, #1
 8022370:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022374:	122d      	asrs	r5, r5, #8
 8022376:	70b5      	strb	r5, [r6, #2]
 8022378:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802237a:	3603      	adds	r6, #3
 802237c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802237e:	4413      	add	r3, r2
 8022380:	932b      	str	r3, [sp, #172]	; 0xac
 8022382:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022384:	441c      	add	r4, r3
 8022386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022388:	3b01      	subs	r3, #1
 802238a:	9314      	str	r3, [sp, #80]	; 0x50
 802238c:	e6c0      	b.n	8022110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802238e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022390:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022392:	4413      	add	r3, r2
 8022394:	932b      	str	r3, [sp, #172]	; 0xac
 8022396:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022398:	441c      	add	r4, r3
 802239a:	9b06      	ldr	r3, [sp, #24]
 802239c:	3b01      	subs	r3, #1
 802239e:	9306      	str	r3, [sp, #24]
 80223a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223a2:	3303      	adds	r3, #3
 80223a4:	930a      	str	r3, [sp, #40]	; 0x28
 80223a6:	e664      	b.n	8022072 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80223a8:	f47f ae75 	bne.w	8022096 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80223ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	f340 819a 	ble.w	80226e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80223b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80223b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223ba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80223be:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80223c2:	eef0 6a48 	vmov.f32	s13, s16
 80223c6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80223ca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80223ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223d2:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80223d6:	eef0 6a68 	vmov.f32	s13, s17
 80223da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223de:	ee16 4a90 	vmov	r4, s13
 80223e2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80223e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80223ea:	ee37 8a48 	vsub.f32	s16, s14, s16
 80223ee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80223f2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80223f6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80223fa:	ee18 2a10 	vmov	r2, s16
 80223fe:	eeb0 8a47 	vmov.f32	s16, s14
 8022402:	fb92 f3f3 	sdiv	r3, r2, r3
 8022406:	ee18 2a90 	vmov	r2, s17
 802240a:	932d      	str	r3, [sp, #180]	; 0xb4
 802240c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802240e:	eef0 8a67 	vmov.f32	s17, s15
 8022412:	fb92 f3f3 	sdiv	r3, r2, r3
 8022416:	932e      	str	r3, [sp, #184]	; 0xb8
 8022418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802241a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802241c:	3b01      	subs	r3, #1
 802241e:	9312      	str	r3, [sp, #72]	; 0x48
 8022420:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022422:	bf08      	it	eq
 8022424:	4613      	moveq	r3, r2
 8022426:	9306      	str	r3, [sp, #24]
 8022428:	e61c      	b.n	8022064 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802242a:	b151      	cbz	r1, 8022442 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802242c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802242e:	58aa      	ldr	r2, [r5, r2]
 8022430:	25ff      	movs	r5, #255	; 0xff
 8022432:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8022436:	9208      	str	r2, [sp, #32]
 8022438:	46a8      	mov	r8, r5
 802243a:	e6a0      	b.n	802217e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802243c:	25ff      	movs	r5, #255	; 0xff
 802243e:	46aa      	mov	sl, r5
 8022440:	e69d      	b.n	802217e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022442:	25ff      	movs	r5, #255	; 0xff
 8022444:	46aa      	mov	sl, r5
 8022446:	e7f7      	b.n	8022438 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8022448:	1c57      	adds	r7, r2, #1
 802244a:	d195      	bne.n	8022378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802244c:	9d07      	ldr	r5, [sp, #28]
 802244e:	4295      	cmp	r5, r2
 8022450:	dd92      	ble.n	8022378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022452:	1c5d      	adds	r5, r3, #1
 8022454:	db90      	blt.n	8022378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022456:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022458:	429d      	cmp	r5, r3
 802245a:	dd8d      	ble.n	8022378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802245c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802245e:	9201      	str	r2, [sp, #4]
 8022460:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022462:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8022466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022468:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802246a:	9300      	str	r3, [sp, #0]
 802246c:	9b07      	ldr	r3, [sp, #28]
 802246e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8022472:	4631      	mov	r1, r6
 8022474:	f7ff fc68 	bl	8021d48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022478:	e77e      	b.n	8022378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802247a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802247c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022480:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022482:	9d07      	ldr	r5, [sp, #28]
 8022484:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022488:	1412      	asrs	r2, r2, #16
 802248a:	1423      	asrs	r3, r4, #16
 802248c:	fb05 2303 	mla	r3, r5, r3, r2
 8022490:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022492:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8022496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802249a:	0e1e      	lsrs	r6, r3, #24
 802249c:	2900      	cmp	r1, #0
 802249e:	f000 8114 	beq.w	80226ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 80224a2:	686a      	ldr	r2, [r5, #4]
 80224a4:	920d      	str	r2, [sp, #52]	; 0x34
 80224a6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80224aa:	2800      	cmp	r0, #0
 80224ac:	f000 8116 	beq.w	80226dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80224b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80224b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80224b4:	18aa      	adds	r2, r5, r2
 80224b6:	59ed      	ldr	r5, [r5, r7]
 80224b8:	6852      	ldr	r2, [r2, #4]
 80224ba:	9509      	str	r5, [sp, #36]	; 0x24
 80224bc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80224c0:	0e15      	lsrs	r5, r2, #24
 80224c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80224c4:	b289      	uxth	r1, r1
 80224c6:	b280      	uxth	r0, r0
 80224c8:	fb01 fa00 	mul.w	sl, r1, r0
 80224cc:	0109      	lsls	r1, r1, #4
 80224ce:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80224d2:	eba1 080a 	sub.w	r8, r1, sl
 80224d6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80224da:	b280      	uxth	r0, r0
 80224dc:	fa1f f888 	uxth.w	r8, r8
 80224e0:	1a12      	subs	r2, r2, r0
 80224e2:	fb08 f10c 	mul.w	r1, r8, ip
 80224e6:	b292      	uxth	r2, r2
 80224e8:	fb02 1106 	mla	r1, r2, r6, r1
 80224ec:	fb00 1109 	mla	r1, r0, r9, r1
 80224f0:	fb0a 1105 	mla	r1, sl, r5, r1
 80224f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80224f8:	2900      	cmp	r1, #0
 80224fa:	f000 80da 	beq.w	80226b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80224fe:	2eff      	cmp	r6, #255	; 0xff
 8022500:	d016      	beq.n	8022530 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8022502:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802250a:	4377      	muls	r7, r6
 802250c:	435e      	muls	r6, r3
 802250e:	0a3b      	lsrs	r3, r7, #8
 8022510:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022514:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022518:	443b      	add	r3, r7
 802251a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802251e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022522:	0a1b      	lsrs	r3, r3, #8
 8022524:	0a3f      	lsrs	r7, r7, #8
 8022526:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802252a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802252e:	433b      	orrs	r3, r7
 8022530:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022534:	d01d      	beq.n	8022572 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8022536:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022538:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802253a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802253e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022542:	fb0c f606 	mul.w	r6, ip, r6
 8022546:	fb0c fc07 	mul.w	ip, ip, r7
 802254a:	0a37      	lsrs	r7, r6, #8
 802254c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022550:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022554:	4437      	add	r7, r6
 8022556:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802255a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802255e:	0a3f      	lsrs	r7, r7, #8
 8022560:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022564:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022568:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802256c:	ea47 060c 	orr.w	r6, r7, ip
 8022570:	960d      	str	r6, [sp, #52]	; 0x34
 8022572:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022576:	d01d      	beq.n	80225b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8022578:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802257a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802257e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022582:	fb09 fc0c 	mul.w	ip, r9, ip
 8022586:	fb09 f906 	mul.w	r9, r9, r6
 802258a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802258e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022592:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8022596:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802259a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802259e:	4467      	add	r7, ip
 80225a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80225a4:	0a3f      	lsrs	r7, r7, #8
 80225a6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80225aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225ae:	ea47 0609 	orr.w	r6, r7, r9
 80225b2:	9609      	str	r6, [sp, #36]	; 0x24
 80225b4:	2dff      	cmp	r5, #255	; 0xff
 80225b6:	d01a      	beq.n	80225ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80225b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80225ba:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80225be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80225c2:	fb05 fc0c 	mul.w	ip, r5, ip
 80225c6:	4375      	muls	r5, r6
 80225c8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80225cc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80225d0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80225d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225d8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80225dc:	4467      	add	r7, ip
 80225de:	0a2d      	lsrs	r5, r5, #8
 80225e0:	0a3f      	lsrs	r7, r7, #8
 80225e2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80225e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80225ea:	433d      	orrs	r5, r7
 80225ec:	950f      	str	r5, [sp, #60]	; 0x3c
 80225ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80225f0:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80225f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225f8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80225fc:	fb08 f505 	mul.w	r5, r8, r5
 8022600:	fb02 5506 	mla	r5, r2, r6, r5
 8022604:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022606:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802260a:	fb00 5506 	mla	r5, r0, r6, r5
 802260e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022610:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022614:	fb0a 5506 	mla	r5, sl, r6, r5
 8022618:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802261a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802261e:	0a2d      	lsrs	r5, r5, #8
 8022620:	fb08 f806 	mul.w	r8, r8, r6
 8022624:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022628:	fb02 8303 	mla	r3, r2, r3, r8
 802262c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802262e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022634:	fb00 3307 	mla	r3, r0, r7, r3
 8022638:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802263c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8022640:	fb01 f30b 	mul.w	r3, r1, fp
 8022644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022648:	1c59      	adds	r1, r3, #1
 802264a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802264e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022652:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022656:	ea45 050c 	orr.w	r5, r5, ip
 802265a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802265e:	b2ea      	uxtb	r2, r5
 8022660:	b2c9      	uxtb	r1, r1
 8022662:	fb12 f20b 	smulbb	r2, r2, fp
 8022666:	fb03 2301 	mla	r3, r3, r1, r2
 802266a:	b29b      	uxth	r3, r3
 802266c:	1c5a      	adds	r2, r3, #1
 802266e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022672:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022676:	fb12 f201 	smulbb	r2, r2, r1
 802267a:	121b      	asrs	r3, r3, #8
 802267c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022680:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022684:	0c2d      	lsrs	r5, r5, #16
 8022686:	fb03 230b 	mla	r3, r3, fp, r2
 802268a:	b29b      	uxth	r3, r3
 802268c:	1c5a      	adds	r2, r3, #1
 802268e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022692:	121b      	asrs	r3, r3, #8
 8022694:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022698:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802269c:	fb13 f101 	smulbb	r1, r3, r1
 80226a0:	fb05 150b 	mla	r5, r5, fp, r1
 80226a4:	b2ad      	uxth	r5, r5
 80226a6:	1c69      	adds	r1, r5, #1
 80226a8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80226ac:	122d      	asrs	r5, r5, #8
 80226ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80226b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80226b4:	f10e 0e03 	add.w	lr, lr, #3
 80226b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80226ba:	4413      	add	r3, r2
 80226bc:	932b      	str	r3, [sp, #172]	; 0xac
 80226be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80226c0:	441c      	add	r4, r3
 80226c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80226c4:	3b01      	subs	r3, #1
 80226c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80226c8:	e501      	b.n	80220ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80226ca:	b150      	cbz	r0, 80226e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80226cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226ce:	58aa      	ldr	r2, [r5, r2]
 80226d0:	25ff      	movs	r5, #255	; 0xff
 80226d2:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80226d6:	9209      	str	r2, [sp, #36]	; 0x24
 80226d8:	46ac      	mov	ip, r5
 80226da:	e6f3      	b.n	80224c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80226dc:	25ff      	movs	r5, #255	; 0xff
 80226de:	46a9      	mov	r9, r5
 80226e0:	e6f0      	b.n	80224c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80226e2:	25ff      	movs	r5, #255	; 0xff
 80226e4:	46a9      	mov	r9, r5
 80226e6:	e7f7      	b.n	80226d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80226e8:	b019      	add	sp, #100	; 0x64
 80226ea:	ecbd 8b08 	vpop	{d8-d11}
 80226ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080226f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80226f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226f8:	b085      	sub	sp, #20
 80226fa:	7888      	ldrb	r0, [r1, #2]
 80226fc:	4691      	mov	r9, r2
 80226fe:	9000      	str	r0, [sp, #0]
 8022700:	7848      	ldrb	r0, [r1, #1]
 8022702:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8022706:	9001      	str	r0, [sp, #4]
 8022708:	7808      	ldrb	r0, [r1, #0]
 802270a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802270e:	9002      	str	r0, [sp, #8]
 8022710:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022714:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8022718:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802271c:	fb04 c603 	mla	r6, r4, r3, ip
 8022720:	2c00      	cmp	r4, #0
 8022722:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8022726:	9a00      	ldr	r2, [sp, #0]
 8022728:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802272c:	9a01      	ldr	r2, [sp, #4]
 802272e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022732:	db3a      	blt.n	80227aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8022734:	45a0      	cmp	r8, r4
 8022736:	dd38      	ble.n	80227aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8022738:	f1bc 0f00 	cmp.w	ip, #0
 802273c:	db33      	blt.n	80227a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802273e:	4563      	cmp	r3, ip
 8022740:	dd31      	ble.n	80227a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022742:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8022746:	f11c 0601 	adds.w	r6, ip, #1
 802274a:	d431      	bmi.n	80227b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802274c:	42b3      	cmp	r3, r6
 802274e:	dd2f      	ble.n	80227b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022750:	b375      	cbz	r5, 80227b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022752:	f8de 6004 	ldr.w	r6, [lr, #4]
 8022756:	3401      	adds	r4, #1
 8022758:	d42e      	bmi.n	80227b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802275a:	45a0      	cmp	r8, r4
 802275c:	dd2c      	ble.n	80227b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802275e:	b35f      	cbz	r7, 80227b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022760:	f1bc 0f00 	cmp.w	ip, #0
 8022764:	db26      	blt.n	80227b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8022766:	4563      	cmp	r3, ip
 8022768:	dd24      	ble.n	80227b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802276a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802276e:	f11c 0c01 	adds.w	ip, ip, #1
 8022772:	d405      	bmi.n	8022780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022774:	4563      	cmp	r3, ip
 8022776:	dd03      	ble.n	8022780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022778:	b115      	cbz	r5, 8022780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802277a:	3301      	adds	r3, #1
 802277c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022780:	2d0f      	cmp	r5, #15
 8022782:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022786:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802278a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802278e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022792:	d801      	bhi.n	8022798 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8022794:	2f0f      	cmp	r7, #15
 8022796:	d911      	bls.n	80227bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8022798:	4b77      	ldr	r3, [pc, #476]	; (8022978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802279a:	f240 11a5 	movw	r1, #421	; 0x1a5
 802279e:	4a77      	ldr	r2, [pc, #476]	; (802297c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 80227a0:	4877      	ldr	r0, [pc, #476]	; (8022980 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 80227a2:	f003 f83b 	bl	802581c <__assert_func>
 80227a6:	4602      	mov	r2, r0
 80227a8:	e7cd      	b.n	8022746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80227aa:	4606      	mov	r6, r0
 80227ac:	4602      	mov	r2, r0
 80227ae:	e7d2      	b.n	8022756 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80227b0:	4606      	mov	r6, r0
 80227b2:	e7d0      	b.n	8022756 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80227b4:	4604      	mov	r4, r0
 80227b6:	e7da      	b.n	802276e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80227b8:	4604      	mov	r4, r0
 80227ba:	e7e1      	b.n	8022780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80227bc:	b2ab      	uxth	r3, r5
 80227be:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80227c2:	b2bf      	uxth	r7, r7
 80227c4:	fb03 fe07 	mul.w	lr, r3, r7
 80227c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80227cc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80227d0:	eba3 0c0e 	sub.w	ip, r3, lr
 80227d4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80227d8:	b2bf      	uxth	r7, r7
 80227da:	fa1f fc8c 	uxth.w	ip, ip
 80227de:	eba5 0507 	sub.w	r5, r5, r7
 80227e2:	fb0c f30a 	mul.w	r3, ip, sl
 80227e6:	b2ad      	uxth	r5, r5
 80227e8:	fb05 330b 	mla	r3, r5, fp, r3
 80227ec:	fb07 3309 	mla	r3, r7, r9, r3
 80227f0:	fb0e 3308 	mla	r3, lr, r8, r3
 80227f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80227f8:	9303      	str	r3, [sp, #12]
 80227fa:	d018      	beq.n	802282e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80227fc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022800:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022804:	fb0b f303 	mul.w	r3, fp, r3
 8022808:	fb0b fb02 	mul.w	fp, fp, r2
 802280c:	0a1a      	lsrs	r2, r3, #8
 802280e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022812:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022816:	441a      	add	r2, r3
 8022818:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802281c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022820:	0a12      	lsrs	r2, r2, #8
 8022822:	0a1b      	lsrs	r3, r3, #8
 8022824:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022828:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802282c:	431a      	orrs	r2, r3
 802282e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022832:	d019      	beq.n	8022868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8022834:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022838:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802283c:	fb0a fb0b 	mul.w	fp, sl, fp
 8022840:	fb0a fa06 	mul.w	sl, sl, r6
 8022844:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022848:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802284c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022850:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022854:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022858:	445e      	add	r6, fp
 802285a:	0a1b      	lsrs	r3, r3, #8
 802285c:	0a36      	lsrs	r6, r6, #8
 802285e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022862:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022866:	431e      	orrs	r6, r3
 8022868:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802286c:	d019      	beq.n	80228a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 802286e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022872:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022876:	fb09 fa0a 	mul.w	sl, r9, sl
 802287a:	fb09 f904 	mul.w	r9, r9, r4
 802287e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022882:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022886:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802288a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802288e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022892:	4454      	add	r4, sl
 8022894:	0a1b      	lsrs	r3, r3, #8
 8022896:	0a24      	lsrs	r4, r4, #8
 8022898:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802289c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80228a0:	431c      	orrs	r4, r3
 80228a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80228a6:	d019      	beq.n	80228dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80228a8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80228ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80228b0:	fb08 f909 	mul.w	r9, r8, r9
 80228b4:	fb08 f800 	mul.w	r8, r8, r0
 80228b8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80228bc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80228c0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80228c4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80228c8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80228cc:	4448      	add	r0, r9
 80228ce:	0a1b      	lsrs	r3, r3, #8
 80228d0:	0a00      	lsrs	r0, r0, #8
 80228d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228d6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80228da:	4318      	orrs	r0, r3
 80228dc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80228e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80228e4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80228e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80228ec:	fb0c f808 	mul.w	r8, ip, r8
 80228f0:	fb0c f606 	mul.w	r6, ip, r6
 80228f4:	fb05 8803 	mla	r8, r5, r3, r8
 80228f8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80228fc:	fb05 6202 	mla	r2, r5, r2, r6
 8022900:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022904:	fb07 8803 	mla	r8, r7, r3, r8
 8022908:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802290c:	fb07 2704 	mla	r7, r7, r4, r2
 8022910:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022914:	fb0e 8303 	mla	r3, lr, r3, r8
 8022918:	fb0e 7e00 	mla	lr, lr, r0, r7
 802291c:	9802      	ldr	r0, [sp, #8]
 802291e:	0a1b      	lsrs	r3, r3, #8
 8022920:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022924:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022928:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802292c:	ea43 0e0e 	orr.w	lr, r3, lr
 8022930:	9b03      	ldr	r3, [sp, #12]
 8022932:	43db      	mvns	r3, r3
 8022934:	b2db      	uxtb	r3, r3
 8022936:	4358      	muls	r0, r3
 8022938:	1c42      	adds	r2, r0, #1
 802293a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802293e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022942:	700a      	strb	r2, [r1, #0]
 8022944:	9a01      	ldr	r2, [sp, #4]
 8022946:	435a      	muls	r2, r3
 8022948:	1c50      	adds	r0, r2, #1
 802294a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802294e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022952:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022956:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802295a:	704a      	strb	r2, [r1, #1]
 802295c:	9a00      	ldr	r2, [sp, #0]
 802295e:	435a      	muls	r2, r3
 8022960:	4613      	mov	r3, r2
 8022962:	3201      	adds	r2, #1
 8022964:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022968:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802296c:	f881 e002 	strb.w	lr, [r1, #2]
 8022970:	b005      	add	sp, #20
 8022972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022976:	bf00      	nop
 8022978:	0802b131 	.word	0x0802b131
 802297c:	0802b626 	.word	0x0802b626
 8022980:	0802b1fa 	.word	0x0802b1fa

08022984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022988:	ed2d 8b08 	vpush	{d8-d11}
 802298c:	b097      	sub	sp, #92	; 0x5c
 802298e:	eeb0 aa40 	vmov.f32	s20, s0
 8022992:	eef0 9a60 	vmov.f32	s19, s1
 8022996:	9306      	str	r3, [sp, #24]
 8022998:	eeb0 9a41 	vmov.f32	s18, s2
 802299c:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80229a0:	eeb0 8a62 	vmov.f32	s16, s5
 80229a4:	9214      	str	r2, [sp, #80]	; 0x50
 80229a6:	eef0 8a43 	vmov.f32	s17, s6
 80229aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80229ac:	eef0 ba44 	vmov.f32	s23, s8
 80229b0:	9307      	str	r3, [sp, #28]
 80229b2:	eeb0 ba64 	vmov.f32	s22, s9
 80229b6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80229ba:	eef0 aa45 	vmov.f32	s21, s10
 80229be:	9015      	str	r0, [sp, #84]	; 0x54
 80229c0:	9112      	str	r1, [sp, #72]	; 0x48
 80229c2:	6850      	ldr	r0, [r2, #4]
 80229c4:	9310      	str	r3, [sp, #64]	; 0x40
 80229c6:	6812      	ldr	r2, [r2, #0]
 80229c8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80229ca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80229ce:	fb00 1303 	mla	r3, r0, r3, r1
 80229d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80229d6:	18d3      	adds	r3, r2, r3
 80229d8:	930a      	str	r3, [sp, #40]	; 0x28
 80229da:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	9311      	str	r3, [sp, #68]	; 0x44
 80229e0:	9b07      	ldr	r3, [sp, #28]
 80229e2:	009b      	lsls	r3, r3, #2
 80229e4:	930e      	str	r3, [sp, #56]	; 0x38
 80229e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	dc03      	bgt.n	80229f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80229ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	f340 832e 	ble.w	8023050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80229f4:	9b06      	ldr	r3, [sp, #24]
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	f340 8186 	ble.w	8022d08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80229fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80229fe:	1423      	asrs	r3, r4, #16
 8022a00:	1412      	asrs	r2, r2, #16
 8022a02:	d42f      	bmi.n	8022a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022a04:	1c51      	adds	r1, r2, #1
 8022a06:	9807      	ldr	r0, [sp, #28]
 8022a08:	4288      	cmp	r0, r1
 8022a0a:	dd2e      	ble.n	8022a6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	db2c      	blt.n	8022a6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022a10:	1c59      	adds	r1, r3, #1
 8022a12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022a14:	4288      	cmp	r0, r1
 8022a16:	dd28      	ble.n	8022a6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022a18:	9b06      	ldr	r3, [sp, #24]
 8022a1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022a1c:	3b01      	subs	r3, #1
 8022a1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022a20:	fb02 1203 	mla	r2, r2, r3, r1
 8022a24:	1412      	asrs	r2, r2, #16
 8022a26:	d42b      	bmi.n	8022a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a28:	3201      	adds	r2, #1
 8022a2a:	9907      	ldr	r1, [sp, #28]
 8022a2c:	4291      	cmp	r1, r2
 8022a2e:	dd27      	ble.n	8022a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a30:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022a32:	fb02 4303 	mla	r3, r2, r3, r4
 8022a36:	141b      	asrs	r3, r3, #16
 8022a38:	d422      	bmi.n	8022a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a3a:	3301      	adds	r3, #1
 8022a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a3e:	429a      	cmp	r2, r3
 8022a40:	dd1e      	ble.n	8022a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a44:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022a48:	1cdd      	adds	r5, r3, #3
 8022a4a:	f1bb 0f00 	cmp.w	fp, #0
 8022a4e:	f300 81c4 	bgt.w	8022dda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022a52:	9b06      	ldr	r3, [sp, #24]
 8022a54:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a5e:	4423      	add	r3, r4
 8022a60:	930a      	str	r3, [sp, #40]	; 0x28
 8022a62:	e153      	b.n	8022d0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022a64:	1c51      	adds	r1, r2, #1
 8022a66:	f040 8142 	bne.w	8022cee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a6a:	9907      	ldr	r1, [sp, #28]
 8022a6c:	428a      	cmp	r2, r1
 8022a6e:	f280 813e 	bge.w	8022cee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a72:	1c5a      	adds	r2, r3, #1
 8022a74:	f2c0 813b 	blt.w	8022cee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a7a:	4293      	cmp	r3, r2
 8022a7c:	f280 8137 	bge.w	8022cee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022a80:	9b06      	ldr	r3, [sp, #24]
 8022a82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	dde2      	ble.n	8022a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022a8c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022a8e:	1423      	asrs	r3, r4, #16
 8022a90:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022a92:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022a96:	1409      	asrs	r1, r1, #16
 8022a98:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022a9c:	f100 8187 	bmi.w	8022dae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022aa0:	1c4e      	adds	r6, r1, #1
 8022aa2:	9f07      	ldr	r7, [sp, #28]
 8022aa4:	42b7      	cmp	r7, r6
 8022aa6:	f340 8184 	ble.w	8022db2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	f2c0 8181 	blt.w	8022db2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022ab0:	1c5e      	adds	r6, r3, #1
 8022ab2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022ab4:	42b7      	cmp	r7, r6
 8022ab6:	f340 817c 	ble.w	8022db2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022aba:	9e07      	ldr	r6, [sp, #28]
 8022abc:	fb03 1306 	mla	r3, r3, r6, r1
 8022ac0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022ac2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022aca:	0e1f      	lsrs	r7, r3, #24
 8022acc:	2a00      	cmp	r2, #0
 8022ace:	f000 815c 	beq.w	8022d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022ad2:	6871      	ldr	r1, [r6, #4]
 8022ad4:	910b      	str	r1, [sp, #44]	; 0x2c
 8022ad6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022ada:	2800      	cmp	r0, #0
 8022adc:	f000 815e 	beq.w	8022d9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8022ae0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022ae2:	eb06 0c01 	add.w	ip, r6, r1
 8022ae6:	5876      	ldr	r6, [r6, r1]
 8022ae8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022aec:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022af0:	9608      	str	r6, [sp, #32]
 8022af2:	0e0e      	lsrs	r6, r1, #24
 8022af4:	910c      	str	r1, [sp, #48]	; 0x30
 8022af6:	b292      	uxth	r2, r2
 8022af8:	b280      	uxth	r0, r0
 8022afa:	fb02 fa00 	mul.w	sl, r2, r0
 8022afe:	0112      	lsls	r2, r2, #4
 8022b00:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022b04:	eba2 080a 	sub.w	r8, r2, sl
 8022b08:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022b0c:	b280      	uxth	r0, r0
 8022b0e:	fa1f f888 	uxth.w	r8, r8
 8022b12:	1a09      	subs	r1, r1, r0
 8022b14:	fb08 f20e 	mul.w	r2, r8, lr
 8022b18:	b289      	uxth	r1, r1
 8022b1a:	fb01 2207 	mla	r2, r1, r7, r2
 8022b1e:	fb00 2209 	mla	r2, r0, r9, r2
 8022b22:	fb0a 2206 	mla	r2, sl, r6, r2
 8022b26:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022b2a:	2a00      	cmp	r2, #0
 8022b2c:	f000 80d4 	beq.w	8022cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022b30:	2fff      	cmp	r7, #255	; 0xff
 8022b32:	d01a      	beq.n	8022b6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022b34:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022b38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b3c:	fb07 fc0c 	mul.w	ip, r7, ip
 8022b40:	435f      	muls	r7, r3
 8022b42:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022b46:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022b4a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022b4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b52:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022b56:	4463      	add	r3, ip
 8022b58:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022b5c:	0a1b      	lsrs	r3, r3, #8
 8022b5e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022b62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b66:	ea43 030b 	orr.w	r3, r3, fp
 8022b6a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022b6e:	d01e      	beq.n	8022bae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022b70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022b72:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022b76:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b7a:	fb0e fb0b 	mul.w	fp, lr, fp
 8022b7e:	fb0e fe07 	mul.w	lr, lr, r7
 8022b82:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022b86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b8a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022b8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b92:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022b96:	44dc      	add	ip, fp
 8022b98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ba0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ba4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ba8:	ea4c 070e 	orr.w	r7, ip, lr
 8022bac:	970b      	str	r7, [sp, #44]	; 0x2c
 8022bae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022bb2:	d01e      	beq.n	8022bf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022bb4:	9f08      	ldr	r7, [sp, #32]
 8022bb6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022bba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022bbe:	fb09 fe0e 	mul.w	lr, r9, lr
 8022bc2:	fb09 f907 	mul.w	r9, r9, r7
 8022bc6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022bca:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022bce:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022bd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bd6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022bda:	44f4      	add	ip, lr
 8022bdc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022be0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022be4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022be8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022bec:	ea4c 0709 	orr.w	r7, ip, r9
 8022bf0:	9708      	str	r7, [sp, #32]
 8022bf2:	2eff      	cmp	r6, #255	; 0xff
 8022bf4:	d01c      	beq.n	8022c30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022bf6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022bf8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022bfc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022c00:	fb06 fe0e 	mul.w	lr, r6, lr
 8022c04:	437e      	muls	r6, r7
 8022c06:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022c0a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022c0e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022c12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c16:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022c1a:	44f4      	add	ip, lr
 8022c1c:	0a36      	lsrs	r6, r6, #8
 8022c1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c22:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022c26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c2a:	ea4c 0606 	orr.w	r6, ip, r6
 8022c2e:	960c      	str	r6, [sp, #48]	; 0x30
 8022c30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022c32:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022c36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022c3a:	2aff      	cmp	r2, #255	; 0xff
 8022c3c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c40:	fb08 f606 	mul.w	r6, r8, r6
 8022c44:	fb01 6607 	mla	r6, r1, r7, r6
 8022c48:	9f08      	ldr	r7, [sp, #32]
 8022c4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022c4e:	fb00 6607 	mla	r6, r0, r7, r6
 8022c52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022c54:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022c58:	fb0a 6607 	mla	r6, sl, r7, r6
 8022c5c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022c5e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022c62:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022c66:	fb08 f807 	mul.w	r8, r8, r7
 8022c6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022c6e:	fb01 8303 	mla	r3, r1, r3, r8
 8022c72:	9908      	ldr	r1, [sp, #32]
 8022c74:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022c78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022c7a:	fb00 330c 	mla	r3, r0, ip, r3
 8022c7e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022c82:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022c86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c8e:	ea46 060a 	orr.w	r6, r6, sl
 8022c92:	b2f0      	uxtb	r0, r6
 8022c94:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022c98:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022c9c:	f000 8084 	beq.w	8022da8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022ca0:	43d2      	mvns	r2, r2
 8022ca2:	782b      	ldrb	r3, [r5, #0]
 8022ca4:	b2d2      	uxtb	r2, r2
 8022ca6:	fb03 f702 	mul.w	r7, r3, r2
 8022caa:	1c7b      	adds	r3, r7, #1
 8022cac:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022cb0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022cb4:	702b      	strb	r3, [r5, #0]
 8022cb6:	786b      	ldrb	r3, [r5, #1]
 8022cb8:	fb03 f002 	mul.w	r0, r3, r2
 8022cbc:	1c43      	adds	r3, r0, #1
 8022cbe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022cc2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022cc6:	706b      	strb	r3, [r5, #1]
 8022cc8:	78ab      	ldrb	r3, [r5, #2]
 8022cca:	4353      	muls	r3, r2
 8022ccc:	1c5a      	adds	r2, r3, #1
 8022cce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022cd2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022cd6:	70ae      	strb	r6, [r5, #2]
 8022cd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022cda:	3503      	adds	r5, #3
 8022cdc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022cde:	4413      	add	r3, r2
 8022ce0:	9329      	str	r3, [sp, #164]	; 0xa4
 8022ce2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022ce4:	441c      	add	r4, r3
 8022ce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ce8:	3b01      	subs	r3, #1
 8022cea:	9313      	str	r3, [sp, #76]	; 0x4c
 8022cec:	e6cb      	b.n	8022a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022cee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022cf0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022cf2:	4413      	add	r3, r2
 8022cf4:	9329      	str	r3, [sp, #164]	; 0xa4
 8022cf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022cf8:	441c      	add	r4, r3
 8022cfa:	9b06      	ldr	r3, [sp, #24]
 8022cfc:	3b01      	subs	r3, #1
 8022cfe:	9306      	str	r3, [sp, #24]
 8022d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d02:	3303      	adds	r3, #3
 8022d04:	930a      	str	r3, [sp, #40]	; 0x28
 8022d06:	e675      	b.n	80229f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022d08:	f47f ae86 	bne.w	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	f340 819e 	ble.w	8023050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d1a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022d1e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022d22:	eef0 6a48 	vmov.f32	s13, s16
 8022d26:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022d2a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d32:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022d36:	eef0 6a68 	vmov.f32	s13, s17
 8022d3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d3e:	ee16 4a90 	vmov	r4, s13
 8022d42:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022d46:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022d4a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022d4e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022d52:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022d56:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022d5a:	ee18 2a10 	vmov	r2, s16
 8022d5e:	eeb0 8a47 	vmov.f32	s16, s14
 8022d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d66:	ee18 2a90 	vmov	r2, s17
 8022d6a:	932b      	str	r3, [sp, #172]	; 0xac
 8022d6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d6e:	eef0 8a67 	vmov.f32	s17, s15
 8022d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d76:	932c      	str	r3, [sp, #176]	; 0xb0
 8022d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022d7c:	3b01      	subs	r3, #1
 8022d7e:	9312      	str	r3, [sp, #72]	; 0x48
 8022d80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022d82:	bf08      	it	eq
 8022d84:	4613      	moveq	r3, r2
 8022d86:	9306      	str	r3, [sp, #24]
 8022d88:	e62d      	b.n	80229e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022d8a:	b150      	cbz	r0, 8022da2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022d8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022d8e:	5871      	ldr	r1, [r6, r1]
 8022d90:	26ff      	movs	r6, #255	; 0xff
 8022d92:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022d96:	9108      	str	r1, [sp, #32]
 8022d98:	46b6      	mov	lr, r6
 8022d9a:	e6ac      	b.n	8022af6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022d9c:	26ff      	movs	r6, #255	; 0xff
 8022d9e:	46b1      	mov	r9, r6
 8022da0:	e6a9      	b.n	8022af6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022da2:	26ff      	movs	r6, #255	; 0xff
 8022da4:	46b1      	mov	r9, r6
 8022da6:	e7f7      	b.n	8022d98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022da8:	7028      	strb	r0, [r5, #0]
 8022daa:	7069      	strb	r1, [r5, #1]
 8022dac:	e793      	b.n	8022cd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022dae:	1c4f      	adds	r7, r1, #1
 8022db0:	d192      	bne.n	8022cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022db2:	9e07      	ldr	r6, [sp, #28]
 8022db4:	428e      	cmp	r6, r1
 8022db6:	dd8f      	ble.n	8022cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022db8:	1c5e      	adds	r6, r3, #1
 8022dba:	db8d      	blt.n	8022cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022dbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022dbe:	429e      	cmp	r6, r3
 8022dc0:	dd8a      	ble.n	8022cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022dc2:	9600      	str	r6, [sp, #0]
 8022dc4:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022dc8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022dcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022dce:	4629      	mov	r1, r5
 8022dd0:	9b07      	ldr	r3, [sp, #28]
 8022dd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022dd4:	f7ff fc8e 	bl	80226f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022dd8:	e77e      	b.n	8022cd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022dda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ddc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022de0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022de2:	9e07      	ldr	r6, [sp, #28]
 8022de4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022de8:	1409      	asrs	r1, r1, #16
 8022dea:	1423      	asrs	r3, r4, #16
 8022dec:	fb06 1303 	mla	r3, r6, r3, r1
 8022df0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022df2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022df6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022dfa:	0e1f      	lsrs	r7, r3, #24
 8022dfc:	2a00      	cmp	r2, #0
 8022dfe:	f000 8113 	beq.w	8023028 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022e02:	6871      	ldr	r1, [r6, #4]
 8022e04:	910d      	str	r1, [sp, #52]	; 0x34
 8022e06:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022e0a:	2800      	cmp	r0, #0
 8022e0c:	f000 8115 	beq.w	802303a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022e10:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022e12:	eb06 0c01 	add.w	ip, r6, r1
 8022e16:	5876      	ldr	r6, [r6, r1]
 8022e18:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022e1c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022e20:	9609      	str	r6, [sp, #36]	; 0x24
 8022e22:	0e0e      	lsrs	r6, r1, #24
 8022e24:	910f      	str	r1, [sp, #60]	; 0x3c
 8022e26:	b292      	uxth	r2, r2
 8022e28:	b280      	uxth	r0, r0
 8022e2a:	fb02 fa00 	mul.w	sl, r2, r0
 8022e2e:	0112      	lsls	r2, r2, #4
 8022e30:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022e34:	eba2 080a 	sub.w	r8, r2, sl
 8022e38:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022e3c:	b280      	uxth	r0, r0
 8022e3e:	fa1f f888 	uxth.w	r8, r8
 8022e42:	1a09      	subs	r1, r1, r0
 8022e44:	fb08 f20e 	mul.w	r2, r8, lr
 8022e48:	b289      	uxth	r1, r1
 8022e4a:	fb01 2207 	mla	r2, r1, r7, r2
 8022e4e:	fb00 2209 	mla	r2, r0, r9, r2
 8022e52:	fb0a 2206 	mla	r2, sl, r6, r2
 8022e56:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022e5a:	2a00      	cmp	r2, #0
 8022e5c:	f000 80da 	beq.w	8023014 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022e60:	2fff      	cmp	r7, #255	; 0xff
 8022e62:	d01a      	beq.n	8022e9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022e64:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022e68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e6c:	fb07 fc0c 	mul.w	ip, r7, ip
 8022e70:	435f      	muls	r7, r3
 8022e72:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022e76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e7e:	4463      	add	r3, ip
 8022e80:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022e84:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022e88:	0a1b      	lsrs	r3, r3, #8
 8022e8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e92:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022e96:	ea43 030c 	orr.w	r3, r3, ip
 8022e9a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022e9e:	d021      	beq.n	8022ee4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022ea0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022ea2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022ea6:	fb0e f707 	mul.w	r7, lr, r7
 8022eaa:	9713      	str	r7, [sp, #76]	; 0x4c
 8022eac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022eae:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022eb2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022eb4:	fb0e fe0c 	mul.w	lr, lr, ip
 8022eb8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022ebc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022ec0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ec4:	44bc      	add	ip, r7
 8022ec6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022eca:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022ece:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ed2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ed6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022eda:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ede:	ea4c 070e 	orr.w	r7, ip, lr
 8022ee2:	970d      	str	r7, [sp, #52]	; 0x34
 8022ee4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022ee8:	d01e      	beq.n	8022f28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022eea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022eec:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ef0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ef4:	fb09 fe0e 	mul.w	lr, r9, lr
 8022ef8:	fb09 f907 	mul.w	r9, r9, r7
 8022efc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022f00:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022f04:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022f08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f0c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022f10:	44f4      	add	ip, lr
 8022f12:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022f16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f1a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022f1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f22:	ea4c 0709 	orr.w	r7, ip, r9
 8022f26:	9709      	str	r7, [sp, #36]	; 0x24
 8022f28:	2eff      	cmp	r6, #255	; 0xff
 8022f2a:	d01c      	beq.n	8022f66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022f2c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f2e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022f32:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f36:	fb06 fe0e 	mul.w	lr, r6, lr
 8022f3a:	437e      	muls	r6, r7
 8022f3c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022f40:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022f44:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022f48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f4c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022f50:	44f4      	add	ip, lr
 8022f52:	0a36      	lsrs	r6, r6, #8
 8022f54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022f5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f60:	ea4c 0606 	orr.w	r6, ip, r6
 8022f64:	960f      	str	r6, [sp, #60]	; 0x3c
 8022f66:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022f68:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022f6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f70:	2aff      	cmp	r2, #255	; 0xff
 8022f72:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022f76:	fb08 f606 	mul.w	r6, r8, r6
 8022f7a:	fb01 6607 	mla	r6, r1, r7, r6
 8022f7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022f80:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f84:	fb00 6607 	mla	r6, r0, r7, r6
 8022f88:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022f8a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022f8e:	fb0a 6607 	mla	r6, sl, r7, r6
 8022f92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022f94:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f98:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022f9c:	fb08 f807 	mul.w	r8, r8, r7
 8022fa0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022fa4:	fb01 8303 	mla	r3, r1, r3, r8
 8022fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022faa:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022fae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022fb0:	fb00 330c 	mla	r3, r0, ip, r3
 8022fb4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022fb8:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022fbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fc0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022fc4:	ea46 060e 	orr.w	r6, r6, lr
 8022fc8:	b2f0      	uxtb	r0, r6
 8022fca:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022fce:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022fd2:	d038      	beq.n	8023046 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022fd4:	43d2      	mvns	r2, r2
 8022fd6:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022fda:	b2d2      	uxtb	r2, r2
 8022fdc:	4357      	muls	r7, r2
 8022fde:	1c7b      	adds	r3, r7, #1
 8022fe0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022fe4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022fe8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022fec:	4350      	muls	r0, r2
 8022fee:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022ff2:	1c43      	adds	r3, r0, #1
 8022ff4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022ff8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022ffc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8023000:	4353      	muls	r3, r2
 8023002:	f805 1c02 	strb.w	r1, [r5, #-2]
 8023006:	1c5a      	adds	r2, r3, #1
 8023008:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802300c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023010:	f805 6c01 	strb.w	r6, [r5, #-1]
 8023014:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023016:	3503      	adds	r5, #3
 8023018:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802301a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802301e:	4413      	add	r3, r2
 8023020:	9329      	str	r3, [sp, #164]	; 0xa4
 8023022:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023024:	441c      	add	r4, r3
 8023026:	e510      	b.n	8022a4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8023028:	b150      	cbz	r0, 8023040 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802302a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802302c:	5871      	ldr	r1, [r6, r1]
 802302e:	26ff      	movs	r6, #255	; 0xff
 8023030:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8023034:	9109      	str	r1, [sp, #36]	; 0x24
 8023036:	46b6      	mov	lr, r6
 8023038:	e6f5      	b.n	8022e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802303a:	26ff      	movs	r6, #255	; 0xff
 802303c:	46b1      	mov	r9, r6
 802303e:	e6f2      	b.n	8022e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023040:	26ff      	movs	r6, #255	; 0xff
 8023042:	46b1      	mov	r9, r6
 8023044:	e7f7      	b.n	8023036 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8023046:	f805 0c03 	strb.w	r0, [r5, #-3]
 802304a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802304e:	e7df      	b.n	8023010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8023050:	b017      	add	sp, #92	; 0x5c
 8023052:	ecbd 8b08 	vpop	{d8-d11}
 8023056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802305c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802305c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023060:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023064:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023068:	2800      	cmp	r0, #0
 802306a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802306e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023072:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023076:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802307a:	db6b      	blt.n	8023154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802307c:	4580      	cmp	r8, r0
 802307e:	dd69      	ble.n	8023154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023080:	f1bc 0f00 	cmp.w	ip, #0
 8023084:	db66      	blt.n	8023154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023086:	45e1      	cmp	r9, ip
 8023088:	dd64      	ble.n	8023154 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802308a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802308e:	f01e 0f01 	tst.w	lr, #1
 8023092:	5d16      	ldrb	r6, [r2, r4]
 8023094:	bf0c      	ite	eq
 8023096:	f006 060f 	andeq.w	r6, r6, #15
 802309a:	1136      	asrne	r6, r6, #4
 802309c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80230a0:	b2f6      	uxtb	r6, r6
 80230a2:	f110 0a01 	adds.w	sl, r0, #1
 80230a6:	d457      	bmi.n	8023158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80230a8:	45d0      	cmp	r8, sl
 80230aa:	dd55      	ble.n	8023158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80230ac:	f1bc 0f00 	cmp.w	ip, #0
 80230b0:	db52      	blt.n	8023158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80230b2:	45e1      	cmp	r9, ip
 80230b4:	dd50      	ble.n	8023158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80230b6:	2f00      	cmp	r7, #0
 80230b8:	f000 80ac 	beq.w	8023214 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80230bc:	f10e 0b01 	add.w	fp, lr, #1
 80230c0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80230c4:	f01b 0f01 	tst.w	fp, #1
 80230c8:	5d14      	ldrb	r4, [r2, r4]
 80230ca:	bf0c      	ite	eq
 80230cc:	f004 040f 	andeq.w	r4, r4, #15
 80230d0:	1124      	asrne	r4, r4, #4
 80230d2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80230d6:	b2e4      	uxtb	r4, r4
 80230d8:	2d00      	cmp	r5, #0
 80230da:	f000 8096 	beq.w	802320a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80230de:	2800      	cmp	r0, #0
 80230e0:	f10c 0c01 	add.w	ip, ip, #1
 80230e4:	db3c      	blt.n	8023160 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230e6:	4580      	cmp	r8, r0
 80230e8:	dd3a      	ble.n	8023160 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230ea:	f1bc 0f00 	cmp.w	ip, #0
 80230ee:	db37      	blt.n	8023160 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230f0:	45e1      	cmp	r9, ip
 80230f2:	dd35      	ble.n	8023160 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80230f4:	eb03 0b0e 	add.w	fp, r3, lr
 80230f8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80230fc:	f01b 0f01 	tst.w	fp, #1
 8023100:	5c10      	ldrb	r0, [r2, r0]
 8023102:	bf0c      	ite	eq
 8023104:	f000 000f 	andeq.w	r0, r0, #15
 8023108:	1100      	asrne	r0, r0, #4
 802310a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802310e:	b2c0      	uxtb	r0, r0
 8023110:	f1ba 0f00 	cmp.w	sl, #0
 8023114:	db26      	blt.n	8023164 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023116:	45d0      	cmp	r8, sl
 8023118:	dd24      	ble.n	8023164 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802311a:	f1bc 0f00 	cmp.w	ip, #0
 802311e:	db21      	blt.n	8023164 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023120:	45e1      	cmp	r9, ip
 8023122:	dd1f      	ble.n	8023164 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023124:	b307      	cbz	r7, 8023168 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8023126:	3301      	adds	r3, #1
 8023128:	449e      	add	lr, r3
 802312a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802312e:	f01e 0f01 	tst.w	lr, #1
 8023132:	5cd3      	ldrb	r3, [r2, r3]
 8023134:	bf0c      	ite	eq
 8023136:	f003 030f 	andeq.w	r3, r3, #15
 802313a:	111b      	asrne	r3, r3, #4
 802313c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023140:	b2db      	uxtb	r3, r3
 8023142:	2f0f      	cmp	r7, #15
 8023144:	d911      	bls.n	802316a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8023146:	4b35      	ldr	r3, [pc, #212]	; (802321c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8023148:	f240 11a5 	movw	r1, #421	; 0x1a5
 802314c:	4a34      	ldr	r2, [pc, #208]	; (8023220 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802314e:	4835      	ldr	r0, [pc, #212]	; (8023224 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023150:	f002 fb64 	bl	802581c <__assert_func>
 8023154:	2600      	movs	r6, #0
 8023156:	e7a4      	b.n	80230a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8023158:	2400      	movs	r4, #0
 802315a:	e7bd      	b.n	80230d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 802315c:	463c      	mov	r4, r7
 802315e:	e7be      	b.n	80230de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023160:	2000      	movs	r0, #0
 8023162:	e7d5      	b.n	8023110 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8023164:	2300      	movs	r3, #0
 8023166:	e7ec      	b.n	8023142 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8023168:	463b      	mov	r3, r7
 802316a:	2d0f      	cmp	r5, #15
 802316c:	d8eb      	bhi.n	8023146 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802316e:	b2bf      	uxth	r7, r7
 8023170:	b2ad      	uxth	r5, r5
 8023172:	fb07 f205 	mul.w	r2, r7, r5
 8023176:	013f      	lsls	r7, r7, #4
 8023178:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 802317c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023180:	1abf      	subs	r7, r7, r2
 8023182:	b2ad      	uxth	r5, r5
 8023184:	b2bf      	uxth	r7, r7
 8023186:	ebac 0c05 	sub.w	ip, ip, r5
 802318a:	437c      	muls	r4, r7
 802318c:	fa1f fc8c 	uxth.w	ip, ip
 8023190:	fb06 440c 	mla	r4, r6, ip, r4
 8023194:	fb05 4400 	mla	r4, r5, r0, r4
 8023198:	fb02 4203 	mla	r2, r2, r3, r4
 802319c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80231a0:	b38a      	cbz	r2, 8023206 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80231a2:	4b21      	ldr	r3, [pc, #132]	; (8023228 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80231a4:	681c      	ldr	r4, [r3, #0]
 80231a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80231aa:	b2e5      	uxtb	r5, r4
 80231ac:	4353      	muls	r3, r2
 80231ae:	1c5a      	adds	r2, r3, #1
 80231b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80231b4:	1212      	asrs	r2, r2, #8
 80231b6:	b290      	uxth	r0, r2
 80231b8:	43d2      	mvns	r2, r2
 80231ba:	fb15 f500 	smulbb	r5, r5, r0
 80231be:	b2d3      	uxtb	r3, r2
 80231c0:	780a      	ldrb	r2, [r1, #0]
 80231c2:	fb02 5203 	mla	r2, r2, r3, r5
 80231c6:	b292      	uxth	r2, r2
 80231c8:	1c55      	adds	r5, r2, #1
 80231ca:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80231ce:	784d      	ldrb	r5, [r1, #1]
 80231d0:	fb15 f503 	smulbb	r5, r5, r3
 80231d4:	1212      	asrs	r2, r2, #8
 80231d6:	700a      	strb	r2, [r1, #0]
 80231d8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80231dc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80231e0:	fb02 5200 	mla	r2, r2, r0, r5
 80231e4:	b292      	uxth	r2, r2
 80231e6:	1c55      	adds	r5, r2, #1
 80231e8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80231ec:	1212      	asrs	r2, r2, #8
 80231ee:	704a      	strb	r2, [r1, #1]
 80231f0:	788a      	ldrb	r2, [r1, #2]
 80231f2:	fb12 f303 	smulbb	r3, r2, r3
 80231f6:	fb04 3300 	mla	r3, r4, r0, r3
 80231fa:	b29b      	uxth	r3, r3
 80231fc:	1c5a      	adds	r2, r3, #1
 80231fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023202:	121b      	asrs	r3, r3, #8
 8023204:	708b      	strb	r3, [r1, #2]
 8023206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802320a:	2f0f      	cmp	r7, #15
 802320c:	d89b      	bhi.n	8023146 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802320e:	462b      	mov	r3, r5
 8023210:	4628      	mov	r0, r5
 8023212:	e7ac      	b.n	802316e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8023214:	2d00      	cmp	r5, #0
 8023216:	d1a1      	bne.n	802315c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8023218:	462c      	mov	r4, r5
 802321a:	e7f8      	b.n	802320e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 802321c:	0802b131 	.word	0x0802b131
 8023220:	0802b626 	.word	0x0802b626
 8023224:	0802b1fa 	.word	0x0802b1fa
 8023228:	2000b398 	.word	0x2000b398

0802322c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023230:	ed2d 8b08 	vpush	{d8-d11}
 8023234:	b097      	sub	sp, #92	; 0x5c
 8023236:	eeb0 aa40 	vmov.f32	s20, s0
 802323a:	eef0 9a60 	vmov.f32	s19, s1
 802323e:	9308      	str	r3, [sp, #32]
 8023240:	eeb0 9a41 	vmov.f32	s18, s2
 8023244:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8023248:	eeb0 8a62 	vmov.f32	s16, s5
 802324c:	9214      	str	r2, [sp, #80]	; 0x50
 802324e:	eef0 8a43 	vmov.f32	s17, s6
 8023252:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023254:	eef0 ba44 	vmov.f32	s23, s8
 8023258:	9309      	str	r3, [sp, #36]	; 0x24
 802325a:	eeb0 ba64 	vmov.f32	s22, s9
 802325e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023262:	eef0 aa45 	vmov.f32	s21, s10
 8023266:	9015      	str	r0, [sp, #84]	; 0x54
 8023268:	910c      	str	r1, [sp, #48]	; 0x30
 802326a:	930e      	str	r3, [sp, #56]	; 0x38
 802326c:	6850      	ldr	r0, [r2, #4]
 802326e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8023272:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023276:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802327a:	fb00 1803 	mla	r8, r0, r3, r1
 802327e:	6813      	ldr	r3, [r2, #0]
 8023280:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023284:	4498      	add	r8, r3
 8023286:	f10b 0301 	add.w	r3, fp, #1
 802328a:	f023 0301 	bic.w	r3, r3, #1
 802328e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023290:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023292:	681f      	ldr	r7, [r3, #0]
 8023294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023296:	2b00      	cmp	r3, #0
 8023298:	dc03      	bgt.n	80232a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802329a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802329c:	2b00      	cmp	r3, #0
 802329e:	f340 8238 	ble.w	8023712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80232a2:	9b08      	ldr	r3, [sp, #32]
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	f340 810c 	ble.w	80234c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80232aa:	142a      	asrs	r2, r5, #16
 80232ac:	ea4f 4326 	mov.w	r3, r6, asr #16
 80232b0:	d42c      	bmi.n	802330c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80232b2:	1c51      	adds	r1, r2, #1
 80232b4:	458b      	cmp	fp, r1
 80232b6:	dd2c      	ble.n	8023312 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80232b8:	2b00      	cmp	r3, #0
 80232ba:	db2a      	blt.n	8023312 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80232bc:	1c59      	adds	r1, r3, #1
 80232be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80232c0:	4288      	cmp	r0, r1
 80232c2:	dd26      	ble.n	8023312 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80232c4:	9b08      	ldr	r3, [sp, #32]
 80232c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80232c8:	3b01      	subs	r3, #1
 80232ca:	fb02 5203 	mla	r2, r2, r3, r5
 80232ce:	1412      	asrs	r2, r2, #16
 80232d0:	d429      	bmi.n	8023326 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232d2:	3201      	adds	r2, #1
 80232d4:	4593      	cmp	fp, r2
 80232d6:	dd26      	ble.n	8023326 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80232da:	fb02 6303 	mla	r3, r2, r3, r6
 80232de:	141b      	asrs	r3, r3, #16
 80232e0:	d421      	bmi.n	8023326 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232e2:	3301      	adds	r3, #1
 80232e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232e6:	429a      	cmp	r2, r3
 80232e8:	dd1d      	ble.n	8023326 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80232ea:	f108 0e03 	add.w	lr, r8, #3
 80232ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80232f2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80232f6:	f1b9 0f00 	cmp.w	r9, #0
 80232fa:	f300 814f 	bgt.w	802359c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80232fe:	9b08      	ldr	r3, [sp, #32]
 8023300:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023304:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023308:	44a0      	add	r8, r4
 802330a:	e0dc      	b.n	80234c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 802330c:	1c51      	adds	r1, r2, #1
 802330e:	f040 80ce 	bne.w	80234ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023312:	4593      	cmp	fp, r2
 8023314:	f340 80cb 	ble.w	80234ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023318:	1c5a      	adds	r2, r3, #1
 802331a:	f2c0 80c8 	blt.w	80234ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802331e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023320:	4293      	cmp	r3, r2
 8023322:	f280 80c4 	bge.w	80234ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023326:	9b08      	ldr	r3, [sp, #32]
 8023328:	46c1      	mov	r9, r8
 802332a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802332e:	930d      	str	r3, [sp, #52]	; 0x34
 8023330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023332:	2b00      	cmp	r3, #0
 8023334:	dde3      	ble.n	80232fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8023336:	1428      	asrs	r0, r5, #16
 8023338:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802333c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023340:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023344:	f100 8111 	bmi.w	802356a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8023348:	f100 0c01 	add.w	ip, r0, #1
 802334c:	45e3      	cmp	fp, ip
 802334e:	f340 810e 	ble.w	802356e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023352:	2b00      	cmp	r3, #0
 8023354:	f2c0 810b 	blt.w	802356e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023358:	f103 0c01 	add.w	ip, r3, #1
 802335c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802335e:	4564      	cmp	r4, ip
 8023360:	f340 8105 	ble.w	802356e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8023364:	fb03 030a 	mla	r3, r3, sl, r0
 8023368:	0858      	lsrs	r0, r3, #1
 802336a:	07dc      	lsls	r4, r3, #31
 802336c:	5c38      	ldrb	r0, [r7, r0]
 802336e:	bf54      	ite	pl
 8023370:	f000 000f 	andpl.w	r0, r0, #15
 8023374:	1100      	asrmi	r0, r0, #4
 8023376:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802337a:	b2c0      	uxtb	r0, r0
 802337c:	2a00      	cmp	r2, #0
 802337e:	f000 80e1 	beq.w	8023544 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8023382:	f103 0e01 	add.w	lr, r3, #1
 8023386:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802338a:	f01e 0f01 	tst.w	lr, #1
 802338e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023392:	bf0c      	ite	eq
 8023394:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023398:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802339c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80233a0:	fa5f f48c 	uxtb.w	r4, ip
 80233a4:	9410      	str	r4, [sp, #64]	; 0x40
 80233a6:	b1f9      	cbz	r1, 80233e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80233a8:	4453      	add	r3, sl
 80233aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80233ae:	07dc      	lsls	r4, r3, #31
 80233b0:	f103 0301 	add.w	r3, r3, #1
 80233b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80233b8:	bf54      	ite	pl
 80233ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80233be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80233c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80233c6:	fa5f f48c 	uxtb.w	r4, ip
 80233ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80233ce:	940a      	str	r4, [sp, #40]	; 0x28
 80233d0:	07dc      	lsls	r4, r3, #31
 80233d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80233d6:	bf54      	ite	pl
 80233d8:	f00c 030f 	andpl.w	r3, ip, #15
 80233dc:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80233e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80233e4:	b2db      	uxtb	r3, r3
 80233e6:	9311      	str	r3, [sp, #68]	; 0x44
 80233e8:	b292      	uxth	r2, r2
 80233ea:	b289      	uxth	r1, r1
 80233ec:	0113      	lsls	r3, r2, #4
 80233ee:	fb02 fc01 	mul.w	ip, r2, r1
 80233f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80233f4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80233f8:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80233fc:	eba3 030c 	sub.w	r3, r3, ip
 8023400:	b289      	uxth	r1, r1
 8023402:	b29b      	uxth	r3, r3
 8023404:	ebae 0e01 	sub.w	lr, lr, r1
 8023408:	4353      	muls	r3, r2
 802340a:	fa1f fe8e 	uxth.w	lr, lr
 802340e:	fb00 320e 	mla	r2, r0, lr, r3
 8023412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023414:	fb01 2203 	mla	r2, r1, r3, r2
 8023418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802341a:	fb0c 2203 	mla	r2, ip, r3, r2
 802341e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023422:	2a00      	cmp	r2, #0
 8023424:	d039      	beq.n	802349a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023426:	4bbd      	ldr	r3, [pc, #756]	; (802371c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8023428:	6819      	ldr	r1, [r3, #0]
 802342a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802342c:	fa5f fc81 	uxtb.w	ip, r1
 8023430:	435a      	muls	r2, r3
 8023432:	1c53      	adds	r3, r2, #1
 8023434:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023438:	1212      	asrs	r2, r2, #8
 802343a:	b290      	uxth	r0, r2
 802343c:	43d2      	mvns	r2, r2
 802343e:	fb1c fc00 	smulbb	ip, ip, r0
 8023442:	b2d3      	uxtb	r3, r2
 8023444:	f899 2000 	ldrb.w	r2, [r9]
 8023448:	fb02 c203 	mla	r2, r2, r3, ip
 802344c:	b292      	uxth	r2, r2
 802344e:	f102 0c01 	add.w	ip, r2, #1
 8023452:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023456:	f899 c001 	ldrb.w	ip, [r9, #1]
 802345a:	fb1c fc03 	smulbb	ip, ip, r3
 802345e:	1212      	asrs	r2, r2, #8
 8023460:	f889 2000 	strb.w	r2, [r9]
 8023464:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023468:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802346c:	fb02 c200 	mla	r2, r2, r0, ip
 8023470:	b292      	uxth	r2, r2
 8023472:	f102 0c01 	add.w	ip, r2, #1
 8023476:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802347a:	1212      	asrs	r2, r2, #8
 802347c:	f889 2001 	strb.w	r2, [r9, #1]
 8023480:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023484:	fb12 f303 	smulbb	r3, r2, r3
 8023488:	fb01 3300 	mla	r3, r1, r0, r3
 802348c:	b29b      	uxth	r3, r3
 802348e:	1c5a      	adds	r2, r3, #1
 8023490:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023494:	121b      	asrs	r3, r3, #8
 8023496:	f889 3002 	strb.w	r3, [r9, #2]
 802349a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802349c:	f109 0903 	add.w	r9, r9, #3
 80234a0:	441d      	add	r5, r3
 80234a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80234a4:	441e      	add	r6, r3
 80234a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234a8:	3b01      	subs	r3, #1
 80234aa:	930d      	str	r3, [sp, #52]	; 0x34
 80234ac:	e740      	b.n	8023330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80234ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80234b0:	f108 0803 	add.w	r8, r8, #3
 80234b4:	441d      	add	r5, r3
 80234b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80234b8:	441e      	add	r6, r3
 80234ba:	9b08      	ldr	r3, [sp, #32]
 80234bc:	3b01      	subs	r3, #1
 80234be:	9308      	str	r3, [sp, #32]
 80234c0:	e6ef      	b.n	80232a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80234c2:	f47f aeff 	bne.w	80232c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80234c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234c8:	2b00      	cmp	r3, #0
 80234ca:	f340 8122 	ble.w	8023712 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80234ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80234d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80234d4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80234d8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80234dc:	eef0 6a48 	vmov.f32	s13, s16
 80234e0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80234e4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80234e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234ec:	ee16 5a90 	vmov	r5, s13
 80234f0:	eef0 6a68 	vmov.f32	s13, s17
 80234f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80234f8:	ee16 6a90 	vmov	r6, s13
 80234fc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023500:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023504:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023508:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802350c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023510:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023514:	ee18 2a10 	vmov	r2, s16
 8023518:	eeb0 8a47 	vmov.f32	s16, s14
 802351c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023520:	ee18 2a90 	vmov	r2, s17
 8023524:	932b      	str	r3, [sp, #172]	; 0xac
 8023526:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023528:	eef0 8a67 	vmov.f32	s17, s15
 802352c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023530:	932c      	str	r3, [sp, #176]	; 0xb0
 8023532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023536:	3b01      	subs	r3, #1
 8023538:	930c      	str	r3, [sp, #48]	; 0x30
 802353a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802353c:	bf08      	it	eq
 802353e:	4613      	moveq	r3, r2
 8023540:	9308      	str	r3, [sp, #32]
 8023542:	e6a7      	b.n	8023294 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023544:	2900      	cmp	r1, #0
 8023546:	f43f af4f 	beq.w	80233e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802354a:	4453      	add	r3, sl
 802354c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023550:	07db      	lsls	r3, r3, #31
 8023552:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023556:	bf54      	ite	pl
 8023558:	f00c 030f 	andpl.w	r3, ip, #15
 802355c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023560:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023564:	b2db      	uxtb	r3, r3
 8023566:	930a      	str	r3, [sp, #40]	; 0x28
 8023568:	e73e      	b.n	80233e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802356a:	1c44      	adds	r4, r0, #1
 802356c:	d195      	bne.n	802349a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802356e:	4583      	cmp	fp, r0
 8023570:	dd93      	ble.n	802349a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023572:	1c5c      	adds	r4, r3, #1
 8023574:	db91      	blt.n	802349a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023576:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023578:	429c      	cmp	r4, r3
 802357a:	dd8e      	ble.n	802349a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802357c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802357e:	9002      	str	r0, [sp, #8]
 8023580:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023582:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023588:	463a      	mov	r2, r7
 802358a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802358e:	e9cd b300 	strd	fp, r3, [sp]
 8023592:	4649      	mov	r1, r9
 8023594:	4653      	mov	r3, sl
 8023596:	f7ff fd61 	bl	802305c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802359a:	e77e      	b.n	802349a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802359c:	142a      	asrs	r2, r5, #16
 802359e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80235a2:	1433      	asrs	r3, r6, #16
 80235a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80235a8:	fb0a 2303 	mla	r3, sl, r3, r2
 80235ac:	085a      	lsrs	r2, r3, #1
 80235ae:	07dc      	lsls	r4, r3, #31
 80235b0:	5cba      	ldrb	r2, [r7, r2]
 80235b2:	bf54      	ite	pl
 80235b4:	f002 020f 	andpl.w	r2, r2, #15
 80235b8:	1112      	asrmi	r2, r2, #4
 80235ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80235be:	b2d2      	uxtb	r2, r2
 80235c0:	2900      	cmp	r1, #0
 80235c2:	f000 8093 	beq.w	80236ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80235c6:	1c5c      	adds	r4, r3, #1
 80235c8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80235cc:	07e4      	lsls	r4, r4, #31
 80235ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235d2:	bf54      	ite	pl
 80235d4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80235dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80235e0:	fa5f f48c 	uxtb.w	r4, ip
 80235e4:	9412      	str	r4, [sp, #72]	; 0x48
 80235e6:	b300      	cbz	r0, 802362a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80235e8:	4453      	add	r3, sl
 80235ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80235ee:	07dc      	lsls	r4, r3, #31
 80235f0:	f103 0301 	add.w	r3, r3, #1
 80235f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80235f8:	bf54      	ite	pl
 80235fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80235fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023602:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023606:	fa5f f48c 	uxtb.w	r4, ip
 802360a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802360e:	940b      	str	r4, [sp, #44]	; 0x2c
 8023610:	07dc      	lsls	r4, r3, #31
 8023612:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023616:	bf54      	ite	pl
 8023618:	f00c 0c0f 	andpl.w	ip, ip, #15
 802361c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023620:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023624:	fa5f f38c 	uxtb.w	r3, ip
 8023628:	9313      	str	r3, [sp, #76]	; 0x4c
 802362a:	b289      	uxth	r1, r1
 802362c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802362e:	b280      	uxth	r0, r0
 8023630:	fb01 f300 	mul.w	r3, r1, r0
 8023634:	0109      	lsls	r1, r1, #4
 8023636:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802363a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802363e:	1ac9      	subs	r1, r1, r3
 8023640:	b280      	uxth	r0, r0
 8023642:	b289      	uxth	r1, r1
 8023644:	ebac 0c00 	sub.w	ip, ip, r0
 8023648:	4361      	muls	r1, r4
 802364a:	fa1f fc8c 	uxth.w	ip, ip
 802364e:	fb02 120c 	mla	r2, r2, ip, r1
 8023652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023654:	fb00 2001 	mla	r0, r0, r1, r2
 8023658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802365a:	fb03 0302 	mla	r3, r3, r2, r0
 802365e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023662:	2b00      	cmp	r3, #0
 8023664:	d039      	beq.n	80236da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8023666:	4a2d      	ldr	r2, [pc, #180]	; (802371c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8023668:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802366c:	6810      	ldr	r0, [r2, #0]
 802366e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023670:	fa5f fc80 	uxtb.w	ip, r0
 8023674:	4353      	muls	r3, r2
 8023676:	1c5a      	adds	r2, r3, #1
 8023678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802367c:	121b      	asrs	r3, r3, #8
 802367e:	b29a      	uxth	r2, r3
 8023680:	43db      	mvns	r3, r3
 8023682:	fb1c fc02 	smulbb	ip, ip, r2
 8023686:	b2db      	uxtb	r3, r3
 8023688:	fb01 c103 	mla	r1, r1, r3, ip
 802368c:	b289      	uxth	r1, r1
 802368e:	f101 0c01 	add.w	ip, r1, #1
 8023692:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023696:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802369a:	fb1c fc03 	smulbb	ip, ip, r3
 802369e:	1209      	asrs	r1, r1, #8
 80236a0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80236a4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80236a8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80236ac:	fb01 c102 	mla	r1, r1, r2, ip
 80236b0:	b289      	uxth	r1, r1
 80236b2:	f101 0c01 	add.w	ip, r1, #1
 80236b6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80236ba:	1209      	asrs	r1, r1, #8
 80236bc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80236c0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80236c4:	fb11 f303 	smulbb	r3, r1, r3
 80236c8:	fb00 3002 	mla	r0, r0, r2, r3
 80236cc:	b280      	uxth	r0, r0
 80236ce:	1c42      	adds	r2, r0, #1
 80236d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80236d4:	1200      	asrs	r0, r0, #8
 80236d6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80236da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80236dc:	f10e 0e03 	add.w	lr, lr, #3
 80236e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80236e4:	441d      	add	r5, r3
 80236e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80236e8:	441e      	add	r6, r3
 80236ea:	e604      	b.n	80232f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80236ec:	2800      	cmp	r0, #0
 80236ee:	d09c      	beq.n	802362a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80236f0:	4453      	add	r3, sl
 80236f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80236f6:	07db      	lsls	r3, r3, #31
 80236f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80236fc:	bf54      	ite	pl
 80236fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023702:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023706:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802370a:	fa5f f38c 	uxtb.w	r3, ip
 802370e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023710:	e78b      	b.n	802362a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8023712:	b017      	add	sp, #92	; 0x5c
 8023714:	ecbd 8b08 	vpop	{d8-d11}
 8023718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802371c:	2000b398 	.word	0x2000b398

08023720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023724:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023728:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802372c:	2800      	cmp	r0, #0
 802372e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023732:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023736:	fb0c 0e03 	mla	lr, ip, r3, r0
 802373a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802373e:	db6b      	blt.n	8023818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023740:	4580      	cmp	r8, r0
 8023742:	dd69      	ble.n	8023818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023744:	f1bc 0f00 	cmp.w	ip, #0
 8023748:	db66      	blt.n	8023818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802374a:	45e1      	cmp	r9, ip
 802374c:	dd64      	ble.n	8023818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802374e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023752:	f01e 0f01 	tst.w	lr, #1
 8023756:	5d16      	ldrb	r6, [r2, r4]
 8023758:	bf0c      	ite	eq
 802375a:	f006 060f 	andeq.w	r6, r6, #15
 802375e:	1136      	asrne	r6, r6, #4
 8023760:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023764:	b2f6      	uxtb	r6, r6
 8023766:	f110 0a01 	adds.w	sl, r0, #1
 802376a:	d457      	bmi.n	802381c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802376c:	45d0      	cmp	r8, sl
 802376e:	dd55      	ble.n	802381c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023770:	f1bc 0f00 	cmp.w	ip, #0
 8023774:	db52      	blt.n	802381c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023776:	45e1      	cmp	r9, ip
 8023778:	dd50      	ble.n	802381c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802377a:	2f00      	cmp	r7, #0
 802377c:	f000 80a5 	beq.w	80238ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023780:	f10e 0b01 	add.w	fp, lr, #1
 8023784:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023788:	f01b 0f01 	tst.w	fp, #1
 802378c:	5d14      	ldrb	r4, [r2, r4]
 802378e:	bf0c      	ite	eq
 8023790:	f004 040f 	andeq.w	r4, r4, #15
 8023794:	1124      	asrne	r4, r4, #4
 8023796:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802379a:	b2e4      	uxtb	r4, r4
 802379c:	2d00      	cmp	r5, #0
 802379e:	f000 808f 	beq.w	80238c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80237a2:	2800      	cmp	r0, #0
 80237a4:	f10c 0c01 	add.w	ip, ip, #1
 80237a8:	db3c      	blt.n	8023824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80237aa:	4580      	cmp	r8, r0
 80237ac:	dd3a      	ble.n	8023824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80237ae:	f1bc 0f00 	cmp.w	ip, #0
 80237b2:	db37      	blt.n	8023824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80237b4:	45e1      	cmp	r9, ip
 80237b6:	dd35      	ble.n	8023824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80237b8:	eb03 0b0e 	add.w	fp, r3, lr
 80237bc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80237c0:	f01b 0f01 	tst.w	fp, #1
 80237c4:	5c10      	ldrb	r0, [r2, r0]
 80237c6:	bf0c      	ite	eq
 80237c8:	f000 000f 	andeq.w	r0, r0, #15
 80237cc:	1100      	asrne	r0, r0, #4
 80237ce:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80237d2:	b2c0      	uxtb	r0, r0
 80237d4:	f1ba 0f00 	cmp.w	sl, #0
 80237d8:	db26      	blt.n	8023828 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237da:	45d0      	cmp	r8, sl
 80237dc:	dd24      	ble.n	8023828 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237de:	f1bc 0f00 	cmp.w	ip, #0
 80237e2:	db21      	blt.n	8023828 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237e4:	45e1      	cmp	r9, ip
 80237e6:	dd1f      	ble.n	8023828 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80237e8:	b307      	cbz	r7, 802382c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80237ea:	3301      	adds	r3, #1
 80237ec:	449e      	add	lr, r3
 80237ee:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80237f2:	f01e 0f01 	tst.w	lr, #1
 80237f6:	5cd3      	ldrb	r3, [r2, r3]
 80237f8:	bf0c      	ite	eq
 80237fa:	f003 030f 	andeq.w	r3, r3, #15
 80237fe:	111b      	asrne	r3, r3, #4
 8023800:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023804:	b2db      	uxtb	r3, r3
 8023806:	2f0f      	cmp	r7, #15
 8023808:	d911      	bls.n	802382e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 802380a:	4b32      	ldr	r3, [pc, #200]	; (80238d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 802380c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023810:	4a31      	ldr	r2, [pc, #196]	; (80238d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8023812:	4832      	ldr	r0, [pc, #200]	; (80238dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8023814:	f002 f802 	bl	802581c <__assert_func>
 8023818:	2600      	movs	r6, #0
 802381a:	e7a4      	b.n	8023766 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 802381c:	2400      	movs	r4, #0
 802381e:	e7bd      	b.n	802379c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023820:	463c      	mov	r4, r7
 8023822:	e7be      	b.n	80237a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023824:	2000      	movs	r0, #0
 8023826:	e7d5      	b.n	80237d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8023828:	2300      	movs	r3, #0
 802382a:	e7ec      	b.n	8023806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 802382c:	463b      	mov	r3, r7
 802382e:	2d0f      	cmp	r5, #15
 8023830:	d8eb      	bhi.n	802380a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023832:	b2bf      	uxth	r7, r7
 8023834:	b2ad      	uxth	r5, r5
 8023836:	fb07 f205 	mul.w	r2, r7, r5
 802383a:	013f      	lsls	r7, r7, #4
 802383c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023840:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023844:	1abf      	subs	r7, r7, r2
 8023846:	b2ad      	uxth	r5, r5
 8023848:	b2bf      	uxth	r7, r7
 802384a:	ebac 0c05 	sub.w	ip, ip, r5
 802384e:	437c      	muls	r4, r7
 8023850:	fa1f fc8c 	uxth.w	ip, ip
 8023854:	fb06 440c 	mla	r4, r6, ip, r4
 8023858:	fb05 4400 	mla	r4, r5, r0, r4
 802385c:	fb02 4303 	mla	r3, r2, r3, r4
 8023860:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023864:	b353      	cbz	r3, 80238bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8023866:	4a1e      	ldr	r2, [pc, #120]	; (80238e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8023868:	7808      	ldrb	r0, [r1, #0]
 802386a:	6814      	ldr	r4, [r2, #0]
 802386c:	b29a      	uxth	r2, r3
 802386e:	43db      	mvns	r3, r3
 8023870:	b2e5      	uxtb	r5, r4
 8023872:	b2db      	uxtb	r3, r3
 8023874:	fb15 f502 	smulbb	r5, r5, r2
 8023878:	fb00 5003 	mla	r0, r0, r3, r5
 802387c:	b280      	uxth	r0, r0
 802387e:	1c45      	adds	r5, r0, #1
 8023880:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023884:	784d      	ldrb	r5, [r1, #1]
 8023886:	fb15 f503 	smulbb	r5, r5, r3
 802388a:	1200      	asrs	r0, r0, #8
 802388c:	7008      	strb	r0, [r1, #0]
 802388e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023892:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023896:	fb00 5002 	mla	r0, r0, r2, r5
 802389a:	b280      	uxth	r0, r0
 802389c:	1c45      	adds	r5, r0, #1
 802389e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80238a2:	1200      	asrs	r0, r0, #8
 80238a4:	7048      	strb	r0, [r1, #1]
 80238a6:	7888      	ldrb	r0, [r1, #2]
 80238a8:	fb10 f303 	smulbb	r3, r0, r3
 80238ac:	fb04 3202 	mla	r2, r4, r2, r3
 80238b0:	b292      	uxth	r2, r2
 80238b2:	1c53      	adds	r3, r2, #1
 80238b4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80238b8:	1212      	asrs	r2, r2, #8
 80238ba:	708a      	strb	r2, [r1, #2]
 80238bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238c0:	2f0f      	cmp	r7, #15
 80238c2:	d8a2      	bhi.n	802380a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80238c4:	462b      	mov	r3, r5
 80238c6:	4628      	mov	r0, r5
 80238c8:	e7b3      	b.n	8023832 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80238ca:	2d00      	cmp	r5, #0
 80238cc:	d1a8      	bne.n	8023820 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80238ce:	462c      	mov	r4, r5
 80238d0:	e7f8      	b.n	80238c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80238d2:	bf00      	nop
 80238d4:	0802b131 	.word	0x0802b131
 80238d8:	0802b626 	.word	0x0802b626
 80238dc:	0802b1fa 	.word	0x0802b1fa
 80238e0:	2000b398 	.word	0x2000b398

080238e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80238e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238e8:	ed2d 8b08 	vpush	{d8-d11}
 80238ec:	b095      	sub	sp, #84	; 0x54
 80238ee:	461c      	mov	r4, r3
 80238f0:	eeb0 aa40 	vmov.f32	s20, s0
 80238f4:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80238f8:	eef0 9a60 	vmov.f32	s19, s1
 80238fc:	920e      	str	r2, [sp, #56]	; 0x38
 80238fe:	eeb0 9a41 	vmov.f32	s18, s2
 8023902:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023904:	eeb0 8a62 	vmov.f32	s16, s5
 8023908:	9307      	str	r3, [sp, #28]
 802390a:	eef0 8a43 	vmov.f32	s17, s6
 802390e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8023912:	eef0 ba44 	vmov.f32	s23, s8
 8023916:	9013      	str	r0, [sp, #76]	; 0x4c
 8023918:	eeb0 ba64 	vmov.f32	s22, s9
 802391c:	9109      	str	r1, [sp, #36]	; 0x24
 802391e:	eef0 aa45 	vmov.f32	s21, s10
 8023922:	9308      	str	r3, [sp, #32]
 8023924:	6850      	ldr	r0, [r2, #4]
 8023926:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802392a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 802392e:	fb00 1803 	mla	r8, r0, r3, r1
 8023932:	6813      	ldr	r3, [r2, #0]
 8023934:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023938:	4498      	add	r8, r3
 802393a:	9b07      	ldr	r3, [sp, #28]
 802393c:	3301      	adds	r3, #1
 802393e:	f023 0301 	bic.w	r3, r3, #1
 8023942:	930b      	str	r3, [sp, #44]	; 0x2c
 8023944:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023946:	681f      	ldr	r7, [r3, #0]
 8023948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802394a:	2b00      	cmp	r3, #0
 802394c:	dc03      	bgt.n	8023956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802394e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023950:	2b00      	cmp	r3, #0
 8023952:	f340 8238 	ble.w	8023dc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023956:	2c00      	cmp	r4, #0
 8023958:	f340 8109 	ble.w	8023b6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802395c:	142a      	asrs	r2, r5, #16
 802395e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023962:	d42b      	bmi.n	80239bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023964:	1c51      	adds	r1, r2, #1
 8023966:	9807      	ldr	r0, [sp, #28]
 8023968:	4288      	cmp	r0, r1
 802396a:	dd2a      	ble.n	80239c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802396c:	2b00      	cmp	r3, #0
 802396e:	db28      	blt.n	80239c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023970:	1c59      	adds	r1, r3, #1
 8023972:	9808      	ldr	r0, [sp, #32]
 8023974:	4288      	cmp	r0, r1
 8023976:	dd24      	ble.n	80239c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023978:	1e63      	subs	r3, r4, #1
 802397a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802397c:	fb02 5203 	mla	r2, r2, r3, r5
 8023980:	1412      	asrs	r2, r2, #16
 8023982:	d429      	bmi.n	80239d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023984:	3201      	adds	r2, #1
 8023986:	9907      	ldr	r1, [sp, #28]
 8023988:	4291      	cmp	r1, r2
 802398a:	dd25      	ble.n	80239d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802398c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802398e:	fb02 6303 	mla	r3, r2, r3, r6
 8023992:	141b      	asrs	r3, r3, #16
 8023994:	d420      	bmi.n	80239d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023996:	3301      	adds	r3, #1
 8023998:	9a08      	ldr	r2, [sp, #32]
 802399a:	429a      	cmp	r2, r3
 802399c:	dd1c      	ble.n	80239d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802399e:	f108 0e03 	add.w	lr, r8, #3
 80239a2:	46a1      	mov	r9, r4
 80239a4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80239a8:	f1b9 0f00 	cmp.w	r9, #0
 80239ac:	f300 8155 	bgt.w	8023c5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80239b0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80239b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80239b8:	44a0      	add	r8, r4
 80239ba:	e0da      	b.n	8023b72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80239bc:	1c50      	adds	r0, r2, #1
 80239be:	f040 80ce 	bne.w	8023b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239c2:	9907      	ldr	r1, [sp, #28]
 80239c4:	4291      	cmp	r1, r2
 80239c6:	f340 80ca 	ble.w	8023b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239ca:	1c59      	adds	r1, r3, #1
 80239cc:	f2c0 80c7 	blt.w	8023b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239d0:	9a08      	ldr	r2, [sp, #32]
 80239d2:	4293      	cmp	r3, r2
 80239d4:	f280 80c3 	bge.w	8023b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80239d8:	46a3      	mov	fp, r4
 80239da:	46c1      	mov	r9, r8
 80239dc:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80239e0:	f1bb 0f00 	cmp.w	fp, #0
 80239e4:	dde4      	ble.n	80239b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80239e6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80239ea:	1428      	asrs	r0, r5, #16
 80239ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 80239f0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80239f4:	920a      	str	r2, [sp, #40]	; 0x28
 80239f6:	f100 8116 	bmi.w	8023c26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80239fa:	f100 0c01 	add.w	ip, r0, #1
 80239fe:	9a07      	ldr	r2, [sp, #28]
 8023a00:	4562      	cmp	r2, ip
 8023a02:	f340 8112 	ble.w	8023c2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	f2c0 810f 	blt.w	8023c2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023a0c:	f103 0c01 	add.w	ip, r3, #1
 8023a10:	9a08      	ldr	r2, [sp, #32]
 8023a12:	4562      	cmp	r2, ip
 8023a14:	f340 8109 	ble.w	8023c2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023a18:	fb03 030a 	mla	r3, r3, sl, r0
 8023a1c:	0858      	lsrs	r0, r3, #1
 8023a1e:	07da      	lsls	r2, r3, #31
 8023a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a22:	5c38      	ldrb	r0, [r7, r0]
 8023a24:	bf54      	ite	pl
 8023a26:	f000 000f 	andpl.w	r0, r0, #15
 8023a2a:	1100      	asrmi	r0, r0, #4
 8023a2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023a30:	b2c0      	uxtb	r0, r0
 8023a32:	2a00      	cmp	r2, #0
 8023a34:	f000 80dd 	beq.w	8023bf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8023a38:	f103 0e01 	add.w	lr, r3, #1
 8023a3c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023a40:	f01e 0f01 	tst.w	lr, #1
 8023a44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a48:	bf0c      	ite	eq
 8023a4a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023a4e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023a52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a56:	fa5f fc8c 	uxtb.w	ip, ip
 8023a5a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023a5e:	b301      	cbz	r1, 8023aa2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023a60:	4453      	add	r3, sl
 8023a62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a66:	07da      	lsls	r2, r3, #31
 8023a68:	f103 0301 	add.w	r3, r3, #1
 8023a6c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a70:	bf54      	ite	pl
 8023a72:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a7a:	07da      	lsls	r2, r3, #31
 8023a7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a80:	fa5f fc8c 	uxtb.w	ip, ip
 8023a84:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8023a88:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a8c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a90:	bf54      	ite	pl
 8023a92:	f00c 030f 	andpl.w	r3, ip, #15
 8023a96:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023a9a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023a9e:	b2db      	uxtb	r3, r3
 8023aa0:	9310      	str	r3, [sp, #64]	; 0x40
 8023aa2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023aa6:	b289      	uxth	r1, r1
 8023aa8:	fb02 f301 	mul.w	r3, r2, r1
 8023aac:	0112      	lsls	r2, r2, #4
 8023aae:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023ab2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8023ab6:	1ad2      	subs	r2, r2, r3
 8023ab8:	fa1f fe81 	uxth.w	lr, r1
 8023abc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023abe:	b292      	uxth	r2, r2
 8023ac0:	ebac 0c0e 	sub.w	ip, ip, lr
 8023ac4:	434a      	muls	r2, r1
 8023ac6:	fa1f fc8c 	uxth.w	ip, ip
 8023aca:	fb00 200c 	mla	r0, r0, ip, r2
 8023ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023ad0:	fb0e 0002 	mla	r0, lr, r2, r0
 8023ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023ad6:	fb03 0002 	mla	r0, r3, r2, r0
 8023ada:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023ade:	b3a8      	cbz	r0, 8023b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023ae0:	4bbb      	ldr	r3, [pc, #748]	; (8023dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023ae2:	28ff      	cmp	r0, #255	; 0xff
 8023ae4:	681b      	ldr	r3, [r3, #0]
 8023ae6:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8023aea:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8023aee:	b2db      	uxtb	r3, r3
 8023af0:	f000 8092 	beq.w	8023c18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8023af4:	b282      	uxth	r2, r0
 8023af6:	43c0      	mvns	r0, r0
 8023af8:	f899 e000 	ldrb.w	lr, [r9]
 8023afc:	fb13 f302 	smulbb	r3, r3, r2
 8023b00:	b2c0      	uxtb	r0, r0
 8023b02:	fb11 f102 	smulbb	r1, r1, r2
 8023b06:	fb0e 3300 	mla	r3, lr, r0, r3
 8023b0a:	fb1c f202 	smulbb	r2, ip, r2
 8023b0e:	b29b      	uxth	r3, r3
 8023b10:	f103 0e01 	add.w	lr, r3, #1
 8023b14:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023b18:	121b      	asrs	r3, r3, #8
 8023b1a:	f889 3000 	strb.w	r3, [r9]
 8023b1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023b22:	fb03 1100 	mla	r1, r3, r0, r1
 8023b26:	b289      	uxth	r1, r1
 8023b28:	1c4b      	adds	r3, r1, #1
 8023b2a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023b2e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023b32:	fb03 2000 	mla	r0, r3, r0, r2
 8023b36:	1209      	asrs	r1, r1, #8
 8023b38:	b280      	uxth	r0, r0
 8023b3a:	f889 1001 	strb.w	r1, [r9, #1]
 8023b3e:	f100 0c01 	add.w	ip, r0, #1
 8023b42:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8023b46:	1200      	asrs	r0, r0, #8
 8023b48:	f889 0002 	strb.w	r0, [r9, #2]
 8023b4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b4e:	f109 0903 	add.w	r9, r9, #3
 8023b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023b56:	441d      	add	r5, r3
 8023b58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b5a:	441e      	add	r6, r3
 8023b5c:	e740      	b.n	80239e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023b5e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b60:	3c01      	subs	r4, #1
 8023b62:	f108 0803 	add.w	r8, r8, #3
 8023b66:	441d      	add	r5, r3
 8023b68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b6a:	441e      	add	r6, r3
 8023b6c:	e6f3      	b.n	8023956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023b6e:	f47f af03 	bne.w	8023978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	f340 8126 	ble.w	8023dc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023b7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b80:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023b84:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023b88:	eef0 6a48 	vmov.f32	s13, s16
 8023b8c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023b90:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023b94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b98:	ee16 5a90 	vmov	r5, s13
 8023b9c:	eef0 6a68 	vmov.f32	s13, s17
 8023ba0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ba4:	ee16 6a90 	vmov	r6, s13
 8023ba8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023bac:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023bb0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023bb4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023bb8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023bbc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023bc0:	ee18 2a10 	vmov	r2, s16
 8023bc4:	eeb0 8a47 	vmov.f32	s16, s14
 8023bc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bcc:	ee18 2a90 	vmov	r2, s17
 8023bd0:	9329      	str	r3, [sp, #164]	; 0xa4
 8023bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bd4:	eef0 8a67 	vmov.f32	s17, s15
 8023bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bdc:	932a      	str	r3, [sp, #168]	; 0xa8
 8023bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023be2:	3b01      	subs	r3, #1
 8023be4:	9309      	str	r3, [sp, #36]	; 0x24
 8023be6:	bf08      	it	eq
 8023be8:	4614      	moveq	r4, r2
 8023bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bec:	bf18      	it	ne
 8023bee:	461c      	movne	r4, r3
 8023bf0:	e6aa      	b.n	8023948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023bf2:	2900      	cmp	r1, #0
 8023bf4:	f43f af55 	beq.w	8023aa2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023bf8:	4453      	add	r3, sl
 8023bfa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023bfe:	07db      	lsls	r3, r3, #31
 8023c00:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023c04:	bf54      	ite	pl
 8023c06:	f00c 030f 	andpl.w	r3, ip, #15
 8023c0a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023c0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023c12:	b2db      	uxtb	r3, r3
 8023c14:	930c      	str	r3, [sp, #48]	; 0x30
 8023c16:	e744      	b.n	8023aa2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023c18:	f889 3000 	strb.w	r3, [r9]
 8023c1c:	f889 1001 	strb.w	r1, [r9, #1]
 8023c20:	f889 c002 	strb.w	ip, [r9, #2]
 8023c24:	e792      	b.n	8023b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c26:	1c42      	adds	r2, r0, #1
 8023c28:	d190      	bne.n	8023b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c2a:	9a07      	ldr	r2, [sp, #28]
 8023c2c:	4282      	cmp	r2, r0
 8023c2e:	dd8d      	ble.n	8023b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c30:	1c5a      	adds	r2, r3, #1
 8023c32:	db8b      	blt.n	8023b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c34:	9a08      	ldr	r2, [sp, #32]
 8023c36:	429a      	cmp	r2, r3
 8023c38:	dd88      	ble.n	8023b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c3c:	9105      	str	r1, [sp, #20]
 8023c3e:	4649      	mov	r1, r9
 8023c40:	9002      	str	r0, [sp, #8]
 8023c42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023c44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023c48:	9b08      	ldr	r3, [sp, #32]
 8023c4a:	463a      	mov	r2, r7
 8023c4c:	9301      	str	r3, [sp, #4]
 8023c4e:	9b07      	ldr	r3, [sp, #28]
 8023c50:	9300      	str	r3, [sp, #0]
 8023c52:	4653      	mov	r3, sl
 8023c54:	f7ff fd64 	bl	8023720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023c58:	e778      	b.n	8023b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023c5a:	142a      	asrs	r2, r5, #16
 8023c5c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023c60:	1433      	asrs	r3, r6, #16
 8023c62:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023c66:	fb0a 2303 	mla	r3, sl, r3, r2
 8023c6a:	085a      	lsrs	r2, r3, #1
 8023c6c:	07d9      	lsls	r1, r3, #31
 8023c6e:	5cba      	ldrb	r2, [r7, r2]
 8023c70:	bf54      	ite	pl
 8023c72:	f002 020f 	andpl.w	r2, r2, #15
 8023c76:	1112      	asrmi	r2, r2, #4
 8023c78:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023c7c:	b2d2      	uxtb	r2, r2
 8023c7e:	2800      	cmp	r0, #0
 8023c80:	f000 808a 	beq.w	8023d98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023c84:	f103 0b01 	add.w	fp, r3, #1
 8023c88:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023c8c:	f01b 0f01 	tst.w	fp, #1
 8023c90:	5c79      	ldrb	r1, [r7, r1]
 8023c92:	bf0c      	ite	eq
 8023c94:	f001 010f 	andeq.w	r1, r1, #15
 8023c98:	1109      	asrne	r1, r1, #4
 8023c9a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023c9e:	b2c9      	uxtb	r1, r1
 8023ca0:	9111      	str	r1, [sp, #68]	; 0x44
 8023ca2:	f1bc 0f00 	cmp.w	ip, #0
 8023ca6:	d019      	beq.n	8023cdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023ca8:	4453      	add	r3, sl
 8023caa:	0859      	lsrs	r1, r3, #1
 8023cac:	f013 0f01 	tst.w	r3, #1
 8023cb0:	f103 0301 	add.w	r3, r3, #1
 8023cb4:	5c79      	ldrb	r1, [r7, r1]
 8023cb6:	bf0c      	ite	eq
 8023cb8:	f001 010f 	andeq.w	r1, r1, #15
 8023cbc:	1109      	asrne	r1, r1, #4
 8023cbe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023cc2:	b2c9      	uxtb	r1, r1
 8023cc4:	910d      	str	r1, [sp, #52]	; 0x34
 8023cc6:	0859      	lsrs	r1, r3, #1
 8023cc8:	07db      	lsls	r3, r3, #31
 8023cca:	5c79      	ldrb	r1, [r7, r1]
 8023ccc:	bf54      	ite	pl
 8023cce:	f001 010f 	andpl.w	r1, r1, #15
 8023cd2:	1109      	asrmi	r1, r1, #4
 8023cd4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023cd8:	b2c9      	uxtb	r1, r1
 8023cda:	9112      	str	r1, [sp, #72]	; 0x48
 8023cdc:	b280      	uxth	r0, r0
 8023cde:	fa1f fc8c 	uxth.w	ip, ip
 8023ce2:	fb00 f30c 	mul.w	r3, r0, ip
 8023ce6:	0100      	lsls	r0, r0, #4
 8023ce8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023cec:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023cf0:	1ac0      	subs	r0, r0, r3
 8023cf2:	fa1f fc8c 	uxth.w	ip, ip
 8023cf6:	b280      	uxth	r0, r0
 8023cf8:	eba1 010c 	sub.w	r1, r1, ip
 8023cfc:	fa1f fb81 	uxth.w	fp, r1
 8023d00:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023d02:	4348      	muls	r0, r1
 8023d04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023d06:	fb02 020b 	mla	r2, r2, fp, r0
 8023d0a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023d0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023d10:	fb03 c302 	mla	r3, r3, r2, ip
 8023d14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d18:	b3ab      	cbz	r3, 8023d86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023d1a:	4a2d      	ldr	r2, [pc, #180]	; (8023dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023d1c:	2bff      	cmp	r3, #255	; 0xff
 8023d1e:	6811      	ldr	r1, [r2, #0]
 8023d20:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023d24:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023d28:	b2c9      	uxtb	r1, r1
 8023d2a:	d045      	beq.n	8023db8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023d2c:	b298      	uxth	r0, r3
 8023d2e:	43db      	mvns	r3, r3
 8023d30:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023d34:	fb11 f100 	smulbb	r1, r1, r0
 8023d38:	b2db      	uxtb	r3, r3
 8023d3a:	fb1c fc00 	smulbb	ip, ip, r0
 8023d3e:	fb02 1103 	mla	r1, r2, r3, r1
 8023d42:	fb1b f000 	smulbb	r0, fp, r0
 8023d46:	b289      	uxth	r1, r1
 8023d48:	1c4a      	adds	r2, r1, #1
 8023d4a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d4e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023d52:	fb02 cc03 	mla	ip, r2, r3, ip
 8023d56:	1209      	asrs	r1, r1, #8
 8023d58:	fa1f fc8c 	uxth.w	ip, ip
 8023d5c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023d60:	f10c 0201 	add.w	r2, ip, #1
 8023d64:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023d68:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023d6c:	fb02 0303 	mla	r3, r2, r3, r0
 8023d70:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023d74:	b29b      	uxth	r3, r3
 8023d76:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023d7a:	1c5a      	adds	r2, r3, #1
 8023d7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023d80:	121b      	asrs	r3, r3, #8
 8023d82:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023d86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d88:	f10e 0e03 	add.w	lr, lr, #3
 8023d8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8023d90:	441d      	add	r5, r3
 8023d92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d94:	441e      	add	r6, r3
 8023d96:	e607      	b.n	80239a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023d98:	f1bc 0f00 	cmp.w	ip, #0
 8023d9c:	d09e      	beq.n	8023cdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023d9e:	4453      	add	r3, sl
 8023da0:	0859      	lsrs	r1, r3, #1
 8023da2:	07db      	lsls	r3, r3, #31
 8023da4:	5c79      	ldrb	r1, [r7, r1]
 8023da6:	bf54      	ite	pl
 8023da8:	f001 010f 	andpl.w	r1, r1, #15
 8023dac:	1109      	asrmi	r1, r1, #4
 8023dae:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023db2:	b2c9      	uxtb	r1, r1
 8023db4:	910d      	str	r1, [sp, #52]	; 0x34
 8023db6:	e791      	b.n	8023cdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023db8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023dbc:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023dc0:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023dc4:	e7df      	b.n	8023d86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023dc6:	b015      	add	sp, #84	; 0x54
 8023dc8:	ecbd 8b08 	vpop	{d8-d11}
 8023dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dd0:	2000b398 	.word	0x2000b398

08023dd4 <CRC_Lock>:
 8023dd4:	4a1d      	ldr	r2, [pc, #116]	; (8023e4c <CRC_Lock+0x78>)
 8023dd6:	b530      	push	{r4, r5, lr}
 8023dd8:	6813      	ldr	r3, [r2, #0]
 8023dda:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023dde:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023de2:	f023 0301 	bic.w	r3, r3, #1
 8023de6:	6013      	str	r3, [r2, #0]
 8023de8:	4b19      	ldr	r3, [pc, #100]	; (8023e50 <CRC_Lock+0x7c>)
 8023dea:	681a      	ldr	r2, [r3, #0]
 8023dec:	4022      	ands	r2, r4
 8023dee:	42aa      	cmp	r2, r5
 8023df0:	d005      	beq.n	8023dfe <CRC_Lock+0x2a>
 8023df2:	681b      	ldr	r3, [r3, #0]
 8023df4:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023df8:	4023      	ands	r3, r4
 8023dfa:	4293      	cmp	r3, r2
 8023dfc:	d11d      	bne.n	8023e3a <CRC_Lock+0x66>
 8023dfe:	4b15      	ldr	r3, [pc, #84]	; (8023e54 <CRC_Lock+0x80>)
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	b9d3      	cbnz	r3, 8023e3a <CRC_Lock+0x66>
 8023e04:	4a14      	ldr	r2, [pc, #80]	; (8023e58 <CRC_Lock+0x84>)
 8023e06:	6813      	ldr	r3, [r2, #0]
 8023e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023e0c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023e10:	d006      	beq.n	8023e20 <CRC_Lock+0x4c>
 8023e12:	6813      	ldr	r3, [r2, #0]
 8023e14:	f240 4283 	movw	r2, #1155	; 0x483
 8023e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023e1c:	4293      	cmp	r3, r2
 8023e1e:	d10c      	bne.n	8023e3a <CRC_Lock+0x66>
 8023e20:	4b0e      	ldr	r3, [pc, #56]	; (8023e5c <CRC_Lock+0x88>)
 8023e22:	2201      	movs	r2, #1
 8023e24:	601a      	str	r2, [r3, #0]
 8023e26:	681a      	ldr	r2, [r3, #0]
 8023e28:	2a00      	cmp	r2, #0
 8023e2a:	d1fc      	bne.n	8023e26 <CRC_Lock+0x52>
 8023e2c:	4b0c      	ldr	r3, [pc, #48]	; (8023e60 <CRC_Lock+0x8c>)
 8023e2e:	6018      	str	r0, [r3, #0]
 8023e30:	6818      	ldr	r0, [r3, #0]
 8023e32:	1a43      	subs	r3, r0, r1
 8023e34:	4258      	negs	r0, r3
 8023e36:	4158      	adcs	r0, r3
 8023e38:	bd30      	pop	{r4, r5, pc}
 8023e3a:	4b0a      	ldr	r3, [pc, #40]	; (8023e64 <CRC_Lock+0x90>)
 8023e3c:	2201      	movs	r2, #1
 8023e3e:	601a      	str	r2, [r3, #0]
 8023e40:	681a      	ldr	r2, [r3, #0]
 8023e42:	2a00      	cmp	r2, #0
 8023e44:	d1fc      	bne.n	8023e40 <CRC_Lock+0x6c>
 8023e46:	4b08      	ldr	r3, [pc, #32]	; (8023e68 <CRC_Lock+0x94>)
 8023e48:	e7f1      	b.n	8023e2e <CRC_Lock+0x5a>
 8023e4a:	bf00      	nop
 8023e4c:	e0002000 	.word	0xe0002000
 8023e50:	e000ed00 	.word	0xe000ed00
 8023e54:	e0042000 	.word	0xe0042000
 8023e58:	5c001000 	.word	0x5c001000
 8023e5c:	58024c08 	.word	0x58024c08
 8023e60:	58024c00 	.word	0x58024c00
 8023e64:	40023008 	.word	0x40023008
 8023e68:	40023000 	.word	0x40023000

08023e6c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023e6c:	6101      	str	r1, [r0, #16]
 8023e6e:	4770      	bx	lr

08023e70 <_ZN8touchgfx8Gestures4tickEv>:
 8023e70:	7b83      	ldrb	r3, [r0, #14]
 8023e72:	b14b      	cbz	r3, 8023e88 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023e74:	8903      	ldrh	r3, [r0, #8]
 8023e76:	3301      	adds	r3, #1
 8023e78:	b29b      	uxth	r3, r3
 8023e7a:	2b07      	cmp	r3, #7
 8023e7c:	8103      	strh	r3, [r0, #8]
 8023e7e:	bf81      	itttt	hi
 8023e80:	2300      	movhi	r3, #0
 8023e82:	8143      	strhhi	r3, [r0, #10]
 8023e84:	8183      	strhhi	r3, [r0, #12]
 8023e86:	7383      	strbhi	r3, [r0, #14]
 8023e88:	4770      	bx	lr
	...

08023e8c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023e8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023e90:	4604      	mov	r4, r0
 8023e92:	4698      	mov	r8, r3
 8023e94:	8880      	ldrh	r0, [r0, #4]
 8023e96:	4617      	mov	r7, r2
 8023e98:	4b1d      	ldr	r3, [pc, #116]	; (8023f10 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023e9a:	460e      	mov	r6, r1
 8023e9c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023ea0:	eba8 0000 	sub.w	r0, r8, r0
 8023ea4:	9300      	str	r3, [sp, #0]
 8023ea6:	2300      	movs	r3, #0
 8023ea8:	b280      	uxth	r0, r0
 8023eaa:	8aa2      	ldrh	r2, [r4, #20]
 8023eac:	f88d 3004 	strb.w	r3, [sp, #4]
 8023eb0:	b203      	sxth	r3, r0
 8023eb2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023eb6:	88e1      	ldrh	r1, [r4, #6]
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023ebe:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023ec2:	bfb8      	it	lt
 8023ec4:	4240      	neglt	r0, r0
 8023ec6:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023eca:	bfb8      	it	lt
 8023ecc:	b203      	sxthlt	r3, r0
 8023ece:	4293      	cmp	r3, r2
 8023ed0:	dc08      	bgt.n	8023ee4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023ed2:	1a69      	subs	r1, r5, r1
 8023ed4:	b289      	uxth	r1, r1
 8023ed6:	b20b      	sxth	r3, r1
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	bfbc      	itt	lt
 8023edc:	4249      	neglt	r1, r1
 8023ede:	b20b      	sxthlt	r3, r1
 8023ee0:	429a      	cmp	r2, r3
 8023ee2:	da13      	bge.n	8023f0c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023ee4:	6920      	ldr	r0, [r4, #16]
 8023ee6:	4669      	mov	r1, sp
 8023ee8:	eba8 0606 	sub.w	r6, r8, r6
 8023eec:	1bef      	subs	r7, r5, r7
 8023eee:	6803      	ldr	r3, [r0, #0]
 8023ef0:	685b      	ldr	r3, [r3, #4]
 8023ef2:	4798      	blx	r3
 8023ef4:	2300      	movs	r3, #0
 8023ef6:	2001      	movs	r0, #1
 8023ef8:	8166      	strh	r6, [r4, #10]
 8023efa:	8123      	strh	r3, [r4, #8]
 8023efc:	81a7      	strh	r7, [r4, #12]
 8023efe:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023f02:	80e5      	strh	r5, [r4, #6]
 8023f04:	73a0      	strb	r0, [r4, #14]
 8023f06:	b004      	add	sp, #16
 8023f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f0c:	2000      	movs	r0, #0
 8023f0e:	e7fa      	b.n	8023f06 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023f10:	0802a58c 	.word	0x0802a58c

08023f14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f16:	461e      	mov	r6, r3
 8023f18:	1e4b      	subs	r3, r1, #1
 8023f1a:	b085      	sub	sp, #20
 8023f1c:	4604      	mov	r4, r0
 8023f1e:	2b01      	cmp	r3, #1
 8023f20:	460d      	mov	r5, r1
 8023f22:	4617      	mov	r7, r2
 8023f24:	d84b      	bhi.n	8023fbe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023f26:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023f2a:	1cd3      	adds	r3, r2, #3
 8023f2c:	b29b      	uxth	r3, r3
 8023f2e:	2b06      	cmp	r3, #6
 8023f30:	d916      	bls.n	8023f60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023f32:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023fcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023f36:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023f3a:	f8cd c004 	str.w	ip, [sp, #4]
 8023f3e:	f04f 0c00 	mov.w	ip, #0
 8023f42:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023f46:	6900      	ldr	r0, [r0, #16]
 8023f48:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023f4c:	a901      	add	r1, sp, #4
 8023f4e:	f88d c008 	strb.w	ip, [sp, #8]
 8023f52:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023f56:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f5a:	6803      	ldr	r3, [r0, #0]
 8023f5c:	689b      	ldr	r3, [r3, #8]
 8023f5e:	4798      	blx	r3
 8023f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f64:	1cd3      	adds	r3, r2, #3
 8023f66:	b29b      	uxth	r3, r3
 8023f68:	2b06      	cmp	r3, #6
 8023f6a:	d916      	bls.n	8023f9a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023f6c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023fcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023f70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023f74:	f8cd c004 	str.w	ip, [sp, #4]
 8023f78:	f04f 0c01 	mov.w	ip, #1
 8023f7c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023f80:	6920      	ldr	r0, [r4, #16]
 8023f82:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023f86:	a901      	add	r1, sp, #4
 8023f88:	f88d c008 	strb.w	ip, [sp, #8]
 8023f8c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023f90:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f94:	6803      	ldr	r3, [r0, #0]
 8023f96:	689b      	ldr	r3, [r3, #8]
 8023f98:	4798      	blx	r3
 8023f9a:	4b0b      	ldr	r3, [pc, #44]	; (8023fc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023f9c:	a901      	add	r1, sp, #4
 8023f9e:	6920      	ldr	r0, [r4, #16]
 8023fa0:	9301      	str	r3, [sp, #4]
 8023fa2:	2300      	movs	r3, #0
 8023fa4:	f88d 5008 	strb.w	r5, [sp, #8]
 8023fa8:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023fac:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023fb0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023fb4:	6803      	ldr	r3, [r0, #0]
 8023fb6:	681b      	ldr	r3, [r3, #0]
 8023fb8:	4798      	blx	r3
 8023fba:	b005      	add	sp, #20
 8023fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023fbe:	2900      	cmp	r1, #0
 8023fc0:	d1eb      	bne.n	8023f9a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023fc2:	80a2      	strh	r2, [r4, #4]
 8023fc4:	80c6      	strh	r6, [r0, #6]
 8023fc6:	e7e8      	b.n	8023f9a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023fc8:	0802a578 	.word	0x0802a578
 8023fcc:	0802a5a0 	.word	0x0802a5a0

08023fd0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8023fd0:	10c9      	asrs	r1, r1, #3
 8023fd2:	2900      	cmp	r1, #0
 8023fd4:	bfb8      	it	lt
 8023fd6:	4249      	neglt	r1, r1
 8023fd8:	2801      	cmp	r0, #1
 8023fda:	d108      	bne.n	8023fee <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8023fdc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023fe0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023fe4:	4601      	mov	r1, r0
 8023fe6:	dd02      	ble.n	8023fee <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8023fe8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023fec:	4770      	bx	lr
 8023fee:	29ff      	cmp	r1, #255	; 0xff
 8023ff0:	bfa8      	it	ge
 8023ff2:	21ff      	movge	r1, #255	; 0xff
 8023ff4:	4608      	mov	r0, r1
 8023ff6:	4770      	bx	lr

08023ff8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ffc:	688c      	ldr	r4, [r1, #8]
 8023ffe:	b087      	sub	sp, #28
 8024000:	4607      	mov	r7, r0
 8024002:	2c00      	cmp	r4, #0
 8024004:	db2b      	blt.n	802405e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024006:	6803      	ldr	r3, [r0, #0]
 8024008:	691a      	ldr	r2, [r3, #16]
 802400a:	42a2      	cmp	r2, r4
 802400c:	dd27      	ble.n	802405e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802400e:	685a      	ldr	r2, [r3, #4]
 8024010:	695e      	ldr	r6, [r3, #20]
 8024012:	68cd      	ldr	r5, [r1, #12]
 8024014:	fb06 2604 	mla	r6, r6, r4, r2
 8024018:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802401c:	698a      	ldr	r2, [r1, #24]
 802401e:	f893 a008 	ldrb.w	sl, [r3, #8]
 8024022:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024026:	9205      	str	r2, [sp, #20]
 8024028:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802402c:	9b05      	ldr	r3, [sp, #20]
 802402e:	6839      	ldr	r1, [r7, #0]
 8024030:	eb03 0c02 	add.w	ip, r3, r2
 8024034:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024038:	68c9      	ldr	r1, [r1, #12]
 802403a:	1898      	adds	r0, r3, r2
 802403c:	4288      	cmp	r0, r1
 802403e:	db02      	blt.n	8024046 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024040:	1a8b      	subs	r3, r1, r2
 8024042:	2b00      	cmp	r3, #0
 8024044:	dd09      	ble.n	802405a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8024046:	6878      	ldr	r0, [r7, #4]
 8024048:	6801      	ldr	r1, [r0, #0]
 802404a:	9400      	str	r4, [sp, #0]
 802404c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024050:	4653      	mov	r3, sl
 8024052:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8024056:	4631      	mov	r1, r6
 8024058:	47d8      	blx	fp
 802405a:	3d01      	subs	r5, #1
 802405c:	d1e4      	bne.n	8024028 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802405e:	b007      	add	sp, #28
 8024060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024064 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024064:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8024068:	b90b      	cbnz	r3, 802406e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802406a:	f001 b970 	b.w	802534e <_ZN8touchgfx7Outline6lineToEii>
 802406e:	4770      	bx	lr

08024070 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024074:	4604      	mov	r4, r0
 8024076:	2600      	movs	r6, #0
 8024078:	4b8e      	ldr	r3, [pc, #568]	; (80242b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802407a:	f100 0518 	add.w	r5, r0, #24
 802407e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8024082:	b086      	sub	sp, #24
 8024084:	4690      	mov	r8, r2
 8024086:	e9c0 3100 	strd	r3, r1, [r0]
 802408a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802408e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8024092:	4628      	mov	r0, r5
 8024094:	f001 fb7a 	bl	802578c <_ZN8touchgfx15RenderingBufferC1Ev>
 8024098:	4638      	mov	r0, r7
 802409a:	f000 fb41 	bl	8024720 <_ZN8touchgfx7OutlineC1Ev>
 802409e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80240a2:	f001 fb1f 	bl	80256e4 <_ZN8touchgfx8ScanlineC1Ev>
 80240a6:	2301      	movs	r3, #1
 80240a8:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80240ac:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80240b0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80240b4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80240b8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80240bc:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 80240c0:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 80240c4:	f7f4 fa1c 	bl	8018500 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80240c8:	b928      	cbnz	r0, 80240d6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80240ca:	4b7b      	ldr	r3, [pc, #492]	; (80242b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80240cc:	2118      	movs	r1, #24
 80240ce:	4a7b      	ldr	r2, [pc, #492]	; (80242bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80240d0:	487b      	ldr	r0, [pc, #492]	; (80242c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80240d2:	f001 fba3 	bl	802581c <__assert_func>
 80240d6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80240da:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80240de:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80240e2:	4410      	add	r0, r2
 80240e4:	9602      	str	r6, [sp, #8]
 80240e6:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80240ea:	b280      	uxth	r0, r0
 80240ec:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80240f0:	fa0f fa80 	sxth.w	sl, r0
 80240f4:	f1ba 0f00 	cmp.w	sl, #0
 80240f8:	dd70      	ble.n	80241dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240fa:	4591      	cmp	r9, r2
 80240fc:	dd6e      	ble.n	80241dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80240fe:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024102:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8024106:	440b      	add	r3, r1
 8024108:	b29b      	uxth	r3, r3
 802410a:	b21e      	sxth	r6, r3
 802410c:	2e00      	cmp	r6, #0
 802410e:	dd65      	ble.n	80241dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024110:	458e      	cmp	lr, r1
 8024112:	dd63      	ble.n	80241dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8024114:	45d1      	cmp	r9, sl
 8024116:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802411a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802411e:	bfb8      	it	lt
 8024120:	fa1f f089 	uxthlt.w	r0, r9
 8024124:	45b6      	cmp	lr, r6
 8024126:	f8ad 2008 	strh.w	r2, [sp, #8]
 802412a:	bfb8      	it	lt
 802412c:	fa1f f38e 	uxthlt.w	r3, lr
 8024130:	1a80      	subs	r0, r0, r2
 8024132:	f8ad 100a 	strh.w	r1, [sp, #10]
 8024136:	1a5b      	subs	r3, r3, r1
 8024138:	f8ad 000c 	strh.w	r0, [sp, #12]
 802413c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024140:	f10d 0808 	add.w	r8, sp, #8
 8024144:	ae04      	add	r6, sp, #16
 8024146:	e898 0003 	ldmia.w	r8, {r0, r1}
 802414a:	e886 0003 	stmia.w	r6, {r0, r1}
 802414e:	f8dc 3000 	ldr.w	r3, [ip]
 8024152:	4660      	mov	r0, ip
 8024154:	4631      	mov	r1, r6
 8024156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024158:	4798      	blx	r3
 802415a:	6861      	ldr	r1, [r4, #4]
 802415c:	4640      	mov	r0, r8
 802415e:	3104      	adds	r1, #4
 8024160:	f7f5 f83a 	bl	80191d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024164:	4630      	mov	r0, r6
 8024166:	f7f5 f84f 	bl	8019208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802416a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802416e:	f7f4 f957 	bl	8018420 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024172:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8024176:	4638      	mov	r0, r7
 8024178:	f000 faae 	bl	80246d8 <_ZN8touchgfx7Outline5resetEv>
 802417c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024180:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024184:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8024188:	015b      	lsls	r3, r3, #5
 802418a:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802418e:	0152      	lsls	r2, r2, #5
 8024190:	60e3      	str	r3, [r4, #12]
 8024192:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8024196:	60a2      	str	r2, [r4, #8]
 8024198:	015b      	lsls	r3, r3, #5
 802419a:	6123      	str	r3, [r4, #16]
 802419c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80241a0:	015b      	lsls	r3, r3, #5
 80241a2:	6163      	str	r3, [r4, #20]
 80241a4:	4b47      	ldr	r3, [pc, #284]	; (80242c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80241a6:	6818      	ldr	r0, [r3, #0]
 80241a8:	6803      	ldr	r3, [r0, #0]
 80241aa:	6a1b      	ldr	r3, [r3, #32]
 80241ac:	4798      	blx	r3
 80241ae:	4606      	mov	r6, r0
 80241b0:	f7e8 fad6 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80241b4:	6803      	ldr	r3, [r0, #0]
 80241b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80241b8:	4798      	blx	r3
 80241ba:	4607      	mov	r7, r0
 80241bc:	f7e8 fad0 	bl	800c760 <_ZN8touchgfx3HAL3lcdEv>
 80241c0:	6803      	ldr	r3, [r0, #0]
 80241c2:	6a1b      	ldr	r3, [r3, #32]
 80241c4:	4798      	blx	r3
 80241c6:	280c      	cmp	r0, #12
 80241c8:	d854      	bhi.n	8024274 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80241ca:	e8df f000 	tbb	[pc, r0]
 80241ce:	554b      	.short	0x554b
 80241d0:	2b6e0a66 	.word	0x2b6e0a66
 80241d4:	5f5f5f3b 	.word	0x5f5f5f3b
 80241d8:	5f5f      	.short	0x5f5f
 80241da:	6e          	.byte	0x6e
 80241db:	00          	.byte	0x00
 80241dc:	2300      	movs	r3, #0
 80241de:	9303      	str	r3, [sp, #12]
 80241e0:	e7ae      	b.n	8024140 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80241e2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80241e6:	2108      	movs	r1, #8
 80241e8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80241ec:	fb92 f1f1 	sdiv	r1, r2, r1
 80241f0:	fb07 1303 	mla	r3, r7, r3, r1
 80241f4:	441e      	add	r6, r3
 80241f6:	4253      	negs	r3, r2
 80241f8:	f002 0207 	and.w	r2, r2, #7
 80241fc:	f003 0307 	and.w	r3, r3, #7
 8024200:	bf58      	it	pl
 8024202:	425a      	negpl	r2, r3
 8024204:	b2d2      	uxtb	r2, r2
 8024206:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802420a:	4628      	mov	r0, r5
 802420c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024210:	6721      	str	r1, [r4, #112]	; 0x70
 8024212:	e9cd 1700 	strd	r1, r7, [sp]
 8024216:	4631      	mov	r1, r6
 8024218:	f001 fac4 	bl	80257a4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802421c:	4620      	mov	r0, r4
 802421e:	b006      	add	sp, #24
 8024220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024224:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024228:	2104      	movs	r1, #4
 802422a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802422e:	fb92 f1f1 	sdiv	r1, r2, r1
 8024232:	fb07 1303 	mla	r3, r7, r3, r1
 8024236:	441e      	add	r6, r3
 8024238:	4253      	negs	r3, r2
 802423a:	f002 0203 	and.w	r2, r2, #3
 802423e:	f003 0303 	and.w	r3, r3, #3
 8024242:	e7dd      	b.n	8024200 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8024244:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024248:	2102      	movs	r1, #2
 802424a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802424e:	2a00      	cmp	r2, #0
 8024250:	fb92 f1f1 	sdiv	r1, r2, r1
 8024254:	f002 0201 	and.w	r2, r2, #1
 8024258:	fb07 1303 	mla	r3, r7, r3, r1
 802425c:	bfb8      	it	lt
 802425e:	4252      	neglt	r2, r2
 8024260:	441e      	add	r6, r3
 8024262:	e7cf      	b.n	8024204 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024264:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024268:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802426c:	437b      	muls	r3, r7
 802426e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024272:	441e      	add	r6, r3
 8024274:	2200      	movs	r2, #0
 8024276:	e7c6      	b.n	8024206 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8024278:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802427c:	2103      	movs	r1, #3
 802427e:	fb07 f203 	mul.w	r2, r7, r3
 8024282:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8024286:	fb13 2301 	smlabb	r3, r3, r1, r2
 802428a:	e7f2      	b.n	8024272 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802428c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024290:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024294:	fb07 2303 	mla	r3, r7, r3, r2
 8024298:	e7eb      	b.n	8024272 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802429a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802429e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80242a2:	437b      	muls	r3, r7
 80242a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80242a8:	e7e3      	b.n	8024272 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80242aa:	4b07      	ldr	r3, [pc, #28]	; (80242c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80242ac:	2156      	movs	r1, #86	; 0x56
 80242ae:	4a03      	ldr	r2, [pc, #12]	; (80242bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80242b0:	e70e      	b.n	80240d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80242b2:	bf00      	nop
 80242b4:	0802b94c 	.word	0x0802b94c
 80242b8:	0802b896 	.word	0x0802b896
 80242bc:	0802b954 	.word	0x0802b954
 80242c0:	0802b8f2 	.word	0x0802b8f2
 80242c4:	2000b370 	.word	0x2000b370
 80242c8:	0802b926 	.word	0x0802b926

080242cc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80242cc:	6812      	ldr	r2, [r2, #0]
 80242ce:	2a00      	cmp	r2, #0
 80242d0:	db0b      	blt.n	80242ea <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80242d2:	9800      	ldr	r0, [sp, #0]
 80242d4:	6800      	ldr	r0, [r0, #0]
 80242d6:	4290      	cmp	r0, r2
 80242d8:	bfd4      	ite	le
 80242da:	2002      	movle	r0, #2
 80242dc:	2000      	movgt	r0, #0
 80242de:	680a      	ldr	r2, [r1, #0]
 80242e0:	2a00      	cmp	r2, #0
 80242e2:	da04      	bge.n	80242ee <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80242e4:	f040 0004 	orr.w	r0, r0, #4
 80242e8:	4770      	bx	lr
 80242ea:	2001      	movs	r0, #1
 80242ec:	e7f7      	b.n	80242de <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80242ee:	681b      	ldr	r3, [r3, #0]
 80242f0:	4293      	cmp	r3, r2
 80242f2:	bfd8      	it	le
 80242f4:	f040 0008 	orrle.w	r0, r0, #8
 80242f8:	4770      	bx	lr
	...

080242fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80242fc:	4b07      	ldr	r3, [pc, #28]	; (802431c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80242fe:	b510      	push	{r4, lr}
 8024300:	781b      	ldrb	r3, [r3, #0]
 8024302:	2b01      	cmp	r3, #1
 8024304:	d108      	bne.n	8024318 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8024306:	6843      	ldr	r3, [r0, #4]
 8024308:	6814      	ldr	r4, [r2, #0]
 802430a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802430e:	680b      	ldr	r3, [r1, #0]
 8024310:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024314:	6013      	str	r3, [r2, #0]
 8024316:	600c      	str	r4, [r1, #0]
 8024318:	bd10      	pop	{r4, pc}
 802431a:	bf00      	nop
 802431c:	2000b368 	.word	0x2000b368

08024320 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024322:	b085      	sub	sp, #20
 8024324:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024328:	4604      	mov	r4, r0
 802432a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802432e:	b33b      	cbz	r3, 8024380 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024330:	aa02      	add	r2, sp, #8
 8024332:	a903      	add	r1, sp, #12
 8024334:	f7ff ffe2 	bl	80242fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024338:	68a3      	ldr	r3, [r4, #8]
 802433a:	9e03      	ldr	r6, [sp, #12]
 802433c:	aa02      	add	r2, sp, #8
 802433e:	9f02      	ldr	r7, [sp, #8]
 8024340:	a903      	add	r1, sp, #12
 8024342:	1af6      	subs	r6, r6, r3
 8024344:	68e3      	ldr	r3, [r4, #12]
 8024346:	4620      	mov	r0, r4
 8024348:	1aff      	subs	r7, r7, r3
 802434a:	f104 0314 	add.w	r3, r4, #20
 802434e:	9603      	str	r6, [sp, #12]
 8024350:	9300      	str	r3, [sp, #0]
 8024352:	f104 0310 	add.w	r3, r4, #16
 8024356:	9702      	str	r7, [sp, #8]
 8024358:	f7ff ffb8 	bl	80242cc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802435c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8024360:	4605      	mov	r5, r0
 8024362:	b97b      	cbnz	r3, 8024384 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024364:	463a      	mov	r2, r7
 8024366:	4631      	mov	r1, r6
 8024368:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802436c:	f7ff fe7a 	bl	8024064 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024370:	9b03      	ldr	r3, [sp, #12]
 8024372:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8024376:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802437a:	9b02      	ldr	r3, [sp, #8]
 802437c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8024380:	b005      	add	sp, #20
 8024382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024384:	b110      	cbz	r0, 802438c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8024386:	ea13 0200 	ands.w	r2, r3, r0
 802438a:	d11c      	bne.n	80243c6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802438c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8024390:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8024394:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8024398:	b188      	cbz	r0, 80243be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802439a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802439e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80243a2:	b913      	cbnz	r3, 80243aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80243a4:	4630      	mov	r0, r6
 80243a6:	f001 f802 	bl	80253ae <_ZN8touchgfx7Outline6moveToEii>
 80243aa:	2300      	movs	r3, #0
 80243ac:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80243b0:	2301      	movs	r3, #1
 80243b2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80243b6:	4630      	mov	r0, r6
 80243b8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80243bc:	e7d6      	b.n	802436c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80243be:	4630      	mov	r0, r6
 80243c0:	f7ff fe50 	bl	8024064 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243c4:	e7f7      	b.n	80243b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80243c6:	4615      	mov	r5, r2
 80243c8:	e7d2      	b.n	8024370 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080243ca <_ZN8touchgfx6Canvas5closeEv>:
 80243ca:	b538      	push	{r3, r4, r5, lr}
 80243cc:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80243d0:	4604      	mov	r4, r0
 80243d2:	b993      	cbnz	r3, 80243fa <_ZN8touchgfx6Canvas5closeEv+0x30>
 80243d4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80243d8:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 80243dc:	4213      	tst	r3, r2
 80243de:	d10c      	bne.n	80243fa <_ZN8touchgfx6Canvas5closeEv+0x30>
 80243e0:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80243e4:	b123      	cbz	r3, 80243f0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80243e6:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 80243ea:	4628      	mov	r0, r5
 80243ec:	f7ff fe3a 	bl	8024064 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243f0:	4628      	mov	r0, r5
 80243f2:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 80243f6:	f7ff fe35 	bl	8024064 <_ZN8touchgfx10Rasterizer6lineToEii>
 80243fa:	2300      	movs	r3, #0
 80243fc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024400:	bd38      	pop	{r3, r4, r5, pc}

08024402 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024404:	b085      	sub	sp, #20
 8024406:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802440a:	4604      	mov	r4, r0
 802440c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024410:	b353      	cbz	r3, 8024468 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024412:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8024416:	b90b      	cbnz	r3, 802441c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8024418:	f7ff ffd7 	bl	80243ca <_ZN8touchgfx6Canvas5closeEv>
 802441c:	aa02      	add	r2, sp, #8
 802441e:	a903      	add	r1, sp, #12
 8024420:	4620      	mov	r0, r4
 8024422:	f7ff ff6b 	bl	80242fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024426:	68a3      	ldr	r3, [r4, #8]
 8024428:	9d03      	ldr	r5, [sp, #12]
 802442a:	aa02      	add	r2, sp, #8
 802442c:	9e02      	ldr	r6, [sp, #8]
 802442e:	a903      	add	r1, sp, #12
 8024430:	1aed      	subs	r5, r5, r3
 8024432:	68e3      	ldr	r3, [r4, #12]
 8024434:	4620      	mov	r0, r4
 8024436:	1af6      	subs	r6, r6, r3
 8024438:	f104 0314 	add.w	r3, r4, #20
 802443c:	9503      	str	r5, [sp, #12]
 802443e:	9300      	str	r3, [sp, #0]
 8024440:	f104 0310 	add.w	r3, r4, #16
 8024444:	9602      	str	r6, [sp, #8]
 8024446:	f7ff ff41 	bl	80242cc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802444a:	4607      	mov	r7, r0
 802444c:	b170      	cbz	r0, 802446c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802444e:	2301      	movs	r3, #1
 8024450:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024454:	9a03      	ldr	r2, [sp, #12]
 8024456:	9b02      	ldr	r3, [sp, #8]
 8024458:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802445c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8024460:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8024464:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8024468:	b005      	add	sp, #20
 802446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802446c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024470:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8024474:	b92b      	cbnz	r3, 8024482 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8024476:	4632      	mov	r2, r6
 8024478:	4629      	mov	r1, r5
 802447a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802447e:	f000 ff96 	bl	80253ae <_ZN8touchgfx7Outline6moveToEii>
 8024482:	2300      	movs	r3, #0
 8024484:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024488:	2301      	movs	r3, #1
 802448a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802448e:	e7e1      	b.n	8024454 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024490 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024494:	4604      	mov	r4, r0
 8024496:	b087      	sub	sp, #28
 8024498:	9105      	str	r1, [sp, #20]
 802449a:	f001 f8cc 	bl	8025636 <_ZN8touchgfx7Outline8getCellsEv>
 802449e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80244a2:	4605      	mov	r5, r0
 80244a4:	f1b9 0f00 	cmp.w	r9, #0
 80244a8:	d103      	bne.n	80244b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80244aa:	2001      	movs	r0, #1
 80244ac:	b007      	add	sp, #28
 80244ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244b2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80244b6:	2e00      	cmp	r6, #0
 80244b8:	d139      	bne.n	802452e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80244ba:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80244be:	f105 0708 	add.w	r7, r5, #8
 80244c2:	4640      	mov	r0, r8
 80244c4:	f001 f8f9 	bl	80256ba <_ZN8touchgfx8Scanline5resetEv>
 80244c8:	f109 33ff 	add.w	r3, r9, #4294967295
 80244cc:	9303      	str	r3, [sp, #12]
 80244ce:	f9b5 b000 	ldrsh.w	fp, [r5]
 80244d2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80244d6:	46da      	mov	sl, fp
 80244d8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80244dc:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80244e0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80244e4:	9b03      	ldr	r3, [sp, #12]
 80244e6:	4416      	add	r6, r2
 80244e8:	9504      	str	r5, [sp, #16]
 80244ea:	463d      	mov	r5, r7
 80244ec:	3b01      	subs	r3, #1
 80244ee:	9303      	str	r3, [sp, #12]
 80244f0:	3301      	adds	r3, #1
 80244f2:	d01e      	beq.n	8024532 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80244f4:	3708      	adds	r7, #8
 80244f6:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80244fa:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80244fe:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024502:	4290      	cmp	r0, r2
 8024504:	d11e      	bne.n	8024544 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8024506:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802450a:	4411      	add	r1, r2
 802450c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024510:	e7e8      	b.n	80244e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024512:	1c91      	adds	r1, r2, #2
 8024514:	f04f 0301 	mov.w	r3, #1
 8024518:	65e1      	str	r1, [r4, #92]	; 0x5c
 802451a:	8053      	strh	r3, [r2, #2]
 802451c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802451e:	1c91      	adds	r1, r2, #2
 8024520:	65a1      	str	r1, [r4, #88]	; 0x58
 8024522:	f8a2 b002 	strh.w	fp, [r2, #2]
 8024526:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024528:	3201      	adds	r2, #1
 802452a:	6562      	str	r2, [r4, #84]	; 0x54
 802452c:	e03a      	b.n	80245a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802452e:	2000      	movs	r0, #0
 8024530:	e7bc      	b.n	80244ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024532:	b951      	cbnz	r1, 802454a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024534:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024536:	2b00      	cmp	r3, #0
 8024538:	d0b7      	beq.n	80244aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802453a:	4641      	mov	r1, r8
 802453c:	9805      	ldr	r0, [sp, #20]
 802453e:	f7ff fd5b 	bl	8023ff8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024542:	e7b2      	b.n	80244aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024544:	2900      	cmp	r1, #0
 8024546:	d035      	beq.n	80245b4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8024548:	9504      	str	r5, [sp, #16]
 802454a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802454e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024552:	f7ff fd3d 	bl	8023fd0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 8024556:	4605      	mov	r5, r0
 8024558:	b330      	cbz	r0, 80245a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802455a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802455c:	b182      	cbz	r2, 8024580 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802455e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024560:	454a      	cmp	r2, r9
 8024562:	d00d      	beq.n	8024580 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024564:	4641      	mov	r1, r8
 8024566:	9805      	ldr	r0, [sp, #20]
 8024568:	f7ff fd46 	bl	8023ff8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802456c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024570:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024572:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8024576:	65e2      	str	r2, [r4, #92]	; 0x5c
 8024578:	2300      	movs	r3, #0
 802457a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802457c:	6563      	str	r3, [r4, #84]	; 0x54
 802457e:	65a2      	str	r2, [r4, #88]	; 0x58
 8024580:	f1bb 0f00 	cmp.w	fp, #0
 8024584:	db10      	blt.n	80245a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024586:	f7f3 ffc9 	bl	801851c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802458a:	4583      	cmp	fp, r0
 802458c:	d20c      	bcs.n	80245a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802458e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024590:	f802 500b 	strb.w	r5, [r2, fp]
 8024594:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8024596:	3201      	adds	r2, #1
 8024598:	455a      	cmp	r2, fp
 802459a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802459c:	d1b9      	bne.n	8024512 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802459e:	8811      	ldrh	r1, [r2, #0]
 80245a0:	3101      	adds	r1, #1
 80245a2:	8011      	strh	r1, [r2, #0]
 80245a4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80245a8:	9b03      	ldr	r3, [sp, #12]
 80245aa:	3301      	adds	r3, #1
 80245ac:	d0c2      	beq.n	8024534 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80245ae:	f10b 0a01 	add.w	sl, fp, #1
 80245b2:	9d04      	ldr	r5, [sp, #16]
 80245b4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80245b8:	4553      	cmp	r3, sl
 80245ba:	dd88      	ble.n	80244ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80245bc:	01b1      	lsls	r1, r6, #6
 80245be:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80245c2:	f7ff fd05 	bl	8023fd0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80245c6:	4683      	mov	fp, r0
 80245c8:	2800      	cmp	r0, #0
 80245ca:	d080      	beq.n	80244ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80245cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80245ce:	b183      	cbz	r3, 80245f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80245d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80245d2:	454b      	cmp	r3, r9
 80245d4:	d00d      	beq.n	80245f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80245d6:	4641      	mov	r1, r8
 80245d8:	9805      	ldr	r0, [sp, #20]
 80245da:	f7ff fd0d 	bl	8023ff8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80245de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80245e2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80245e6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80245e8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80245ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80245ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80245ee:	2300      	movs	r3, #0
 80245f0:	6563      	str	r3, [r4, #84]	; 0x54
 80245f2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80245f6:	464a      	mov	r2, r9
 80245f8:	f8cd b000 	str.w	fp, [sp]
 80245fc:	4651      	mov	r1, sl
 80245fe:	eba3 030a 	sub.w	r3, r3, sl
 8024602:	4640      	mov	r0, r8
 8024604:	f001 f880 	bl	8025708 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8024608:	e761      	b.n	80244ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802460a <_ZN8touchgfx6Canvas6renderEv>:
 802460a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802460c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024610:	4604      	mov	r4, r0
 8024612:	b913      	cbnz	r3, 802461a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8024614:	2001      	movs	r0, #1
 8024616:	b003      	add	sp, #12
 8024618:	bd30      	pop	{r4, r5, pc}
 802461a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802461e:	2b00      	cmp	r3, #0
 8024620:	d12e      	bne.n	8024680 <_ZN8touchgfx6Canvas6renderEv+0x76>
 8024622:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8024626:	2b00      	cmp	r3, #0
 8024628:	d0f4      	beq.n	8024614 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802462a:	6840      	ldr	r0, [r0, #4]
 802462c:	6803      	ldr	r3, [r0, #0]
 802462e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024630:	4798      	blx	r3
 8024632:	2800      	cmp	r0, #0
 8024634:	d0ee      	beq.n	8024614 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8024636:	4620      	mov	r0, r4
 8024638:	f7ff fec7 	bl	80243ca <_ZN8touchgfx6Canvas5closeEv>
 802463c:	6860      	ldr	r0, [r4, #4]
 802463e:	6803      	ldr	r3, [r0, #0]
 8024640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024642:	4798      	blx	r3
 8024644:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8024648:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802464c:	8082      	strh	r2, [r0, #4]
 802464e:	80c3      	strh	r3, [r0, #6]
 8024650:	6860      	ldr	r0, [r4, #4]
 8024652:	6803      	ldr	r3, [r0, #0]
 8024654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024656:	4798      	blx	r3
 8024658:	4605      	mov	r5, r0
 802465a:	6860      	ldr	r0, [r4, #4]
 802465c:	6803      	ldr	r3, [r0, #0]
 802465e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024660:	4798      	blx	r3
 8024662:	7228      	strb	r0, [r5, #8]
 8024664:	6860      	ldr	r0, [r4, #4]
 8024666:	6803      	ldr	r3, [r0, #0]
 8024668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802466a:	4798      	blx	r3
 802466c:	f104 0318 	add.w	r3, r4, #24
 8024670:	4669      	mov	r1, sp
 8024672:	e9cd 3000 	strd	r3, r0, [sp]
 8024676:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802467a:	f7ff ff09 	bl	8024490 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802467e:	e7ca      	b.n	8024616 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8024680:	2000      	movs	r0, #0
 8024682:	e7c8      	b.n	8024616 <_ZN8touchgfx6Canvas6renderEv+0xc>

08024684 <_ZN8touchgfx6CanvasD1Ev>:
 8024684:	b538      	push	{r3, r4, r5, lr}
 8024686:	4605      	mov	r5, r0
 8024688:	4b08      	ldr	r3, [pc, #32]	; (80246ac <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802468a:	4604      	mov	r4, r0
 802468c:	f845 3b30 	str.w	r3, [r5], #48
 8024690:	4b07      	ldr	r3, [pc, #28]	; (80246b0 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8024692:	6818      	ldr	r0, [r3, #0]
 8024694:	6803      	ldr	r3, [r0, #0]
 8024696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024698:	4798      	blx	r3
 802469a:	4628      	mov	r0, r5
 802469c:	f000 f814 	bl	80246c8 <_ZN8touchgfx7OutlineD1Ev>
 80246a0:	f104 0018 	add.w	r0, r4, #24
 80246a4:	f001 f869 	bl	802577a <_ZN8touchgfx15RenderingBufferD1Ev>
 80246a8:	4620      	mov	r0, r4
 80246aa:	bd38      	pop	{r3, r4, r5, pc}
 80246ac:	0802b94c 	.word	0x0802b94c
 80246b0:	2000b370 	.word	0x2000b370

080246b4 <_ZN8touchgfx6CanvasD0Ev>:
 80246b4:	b510      	push	{r4, lr}
 80246b6:	4604      	mov	r4, r0
 80246b8:	f7ff ffe4 	bl	8024684 <_ZN8touchgfx6CanvasD1Ev>
 80246bc:	21bc      	movs	r1, #188	; 0xbc
 80246be:	4620      	mov	r0, r4
 80246c0:	f001 f880 	bl	80257c4 <_ZdlPvj>
 80246c4:	4620      	mov	r0, r4
 80246c6:	bd10      	pop	{r4, pc}

080246c8 <_ZN8touchgfx7OutlineD1Ev>:
 80246c8:	4770      	bx	lr

080246ca <_ZN8touchgfx7OutlineD0Ev>:
 80246ca:	b510      	push	{r4, lr}
 80246cc:	4604      	mov	r4, r0
 80246ce:	2148      	movs	r1, #72	; 0x48
 80246d0:	f001 f878 	bl	80257c4 <_ZdlPvj>
 80246d4:	4620      	mov	r0, r4
 80246d6:	bd10      	pop	{r4, pc}

080246d8 <_ZN8touchgfx7Outline5resetEv>:
 80246d8:	b510      	push	{r4, lr}
 80246da:	4604      	mov	r4, r0
 80246dc:	f7f3 ff36 	bl	801854c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80246e0:	60e0      	str	r0, [r4, #12]
 80246e2:	f7f3 ff39 	bl	8018558 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80246e6:	68e3      	ldr	r3, [r4, #12]
 80246e8:	2200      	movs	r2, #0
 80246ea:	08c0      	lsrs	r0, r0, #3
 80246ec:	6123      	str	r3, [r4, #16]
 80246ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80246f2:	6060      	str	r0, [r4, #4]
 80246f4:	82a3      	strh	r3, [r4, #20]
 80246f6:	82e3      	strh	r3, [r4, #22]
 80246f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80246fa:	60a2      	str	r2, [r4, #8]
 80246fc:	f023 0301 	bic.w	r3, r3, #1
 8024700:	8322      	strh	r2, [r4, #24]
 8024702:	8362      	strh	r2, [r4, #26]
 8024704:	f043 0302 	orr.w	r3, r3, #2
 8024708:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802470c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802470e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024712:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8024716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802471a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802471e:	bd10      	pop	{r4, pc}

08024720 <_ZN8touchgfx7OutlineC1Ev>:
 8024720:	4b0f      	ldr	r3, [pc, #60]	; (8024760 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8024722:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024726:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802472a:	b510      	push	{r4, lr}
 802472c:	6003      	str	r3, [r0, #0]
 802472e:	2300      	movs	r3, #0
 8024730:	4604      	mov	r4, r0
 8024732:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8024736:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802473a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802473e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024742:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024746:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802474a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802474e:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8024752:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8024756:	f7ff ffbf 	bl	80246d8 <_ZN8touchgfx7Outline5resetEv>
 802475a:	4620      	mov	r0, r4
 802475c:	bd10      	pop	{r4, pc}
 802475e:	bf00      	nop
 8024760:	0802b9ac 	.word	0x0802b9ac

08024764 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024768:	b093      	sub	sp, #76	; 0x4c
 802476a:	4604      	mov	r4, r0
 802476c:	1156      	asrs	r6, r2, #5
 802476e:	f002 0e1f 	and.w	lr, r2, #31
 8024772:	981c      	ldr	r0, [sp, #112]	; 0x70
 8024774:	9305      	str	r3, [sp, #20]
 8024776:	1143      	asrs	r3, r0, #5
 8024778:	1145      	asrs	r5, r0, #5
 802477a:	930c      	str	r3, [sp, #48]	; 0x30
 802477c:	f000 031f 	and.w	r3, r0, #31
 8024780:	9303      	str	r3, [sp, #12]
 8024782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024784:	42b3      	cmp	r3, r6
 8024786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024788:	bfc8      	it	gt
 802478a:	6326      	strgt	r6, [r4, #48]	; 0x30
 802478c:	42b3      	cmp	r3, r6
 802478e:	bfdc      	itt	le
 8024790:	1c73      	addle	r3, r6, #1
 8024792:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024794:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024796:	42ab      	cmp	r3, r5
 8024798:	bfc8      	it	gt
 802479a:	462b      	movgt	r3, r5
 802479c:	ea4f 1560 	mov.w	r5, r0, asr #5
 80247a0:	bfc8      	it	gt
 80247a2:	6323      	strgt	r3, [r4, #48]	; 0x30
 80247a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80247a6:	42ab      	cmp	r3, r5
 80247a8:	bfd8      	it	le
 80247aa:	462b      	movle	r3, r5
 80247ac:	ea4f 1561 	mov.w	r5, r1, asr #5
 80247b0:	bfdc      	itt	le
 80247b2:	3301      	addle	r3, #1
 80247b4:	63a3      	strle	r3, [r4, #56]	; 0x38
 80247b6:	9b05      	ldr	r3, [sp, #20]
 80247b8:	eba3 0a01 	sub.w	sl, r3, r1
 80247bc:	1143      	asrs	r3, r0, #5
 80247be:	429e      	cmp	r6, r3
 80247c0:	f040 8119 	bne.w	80249f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80247c4:	9b05      	ldr	r3, [sp, #20]
 80247c6:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80247ca:	9b03      	ldr	r3, [sp, #12]
 80247cc:	459e      	cmp	lr, r3
 80247ce:	d12c      	bne.n	802482a <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80247d0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80247d4:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80247d8:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80247dc:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80247e0:	4291      	cmp	r1, r2
 80247e2:	d037      	beq.n	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80247e4:	8b61      	ldrh	r1, [r4, #26]
 80247e6:	8b22      	ldrh	r2, [r4, #24]
 80247e8:	430a      	orrs	r2, r1
 80247ea:	d00b      	beq.n	8024804 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	db09      	blt.n	8024804 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80247f2:	429a      	cmp	r2, r3
 80247f4:	dd06      	ble.n	8024804 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80247f6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80247fa:	429a      	cmp	r2, r3
 80247fc:	d308      	bcc.n	8024810 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80247fe:	2301      	movs	r3, #1
 8024800:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024804:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024808:	82e6      	strh	r6, [r4, #22]
 802480a:	2300      	movs	r3, #0
 802480c:	8323      	strh	r3, [r4, #24]
 802480e:	e0c6      	b.n	802499e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024810:	f104 0314 	add.w	r3, r4, #20
 8024814:	6922      	ldr	r2, [r4, #16]
 8024816:	cb03      	ldmia	r3!, {r0, r1}
 8024818:	6010      	str	r0, [r2, #0]
 802481a:	6051      	str	r1, [r2, #4]
 802481c:	6923      	ldr	r3, [r4, #16]
 802481e:	3308      	adds	r3, #8
 8024820:	6123      	str	r3, [r4, #16]
 8024822:	68a3      	ldr	r3, [r4, #8]
 8024824:	3301      	adds	r3, #1
 8024826:	60a3      	str	r3, [r4, #8]
 8024828:	e7ec      	b.n	8024804 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802482a:	9b05      	ldr	r3, [sp, #20]
 802482c:	45ac      	cmp	ip, r5
 802482e:	f001 011f 	and.w	r1, r1, #31
 8024832:	8b20      	ldrh	r0, [r4, #24]
 8024834:	f003 031f 	and.w	r3, r3, #31
 8024838:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 802483c:	9304      	str	r3, [sp, #16]
 802483e:	9b03      	ldr	r3, [sp, #12]
 8024840:	eba3 020e 	sub.w	r2, r3, lr
 8024844:	d109      	bne.n	802485a <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8024846:	9b04      	ldr	r3, [sp, #16]
 8024848:	4410      	add	r0, r2
 802484a:	4419      	add	r1, r3
 802484c:	8320      	strh	r0, [r4, #24]
 802484e:	fb02 8201 	mla	r2, r2, r1, r8
 8024852:	8362      	strh	r2, [r4, #26]
 8024854:	b013      	add	sp, #76	; 0x4c
 8024856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802485a:	f1ba 0f00 	cmp.w	sl, #0
 802485e:	f2c0 80a0 	blt.w	80249a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8024862:	f1c1 0320 	rsb	r3, r1, #32
 8024866:	f04f 0b20 	mov.w	fp, #32
 802486a:	435a      	muls	r2, r3
 802486c:	2301      	movs	r3, #1
 802486e:	9302      	str	r3, [sp, #8]
 8024870:	4459      	add	r1, fp
 8024872:	fb92 f7fa 	sdiv	r7, r2, sl
 8024876:	fb0a 2217 	mls	r2, sl, r7, r2
 802487a:	2a00      	cmp	r2, #0
 802487c:	bfbc      	itt	lt
 802487e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024882:	4452      	addlt	r2, sl
 8024884:	fb07 8101 	mla	r1, r7, r1, r8
 8024888:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802488c:	4438      	add	r0, r7
 802488e:	b20b      	sxth	r3, r1
 8024890:	9902      	ldr	r1, [sp, #8]
 8024892:	b200      	sxth	r0, r0
 8024894:	9301      	str	r3, [sp, #4]
 8024896:	8363      	strh	r3, [r4, #26]
 8024898:	186b      	adds	r3, r5, r1
 802489a:	0435      	lsls	r5, r6, #16
 802489c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80248a0:	8320      	strh	r0, [r4, #24]
 80248a2:	eb03 0905 	add.w	r9, r3, r5
 80248a6:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80248aa:	9300      	str	r3, [sp, #0]
 80248ac:	45c1      	cmp	r9, r8
 80248ae:	9505      	str	r5, [sp, #20]
 80248b0:	d014      	beq.n	80248dc <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80248b2:	9b01      	ldr	r3, [sp, #4]
 80248b4:	4303      	orrs	r3, r0
 80248b6:	d00b      	beq.n	80248d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80248b8:	2900      	cmp	r1, #0
 80248ba:	db09      	blt.n	80248d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80248bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80248be:	428b      	cmp	r3, r1
 80248c0:	dd06      	ble.n	80248d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80248c2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80248c6:	4299      	cmp	r1, r3
 80248c8:	d374      	bcc.n	80249b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80248ca:	2301      	movs	r3, #1
 80248cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80248d0:	9b00      	ldr	r3, [sp, #0]
 80248d2:	82e6      	strh	r6, [r4, #22]
 80248d4:	82a3      	strh	r3, [r4, #20]
 80248d6:	2300      	movs	r3, #0
 80248d8:	8323      	strh	r3, [r4, #24]
 80248da:	8363      	strh	r3, [r4, #26]
 80248dc:	9900      	ldr	r1, [sp, #0]
 80248de:	eb0e 0307 	add.w	r3, lr, r7
 80248e2:	458c      	cmp	ip, r1
 80248e4:	d04e      	beq.n	8024984 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80248e6:	9903      	ldr	r1, [sp, #12]
 80248e8:	eba2 020a 	sub.w	r2, r2, sl
 80248ec:	1ac9      	subs	r1, r1, r3
 80248ee:	9201      	str	r2, [sp, #4]
 80248f0:	440f      	add	r7, r1
 80248f2:	017f      	lsls	r7, r7, #5
 80248f4:	fb97 fefa 	sdiv	lr, r7, sl
 80248f8:	fb0a 771e 	mls	r7, sl, lr, r7
 80248fc:	2f00      	cmp	r7, #0
 80248fe:	bfbc      	itt	lt
 8024900:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024904:	4457      	addlt	r7, sl
 8024906:	f10e 0101 	add.w	r1, lr, #1
 802490a:	9106      	str	r1, [sp, #24]
 802490c:	9a01      	ldr	r2, [sp, #4]
 802490e:	8b20      	ldrh	r0, [r4, #24]
 8024910:	19d2      	adds	r2, r2, r7
 8024912:	8b61      	ldrh	r1, [r4, #26]
 8024914:	9d02      	ldr	r5, [sp, #8]
 8024916:	9201      	str	r2, [sp, #4]
 8024918:	bf5b      	ittet	pl
 802491a:	eba2 020a 	subpl.w	r2, r2, sl
 802491e:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8024922:	46f0      	movmi	r8, lr
 8024924:	9201      	strpl	r2, [sp, #4]
 8024926:	9a00      	ldr	r2, [sp, #0]
 8024928:	4440      	add	r0, r8
 802492a:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802492e:	4443      	add	r3, r8
 8024930:	442a      	add	r2, r5
 8024932:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024936:	9d05      	ldr	r5, [sp, #20]
 8024938:	b200      	sxth	r0, r0
 802493a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802493e:	b209      	sxth	r1, r1
 8024940:	4415      	add	r5, r2
 8024942:	8320      	strh	r0, [r4, #24]
 8024944:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024948:	8361      	strh	r1, [r4, #26]
 802494a:	9200      	str	r2, [sp, #0]
 802494c:	454d      	cmp	r5, r9
 802494e:	d016      	beq.n	802497e <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8024950:	4301      	orrs	r1, r0
 8024952:	d00d      	beq.n	8024970 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024954:	f1b8 0f00 	cmp.w	r8, #0
 8024958:	db0a      	blt.n	8024970 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802495a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802495c:	4541      	cmp	r1, r8
 802495e:	dd07      	ble.n	8024970 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024960:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024964:	4288      	cmp	r0, r1
 8024966:	d335      	bcc.n	80249d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024968:	f04f 0101 	mov.w	r1, #1
 802496c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024970:	9900      	ldr	r1, [sp, #0]
 8024972:	82e6      	strh	r6, [r4, #22]
 8024974:	82a1      	strh	r1, [r4, #20]
 8024976:	f04f 0100 	mov.w	r1, #0
 802497a:	8321      	strh	r1, [r4, #24]
 802497c:	8361      	strh	r1, [r4, #26]
 802497e:	9a00      	ldr	r2, [sp, #0]
 8024980:	4594      	cmp	ip, r2
 8024982:	d1c3      	bne.n	802490c <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8024984:	9a03      	ldr	r2, [sp, #12]
 8024986:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802498a:	1ad3      	subs	r3, r2, r3
 802498c:	8b22      	ldrh	r2, [r4, #24]
 802498e:	441a      	add	r2, r3
 8024990:	8322      	strh	r2, [r4, #24]
 8024992:	9a04      	ldr	r2, [sp, #16]
 8024994:	3220      	adds	r2, #32
 8024996:	eba2 020b 	sub.w	r2, r2, fp
 802499a:	fb03 c302 	mla	r3, r3, r2, ip
 802499e:	8363      	strh	r3, [r4, #26]
 80249a0:	e758      	b.n	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80249a2:	f04f 33ff 	mov.w	r3, #4294967295
 80249a6:	434a      	muls	r2, r1
 80249a8:	f1ca 0a00 	rsb	sl, sl, #0
 80249ac:	f04f 0b00 	mov.w	fp, #0
 80249b0:	9302      	str	r3, [sp, #8]
 80249b2:	e75d      	b.n	8024870 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80249b4:	f104 0314 	add.w	r3, r4, #20
 80249b8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80249bc:	cb03      	ldmia	r3!, {r0, r1}
 80249be:	f8c8 0000 	str.w	r0, [r8]
 80249c2:	f8c8 1004 	str.w	r1, [r8, #4]
 80249c6:	6923      	ldr	r3, [r4, #16]
 80249c8:	3308      	adds	r3, #8
 80249ca:	6123      	str	r3, [r4, #16]
 80249cc:	68a3      	ldr	r3, [r4, #8]
 80249ce:	3301      	adds	r3, #1
 80249d0:	60a3      	str	r3, [r4, #8]
 80249d2:	e77d      	b.n	80248d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80249d4:	f104 0814 	add.w	r8, r4, #20
 80249d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80249dc:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80249e0:	f8c9 0000 	str.w	r0, [r9]
 80249e4:	f8c9 1004 	str.w	r1, [r9, #4]
 80249e8:	6921      	ldr	r1, [r4, #16]
 80249ea:	3108      	adds	r1, #8
 80249ec:	6121      	str	r1, [r4, #16]
 80249ee:	68a1      	ldr	r1, [r4, #8]
 80249f0:	3101      	adds	r1, #1
 80249f2:	60a1      	str	r1, [r4, #8]
 80249f4:	e7bc      	b.n	8024970 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80249f6:	1a83      	subs	r3, r0, r2
 80249f8:	9301      	str	r3, [sp, #4]
 80249fa:	f1ba 0f00 	cmp.w	sl, #0
 80249fe:	f040 8094 	bne.w	8024b2a <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8024a02:	9a01      	ldr	r2, [sp, #4]
 8024a04:	0049      	lsls	r1, r1, #1
 8024a06:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8024a0a:	2a00      	cmp	r2, #0
 8024a0c:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8024a10:	8b62      	ldrh	r2, [r4, #26]
 8024a12:	bfaa      	itet	ge
 8024a14:	f04f 0a20 	movge.w	sl, #32
 8024a18:	f04f 38ff 	movlt.w	r8, #4294967295
 8024a1c:	f04f 0801 	movge.w	r8, #1
 8024a20:	8b21      	ldrh	r1, [r4, #24]
 8024a22:	ebaa 0e0e 	sub.w	lr, sl, lr
 8024a26:	4471      	add	r1, lr
 8024a28:	fb0e 2e03 	mla	lr, lr, r3, r2
 8024a2c:	eb08 0206 	add.w	r2, r8, r6
 8024a30:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8024a34:	b209      	sxth	r1, r1
 8024a36:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8024a3a:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8024a3e:	8321      	strh	r1, [r4, #24]
 8024a40:	fa0f fe8e 	sxth.w	lr, lr
 8024a44:	42b7      	cmp	r7, r6
 8024a46:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024a4a:	d013      	beq.n	8024a74 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024a4c:	ea51 010e 	orrs.w	r1, r1, lr
 8024a50:	d00b      	beq.n	8024a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a52:	2800      	cmp	r0, #0
 8024a54:	db09      	blt.n	8024a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024a58:	4281      	cmp	r1, r0
 8024a5a:	dd06      	ble.n	8024a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024a5c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024a60:	4288      	cmp	r0, r1
 8024a62:	d339      	bcc.n	8024ad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024a64:	2101      	movs	r1, #1
 8024a66:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024a6a:	2100      	movs	r1, #0
 8024a6c:	82a5      	strh	r5, [r4, #20]
 8024a6e:	82e2      	strh	r2, [r4, #22]
 8024a70:	8321      	strh	r1, [r4, #24]
 8024a72:	8361      	strh	r1, [r4, #26]
 8024a74:	f1aa 0610 	sub.w	r6, sl, #16
 8024a78:	f04f 0e00 	mov.w	lr, #0
 8024a7c:	f04f 0b01 	mov.w	fp, #1
 8024a80:	0076      	lsls	r6, r6, #1
 8024a82:	fb06 f703 	mul.w	r7, r6, r3
 8024a86:	b236      	sxth	r6, r6
 8024a88:	b23f      	sxth	r7, r7
 8024a8a:	ea46 0107 	orr.w	r1, r6, r7
 8024a8e:	9100      	str	r1, [sp, #0]
 8024a90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024a92:	428a      	cmp	r2, r1
 8024a94:	d03e      	beq.n	8024b14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8024a96:	4442      	add	r2, r8
 8024a98:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024a9c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024aa0:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024aa4:	8326      	strh	r6, [r4, #24]
 8024aa6:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024aaa:	8367      	strh	r7, [r4, #26]
 8024aac:	4584      	cmp	ip, r0
 8024aae:	d0ef      	beq.n	8024a90 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024ab0:	9800      	ldr	r0, [sp, #0]
 8024ab2:	b150      	cbz	r0, 8024aca <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024ab4:	2900      	cmp	r1, #0
 8024ab6:	db08      	blt.n	8024aca <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024ab8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024aba:	4288      	cmp	r0, r1
 8024abc:	dd05      	ble.n	8024aca <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024abe:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ac2:	4288      	cmp	r0, r1
 8024ac4:	d315      	bcc.n	8024af2 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024ac6:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8024aca:	82a5      	strh	r5, [r4, #20]
 8024acc:	82e2      	strh	r2, [r4, #22]
 8024ace:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024ad2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024ad6:	e7db      	b.n	8024a90 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024ad8:	f104 0614 	add.w	r6, r4, #20
 8024adc:	6927      	ldr	r7, [r4, #16]
 8024ade:	ce03      	ldmia	r6!, {r0, r1}
 8024ae0:	6038      	str	r0, [r7, #0]
 8024ae2:	6079      	str	r1, [r7, #4]
 8024ae4:	6921      	ldr	r1, [r4, #16]
 8024ae6:	3108      	adds	r1, #8
 8024ae8:	6121      	str	r1, [r4, #16]
 8024aea:	68a1      	ldr	r1, [r4, #8]
 8024aec:	3101      	adds	r1, #1
 8024aee:	60a1      	str	r1, [r4, #8]
 8024af0:	e7bb      	b.n	8024a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024af2:	f104 0c14 	add.w	ip, r4, #20
 8024af6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024afa:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8024afe:	f8c9 0000 	str.w	r0, [r9]
 8024b02:	f8c9 1004 	str.w	r1, [r9, #4]
 8024b06:	6921      	ldr	r1, [r4, #16]
 8024b08:	3108      	adds	r1, #8
 8024b0a:	6121      	str	r1, [r4, #16]
 8024b0c:	68a1      	ldr	r1, [r4, #8]
 8024b0e:	3101      	adds	r1, #1
 8024b10:	60a1      	str	r1, [r4, #8]
 8024b12:	e7da      	b.n	8024aca <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024b14:	9a03      	ldr	r2, [sp, #12]
 8024b16:	8b61      	ldrh	r1, [r4, #26]
 8024b18:	f1a2 0c20 	sub.w	ip, r2, #32
 8024b1c:	8b22      	ldrh	r2, [r4, #24]
 8024b1e:	44d4      	add	ip, sl
 8024b20:	4462      	add	r2, ip
 8024b22:	fb0c 1303 	mla	r3, ip, r3, r1
 8024b26:	8322      	strh	r2, [r4, #24]
 8024b28:	e739      	b.n	802499e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024b2a:	9b01      	ldr	r3, [sp, #4]
 8024b2c:	2b00      	cmp	r3, #0
 8024b2e:	db3f      	blt.n	8024bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8024b30:	2201      	movs	r2, #1
 8024b32:	f1ce 0320 	rsb	r3, lr, #32
 8024b36:	920b      	str	r2, [sp, #44]	; 0x2c
 8024b38:	2220      	movs	r2, #32
 8024b3a:	fb0a f303 	mul.w	r3, sl, r3
 8024b3e:	9202      	str	r2, [sp, #8]
 8024b40:	9a01      	ldr	r2, [sp, #4]
 8024b42:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024b46:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024b4a:	fb93 f7f2 	sdiv	r7, r3, r2
 8024b4e:	fb02 3317 	mls	r3, r2, r7, r3
 8024b52:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	9308      	str	r3, [sp, #32]
 8024b5a:	bfbc      	itt	lt
 8024b5c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024b60:	189b      	addlt	r3, r3, r2
 8024b62:	eb07 0b01 	add.w	fp, r7, r1
 8024b66:	bfb8      	it	lt
 8024b68:	9308      	strlt	r3, [sp, #32]
 8024b6a:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024b6e:	9304      	str	r3, [sp, #16]
 8024b70:	9b02      	ldr	r3, [sp, #8]
 8024b72:	4573      	cmp	r3, lr
 8024b74:	d133      	bne.n	8024bde <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024b76:	9b04      	ldr	r3, [sp, #16]
 8024b78:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024b7c:	454b      	cmp	r3, r9
 8024b7e:	d045      	beq.n	8024c0c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024b80:	8b62      	ldrh	r2, [r4, #26]
 8024b82:	8b23      	ldrh	r3, [r4, #24]
 8024b84:	4313      	orrs	r3, r2
 8024b86:	d00c      	beq.n	8024ba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b88:	f1b8 0f00 	cmp.w	r8, #0
 8024b8c:	db09      	blt.n	8024ba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b90:	4543      	cmp	r3, r8
 8024b92:	dd06      	ble.n	8024ba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024b94:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024b98:	429a      	cmp	r2, r3
 8024b9a:	d313      	bcc.n	8024bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024b9c:	2301      	movs	r3, #1
 8024b9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024ba2:	9b04      	ldr	r3, [sp, #16]
 8024ba4:	82e6      	strh	r6, [r4, #22]
 8024ba6:	82a3      	strh	r3, [r4, #20]
 8024ba8:	2300      	movs	r3, #0
 8024baa:	8323      	strh	r3, [r4, #24]
 8024bac:	8363      	strh	r3, [r4, #26]
 8024bae:	e02d      	b.n	8024c0c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024bb0:	9a01      	ldr	r2, [sp, #4]
 8024bb2:	fb0a f30e 	mul.w	r3, sl, lr
 8024bb6:	4252      	negs	r2, r2
 8024bb8:	9201      	str	r2, [sp, #4]
 8024bba:	f04f 32ff 	mov.w	r2, #4294967295
 8024bbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8024bc0:	2200      	movs	r2, #0
 8024bc2:	e7bc      	b.n	8024b3e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024bc4:	f104 0314 	add.w	r3, r4, #20
 8024bc8:	6922      	ldr	r2, [r4, #16]
 8024bca:	cb03      	ldmia	r3!, {r0, r1}
 8024bcc:	6010      	str	r0, [r2, #0]
 8024bce:	6051      	str	r1, [r2, #4]
 8024bd0:	6923      	ldr	r3, [r4, #16]
 8024bd2:	3308      	adds	r3, #8
 8024bd4:	6123      	str	r3, [r4, #16]
 8024bd6:	68a3      	ldr	r3, [r4, #8]
 8024bd8:	3301      	adds	r3, #1
 8024bda:	60a3      	str	r3, [r4, #8]
 8024bdc:	e7e1      	b.n	8024ba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024bde:	f00b 031f 	and.w	r3, fp, #31
 8024be2:	f001 011f 	and.w	r1, r1, #31
 8024be6:	8b20      	ldrh	r0, [r4, #24]
 8024be8:	9309      	str	r3, [sp, #36]	; 0x24
 8024bea:	9b02      	ldr	r3, [sp, #8]
 8024bec:	eba3 020e 	sub.w	r2, r3, lr
 8024bf0:	8b63      	ldrh	r3, [r4, #26]
 8024bf2:	9300      	str	r3, [sp, #0]
 8024bf4:	9b04      	ldr	r3, [sp, #16]
 8024bf6:	42ab      	cmp	r3, r5
 8024bf8:	f040 80ef 	bne.w	8024dda <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bfe:	4410      	add	r0, r2
 8024c00:	4419      	add	r1, r3
 8024c02:	9b00      	ldr	r3, [sp, #0]
 8024c04:	8320      	strh	r0, [r4, #24]
 8024c06:	fb02 3101 	mla	r1, r2, r1, r3
 8024c0a:	8361      	strh	r1, [r4, #26]
 8024c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c0e:	9904      	ldr	r1, [sp, #16]
 8024c10:	4433      	add	r3, r6
 8024c12:	9300      	str	r3, [sp, #0]
 8024c14:	9a00      	ldr	r2, [sp, #0]
 8024c16:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024c1a:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024c1e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024c22:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024c26:	4288      	cmp	r0, r1
 8024c28:	d018      	beq.n	8024c5c <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024c2a:	8b60      	ldrh	r0, [r4, #26]
 8024c2c:	8b21      	ldrh	r1, [r4, #24]
 8024c2e:	ea50 0201 	orrs.w	r2, r0, r1
 8024c32:	d00c      	beq.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	db0a      	blt.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024c38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c3a:	4299      	cmp	r1, r3
 8024c3c:	dd07      	ble.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024c3e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024c42:	4299      	cmp	r1, r3
 8024c44:	f0c0 818b 	bcc.w	8024f5e <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024c48:	2301      	movs	r3, #1
 8024c4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024c4e:	9b04      	ldr	r3, [sp, #16]
 8024c50:	82a3      	strh	r3, [r4, #20]
 8024c52:	9b00      	ldr	r3, [sp, #0]
 8024c54:	82e3      	strh	r3, [r4, #22]
 8024c56:	2300      	movs	r3, #0
 8024c58:	8323      	strh	r3, [r4, #24]
 8024c5a:	8363      	strh	r3, [r4, #26]
 8024c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c5e:	9a00      	ldr	r2, [sp, #0]
 8024c60:	4293      	cmp	r3, r2
 8024c62:	f000 808d 	beq.w	8024d80 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024c66:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024c6a:	9901      	ldr	r1, [sp, #4]
 8024c6c:	9801      	ldr	r0, [sp, #4]
 8024c6e:	fb93 f1f1 	sdiv	r1, r3, r1
 8024c72:	fb00 3311 	mls	r3, r0, r1, r3
 8024c76:	9106      	str	r1, [sp, #24]
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	9307      	str	r3, [sp, #28]
 8024c7c:	da04      	bge.n	8024c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8024c7e:	1e4b      	subs	r3, r1, #1
 8024c80:	9306      	str	r3, [sp, #24]
 8024c82:	9b07      	ldr	r3, [sp, #28]
 8024c84:	4403      	add	r3, r0
 8024c86:	9307      	str	r3, [sp, #28]
 8024c88:	9b08      	ldr	r3, [sp, #32]
 8024c8a:	f04f 0c00 	mov.w	ip, #0
 8024c8e:	9901      	ldr	r1, [sp, #4]
 8024c90:	1a5b      	subs	r3, r3, r1
 8024c92:	4659      	mov	r1, fp
 8024c94:	9308      	str	r3, [sp, #32]
 8024c96:	9b02      	ldr	r3, [sp, #8]
 8024c98:	f1c3 0320 	rsb	r3, r3, #32
 8024c9c:	930a      	str	r3, [sp, #40]	; 0x28
 8024c9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024ca0:	9b02      	ldr	r3, [sp, #8]
 8024ca2:	1a1b      	subs	r3, r3, r0
 8024ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8024ca6:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024caa:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024cae:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8024cb2:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024cb6:	181b      	adds	r3, r3, r0
 8024cb8:	bf58      	it	pl
 8024cba:	9801      	ldrpl	r0, [sp, #4]
 8024cbc:	9308      	str	r3, [sp, #32]
 8024cbe:	bf54      	ite	pl
 8024cc0:	1a1b      	subpl	r3, r3, r0
 8024cc2:	9d06      	ldrmi	r5, [sp, #24]
 8024cc4:	9802      	ldr	r0, [sp, #8]
 8024cc6:	bf5e      	ittt	pl
 8024cc8:	9308      	strpl	r3, [sp, #32]
 8024cca:	9b06      	ldrpl	r3, [sp, #24]
 8024ccc:	1c5d      	addpl	r5, r3, #1
 8024cce:	44ab      	add	fp, r5
 8024cd0:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024cd4:	9304      	str	r3, [sp, #16]
 8024cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024cd8:	4283      	cmp	r3, r0
 8024cda:	f040 815a 	bne.w	8024f92 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024cde:	9b04      	ldr	r3, [sp, #16]
 8024ce0:	9a00      	ldr	r2, [sp, #0]
 8024ce2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8024ce6:	4543      	cmp	r3, r8
 8024ce8:	d01a      	beq.n	8024d20 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024cea:	8b61      	ldrh	r1, [r4, #26]
 8024cec:	8b23      	ldrh	r3, [r4, #24]
 8024cee:	430b      	orrs	r3, r1
 8024cf0:	d00e      	beq.n	8024d10 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cf2:	f1be 0f00 	cmp.w	lr, #0
 8024cf6:	db0b      	blt.n	8024d10 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024cfa:	4573      	cmp	r3, lr
 8024cfc:	dd08      	ble.n	8024d10 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cfe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024d02:	4299      	cmp	r1, r3
 8024d04:	f0c0 8138 	bcc.w	8024f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024d08:	f04f 0301 	mov.w	r3, #1
 8024d0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d10:	9b04      	ldr	r3, [sp, #16]
 8024d12:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024d16:	82a3      	strh	r3, [r4, #20]
 8024d18:	9b00      	ldr	r3, [sp, #0]
 8024d1a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024d1e:	82e3      	strh	r3, [r4, #22]
 8024d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d22:	9a00      	ldr	r2, [sp, #0]
 8024d24:	441a      	add	r2, r3
 8024d26:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d2a:	9200      	str	r2, [sp, #0]
 8024d2c:	9900      	ldr	r1, [sp, #0]
 8024d2e:	9a04      	ldr	r2, [sp, #16]
 8024d30:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024d34:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024d38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024d3c:	4288      	cmp	r0, r1
 8024d3e:	d01a      	beq.n	8024d76 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024d40:	8b60      	ldrh	r0, [r4, #26]
 8024d42:	8b21      	ldrh	r1, [r4, #24]
 8024d44:	ea50 0201 	orrs.w	r2, r0, r1
 8024d48:	d00d      	beq.n	8024d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d4a:	2b00      	cmp	r3, #0
 8024d4c:	db0b      	blt.n	8024d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d50:	4299      	cmp	r1, r3
 8024d52:	dd08      	ble.n	8024d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d54:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024d58:	4299      	cmp	r1, r3
 8024d5a:	f0c0 81f9 	bcc.w	8025150 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024d5e:	f04f 0301 	mov.w	r3, #1
 8024d62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024d66:	9b04      	ldr	r3, [sp, #16]
 8024d68:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024d6c:	82a3      	strh	r3, [r4, #20]
 8024d6e:	9b00      	ldr	r3, [sp, #0]
 8024d70:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024d74:	82e3      	strh	r3, [r4, #22]
 8024d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d78:	4659      	mov	r1, fp
 8024d7a:	9a00      	ldr	r2, [sp, #0]
 8024d7c:	4293      	cmp	r3, r2
 8024d7e:	d192      	bne.n	8024ca6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024d80:	9b02      	ldr	r3, [sp, #8]
 8024d82:	f1c3 0c20 	rsb	ip, r3, #32
 8024d86:	9b05      	ldr	r3, [sp, #20]
 8024d88:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024d8c:	9b03      	ldr	r3, [sp, #12]
 8024d8e:	459c      	cmp	ip, r3
 8024d90:	f040 81f8 	bne.w	8025184 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024d94:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024d98:	9a00      	ldr	r2, [sp, #0]
 8024d9a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024d9e:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024da2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024da6:	4288      	cmp	r0, r1
 8024da8:	f43f ad54 	beq.w	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024dac:	8b60      	ldrh	r0, [r4, #26]
 8024dae:	8b21      	ldrh	r1, [r4, #24]
 8024db0:	ea50 0201 	orrs.w	r2, r0, r1
 8024db4:	d00c      	beq.n	8024dd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	db0a      	blt.n	8024dd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024dba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024dbc:	4299      	cmp	r1, r3
 8024dbe:	dd07      	ble.n	8024dd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024dc0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024dc4:	4299      	cmp	r1, r3
 8024dc6:	f0c0 81d0 	bcc.w	802516a <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024dca:	2301      	movs	r3, #1
 8024dcc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024dd0:	9b00      	ldr	r3, [sp, #0]
 8024dd2:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024dd6:	82e3      	strh	r3, [r4, #22]
 8024dd8:	e517      	b.n	802480a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024dda:	2f00      	cmp	r7, #0
 8024ddc:	f2c0 8097 	blt.w	8024f0e <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024de0:	2301      	movs	r3, #1
 8024de2:	f1c1 0c20 	rsb	ip, r1, #32
 8024de6:	9307      	str	r3, [sp, #28]
 8024de8:	2320      	movs	r3, #32
 8024dea:	fb02 f20c 	mul.w	r2, r2, ip
 8024dee:	9306      	str	r3, [sp, #24]
 8024df0:	9b06      	ldr	r3, [sp, #24]
 8024df2:	fb92 fcf7 	sdiv	ip, r2, r7
 8024df6:	fb07 221c 	mls	r2, r7, ip, r2
 8024dfa:	4419      	add	r1, r3
 8024dfc:	9b00      	ldr	r3, [sp, #0]
 8024dfe:	2a00      	cmp	r2, #0
 8024e00:	bfbc      	itt	lt
 8024e02:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024e06:	19d2      	addlt	r2, r2, r7
 8024e08:	fb0c 3101 	mla	r1, ip, r1, r3
 8024e0c:	9b07      	ldr	r3, [sp, #28]
 8024e0e:	4460      	add	r0, ip
 8024e10:	441d      	add	r5, r3
 8024e12:	0433      	lsls	r3, r6, #16
 8024e14:	b200      	sxth	r0, r0
 8024e16:	930a      	str	r3, [sp, #40]	; 0x28
 8024e18:	18eb      	adds	r3, r5, r3
 8024e1a:	b209      	sxth	r1, r1
 8024e1c:	8320      	strh	r0, [r4, #24]
 8024e1e:	454b      	cmp	r3, r9
 8024e20:	8361      	strh	r1, [r4, #26]
 8024e22:	d014      	beq.n	8024e4e <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024e24:	ea50 0301 	orrs.w	r3, r0, r1
 8024e28:	d00c      	beq.n	8024e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e2a:	f1b8 0f00 	cmp.w	r8, #0
 8024e2e:	db09      	blt.n	8024e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024e32:	4543      	cmp	r3, r8
 8024e34:	dd06      	ble.n	8024e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024e36:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024e3a:	4299      	cmp	r1, r3
 8024e3c:	d36e      	bcc.n	8024f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024e3e:	2301      	movs	r3, #1
 8024e40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024e44:	2300      	movs	r3, #0
 8024e46:	82a5      	strh	r5, [r4, #20]
 8024e48:	82e6      	strh	r6, [r4, #22]
 8024e4a:	8323      	strh	r3, [r4, #24]
 8024e4c:	8363      	strh	r3, [r4, #26]
 8024e4e:	9904      	ldr	r1, [sp, #16]
 8024e50:	eb0e 030c 	add.w	r3, lr, ip
 8024e54:	42a9      	cmp	r1, r5
 8024e56:	d04d      	beq.n	8024ef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024e58:	9902      	ldr	r1, [sp, #8]
 8024e5a:	1bd2      	subs	r2, r2, r7
 8024e5c:	1ac9      	subs	r1, r1, r3
 8024e5e:	9200      	str	r2, [sp, #0]
 8024e60:	448c      	add	ip, r1
 8024e62:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024e66:	fb9c fef7 	sdiv	lr, ip, r7
 8024e6a:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024e6e:	f1bc 0f00 	cmp.w	ip, #0
 8024e72:	bfbc      	itt	lt
 8024e74:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024e78:	44bc      	addlt	ip, r7
 8024e7a:	f10e 0101 	add.w	r1, lr, #1
 8024e7e:	910d      	str	r1, [sp, #52]	; 0x34
 8024e80:	9a00      	ldr	r2, [sp, #0]
 8024e82:	8b20      	ldrh	r0, [r4, #24]
 8024e84:	eb12 020c 	adds.w	r2, r2, ip
 8024e88:	8b61      	ldrh	r1, [r4, #26]
 8024e8a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024e8e:	9200      	str	r2, [sp, #0]
 8024e90:	bf5b      	ittet	pl
 8024e92:	1bd2      	subpl	r2, r2, r7
 8024e94:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024e98:	46f0      	movmi	r8, lr
 8024e9a:	9200      	strpl	r2, [sp, #0]
 8024e9c:	9a07      	ldr	r2, [sp, #28]
 8024e9e:	4440      	add	r0, r8
 8024ea0:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024ea4:	4443      	add	r3, r8
 8024ea6:	4415      	add	r5, r2
 8024ea8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024eae:	b200      	sxth	r0, r0
 8024eb0:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024eb4:	442a      	add	r2, r5
 8024eb6:	b209      	sxth	r1, r1
 8024eb8:	8320      	strh	r0, [r4, #24]
 8024eba:	454a      	cmp	r2, r9
 8024ebc:	8361      	strh	r1, [r4, #26]
 8024ebe:	d016      	beq.n	8024eee <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024ec0:	ea50 0201 	orrs.w	r2, r0, r1
 8024ec4:	d00d      	beq.n	8024ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024ec6:	f1b8 0f00 	cmp.w	r8, #0
 8024eca:	db0a      	blt.n	8024ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024ecc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024ece:	4541      	cmp	r1, r8
 8024ed0:	dd07      	ble.n	8024ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024ed2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ed6:	4288      	cmp	r0, r1
 8024ed8:	d330      	bcc.n	8024f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024eda:	f04f 0201 	mov.w	r2, #1
 8024ede:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024ee2:	f04f 0200 	mov.w	r2, #0
 8024ee6:	82a5      	strh	r5, [r4, #20]
 8024ee8:	82e6      	strh	r6, [r4, #22]
 8024eea:	8322      	strh	r2, [r4, #24]
 8024eec:	8362      	strh	r2, [r4, #26]
 8024eee:	9904      	ldr	r1, [sp, #16]
 8024ef0:	42a9      	cmp	r1, r5
 8024ef2:	d1c5      	bne.n	8024e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8024ef4:	9a02      	ldr	r2, [sp, #8]
 8024ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024ef8:	1ad3      	subs	r3, r2, r3
 8024efa:	8b22      	ldrh	r2, [r4, #24]
 8024efc:	3120      	adds	r1, #32
 8024efe:	441a      	add	r2, r3
 8024f00:	8322      	strh	r2, [r4, #24]
 8024f02:	9a06      	ldr	r2, [sp, #24]
 8024f04:	1a89      	subs	r1, r1, r2
 8024f06:	8b62      	ldrh	r2, [r4, #26]
 8024f08:	fb03 2301 	mla	r3, r3, r1, r2
 8024f0c:	e64e      	b.n	8024bac <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8024f12:	434a      	muls	r2, r1
 8024f14:	427f      	negs	r7, r7
 8024f16:	9307      	str	r3, [sp, #28]
 8024f18:	2300      	movs	r3, #0
 8024f1a:	e768      	b.n	8024dee <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024f1c:	f104 0314 	add.w	r3, r4, #20
 8024f20:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024f24:	cb03      	ldmia	r3!, {r0, r1}
 8024f26:	f8c8 0000 	str.w	r0, [r8]
 8024f2a:	f8c8 1004 	str.w	r1, [r8, #4]
 8024f2e:	6923      	ldr	r3, [r4, #16]
 8024f30:	3308      	adds	r3, #8
 8024f32:	6123      	str	r3, [r4, #16]
 8024f34:	68a3      	ldr	r3, [r4, #8]
 8024f36:	3301      	adds	r3, #1
 8024f38:	60a3      	str	r3, [r4, #8]
 8024f3a:	e783      	b.n	8024e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024f3c:	f104 0814 	add.w	r8, r4, #20
 8024f40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024f44:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024f48:	f8c9 0000 	str.w	r0, [r9]
 8024f4c:	f8c9 1004 	str.w	r1, [r9, #4]
 8024f50:	6921      	ldr	r1, [r4, #16]
 8024f52:	3108      	adds	r1, #8
 8024f54:	6121      	str	r1, [r4, #16]
 8024f56:	68a1      	ldr	r1, [r4, #8]
 8024f58:	3101      	adds	r1, #1
 8024f5a:	60a1      	str	r1, [r4, #8]
 8024f5c:	e7c1      	b.n	8024ee2 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024f5e:	f104 0314 	add.w	r3, r4, #20
 8024f62:	6925      	ldr	r5, [r4, #16]
 8024f64:	cb03      	ldmia	r3!, {r0, r1}
 8024f66:	6028      	str	r0, [r5, #0]
 8024f68:	6069      	str	r1, [r5, #4]
 8024f6a:	6923      	ldr	r3, [r4, #16]
 8024f6c:	3308      	adds	r3, #8
 8024f6e:	6123      	str	r3, [r4, #16]
 8024f70:	68a3      	ldr	r3, [r4, #8]
 8024f72:	3301      	adds	r3, #1
 8024f74:	60a3      	str	r3, [r4, #8]
 8024f76:	e66a      	b.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024f78:	f104 0314 	add.w	r3, r4, #20
 8024f7c:	6925      	ldr	r5, [r4, #16]
 8024f7e:	cb03      	ldmia	r3!, {r0, r1}
 8024f80:	6028      	str	r0, [r5, #0]
 8024f82:	6069      	str	r1, [r5, #4]
 8024f84:	6923      	ldr	r3, [r4, #16]
 8024f86:	3308      	adds	r3, #8
 8024f88:	6123      	str	r3, [r4, #16]
 8024f8a:	68a3      	ldr	r3, [r4, #8]
 8024f8c:	3301      	adds	r3, #1
 8024f8e:	60a3      	str	r3, [r4, #8]
 8024f90:	e6be      	b.n	8024d10 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024f92:	f00b 031f 	and.w	r3, fp, #31
 8024f96:	114f      	asrs	r7, r1, #5
 8024f98:	8b20      	ldrh	r0, [r4, #24]
 8024f9a:	f001 011f 	and.w	r1, r1, #31
 8024f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024fa0:	9b04      	ldr	r3, [sp, #16]
 8024fa2:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024fa6:	429f      	cmp	r7, r3
 8024fa8:	d10a      	bne.n	8024fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fac:	4418      	add	r0, r3
 8024fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024fb0:	4419      	add	r1, r3
 8024fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fb4:	8320      	strh	r0, [r4, #24]
 8024fb6:	fb03 9901 	mla	r9, r3, r1, r9
 8024fba:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024fbe:	e6af      	b.n	8024d20 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024fc0:	2d00      	cmp	r5, #0
 8024fc2:	f2c0 809b 	blt.w	80250fc <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024fc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024fc8:	f1c1 0320 	rsb	r3, r1, #32
 8024fcc:	4373      	muls	r3, r6
 8024fce:	2601      	movs	r6, #1
 8024fd0:	960e      	str	r6, [sp, #56]	; 0x38
 8024fd2:	2620      	movs	r6, #32
 8024fd4:	960d      	str	r6, [sp, #52]	; 0x34
 8024fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024fd8:	fb93 f6f5 	sdiv	r6, r3, r5
 8024fdc:	4411      	add	r1, r2
 8024fde:	fb05 3316 	mls	r3, r5, r6, r3
 8024fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024fe4:	2b00      	cmp	r3, #0
 8024fe6:	4417      	add	r7, r2
 8024fe8:	9a00      	ldr	r2, [sp, #0]
 8024fea:	bfbc      	itt	lt
 8024fec:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024ff0:	195b      	addlt	r3, r3, r5
 8024ff2:	0412      	lsls	r2, r2, #16
 8024ff4:	fb06 9101 	mla	r1, r6, r1, r9
 8024ff8:	4430      	add	r0, r6
 8024ffa:	eb07 0902 	add.w	r9, r7, r2
 8024ffe:	9210      	str	r2, [sp, #64]	; 0x40
 8025000:	b200      	sxth	r0, r0
 8025002:	b209      	sxth	r1, r1
 8025004:	45c1      	cmp	r9, r8
 8025006:	8320      	strh	r0, [r4, #24]
 8025008:	8361      	strh	r1, [r4, #26]
 802500a:	d017      	beq.n	802503c <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 802500c:	ea50 0201 	orrs.w	r2, r0, r1
 8025010:	d00d      	beq.n	802502e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025012:	f1be 0f00 	cmp.w	lr, #0
 8025016:	db0a      	blt.n	802502e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8025018:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802501a:	4571      	cmp	r1, lr
 802501c:	dd07      	ble.n	802502e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802501e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025022:	4288      	cmp	r0, r1
 8025024:	d372      	bcc.n	802510c <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8025026:	f04f 0201 	mov.w	r2, #1
 802502a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802502e:	9a00      	ldr	r2, [sp, #0]
 8025030:	82a7      	strh	r7, [r4, #20]
 8025032:	82e2      	strh	r2, [r4, #22]
 8025034:	f8a4 c018 	strh.w	ip, [r4, #24]
 8025038:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802503c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802503e:	eb02 0e06 	add.w	lr, r2, r6
 8025042:	9a04      	ldr	r2, [sp, #16]
 8025044:	42ba      	cmp	r2, r7
 8025046:	d049      	beq.n	80250dc <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8025048:	9a02      	ldr	r2, [sp, #8]
 802504a:	1b5b      	subs	r3, r3, r5
 802504c:	eba2 010e 	sub.w	r1, r2, lr
 8025050:	440e      	add	r6, r1
 8025052:	0176      	lsls	r6, r6, #5
 8025054:	fb96 f8f5 	sdiv	r8, r6, r5
 8025058:	fb05 6618 	mls	r6, r5, r8, r6
 802505c:	2e00      	cmp	r6, #0
 802505e:	bfbc      	itt	lt
 8025060:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025064:	1976      	addlt	r6, r6, r5
 8025066:	f108 0201 	add.w	r2, r8, #1
 802506a:	9211      	str	r2, [sp, #68]	; 0x44
 802506c:	199b      	adds	r3, r3, r6
 802506e:	8b20      	ldrh	r0, [r4, #24]
 8025070:	8b61      	ldrh	r1, [r4, #26]
 8025072:	bf54      	ite	pl
 8025074:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8025078:	46c1      	movmi	r9, r8
 802507a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802507c:	bf58      	it	pl
 802507e:	1b5b      	subpl	r3, r3, r5
 8025080:	4448      	add	r0, r9
 8025082:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025086:	4417      	add	r7, r2
 8025088:	44ce      	add	lr, r9
 802508a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802508c:	b200      	sxth	r0, r0
 802508e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8025092:	b209      	sxth	r1, r1
 8025094:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025098:	443a      	add	r2, r7
 802509a:	8320      	strh	r0, [r4, #24]
 802509c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80250a0:	8361      	strh	r1, [r4, #26]
 80250a2:	4552      	cmp	r2, sl
 80250a4:	d017      	beq.n	80250d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 80250a6:	ea50 0201 	orrs.w	r2, r0, r1
 80250aa:	d00d      	beq.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80250ac:	f1b9 0f00 	cmp.w	r9, #0
 80250b0:	db0a      	blt.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80250b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80250b4:	4549      	cmp	r1, r9
 80250b6:	dd07      	ble.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80250b8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80250bc:	4288      	cmp	r0, r1
 80250be:	d336      	bcc.n	802512e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80250c0:	f04f 0201 	mov.w	r2, #1
 80250c4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80250c8:	9a00      	ldr	r2, [sp, #0]
 80250ca:	82a7      	strh	r7, [r4, #20]
 80250cc:	82e2      	strh	r2, [r4, #22]
 80250ce:	f8a4 c018 	strh.w	ip, [r4, #24]
 80250d2:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80250d6:	9a04      	ldr	r2, [sp, #16]
 80250d8:	42ba      	cmp	r2, r7
 80250da:	d1c7      	bne.n	802506c <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80250dc:	9b02      	ldr	r3, [sp, #8]
 80250de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80250e0:	eba3 0e0e 	sub.w	lr, r3, lr
 80250e4:	8b23      	ldrh	r3, [r4, #24]
 80250e6:	3120      	adds	r1, #32
 80250e8:	4473      	add	r3, lr
 80250ea:	8323      	strh	r3, [r4, #24]
 80250ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250ee:	1ac9      	subs	r1, r1, r3
 80250f0:	8b63      	ldrh	r3, [r4, #26]
 80250f2:	fb0e 3e01 	mla	lr, lr, r1, r3
 80250f6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80250fa:	e611      	b.n	8024d20 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80250fc:	f04f 36ff 	mov.w	r6, #4294967295
 8025100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025102:	426d      	negs	r5, r5
 8025104:	960e      	str	r6, [sp, #56]	; 0x38
 8025106:	2600      	movs	r6, #0
 8025108:	434b      	muls	r3, r1
 802510a:	e763      	b.n	8024fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 802510c:	f104 0e14 	add.w	lr, r4, #20
 8025110:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025114:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025118:	f8c8 0000 	str.w	r0, [r8]
 802511c:	f8c8 1004 	str.w	r1, [r8, #4]
 8025120:	6921      	ldr	r1, [r4, #16]
 8025122:	3108      	adds	r1, #8
 8025124:	6121      	str	r1, [r4, #16]
 8025126:	68a1      	ldr	r1, [r4, #8]
 8025128:	3101      	adds	r1, #1
 802512a:	60a1      	str	r1, [r4, #8]
 802512c:	e77f      	b.n	802502e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802512e:	f104 0914 	add.w	r9, r4, #20
 8025132:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025136:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802513a:	f8ca 0000 	str.w	r0, [sl]
 802513e:	f8ca 1004 	str.w	r1, [sl, #4]
 8025142:	6921      	ldr	r1, [r4, #16]
 8025144:	3108      	adds	r1, #8
 8025146:	6121      	str	r1, [r4, #16]
 8025148:	68a1      	ldr	r1, [r4, #8]
 802514a:	3101      	adds	r1, #1
 802514c:	60a1      	str	r1, [r4, #8]
 802514e:	e7bb      	b.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8025150:	f104 0314 	add.w	r3, r4, #20
 8025154:	6925      	ldr	r5, [r4, #16]
 8025156:	cb03      	ldmia	r3!, {r0, r1}
 8025158:	6028      	str	r0, [r5, #0]
 802515a:	6069      	str	r1, [r5, #4]
 802515c:	6923      	ldr	r3, [r4, #16]
 802515e:	3308      	adds	r3, #8
 8025160:	6123      	str	r3, [r4, #16]
 8025162:	68a3      	ldr	r3, [r4, #8]
 8025164:	3301      	adds	r3, #1
 8025166:	60a3      	str	r3, [r4, #8]
 8025168:	e5fd      	b.n	8024d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802516a:	f104 0314 	add.w	r3, r4, #20
 802516e:	6925      	ldr	r5, [r4, #16]
 8025170:	cb03      	ldmia	r3!, {r0, r1}
 8025172:	6028      	str	r0, [r5, #0]
 8025174:	6069      	str	r1, [r5, #4]
 8025176:	6923      	ldr	r3, [r4, #16]
 8025178:	3308      	adds	r3, #8
 802517a:	6123      	str	r3, [r4, #16]
 802517c:	68a3      	ldr	r3, [r4, #8]
 802517e:	3301      	adds	r3, #1
 8025180:	60a3      	str	r3, [r4, #8]
 8025182:	e625      	b.n	8024dd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8025184:	9b05      	ldr	r3, [sp, #20]
 8025186:	ea4f 176b 	mov.w	r7, fp, asr #5
 802518a:	f00b 081f 	and.w	r8, fp, #31
 802518e:	8b20      	ldrh	r0, [r4, #24]
 8025190:	f003 031f 	and.w	r3, r3, #31
 8025194:	4577      	cmp	r7, lr
 8025196:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802519a:	9302      	str	r3, [sp, #8]
 802519c:	9b03      	ldr	r3, [sp, #12]
 802519e:	eba3 050c 	sub.w	r5, r3, ip
 80251a2:	d108      	bne.n	80251b6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 80251a4:	9b02      	ldr	r3, [sp, #8]
 80251a6:	4428      	add	r0, r5
 80251a8:	4498      	add	r8, r3
 80251aa:	8320      	strh	r0, [r4, #24]
 80251ac:	fb05 9508 	mla	r5, r5, r8, r9
 80251b0:	8365      	strh	r5, [r4, #26]
 80251b2:	f7ff bb4f 	b.w	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80251b6:	9b05      	ldr	r3, [sp, #20]
 80251b8:	ebb3 030b 	subs.w	r3, r3, fp
 80251bc:	f100 809c 	bmi.w	80252f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80251c0:	f1c8 0120 	rsb	r1, r8, #32
 80251c4:	2201      	movs	r2, #1
 80251c6:	f04f 0b20 	mov.w	fp, #32
 80251ca:	434d      	muls	r5, r1
 80251cc:	9201      	str	r2, [sp, #4]
 80251ce:	9a01      	ldr	r2, [sp, #4]
 80251d0:	44d8      	add	r8, fp
 80251d2:	fb95 f6f3 	sdiv	r6, r5, r3
 80251d6:	fb03 5516 	mls	r5, r3, r6, r5
 80251da:	4417      	add	r7, r2
 80251dc:	9a00      	ldr	r2, [sp, #0]
 80251de:	2d00      	cmp	r5, #0
 80251e0:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80251e4:	bfbc      	itt	lt
 80251e6:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80251ea:	18ed      	addlt	r5, r5, r3
 80251ec:	eb07 0a02 	add.w	sl, r7, r2
 80251f0:	9204      	str	r2, [sp, #16]
 80251f2:	fb06 9808 	mla	r8, r6, r8, r9
 80251f6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80251fa:	4430      	add	r0, r6
 80251fc:	fa0f f188 	sxth.w	r1, r8
 8025200:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025204:	b200      	sxth	r0, r0
 8025206:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802520a:	8361      	strh	r1, [r4, #26]
 802520c:	8320      	strh	r0, [r4, #24]
 802520e:	45ca      	cmp	sl, r9
 8025210:	d015      	beq.n	802523e <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8025212:	ea50 0201 	orrs.w	r2, r0, r1
 8025216:	d00c      	beq.n	8025232 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025218:	f1b8 0f00 	cmp.w	r8, #0
 802521c:	db09      	blt.n	8025232 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802521e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025220:	4541      	cmp	r1, r8
 8025222:	dd06      	ble.n	8025232 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025224:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025228:	4288      	cmp	r0, r1
 802522a:	d36e      	bcc.n	802530a <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802522c:	2101      	movs	r1, #1
 802522e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025232:	2100      	movs	r1, #0
 8025234:	9a00      	ldr	r2, [sp, #0]
 8025236:	82a7      	strh	r7, [r4, #20]
 8025238:	82e2      	strh	r2, [r4, #22]
 802523a:	8321      	strh	r1, [r4, #24]
 802523c:	8361      	strh	r1, [r4, #26]
 802523e:	45be      	cmp	lr, r7
 8025240:	44b4      	add	ip, r6
 8025242:	d048      	beq.n	80252d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8025244:	9a03      	ldr	r2, [sp, #12]
 8025246:	1aed      	subs	r5, r5, r3
 8025248:	eba2 010c 	sub.w	r1, r2, ip
 802524c:	440e      	add	r6, r1
 802524e:	0176      	lsls	r6, r6, #5
 8025250:	fb96 f8f3 	sdiv	r8, r6, r3
 8025254:	fb03 6618 	mls	r6, r3, r8, r6
 8025258:	2e00      	cmp	r6, #0
 802525a:	bfbc      	itt	lt
 802525c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025260:	18f6      	addlt	r6, r6, r3
 8025262:	f108 0201 	add.w	r2, r8, #1
 8025266:	9205      	str	r2, [sp, #20]
 8025268:	19ad      	adds	r5, r5, r6
 802526a:	8b20      	ldrh	r0, [r4, #24]
 802526c:	8b61      	ldrh	r1, [r4, #26]
 802526e:	bf54      	ite	pl
 8025270:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8025274:	46c1      	movmi	r9, r8
 8025276:	9a01      	ldr	r2, [sp, #4]
 8025278:	bf58      	it	pl
 802527a:	1aed      	subpl	r5, r5, r3
 802527c:	4448      	add	r0, r9
 802527e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8025282:	4417      	add	r7, r2
 8025284:	44cc      	add	ip, r9
 8025286:	9a04      	ldr	r2, [sp, #16]
 8025288:	b200      	sxth	r0, r0
 802528a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802528e:	b209      	sxth	r1, r1
 8025290:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025294:	443a      	add	r2, r7
 8025296:	8320      	strh	r0, [r4, #24]
 8025298:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802529c:	8361      	strh	r1, [r4, #26]
 802529e:	4552      	cmp	r2, sl
 80252a0:	d017      	beq.n	80252d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80252a2:	ea50 0201 	orrs.w	r2, r0, r1
 80252a6:	d00d      	beq.n	80252c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80252a8:	f1b9 0f00 	cmp.w	r9, #0
 80252ac:	db0a      	blt.n	80252c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80252ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80252b0:	4549      	cmp	r1, r9
 80252b2:	dd07      	ble.n	80252c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80252b4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80252b8:	4288      	cmp	r0, r1
 80252ba:	d337      	bcc.n	802532c <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80252bc:	f04f 0201 	mov.w	r2, #1
 80252c0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80252c4:	9a00      	ldr	r2, [sp, #0]
 80252c6:	82a7      	strh	r7, [r4, #20]
 80252c8:	82e2      	strh	r2, [r4, #22]
 80252ca:	f04f 0200 	mov.w	r2, #0
 80252ce:	8322      	strh	r2, [r4, #24]
 80252d0:	8362      	strh	r2, [r4, #26]
 80252d2:	45be      	cmp	lr, r7
 80252d4:	d1c8      	bne.n	8025268 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80252d6:	9b03      	ldr	r3, [sp, #12]
 80252d8:	8b62      	ldrh	r2, [r4, #26]
 80252da:	eba3 0c0c 	sub.w	ip, r3, ip
 80252de:	8b23      	ldrh	r3, [r4, #24]
 80252e0:	4463      	add	r3, ip
 80252e2:	8323      	strh	r3, [r4, #24]
 80252e4:	9b02      	ldr	r3, [sp, #8]
 80252e6:	3320      	adds	r3, #32
 80252e8:	eba3 030b 	sub.w	r3, r3, fp
 80252ec:	fb0c 2c03 	mla	ip, ip, r3, r2
 80252f0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80252f4:	f7ff baae 	b.w	8024854 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80252f8:	f04f 32ff 	mov.w	r2, #4294967295
 80252fc:	fb05 f508 	mul.w	r5, r5, r8
 8025300:	425b      	negs	r3, r3
 8025302:	f04f 0b00 	mov.w	fp, #0
 8025306:	9201      	str	r2, [sp, #4]
 8025308:	e761      	b.n	80251ce <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802530a:	f104 0814 	add.w	r8, r4, #20
 802530e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025312:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025316:	f8c9 0000 	str.w	r0, [r9]
 802531a:	f8c9 1004 	str.w	r1, [r9, #4]
 802531e:	6921      	ldr	r1, [r4, #16]
 8025320:	3108      	adds	r1, #8
 8025322:	6121      	str	r1, [r4, #16]
 8025324:	68a1      	ldr	r1, [r4, #8]
 8025326:	3101      	adds	r1, #1
 8025328:	60a1      	str	r1, [r4, #8]
 802532a:	e782      	b.n	8025232 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802532c:	f104 0914 	add.w	r9, r4, #20
 8025330:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025334:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8025338:	f8ca 0000 	str.w	r0, [sl]
 802533c:	f8ca 1004 	str.w	r1, [sl, #4]
 8025340:	6921      	ldr	r1, [r4, #16]
 8025342:	3108      	adds	r1, #8
 8025344:	6121      	str	r1, [r4, #16]
 8025346:	68a1      	ldr	r1, [r4, #8]
 8025348:	3101      	adds	r1, #1
 802534a:	60a1      	str	r1, [r4, #8]
 802534c:	e7ba      	b.n	80252c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802534e <_ZN8touchgfx7Outline6lineToEii>:
 802534e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025350:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025352:	4604      	mov	r4, r0
 8025354:	460d      	mov	r5, r1
 8025356:	4616      	mov	r6, r2
 8025358:	079b      	lsls	r3, r3, #30
 802535a:	d526      	bpl.n	80253aa <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802535c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8025360:	ea85 0001 	eor.w	r0, r5, r1
 8025364:	ea86 0302 	eor.w	r3, r6, r2
 8025368:	4303      	orrs	r3, r0
 802536a:	d01e      	beq.n	80253aa <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802536c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802536e:	114b      	asrs	r3, r1, #5
 8025370:	9600      	str	r6, [sp, #0]
 8025372:	4283      	cmp	r3, r0
 8025374:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8025376:	bfb8      	it	lt
 8025378:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802537a:	3301      	adds	r3, #1
 802537c:	4283      	cmp	r3, r0
 802537e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025380:	bfc8      	it	gt
 8025382:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025384:	116b      	asrs	r3, r5, #5
 8025386:	4283      	cmp	r3, r0
 8025388:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802538a:	bfb8      	it	lt
 802538c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802538e:	3301      	adds	r3, #1
 8025390:	4283      	cmp	r3, r0
 8025392:	4620      	mov	r0, r4
 8025394:	bfc8      	it	gt
 8025396:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025398:	462b      	mov	r3, r5
 802539a:	f7ff f9e3 	bl	8024764 <_ZN8touchgfx7Outline10renderLineEiiii>
 802539e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80253a0:	f043 0301 	orr.w	r3, r3, #1
 80253a4:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80253a8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80253aa:	b002      	add	sp, #8
 80253ac:	bd70      	pop	{r4, r5, r6, pc}

080253ae <_ZN8touchgfx7Outline6moveToEii>:
 80253ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80253b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80253b2:	4615      	mov	r5, r2
 80253b4:	4604      	mov	r4, r0
 80253b6:	460e      	mov	r6, r1
 80253b8:	079a      	lsls	r2, r3, #30
 80253ba:	d401      	bmi.n	80253c0 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80253bc:	f7ff f98c 	bl	80246d8 <_ZN8touchgfx7Outline5resetEv>
 80253c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80253c2:	07db      	lsls	r3, r3, #31
 80253c4:	d504      	bpl.n	80253d0 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80253c6:	4620      	mov	r0, r4
 80253c8:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80253cc:	f7ff ffbf 	bl	802534e <_ZN8touchgfx7Outline6lineToEii>
 80253d0:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80253d4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80253d8:	116f      	asrs	r7, r5, #5
 80253da:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80253de:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80253e2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80253e6:	4291      	cmp	r1, r2
 80253e8:	d015      	beq.n	8025416 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80253ea:	8b61      	ldrh	r1, [r4, #26]
 80253ec:	8b22      	ldrh	r2, [r4, #24]
 80253ee:	430a      	orrs	r2, r1
 80253f0:	d00b      	beq.n	802540a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	db09      	blt.n	802540a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80253f8:	429a      	cmp	r2, r3
 80253fa:	dd06      	ble.n	802540a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80253fc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025400:	429a      	cmp	r2, r3
 8025402:	d30d      	bcc.n	8025420 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8025404:	2301      	movs	r3, #1
 8025406:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802540a:	2300      	movs	r3, #0
 802540c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025410:	82e7      	strh	r7, [r4, #22]
 8025412:	8323      	strh	r3, [r4, #24]
 8025414:	8363      	strh	r3, [r4, #26]
 8025416:	61e6      	str	r6, [r4, #28]
 8025418:	62a5      	str	r5, [r4, #40]	; 0x28
 802541a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802541e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025420:	f104 0314 	add.w	r3, r4, #20
 8025424:	6922      	ldr	r2, [r4, #16]
 8025426:	cb03      	ldmia	r3!, {r0, r1}
 8025428:	6010      	str	r0, [r2, #0]
 802542a:	6051      	str	r1, [r2, #4]
 802542c:	6923      	ldr	r3, [r4, #16]
 802542e:	3308      	adds	r3, #8
 8025430:	6123      	str	r3, [r4, #16]
 8025432:	68a3      	ldr	r3, [r4, #8]
 8025434:	3301      	adds	r3, #1
 8025436:	60a3      	str	r3, [r4, #8]
 8025438:	e7e7      	b.n	802540a <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802543a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802543a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802543e:	b0d1      	sub	sp, #324	; 0x144
 8025440:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025444:	466c      	mov	r4, sp
 8025446:	1a0d      	subs	r5, r1, r0
 8025448:	f100 0208 	add.w	r2, r0, #8
 802544c:	2d48      	cmp	r5, #72	; 0x48
 802544e:	f340 80ba 	ble.w	80255c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025452:	112d      	asrs	r5, r5, #4
 8025454:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8025458:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802545c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8025460:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025464:	f9b0 8000 	ldrsh.w	r8, [r0]
 8025468:	681e      	ldr	r6, [r3, #0]
 802546a:	6006      	str	r6, [r0, #0]
 802546c:	685e      	ldr	r6, [r3, #4]
 802546e:	6046      	str	r6, [r0, #4]
 8025470:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025474:	f8a3 c004 	strh.w	ip, [r3, #4]
 8025478:	f8a3 e002 	strh.w	lr, [r3, #2]
 802547c:	80df      	strh	r7, [r3, #6]
 802547e:	f1a1 0308 	sub.w	r3, r1, #8
 8025482:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8025486:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802548a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802548e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025492:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025496:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802549a:	45ac      	cmp	ip, r5
 802549c:	dd0f      	ble.n	80254be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802549e:	681d      	ldr	r5, [r3, #0]
 80254a0:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80254a4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80254a8:	6015      	str	r5, [r2, #0]
 80254aa:	685d      	ldr	r5, [r3, #4]
 80254ac:	6055      	str	r5, [r2, #4]
 80254ae:	f821 7c08 	strh.w	r7, [r1, #-8]
 80254b2:	f821 6c06 	strh.w	r6, [r1, #-6]
 80254b6:	f821 ec04 	strh.w	lr, [r1, #-4]
 80254ba:	f821 cc02 	strh.w	ip, [r1, #-2]
 80254be:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80254c2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80254c6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80254ca:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80254ce:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80254d2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80254d6:	4565      	cmp	r5, ip
 80254d8:	dd0d      	ble.n	80254f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80254da:	6815      	ldr	r5, [r2, #0]
 80254dc:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80254e0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80254e4:	6005      	str	r5, [r0, #0]
 80254e6:	6855      	ldr	r5, [r2, #4]
 80254e8:	8107      	strh	r7, [r0, #8]
 80254ea:	6045      	str	r5, [r0, #4]
 80254ec:	8146      	strh	r6, [r0, #10]
 80254ee:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80254f2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80254f6:	f9b0 7000 	ldrsh.w	r7, [r0]
 80254fa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80254fe:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8025502:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025506:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802550a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802550e:	45ac      	cmp	ip, r5
 8025510:	dd0f      	ble.n	8025532 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025512:	681d      	ldr	r5, [r3, #0]
 8025514:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025518:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802551c:	6005      	str	r5, [r0, #0]
 802551e:	685d      	ldr	r5, [r3, #4]
 8025520:	6045      	str	r5, [r0, #4]
 8025522:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025526:	f821 6c06 	strh.w	r6, [r1, #-6]
 802552a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802552e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025532:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8025536:	f102 0508 	add.w	r5, r2, #8
 802553a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802553e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8025542:	462f      	mov	r7, r5
 8025544:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8025548:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802554c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8025550:	45b2      	cmp	sl, r6
 8025552:	dc18      	bgt.n	8025586 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025554:	3b08      	subs	r3, #8
 8025556:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802555a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802555e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8025562:	45b2      	cmp	sl, r6
 8025564:	dbf6      	blt.n	8025554 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8025566:	42ab      	cmp	r3, r5
 8025568:	681e      	ldr	r6, [r3, #0]
 802556a:	d30e      	bcc.n	802558a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802556c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8025570:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025574:	602e      	str	r6, [r5, #0]
 8025576:	685e      	ldr	r6, [r3, #4]
 8025578:	606e      	str	r6, [r5, #4]
 802557a:	f8a3 9000 	strh.w	r9, [r3]
 802557e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8025582:	809f      	strh	r7, [r3, #4]
 8025584:	80da      	strh	r2, [r3, #6]
 8025586:	462a      	mov	r2, r5
 8025588:	e7d3      	b.n	8025532 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802558a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802558e:	6006      	str	r6, [r0, #0]
 8025590:	685e      	ldr	r6, [r3, #4]
 8025592:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025596:	6046      	str	r6, [r0, #4]
 8025598:	1a1e      	subs	r6, r3, r0
 802559a:	80da      	strh	r2, [r3, #6]
 802559c:	1b4a      	subs	r2, r1, r5
 802559e:	f8a3 e000 	strh.w	lr, [r3]
 80255a2:	10d2      	asrs	r2, r2, #3
 80255a4:	f8a3 c002 	strh.w	ip, [r3, #2]
 80255a8:	f8a3 8004 	strh.w	r8, [r3, #4]
 80255ac:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80255b0:	bfb5      	itete	lt
 80255b2:	e9c4 0300 	strdlt	r0, r3, [r4]
 80255b6:	4607      	movge	r7, r0
 80255b8:	460b      	movlt	r3, r1
 80255ba:	e9c4 5100 	strdge	r5, r1, [r4]
 80255be:	4638      	mov	r0, r7
 80255c0:	3408      	adds	r4, #8
 80255c2:	4619      	mov	r1, r3
 80255c4:	e73f      	b.n	8025446 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80255c6:	4291      	cmp	r1, r2
 80255c8:	d925      	bls.n	8025616 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80255ca:	f1a2 0310 	sub.w	r3, r2, #16
 80255ce:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80255d2:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80255d6:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80255da:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80255de:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80255e2:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80255e6:	42b5      	cmp	r5, r6
 80255e8:	dd13      	ble.n	8025612 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80255ea:	461d      	mov	r5, r3
 80255ec:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80255f0:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80255f4:	3b08      	subs	r3, #8
 80255f6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80255fa:	619e      	str	r6, [r3, #24]
 80255fc:	42a8      	cmp	r0, r5
 80255fe:	686e      	ldr	r6, [r5, #4]
 8025600:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025604:	61de      	str	r6, [r3, #28]
 8025606:	825f      	strh	r7, [r3, #18]
 8025608:	f8a3 8014 	strh.w	r8, [r3, #20]
 802560c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8025610:	d1dd      	bne.n	80255ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8025612:	3208      	adds	r2, #8
 8025614:	e7d7      	b.n	80255c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025616:	466b      	mov	r3, sp
 8025618:	429c      	cmp	r4, r3
 802561a:	d903      	bls.n	8025624 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802561c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8025620:	3c08      	subs	r4, #8
 8025622:	e710      	b.n	8025446 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025624:	b051      	add	sp, #324	; 0x144
 8025626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802562a <_ZN8touchgfx7Outline9sortCellsEv>:
 802562a:	6881      	ldr	r1, [r0, #8]
 802562c:	b111      	cbz	r1, 8025634 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802562e:	68c0      	ldr	r0, [r0, #12]
 8025630:	f7ff bf03 	b.w	802543a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025634:	4770      	bx	lr

08025636 <_ZN8touchgfx7Outline8getCellsEv>:
 8025636:	b510      	push	{r4, lr}
 8025638:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802563a:	4604      	mov	r4, r0
 802563c:	07da      	lsls	r2, r3, #31
 802563e:	d507      	bpl.n	8025650 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8025640:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025644:	f7ff fe83 	bl	802534e <_ZN8touchgfx7Outline6lineToEii>
 8025648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802564a:	f023 0301 	bic.w	r3, r3, #1
 802564e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025652:	079b      	lsls	r3, r3, #30
 8025654:	d51a      	bpl.n	802568c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8025656:	8b62      	ldrh	r2, [r4, #26]
 8025658:	8b23      	ldrh	r3, [r4, #24]
 802565a:	4313      	orrs	r3, r2
 802565c:	d00d      	beq.n	802567a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802565e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025662:	2b00      	cmp	r3, #0
 8025664:	db09      	blt.n	802567a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025666:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025668:	4293      	cmp	r3, r2
 802566a:	da06      	bge.n	802567a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802566c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8025670:	429a      	cmp	r2, r3
 8025672:	d80d      	bhi.n	8025690 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025674:	2301      	movs	r3, #1
 8025676:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802567a:	68a0      	ldr	r0, [r4, #8]
 802567c:	b138      	cbz	r0, 802568e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802567e:	4620      	mov	r0, r4
 8025680:	f7ff ffd3 	bl	802562a <_ZN8touchgfx7Outline9sortCellsEv>
 8025684:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025686:	f023 0302 	bic.w	r3, r3, #2
 802568a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802568c:	68e0      	ldr	r0, [r4, #12]
 802568e:	bd10      	pop	{r4, pc}
 8025690:	f104 0314 	add.w	r3, r4, #20
 8025694:	6922      	ldr	r2, [r4, #16]
 8025696:	cb03      	ldmia	r3!, {r0, r1}
 8025698:	6010      	str	r0, [r2, #0]
 802569a:	6051      	str	r1, [r2, #4]
 802569c:	6923      	ldr	r3, [r4, #16]
 802569e:	3308      	adds	r3, #8
 80256a0:	6123      	str	r3, [r4, #16]
 80256a2:	68a3      	ldr	r3, [r4, #8]
 80256a4:	3301      	adds	r3, #1
 80256a6:	60a3      	str	r3, [r4, #8]
 80256a8:	e7e7      	b.n	802567a <_ZN8touchgfx7Outline8getCellsEv+0x44>

080256aa <_ZN8touchgfx8ScanlineD1Ev>:
 80256aa:	4770      	bx	lr

080256ac <_ZN8touchgfx8ScanlineD0Ev>:
 80256ac:	b510      	push	{r4, lr}
 80256ae:	4604      	mov	r4, r0
 80256b0:	2124      	movs	r1, #36	; 0x24
 80256b2:	f000 f887 	bl	80257c4 <_ZdlPvj>
 80256b6:	4620      	mov	r0, r4
 80256b8:	bd10      	pop	{r4, pc}

080256ba <_ZN8touchgfx8Scanline5resetEv>:
 80256ba:	b510      	push	{r4, lr}
 80256bc:	4604      	mov	r4, r0
 80256be:	f7f2 ff33 	bl	8018528 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80256c2:	61a0      	str	r0, [r4, #24]
 80256c4:	f7f2 ff36 	bl	8018534 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80256c8:	61e0      	str	r0, [r4, #28]
 80256ca:	f7f2 ff39 	bl	8018540 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80256ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80256d2:	6220      	str	r0, [r4, #32]
 80256d4:	6160      	str	r0, [r4, #20]
 80256d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80256da:	69e3      	ldr	r3, [r4, #28]
 80256dc:	6123      	str	r3, [r4, #16]
 80256de:	2300      	movs	r3, #0
 80256e0:	60e3      	str	r3, [r4, #12]
 80256e2:	bd10      	pop	{r4, pc}

080256e4 <_ZN8touchgfx8ScanlineC1Ev>:
 80256e4:	4b07      	ldr	r3, [pc, #28]	; (8025704 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80256e6:	b510      	push	{r4, lr}
 80256e8:	6003      	str	r3, [r0, #0]
 80256ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80256ee:	4604      	mov	r4, r0
 80256f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80256f4:	2300      	movs	r3, #0
 80256f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80256fa:	6143      	str	r3, [r0, #20]
 80256fc:	f7ff ffdd 	bl	80256ba <_ZN8touchgfx8Scanline5resetEv>
 8025700:	4620      	mov	r0, r4
 8025702:	bd10      	pop	{r4, pc}
 8025704:	0802b9bc 	.word	0x0802b9bc

08025708 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8025708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802570c:	1e0c      	subs	r4, r1, #0
 802570e:	4605      	mov	r5, r0
 8025710:	4617      	mov	r7, r2
 8025712:	461e      	mov	r6, r3
 8025714:	da03      	bge.n	802571e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8025716:	4426      	add	r6, r4
 8025718:	2e01      	cmp	r6, #1
 802571a:	d421      	bmi.n	8025760 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802571c:	2400      	movs	r4, #0
 802571e:	f7f2 fefd 	bl	801851c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025722:	42a0      	cmp	r0, r4
 8025724:	d91c      	bls.n	8025760 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025726:	eb04 0806 	add.w	r8, r4, r6
 802572a:	f7f2 fef7 	bl	801851c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802572e:	4580      	cmp	r8, r0
 8025730:	d902      	bls.n	8025738 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8025732:	f7f2 fef3 	bl	801851c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025736:	1b06      	subs	r6, r0, r4
 8025738:	69a8      	ldr	r0, [r5, #24]
 802573a:	4632      	mov	r2, r6
 802573c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8025740:	4420      	add	r0, r4
 8025742:	f7f4 fc53 	bl	8019fec <_ZN8touchgfx6memsetEPvhm>
 8025746:	686b      	ldr	r3, [r5, #4]
 8025748:	b2b2      	uxth	r2, r6
 802574a:	3301      	adds	r3, #1
 802574c:	42a3      	cmp	r3, r4
 802574e:	696b      	ldr	r3, [r5, #20]
 8025750:	d108      	bne.n	8025764 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8025752:	8819      	ldrh	r1, [r3, #0]
 8025754:	440a      	add	r2, r1
 8025756:	801a      	strh	r2, [r3, #0]
 8025758:	3c01      	subs	r4, #1
 802575a:	4434      	add	r4, r6
 802575c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8025760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025764:	1c99      	adds	r1, r3, #2
 8025766:	6169      	str	r1, [r5, #20]
 8025768:	805a      	strh	r2, [r3, #2]
 802576a:	692b      	ldr	r3, [r5, #16]
 802576c:	1c9a      	adds	r2, r3, #2
 802576e:	612a      	str	r2, [r5, #16]
 8025770:	805c      	strh	r4, [r3, #2]
 8025772:	68eb      	ldr	r3, [r5, #12]
 8025774:	3301      	adds	r3, #1
 8025776:	60eb      	str	r3, [r5, #12]
 8025778:	e7ee      	b.n	8025758 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802577a <_ZN8touchgfx15RenderingBufferD1Ev>:
 802577a:	4770      	bx	lr

0802577c <_ZN8touchgfx15RenderingBufferD0Ev>:
 802577c:	b510      	push	{r4, lr}
 802577e:	4604      	mov	r4, r0
 8025780:	2118      	movs	r1, #24
 8025782:	f000 f81f 	bl	80257c4 <_ZdlPvj>
 8025786:	4620      	mov	r0, r4
 8025788:	bd10      	pop	{r4, pc}
	...

0802578c <_ZN8touchgfx15RenderingBufferC1Ev>:
 802578c:	4a04      	ldr	r2, [pc, #16]	; (80257a0 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802578e:	6002      	str	r2, [r0, #0]
 8025790:	2200      	movs	r2, #0
 8025792:	6042      	str	r2, [r0, #4]
 8025794:	7202      	strb	r2, [r0, #8]
 8025796:	6142      	str	r2, [r0, #20]
 8025798:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802579c:	4770      	bx	lr
 802579e:	bf00      	nop
 80257a0:	0802b9cc 	.word	0x0802b9cc

080257a4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 80257a4:	60c3      	str	r3, [r0, #12]
 80257a6:	9b00      	ldr	r3, [sp, #0]
 80257a8:	6041      	str	r1, [r0, #4]
 80257aa:	6103      	str	r3, [r0, #16]
 80257ac:	9b01      	ldr	r3, [sp, #4]
 80257ae:	7202      	strb	r2, [r0, #8]
 80257b0:	6143      	str	r3, [r0, #20]
 80257b2:	4770      	bx	lr

080257b4 <__aeabi_atexit>:
 80257b4:	460b      	mov	r3, r1
 80257b6:	4601      	mov	r1, r0
 80257b8:	4618      	mov	r0, r3
 80257ba:	f000 b853 	b.w	8025864 <__cxa_atexit>

080257be <__cxa_pure_virtual>:
 80257be:	b508      	push	{r3, lr}
 80257c0:	f000 f820 	bl	8025804 <_ZSt9terminatev>

080257c4 <_ZdlPvj>:
 80257c4:	f000 b80f 	b.w	80257e6 <_ZdlPv>

080257c8 <__cxa_guard_acquire>:
 80257c8:	6803      	ldr	r3, [r0, #0]
 80257ca:	07db      	lsls	r3, r3, #31
 80257cc:	d406      	bmi.n	80257dc <__cxa_guard_acquire+0x14>
 80257ce:	7843      	ldrb	r3, [r0, #1]
 80257d0:	b103      	cbz	r3, 80257d4 <__cxa_guard_acquire+0xc>
 80257d2:	deff      	udf	#255	; 0xff
 80257d4:	2301      	movs	r3, #1
 80257d6:	7043      	strb	r3, [r0, #1]
 80257d8:	4618      	mov	r0, r3
 80257da:	4770      	bx	lr
 80257dc:	2000      	movs	r0, #0
 80257de:	4770      	bx	lr

080257e0 <__cxa_guard_release>:
 80257e0:	2301      	movs	r3, #1
 80257e2:	6003      	str	r3, [r0, #0]
 80257e4:	4770      	bx	lr

080257e6 <_ZdlPv>:
 80257e6:	f000 b88f 	b.w	8025908 <free>

080257ea <_ZN10__cxxabiv111__terminateEPFvvE>:
 80257ea:	b508      	push	{r3, lr}
 80257ec:	4780      	blx	r0
 80257ee:	f000 f80e 	bl	802580e <abort>
	...

080257f4 <_ZSt13get_terminatev>:
 80257f4:	4b02      	ldr	r3, [pc, #8]	; (8025800 <_ZSt13get_terminatev+0xc>)
 80257f6:	6818      	ldr	r0, [r3, #0]
 80257f8:	f3bf 8f5b 	dmb	ish
 80257fc:	4770      	bx	lr
 80257fe:	bf00      	nop
 8025800:	20000094 	.word	0x20000094

08025804 <_ZSt9terminatev>:
 8025804:	b508      	push	{r3, lr}
 8025806:	f7ff fff5 	bl	80257f4 <_ZSt13get_terminatev>
 802580a:	f7ff ffee 	bl	80257ea <_ZN10__cxxabiv111__terminateEPFvvE>

0802580e <abort>:
 802580e:	b508      	push	{r3, lr}
 8025810:	2006      	movs	r0, #6
 8025812:	f000 fc71 	bl	80260f8 <raise>
 8025816:	2001      	movs	r0, #1
 8025818:	f7dd f82e 	bl	8002878 <_exit>

0802581c <__assert_func>:
 802581c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802581e:	461c      	mov	r4, r3
 8025820:	4b09      	ldr	r3, [pc, #36]	; (8025848 <__assert_func+0x2c>)
 8025822:	681b      	ldr	r3, [r3, #0]
 8025824:	4605      	mov	r5, r0
 8025826:	68d8      	ldr	r0, [r3, #12]
 8025828:	b152      	cbz	r2, 8025840 <__assert_func+0x24>
 802582a:	4b08      	ldr	r3, [pc, #32]	; (802584c <__assert_func+0x30>)
 802582c:	9100      	str	r1, [sp, #0]
 802582e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8025832:	4907      	ldr	r1, [pc, #28]	; (8025850 <__assert_func+0x34>)
 8025834:	462b      	mov	r3, r5
 8025836:	4622      	mov	r2, r4
 8025838:	f000 f828 	bl	802588c <fiprintf>
 802583c:	f7ff ffe7 	bl	802580e <abort>
 8025840:	4b04      	ldr	r3, [pc, #16]	; (8025854 <__assert_func+0x38>)
 8025842:	461a      	mov	r2, r3
 8025844:	e7f2      	b.n	802582c <__assert_func+0x10>
 8025846:	bf00      	nop
 8025848:	20000098 	.word	0x20000098
 802584c:	0802b9d4 	.word	0x0802b9d4
 8025850:	0802b9e1 	.word	0x0802b9e1
 8025854:	0802ba0f 	.word	0x0802ba0f

08025858 <atexit>:
 8025858:	2300      	movs	r3, #0
 802585a:	4601      	mov	r1, r0
 802585c:	461a      	mov	r2, r3
 802585e:	4618      	mov	r0, r3
 8025860:	f000 bd26 	b.w	80262b0 <__register_exitproc>

08025864 <__cxa_atexit>:
 8025864:	b510      	push	{r4, lr}
 8025866:	4c05      	ldr	r4, [pc, #20]	; (802587c <__cxa_atexit+0x18>)
 8025868:	4613      	mov	r3, r2
 802586a:	b12c      	cbz	r4, 8025878 <__cxa_atexit+0x14>
 802586c:	460a      	mov	r2, r1
 802586e:	4601      	mov	r1, r0
 8025870:	2002      	movs	r0, #2
 8025872:	f000 fd1d 	bl	80262b0 <__register_exitproc>
 8025876:	bd10      	pop	{r4, pc}
 8025878:	4620      	mov	r0, r4
 802587a:	e7fc      	b.n	8025876 <__cxa_atexit+0x12>
 802587c:	080262b1 	.word	0x080262b1

08025880 <__errno>:
 8025880:	4b01      	ldr	r3, [pc, #4]	; (8025888 <__errno+0x8>)
 8025882:	6818      	ldr	r0, [r3, #0]
 8025884:	4770      	bx	lr
 8025886:	bf00      	nop
 8025888:	20000098 	.word	0x20000098

0802588c <fiprintf>:
 802588c:	b40e      	push	{r1, r2, r3}
 802588e:	b503      	push	{r0, r1, lr}
 8025890:	4601      	mov	r1, r0
 8025892:	ab03      	add	r3, sp, #12
 8025894:	4805      	ldr	r0, [pc, #20]	; (80258ac <fiprintf+0x20>)
 8025896:	f853 2b04 	ldr.w	r2, [r3], #4
 802589a:	6800      	ldr	r0, [r0, #0]
 802589c:	9301      	str	r3, [sp, #4]
 802589e:	f000 f921 	bl	8025ae4 <_vfiprintf_r>
 80258a2:	b002      	add	sp, #8
 80258a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80258a8:	b003      	add	sp, #12
 80258aa:	4770      	bx	lr
 80258ac:	20000098 	.word	0x20000098

080258b0 <__libc_init_array>:
 80258b0:	b570      	push	{r4, r5, r6, lr}
 80258b2:	4e0d      	ldr	r6, [pc, #52]	; (80258e8 <__libc_init_array+0x38>)
 80258b4:	4c0d      	ldr	r4, [pc, #52]	; (80258ec <__libc_init_array+0x3c>)
 80258b6:	1ba4      	subs	r4, r4, r6
 80258b8:	10a4      	asrs	r4, r4, #2
 80258ba:	2500      	movs	r5, #0
 80258bc:	42a5      	cmp	r5, r4
 80258be:	d109      	bne.n	80258d4 <__libc_init_array+0x24>
 80258c0:	4e0b      	ldr	r6, [pc, #44]	; (80258f0 <__libc_init_array+0x40>)
 80258c2:	4c0c      	ldr	r4, [pc, #48]	; (80258f4 <__libc_init_array+0x44>)
 80258c4:	f000 ffe4 	bl	8026890 <_init>
 80258c8:	1ba4      	subs	r4, r4, r6
 80258ca:	10a4      	asrs	r4, r4, #2
 80258cc:	2500      	movs	r5, #0
 80258ce:	42a5      	cmp	r5, r4
 80258d0:	d105      	bne.n	80258de <__libc_init_array+0x2e>
 80258d2:	bd70      	pop	{r4, r5, r6, pc}
 80258d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80258d8:	4798      	blx	r3
 80258da:	3501      	adds	r5, #1
 80258dc:	e7ee      	b.n	80258bc <__libc_init_array+0xc>
 80258de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80258e2:	4798      	blx	r3
 80258e4:	3501      	adds	r5, #1
 80258e6:	e7f2      	b.n	80258ce <__libc_init_array+0x1e>
 80258e8:	080e0530 	.word	0x080e0530
 80258ec:	080e0530 	.word	0x080e0530
 80258f0:	080e0530 	.word	0x080e0530
 80258f4:	080e0544 	.word	0x080e0544

080258f8 <malloc>:
 80258f8:	4b02      	ldr	r3, [pc, #8]	; (8025904 <malloc+0xc>)
 80258fa:	4601      	mov	r1, r0
 80258fc:	6818      	ldr	r0, [r3, #0]
 80258fe:	f000 b86d 	b.w	80259dc <_malloc_r>
 8025902:	bf00      	nop
 8025904:	20000098 	.word	0x20000098

08025908 <free>:
 8025908:	4b02      	ldr	r3, [pc, #8]	; (8025914 <free+0xc>)
 802590a:	4601      	mov	r1, r0
 802590c:	6818      	ldr	r0, [r3, #0]
 802590e:	f000 b817 	b.w	8025940 <_free_r>
 8025912:	bf00      	nop
 8025914:	20000098 	.word	0x20000098

08025918 <memcpy>:
 8025918:	b510      	push	{r4, lr}
 802591a:	1e43      	subs	r3, r0, #1
 802591c:	440a      	add	r2, r1
 802591e:	4291      	cmp	r1, r2
 8025920:	d100      	bne.n	8025924 <memcpy+0xc>
 8025922:	bd10      	pop	{r4, pc}
 8025924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025928:	f803 4f01 	strb.w	r4, [r3, #1]!
 802592c:	e7f7      	b.n	802591e <memcpy+0x6>

0802592e <memset>:
 802592e:	4402      	add	r2, r0
 8025930:	4603      	mov	r3, r0
 8025932:	4293      	cmp	r3, r2
 8025934:	d100      	bne.n	8025938 <memset+0xa>
 8025936:	4770      	bx	lr
 8025938:	f803 1b01 	strb.w	r1, [r3], #1
 802593c:	e7f9      	b.n	8025932 <memset+0x4>
	...

08025940 <_free_r>:
 8025940:	b538      	push	{r3, r4, r5, lr}
 8025942:	4605      	mov	r5, r0
 8025944:	2900      	cmp	r1, #0
 8025946:	d045      	beq.n	80259d4 <_free_r+0x94>
 8025948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802594c:	1f0c      	subs	r4, r1, #4
 802594e:	2b00      	cmp	r3, #0
 8025950:	bfb8      	it	lt
 8025952:	18e4      	addlt	r4, r4, r3
 8025954:	f000 feee 	bl	8026734 <__malloc_lock>
 8025958:	4a1f      	ldr	r2, [pc, #124]	; (80259d8 <_free_r+0x98>)
 802595a:	6813      	ldr	r3, [r2, #0]
 802595c:	4610      	mov	r0, r2
 802595e:	b933      	cbnz	r3, 802596e <_free_r+0x2e>
 8025960:	6063      	str	r3, [r4, #4]
 8025962:	6014      	str	r4, [r2, #0]
 8025964:	4628      	mov	r0, r5
 8025966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802596a:	f000 bee4 	b.w	8026736 <__malloc_unlock>
 802596e:	42a3      	cmp	r3, r4
 8025970:	d90c      	bls.n	802598c <_free_r+0x4c>
 8025972:	6821      	ldr	r1, [r4, #0]
 8025974:	1862      	adds	r2, r4, r1
 8025976:	4293      	cmp	r3, r2
 8025978:	bf04      	itt	eq
 802597a:	681a      	ldreq	r2, [r3, #0]
 802597c:	685b      	ldreq	r3, [r3, #4]
 802597e:	6063      	str	r3, [r4, #4]
 8025980:	bf04      	itt	eq
 8025982:	1852      	addeq	r2, r2, r1
 8025984:	6022      	streq	r2, [r4, #0]
 8025986:	6004      	str	r4, [r0, #0]
 8025988:	e7ec      	b.n	8025964 <_free_r+0x24>
 802598a:	4613      	mov	r3, r2
 802598c:	685a      	ldr	r2, [r3, #4]
 802598e:	b10a      	cbz	r2, 8025994 <_free_r+0x54>
 8025990:	42a2      	cmp	r2, r4
 8025992:	d9fa      	bls.n	802598a <_free_r+0x4a>
 8025994:	6819      	ldr	r1, [r3, #0]
 8025996:	1858      	adds	r0, r3, r1
 8025998:	42a0      	cmp	r0, r4
 802599a:	d10b      	bne.n	80259b4 <_free_r+0x74>
 802599c:	6820      	ldr	r0, [r4, #0]
 802599e:	4401      	add	r1, r0
 80259a0:	1858      	adds	r0, r3, r1
 80259a2:	4282      	cmp	r2, r0
 80259a4:	6019      	str	r1, [r3, #0]
 80259a6:	d1dd      	bne.n	8025964 <_free_r+0x24>
 80259a8:	6810      	ldr	r0, [r2, #0]
 80259aa:	6852      	ldr	r2, [r2, #4]
 80259ac:	605a      	str	r2, [r3, #4]
 80259ae:	4401      	add	r1, r0
 80259b0:	6019      	str	r1, [r3, #0]
 80259b2:	e7d7      	b.n	8025964 <_free_r+0x24>
 80259b4:	d902      	bls.n	80259bc <_free_r+0x7c>
 80259b6:	230c      	movs	r3, #12
 80259b8:	602b      	str	r3, [r5, #0]
 80259ba:	e7d3      	b.n	8025964 <_free_r+0x24>
 80259bc:	6820      	ldr	r0, [r4, #0]
 80259be:	1821      	adds	r1, r4, r0
 80259c0:	428a      	cmp	r2, r1
 80259c2:	bf04      	itt	eq
 80259c4:	6811      	ldreq	r1, [r2, #0]
 80259c6:	6852      	ldreq	r2, [r2, #4]
 80259c8:	6062      	str	r2, [r4, #4]
 80259ca:	bf04      	itt	eq
 80259cc:	1809      	addeq	r1, r1, r0
 80259ce:	6021      	streq	r1, [r4, #0]
 80259d0:	605c      	str	r4, [r3, #4]
 80259d2:	e7c7      	b.n	8025964 <_free_r+0x24>
 80259d4:	bd38      	pop	{r3, r4, r5, pc}
 80259d6:	bf00      	nop
 80259d8:	2000b48c 	.word	0x2000b48c

080259dc <_malloc_r>:
 80259dc:	b570      	push	{r4, r5, r6, lr}
 80259de:	1ccd      	adds	r5, r1, #3
 80259e0:	f025 0503 	bic.w	r5, r5, #3
 80259e4:	3508      	adds	r5, #8
 80259e6:	2d0c      	cmp	r5, #12
 80259e8:	bf38      	it	cc
 80259ea:	250c      	movcc	r5, #12
 80259ec:	2d00      	cmp	r5, #0
 80259ee:	4606      	mov	r6, r0
 80259f0:	db01      	blt.n	80259f6 <_malloc_r+0x1a>
 80259f2:	42a9      	cmp	r1, r5
 80259f4:	d903      	bls.n	80259fe <_malloc_r+0x22>
 80259f6:	230c      	movs	r3, #12
 80259f8:	6033      	str	r3, [r6, #0]
 80259fa:	2000      	movs	r0, #0
 80259fc:	bd70      	pop	{r4, r5, r6, pc}
 80259fe:	f000 fe99 	bl	8026734 <__malloc_lock>
 8025a02:	4a21      	ldr	r2, [pc, #132]	; (8025a88 <_malloc_r+0xac>)
 8025a04:	6814      	ldr	r4, [r2, #0]
 8025a06:	4621      	mov	r1, r4
 8025a08:	b991      	cbnz	r1, 8025a30 <_malloc_r+0x54>
 8025a0a:	4c20      	ldr	r4, [pc, #128]	; (8025a8c <_malloc_r+0xb0>)
 8025a0c:	6823      	ldr	r3, [r4, #0]
 8025a0e:	b91b      	cbnz	r3, 8025a18 <_malloc_r+0x3c>
 8025a10:	4630      	mov	r0, r6
 8025a12:	f000 fb39 	bl	8026088 <_sbrk_r>
 8025a16:	6020      	str	r0, [r4, #0]
 8025a18:	4629      	mov	r1, r5
 8025a1a:	4630      	mov	r0, r6
 8025a1c:	f000 fb34 	bl	8026088 <_sbrk_r>
 8025a20:	1c43      	adds	r3, r0, #1
 8025a22:	d124      	bne.n	8025a6e <_malloc_r+0x92>
 8025a24:	230c      	movs	r3, #12
 8025a26:	6033      	str	r3, [r6, #0]
 8025a28:	4630      	mov	r0, r6
 8025a2a:	f000 fe84 	bl	8026736 <__malloc_unlock>
 8025a2e:	e7e4      	b.n	80259fa <_malloc_r+0x1e>
 8025a30:	680b      	ldr	r3, [r1, #0]
 8025a32:	1b5b      	subs	r3, r3, r5
 8025a34:	d418      	bmi.n	8025a68 <_malloc_r+0x8c>
 8025a36:	2b0b      	cmp	r3, #11
 8025a38:	d90f      	bls.n	8025a5a <_malloc_r+0x7e>
 8025a3a:	600b      	str	r3, [r1, #0]
 8025a3c:	50cd      	str	r5, [r1, r3]
 8025a3e:	18cc      	adds	r4, r1, r3
 8025a40:	4630      	mov	r0, r6
 8025a42:	f000 fe78 	bl	8026736 <__malloc_unlock>
 8025a46:	f104 000b 	add.w	r0, r4, #11
 8025a4a:	1d23      	adds	r3, r4, #4
 8025a4c:	f020 0007 	bic.w	r0, r0, #7
 8025a50:	1ac3      	subs	r3, r0, r3
 8025a52:	d0d3      	beq.n	80259fc <_malloc_r+0x20>
 8025a54:	425a      	negs	r2, r3
 8025a56:	50e2      	str	r2, [r4, r3]
 8025a58:	e7d0      	b.n	80259fc <_malloc_r+0x20>
 8025a5a:	428c      	cmp	r4, r1
 8025a5c:	684b      	ldr	r3, [r1, #4]
 8025a5e:	bf16      	itet	ne
 8025a60:	6063      	strne	r3, [r4, #4]
 8025a62:	6013      	streq	r3, [r2, #0]
 8025a64:	460c      	movne	r4, r1
 8025a66:	e7eb      	b.n	8025a40 <_malloc_r+0x64>
 8025a68:	460c      	mov	r4, r1
 8025a6a:	6849      	ldr	r1, [r1, #4]
 8025a6c:	e7cc      	b.n	8025a08 <_malloc_r+0x2c>
 8025a6e:	1cc4      	adds	r4, r0, #3
 8025a70:	f024 0403 	bic.w	r4, r4, #3
 8025a74:	42a0      	cmp	r0, r4
 8025a76:	d005      	beq.n	8025a84 <_malloc_r+0xa8>
 8025a78:	1a21      	subs	r1, r4, r0
 8025a7a:	4630      	mov	r0, r6
 8025a7c:	f000 fb04 	bl	8026088 <_sbrk_r>
 8025a80:	3001      	adds	r0, #1
 8025a82:	d0cf      	beq.n	8025a24 <_malloc_r+0x48>
 8025a84:	6025      	str	r5, [r4, #0]
 8025a86:	e7db      	b.n	8025a40 <_malloc_r+0x64>
 8025a88:	2000b48c 	.word	0x2000b48c
 8025a8c:	2000b490 	.word	0x2000b490

08025a90 <__sfputc_r>:
 8025a90:	6893      	ldr	r3, [r2, #8]
 8025a92:	3b01      	subs	r3, #1
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	b410      	push	{r4}
 8025a98:	6093      	str	r3, [r2, #8]
 8025a9a:	da08      	bge.n	8025aae <__sfputc_r+0x1e>
 8025a9c:	6994      	ldr	r4, [r2, #24]
 8025a9e:	42a3      	cmp	r3, r4
 8025aa0:	db01      	blt.n	8025aa6 <__sfputc_r+0x16>
 8025aa2:	290a      	cmp	r1, #10
 8025aa4:	d103      	bne.n	8025aae <__sfputc_r+0x1e>
 8025aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025aaa:	f000 bb41 	b.w	8026130 <__swbuf_r>
 8025aae:	6813      	ldr	r3, [r2, #0]
 8025ab0:	1c58      	adds	r0, r3, #1
 8025ab2:	6010      	str	r0, [r2, #0]
 8025ab4:	7019      	strb	r1, [r3, #0]
 8025ab6:	4608      	mov	r0, r1
 8025ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025abc:	4770      	bx	lr

08025abe <__sfputs_r>:
 8025abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ac0:	4606      	mov	r6, r0
 8025ac2:	460f      	mov	r7, r1
 8025ac4:	4614      	mov	r4, r2
 8025ac6:	18d5      	adds	r5, r2, r3
 8025ac8:	42ac      	cmp	r4, r5
 8025aca:	d101      	bne.n	8025ad0 <__sfputs_r+0x12>
 8025acc:	2000      	movs	r0, #0
 8025ace:	e007      	b.n	8025ae0 <__sfputs_r+0x22>
 8025ad0:	463a      	mov	r2, r7
 8025ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ad6:	4630      	mov	r0, r6
 8025ad8:	f7ff ffda 	bl	8025a90 <__sfputc_r>
 8025adc:	1c43      	adds	r3, r0, #1
 8025ade:	d1f3      	bne.n	8025ac8 <__sfputs_r+0xa>
 8025ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025ae4 <_vfiprintf_r>:
 8025ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ae8:	460c      	mov	r4, r1
 8025aea:	b09d      	sub	sp, #116	; 0x74
 8025aec:	4617      	mov	r7, r2
 8025aee:	461d      	mov	r5, r3
 8025af0:	4606      	mov	r6, r0
 8025af2:	b118      	cbz	r0, 8025afc <_vfiprintf_r+0x18>
 8025af4:	6983      	ldr	r3, [r0, #24]
 8025af6:	b90b      	cbnz	r3, 8025afc <_vfiprintf_r+0x18>
 8025af8:	f000 fd2e 	bl	8026558 <__sinit>
 8025afc:	4b7c      	ldr	r3, [pc, #496]	; (8025cf0 <_vfiprintf_r+0x20c>)
 8025afe:	429c      	cmp	r4, r3
 8025b00:	d158      	bne.n	8025bb4 <_vfiprintf_r+0xd0>
 8025b02:	6874      	ldr	r4, [r6, #4]
 8025b04:	89a3      	ldrh	r3, [r4, #12]
 8025b06:	0718      	lsls	r0, r3, #28
 8025b08:	d55e      	bpl.n	8025bc8 <_vfiprintf_r+0xe4>
 8025b0a:	6923      	ldr	r3, [r4, #16]
 8025b0c:	2b00      	cmp	r3, #0
 8025b0e:	d05b      	beq.n	8025bc8 <_vfiprintf_r+0xe4>
 8025b10:	2300      	movs	r3, #0
 8025b12:	9309      	str	r3, [sp, #36]	; 0x24
 8025b14:	2320      	movs	r3, #32
 8025b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025b1a:	2330      	movs	r3, #48	; 0x30
 8025b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025b20:	9503      	str	r5, [sp, #12]
 8025b22:	f04f 0b01 	mov.w	fp, #1
 8025b26:	46b8      	mov	r8, r7
 8025b28:	4645      	mov	r5, r8
 8025b2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025b2e:	b10b      	cbz	r3, 8025b34 <_vfiprintf_r+0x50>
 8025b30:	2b25      	cmp	r3, #37	; 0x25
 8025b32:	d154      	bne.n	8025bde <_vfiprintf_r+0xfa>
 8025b34:	ebb8 0a07 	subs.w	sl, r8, r7
 8025b38:	d00b      	beq.n	8025b52 <_vfiprintf_r+0x6e>
 8025b3a:	4653      	mov	r3, sl
 8025b3c:	463a      	mov	r2, r7
 8025b3e:	4621      	mov	r1, r4
 8025b40:	4630      	mov	r0, r6
 8025b42:	f7ff ffbc 	bl	8025abe <__sfputs_r>
 8025b46:	3001      	adds	r0, #1
 8025b48:	f000 80c2 	beq.w	8025cd0 <_vfiprintf_r+0x1ec>
 8025b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b4e:	4453      	add	r3, sl
 8025b50:	9309      	str	r3, [sp, #36]	; 0x24
 8025b52:	f898 3000 	ldrb.w	r3, [r8]
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	f000 80ba 	beq.w	8025cd0 <_vfiprintf_r+0x1ec>
 8025b5c:	2300      	movs	r3, #0
 8025b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8025b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025b66:	9304      	str	r3, [sp, #16]
 8025b68:	9307      	str	r3, [sp, #28]
 8025b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8025b70:	46a8      	mov	r8, r5
 8025b72:	2205      	movs	r2, #5
 8025b74:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025b78:	485e      	ldr	r0, [pc, #376]	; (8025cf4 <_vfiprintf_r+0x210>)
 8025b7a:	f7da fb49 	bl	8000210 <memchr>
 8025b7e:	9b04      	ldr	r3, [sp, #16]
 8025b80:	bb78      	cbnz	r0, 8025be2 <_vfiprintf_r+0xfe>
 8025b82:	06d9      	lsls	r1, r3, #27
 8025b84:	bf44      	itt	mi
 8025b86:	2220      	movmi	r2, #32
 8025b88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025b8c:	071a      	lsls	r2, r3, #28
 8025b8e:	bf44      	itt	mi
 8025b90:	222b      	movmi	r2, #43	; 0x2b
 8025b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025b96:	782a      	ldrb	r2, [r5, #0]
 8025b98:	2a2a      	cmp	r2, #42	; 0x2a
 8025b9a:	d02a      	beq.n	8025bf2 <_vfiprintf_r+0x10e>
 8025b9c:	9a07      	ldr	r2, [sp, #28]
 8025b9e:	46a8      	mov	r8, r5
 8025ba0:	2000      	movs	r0, #0
 8025ba2:	250a      	movs	r5, #10
 8025ba4:	4641      	mov	r1, r8
 8025ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025baa:	3b30      	subs	r3, #48	; 0x30
 8025bac:	2b09      	cmp	r3, #9
 8025bae:	d969      	bls.n	8025c84 <_vfiprintf_r+0x1a0>
 8025bb0:	b360      	cbz	r0, 8025c0c <_vfiprintf_r+0x128>
 8025bb2:	e024      	b.n	8025bfe <_vfiprintf_r+0x11a>
 8025bb4:	4b50      	ldr	r3, [pc, #320]	; (8025cf8 <_vfiprintf_r+0x214>)
 8025bb6:	429c      	cmp	r4, r3
 8025bb8:	d101      	bne.n	8025bbe <_vfiprintf_r+0xda>
 8025bba:	68b4      	ldr	r4, [r6, #8]
 8025bbc:	e7a2      	b.n	8025b04 <_vfiprintf_r+0x20>
 8025bbe:	4b4f      	ldr	r3, [pc, #316]	; (8025cfc <_vfiprintf_r+0x218>)
 8025bc0:	429c      	cmp	r4, r3
 8025bc2:	bf08      	it	eq
 8025bc4:	68f4      	ldreq	r4, [r6, #12]
 8025bc6:	e79d      	b.n	8025b04 <_vfiprintf_r+0x20>
 8025bc8:	4621      	mov	r1, r4
 8025bca:	4630      	mov	r0, r6
 8025bcc:	f000 fb02 	bl	80261d4 <__swsetup_r>
 8025bd0:	2800      	cmp	r0, #0
 8025bd2:	d09d      	beq.n	8025b10 <_vfiprintf_r+0x2c>
 8025bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8025bd8:	b01d      	add	sp, #116	; 0x74
 8025bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bde:	46a8      	mov	r8, r5
 8025be0:	e7a2      	b.n	8025b28 <_vfiprintf_r+0x44>
 8025be2:	4a44      	ldr	r2, [pc, #272]	; (8025cf4 <_vfiprintf_r+0x210>)
 8025be4:	1a80      	subs	r0, r0, r2
 8025be6:	fa0b f000 	lsl.w	r0, fp, r0
 8025bea:	4318      	orrs	r0, r3
 8025bec:	9004      	str	r0, [sp, #16]
 8025bee:	4645      	mov	r5, r8
 8025bf0:	e7be      	b.n	8025b70 <_vfiprintf_r+0x8c>
 8025bf2:	9a03      	ldr	r2, [sp, #12]
 8025bf4:	1d11      	adds	r1, r2, #4
 8025bf6:	6812      	ldr	r2, [r2, #0]
 8025bf8:	9103      	str	r1, [sp, #12]
 8025bfa:	2a00      	cmp	r2, #0
 8025bfc:	db01      	blt.n	8025c02 <_vfiprintf_r+0x11e>
 8025bfe:	9207      	str	r2, [sp, #28]
 8025c00:	e004      	b.n	8025c0c <_vfiprintf_r+0x128>
 8025c02:	4252      	negs	r2, r2
 8025c04:	f043 0302 	orr.w	r3, r3, #2
 8025c08:	9207      	str	r2, [sp, #28]
 8025c0a:	9304      	str	r3, [sp, #16]
 8025c0c:	f898 3000 	ldrb.w	r3, [r8]
 8025c10:	2b2e      	cmp	r3, #46	; 0x2e
 8025c12:	d10e      	bne.n	8025c32 <_vfiprintf_r+0x14e>
 8025c14:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025c18:	2b2a      	cmp	r3, #42	; 0x2a
 8025c1a:	d138      	bne.n	8025c8e <_vfiprintf_r+0x1aa>
 8025c1c:	9b03      	ldr	r3, [sp, #12]
 8025c1e:	1d1a      	adds	r2, r3, #4
 8025c20:	681b      	ldr	r3, [r3, #0]
 8025c22:	9203      	str	r2, [sp, #12]
 8025c24:	2b00      	cmp	r3, #0
 8025c26:	bfb8      	it	lt
 8025c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8025c2c:	f108 0802 	add.w	r8, r8, #2
 8025c30:	9305      	str	r3, [sp, #20]
 8025c32:	4d33      	ldr	r5, [pc, #204]	; (8025d00 <_vfiprintf_r+0x21c>)
 8025c34:	f898 1000 	ldrb.w	r1, [r8]
 8025c38:	2203      	movs	r2, #3
 8025c3a:	4628      	mov	r0, r5
 8025c3c:	f7da fae8 	bl	8000210 <memchr>
 8025c40:	b140      	cbz	r0, 8025c54 <_vfiprintf_r+0x170>
 8025c42:	2340      	movs	r3, #64	; 0x40
 8025c44:	1b40      	subs	r0, r0, r5
 8025c46:	fa03 f000 	lsl.w	r0, r3, r0
 8025c4a:	9b04      	ldr	r3, [sp, #16]
 8025c4c:	4303      	orrs	r3, r0
 8025c4e:	f108 0801 	add.w	r8, r8, #1
 8025c52:	9304      	str	r3, [sp, #16]
 8025c54:	f898 1000 	ldrb.w	r1, [r8]
 8025c58:	482a      	ldr	r0, [pc, #168]	; (8025d04 <_vfiprintf_r+0x220>)
 8025c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025c5e:	2206      	movs	r2, #6
 8025c60:	f108 0701 	add.w	r7, r8, #1
 8025c64:	f7da fad4 	bl	8000210 <memchr>
 8025c68:	2800      	cmp	r0, #0
 8025c6a:	d037      	beq.n	8025cdc <_vfiprintf_r+0x1f8>
 8025c6c:	4b26      	ldr	r3, [pc, #152]	; (8025d08 <_vfiprintf_r+0x224>)
 8025c6e:	bb1b      	cbnz	r3, 8025cb8 <_vfiprintf_r+0x1d4>
 8025c70:	9b03      	ldr	r3, [sp, #12]
 8025c72:	3307      	adds	r3, #7
 8025c74:	f023 0307 	bic.w	r3, r3, #7
 8025c78:	3308      	adds	r3, #8
 8025c7a:	9303      	str	r3, [sp, #12]
 8025c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c7e:	444b      	add	r3, r9
 8025c80:	9309      	str	r3, [sp, #36]	; 0x24
 8025c82:	e750      	b.n	8025b26 <_vfiprintf_r+0x42>
 8025c84:	fb05 3202 	mla	r2, r5, r2, r3
 8025c88:	2001      	movs	r0, #1
 8025c8a:	4688      	mov	r8, r1
 8025c8c:	e78a      	b.n	8025ba4 <_vfiprintf_r+0xc0>
 8025c8e:	2300      	movs	r3, #0
 8025c90:	f108 0801 	add.w	r8, r8, #1
 8025c94:	9305      	str	r3, [sp, #20]
 8025c96:	4619      	mov	r1, r3
 8025c98:	250a      	movs	r5, #10
 8025c9a:	4640      	mov	r0, r8
 8025c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025ca0:	3a30      	subs	r2, #48	; 0x30
 8025ca2:	2a09      	cmp	r2, #9
 8025ca4:	d903      	bls.n	8025cae <_vfiprintf_r+0x1ca>
 8025ca6:	2b00      	cmp	r3, #0
 8025ca8:	d0c3      	beq.n	8025c32 <_vfiprintf_r+0x14e>
 8025caa:	9105      	str	r1, [sp, #20]
 8025cac:	e7c1      	b.n	8025c32 <_vfiprintf_r+0x14e>
 8025cae:	fb05 2101 	mla	r1, r5, r1, r2
 8025cb2:	2301      	movs	r3, #1
 8025cb4:	4680      	mov	r8, r0
 8025cb6:	e7f0      	b.n	8025c9a <_vfiprintf_r+0x1b6>
 8025cb8:	ab03      	add	r3, sp, #12
 8025cba:	9300      	str	r3, [sp, #0]
 8025cbc:	4622      	mov	r2, r4
 8025cbe:	4b13      	ldr	r3, [pc, #76]	; (8025d0c <_vfiprintf_r+0x228>)
 8025cc0:	a904      	add	r1, sp, #16
 8025cc2:	4630      	mov	r0, r6
 8025cc4:	f3af 8000 	nop.w
 8025cc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025ccc:	4681      	mov	r9, r0
 8025cce:	d1d5      	bne.n	8025c7c <_vfiprintf_r+0x198>
 8025cd0:	89a3      	ldrh	r3, [r4, #12]
 8025cd2:	065b      	lsls	r3, r3, #25
 8025cd4:	f53f af7e 	bmi.w	8025bd4 <_vfiprintf_r+0xf0>
 8025cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025cda:	e77d      	b.n	8025bd8 <_vfiprintf_r+0xf4>
 8025cdc:	ab03      	add	r3, sp, #12
 8025cde:	9300      	str	r3, [sp, #0]
 8025ce0:	4622      	mov	r2, r4
 8025ce2:	4b0a      	ldr	r3, [pc, #40]	; (8025d0c <_vfiprintf_r+0x228>)
 8025ce4:	a904      	add	r1, sp, #16
 8025ce6:	4630      	mov	r0, r6
 8025ce8:	f000 f888 	bl	8025dfc <_printf_i>
 8025cec:	e7ec      	b.n	8025cc8 <_vfiprintf_r+0x1e4>
 8025cee:	bf00      	nop
 8025cf0:	0802ba6c 	.word	0x0802ba6c
 8025cf4:	0802ba14 	.word	0x0802ba14
 8025cf8:	0802ba8c 	.word	0x0802ba8c
 8025cfc:	0802ba4c 	.word	0x0802ba4c
 8025d00:	0802ba1a 	.word	0x0802ba1a
 8025d04:	0802ba1e 	.word	0x0802ba1e
 8025d08:	00000000 	.word	0x00000000
 8025d0c:	08025abf 	.word	0x08025abf

08025d10 <_printf_common>:
 8025d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d14:	4691      	mov	r9, r2
 8025d16:	461f      	mov	r7, r3
 8025d18:	688a      	ldr	r2, [r1, #8]
 8025d1a:	690b      	ldr	r3, [r1, #16]
 8025d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025d20:	4293      	cmp	r3, r2
 8025d22:	bfb8      	it	lt
 8025d24:	4613      	movlt	r3, r2
 8025d26:	f8c9 3000 	str.w	r3, [r9]
 8025d2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025d2e:	4606      	mov	r6, r0
 8025d30:	460c      	mov	r4, r1
 8025d32:	b112      	cbz	r2, 8025d3a <_printf_common+0x2a>
 8025d34:	3301      	adds	r3, #1
 8025d36:	f8c9 3000 	str.w	r3, [r9]
 8025d3a:	6823      	ldr	r3, [r4, #0]
 8025d3c:	0699      	lsls	r1, r3, #26
 8025d3e:	bf42      	ittt	mi
 8025d40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025d44:	3302      	addmi	r3, #2
 8025d46:	f8c9 3000 	strmi.w	r3, [r9]
 8025d4a:	6825      	ldr	r5, [r4, #0]
 8025d4c:	f015 0506 	ands.w	r5, r5, #6
 8025d50:	d107      	bne.n	8025d62 <_printf_common+0x52>
 8025d52:	f104 0a19 	add.w	sl, r4, #25
 8025d56:	68e3      	ldr	r3, [r4, #12]
 8025d58:	f8d9 2000 	ldr.w	r2, [r9]
 8025d5c:	1a9b      	subs	r3, r3, r2
 8025d5e:	42ab      	cmp	r3, r5
 8025d60:	dc28      	bgt.n	8025db4 <_printf_common+0xa4>
 8025d62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025d66:	6822      	ldr	r2, [r4, #0]
 8025d68:	3300      	adds	r3, #0
 8025d6a:	bf18      	it	ne
 8025d6c:	2301      	movne	r3, #1
 8025d6e:	0692      	lsls	r2, r2, #26
 8025d70:	d42d      	bmi.n	8025dce <_printf_common+0xbe>
 8025d72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025d76:	4639      	mov	r1, r7
 8025d78:	4630      	mov	r0, r6
 8025d7a:	47c0      	blx	r8
 8025d7c:	3001      	adds	r0, #1
 8025d7e:	d020      	beq.n	8025dc2 <_printf_common+0xb2>
 8025d80:	6823      	ldr	r3, [r4, #0]
 8025d82:	68e5      	ldr	r5, [r4, #12]
 8025d84:	f8d9 2000 	ldr.w	r2, [r9]
 8025d88:	f003 0306 	and.w	r3, r3, #6
 8025d8c:	2b04      	cmp	r3, #4
 8025d8e:	bf08      	it	eq
 8025d90:	1aad      	subeq	r5, r5, r2
 8025d92:	68a3      	ldr	r3, [r4, #8]
 8025d94:	6922      	ldr	r2, [r4, #16]
 8025d96:	bf0c      	ite	eq
 8025d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025d9c:	2500      	movne	r5, #0
 8025d9e:	4293      	cmp	r3, r2
 8025da0:	bfc4      	itt	gt
 8025da2:	1a9b      	subgt	r3, r3, r2
 8025da4:	18ed      	addgt	r5, r5, r3
 8025da6:	f04f 0900 	mov.w	r9, #0
 8025daa:	341a      	adds	r4, #26
 8025dac:	454d      	cmp	r5, r9
 8025dae:	d11a      	bne.n	8025de6 <_printf_common+0xd6>
 8025db0:	2000      	movs	r0, #0
 8025db2:	e008      	b.n	8025dc6 <_printf_common+0xb6>
 8025db4:	2301      	movs	r3, #1
 8025db6:	4652      	mov	r2, sl
 8025db8:	4639      	mov	r1, r7
 8025dba:	4630      	mov	r0, r6
 8025dbc:	47c0      	blx	r8
 8025dbe:	3001      	adds	r0, #1
 8025dc0:	d103      	bne.n	8025dca <_printf_common+0xba>
 8025dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8025dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025dca:	3501      	adds	r5, #1
 8025dcc:	e7c3      	b.n	8025d56 <_printf_common+0x46>
 8025dce:	18e1      	adds	r1, r4, r3
 8025dd0:	1c5a      	adds	r2, r3, #1
 8025dd2:	2030      	movs	r0, #48	; 0x30
 8025dd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025dd8:	4422      	add	r2, r4
 8025dda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025dde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025de2:	3302      	adds	r3, #2
 8025de4:	e7c5      	b.n	8025d72 <_printf_common+0x62>
 8025de6:	2301      	movs	r3, #1
 8025de8:	4622      	mov	r2, r4
 8025dea:	4639      	mov	r1, r7
 8025dec:	4630      	mov	r0, r6
 8025dee:	47c0      	blx	r8
 8025df0:	3001      	adds	r0, #1
 8025df2:	d0e6      	beq.n	8025dc2 <_printf_common+0xb2>
 8025df4:	f109 0901 	add.w	r9, r9, #1
 8025df8:	e7d8      	b.n	8025dac <_printf_common+0x9c>
	...

08025dfc <_printf_i>:
 8025dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025e00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025e04:	460c      	mov	r4, r1
 8025e06:	7e09      	ldrb	r1, [r1, #24]
 8025e08:	b085      	sub	sp, #20
 8025e0a:	296e      	cmp	r1, #110	; 0x6e
 8025e0c:	4617      	mov	r7, r2
 8025e0e:	4606      	mov	r6, r0
 8025e10:	4698      	mov	r8, r3
 8025e12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025e14:	f000 80b3 	beq.w	8025f7e <_printf_i+0x182>
 8025e18:	d822      	bhi.n	8025e60 <_printf_i+0x64>
 8025e1a:	2963      	cmp	r1, #99	; 0x63
 8025e1c:	d036      	beq.n	8025e8c <_printf_i+0x90>
 8025e1e:	d80a      	bhi.n	8025e36 <_printf_i+0x3a>
 8025e20:	2900      	cmp	r1, #0
 8025e22:	f000 80b9 	beq.w	8025f98 <_printf_i+0x19c>
 8025e26:	2958      	cmp	r1, #88	; 0x58
 8025e28:	f000 8083 	beq.w	8025f32 <_printf_i+0x136>
 8025e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025e30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025e34:	e032      	b.n	8025e9c <_printf_i+0xa0>
 8025e36:	2964      	cmp	r1, #100	; 0x64
 8025e38:	d001      	beq.n	8025e3e <_printf_i+0x42>
 8025e3a:	2969      	cmp	r1, #105	; 0x69
 8025e3c:	d1f6      	bne.n	8025e2c <_printf_i+0x30>
 8025e3e:	6820      	ldr	r0, [r4, #0]
 8025e40:	6813      	ldr	r3, [r2, #0]
 8025e42:	0605      	lsls	r5, r0, #24
 8025e44:	f103 0104 	add.w	r1, r3, #4
 8025e48:	d52a      	bpl.n	8025ea0 <_printf_i+0xa4>
 8025e4a:	681b      	ldr	r3, [r3, #0]
 8025e4c:	6011      	str	r1, [r2, #0]
 8025e4e:	2b00      	cmp	r3, #0
 8025e50:	da03      	bge.n	8025e5a <_printf_i+0x5e>
 8025e52:	222d      	movs	r2, #45	; 0x2d
 8025e54:	425b      	negs	r3, r3
 8025e56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025e5a:	486f      	ldr	r0, [pc, #444]	; (8026018 <_printf_i+0x21c>)
 8025e5c:	220a      	movs	r2, #10
 8025e5e:	e039      	b.n	8025ed4 <_printf_i+0xd8>
 8025e60:	2973      	cmp	r1, #115	; 0x73
 8025e62:	f000 809d 	beq.w	8025fa0 <_printf_i+0x1a4>
 8025e66:	d808      	bhi.n	8025e7a <_printf_i+0x7e>
 8025e68:	296f      	cmp	r1, #111	; 0x6f
 8025e6a:	d020      	beq.n	8025eae <_printf_i+0xb2>
 8025e6c:	2970      	cmp	r1, #112	; 0x70
 8025e6e:	d1dd      	bne.n	8025e2c <_printf_i+0x30>
 8025e70:	6823      	ldr	r3, [r4, #0]
 8025e72:	f043 0320 	orr.w	r3, r3, #32
 8025e76:	6023      	str	r3, [r4, #0]
 8025e78:	e003      	b.n	8025e82 <_printf_i+0x86>
 8025e7a:	2975      	cmp	r1, #117	; 0x75
 8025e7c:	d017      	beq.n	8025eae <_printf_i+0xb2>
 8025e7e:	2978      	cmp	r1, #120	; 0x78
 8025e80:	d1d4      	bne.n	8025e2c <_printf_i+0x30>
 8025e82:	2378      	movs	r3, #120	; 0x78
 8025e84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025e88:	4864      	ldr	r0, [pc, #400]	; (802601c <_printf_i+0x220>)
 8025e8a:	e055      	b.n	8025f38 <_printf_i+0x13c>
 8025e8c:	6813      	ldr	r3, [r2, #0]
 8025e8e:	1d19      	adds	r1, r3, #4
 8025e90:	681b      	ldr	r3, [r3, #0]
 8025e92:	6011      	str	r1, [r2, #0]
 8025e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025e9c:	2301      	movs	r3, #1
 8025e9e:	e08c      	b.n	8025fba <_printf_i+0x1be>
 8025ea0:	681b      	ldr	r3, [r3, #0]
 8025ea2:	6011      	str	r1, [r2, #0]
 8025ea4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025ea8:	bf18      	it	ne
 8025eaa:	b21b      	sxthne	r3, r3
 8025eac:	e7cf      	b.n	8025e4e <_printf_i+0x52>
 8025eae:	6813      	ldr	r3, [r2, #0]
 8025eb0:	6825      	ldr	r5, [r4, #0]
 8025eb2:	1d18      	adds	r0, r3, #4
 8025eb4:	6010      	str	r0, [r2, #0]
 8025eb6:	0628      	lsls	r0, r5, #24
 8025eb8:	d501      	bpl.n	8025ebe <_printf_i+0xc2>
 8025eba:	681b      	ldr	r3, [r3, #0]
 8025ebc:	e002      	b.n	8025ec4 <_printf_i+0xc8>
 8025ebe:	0668      	lsls	r0, r5, #25
 8025ec0:	d5fb      	bpl.n	8025eba <_printf_i+0xbe>
 8025ec2:	881b      	ldrh	r3, [r3, #0]
 8025ec4:	4854      	ldr	r0, [pc, #336]	; (8026018 <_printf_i+0x21c>)
 8025ec6:	296f      	cmp	r1, #111	; 0x6f
 8025ec8:	bf14      	ite	ne
 8025eca:	220a      	movne	r2, #10
 8025ecc:	2208      	moveq	r2, #8
 8025ece:	2100      	movs	r1, #0
 8025ed0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025ed4:	6865      	ldr	r5, [r4, #4]
 8025ed6:	60a5      	str	r5, [r4, #8]
 8025ed8:	2d00      	cmp	r5, #0
 8025eda:	f2c0 8095 	blt.w	8026008 <_printf_i+0x20c>
 8025ede:	6821      	ldr	r1, [r4, #0]
 8025ee0:	f021 0104 	bic.w	r1, r1, #4
 8025ee4:	6021      	str	r1, [r4, #0]
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	d13d      	bne.n	8025f66 <_printf_i+0x16a>
 8025eea:	2d00      	cmp	r5, #0
 8025eec:	f040 808e 	bne.w	802600c <_printf_i+0x210>
 8025ef0:	4665      	mov	r5, ip
 8025ef2:	2a08      	cmp	r2, #8
 8025ef4:	d10b      	bne.n	8025f0e <_printf_i+0x112>
 8025ef6:	6823      	ldr	r3, [r4, #0]
 8025ef8:	07db      	lsls	r3, r3, #31
 8025efa:	d508      	bpl.n	8025f0e <_printf_i+0x112>
 8025efc:	6923      	ldr	r3, [r4, #16]
 8025efe:	6862      	ldr	r2, [r4, #4]
 8025f00:	429a      	cmp	r2, r3
 8025f02:	bfde      	ittt	le
 8025f04:	2330      	movle	r3, #48	; 0x30
 8025f06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025f0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025f0e:	ebac 0305 	sub.w	r3, ip, r5
 8025f12:	6123      	str	r3, [r4, #16]
 8025f14:	f8cd 8000 	str.w	r8, [sp]
 8025f18:	463b      	mov	r3, r7
 8025f1a:	aa03      	add	r2, sp, #12
 8025f1c:	4621      	mov	r1, r4
 8025f1e:	4630      	mov	r0, r6
 8025f20:	f7ff fef6 	bl	8025d10 <_printf_common>
 8025f24:	3001      	adds	r0, #1
 8025f26:	d14d      	bne.n	8025fc4 <_printf_i+0x1c8>
 8025f28:	f04f 30ff 	mov.w	r0, #4294967295
 8025f2c:	b005      	add	sp, #20
 8025f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025f32:	4839      	ldr	r0, [pc, #228]	; (8026018 <_printf_i+0x21c>)
 8025f34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025f38:	6813      	ldr	r3, [r2, #0]
 8025f3a:	6821      	ldr	r1, [r4, #0]
 8025f3c:	1d1d      	adds	r5, r3, #4
 8025f3e:	681b      	ldr	r3, [r3, #0]
 8025f40:	6015      	str	r5, [r2, #0]
 8025f42:	060a      	lsls	r2, r1, #24
 8025f44:	d50b      	bpl.n	8025f5e <_printf_i+0x162>
 8025f46:	07ca      	lsls	r2, r1, #31
 8025f48:	bf44      	itt	mi
 8025f4a:	f041 0120 	orrmi.w	r1, r1, #32
 8025f4e:	6021      	strmi	r1, [r4, #0]
 8025f50:	b91b      	cbnz	r3, 8025f5a <_printf_i+0x15e>
 8025f52:	6822      	ldr	r2, [r4, #0]
 8025f54:	f022 0220 	bic.w	r2, r2, #32
 8025f58:	6022      	str	r2, [r4, #0]
 8025f5a:	2210      	movs	r2, #16
 8025f5c:	e7b7      	b.n	8025ece <_printf_i+0xd2>
 8025f5e:	064d      	lsls	r5, r1, #25
 8025f60:	bf48      	it	mi
 8025f62:	b29b      	uxthmi	r3, r3
 8025f64:	e7ef      	b.n	8025f46 <_printf_i+0x14a>
 8025f66:	4665      	mov	r5, ip
 8025f68:	fbb3 f1f2 	udiv	r1, r3, r2
 8025f6c:	fb02 3311 	mls	r3, r2, r1, r3
 8025f70:	5cc3      	ldrb	r3, [r0, r3]
 8025f72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025f76:	460b      	mov	r3, r1
 8025f78:	2900      	cmp	r1, #0
 8025f7a:	d1f5      	bne.n	8025f68 <_printf_i+0x16c>
 8025f7c:	e7b9      	b.n	8025ef2 <_printf_i+0xf6>
 8025f7e:	6813      	ldr	r3, [r2, #0]
 8025f80:	6825      	ldr	r5, [r4, #0]
 8025f82:	6961      	ldr	r1, [r4, #20]
 8025f84:	1d18      	adds	r0, r3, #4
 8025f86:	6010      	str	r0, [r2, #0]
 8025f88:	0628      	lsls	r0, r5, #24
 8025f8a:	681b      	ldr	r3, [r3, #0]
 8025f8c:	d501      	bpl.n	8025f92 <_printf_i+0x196>
 8025f8e:	6019      	str	r1, [r3, #0]
 8025f90:	e002      	b.n	8025f98 <_printf_i+0x19c>
 8025f92:	066a      	lsls	r2, r5, #25
 8025f94:	d5fb      	bpl.n	8025f8e <_printf_i+0x192>
 8025f96:	8019      	strh	r1, [r3, #0]
 8025f98:	2300      	movs	r3, #0
 8025f9a:	6123      	str	r3, [r4, #16]
 8025f9c:	4665      	mov	r5, ip
 8025f9e:	e7b9      	b.n	8025f14 <_printf_i+0x118>
 8025fa0:	6813      	ldr	r3, [r2, #0]
 8025fa2:	1d19      	adds	r1, r3, #4
 8025fa4:	6011      	str	r1, [r2, #0]
 8025fa6:	681d      	ldr	r5, [r3, #0]
 8025fa8:	6862      	ldr	r2, [r4, #4]
 8025faa:	2100      	movs	r1, #0
 8025fac:	4628      	mov	r0, r5
 8025fae:	f7da f92f 	bl	8000210 <memchr>
 8025fb2:	b108      	cbz	r0, 8025fb8 <_printf_i+0x1bc>
 8025fb4:	1b40      	subs	r0, r0, r5
 8025fb6:	6060      	str	r0, [r4, #4]
 8025fb8:	6863      	ldr	r3, [r4, #4]
 8025fba:	6123      	str	r3, [r4, #16]
 8025fbc:	2300      	movs	r3, #0
 8025fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025fc2:	e7a7      	b.n	8025f14 <_printf_i+0x118>
 8025fc4:	6923      	ldr	r3, [r4, #16]
 8025fc6:	462a      	mov	r2, r5
 8025fc8:	4639      	mov	r1, r7
 8025fca:	4630      	mov	r0, r6
 8025fcc:	47c0      	blx	r8
 8025fce:	3001      	adds	r0, #1
 8025fd0:	d0aa      	beq.n	8025f28 <_printf_i+0x12c>
 8025fd2:	6823      	ldr	r3, [r4, #0]
 8025fd4:	079b      	lsls	r3, r3, #30
 8025fd6:	d413      	bmi.n	8026000 <_printf_i+0x204>
 8025fd8:	68e0      	ldr	r0, [r4, #12]
 8025fda:	9b03      	ldr	r3, [sp, #12]
 8025fdc:	4298      	cmp	r0, r3
 8025fde:	bfb8      	it	lt
 8025fe0:	4618      	movlt	r0, r3
 8025fe2:	e7a3      	b.n	8025f2c <_printf_i+0x130>
 8025fe4:	2301      	movs	r3, #1
 8025fe6:	464a      	mov	r2, r9
 8025fe8:	4639      	mov	r1, r7
 8025fea:	4630      	mov	r0, r6
 8025fec:	47c0      	blx	r8
 8025fee:	3001      	adds	r0, #1
 8025ff0:	d09a      	beq.n	8025f28 <_printf_i+0x12c>
 8025ff2:	3501      	adds	r5, #1
 8025ff4:	68e3      	ldr	r3, [r4, #12]
 8025ff6:	9a03      	ldr	r2, [sp, #12]
 8025ff8:	1a9b      	subs	r3, r3, r2
 8025ffa:	42ab      	cmp	r3, r5
 8025ffc:	dcf2      	bgt.n	8025fe4 <_printf_i+0x1e8>
 8025ffe:	e7eb      	b.n	8025fd8 <_printf_i+0x1dc>
 8026000:	2500      	movs	r5, #0
 8026002:	f104 0919 	add.w	r9, r4, #25
 8026006:	e7f5      	b.n	8025ff4 <_printf_i+0x1f8>
 8026008:	2b00      	cmp	r3, #0
 802600a:	d1ac      	bne.n	8025f66 <_printf_i+0x16a>
 802600c:	7803      	ldrb	r3, [r0, #0]
 802600e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026012:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026016:	e76c      	b.n	8025ef2 <_printf_i+0xf6>
 8026018:	0802ba25 	.word	0x0802ba25
 802601c:	0802ba36 	.word	0x0802ba36

08026020 <rand>:
 8026020:	b538      	push	{r3, r4, r5, lr}
 8026022:	4b13      	ldr	r3, [pc, #76]	; (8026070 <rand+0x50>)
 8026024:	681c      	ldr	r4, [r3, #0]
 8026026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026028:	b97b      	cbnz	r3, 802604a <rand+0x2a>
 802602a:	2018      	movs	r0, #24
 802602c:	f7ff fc64 	bl	80258f8 <malloc>
 8026030:	4a10      	ldr	r2, [pc, #64]	; (8026074 <rand+0x54>)
 8026032:	4b11      	ldr	r3, [pc, #68]	; (8026078 <rand+0x58>)
 8026034:	63a0      	str	r0, [r4, #56]	; 0x38
 8026036:	e9c0 2300 	strd	r2, r3, [r0]
 802603a:	4b10      	ldr	r3, [pc, #64]	; (802607c <rand+0x5c>)
 802603c:	6083      	str	r3, [r0, #8]
 802603e:	230b      	movs	r3, #11
 8026040:	8183      	strh	r3, [r0, #12]
 8026042:	2201      	movs	r2, #1
 8026044:	2300      	movs	r3, #0
 8026046:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802604a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802604c:	480c      	ldr	r0, [pc, #48]	; (8026080 <rand+0x60>)
 802604e:	690a      	ldr	r2, [r1, #16]
 8026050:	694b      	ldr	r3, [r1, #20]
 8026052:	4c0c      	ldr	r4, [pc, #48]	; (8026084 <rand+0x64>)
 8026054:	4350      	muls	r0, r2
 8026056:	fb04 0003 	mla	r0, r4, r3, r0
 802605a:	fba2 2304 	umull	r2, r3, r2, r4
 802605e:	4403      	add	r3, r0
 8026060:	1c54      	adds	r4, r2, #1
 8026062:	f143 0500 	adc.w	r5, r3, #0
 8026066:	e9c1 4504 	strd	r4, r5, [r1, #16]
 802606a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 802606e:	bd38      	pop	{r3, r4, r5, pc}
 8026070:	20000098 	.word	0x20000098
 8026074:	abcd330e 	.word	0xabcd330e
 8026078:	e66d1234 	.word	0xe66d1234
 802607c:	0005deec 	.word	0x0005deec
 8026080:	5851f42d 	.word	0x5851f42d
 8026084:	4c957f2d 	.word	0x4c957f2d

08026088 <_sbrk_r>:
 8026088:	b538      	push	{r3, r4, r5, lr}
 802608a:	4c06      	ldr	r4, [pc, #24]	; (80260a4 <_sbrk_r+0x1c>)
 802608c:	2300      	movs	r3, #0
 802608e:	4605      	mov	r5, r0
 8026090:	4608      	mov	r0, r1
 8026092:	6023      	str	r3, [r4, #0]
 8026094:	f7dc fc68 	bl	8002968 <_sbrk>
 8026098:	1c43      	adds	r3, r0, #1
 802609a:	d102      	bne.n	80260a2 <_sbrk_r+0x1a>
 802609c:	6823      	ldr	r3, [r4, #0]
 802609e:	b103      	cbz	r3, 80260a2 <_sbrk_r+0x1a>
 80260a0:	602b      	str	r3, [r5, #0]
 80260a2:	bd38      	pop	{r3, r4, r5, pc}
 80260a4:	2000bb50 	.word	0x2000bb50

080260a8 <_raise_r>:
 80260a8:	291f      	cmp	r1, #31
 80260aa:	b538      	push	{r3, r4, r5, lr}
 80260ac:	4604      	mov	r4, r0
 80260ae:	460d      	mov	r5, r1
 80260b0:	d904      	bls.n	80260bc <_raise_r+0x14>
 80260b2:	2316      	movs	r3, #22
 80260b4:	6003      	str	r3, [r0, #0]
 80260b6:	f04f 30ff 	mov.w	r0, #4294967295
 80260ba:	bd38      	pop	{r3, r4, r5, pc}
 80260bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80260be:	b112      	cbz	r2, 80260c6 <_raise_r+0x1e>
 80260c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80260c4:	b94b      	cbnz	r3, 80260da <_raise_r+0x32>
 80260c6:	4620      	mov	r0, r4
 80260c8:	f000 f830 	bl	802612c <_getpid_r>
 80260cc:	462a      	mov	r2, r5
 80260ce:	4601      	mov	r1, r0
 80260d0:	4620      	mov	r0, r4
 80260d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80260d6:	f000 b817 	b.w	8026108 <_kill_r>
 80260da:	2b01      	cmp	r3, #1
 80260dc:	d00a      	beq.n	80260f4 <_raise_r+0x4c>
 80260de:	1c59      	adds	r1, r3, #1
 80260e0:	d103      	bne.n	80260ea <_raise_r+0x42>
 80260e2:	2316      	movs	r3, #22
 80260e4:	6003      	str	r3, [r0, #0]
 80260e6:	2001      	movs	r0, #1
 80260e8:	e7e7      	b.n	80260ba <_raise_r+0x12>
 80260ea:	2400      	movs	r4, #0
 80260ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80260f0:	4628      	mov	r0, r5
 80260f2:	4798      	blx	r3
 80260f4:	2000      	movs	r0, #0
 80260f6:	e7e0      	b.n	80260ba <_raise_r+0x12>

080260f8 <raise>:
 80260f8:	4b02      	ldr	r3, [pc, #8]	; (8026104 <raise+0xc>)
 80260fa:	4601      	mov	r1, r0
 80260fc:	6818      	ldr	r0, [r3, #0]
 80260fe:	f7ff bfd3 	b.w	80260a8 <_raise_r>
 8026102:	bf00      	nop
 8026104:	20000098 	.word	0x20000098

08026108 <_kill_r>:
 8026108:	b538      	push	{r3, r4, r5, lr}
 802610a:	4c07      	ldr	r4, [pc, #28]	; (8026128 <_kill_r+0x20>)
 802610c:	2300      	movs	r3, #0
 802610e:	4605      	mov	r5, r0
 8026110:	4608      	mov	r0, r1
 8026112:	4611      	mov	r1, r2
 8026114:	6023      	str	r3, [r4, #0]
 8026116:	f7dc fb9f 	bl	8002858 <_kill>
 802611a:	1c43      	adds	r3, r0, #1
 802611c:	d102      	bne.n	8026124 <_kill_r+0x1c>
 802611e:	6823      	ldr	r3, [r4, #0]
 8026120:	b103      	cbz	r3, 8026124 <_kill_r+0x1c>
 8026122:	602b      	str	r3, [r5, #0]
 8026124:	bd38      	pop	{r3, r4, r5, pc}
 8026126:	bf00      	nop
 8026128:	2000bb50 	.word	0x2000bb50

0802612c <_getpid_r>:
 802612c:	f7dc bb8c 	b.w	8002848 <_getpid>

08026130 <__swbuf_r>:
 8026130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026132:	460e      	mov	r6, r1
 8026134:	4614      	mov	r4, r2
 8026136:	4605      	mov	r5, r0
 8026138:	b118      	cbz	r0, 8026142 <__swbuf_r+0x12>
 802613a:	6983      	ldr	r3, [r0, #24]
 802613c:	b90b      	cbnz	r3, 8026142 <__swbuf_r+0x12>
 802613e:	f000 fa0b 	bl	8026558 <__sinit>
 8026142:	4b21      	ldr	r3, [pc, #132]	; (80261c8 <__swbuf_r+0x98>)
 8026144:	429c      	cmp	r4, r3
 8026146:	d12a      	bne.n	802619e <__swbuf_r+0x6e>
 8026148:	686c      	ldr	r4, [r5, #4]
 802614a:	69a3      	ldr	r3, [r4, #24]
 802614c:	60a3      	str	r3, [r4, #8]
 802614e:	89a3      	ldrh	r3, [r4, #12]
 8026150:	071a      	lsls	r2, r3, #28
 8026152:	d52e      	bpl.n	80261b2 <__swbuf_r+0x82>
 8026154:	6923      	ldr	r3, [r4, #16]
 8026156:	b363      	cbz	r3, 80261b2 <__swbuf_r+0x82>
 8026158:	6923      	ldr	r3, [r4, #16]
 802615a:	6820      	ldr	r0, [r4, #0]
 802615c:	1ac0      	subs	r0, r0, r3
 802615e:	6963      	ldr	r3, [r4, #20]
 8026160:	b2f6      	uxtb	r6, r6
 8026162:	4283      	cmp	r3, r0
 8026164:	4637      	mov	r7, r6
 8026166:	dc04      	bgt.n	8026172 <__swbuf_r+0x42>
 8026168:	4621      	mov	r1, r4
 802616a:	4628      	mov	r0, r5
 802616c:	f000 f98a 	bl	8026484 <_fflush_r>
 8026170:	bb28      	cbnz	r0, 80261be <__swbuf_r+0x8e>
 8026172:	68a3      	ldr	r3, [r4, #8]
 8026174:	3b01      	subs	r3, #1
 8026176:	60a3      	str	r3, [r4, #8]
 8026178:	6823      	ldr	r3, [r4, #0]
 802617a:	1c5a      	adds	r2, r3, #1
 802617c:	6022      	str	r2, [r4, #0]
 802617e:	701e      	strb	r6, [r3, #0]
 8026180:	6963      	ldr	r3, [r4, #20]
 8026182:	3001      	adds	r0, #1
 8026184:	4283      	cmp	r3, r0
 8026186:	d004      	beq.n	8026192 <__swbuf_r+0x62>
 8026188:	89a3      	ldrh	r3, [r4, #12]
 802618a:	07db      	lsls	r3, r3, #31
 802618c:	d519      	bpl.n	80261c2 <__swbuf_r+0x92>
 802618e:	2e0a      	cmp	r6, #10
 8026190:	d117      	bne.n	80261c2 <__swbuf_r+0x92>
 8026192:	4621      	mov	r1, r4
 8026194:	4628      	mov	r0, r5
 8026196:	f000 f975 	bl	8026484 <_fflush_r>
 802619a:	b190      	cbz	r0, 80261c2 <__swbuf_r+0x92>
 802619c:	e00f      	b.n	80261be <__swbuf_r+0x8e>
 802619e:	4b0b      	ldr	r3, [pc, #44]	; (80261cc <__swbuf_r+0x9c>)
 80261a0:	429c      	cmp	r4, r3
 80261a2:	d101      	bne.n	80261a8 <__swbuf_r+0x78>
 80261a4:	68ac      	ldr	r4, [r5, #8]
 80261a6:	e7d0      	b.n	802614a <__swbuf_r+0x1a>
 80261a8:	4b09      	ldr	r3, [pc, #36]	; (80261d0 <__swbuf_r+0xa0>)
 80261aa:	429c      	cmp	r4, r3
 80261ac:	bf08      	it	eq
 80261ae:	68ec      	ldreq	r4, [r5, #12]
 80261b0:	e7cb      	b.n	802614a <__swbuf_r+0x1a>
 80261b2:	4621      	mov	r1, r4
 80261b4:	4628      	mov	r0, r5
 80261b6:	f000 f80d 	bl	80261d4 <__swsetup_r>
 80261ba:	2800      	cmp	r0, #0
 80261bc:	d0cc      	beq.n	8026158 <__swbuf_r+0x28>
 80261be:	f04f 37ff 	mov.w	r7, #4294967295
 80261c2:	4638      	mov	r0, r7
 80261c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80261c6:	bf00      	nop
 80261c8:	0802ba6c 	.word	0x0802ba6c
 80261cc:	0802ba8c 	.word	0x0802ba8c
 80261d0:	0802ba4c 	.word	0x0802ba4c

080261d4 <__swsetup_r>:
 80261d4:	4b32      	ldr	r3, [pc, #200]	; (80262a0 <__swsetup_r+0xcc>)
 80261d6:	b570      	push	{r4, r5, r6, lr}
 80261d8:	681d      	ldr	r5, [r3, #0]
 80261da:	4606      	mov	r6, r0
 80261dc:	460c      	mov	r4, r1
 80261de:	b125      	cbz	r5, 80261ea <__swsetup_r+0x16>
 80261e0:	69ab      	ldr	r3, [r5, #24]
 80261e2:	b913      	cbnz	r3, 80261ea <__swsetup_r+0x16>
 80261e4:	4628      	mov	r0, r5
 80261e6:	f000 f9b7 	bl	8026558 <__sinit>
 80261ea:	4b2e      	ldr	r3, [pc, #184]	; (80262a4 <__swsetup_r+0xd0>)
 80261ec:	429c      	cmp	r4, r3
 80261ee:	d10f      	bne.n	8026210 <__swsetup_r+0x3c>
 80261f0:	686c      	ldr	r4, [r5, #4]
 80261f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261f6:	b29a      	uxth	r2, r3
 80261f8:	0715      	lsls	r5, r2, #28
 80261fa:	d42c      	bmi.n	8026256 <__swsetup_r+0x82>
 80261fc:	06d0      	lsls	r0, r2, #27
 80261fe:	d411      	bmi.n	8026224 <__swsetup_r+0x50>
 8026200:	2209      	movs	r2, #9
 8026202:	6032      	str	r2, [r6, #0]
 8026204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026208:	81a3      	strh	r3, [r4, #12]
 802620a:	f04f 30ff 	mov.w	r0, #4294967295
 802620e:	e03e      	b.n	802628e <__swsetup_r+0xba>
 8026210:	4b25      	ldr	r3, [pc, #148]	; (80262a8 <__swsetup_r+0xd4>)
 8026212:	429c      	cmp	r4, r3
 8026214:	d101      	bne.n	802621a <__swsetup_r+0x46>
 8026216:	68ac      	ldr	r4, [r5, #8]
 8026218:	e7eb      	b.n	80261f2 <__swsetup_r+0x1e>
 802621a:	4b24      	ldr	r3, [pc, #144]	; (80262ac <__swsetup_r+0xd8>)
 802621c:	429c      	cmp	r4, r3
 802621e:	bf08      	it	eq
 8026220:	68ec      	ldreq	r4, [r5, #12]
 8026222:	e7e6      	b.n	80261f2 <__swsetup_r+0x1e>
 8026224:	0751      	lsls	r1, r2, #29
 8026226:	d512      	bpl.n	802624e <__swsetup_r+0x7a>
 8026228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802622a:	b141      	cbz	r1, 802623e <__swsetup_r+0x6a>
 802622c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026230:	4299      	cmp	r1, r3
 8026232:	d002      	beq.n	802623a <__swsetup_r+0x66>
 8026234:	4630      	mov	r0, r6
 8026236:	f7ff fb83 	bl	8025940 <_free_r>
 802623a:	2300      	movs	r3, #0
 802623c:	6363      	str	r3, [r4, #52]	; 0x34
 802623e:	89a3      	ldrh	r3, [r4, #12]
 8026240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026244:	81a3      	strh	r3, [r4, #12]
 8026246:	2300      	movs	r3, #0
 8026248:	6063      	str	r3, [r4, #4]
 802624a:	6923      	ldr	r3, [r4, #16]
 802624c:	6023      	str	r3, [r4, #0]
 802624e:	89a3      	ldrh	r3, [r4, #12]
 8026250:	f043 0308 	orr.w	r3, r3, #8
 8026254:	81a3      	strh	r3, [r4, #12]
 8026256:	6923      	ldr	r3, [r4, #16]
 8026258:	b94b      	cbnz	r3, 802626e <__swsetup_r+0x9a>
 802625a:	89a3      	ldrh	r3, [r4, #12]
 802625c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026264:	d003      	beq.n	802626e <__swsetup_r+0x9a>
 8026266:	4621      	mov	r1, r4
 8026268:	4630      	mov	r0, r6
 802626a:	f000 fa23 	bl	80266b4 <__smakebuf_r>
 802626e:	89a2      	ldrh	r2, [r4, #12]
 8026270:	f012 0301 	ands.w	r3, r2, #1
 8026274:	d00c      	beq.n	8026290 <__swsetup_r+0xbc>
 8026276:	2300      	movs	r3, #0
 8026278:	60a3      	str	r3, [r4, #8]
 802627a:	6963      	ldr	r3, [r4, #20]
 802627c:	425b      	negs	r3, r3
 802627e:	61a3      	str	r3, [r4, #24]
 8026280:	6923      	ldr	r3, [r4, #16]
 8026282:	b953      	cbnz	r3, 802629a <__swsetup_r+0xc6>
 8026284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026288:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802628c:	d1ba      	bne.n	8026204 <__swsetup_r+0x30>
 802628e:	bd70      	pop	{r4, r5, r6, pc}
 8026290:	0792      	lsls	r2, r2, #30
 8026292:	bf58      	it	pl
 8026294:	6963      	ldrpl	r3, [r4, #20]
 8026296:	60a3      	str	r3, [r4, #8]
 8026298:	e7f2      	b.n	8026280 <__swsetup_r+0xac>
 802629a:	2000      	movs	r0, #0
 802629c:	e7f7      	b.n	802628e <__swsetup_r+0xba>
 802629e:	bf00      	nop
 80262a0:	20000098 	.word	0x20000098
 80262a4:	0802ba6c 	.word	0x0802ba6c
 80262a8:	0802ba8c 	.word	0x0802ba8c
 80262ac:	0802ba4c 	.word	0x0802ba4c

080262b0 <__register_exitproc>:
 80262b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80262b4:	4d2c      	ldr	r5, [pc, #176]	; (8026368 <__register_exitproc+0xb8>)
 80262b6:	682c      	ldr	r4, [r5, #0]
 80262b8:	4607      	mov	r7, r0
 80262ba:	460e      	mov	r6, r1
 80262bc:	4691      	mov	r9, r2
 80262be:	4698      	mov	r8, r3
 80262c0:	b934      	cbnz	r4, 80262d0 <__register_exitproc+0x20>
 80262c2:	4b2a      	ldr	r3, [pc, #168]	; (802636c <__register_exitproc+0xbc>)
 80262c4:	4c2a      	ldr	r4, [pc, #168]	; (8026370 <__register_exitproc+0xc0>)
 80262c6:	602c      	str	r4, [r5, #0]
 80262c8:	b113      	cbz	r3, 80262d0 <__register_exitproc+0x20>
 80262ca:	681b      	ldr	r3, [r3, #0]
 80262cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80262d0:	6863      	ldr	r3, [r4, #4]
 80262d2:	2b1f      	cmp	r3, #31
 80262d4:	dd3d      	ble.n	8026352 <__register_exitproc+0xa2>
 80262d6:	4b27      	ldr	r3, [pc, #156]	; (8026374 <__register_exitproc+0xc4>)
 80262d8:	b91b      	cbnz	r3, 80262e2 <__register_exitproc+0x32>
 80262da:	f04f 30ff 	mov.w	r0, #4294967295
 80262de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80262e2:	208c      	movs	r0, #140	; 0x8c
 80262e4:	f7ff fb08 	bl	80258f8 <malloc>
 80262e8:	4604      	mov	r4, r0
 80262ea:	2800      	cmp	r0, #0
 80262ec:	d0f5      	beq.n	80262da <__register_exitproc+0x2a>
 80262ee:	2300      	movs	r3, #0
 80262f0:	682a      	ldr	r2, [r5, #0]
 80262f2:	6002      	str	r2, [r0, #0]
 80262f4:	6043      	str	r3, [r0, #4]
 80262f6:	6028      	str	r0, [r5, #0]
 80262f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80262fc:	b30f      	cbz	r7, 8026342 <__register_exitproc+0x92>
 80262fe:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026302:	f7ff faf9 	bl	80258f8 <malloc>
 8026306:	2800      	cmp	r0, #0
 8026308:	d0e7      	beq.n	80262da <__register_exitproc+0x2a>
 802630a:	2300      	movs	r3, #0
 802630c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026310:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8026314:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026318:	6862      	ldr	r2, [r4, #4]
 802631a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802631e:	2301      	movs	r3, #1
 8026320:	4093      	lsls	r3, r2
 8026322:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8026326:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802632a:	431a      	orrs	r2, r3
 802632c:	2f02      	cmp	r7, #2
 802632e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8026332:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8026336:	bf02      	ittt	eq
 8026338:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802633c:	4313      	orreq	r3, r2
 802633e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026342:	6863      	ldr	r3, [r4, #4]
 8026344:	1c5a      	adds	r2, r3, #1
 8026346:	3302      	adds	r3, #2
 8026348:	6062      	str	r2, [r4, #4]
 802634a:	2000      	movs	r0, #0
 802634c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8026350:	e7c5      	b.n	80262de <__register_exitproc+0x2e>
 8026352:	2f00      	cmp	r7, #0
 8026354:	d0f5      	beq.n	8026342 <__register_exitproc+0x92>
 8026356:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802635a:	2800      	cmp	r0, #0
 802635c:	d1dc      	bne.n	8026318 <__register_exitproc+0x68>
 802635e:	4b05      	ldr	r3, [pc, #20]	; (8026374 <__register_exitproc+0xc4>)
 8026360:	2b00      	cmp	r3, #0
 8026362:	d0ba      	beq.n	80262da <__register_exitproc+0x2a>
 8026364:	e7cb      	b.n	80262fe <__register_exitproc+0x4e>
 8026366:	bf00      	nop
 8026368:	2000b628 	.word	0x2000b628
 802636c:	0802ba48 	.word	0x0802ba48
 8026370:	2000b59c 	.word	0x2000b59c
 8026374:	080258f9 	.word	0x080258f9

08026378 <__sflush_r>:
 8026378:	898a      	ldrh	r2, [r1, #12]
 802637a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802637e:	4605      	mov	r5, r0
 8026380:	0710      	lsls	r0, r2, #28
 8026382:	460c      	mov	r4, r1
 8026384:	d458      	bmi.n	8026438 <__sflush_r+0xc0>
 8026386:	684b      	ldr	r3, [r1, #4]
 8026388:	2b00      	cmp	r3, #0
 802638a:	dc05      	bgt.n	8026398 <__sflush_r+0x20>
 802638c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802638e:	2b00      	cmp	r3, #0
 8026390:	dc02      	bgt.n	8026398 <__sflush_r+0x20>
 8026392:	2000      	movs	r0, #0
 8026394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802639a:	2e00      	cmp	r6, #0
 802639c:	d0f9      	beq.n	8026392 <__sflush_r+0x1a>
 802639e:	2300      	movs	r3, #0
 80263a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80263a4:	682f      	ldr	r7, [r5, #0]
 80263a6:	6a21      	ldr	r1, [r4, #32]
 80263a8:	602b      	str	r3, [r5, #0]
 80263aa:	d032      	beq.n	8026412 <__sflush_r+0x9a>
 80263ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80263ae:	89a3      	ldrh	r3, [r4, #12]
 80263b0:	075a      	lsls	r2, r3, #29
 80263b2:	d505      	bpl.n	80263c0 <__sflush_r+0x48>
 80263b4:	6863      	ldr	r3, [r4, #4]
 80263b6:	1ac0      	subs	r0, r0, r3
 80263b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80263ba:	b10b      	cbz	r3, 80263c0 <__sflush_r+0x48>
 80263bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80263be:	1ac0      	subs	r0, r0, r3
 80263c0:	2300      	movs	r3, #0
 80263c2:	4602      	mov	r2, r0
 80263c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80263c6:	6a21      	ldr	r1, [r4, #32]
 80263c8:	4628      	mov	r0, r5
 80263ca:	47b0      	blx	r6
 80263cc:	1c43      	adds	r3, r0, #1
 80263ce:	89a3      	ldrh	r3, [r4, #12]
 80263d0:	d106      	bne.n	80263e0 <__sflush_r+0x68>
 80263d2:	6829      	ldr	r1, [r5, #0]
 80263d4:	291d      	cmp	r1, #29
 80263d6:	d848      	bhi.n	802646a <__sflush_r+0xf2>
 80263d8:	4a29      	ldr	r2, [pc, #164]	; (8026480 <__sflush_r+0x108>)
 80263da:	40ca      	lsrs	r2, r1
 80263dc:	07d6      	lsls	r6, r2, #31
 80263de:	d544      	bpl.n	802646a <__sflush_r+0xf2>
 80263e0:	2200      	movs	r2, #0
 80263e2:	6062      	str	r2, [r4, #4]
 80263e4:	04d9      	lsls	r1, r3, #19
 80263e6:	6922      	ldr	r2, [r4, #16]
 80263e8:	6022      	str	r2, [r4, #0]
 80263ea:	d504      	bpl.n	80263f6 <__sflush_r+0x7e>
 80263ec:	1c42      	adds	r2, r0, #1
 80263ee:	d101      	bne.n	80263f4 <__sflush_r+0x7c>
 80263f0:	682b      	ldr	r3, [r5, #0]
 80263f2:	b903      	cbnz	r3, 80263f6 <__sflush_r+0x7e>
 80263f4:	6560      	str	r0, [r4, #84]	; 0x54
 80263f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80263f8:	602f      	str	r7, [r5, #0]
 80263fa:	2900      	cmp	r1, #0
 80263fc:	d0c9      	beq.n	8026392 <__sflush_r+0x1a>
 80263fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026402:	4299      	cmp	r1, r3
 8026404:	d002      	beq.n	802640c <__sflush_r+0x94>
 8026406:	4628      	mov	r0, r5
 8026408:	f7ff fa9a 	bl	8025940 <_free_r>
 802640c:	2000      	movs	r0, #0
 802640e:	6360      	str	r0, [r4, #52]	; 0x34
 8026410:	e7c0      	b.n	8026394 <__sflush_r+0x1c>
 8026412:	2301      	movs	r3, #1
 8026414:	4628      	mov	r0, r5
 8026416:	47b0      	blx	r6
 8026418:	1c41      	adds	r1, r0, #1
 802641a:	d1c8      	bne.n	80263ae <__sflush_r+0x36>
 802641c:	682b      	ldr	r3, [r5, #0]
 802641e:	2b00      	cmp	r3, #0
 8026420:	d0c5      	beq.n	80263ae <__sflush_r+0x36>
 8026422:	2b1d      	cmp	r3, #29
 8026424:	d001      	beq.n	802642a <__sflush_r+0xb2>
 8026426:	2b16      	cmp	r3, #22
 8026428:	d101      	bne.n	802642e <__sflush_r+0xb6>
 802642a:	602f      	str	r7, [r5, #0]
 802642c:	e7b1      	b.n	8026392 <__sflush_r+0x1a>
 802642e:	89a3      	ldrh	r3, [r4, #12]
 8026430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026434:	81a3      	strh	r3, [r4, #12]
 8026436:	e7ad      	b.n	8026394 <__sflush_r+0x1c>
 8026438:	690f      	ldr	r7, [r1, #16]
 802643a:	2f00      	cmp	r7, #0
 802643c:	d0a9      	beq.n	8026392 <__sflush_r+0x1a>
 802643e:	0793      	lsls	r3, r2, #30
 8026440:	680e      	ldr	r6, [r1, #0]
 8026442:	bf08      	it	eq
 8026444:	694b      	ldreq	r3, [r1, #20]
 8026446:	600f      	str	r7, [r1, #0]
 8026448:	bf18      	it	ne
 802644a:	2300      	movne	r3, #0
 802644c:	eba6 0807 	sub.w	r8, r6, r7
 8026450:	608b      	str	r3, [r1, #8]
 8026452:	f1b8 0f00 	cmp.w	r8, #0
 8026456:	dd9c      	ble.n	8026392 <__sflush_r+0x1a>
 8026458:	4643      	mov	r3, r8
 802645a:	463a      	mov	r2, r7
 802645c:	6a21      	ldr	r1, [r4, #32]
 802645e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026460:	4628      	mov	r0, r5
 8026462:	47b0      	blx	r6
 8026464:	2800      	cmp	r0, #0
 8026466:	dc06      	bgt.n	8026476 <__sflush_r+0xfe>
 8026468:	89a3      	ldrh	r3, [r4, #12]
 802646a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802646e:	81a3      	strh	r3, [r4, #12]
 8026470:	f04f 30ff 	mov.w	r0, #4294967295
 8026474:	e78e      	b.n	8026394 <__sflush_r+0x1c>
 8026476:	4407      	add	r7, r0
 8026478:	eba8 0800 	sub.w	r8, r8, r0
 802647c:	e7e9      	b.n	8026452 <__sflush_r+0xda>
 802647e:	bf00      	nop
 8026480:	20400001 	.word	0x20400001

08026484 <_fflush_r>:
 8026484:	b538      	push	{r3, r4, r5, lr}
 8026486:	690b      	ldr	r3, [r1, #16]
 8026488:	4605      	mov	r5, r0
 802648a:	460c      	mov	r4, r1
 802648c:	b1db      	cbz	r3, 80264c6 <_fflush_r+0x42>
 802648e:	b118      	cbz	r0, 8026498 <_fflush_r+0x14>
 8026490:	6983      	ldr	r3, [r0, #24]
 8026492:	b90b      	cbnz	r3, 8026498 <_fflush_r+0x14>
 8026494:	f000 f860 	bl	8026558 <__sinit>
 8026498:	4b0c      	ldr	r3, [pc, #48]	; (80264cc <_fflush_r+0x48>)
 802649a:	429c      	cmp	r4, r3
 802649c:	d109      	bne.n	80264b2 <_fflush_r+0x2e>
 802649e:	686c      	ldr	r4, [r5, #4]
 80264a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80264a4:	b17b      	cbz	r3, 80264c6 <_fflush_r+0x42>
 80264a6:	4621      	mov	r1, r4
 80264a8:	4628      	mov	r0, r5
 80264aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80264ae:	f7ff bf63 	b.w	8026378 <__sflush_r>
 80264b2:	4b07      	ldr	r3, [pc, #28]	; (80264d0 <_fflush_r+0x4c>)
 80264b4:	429c      	cmp	r4, r3
 80264b6:	d101      	bne.n	80264bc <_fflush_r+0x38>
 80264b8:	68ac      	ldr	r4, [r5, #8]
 80264ba:	e7f1      	b.n	80264a0 <_fflush_r+0x1c>
 80264bc:	4b05      	ldr	r3, [pc, #20]	; (80264d4 <_fflush_r+0x50>)
 80264be:	429c      	cmp	r4, r3
 80264c0:	bf08      	it	eq
 80264c2:	68ec      	ldreq	r4, [r5, #12]
 80264c4:	e7ec      	b.n	80264a0 <_fflush_r+0x1c>
 80264c6:	2000      	movs	r0, #0
 80264c8:	bd38      	pop	{r3, r4, r5, pc}
 80264ca:	bf00      	nop
 80264cc:	0802ba6c 	.word	0x0802ba6c
 80264d0:	0802ba8c 	.word	0x0802ba8c
 80264d4:	0802ba4c 	.word	0x0802ba4c

080264d8 <std>:
 80264d8:	2300      	movs	r3, #0
 80264da:	b510      	push	{r4, lr}
 80264dc:	4604      	mov	r4, r0
 80264de:	e9c0 3300 	strd	r3, r3, [r0]
 80264e2:	6083      	str	r3, [r0, #8]
 80264e4:	8181      	strh	r1, [r0, #12]
 80264e6:	6643      	str	r3, [r0, #100]	; 0x64
 80264e8:	81c2      	strh	r2, [r0, #14]
 80264ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80264ee:	6183      	str	r3, [r0, #24]
 80264f0:	4619      	mov	r1, r3
 80264f2:	2208      	movs	r2, #8
 80264f4:	305c      	adds	r0, #92	; 0x5c
 80264f6:	f7ff fa1a 	bl	802592e <memset>
 80264fa:	4b05      	ldr	r3, [pc, #20]	; (8026510 <std+0x38>)
 80264fc:	6263      	str	r3, [r4, #36]	; 0x24
 80264fe:	4b05      	ldr	r3, [pc, #20]	; (8026514 <std+0x3c>)
 8026500:	62a3      	str	r3, [r4, #40]	; 0x28
 8026502:	4b05      	ldr	r3, [pc, #20]	; (8026518 <std+0x40>)
 8026504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026506:	4b05      	ldr	r3, [pc, #20]	; (802651c <std+0x44>)
 8026508:	6224      	str	r4, [r4, #32]
 802650a:	6323      	str	r3, [r4, #48]	; 0x30
 802650c:	bd10      	pop	{r4, pc}
 802650e:	bf00      	nop
 8026510:	08026739 	.word	0x08026739
 8026514:	0802675b 	.word	0x0802675b
 8026518:	08026793 	.word	0x08026793
 802651c:	080267b7 	.word	0x080267b7

08026520 <_cleanup_r>:
 8026520:	4901      	ldr	r1, [pc, #4]	; (8026528 <_cleanup_r+0x8>)
 8026522:	f000 b885 	b.w	8026630 <_fwalk_reent>
 8026526:	bf00      	nop
 8026528:	08026485 	.word	0x08026485

0802652c <__sfmoreglue>:
 802652c:	b570      	push	{r4, r5, r6, lr}
 802652e:	1e4a      	subs	r2, r1, #1
 8026530:	2568      	movs	r5, #104	; 0x68
 8026532:	4355      	muls	r5, r2
 8026534:	460e      	mov	r6, r1
 8026536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802653a:	f7ff fa4f 	bl	80259dc <_malloc_r>
 802653e:	4604      	mov	r4, r0
 8026540:	b140      	cbz	r0, 8026554 <__sfmoreglue+0x28>
 8026542:	2100      	movs	r1, #0
 8026544:	e9c0 1600 	strd	r1, r6, [r0]
 8026548:	300c      	adds	r0, #12
 802654a:	60a0      	str	r0, [r4, #8]
 802654c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026550:	f7ff f9ed 	bl	802592e <memset>
 8026554:	4620      	mov	r0, r4
 8026556:	bd70      	pop	{r4, r5, r6, pc}

08026558 <__sinit>:
 8026558:	6983      	ldr	r3, [r0, #24]
 802655a:	b510      	push	{r4, lr}
 802655c:	4604      	mov	r4, r0
 802655e:	bb33      	cbnz	r3, 80265ae <__sinit+0x56>
 8026560:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8026564:	6503      	str	r3, [r0, #80]	; 0x50
 8026566:	4b12      	ldr	r3, [pc, #72]	; (80265b0 <__sinit+0x58>)
 8026568:	4a12      	ldr	r2, [pc, #72]	; (80265b4 <__sinit+0x5c>)
 802656a:	681b      	ldr	r3, [r3, #0]
 802656c:	6282      	str	r2, [r0, #40]	; 0x28
 802656e:	4298      	cmp	r0, r3
 8026570:	bf04      	itt	eq
 8026572:	2301      	moveq	r3, #1
 8026574:	6183      	streq	r3, [r0, #24]
 8026576:	f000 f81f 	bl	80265b8 <__sfp>
 802657a:	6060      	str	r0, [r4, #4]
 802657c:	4620      	mov	r0, r4
 802657e:	f000 f81b 	bl	80265b8 <__sfp>
 8026582:	60a0      	str	r0, [r4, #8]
 8026584:	4620      	mov	r0, r4
 8026586:	f000 f817 	bl	80265b8 <__sfp>
 802658a:	2200      	movs	r2, #0
 802658c:	60e0      	str	r0, [r4, #12]
 802658e:	2104      	movs	r1, #4
 8026590:	6860      	ldr	r0, [r4, #4]
 8026592:	f7ff ffa1 	bl	80264d8 <std>
 8026596:	2201      	movs	r2, #1
 8026598:	2109      	movs	r1, #9
 802659a:	68a0      	ldr	r0, [r4, #8]
 802659c:	f7ff ff9c 	bl	80264d8 <std>
 80265a0:	2202      	movs	r2, #2
 80265a2:	2112      	movs	r1, #18
 80265a4:	68e0      	ldr	r0, [r4, #12]
 80265a6:	f7ff ff97 	bl	80264d8 <std>
 80265aa:	2301      	movs	r3, #1
 80265ac:	61a3      	str	r3, [r4, #24]
 80265ae:	bd10      	pop	{r4, pc}
 80265b0:	0802ba10 	.word	0x0802ba10
 80265b4:	08026521 	.word	0x08026521

080265b8 <__sfp>:
 80265b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265ba:	4b1b      	ldr	r3, [pc, #108]	; (8026628 <__sfp+0x70>)
 80265bc:	681e      	ldr	r6, [r3, #0]
 80265be:	69b3      	ldr	r3, [r6, #24]
 80265c0:	4607      	mov	r7, r0
 80265c2:	b913      	cbnz	r3, 80265ca <__sfp+0x12>
 80265c4:	4630      	mov	r0, r6
 80265c6:	f7ff ffc7 	bl	8026558 <__sinit>
 80265ca:	3648      	adds	r6, #72	; 0x48
 80265cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80265d0:	3b01      	subs	r3, #1
 80265d2:	d503      	bpl.n	80265dc <__sfp+0x24>
 80265d4:	6833      	ldr	r3, [r6, #0]
 80265d6:	b133      	cbz	r3, 80265e6 <__sfp+0x2e>
 80265d8:	6836      	ldr	r6, [r6, #0]
 80265da:	e7f7      	b.n	80265cc <__sfp+0x14>
 80265dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80265e0:	b16d      	cbz	r5, 80265fe <__sfp+0x46>
 80265e2:	3468      	adds	r4, #104	; 0x68
 80265e4:	e7f4      	b.n	80265d0 <__sfp+0x18>
 80265e6:	2104      	movs	r1, #4
 80265e8:	4638      	mov	r0, r7
 80265ea:	f7ff ff9f 	bl	802652c <__sfmoreglue>
 80265ee:	6030      	str	r0, [r6, #0]
 80265f0:	2800      	cmp	r0, #0
 80265f2:	d1f1      	bne.n	80265d8 <__sfp+0x20>
 80265f4:	230c      	movs	r3, #12
 80265f6:	603b      	str	r3, [r7, #0]
 80265f8:	4604      	mov	r4, r0
 80265fa:	4620      	mov	r0, r4
 80265fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80265fe:	4b0b      	ldr	r3, [pc, #44]	; (802662c <__sfp+0x74>)
 8026600:	6665      	str	r5, [r4, #100]	; 0x64
 8026602:	e9c4 5500 	strd	r5, r5, [r4]
 8026606:	60a5      	str	r5, [r4, #8]
 8026608:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802660c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026610:	2208      	movs	r2, #8
 8026612:	4629      	mov	r1, r5
 8026614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026618:	f7ff f989 	bl	802592e <memset>
 802661c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026624:	e7e9      	b.n	80265fa <__sfp+0x42>
 8026626:	bf00      	nop
 8026628:	0802ba10 	.word	0x0802ba10
 802662c:	ffff0001 	.word	0xffff0001

08026630 <_fwalk_reent>:
 8026630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026634:	4680      	mov	r8, r0
 8026636:	4689      	mov	r9, r1
 8026638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802663c:	2600      	movs	r6, #0
 802663e:	b914      	cbnz	r4, 8026646 <_fwalk_reent+0x16>
 8026640:	4630      	mov	r0, r6
 8026642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026646:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802664a:	3f01      	subs	r7, #1
 802664c:	d501      	bpl.n	8026652 <_fwalk_reent+0x22>
 802664e:	6824      	ldr	r4, [r4, #0]
 8026650:	e7f5      	b.n	802663e <_fwalk_reent+0xe>
 8026652:	89ab      	ldrh	r3, [r5, #12]
 8026654:	2b01      	cmp	r3, #1
 8026656:	d907      	bls.n	8026668 <_fwalk_reent+0x38>
 8026658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802665c:	3301      	adds	r3, #1
 802665e:	d003      	beq.n	8026668 <_fwalk_reent+0x38>
 8026660:	4629      	mov	r1, r5
 8026662:	4640      	mov	r0, r8
 8026664:	47c8      	blx	r9
 8026666:	4306      	orrs	r6, r0
 8026668:	3568      	adds	r5, #104	; 0x68
 802666a:	e7ee      	b.n	802664a <_fwalk_reent+0x1a>

0802666c <__swhatbuf_r>:
 802666c:	b570      	push	{r4, r5, r6, lr}
 802666e:	460e      	mov	r6, r1
 8026670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026674:	2900      	cmp	r1, #0
 8026676:	b096      	sub	sp, #88	; 0x58
 8026678:	4614      	mov	r4, r2
 802667a:	461d      	mov	r5, r3
 802667c:	da07      	bge.n	802668e <__swhatbuf_r+0x22>
 802667e:	2300      	movs	r3, #0
 8026680:	602b      	str	r3, [r5, #0]
 8026682:	89b3      	ldrh	r3, [r6, #12]
 8026684:	061a      	lsls	r2, r3, #24
 8026686:	d410      	bmi.n	80266aa <__swhatbuf_r+0x3e>
 8026688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802668c:	e00e      	b.n	80266ac <__swhatbuf_r+0x40>
 802668e:	466a      	mov	r2, sp
 8026690:	f000 f8b8 	bl	8026804 <_fstat_r>
 8026694:	2800      	cmp	r0, #0
 8026696:	dbf2      	blt.n	802667e <__swhatbuf_r+0x12>
 8026698:	9a01      	ldr	r2, [sp, #4]
 802669a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802669e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80266a2:	425a      	negs	r2, r3
 80266a4:	415a      	adcs	r2, r3
 80266a6:	602a      	str	r2, [r5, #0]
 80266a8:	e7ee      	b.n	8026688 <__swhatbuf_r+0x1c>
 80266aa:	2340      	movs	r3, #64	; 0x40
 80266ac:	2000      	movs	r0, #0
 80266ae:	6023      	str	r3, [r4, #0]
 80266b0:	b016      	add	sp, #88	; 0x58
 80266b2:	bd70      	pop	{r4, r5, r6, pc}

080266b4 <__smakebuf_r>:
 80266b4:	898b      	ldrh	r3, [r1, #12]
 80266b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80266b8:	079d      	lsls	r5, r3, #30
 80266ba:	4606      	mov	r6, r0
 80266bc:	460c      	mov	r4, r1
 80266be:	d507      	bpl.n	80266d0 <__smakebuf_r+0x1c>
 80266c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80266c4:	6023      	str	r3, [r4, #0]
 80266c6:	6123      	str	r3, [r4, #16]
 80266c8:	2301      	movs	r3, #1
 80266ca:	6163      	str	r3, [r4, #20]
 80266cc:	b002      	add	sp, #8
 80266ce:	bd70      	pop	{r4, r5, r6, pc}
 80266d0:	ab01      	add	r3, sp, #4
 80266d2:	466a      	mov	r2, sp
 80266d4:	f7ff ffca 	bl	802666c <__swhatbuf_r>
 80266d8:	9900      	ldr	r1, [sp, #0]
 80266da:	4605      	mov	r5, r0
 80266dc:	4630      	mov	r0, r6
 80266de:	f7ff f97d 	bl	80259dc <_malloc_r>
 80266e2:	b948      	cbnz	r0, 80266f8 <__smakebuf_r+0x44>
 80266e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80266e8:	059a      	lsls	r2, r3, #22
 80266ea:	d4ef      	bmi.n	80266cc <__smakebuf_r+0x18>
 80266ec:	f023 0303 	bic.w	r3, r3, #3
 80266f0:	f043 0302 	orr.w	r3, r3, #2
 80266f4:	81a3      	strh	r3, [r4, #12]
 80266f6:	e7e3      	b.n	80266c0 <__smakebuf_r+0xc>
 80266f8:	4b0d      	ldr	r3, [pc, #52]	; (8026730 <__smakebuf_r+0x7c>)
 80266fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80266fc:	89a3      	ldrh	r3, [r4, #12]
 80266fe:	6020      	str	r0, [r4, #0]
 8026700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026704:	81a3      	strh	r3, [r4, #12]
 8026706:	9b00      	ldr	r3, [sp, #0]
 8026708:	6163      	str	r3, [r4, #20]
 802670a:	9b01      	ldr	r3, [sp, #4]
 802670c:	6120      	str	r0, [r4, #16]
 802670e:	b15b      	cbz	r3, 8026728 <__smakebuf_r+0x74>
 8026710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026714:	4630      	mov	r0, r6
 8026716:	f000 f887 	bl	8026828 <_isatty_r>
 802671a:	b128      	cbz	r0, 8026728 <__smakebuf_r+0x74>
 802671c:	89a3      	ldrh	r3, [r4, #12]
 802671e:	f023 0303 	bic.w	r3, r3, #3
 8026722:	f043 0301 	orr.w	r3, r3, #1
 8026726:	81a3      	strh	r3, [r4, #12]
 8026728:	89a3      	ldrh	r3, [r4, #12]
 802672a:	431d      	orrs	r5, r3
 802672c:	81a5      	strh	r5, [r4, #12]
 802672e:	e7cd      	b.n	80266cc <__smakebuf_r+0x18>
 8026730:	08026521 	.word	0x08026521

08026734 <__malloc_lock>:
 8026734:	4770      	bx	lr

08026736 <__malloc_unlock>:
 8026736:	4770      	bx	lr

08026738 <__sread>:
 8026738:	b510      	push	{r4, lr}
 802673a:	460c      	mov	r4, r1
 802673c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026740:	f000 f894 	bl	802686c <_read_r>
 8026744:	2800      	cmp	r0, #0
 8026746:	bfab      	itete	ge
 8026748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802674a:	89a3      	ldrhlt	r3, [r4, #12]
 802674c:	181b      	addge	r3, r3, r0
 802674e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026752:	bfac      	ite	ge
 8026754:	6563      	strge	r3, [r4, #84]	; 0x54
 8026756:	81a3      	strhlt	r3, [r4, #12]
 8026758:	bd10      	pop	{r4, pc}

0802675a <__swrite>:
 802675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802675e:	461f      	mov	r7, r3
 8026760:	898b      	ldrh	r3, [r1, #12]
 8026762:	05db      	lsls	r3, r3, #23
 8026764:	4605      	mov	r5, r0
 8026766:	460c      	mov	r4, r1
 8026768:	4616      	mov	r6, r2
 802676a:	d505      	bpl.n	8026778 <__swrite+0x1e>
 802676c:	2302      	movs	r3, #2
 802676e:	2200      	movs	r2, #0
 8026770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026774:	f000 f868 	bl	8026848 <_lseek_r>
 8026778:	89a3      	ldrh	r3, [r4, #12]
 802677a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802677e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026782:	81a3      	strh	r3, [r4, #12]
 8026784:	4632      	mov	r2, r6
 8026786:	463b      	mov	r3, r7
 8026788:	4628      	mov	r0, r5
 802678a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802678e:	f000 b817 	b.w	80267c0 <_write_r>

08026792 <__sseek>:
 8026792:	b510      	push	{r4, lr}
 8026794:	460c      	mov	r4, r1
 8026796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802679a:	f000 f855 	bl	8026848 <_lseek_r>
 802679e:	1c43      	adds	r3, r0, #1
 80267a0:	89a3      	ldrh	r3, [r4, #12]
 80267a2:	bf15      	itete	ne
 80267a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80267a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80267aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80267ae:	81a3      	strheq	r3, [r4, #12]
 80267b0:	bf18      	it	ne
 80267b2:	81a3      	strhne	r3, [r4, #12]
 80267b4:	bd10      	pop	{r4, pc}

080267b6 <__sclose>:
 80267b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80267ba:	f000 b813 	b.w	80267e4 <_close_r>
	...

080267c0 <_write_r>:
 80267c0:	b538      	push	{r3, r4, r5, lr}
 80267c2:	4c07      	ldr	r4, [pc, #28]	; (80267e0 <_write_r+0x20>)
 80267c4:	4605      	mov	r5, r0
 80267c6:	4608      	mov	r0, r1
 80267c8:	4611      	mov	r1, r2
 80267ca:	2200      	movs	r2, #0
 80267cc:	6022      	str	r2, [r4, #0]
 80267ce:	461a      	mov	r2, r3
 80267d0:	f7dc f879 	bl	80028c6 <_write>
 80267d4:	1c43      	adds	r3, r0, #1
 80267d6:	d102      	bne.n	80267de <_write_r+0x1e>
 80267d8:	6823      	ldr	r3, [r4, #0]
 80267da:	b103      	cbz	r3, 80267de <_write_r+0x1e>
 80267dc:	602b      	str	r3, [r5, #0]
 80267de:	bd38      	pop	{r3, r4, r5, pc}
 80267e0:	2000bb50 	.word	0x2000bb50

080267e4 <_close_r>:
 80267e4:	b538      	push	{r3, r4, r5, lr}
 80267e6:	4c06      	ldr	r4, [pc, #24]	; (8026800 <_close_r+0x1c>)
 80267e8:	2300      	movs	r3, #0
 80267ea:	4605      	mov	r5, r0
 80267ec:	4608      	mov	r0, r1
 80267ee:	6023      	str	r3, [r4, #0]
 80267f0:	f7dc f885 	bl	80028fe <_close>
 80267f4:	1c43      	adds	r3, r0, #1
 80267f6:	d102      	bne.n	80267fe <_close_r+0x1a>
 80267f8:	6823      	ldr	r3, [r4, #0]
 80267fa:	b103      	cbz	r3, 80267fe <_close_r+0x1a>
 80267fc:	602b      	str	r3, [r5, #0]
 80267fe:	bd38      	pop	{r3, r4, r5, pc}
 8026800:	2000bb50 	.word	0x2000bb50

08026804 <_fstat_r>:
 8026804:	b538      	push	{r3, r4, r5, lr}
 8026806:	4c07      	ldr	r4, [pc, #28]	; (8026824 <_fstat_r+0x20>)
 8026808:	2300      	movs	r3, #0
 802680a:	4605      	mov	r5, r0
 802680c:	4608      	mov	r0, r1
 802680e:	4611      	mov	r1, r2
 8026810:	6023      	str	r3, [r4, #0]
 8026812:	f7dc f880 	bl	8002916 <_fstat>
 8026816:	1c43      	adds	r3, r0, #1
 8026818:	d102      	bne.n	8026820 <_fstat_r+0x1c>
 802681a:	6823      	ldr	r3, [r4, #0]
 802681c:	b103      	cbz	r3, 8026820 <_fstat_r+0x1c>
 802681e:	602b      	str	r3, [r5, #0]
 8026820:	bd38      	pop	{r3, r4, r5, pc}
 8026822:	bf00      	nop
 8026824:	2000bb50 	.word	0x2000bb50

08026828 <_isatty_r>:
 8026828:	b538      	push	{r3, r4, r5, lr}
 802682a:	4c06      	ldr	r4, [pc, #24]	; (8026844 <_isatty_r+0x1c>)
 802682c:	2300      	movs	r3, #0
 802682e:	4605      	mov	r5, r0
 8026830:	4608      	mov	r0, r1
 8026832:	6023      	str	r3, [r4, #0]
 8026834:	f7dc f87f 	bl	8002936 <_isatty>
 8026838:	1c43      	adds	r3, r0, #1
 802683a:	d102      	bne.n	8026842 <_isatty_r+0x1a>
 802683c:	6823      	ldr	r3, [r4, #0]
 802683e:	b103      	cbz	r3, 8026842 <_isatty_r+0x1a>
 8026840:	602b      	str	r3, [r5, #0]
 8026842:	bd38      	pop	{r3, r4, r5, pc}
 8026844:	2000bb50 	.word	0x2000bb50

08026848 <_lseek_r>:
 8026848:	b538      	push	{r3, r4, r5, lr}
 802684a:	4c07      	ldr	r4, [pc, #28]	; (8026868 <_lseek_r+0x20>)
 802684c:	4605      	mov	r5, r0
 802684e:	4608      	mov	r0, r1
 8026850:	4611      	mov	r1, r2
 8026852:	2200      	movs	r2, #0
 8026854:	6022      	str	r2, [r4, #0]
 8026856:	461a      	mov	r2, r3
 8026858:	f7dc f878 	bl	800294c <_lseek>
 802685c:	1c43      	adds	r3, r0, #1
 802685e:	d102      	bne.n	8026866 <_lseek_r+0x1e>
 8026860:	6823      	ldr	r3, [r4, #0]
 8026862:	b103      	cbz	r3, 8026866 <_lseek_r+0x1e>
 8026864:	602b      	str	r3, [r5, #0]
 8026866:	bd38      	pop	{r3, r4, r5, pc}
 8026868:	2000bb50 	.word	0x2000bb50

0802686c <_read_r>:
 802686c:	b538      	push	{r3, r4, r5, lr}
 802686e:	4c07      	ldr	r4, [pc, #28]	; (802688c <_read_r+0x20>)
 8026870:	4605      	mov	r5, r0
 8026872:	4608      	mov	r0, r1
 8026874:	4611      	mov	r1, r2
 8026876:	2200      	movs	r2, #0
 8026878:	6022      	str	r2, [r4, #0]
 802687a:	461a      	mov	r2, r3
 802687c:	f7dc f806 	bl	800288c <_read>
 8026880:	1c43      	adds	r3, r0, #1
 8026882:	d102      	bne.n	802688a <_read_r+0x1e>
 8026884:	6823      	ldr	r3, [r4, #0]
 8026886:	b103      	cbz	r3, 802688a <_read_r+0x1e>
 8026888:	602b      	str	r3, [r5, #0]
 802688a:	bd38      	pop	{r3, r4, r5, pc}
 802688c:	2000bb50 	.word	0x2000bb50

08026890 <_init>:
 8026890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026892:	bf00      	nop
 8026894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026896:	bc08      	pop	{r3}
 8026898:	469e      	mov	lr, r3
 802689a:	4770      	bx	lr

0802689c <_fini>:
 802689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802689e:	bf00      	nop
 80268a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80268a2:	bc08      	pop	{r3}
 80268a4:	469e      	mov	lr, r3
 80268a6:	4770      	bx	lr
